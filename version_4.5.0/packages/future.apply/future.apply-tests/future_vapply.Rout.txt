
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:51:37.346] plan(<NULL>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.346] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.347] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.347] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.385] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:37.385] |  :  all.equal() for FutureStrategyList ...
[10:51:37.385] |  :  .  New stack:
[10:51:37.386] |  :  .  List of 1
[10:51:37.386] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.386] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.386] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.386] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.386] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.386] |  :  .    ..- attr(*, "call")= language future::plan("sequential")
[10:51:37.386] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.389] |  :  .  Old stack:
[10:51:37.389] |  :  .  List of 1
[10:51:37.389] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.389] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.389] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.389] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.389] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.389] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:37.389] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.391] |  :  .  Not identical
[10:51:37.392] |  :  .  all.equal() for future ...
[10:51:37.392] |  :  .  |  List of 2
[10:51:37.392] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.392] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.392] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.392] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.392] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.392] |  :  .  |    ..- attr(*, "call")= language future::plan("sequential")
[10:51:37.392] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.392] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.392] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.392] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.392] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.392] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:37.395] |  :  .  all.equal() for future ... done
[10:51:37.396] |  :  all.equal() for FutureStrategyList ... done
[10:51:37.396] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.396] |  :  List of future strategies:
[10:51:37.396] |  :  1. sequential:
[10:51:37.396] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.396] |  :     - tweaked: FALSE
[10:51:37.396] |  :     - call: plan(sequential)
[10:51:37.396] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:37.397] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
> 
> message("*** future_vapply() ...")
*** future_vapply() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   x <- NULL
+   fun <- is.factor
+   fun_name <- "is.factor"
+   fun_value <- logical(1L)
+   y0 <- vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   y2 <- future_vapply(x, FUN = fun_name, FUN.VALUE = fun_value)
+   str(y2)
+   stopifnot(all.equal(y2, y0))
+   
+   x <- list()
+   fun <- is.numeric
+   fun_value <- logical(1L)
+   y0 <- vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   
+   x <- integer()
+   fun <- identity
+   fun_value <- fun(integer(1L))
+   y0 <- vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   
+   
+   df <- data.frame(x = 1:10, y = letters[1:10], stringsAsFactors=FALSE)
+   fun <- class
+   fun_value <- character(1L)
+   y0 <- vapply(df, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(df, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   
+   x <- 1:10
+   fun <- function(x) double(0L)
+   fun_value <- fun(double(1L))
+   y0 <- vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   
+   fun <- function(x) integer(0L)
+   fun_value <- fun(double(1L))
+   y0 <- vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   
+   fun <- sqrt
+   fun_value <- fun(double(1L))
+   y0 <- vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   
+   fun <- function(x) c(x, x^2)
+   fun_value <- fun(double(1L))
+   y0 <- vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   
+   fun <- function(x) matrix(x, nrow = 2L, ncol = 2L)
+   fun_value <- fun(integer(1L))
+   y0 <- vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   
+   fun <- function(x) matrix(x, nrow = 2L, ncol = 2L)
+   fun_value <- fun(double(1L))
+   y0 <- vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+ 
+   ## Ditto with dimnames on FUN.VALUE
+   fun <- function(x) {
+     matrix(x, nrow = 2L, ncol = 2L, dimnames = list(c("a", "b"), c("A", "B")))
+   }
+   fun_value <- fun(double(1L))
+   y0 <- vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y0)
+   y1 <- future_vapply(x, FUN = fun, FUN.VALUE = fun_value)
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   
+   message("- From example(vapply) ...")
+   x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE, FALSE, FALSE, TRUE))
+   y0 <- vapply(x, FUN = quantile, FUN.VALUE = double(5L))
+   y1 <- future_vapply(x, FUN = quantile, FUN.VALUE = double(5L))
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+   
+   i39 <- sapply(3:9, seq)
+   ys0 <- sapply(i39, fivenum)
+   ys1 <- future_sapply(i39, fivenum)
+   stopifnot(all.equal(ys1, ys0))
+   
+   yv0 <- vapply(i39, fivenum,
+           c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
+   yv1 <- future_vapply(i39, fivenum,
+          c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
+   str(yv1)
+   stopifnot(all.equal(yv1, yv0))
+   
+   v <- structure(10*(5:8), names = LETTERS[1:4])
+   f <- function(x, y) outer(rep(x, length.out = 3L), y)
+   ys0 <- sapply(v, f, y = 2*(1:5), simplify = "array")
+   ys1 <- future_sapply(v, f, y = 2*(1:5), simplify = "array")
+   stopifnot(all.equal(ys1, ys0))
+   
+   fv <- outer(1:3, 1:5)
+   y <- 2*(1:5)
+   yv0 <- vapply(v, f, fv, y = y)
+   yv1 <- future_vapply(v, f, fv, y = y)
+   str(yv1)
+   stopifnot(all.equal(yv1, yv0))
+   
+   y0 <- vapply(mtcars, FUN = is.numeric, FUN.VALUE = logical(1L))
+   y1 <- future_vapply(mtcars, FUN = is.numeric, FUN.VALUE = logical(1L))
+   str(y1)
+   stopifnot(all.equal(y1, y0))
+ 
+   message("- future_vapply(x, ...) where length(x) != length(as.list(x)) ...")
+   x <- structure(list(a = 1, b = 2), class = "Foo")
+   as.list.Foo <- function(x, ...) c(x, c = 3)
+   y0 <- vapply(x, FUN = length, FUN.VALUE = -1L)
+   y1 <- future_vapply(x, FUN = length, FUN.VALUE = -1L)
+   stopifnot(identical(y1, y0))
+ 
+   message("- exceptions ...")
+   res <- tryCatch({
+     y0 <- vapply(1:3, FUN = identity, FUN.VALUE = c(3, 3))
+   }, error = identity)
+   stopifnot(inherits(res, "error"))
+   res <- tryCatch({
+     y1 <- future_vapply(1:3, FUN = identity, FUN.VALUE = c(3, 3))
+   }, error = identity)
+   stopifnot(inherits(res, "error"))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[10:51:37.507] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.508] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:37.508] |  :  all.equal() for FutureStrategyList ...
[10:51:37.508] |  :  .  New stack:
[10:51:37.508] |  :  .  List of 1
[10:51:37.508] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.508] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.508] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.508] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.508] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.508] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:37.508] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.510] |  :  .  Old stack:
[10:51:37.510] |  :  .  List of 1
[10:51:37.510] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.510] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.510] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.510] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.510] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.510] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:37.510] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.512] |  :  .  Not identical
[10:51:37.512] |  :  .  all.equal() for future ...
[10:51:37.513] |  :  .  |  List of 2
[10:51:37.513] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.513] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.513] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.513] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.513] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.513] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:37.513] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.513] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.513] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.513] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.513] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.513] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:37.516] |  :  .  all.equal() for future ... done
[10:51:37.516] |  :  all.equal() for FutureStrategyList ... done
[10:51:37.516] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.517] |  :  List of future strategies:
[10:51:37.517] |  :  1. sequential:
[10:51:37.517] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.517] |  :     - tweaked: FALSE
[10:51:37.517] |  :     - call: plan(sequential)
[10:51:37.517] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:37.517] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
 logi(0) 
 logi(0) 
 logi(0) 
 logi(0) 
 logi(0) 
 int(0) 
 int(0) 
 Named chr [1:2] "integer" "character"
 - attr(*, "names")= chr [1:2] "x" "y"
[10:51:37.520] future_lapply() ...
[10:51:37.529] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.529] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.530] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.530] Backend function: <‘NULL’>
[10:51:37.530] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:37.530] Number of chunks: 1
[10:51:37.531] getGlobalsAndPackagesXApply() ...
[10:51:37.531]  - future.globals: TRUE
[10:51:37.531] getGlobalsAndPackages() ...
[10:51:37.531] |  Searching for globals ...
[10:51:37.535] |  :  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:37.535] |  Searching for globals ... DONE
[10:51:37.536] |  Resolving globals: FALSE
[10:51:37.536] |  Search for packages associated with the globals ...
[10:51:37.536] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:37.537] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:37.537] |  Search for packages associated with the globals ... DONE
[10:51:37.537] |  The total size of the 7 globals is 12.01 KiB (12294 bytes)
[10:51:37.538] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.01 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.02 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:37.538] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.538] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.538] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.538] |  packages: [1] ‘future.apply’
[10:51:37.538] getGlobalsAndPackages() ... done
[10:51:37.539]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.539]  - needed namespaces: [n=1] ‘future.apply’
[10:51:37.539] Finding globals ... DONE
[10:51:37.539]  - use_args: TRUE
[10:51:37.539]  - Getting '...' globals ...
[10:51:37.540] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:37.540] |  recursive: 0
[10:51:37.540] |  length: 1
[10:51:37.540] |  elements: ‘...’
[10:51:37.540] |  'obj' is DotDotDotList
[10:51:37.540] |  resolve(obj, ...) ...
[10:51:37.541] |  resolve(obj, ...) ... done
[10:51:37.541] |  length: 0 (resolved future 1)
[10:51:37.541] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:37.541]    - '...' content: [n=0] 
[10:51:37.541] List of 1
[10:51:37.541]  $ ...: list()
[10:51:37.541]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.541]  - attr(*, "where")=List of 1
[10:51:37.541]   ..$ ...:<environment: 0x55d4655f0a58> 
[10:51:37.541]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.541]  - attr(*, "resolved")= logi TRUE
[10:51:37.541]  - attr(*, "total_size")= num NA
[10:51:37.543]  - Getting '...' globals ... DONE
[10:51:37.544] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:37.544] List of 8
[10:51:37.544]  $ ...future.FUN:function (x, ...)  
[10:51:37.544]  $ x_FUN        :function (x)  
[10:51:37.544]  $ times        : int 1
[10:51:37.544]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.544]  $ stop_if_not  :function (...)  
[10:51:37.544]  $ dim          : NULL
[10:51:37.544]  $ valid_types  : chr "character"
[10:51:37.544]  $ ...          : list()
[10:51:37.544]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.544]  - attr(*, "where")=List of 8
[10:51:37.544]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:37.544]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:37.544]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:37.544]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:37.544]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:37.544]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:37.544]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:37.544]   ..$ ...          :<environment: 0x55d4655f0a58> 
[10:51:37.544]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.544]  - attr(*, "resolved")= logi FALSE
[10:51:37.544]  - attr(*, "total_size")= num 22333
[10:51:37.549] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:37.549] getGlobalsAndPackagesXApply() ... DONE
[10:51:37.550] Number of futures (= number of chunks): 1
[10:51:37.551] Launching 1 futures (chunks) ...
[10:51:37.551] Chunk #1 of 1 ...
[10:51:37.552]  - Finding globals in 'X' for chunk #1 ...
[10:51:37.552] getGlobalsAndPackages() ...
[10:51:37.552] |  Searching for globals ...
[10:51:37.552] |  :  globals found: [0] 
[10:51:37.552] |  Searching for globals ... DONE
[10:51:37.552] |  globals: [0] <none>
[10:51:37.553] |  packages: [0] <none>
[10:51:37.553] getGlobalsAndPackages() ... done
[10:51:37.553]    + additional globals found: [n=0] 
[10:51:37.553]    + additional namespaces needed: [n=0] 
[10:51:37.553]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:37.553]  - seeds: <none>
[10:51:37.553]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.553] getGlobalsAndPackages() ...
[10:51:37.553] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.553] |  Resolving globals: FALSE
[10:51:37.553] |  Tweak future expression to call with '...' arguments ...
[10:51:37.554] |  :  {
[10:51:37.554] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.554] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:37.554] |  :      "# as a global variable                                         "
[10:51:37.554] |  :      do.call(function(...) {
[10:51:37.554] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.554] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:37.554] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:37.554] |  :          "# anonymous function.                                          "
[10:51:37.554] |  :          "#                                                              "
[10:51:37.554] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:37.554] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:37.554] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.554] |  :          "# global environment, which is where globals are written.      "
[10:51:37.554] |  :          penv <- env <- environment(...future.FUN)
[10:51:37.554] |  :          repeat {
[10:51:37.554] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:37.554] |  :                  emptyenv())) 
[10:51:37.554] |  :                  break
[10:51:37.554] |  :              penv <- env
[10:51:37.554] |  :              env <- parent.env(env)
[10:51:37.554] |  :          }
[10:51:37.554] |  :          if (identical(penv, globalenv())) {
[10:51:37.554] |  :              environment(...future.FUN) <- environment()
[10:51:37.554] |  :          }
[10:51:37.554] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.554] |  :              !isNamespace(penv)) {
[10:51:37.554] |  :              parent.env(penv) <- environment()
[10:51:37.554] |  :          }
[10:51:37.554] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.554] |  :          {
[10:51:37.554] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.554] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.554] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.554] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:37.554] |  :              }
[10:51:37.554] |  :              {
[10:51:37.554] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.554] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.554] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:37.554] |  :                  })
[10:51:37.554] |  :              }
[10:51:37.554] |  :          }
[10:51:37.554] |  :      }, args = future.call.arguments)
[10:51:37.554] |  :  }
[10:51:37.554] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:37.554] |  Search for packages associated with the globals ...
[10:51:37.554] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:37.555] |  :  Packages: [1] ‘future.apply’
[10:51:37.555] |  Search for packages associated with the globals ... DONE
[10:51:37.555] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.555] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.555] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.555] |  packages: [1] ‘future.apply’
[10:51:37.555] getGlobalsAndPackages() ... done
[10:51:37.556] run() for Future (‘Future’) ...
[10:51:37.556] |  state: ‘created’
[10:51:37.556] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.556] |  :  makeFutureBackend(<sequential>) ...
[10:51:37.557] |  :  .  Backend function: <‘NULL’>
[10:51:37.557] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:37.557] |  :  makeFutureBackend(<sequential>) ... done
[10:51:37.557] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.557] |  Using SequentialFutureBackend ...
[10:51:37.557] |  :  Launching futures ...
[10:51:37.557] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:37.558] |  :  .  |  getFutureData() ...
[10:51:37.558] |  :  .  |  :  getFutureCore() ...
[10:51:37.558] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:37.558] |  :  .  |  :  getFutureCore() ... done
[10:51:37.558] |  :  .  |  :  getFutureCapture() ...
[10:51:37.558] |  :  .  |  :  getFutureCapture() ... done
[10:51:37.558] |  :  .  |  :  getFutureContext() ...
[10:51:37.558] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.559] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:37.559] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.559] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:37.559] |  :  .  |  :  getFutureContext() ... done
[10:51:37.559] |  :  .  |  getFutureData() ... done
[10:51:37.560] |  :  .  |  attachPackages() ...
[10:51:37.560] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:37.560] |  :  .  |  attachPackages() ... DONE
[10:51:37.560] |  :  .  |  attachPackages() ...
[10:51:37.561] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:37.561] |  :  .  |  attachPackages() ... DONE
[10:51:37.561] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.561] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.561] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.562] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.562] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.562] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:37.562] |  :  .  |  :  .  |  New stack:
[10:51:37.562] |  :  .  |  :  .  |  List of 1
[10:51:37.562] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.562] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.562] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.562] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.562] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.562] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.562] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.564] |  :  .  |  :  .  |  Old stack:
[10:51:37.565] |  :  .  |  :  .  |  List of 1
[10:51:37.565] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.565] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.565] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.565] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.565] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.565] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:37.565] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.565] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.565] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.565] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.568] |  :  .  |  :  .  |  Not identical
[10:51:37.568] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:37.568] |  :  .  |  :  .  |  :  List of 2
[10:51:37.568] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.568] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.568] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.568] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.568] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.568] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.568] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.568] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.568] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.568] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.568] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.568] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.568] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.568] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.568] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.573] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:37.573] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:37.573] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.573] |  :  .  |  :  .  List of future strategies:
[10:51:37.573] |  :  .  |  :  .  1. sequential:
[10:51:37.573] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.573] |  :  .  |  :  .     - tweaked: FALSE
[10:51:37.573] |  :  .  |  :  .     - call: plan(sequential)
[10:51:37.574] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.574] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.574] |  :  .  |  assign_globals() ...
[10:51:37.574] |  :  .  |  List of 11
[10:51:37.574] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:37.574] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:37.574] |  :  .  |   $ times                    : int 1
[10:51:37.574] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.574] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:37.574] |  :  .  |   $ dim                      : NULL
[10:51:37.574] |  :  .  |   $ valid_types              : chr "character"
[10:51:37.574] |  :  .  |   $ future.call.arguments    : list()
[10:51:37.574] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.574] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:37.574] |  :  .  |    ..$ x: int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:51:37.574] |  :  .  |    ..$ y: chr [1:10] "a" "b" "c" "d" ...
[10:51:37.574] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:37.574] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:37.574] |  :  .  |   - attr(*, "where")=List of 11
[10:51:37.574] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:37.574] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:37.574] |  :  .  |   - attr(*, "total_size")= num 22333
[10:51:37.574] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.574] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:37.585] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:37.585] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:37.585] |  :  .  |  - copied ‘times’ to environment
[10:51:37.585] |  :  .  |  - copied ‘stopf’ to environment
[10:51:37.585] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:37.585] |  :  .  |  - copied ‘dim’ to environment
[10:51:37.585] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:37.586] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:37.586] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:37.586] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:37.586] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:37.586] |  :  .  |  assign_globals() ... done
[10:51:37.589] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.589] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.589] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.589] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:37.589] |  :  .  |  :  .  |  :  New stack:
[10:51:37.590] |  :  .  |  :  .  |  :  List of 1
[10:51:37.590] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.590] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.590] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.590] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.590] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.590] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.590] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.590] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.590] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.590] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.593] |  :  .  |  :  .  |  :  Old stack:
[10:51:37.593] |  :  .  |  :  .  |  :  List of 1
[10:51:37.593] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.593] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.593] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.593] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.593] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.593] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.593] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.593] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.593] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.593] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.596] |  :  .  |  :  .  |  :  Identical
[10:51:37.596] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:37.596] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.596] |  :  .  |  :  .  |  List of future strategies:
[10:51:37.596] |  :  .  |  :  .  |  1. sequential:
[10:51:37.596] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.596] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:37.596] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:37.596] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.597] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.597] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.597] |  :  .  |  SequentialFuture started (and completed)
[10:51:37.597] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:37.597] |  :  Launching futures ... done
[10:51:37.598] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.598] |  Using SequentialFutureBackend ... done
[10:51:37.598] run() for Future (‘SequentialFuture’) ... done
[10:51:37.598] Created future:
[10:51:37.598] SequentialFuture:
[10:51:37.598] Label: ‘future_vapply-1’
[10:51:37.598] Expression:
[10:51:37.598] {
[10:51:37.598]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.598]     "# expression in do.call(), because function called uses '...'  "
[10:51:37.598]     "# as a global variable                                         "
[10:51:37.598]     do.call(function(...) {
[10:51:37.598]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.598]         "# without having an '...' argument. This means '...' is treated"
[10:51:37.598]         "# as a global variable. This may happen when FUN() is an       "
[10:51:37.598]         "# anonymous function.                                          "
[10:51:37.598]         "#                                                              "
[10:51:37.598]         "# If an anonymous function, we will make sure to restore the   "
[10:51:37.598]         "# function environment of FUN() to the calling environment.    "
[10:51:37.598]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.598]         "# global environment, which is where globals are written.      "
[10:51:37.598]         penv <- env <- environment(...future.FUN)
[10:51:37.598]         repeat {
[10:51:37.598]             if (identical(env, globalenv()) || identical(env, 
[10:51:37.598]                 emptyenv())) 
[10:51:37.598]                 break
[10:51:37.598]             penv <- env
[10:51:37.598]             env <- parent.env(env)
[10:51:37.598]         }
[10:51:37.598]         if (identical(penv, globalenv())) {
[10:51:37.598]             environment(...future.FUN) <- environment()
[10:51:37.598]         }
[10:51:37.598]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.598]             !isNamespace(penv)) {
[10:51:37.598]             parent.env(penv) <- environment()
[10:51:37.598]         }
[10:51:37.598]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.598]         {
[10:51:37.598]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.598]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.598]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.598]                 on.exit(options(oopts), add = TRUE)
[10:51:37.598]             }
[10:51:37.598]             {
[10:51:37.598]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.598]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.598]                   ...future.FUN(...future.X_jj, ...)
[10:51:37.598]                 })
[10:51:37.598]             }
[10:51:37.598]         }
[10:51:37.598]     }, args = future.call.arguments)
[10:51:37.598] }
[10:51:37.598] Lazy evaluation: FALSE
[10:51:37.598] Asynchronous evaluation: TRUE
[10:51:37.598] Local evaluation: TRUE
[10:51:37.598] Environment: R_GlobalEnv
[10:51:37.598] Capture standard output: TRUE
[10:51:37.598] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:37.598] Immediate condition classes: ‘immediateCondition’
[10:51:37.598] Globals: 11 objects totaling 12.43 KiB (function ‘...future.FUN’ of 4.02 KiB, function ‘x_FUN’ of 36 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:37.598] Packages: 1 packages (‘future.apply’)
[10:51:37.598] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:37.598] Resolved: TRUE
[10:51:37.598] Value: 79 bytes of class ‘list’
[10:51:37.598] Early signaling: FALSE
[10:51:37.598] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:37.598] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.600] Chunk #1 of 1 ... DONE
[10:51:37.600] Launching 1 futures (chunks) ... DONE
[10:51:37.600] Resolving 1 futures (chunks) ...
[10:51:37.602] value() on list ...
[10:51:37.602] |  recursive: 0
[10:51:37.602] |  length: 1
[10:51:37.602] |  
[10:51:37.602] |  Number of remaining objects: 1
[10:51:37.603] |  checking value #1 ...
[10:51:37.603] |  :  'obj' is SequentialFuture
[10:51:37.603] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:37.603] |  :  .  state: ‘finished’
[10:51:37.603] |  :  .  run: TRUE
[10:51:37.603] |  :  .  result: ‘FutureResult’
[10:51:37.603] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:37.603] |  :  SequentialFuture #1
[10:51:37.603] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.604] |  :  .  nx: 1
[10:51:37.604] |  :  .  relay: TRUE
[10:51:37.604] |  :  .  stdout: TRUE
[10:51:37.604] |  :  .  signal: TRUE
[10:51:37.604] |  :  .  resignal: FALSE
[10:51:37.604] |  :  .  force: TRUE
[10:51:37.604] |  :  .  relayed: [n=1] FALSE
[10:51:37.604] |  :  .  queued futures: [n=1] FALSE
[10:51:37.604] |  :  .  until=1
[10:51:37.604] |  :  .  relaying element #1
[10:51:37.605] |  :  .  relayed: [n=1] TRUE
[10:51:37.605] |  :  .  queued futures: [n=1] TRUE
[10:51:37.605] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.605] |  :  value(<SequentialFuture>, ...) ...
[10:51:37.605] |  :  .  value: <list>
[10:51:37.605] |  :  value(<SequentialFuture>, ...) ... done
[10:51:37.605] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.606] |  :  .  nx: 1
[10:51:37.606] |  :  .  relay: TRUE
[10:51:37.606] |  :  .  stdout: TRUE
[10:51:37.606] |  :  .  signal: TRUE
[10:51:37.606] |  :  .  resignal: FALSE
[10:51:37.606] |  :  .  force: TRUE
[10:51:37.606] |  :  .  relayed: [n=1] TRUE
[10:51:37.606] |  :  .  queued futures: [n=1] TRUE
[10:51:37.606] |  :  .  until=1
[10:51:37.606] |  :  .  relayed: [n=1] TRUE
[10:51:37.606] |  :  .  queued futures: [n=1] TRUE
[10:51:37.606] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.607] |  :  length: 0 (resolved future 1)
[10:51:37.607] |  checking value #1 ... done
[10:51:37.607] |  Relaying remaining futures ...
[10:51:37.607] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:37.607] |  :  .  nx: 1
[10:51:37.607] |  :  .  relay: TRUE
[10:51:37.607] |  :  .  stdout: TRUE
[10:51:37.607] |  :  .  signal: TRUE
[10:51:37.607] |  :  .  resignal: FALSE
[10:51:37.608] |  :  .  force: TRUE
[10:51:37.608] |  :  .  relayed: [n=1] TRUE
[10:51:37.608] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:37.608] |  :  .  relayed: [n=1] TRUE
[10:51:37.608] |  :  .  queued futures: [n=1] TRUE
[10:51:37.608] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:37.608] |  Relaying remaining futures ... done
[10:51:37.608] value() on list ... done
[10:51:37.608]  - Number of value chunks collected: 1
[10:51:37.608] Resolving 1 futures (chunks) ... DONE
[10:51:37.608] Reducing values from 1 chunks ...
[10:51:37.609]  - Number of values collected after concatenation: 2
[10:51:37.609]  - Number of values expected: 2
[10:51:37.609] Reducing values from 1 chunks ... DONE
[10:51:37.609] future_lapply() ... DONE
 Named chr [1:2] "integer" "character"
 - attr(*, "names")= chr [1:2] "x" "y"
 num[0 , 1:10] 
[10:51:37.610] future_lapply() ...
[10:51:37.612] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.612] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.612] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.612] Number of chunks: 1
[10:51:37.612] getGlobalsAndPackagesXApply() ...
[10:51:37.612]  - future.globals: TRUE
[10:51:37.613] getGlobalsAndPackages() ...
[10:51:37.613] |  Searching for globals ...
[10:51:37.616] |  :  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘double’
[10:51:37.617] |  Searching for globals ... DONE
[10:51:37.617] |  Resolving globals: FALSE
[10:51:37.617] |  Search for packages associated with the globals ...
[10:51:37.617] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:37.618] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:37.618] |  Search for packages associated with the globals ... DONE
[10:51:37.618] |  The total size of the 7 globals is 12.77 KiB (13081 bytes)
[10:51:37.618] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.77 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:37.618] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.619] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.619] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.619] |  packages: [1] ‘future.apply’
[10:51:37.619] getGlobalsAndPackages() ... done
[10:51:37.619]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.619]  - needed namespaces: [n=1] ‘future.apply’
[10:51:37.619] Finding globals ... DONE
[10:51:37.619]  - use_args: TRUE
[10:51:37.619]  - Getting '...' globals ...
[10:51:37.620] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:37.620] |  recursive: 0
[10:51:37.620] |  length: 1
[10:51:37.620] |  elements: ‘...’
[10:51:37.620] |  'obj' is DotDotDotList
[10:51:37.620] |  resolve(obj, ...) ...
[10:51:37.620] |  resolve(obj, ...) ... done
[10:51:37.620] |  length: 0 (resolved future 1)
[10:51:37.621] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:37.621]    - '...' content: [n=0] 
[10:51:37.621] List of 1
[10:51:37.621]  $ ...: list()
[10:51:37.621]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.621]  - attr(*, "where")=List of 1
[10:51:37.621]   ..$ ...:<environment: 0x55d46441a588> 
[10:51:37.621]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.621]  - attr(*, "resolved")= logi TRUE
[10:51:37.621]  - attr(*, "total_size")= num NA
[10:51:37.624]  - Getting '...' globals ... DONE
[10:51:37.625] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:37.625] List of 8
[10:51:37.625]  $ ...future.FUN:function (x, ...)  
[10:51:37.625]  $ x_FUN        :function (x)  
[10:51:37.625]  $ times        : int 0
[10:51:37.625]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.625]  $ stop_if_not  :function (...)  
[10:51:37.625]  $ dim          : NULL
[10:51:37.625]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:37.625]  $ ...          : list()
[10:51:37.625]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.625]  - attr(*, "where")=List of 8
[10:51:37.625]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:37.625]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:37.625]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:37.625]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:37.625]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:37.625]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:37.625]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:37.625]   ..$ ...          :<environment: 0x55d46441a588> 
[10:51:37.625]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.625]  - attr(*, "resolved")= logi FALSE
[10:51:37.625]  - attr(*, "total_size")= num 23490
[10:51:37.630] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:37.630] getGlobalsAndPackagesXApply() ... DONE
[10:51:37.630] Number of futures (= number of chunks): 1
[10:51:37.631] Launching 1 futures (chunks) ...
[10:51:37.631] Chunk #1 of 1 ...
[10:51:37.631]  - Finding globals in 'X' for chunk #1 ...
[10:51:37.631] getGlobalsAndPackages() ...
[10:51:37.631] |  Searching for globals ...
[10:51:37.631] |  :  globals found: [0] 
[10:51:37.631] |  Searching for globals ... DONE
[10:51:37.631] |  globals: [0] <none>
[10:51:37.632] |  packages: [0] <none>
[10:51:37.632] getGlobalsAndPackages() ... done
[10:51:37.632]    + additional globals found: [n=0] 
[10:51:37.632]    + additional namespaces needed: [n=0] 
[10:51:37.632]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:37.632]  - seeds: <none>
[10:51:37.632]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.632] getGlobalsAndPackages() ...
[10:51:37.632] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.632] |  Resolving globals: FALSE
[10:51:37.632] |  Tweak future expression to call with '...' arguments ...
[10:51:37.633] |  :  {
[10:51:37.633] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.633] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:37.633] |  :      "# as a global variable                                         "
[10:51:37.633] |  :      do.call(function(...) {
[10:51:37.633] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.633] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:37.633] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:37.633] |  :          "# anonymous function.                                          "
[10:51:37.633] |  :          "#                                                              "
[10:51:37.633] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:37.633] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:37.633] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.633] |  :          "# global environment, which is where globals are written.      "
[10:51:37.633] |  :          penv <- env <- environment(...future.FUN)
[10:51:37.633] |  :          repeat {
[10:51:37.633] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:37.633] |  :                  emptyenv())) 
[10:51:37.633] |  :                  break
[10:51:37.633] |  :              penv <- env
[10:51:37.633] |  :              env <- parent.env(env)
[10:51:37.633] |  :          }
[10:51:37.633] |  :          if (identical(penv, globalenv())) {
[10:51:37.633] |  :              environment(...future.FUN) <- environment()
[10:51:37.633] |  :          }
[10:51:37.633] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.633] |  :              !isNamespace(penv)) {
[10:51:37.633] |  :              parent.env(penv) <- environment()
[10:51:37.633] |  :          }
[10:51:37.633] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.633] |  :          {
[10:51:37.633] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.633] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.633] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.633] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:37.633] |  :              }
[10:51:37.633] |  :              {
[10:51:37.633] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.633] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.633] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:37.633] |  :                  })
[10:51:37.633] |  :              }
[10:51:37.633] |  :          }
[10:51:37.633] |  :      }, args = future.call.arguments)
[10:51:37.633] |  :  }
[10:51:37.633] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:37.633] |  Search for packages associated with the globals ...
[10:51:37.633] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:37.634] |  :  Packages: [1] ‘future.apply’
[10:51:37.634] |  Search for packages associated with the globals ... DONE
[10:51:37.634] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.634] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.634] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.634] |  packages: [1] ‘future.apply’
[10:51:37.634] getGlobalsAndPackages() ... done
[10:51:37.635] run() for Future (‘Future’) ...
[10:51:37.635] |  state: ‘created’
[10:51:37.635] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.635] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.635] |  Using SequentialFutureBackend ...
[10:51:37.635] |  :  Launching futures ...
[10:51:37.635] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:37.635] |  :  .  |  getFutureData() ...
[10:51:37.635] |  :  .  |  :  getFutureCore() ...
[10:51:37.636] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:37.636] |  :  .  |  :  getFutureCore() ... done
[10:51:37.636] |  :  .  |  :  getFutureCapture() ...
[10:51:37.636] |  :  .  |  :  getFutureCapture() ... done
[10:51:37.636] |  :  .  |  :  getFutureContext() ...
[10:51:37.636] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.636] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:37.636] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.636] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:37.636] |  :  .  |  :  getFutureContext() ... done
[10:51:37.637] |  :  .  |  getFutureData() ... done
[10:51:37.637] |  :  .  |  attachPackages() ...
[10:51:37.637] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:37.637] |  :  .  |  attachPackages() ... DONE
[10:51:37.637] |  :  .  |  attachPackages() ...
[10:51:37.637] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:37.637] |  :  .  |  attachPackages() ... DONE
[10:51:37.638] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.638] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.638] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.638] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.638] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.638] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:37.638] |  :  .  |  :  .  |  New stack:
[10:51:37.639] |  :  .  |  :  .  |  List of 1
[10:51:37.639] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.639] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.639] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.639] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.639] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.639] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.639] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.641] |  :  .  |  :  .  |  Old stack:
[10:51:37.641] |  :  .  |  :  .  |  List of 1
[10:51:37.641] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.641] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.641] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.641] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.641] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.641] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:37.641] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.641] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.641] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.641] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.645] |  :  .  |  :  .  |  Not identical
[10:51:37.645] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:37.645] |  :  .  |  :  .  |  :  List of 2
[10:51:37.645] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.645] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.645] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.645] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.645] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.645] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.645] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.645] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.645] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.645] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.645] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.645] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.645] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.645] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.645] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.649] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:37.649] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:37.650] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.650] |  :  .  |  :  .  List of future strategies:
[10:51:37.650] |  :  .  |  :  .  1. sequential:
[10:51:37.650] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.650] |  :  .  |  :  .     - tweaked: FALSE
[10:51:37.650] |  :  .  |  :  .     - call: plan(sequential)
[10:51:37.650] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.650] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.650] |  :  .  |  assign_globals() ...
[10:51:37.650] |  :  .  |  List of 11
[10:51:37.650] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:37.650] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:37.650] |  :  .  |   $ times                    : int 0
[10:51:37.650] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.650] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:37.650] |  :  .  |   $ dim                      : NULL
[10:51:37.650] |  :  .  |   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:37.650] |  :  .  |   $ future.call.arguments    : list()
[10:51:37.650] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.650] |  :  .  |   $ ...future.elements_ii    :List of 10
[10:51:37.650] |  :  .  |    ..$ : int 1
[10:51:37.650] |  :  .  |    ..$ : int 2
[10:51:37.650] |  :  .  |    ..$ : int 3
[10:51:37.650] |  :  .  |    ..$ : int 4
[10:51:37.650] |  :  .  |    ..$ : int 5
[10:51:37.650] |  :  .  |    ..$ : int 6
[10:51:37.650] |  :  .  |    ..$ : int 7
[10:51:37.650] |  :  .  |    ..$ : int 8
[10:51:37.650] |  :  .  |    ..$ : int 9
[10:51:37.650] |  :  .  |    ..$ : int 10
[10:51:37.650] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:37.650] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:37.650] |  :  .  |   - attr(*, "where")=List of 11
[10:51:37.650] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:37.650] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:37.650] |  :  .  |   - attr(*, "total_size")= num 23490
[10:51:37.650] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.650] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:37.661] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:37.661] |  :  .  |  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:37.661] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:37.661] |  :  .  |  - copied ‘times’ to environment
[10:51:37.661] |  :  .  |  - copied ‘stopf’ to environment
[10:51:37.661] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:37.662] |  :  .  |  - copied ‘dim’ to environment
[10:51:37.662] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:37.662] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:37.662] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:37.662] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:37.662] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:37.662] |  :  .  |  assign_globals() ... done
[10:51:37.664] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.664] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.664] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.664] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:37.664] |  :  .  |  :  .  |  :  New stack:
[10:51:37.664] |  :  .  |  :  .  |  :  List of 1
[10:51:37.664] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.664] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.664] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.664] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.664] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.664] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.664] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.664] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.664] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.664] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.667] |  :  .  |  :  .  |  :  Old stack:
[10:51:37.667] |  :  .  |  :  .  |  :  List of 1
[10:51:37.667] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.667] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.667] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.667] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.667] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.667] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.667] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.667] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.667] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.667] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.670] |  :  .  |  :  .  |  :  Identical
[10:51:37.670] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:37.670] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.670] |  :  .  |  :  .  |  List of future strategies:
[10:51:37.670] |  :  .  |  :  .  |  1. sequential:
[10:51:37.670] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.670] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:37.670] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:37.670] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.671] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.671] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.671] |  :  .  |  SequentialFuture started (and completed)
[10:51:37.671] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:37.671] |  :  Launching futures ... done
[10:51:37.671] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.671] |  Using SequentialFutureBackend ... done
[10:51:37.671] run() for Future (‘SequentialFuture’) ... done
[10:51:37.671] Created future:
[10:51:37.671] SequentialFuture:
[10:51:37.671] Label: ‘future_vapply-1’
[10:51:37.671] Expression:
[10:51:37.671] {
[10:51:37.671]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.671]     "# expression in do.call(), because function called uses '...'  "
[10:51:37.671]     "# as a global variable                                         "
[10:51:37.671]     do.call(function(...) {
[10:51:37.671]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.671]         "# without having an '...' argument. This means '...' is treated"
[10:51:37.671]         "# as a global variable. This may happen when FUN() is an       "
[10:51:37.671]         "# anonymous function.                                          "
[10:51:37.671]         "#                                                              "
[10:51:37.671]         "# If an anonymous function, we will make sure to restore the   "
[10:51:37.671]         "# function environment of FUN() to the calling environment.    "
[10:51:37.671]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.671]         "# global environment, which is where globals are written.      "
[10:51:37.671]         penv <- env <- environment(...future.FUN)
[10:51:37.671]         repeat {
[10:51:37.671]             if (identical(env, globalenv()) || identical(env, 
[10:51:37.671]                 emptyenv())) 
[10:51:37.671]                 break
[10:51:37.671]             penv <- env
[10:51:37.671]             env <- parent.env(env)
[10:51:37.671]         }
[10:51:37.671]         if (identical(penv, globalenv())) {
[10:51:37.671]             environment(...future.FUN) <- environment()
[10:51:37.671]         }
[10:51:37.671]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.671]             !isNamespace(penv)) {
[10:51:37.671]             parent.env(penv) <- environment()
[10:51:37.671]         }
[10:51:37.671]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.671]         {
[10:51:37.671]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.671]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.671]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.671]                 on.exit(options(oopts), add = TRUE)
[10:51:37.671]             }
[10:51:37.671]             {
[10:51:37.671]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.671]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.671]                   ...future.FUN(...future.X_jj, ...)
[10:51:37.671]                 })
[10:51:37.671]             }
[10:51:37.671]         }
[10:51:37.671]     }, args = future.call.arguments)
[10:51:37.671] }
[10:51:37.671] Lazy evaluation: FALSE
[10:51:37.671] Asynchronous evaluation: TRUE
[10:51:37.671] Local evaluation: TRUE
[10:51:37.671] Environment: R_GlobalEnv
[10:51:37.671] Capture standard output: TRUE
[10:51:37.671] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:37.671] Immediate condition classes: ‘immediateCondition’
[10:51:37.671] Globals: 11 objects totaling 13.07 KiB (function ‘...future.FUN’ of 4.50 KiB, function ‘x_FUN’ of 295 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:37.671] Packages: 1 packages (‘future.apply’)
[10:51:37.671] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:37.671] Resolved: TRUE
[10:51:37.671] Value: 111 bytes of class ‘list’
[10:51:37.671] Early signaling: FALSE
[10:51:37.671] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:37.671] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.673] Chunk #1 of 1 ... DONE
[10:51:37.673] Launching 1 futures (chunks) ... DONE
[10:51:37.673] Resolving 1 futures (chunks) ...
[10:51:37.673] value() on list ...
[10:51:37.673] |  recursive: 0
[10:51:37.673] |  length: 1
[10:51:37.673] |  
[10:51:37.673] |  Number of remaining objects: 1
[10:51:37.673] |  checking value #1 ...
[10:51:37.673] |  :  'obj' is SequentialFuture
[10:51:37.673] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:37.674] |  :  .  state: ‘finished’
[10:51:37.674] |  :  .  run: TRUE
[10:51:37.674] |  :  .  result: ‘FutureResult’
[10:51:37.674] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:37.674] |  :  SequentialFuture #1
[10:51:37.674] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.674] |  :  .  nx: 1
[10:51:37.674] |  :  .  relay: TRUE
[10:51:37.674] |  :  .  stdout: TRUE
[10:51:37.674] |  :  .  signal: TRUE
[10:51:37.674] |  :  .  resignal: FALSE
[10:51:37.674] |  :  .  force: TRUE
[10:51:37.674] |  :  .  relayed: [n=1] FALSE
[10:51:37.675] |  :  .  queued futures: [n=1] FALSE
[10:51:37.675] |  :  .  until=1
[10:51:37.675] |  :  .  relaying element #1
[10:51:37.675] |  :  .  relayed: [n=1] TRUE
[10:51:37.675] |  :  .  queued futures: [n=1] TRUE
[10:51:37.675] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.675] |  :  value(<SequentialFuture>, ...) ...
[10:51:37.675] |  :  .  value: <list>
[10:51:37.675] |  :  value(<SequentialFuture>, ...) ... done
[10:51:37.675] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.676] |  :  .  nx: 1
[10:51:37.676] |  :  .  relay: TRUE
[10:51:37.676] |  :  .  stdout: TRUE
[10:51:37.676] |  :  .  signal: TRUE
[10:51:37.676] |  :  .  resignal: FALSE
[10:51:37.676] |  :  .  force: TRUE
[10:51:37.676] |  :  .  relayed: [n=1] TRUE
[10:51:37.676] |  :  .  queued futures: [n=1] TRUE
[10:51:37.676] |  :  .  until=1
[10:51:37.676] |  :  .  relayed: [n=1] TRUE
[10:51:37.676] |  :  .  queued futures: [n=1] TRUE
[10:51:37.676] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.677] |  :  length: 0 (resolved future 1)
[10:51:37.677] |  checking value #1 ... done
[10:51:37.677] |  Relaying remaining futures ...
[10:51:37.677] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:37.677] |  :  .  nx: 1
[10:51:37.677] |  :  .  relay: TRUE
[10:51:37.677] |  :  .  stdout: TRUE
[10:51:37.677] |  :  .  signal: TRUE
[10:51:37.677] |  :  .  resignal: FALSE
[10:51:37.677] |  :  .  force: TRUE
[10:51:37.677] |  :  .  relayed: [n=1] TRUE
[10:51:37.678] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:37.679] |  :  .  relayed: [n=1] TRUE
[10:51:37.679] |  :  .  queued futures: [n=1] TRUE
[10:51:37.679] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:37.679] |  Relaying remaining futures ... done
[10:51:37.679] value() on list ... done
[10:51:37.679]  - Number of value chunks collected: 1
[10:51:37.679] Resolving 1 futures (chunks) ... DONE
[10:51:37.679] Reducing values from 1 chunks ...
[10:51:37.679]  - Number of values collected after concatenation: 10
[10:51:37.679]  - Number of values expected: 10
[10:51:37.679] Reducing values from 1 chunks ... DONE
[10:51:37.680] future_lapply() ... DONE
 num[0 , 1:10] 
 int[0 , 1:10] 
[10:51:37.680] future_lapply() ...
[10:51:37.682] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.682] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.682] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.683] Number of chunks: 1
[10:51:37.683] getGlobalsAndPackagesXApply() ...
[10:51:37.683]  - future.globals: TRUE
[10:51:37.683] getGlobalsAndPackages() ...
[10:51:37.683] |  Searching for globals ...
[10:51:37.686] |  :  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘integer’
[10:51:37.687] |  Searching for globals ... DONE
[10:51:37.687] |  Resolving globals: FALSE
[10:51:37.687] |  Search for packages associated with the globals ...
[10:51:37.687] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:37.688] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:37.688] |  Search for packages associated with the globals ... DONE
[10:51:37.688] |  The total size of the 7 globals is 12.75 KiB (13056 bytes)
[10:51:37.688] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.75 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.50 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:37.688] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.689] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.689] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.689] |  packages: [1] ‘future.apply’
[10:51:37.689] getGlobalsAndPackages() ... done
[10:51:37.689]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.689]  - needed namespaces: [n=1] ‘future.apply’
[10:51:37.689] Finding globals ... DONE
[10:51:37.689]  - use_args: TRUE
[10:51:37.689]  - Getting '...' globals ...
[10:51:37.690] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:37.690] |  recursive: 0
[10:51:37.690] |  length: 1
[10:51:37.690] |  elements: ‘...’
[10:51:37.690] |  'obj' is DotDotDotList
[10:51:37.690] |  resolve(obj, ...) ...
[10:51:37.690] |  resolve(obj, ...) ... done
[10:51:37.690] |  length: 0 (resolved future 1)
[10:51:37.690] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:37.690]    - '...' content: [n=0] 
[10:51:37.691] List of 1
[10:51:37.691]  $ ...: list()
[10:51:37.691]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.691]  - attr(*, "where")=List of 1
[10:51:37.691]   ..$ ...:<environment: 0x55d4632db450> 
[10:51:37.691]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.691]  - attr(*, "resolved")= logi TRUE
[10:51:37.691]  - attr(*, "total_size")= num NA
[10:51:37.693]  - Getting '...' globals ... DONE
[10:51:37.693] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:37.693] List of 8
[10:51:37.693]  $ ...future.FUN:function (x, ...)  
[10:51:37.693]  $ x_FUN        :function (x)  
[10:51:37.693]  $ times        : int 0
[10:51:37.693]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.693]  $ stop_if_not  :function (...)  
[10:51:37.693]  $ dim          : NULL
[10:51:37.693]  $ valid_types  : chr [1:2] "logical" "integer"
[10:51:37.693]  $ ...          : list()
[10:51:37.693]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.693]  - attr(*, "where")=List of 8
[10:51:37.693]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:37.693]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:37.693]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:37.693]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:37.693]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:37.693]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:37.693]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:37.693]   ..$ ...          :<environment: 0x55d4632db450> 
[10:51:37.693]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.693]  - attr(*, "resolved")= logi FALSE
[10:51:37.693]  - attr(*, "total_size")= num 23453
[10:51:37.700] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:37.700] getGlobalsAndPackagesXApply() ... DONE
[10:51:37.700] Number of futures (= number of chunks): 1
[10:51:37.700] Launching 1 futures (chunks) ...
[10:51:37.700] Chunk #1 of 1 ...
[10:51:37.700]  - Finding globals in 'X' for chunk #1 ...
[10:51:37.700] getGlobalsAndPackages() ...
[10:51:37.701] |  Searching for globals ...
[10:51:37.701] |  :  globals found: [0] 
[10:51:37.701] |  Searching for globals ... DONE
[10:51:37.701] |  globals: [0] <none>
[10:51:37.701] |  packages: [0] <none>
[10:51:37.701] getGlobalsAndPackages() ... done
[10:51:37.701]    + additional globals found: [n=0] 
[10:51:37.701]    + additional namespaces needed: [n=0] 
[10:51:37.701]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:37.702]  - seeds: <none>
[10:51:37.702]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.702] getGlobalsAndPackages() ...
[10:51:37.702] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.702] |  Resolving globals: FALSE
[10:51:37.702] |  Tweak future expression to call with '...' arguments ...
[10:51:37.702] |  :  {
[10:51:37.702] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.702] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:37.702] |  :      "# as a global variable                                         "
[10:51:37.702] |  :      do.call(function(...) {
[10:51:37.702] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.702] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:37.702] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:37.702] |  :          "# anonymous function.                                          "
[10:51:37.702] |  :          "#                                                              "
[10:51:37.702] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:37.702] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:37.702] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.702] |  :          "# global environment, which is where globals are written.      "
[10:51:37.702] |  :          penv <- env <- environment(...future.FUN)
[10:51:37.702] |  :          repeat {
[10:51:37.702] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:37.702] |  :                  emptyenv())) 
[10:51:37.702] |  :                  break
[10:51:37.702] |  :              penv <- env
[10:51:37.702] |  :              env <- parent.env(env)
[10:51:37.702] |  :          }
[10:51:37.702] |  :          if (identical(penv, globalenv())) {
[10:51:37.702] |  :              environment(...future.FUN) <- environment()
[10:51:37.702] |  :          }
[10:51:37.702] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.702] |  :              !isNamespace(penv)) {
[10:51:37.702] |  :              parent.env(penv) <- environment()
[10:51:37.702] |  :          }
[10:51:37.702] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.702] |  :          {
[10:51:37.702] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.702] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.702] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.702] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:37.702] |  :              }
[10:51:37.702] |  :              {
[10:51:37.702] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.702] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.702] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:37.702] |  :                  })
[10:51:37.702] |  :              }
[10:51:37.702] |  :          }
[10:51:37.702] |  :      }, args = future.call.arguments)
[10:51:37.702] |  :  }
[10:51:37.703] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:37.703] |  Search for packages associated with the globals ...
[10:51:37.703] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:37.703] |  :  Packages: [1] ‘future.apply’
[10:51:37.703] |  Search for packages associated with the globals ... DONE
[10:51:37.703] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.704] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.704] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.704] |  packages: [1] ‘future.apply’
[10:51:37.704] getGlobalsAndPackages() ... done
[10:51:37.704] run() for Future (‘Future’) ...
[10:51:37.704] |  state: ‘created’
[10:51:37.704] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.705] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.705] |  Using SequentialFutureBackend ...
[10:51:37.705] |  :  Launching futures ...
[10:51:37.705] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:37.705] |  :  .  |  getFutureData() ...
[10:51:37.705] |  :  .  |  :  getFutureCore() ...
[10:51:37.705] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:37.705] |  :  .  |  :  getFutureCore() ... done
[10:51:37.705] |  :  .  |  :  getFutureCapture() ...
[10:51:37.705] |  :  .  |  :  getFutureCapture() ... done
[10:51:37.705] |  :  .  |  :  getFutureContext() ...
[10:51:37.706] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.706] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:37.706] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.706] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:37.706] |  :  .  |  :  getFutureContext() ... done
[10:51:37.706] |  :  .  |  getFutureData() ... done
[10:51:37.706] |  :  .  |  attachPackages() ...
[10:51:37.706] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:37.706] |  :  .  |  attachPackages() ... DONE
[10:51:37.707] |  :  .  |  attachPackages() ...
[10:51:37.707] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:37.707] |  :  .  |  attachPackages() ... DONE
[10:51:37.707] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.707] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.707] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.708] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.708] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.708] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:37.708] |  :  .  |  :  .  |  New stack:
[10:51:37.708] |  :  .  |  :  .  |  List of 1
[10:51:37.708] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.708] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.708] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.708] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.708] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.708] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.708] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.710] |  :  .  |  :  .  |  Old stack:
[10:51:37.710] |  :  .  |  :  .  |  List of 1
[10:51:37.710] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.710] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.710] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.710] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.710] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.710] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:37.710] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.710] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.710] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.710] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.713] |  :  .  |  :  .  |  Not identical
[10:51:37.713] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:37.713] |  :  .  |  :  .  |  :  List of 2
[10:51:37.713] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.713] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.713] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.713] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.713] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.713] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.713] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.713] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.713] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.713] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.713] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.713] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.713] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.713] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.713] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.719] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:37.719] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:37.719] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.719] |  :  .  |  :  .  List of future strategies:
[10:51:37.719] |  :  .  |  :  .  1. sequential:
[10:51:37.719] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.719] |  :  .  |  :  .     - tweaked: FALSE
[10:51:37.719] |  :  .  |  :  .     - call: plan(sequential)
[10:51:37.719] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.720] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.720] |  :  .  |  assign_globals() ...
[10:51:37.720] |  :  .  |  List of 11
[10:51:37.720] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:37.720] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:37.720] |  :  .  |   $ times                    : int 0
[10:51:37.720] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.720] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:37.720] |  :  .  |   $ dim                      : NULL
[10:51:37.720] |  :  .  |   $ valid_types              : chr [1:2] "logical" "integer"
[10:51:37.720] |  :  .  |   $ future.call.arguments    : list()
[10:51:37.720] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.720] |  :  .  |   $ ...future.elements_ii    :List of 10
[10:51:37.720] |  :  .  |    ..$ : int 1
[10:51:37.720] |  :  .  |    ..$ : int 2
[10:51:37.720] |  :  .  |    ..$ : int 3
[10:51:37.720] |  :  .  |    ..$ : int 4
[10:51:37.720] |  :  .  |    ..$ : int 5
[10:51:37.720] |  :  .  |    ..$ : int 6
[10:51:37.720] |  :  .  |    ..$ : int 7
[10:51:37.720] |  :  .  |    ..$ : int 8
[10:51:37.720] |  :  .  |    ..$ : int 9
[10:51:37.720] |  :  .  |    ..$ : int 10
[10:51:37.720] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:37.720] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:37.720] |  :  .  |   - attr(*, "where")=List of 11
[10:51:37.720] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:37.720] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:37.720] |  :  .  |   - attr(*, "total_size")= num 23453
[10:51:37.720] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.720] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:37.730] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:37.730] |  :  .  |  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:37.730] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:37.730] |  :  .  |  - copied ‘times’ to environment
[10:51:37.730] |  :  .  |  - copied ‘stopf’ to environment
[10:51:37.730] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:37.730] |  :  .  |  - copied ‘dim’ to environment
[10:51:37.730] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:37.730] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:37.731] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:37.731] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:37.731] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:37.731] |  :  .  |  assign_globals() ... done
[10:51:37.733] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.733] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.734] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.734] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:37.734] |  :  .  |  :  .  |  :  New stack:
[10:51:37.734] |  :  .  |  :  .  |  :  List of 1
[10:51:37.734] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.734] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.734] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.734] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.734] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.734] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.734] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.734] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.734] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.734] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.737] |  :  .  |  :  .  |  :  Old stack:
[10:51:37.737] |  :  .  |  :  .  |  :  List of 1
[10:51:37.737] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.737] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.737] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.737] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.737] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.737] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.737] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.737] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.737] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.737] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.740] |  :  .  |  :  .  |  :  Identical
[10:51:37.740] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:37.740] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.740] |  :  .  |  :  .  |  List of future strategies:
[10:51:37.740] |  :  .  |  :  .  |  1. sequential:
[10:51:37.740] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.740] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:37.740] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:37.740] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.740] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.740] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.741] |  :  .  |  SequentialFuture started (and completed)
[10:51:37.741] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:37.741] |  :  Launching futures ... done
[10:51:37.741] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.741] |  Using SequentialFutureBackend ... done
[10:51:37.741] run() for Future (‘SequentialFuture’) ... done
[10:51:37.741] Created future:
[10:51:37.741] SequentialFuture:
[10:51:37.741] Label: ‘future_vapply-1’
[10:51:37.741] Expression:
[10:51:37.741] {
[10:51:37.741]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.741]     "# expression in do.call(), because function called uses '...'  "
[10:51:37.741]     "# as a global variable                                         "
[10:51:37.741]     do.call(function(...) {
[10:51:37.741]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.741]         "# without having an '...' argument. This means '...' is treated"
[10:51:37.741]         "# as a global variable. This may happen when FUN() is an       "
[10:51:37.741]         "# anonymous function.                                          "
[10:51:37.741]         "#                                                              "
[10:51:37.741]         "# If an anonymous function, we will make sure to restore the   "
[10:51:37.741]         "# function environment of FUN() to the calling environment.    "
[10:51:37.741]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.741]         "# global environment, which is where globals are written.      "
[10:51:37.741]         penv <- env <- environment(...future.FUN)
[10:51:37.741]         repeat {
[10:51:37.741]             if (identical(env, globalenv()) || identical(env, 
[10:51:37.741]                 emptyenv())) 
[10:51:37.741]                 break
[10:51:37.741]             penv <- env
[10:51:37.741]             env <- parent.env(env)
[10:51:37.741]         }
[10:51:37.741]         if (identical(penv, globalenv())) {
[10:51:37.741]             environment(...future.FUN) <- environment()
[10:51:37.741]         }
[10:51:37.741]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.741]             !isNamespace(penv)) {
[10:51:37.741]             parent.env(penv) <- environment()
[10:51:37.741]         }
[10:51:37.741]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.741]         {
[10:51:37.741]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.741]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.741]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.741]                 on.exit(options(oopts), add = TRUE)
[10:51:37.741]             }
[10:51:37.741]             {
[10:51:37.741]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.741]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.741]                   ...future.FUN(...future.X_jj, ...)
[10:51:37.741]                 })
[10:51:37.741]             }
[10:51:37.741]         }
[10:51:37.741]     }, args = future.call.arguments)
[10:51:37.741] }
[10:51:37.741] Lazy evaluation: FALSE
[10:51:37.741] Asynchronous evaluation: TRUE
[10:51:37.741] Local evaluation: TRUE
[10:51:37.741] Environment: R_GlobalEnv
[10:51:37.741] Capture standard output: TRUE
[10:51:37.741] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:37.741] Immediate condition classes: ‘immediateCondition’
[10:51:37.741] Globals: 11 objects totaling 13.04 KiB (function ‘...future.FUN’ of 4.49 KiB, function ‘x_FUN’ of 296 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:37.741] Packages: 1 packages (‘future.apply’)
[10:51:37.741] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:37.741] Resolved: TRUE
[10:51:37.741] Value: 111 bytes of class ‘list’
[10:51:37.741] Early signaling: FALSE
[10:51:37.741] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:37.741] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.742] Chunk #1 of 1 ... DONE
[10:51:37.742] Launching 1 futures (chunks) ... DONE
[10:51:37.743] Resolving 1 futures (chunks) ...
[10:51:37.743] value() on list ...
[10:51:37.743] |  recursive: 0
[10:51:37.743] |  length: 1
[10:51:37.743] |  
[10:51:37.743] |  Number of remaining objects: 1
[10:51:37.743] |  checking value #1 ...
[10:51:37.743] |  :  'obj' is SequentialFuture
[10:51:37.743] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:37.743] |  :  .  state: ‘finished’
[10:51:37.743] |  :  .  run: TRUE
[10:51:37.744] |  :  .  result: ‘FutureResult’
[10:51:37.744] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:37.744] |  :  SequentialFuture #1
[10:51:37.744] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.744] |  :  .  nx: 1
[10:51:37.744] |  :  .  relay: TRUE
[10:51:37.744] |  :  .  stdout: TRUE
[10:51:37.744] |  :  .  signal: TRUE
[10:51:37.744] |  :  .  resignal: FALSE
[10:51:37.744] |  :  .  force: TRUE
[10:51:37.744] |  :  .  relayed: [n=1] FALSE
[10:51:37.744] |  :  .  queued futures: [n=1] FALSE
[10:51:37.745] |  :  .  until=1
[10:51:37.745] |  :  .  relaying element #1
[10:51:37.745] |  :  .  relayed: [n=1] TRUE
[10:51:37.745] |  :  .  queued futures: [n=1] TRUE
[10:51:37.745] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.745] |  :  value(<SequentialFuture>, ...) ...
[10:51:37.745] |  :  .  value: <list>
[10:51:37.745] |  :  value(<SequentialFuture>, ...) ... done
[10:51:37.745] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.745] |  :  .  nx: 1
[10:51:37.746] |  :  .  relay: TRUE
[10:51:37.746] |  :  .  stdout: TRUE
[10:51:37.746] |  :  .  signal: TRUE
[10:51:37.746] |  :  .  resignal: FALSE
[10:51:37.746] |  :  .  force: TRUE
[10:51:37.746] |  :  .  relayed: [n=1] TRUE
[10:51:37.746] |  :  .  queued futures: [n=1] TRUE
[10:51:37.746] |  :  .  until=1
[10:51:37.746] |  :  .  relayed: [n=1] TRUE
[10:51:37.746] |  :  .  queued futures: [n=1] TRUE
[10:51:37.746] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.746] |  :  length: 0 (resolved future 1)
[10:51:37.747] |  checking value #1 ... done
[10:51:37.747] |  Relaying remaining futures ...
[10:51:37.747] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:37.747] |  :  .  nx: 1
[10:51:37.747] |  :  .  relay: TRUE
[10:51:37.747] |  :  .  stdout: TRUE
[10:51:37.747] |  :  .  signal: TRUE
[10:51:37.747] |  :  .  resignal: FALSE
[10:51:37.747] |  :  .  force: TRUE
[10:51:37.747] |  :  .  relayed: [n=1] TRUE
[10:51:37.747] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:37.748] |  :  .  relayed: [n=1] TRUE
[10:51:37.748] |  :  .  queued futures: [n=1] TRUE
[10:51:37.748] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:37.748] |  Relaying remaining futures ... done
[10:51:37.748] value() on list ... done
[10:51:37.748]  - Number of value chunks collected: 1
[10:51:37.748] Resolving 1 futures (chunks) ... DONE
[10:51:37.748] Reducing values from 1 chunks ...
[10:51:37.748]  - Number of values collected after concatenation: 10
[10:51:37.748]  - Number of values expected: 10
[10:51:37.748] Reducing values from 1 chunks ... DONE
[10:51:37.748] future_lapply() ... DONE
 int[0 , 1:10] 
 num [1:10] 1 1.41 1.73 2 2.24 ...
[10:51:37.749] future_lapply() ...
[10:51:37.752] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.752] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.752] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.753] Number of chunks: 1
[10:51:37.753] getGlobalsAndPackagesXApply() ...
[10:51:37.753]  - future.globals: TRUE
[10:51:37.753] getGlobalsAndPackages() ...
[10:51:37.753] |  Searching for globals ...
[10:51:37.756] |  :  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:37.756] |  Searching for globals ... DONE
[10:51:37.756] |  Resolving globals: FALSE
[10:51:37.756] |  Search for packages associated with the globals ...
[10:51:37.757] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:37.757] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:37.757] |  Search for packages associated with the globals ... DONE
[10:51:37.757] |  The total size of the 7 globals is 12.08 KiB (12367 bytes)
[10:51:37.758] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.08 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.07 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:37.758] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.758] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.758] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.758] |  packages: [1] ‘future.apply’
[10:51:37.758] getGlobalsAndPackages() ... done
[10:51:37.758]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.759]  - needed namespaces: [n=1] ‘future.apply’
[10:51:37.759] Finding globals ... DONE
[10:51:37.759]  - use_args: TRUE
[10:51:37.759]  - Getting '...' globals ...
[10:51:37.759] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:37.759] |  recursive: 0
[10:51:37.759] |  length: 1
[10:51:37.759] |  elements: ‘...’
[10:51:37.760] |  'obj' is DotDotDotList
[10:51:37.760] |  resolve(obj, ...) ...
[10:51:37.760] |  resolve(obj, ...) ... done
[10:51:37.760] |  length: 0 (resolved future 1)
[10:51:37.760] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:37.760]    - '...' content: [n=0] 
[10:51:37.760] List of 1
[10:51:37.760]  $ ...: list()
[10:51:37.760]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.760]  - attr(*, "where")=List of 1
[10:51:37.760]   ..$ ...:<environment: 0x55d4650366d8> 
[10:51:37.760]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.760]  - attr(*, "resolved")= logi TRUE
[10:51:37.760]  - attr(*, "total_size")= num NA
[10:51:37.762]  - Getting '...' globals ... DONE
[10:51:37.763] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:37.763] List of 8
[10:51:37.763]  $ ...future.FUN:function (x, ...)  
[10:51:37.763]  $ x_FUN        :function (x)  
[10:51:37.763]  $ times        : int 1
[10:51:37.763]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.763]  $ stop_if_not  :function (...)  
[10:51:37.763]  $ dim          : NULL
[10:51:37.763]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:37.763]  $ ...          : list()
[10:51:37.763]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.763]  - attr(*, "where")=List of 8
[10:51:37.763]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:37.763]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:37.763]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:37.763]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:37.763]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:37.763]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:37.763]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:37.763]   ..$ ...          :<environment: 0x55d4650366d8> 
[10:51:37.763]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.763]  - attr(*, "resolved")= logi FALSE
[10:51:37.763]  - attr(*, "total_size")= num 22322
[10:51:37.768] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:37.768] getGlobalsAndPackagesXApply() ... DONE
[10:51:37.769] Number of futures (= number of chunks): 1
[10:51:37.769] Launching 1 futures (chunks) ...
[10:51:37.769] Chunk #1 of 1 ...
[10:51:37.770]  - Finding globals in 'X' for chunk #1 ...
[10:51:37.770] getGlobalsAndPackages() ...
[10:51:37.770] |  Searching for globals ...
[10:51:37.770] |  :  globals found: [0] 
[10:51:37.770] |  Searching for globals ... DONE
[10:51:37.770] |  globals: [0] <none>
[10:51:37.770] |  packages: [0] <none>
[10:51:37.770] getGlobalsAndPackages() ... done
[10:51:37.770]    + additional globals found: [n=0] 
[10:51:37.771]    + additional namespaces needed: [n=0] 
[10:51:37.771]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:37.771]  - seeds: <none>
[10:51:37.771]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.771] getGlobalsAndPackages() ...
[10:51:37.771] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.771] |  Resolving globals: FALSE
[10:51:37.771] |  Tweak future expression to call with '...' arguments ...
[10:51:37.771] |  :  {
[10:51:37.771] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.771] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:37.771] |  :      "# as a global variable                                         "
[10:51:37.771] |  :      do.call(function(...) {
[10:51:37.771] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.771] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:37.771] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:37.771] |  :          "# anonymous function.                                          "
[10:51:37.771] |  :          "#                                                              "
[10:51:37.771] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:37.771] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:37.771] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.771] |  :          "# global environment, which is where globals are written.      "
[10:51:37.771] |  :          penv <- env <- environment(...future.FUN)
[10:51:37.771] |  :          repeat {
[10:51:37.771] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:37.771] |  :                  emptyenv())) 
[10:51:37.771] |  :                  break
[10:51:37.771] |  :              penv <- env
[10:51:37.771] |  :              env <- parent.env(env)
[10:51:37.771] |  :          }
[10:51:37.771] |  :          if (identical(penv, globalenv())) {
[10:51:37.771] |  :              environment(...future.FUN) <- environment()
[10:51:37.771] |  :          }
[10:51:37.771] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.771] |  :              !isNamespace(penv)) {
[10:51:37.771] |  :              parent.env(penv) <- environment()
[10:51:37.771] |  :          }
[10:51:37.771] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.771] |  :          {
[10:51:37.771] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.771] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.771] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.771] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:37.771] |  :              }
[10:51:37.771] |  :              {
[10:51:37.771] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.771] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.771] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:37.771] |  :                  })
[10:51:37.771] |  :              }
[10:51:37.771] |  :          }
[10:51:37.771] |  :      }, args = future.call.arguments)
[10:51:37.771] |  :  }
[10:51:37.772] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:37.772] |  Search for packages associated with the globals ...
[10:51:37.772] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:37.772] |  :  Packages: [1] ‘future.apply’
[10:51:37.773] |  Search for packages associated with the globals ... DONE
[10:51:37.773] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.773] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.773] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.773] |  packages: [1] ‘future.apply’
[10:51:37.773] getGlobalsAndPackages() ... done
[10:51:37.773] run() for Future (‘Future’) ...
[10:51:37.773] |  state: ‘created’
[10:51:37.774] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.774] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.774] |  Using SequentialFutureBackend ...
[10:51:37.774] |  :  Launching futures ...
[10:51:37.774] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:37.774] |  :  .  |  getFutureData() ...
[10:51:37.774] |  :  .  |  :  getFutureCore() ...
[10:51:37.774] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:37.774] |  :  .  |  :  getFutureCore() ... done
[10:51:37.775] |  :  .  |  :  getFutureCapture() ...
[10:51:37.775] |  :  .  |  :  getFutureCapture() ... done
[10:51:37.775] |  :  .  |  :  getFutureContext() ...
[10:51:37.775] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.775] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:37.775] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.775] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:37.775] |  :  .  |  :  getFutureContext() ... done
[10:51:37.775] |  :  .  |  getFutureData() ... done
[10:51:37.775] |  :  .  |  attachPackages() ...
[10:51:37.776] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:37.776] |  :  .  |  attachPackages() ... DONE
[10:51:37.776] |  :  .  |  attachPackages() ...
[10:51:37.776] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:37.776] |  :  .  |  attachPackages() ... DONE
[10:51:37.776] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.776] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.777] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.777] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.777] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.777] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:37.777] |  :  .  |  :  .  |  New stack:
[10:51:37.777] |  :  .  |  :  .  |  List of 1
[10:51:37.777] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.777] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.777] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.777] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.777] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.777] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.777] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.779] |  :  .  |  :  .  |  Old stack:
[10:51:37.780] |  :  .  |  :  .  |  List of 1
[10:51:37.780] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.780] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.780] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.780] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.780] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.780] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:37.780] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.780] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.780] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.780] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.782] |  :  .  |  :  .  |  Not identical
[10:51:37.783] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:37.783] |  :  .  |  :  .  |  :  List of 2
[10:51:37.783] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.783] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.783] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.783] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.783] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.783] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.783] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.783] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.783] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.783] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.783] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.783] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.783] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.783] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.783] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.789] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:37.789] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:37.789] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.789] |  :  .  |  :  .  List of future strategies:
[10:51:37.789] |  :  .  |  :  .  1. sequential:
[10:51:37.789] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.789] |  :  .  |  :  .     - tweaked: FALSE
[10:51:37.789] |  :  .  |  :  .     - call: plan(sequential)
[10:51:37.789] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.789] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.790] |  :  .  |  assign_globals() ...
[10:51:37.790] |  :  .  |  List of 11
[10:51:37.790] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:37.790] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:37.790] |  :  .  |   $ times                    : int 1
[10:51:37.790] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.790] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:37.790] |  :  .  |   $ dim                      : NULL
[10:51:37.790] |  :  .  |   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:37.790] |  :  .  |   $ future.call.arguments    : list()
[10:51:37.790] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.790] |  :  .  |   $ ...future.elements_ii    :List of 10
[10:51:37.790] |  :  .  |    ..$ : int 1
[10:51:37.790] |  :  .  |    ..$ : int 2
[10:51:37.790] |  :  .  |    ..$ : int 3
[10:51:37.790] |  :  .  |    ..$ : int 4
[10:51:37.790] |  :  .  |    ..$ : int 5
[10:51:37.790] |  :  .  |    ..$ : int 6
[10:51:37.790] |  :  .  |    ..$ : int 7
[10:51:37.790] |  :  .  |    ..$ : int 8
[10:51:37.790] |  :  .  |    ..$ : int 9
[10:51:37.790] |  :  .  |    ..$ : int 10
[10:51:37.790] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:37.790] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:37.790] |  :  .  |   - attr(*, "where")=List of 11
[10:51:37.790] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:37.790] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:37.790] |  :  .  |   - attr(*, "total_size")= num 22322
[10:51:37.790] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.790] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:37.800] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:37.800] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:37.800] |  :  .  |  - copied ‘times’ to environment
[10:51:37.800] |  :  .  |  - copied ‘stopf’ to environment
[10:51:37.801] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:37.801] |  :  .  |  - copied ‘dim’ to environment
[10:51:37.801] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:37.801] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:37.801] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:37.801] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:37.801] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:37.801] |  :  .  |  assign_globals() ... done
[10:51:37.803] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.803] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.803] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.803] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:37.803] |  :  .  |  :  .  |  :  New stack:
[10:51:37.803] |  :  .  |  :  .  |  :  List of 1
[10:51:37.803] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.803] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.803] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.803] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.803] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.803] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.803] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.803] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.803] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.803] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.835] |  :  .  |  :  .  |  :  Old stack:
[10:51:37.835] |  :  .  |  :  .  |  :  List of 1
[10:51:37.835] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.835] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.835] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.835] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.835] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.835] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.835] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.835] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.835] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.835] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.838] |  :  .  |  :  .  |  :  Identical
[10:51:37.838] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:37.838] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.838] |  :  .  |  :  .  |  List of future strategies:
[10:51:37.838] |  :  .  |  :  .  |  1. sequential:
[10:51:37.838] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.838] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:37.838] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:37.839] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.839] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.839] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.839] |  :  .  |  SequentialFuture started (and completed)
[10:51:37.839] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:37.840] |  :  Launching futures ... done
[10:51:37.840] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.840] |  Using SequentialFutureBackend ... done
[10:51:37.840] run() for Future (‘SequentialFuture’) ... done
[10:51:37.840] Created future:
[10:51:37.840] SequentialFuture:
[10:51:37.840] Label: ‘future_vapply-1’
[10:51:37.840] Expression:
[10:51:37.840] {
[10:51:37.840]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.840]     "# expression in do.call(), because function called uses '...'  "
[10:51:37.840]     "# as a global variable                                         "
[10:51:37.840]     do.call(function(...) {
[10:51:37.840]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.840]         "# without having an '...' argument. This means '...' is treated"
[10:51:37.840]         "# as a global variable. This may happen when FUN() is an       "
[10:51:37.840]         "# anonymous function.                                          "
[10:51:37.840]         "#                                                              "
[10:51:37.840]         "# If an anonymous function, we will make sure to restore the   "
[10:51:37.840]         "# function environment of FUN() to the calling environment.    "
[10:51:37.840]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.840]         "# global environment, which is where globals are written.      "
[10:51:37.840]         penv <- env <- environment(...future.FUN)
[10:51:37.840]         repeat {
[10:51:37.840]             if (identical(env, globalenv()) || identical(env, 
[10:51:37.840]                 emptyenv())) 
[10:51:37.840]                 break
[10:51:37.840]             penv <- env
[10:51:37.840]             env <- parent.env(env)
[10:51:37.840]         }
[10:51:37.840]         if (identical(penv, globalenv())) {
[10:51:37.840]             environment(...future.FUN) <- environment()
[10:51:37.840]         }
[10:51:37.840]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.840]             !isNamespace(penv)) {
[10:51:37.840]             parent.env(penv) <- environment()
[10:51:37.840]         }
[10:51:37.840]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.840]         {
[10:51:37.840]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.840]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.840]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.840]                 on.exit(options(oopts), add = TRUE)
[10:51:37.840]             }
[10:51:37.840]             {
[10:51:37.840]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.840]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.840]                   ...future.FUN(...future.X_jj, ...)
[10:51:37.840]                 })
[10:51:37.840]             }
[10:51:37.840]         }
[10:51:37.840]     }, args = future.call.arguments)
[10:51:37.840] }
[10:51:37.840] Lazy evaluation: FALSE
[10:51:37.840] Asynchronous evaluation: TRUE
[10:51:37.840] Local evaluation: TRUE
[10:51:37.840] Environment: R_GlobalEnv
[10:51:37.840] Capture standard output: TRUE
[10:51:37.840] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:37.840] Immediate condition classes: ‘immediateCondition’
[10:51:37.840] Globals: 11 objects totaling 12.37 KiB (function ‘...future.FUN’ of 4.06 KiB, function ‘x_FUN’ of 35 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:37.840] Packages: 1 packages (‘future.apply’)
[10:51:37.840] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:37.840] Resolved: TRUE
[10:51:37.840] Value: 191 bytes of class ‘list’
[10:51:37.840] Early signaling: FALSE
[10:51:37.840] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:37.840] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.841] Chunk #1 of 1 ... DONE
[10:51:37.841] Launching 1 futures (chunks) ... DONE
[10:51:37.841] Resolving 1 futures (chunks) ...
[10:51:37.841] value() on list ...
[10:51:37.842] |  recursive: 0
[10:51:37.842] |  length: 1
[10:51:37.842] |  
[10:51:37.842] |  Number of remaining objects: 1
[10:51:37.842] |  checking value #1 ...
[10:51:37.842] |  :  'obj' is SequentialFuture
[10:51:37.842] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:37.842] |  :  .  state: ‘finished’
[10:51:37.842] |  :  .  run: TRUE
[10:51:37.842] |  :  .  result: ‘FutureResult’
[10:51:37.842] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:37.843] |  :  SequentialFuture #1
[10:51:37.843] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.843] |  :  .  nx: 1
[10:51:37.843] |  :  .  relay: TRUE
[10:51:37.843] |  :  .  stdout: TRUE
[10:51:37.843] |  :  .  signal: TRUE
[10:51:37.843] |  :  .  resignal: FALSE
[10:51:37.843] |  :  .  force: TRUE
[10:51:37.843] |  :  .  relayed: [n=1] FALSE
[10:51:37.843] |  :  .  queued futures: [n=1] FALSE
[10:51:37.843] |  :  .  until=1
[10:51:37.844] |  :  .  relaying element #1
[10:51:37.844] |  :  .  relayed: [n=1] TRUE
[10:51:37.844] |  :  .  queued futures: [n=1] TRUE
[10:51:37.844] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.844] |  :  value(<SequentialFuture>, ...) ...
[10:51:37.844] |  :  .  value: <list>
[10:51:37.844] |  :  value(<SequentialFuture>, ...) ... done
[10:51:37.844] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.844] |  :  .  nx: 1
[10:51:37.845] |  :  .  relay: TRUE
[10:51:37.845] |  :  .  stdout: TRUE
[10:51:37.845] |  :  .  signal: TRUE
[10:51:37.845] |  :  .  resignal: FALSE
[10:51:37.845] |  :  .  force: TRUE
[10:51:37.845] |  :  .  relayed: [n=1] TRUE
[10:51:37.845] |  :  .  queued futures: [n=1] TRUE
[10:51:37.845] |  :  .  until=1
[10:51:37.845] |  :  .  relayed: [n=1] TRUE
[10:51:37.845] |  :  .  queued futures: [n=1] TRUE
[10:51:37.845] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.845] |  :  length: 0 (resolved future 1)
[10:51:37.846] |  checking value #1 ... done
[10:51:37.846] |  Relaying remaining futures ...
[10:51:37.846] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:37.846] |  :  .  nx: 1
[10:51:37.846] |  :  .  relay: TRUE
[10:51:37.846] |  :  .  stdout: TRUE
[10:51:37.846] |  :  .  signal: TRUE
[10:51:37.846] |  :  .  resignal: FALSE
[10:51:37.846] |  :  .  force: TRUE
[10:51:37.846] |  :  .  relayed: [n=1] TRUE
[10:51:37.846] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:37.847] |  :  .  relayed: [n=1] TRUE
[10:51:37.847] |  :  .  queued futures: [n=1] TRUE
[10:51:37.847] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:37.847] |  Relaying remaining futures ... done
[10:51:37.847] value() on list ... done
[10:51:37.847]  - Number of value chunks collected: 1
[10:51:37.847] Resolving 1 futures (chunks) ... DONE
[10:51:37.847] Reducing values from 1 chunks ...
[10:51:37.847]  - Number of values collected after concatenation: 10
[10:51:37.847]  - Number of values expected: 10
[10:51:37.847] Reducing values from 1 chunks ... DONE
[10:51:37.848] future_lapply() ... DONE
 num [1:10] 1 1.41 1.73 2 2.24 ...
 num [1:2, 1:10] 1 1 2 4 3 9 4 16 5 25 ...
[10:51:37.848] future_lapply() ...
[10:51:37.850] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.850] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.851] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.851] Number of chunks: 1
[10:51:37.851] getGlobalsAndPackagesXApply() ...
[10:51:37.851]  - future.globals: TRUE
[10:51:37.851] getGlobalsAndPackages() ...
[10:51:37.851] |  Searching for globals ...
[10:51:37.856] |  :  globals found: [18] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘c’, ‘^’
[10:51:37.856] |  Searching for globals ... DONE
[10:51:37.856] |  Resolving globals: FALSE
[10:51:37.856] |  Search for packages associated with the globals ...
[10:51:37.857] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:37.857] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:37.857] |  Search for packages associated with the globals ... DONE
[10:51:37.858] |  The total size of the 7 globals is 13.34 KiB (13657 bytes)
[10:51:37.858] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.34 KiB The three largest globals are ‘FUN’ (4.89 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:37.858] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.858] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.858] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.858] |  packages: [1] ‘future.apply’
[10:51:37.859] getGlobalsAndPackages() ... done
[10:51:37.859]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.859]  - needed namespaces: [n=1] ‘future.apply’
[10:51:37.859] Finding globals ... DONE
[10:51:37.859]  - use_args: TRUE
[10:51:37.859]  - Getting '...' globals ...
[10:51:37.859] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:37.860] |  recursive: 0
[10:51:37.860] |  length: 1
[10:51:37.860] |  elements: ‘...’
[10:51:37.860] |  'obj' is DotDotDotList
[10:51:37.860] |  resolve(obj, ...) ...
[10:51:37.860] |  resolve(obj, ...) ... done
[10:51:37.860] |  length: 0 (resolved future 1)
[10:51:37.860] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:37.860]    - '...' content: [n=0] 
[10:51:37.860] List of 1
[10:51:37.860]  $ ...: list()
[10:51:37.860]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.860]  - attr(*, "where")=List of 1
[10:51:37.860]   ..$ ...:<environment: 0x55d4649d67d0> 
[10:51:37.860]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.860]  - attr(*, "resolved")= logi TRUE
[10:51:37.860]  - attr(*, "total_size")= num NA
[10:51:37.863]  - Getting '...' globals ... DONE
[10:51:37.863] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:37.863] List of 8
[10:51:37.863]  $ ...future.FUN:function (x, ...)  
[10:51:37.863]  $ x_FUN        :function (x)  
[10:51:37.863]  $ times        : int 2
[10:51:37.863]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.863]  $ stop_if_not  :function (...)  
[10:51:37.863]  $ dim          : NULL
[10:51:37.863]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:37.863]  $ ...          : list()
[10:51:37.863]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.863]  - attr(*, "where")=List of 8
[10:51:37.863]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:37.863]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:37.863]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:37.863]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:37.863]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:37.863]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:37.863]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:37.863]   ..$ ...          :<environment: 0x55d4649d67d0> 
[10:51:37.863]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.863]  - attr(*, "resolved")= logi FALSE
[10:51:37.863]  - attr(*, "total_size")= num 24454
[10:51:37.869] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:37.869] getGlobalsAndPackagesXApply() ... DONE
[10:51:37.869] Number of futures (= number of chunks): 1
[10:51:37.869] Launching 1 futures (chunks) ...
[10:51:37.869] Chunk #1 of 1 ...
[10:51:37.869]  - Finding globals in 'X' for chunk #1 ...
[10:51:37.869] getGlobalsAndPackages() ...
[10:51:37.869] |  Searching for globals ...
[10:51:37.870] |  :  globals found: [0] 
[10:51:37.870] |  Searching for globals ... DONE
[10:51:37.870] |  globals: [0] <none>
[10:51:37.870] |  packages: [0] <none>
[10:51:37.870] getGlobalsAndPackages() ... done
[10:51:37.870]    + additional globals found: [n=0] 
[10:51:37.870]    + additional namespaces needed: [n=0] 
[10:51:37.870]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:37.870]  - seeds: <none>
[10:51:37.870]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.870] getGlobalsAndPackages() ...
[10:51:37.871] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.871] |  Resolving globals: FALSE
[10:51:37.871] |  Tweak future expression to call with '...' arguments ...
[10:51:37.871] |  :  {
[10:51:37.871] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.871] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:37.871] |  :      "# as a global variable                                         "
[10:51:37.871] |  :      do.call(function(...) {
[10:51:37.871] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.871] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:37.871] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:37.871] |  :          "# anonymous function.                                          "
[10:51:37.871] |  :          "#                                                              "
[10:51:37.871] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:37.871] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:37.871] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.871] |  :          "# global environment, which is where globals are written.      "
[10:51:37.871] |  :          penv <- env <- environment(...future.FUN)
[10:51:37.871] |  :          repeat {
[10:51:37.871] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:37.871] |  :                  emptyenv())) 
[10:51:37.871] |  :                  break
[10:51:37.871] |  :              penv <- env
[10:51:37.871] |  :              env <- parent.env(env)
[10:51:37.871] |  :          }
[10:51:37.871] |  :          if (identical(penv, globalenv())) {
[10:51:37.871] |  :              environment(...future.FUN) <- environment()
[10:51:37.871] |  :          }
[10:51:37.871] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.871] |  :              !isNamespace(penv)) {
[10:51:37.871] |  :              parent.env(penv) <- environment()
[10:51:37.871] |  :          }
[10:51:37.871] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.871] |  :          {
[10:51:37.871] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.871] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.871] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.871] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:37.871] |  :              }
[10:51:37.871] |  :              {
[10:51:37.871] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.871] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.871] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:37.871] |  :                  })
[10:51:37.871] |  :              }
[10:51:37.871] |  :          }
[10:51:37.871] |  :      }, args = future.call.arguments)
[10:51:37.871] |  :  }
[10:51:37.871] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:37.871] |  Search for packages associated with the globals ...
[10:51:37.872] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:37.872] |  :  Packages: [1] ‘future.apply’
[10:51:37.872] |  Search for packages associated with the globals ... DONE
[10:51:37.872] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.872] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.872] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.873] |  packages: [1] ‘future.apply’
[10:51:37.873] getGlobalsAndPackages() ... done
[10:51:37.873] run() for Future (‘Future’) ...
[10:51:37.873] |  state: ‘created’
[10:51:37.873] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.873] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.873] |  Using SequentialFutureBackend ...
[10:51:37.873] |  :  Launching futures ...
[10:51:37.874] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:37.874] |  :  .  |  getFutureData() ...
[10:51:37.874] |  :  .  |  :  getFutureCore() ...
[10:51:37.874] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:37.874] |  :  .  |  :  getFutureCore() ... done
[10:51:37.874] |  :  .  |  :  getFutureCapture() ...
[10:51:37.874] |  :  .  |  :  getFutureCapture() ... done
[10:51:37.874] |  :  .  |  :  getFutureContext() ...
[10:51:37.874] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.874] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:37.875] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.875] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:37.875] |  :  .  |  :  getFutureContext() ... done
[10:51:37.875] |  :  .  |  getFutureData() ... done
[10:51:37.875] |  :  .  |  attachPackages() ...
[10:51:37.876] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:37.876] |  :  .  |  attachPackages() ... DONE
[10:51:37.876] |  :  .  |  attachPackages() ...
[10:51:37.876] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:37.876] |  :  .  |  attachPackages() ... DONE
[10:51:37.877] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.877] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.877] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.877] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.877] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.878] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:37.878] |  :  .  |  :  .  |  New stack:
[10:51:37.878] |  :  .  |  :  .  |  List of 1
[10:51:37.878] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.878] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.878] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.878] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.878] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.878] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.878] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.880] |  :  .  |  :  .  |  Old stack:
[10:51:37.880] |  :  .  |  :  .  |  List of 1
[10:51:37.880] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.880] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.880] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.880] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.880] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.880] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:37.880] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.880] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.880] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.880] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.883] |  :  .  |  :  .  |  Not identical
[10:51:37.883] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:37.883] |  :  .  |  :  .  |  :  List of 2
[10:51:37.883] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.883] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.883] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.883] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.883] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.883] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.883] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.883] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.883] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.883] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.883] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.883] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.883] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.883] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.883] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.887] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:37.887] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:37.888] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.888] |  :  .  |  :  .  List of future strategies:
[10:51:37.888] |  :  .  |  :  .  1. sequential:
[10:51:37.888] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.888] |  :  .  |  :  .     - tweaked: FALSE
[10:51:37.888] |  :  .  |  :  .     - call: plan(sequential)
[10:51:37.888] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.888] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.888] |  :  .  |  assign_globals() ...
[10:51:37.889] |  :  .  |  List of 11
[10:51:37.889] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:37.889] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:37.889] |  :  .  |   $ times                    : int 2
[10:51:37.889] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.889] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:37.889] |  :  .  |   $ dim                      : NULL
[10:51:37.889] |  :  .  |   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:37.889] |  :  .  |   $ future.call.arguments    : list()
[10:51:37.889] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.889] |  :  .  |   $ ...future.elements_ii    :List of 10
[10:51:37.889] |  :  .  |    ..$ : int 1
[10:51:37.889] |  :  .  |    ..$ : int 2
[10:51:37.889] |  :  .  |    ..$ : int 3
[10:51:37.889] |  :  .  |    ..$ : int 4
[10:51:37.889] |  :  .  |    ..$ : int 5
[10:51:37.889] |  :  .  |    ..$ : int 6
[10:51:37.889] |  :  .  |    ..$ : int 7
[10:51:37.889] |  :  .  |    ..$ : int 8
[10:51:37.889] |  :  .  |    ..$ : int 9
[10:51:37.889] |  :  .  |    ..$ : int 10
[10:51:37.889] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:37.889] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:37.889] |  :  .  |   - attr(*, "where")=List of 11
[10:51:37.889] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:37.889] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:37.889] |  :  .  |   - attr(*, "total_size")= num 24454
[10:51:37.889] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.889] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:37.900] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:37.900] |  :  .  |  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:37.900] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:37.900] |  :  .  |  - copied ‘times’ to environment
[10:51:37.900] |  :  .  |  - copied ‘stopf’ to environment
[10:51:37.900] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:37.900] |  :  .  |  - copied ‘dim’ to environment
[10:51:37.900] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:37.900] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:37.901] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:37.901] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:37.901] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:37.901] |  :  .  |  assign_globals() ... done
[10:51:37.902] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.902] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.903] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.903] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:37.903] |  :  .  |  :  .  |  :  New stack:
[10:51:37.903] |  :  .  |  :  .  |  :  List of 1
[10:51:37.903] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.903] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.903] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.903] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.903] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.903] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.903] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.903] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.903] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.903] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.906] |  :  .  |  :  .  |  :  Old stack:
[10:51:37.906] |  :  .  |  :  .  |  :  List of 1
[10:51:37.906] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.906] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.906] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.906] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.906] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.906] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.906] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.906] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.906] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.906] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.909] |  :  .  |  :  .  |  :  Identical
[10:51:37.909] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:37.909] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.909] |  :  .  |  :  .  |  List of future strategies:
[10:51:37.909] |  :  .  |  :  .  |  1. sequential:
[10:51:37.909] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.909] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:37.909] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:37.909] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.909] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.910] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.910] |  :  .  |  SequentialFuture started (and completed)
[10:51:37.910] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:37.910] |  :  Launching futures ... done
[10:51:37.910] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.910] |  Using SequentialFutureBackend ... done
[10:51:37.910] run() for Future (‘SequentialFuture’) ... done
[10:51:37.910] Created future:
[10:51:37.910] SequentialFuture:
[10:51:37.910] Label: ‘future_vapply-1’
[10:51:37.910] Expression:
[10:51:37.910] {
[10:51:37.910]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.910]     "# expression in do.call(), because function called uses '...'  "
[10:51:37.910]     "# as a global variable                                         "
[10:51:37.910]     do.call(function(...) {
[10:51:37.910]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.910]         "# without having an '...' argument. This means '...' is treated"
[10:51:37.910]         "# as a global variable. This may happen when FUN() is an       "
[10:51:37.910]         "# anonymous function.                                          "
[10:51:37.910]         "#                                                              "
[10:51:37.910]         "# If an anonymous function, we will make sure to restore the   "
[10:51:37.910]         "# function environment of FUN() to the calling environment.    "
[10:51:37.910]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.910]         "# global environment, which is where globals are written.      "
[10:51:37.910]         penv <- env <- environment(...future.FUN)
[10:51:37.910]         repeat {
[10:51:37.910]             if (identical(env, globalenv()) || identical(env, 
[10:51:37.910]                 emptyenv())) 
[10:51:37.910]                 break
[10:51:37.910]             penv <- env
[10:51:37.910]             env <- parent.env(env)
[10:51:37.910]         }
[10:51:37.910]         if (identical(penv, globalenv())) {
[10:51:37.910]             environment(...future.FUN) <- environment()
[10:51:37.910]         }
[10:51:37.910]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.910]             !isNamespace(penv)) {
[10:51:37.910]             parent.env(penv) <- environment()
[10:51:37.910]         }
[10:51:37.910]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.910]         {
[10:51:37.910]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.910]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.910]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.910]                 on.exit(options(oopts), add = TRUE)
[10:51:37.910]             }
[10:51:37.910]             {
[10:51:37.910]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.910]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.910]                   ...future.FUN(...future.X_jj, ...)
[10:51:37.910]                 })
[10:51:37.910]             }
[10:51:37.910]         }
[10:51:37.910]     }, args = future.call.arguments)
[10:51:37.910] }
[10:51:37.910] Lazy evaluation: FALSE
[10:51:37.910] Asynchronous evaluation: TRUE
[10:51:37.910] Local evaluation: TRUE
[10:51:37.910] Environment: R_GlobalEnv
[10:51:37.910] Capture standard output: TRUE
[10:51:37.910] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:37.910] Immediate condition classes: ‘immediateCondition’
[10:51:37.910] Globals: 11 objects totaling 13.63 KiB (function ‘...future.FUN’ of 4.88 KiB, function ‘x_FUN’ of 483 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:37.910] Packages: 1 packages (‘future.apply’)
[10:51:37.910] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:37.910] Resolved: TRUE
[10:51:37.910] Value: 271 bytes of class ‘list’
[10:51:37.910] Early signaling: FALSE
[10:51:37.910] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:37.910] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.912] Chunk #1 of 1 ... DONE
[10:51:37.912] Launching 1 futures (chunks) ... DONE
[10:51:37.912] Resolving 1 futures (chunks) ...
[10:51:37.912] value() on list ...
[10:51:37.912] |  recursive: 0
[10:51:37.912] |  length: 1
[10:51:37.912] |  
[10:51:37.912] |  Number of remaining objects: 1
[10:51:37.912] |  checking value #1 ...
[10:51:37.912] |  :  'obj' is SequentialFuture
[10:51:37.912] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:37.913] |  :  .  state: ‘finished’
[10:51:37.913] |  :  .  run: TRUE
[10:51:37.913] |  :  .  result: ‘FutureResult’
[10:51:37.913] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:37.913] |  :  SequentialFuture #1
[10:51:37.913] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.913] |  :  .  nx: 1
[10:51:37.913] |  :  .  relay: TRUE
[10:51:37.913] |  :  .  stdout: TRUE
[10:51:37.913] |  :  .  signal: TRUE
[10:51:37.913] |  :  .  resignal: FALSE
[10:51:37.914] |  :  .  force: TRUE
[10:51:37.914] |  :  .  relayed: [n=1] FALSE
[10:51:37.914] |  :  .  queued futures: [n=1] FALSE
[10:51:37.914] |  :  .  until=1
[10:51:37.914] |  :  .  relaying element #1
[10:51:37.914] |  :  .  relayed: [n=1] TRUE
[10:51:37.914] |  :  .  queued futures: [n=1] TRUE
[10:51:37.914] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.914] |  :  value(<SequentialFuture>, ...) ...
[10:51:37.916] |  :  .  value: <list>
[10:51:37.916] |  :  value(<SequentialFuture>, ...) ... done
[10:51:37.916] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.916] |  :  .  nx: 1
[10:51:37.916] |  :  .  relay: TRUE
[10:51:37.916] |  :  .  stdout: TRUE
[10:51:37.916] |  :  .  signal: TRUE
[10:51:37.916] |  :  .  resignal: FALSE
[10:51:37.916] |  :  .  force: TRUE
[10:51:37.917] |  :  .  relayed: [n=1] TRUE
[10:51:37.917] |  :  .  queued futures: [n=1] TRUE
[10:51:37.917] |  :  .  until=1
[10:51:37.917] |  :  .  relayed: [n=1] TRUE
[10:51:37.917] |  :  .  queued futures: [n=1] TRUE
[10:51:37.917] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.917] |  :  length: 0 (resolved future 1)
[10:51:37.917] |  checking value #1 ... done
[10:51:37.917] |  Relaying remaining futures ...
[10:51:37.917] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:37.918] |  :  .  nx: 1
[10:51:37.918] |  :  .  relay: TRUE
[10:51:37.918] |  :  .  stdout: TRUE
[10:51:37.918] |  :  .  signal: TRUE
[10:51:37.918] |  :  .  resignal: FALSE
[10:51:37.918] |  :  .  force: TRUE
[10:51:37.918] |  :  .  relayed: [n=1] TRUE
[10:51:37.918] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:37.918] |  :  .  relayed: [n=1] TRUE
[10:51:37.918] |  :  .  queued futures: [n=1] TRUE
[10:51:37.918] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:37.919] |  Relaying remaining futures ... done
[10:51:37.919] value() on list ... done
[10:51:37.919]  - Number of value chunks collected: 1
[10:51:37.919] Resolving 1 futures (chunks) ... DONE
[10:51:37.919] Reducing values from 1 chunks ...
[10:51:37.919]  - Number of values collected after concatenation: 10
[10:51:37.919]  - Number of values expected: 10
[10:51:37.919] Reducing values from 1 chunks ... DONE
[10:51:37.919] future_lapply() ... DONE
 num [1:2, 1:10] 1 1 2 4 3 9 4 16 5 25 ...
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
[10:51:37.920] future_lapply() ...
[10:51:37.922] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.922] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.922] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.923] Number of chunks: 1
[10:51:37.923] getGlobalsAndPackagesXApply() ...
[10:51:37.923]  - future.globals: TRUE
[10:51:37.923] getGlobalsAndPackages() ...
[10:51:37.923] |  Searching for globals ...
[10:51:37.927] |  :  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘matrix’
[10:51:37.927] |  Searching for globals ... DONE
[10:51:37.927] |  Resolving globals: FALSE
[10:51:37.927] |  Search for packages associated with the globals ...
[10:51:37.927] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:37.928] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:37.928] |  Search for packages associated with the globals ... DONE
[10:51:37.928] |  The total size of the 7 globals is 13.59 KiB (13914 bytes)
[10:51:37.929] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.59 KiB The three largest globals are ‘FUN’ (5.06 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:37.929] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.929] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.929] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.929] |  packages: [1] ‘future.apply’
[10:51:37.929] getGlobalsAndPackages() ... done
[10:51:37.929]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:37.929]  - needed namespaces: [n=1] ‘future.apply’
[10:51:37.929] Finding globals ... DONE
[10:51:37.930]  - use_args: TRUE
[10:51:37.930]  - Getting '...' globals ...
[10:51:37.930] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:37.930] |  recursive: 0
[10:51:37.930] |  length: 1
[10:51:37.930] |  elements: ‘...’
[10:51:37.930] |  'obj' is DotDotDotList
[10:51:37.930] |  resolve(obj, ...) ...
[10:51:37.930] |  resolve(obj, ...) ... done
[10:51:37.931] |  length: 0 (resolved future 1)
[10:51:37.931] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:37.931]    - '...' content: [n=0] 
[10:51:37.931] List of 1
[10:51:37.931]  $ ...: list()
[10:51:37.931]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.931]  - attr(*, "where")=List of 1
[10:51:37.931]   ..$ ...:<environment: 0x55d462dc5d08> 
[10:51:37.931]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.931]  - attr(*, "resolved")= logi TRUE
[10:51:37.931]  - attr(*, "total_size")= num NA
[10:51:37.933]  - Getting '...' globals ... DONE
[10:51:37.933] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:37.934] List of 8
[10:51:37.934]  $ ...future.FUN:function (x, ...)  
[10:51:37.934]  $ x_FUN        :function (x)  
[10:51:37.934]  $ times        : int 4
[10:51:37.934]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.934]  $ stop_if_not  :function (...)  
[10:51:37.934]  $ dim          : int [1:2] 2 2
[10:51:37.934]  $ valid_types  : chr [1:2] "logical" "integer"
[10:51:37.934]  $ ...          : list()
[10:51:37.934]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.934]  - attr(*, "where")=List of 8
[10:51:37.934]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:37.934]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:37.934]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:37.934]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:37.934]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:37.934]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:37.934]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:37.934]   ..$ ...          :<environment: 0x55d462dc5d08> 
[10:51:37.934]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.934]  - attr(*, "resolved")= logi FALSE
[10:51:37.934]  - attr(*, "total_size")= num 24886
[10:51:37.940] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:37.940] getGlobalsAndPackagesXApply() ... DONE
[10:51:37.941] Number of futures (= number of chunks): 1
[10:51:37.941] Launching 1 futures (chunks) ...
[10:51:37.941] Chunk #1 of 1 ...
[10:51:37.941]  - Finding globals in 'X' for chunk #1 ...
[10:51:37.941] getGlobalsAndPackages() ...
[10:51:37.941] |  Searching for globals ...
[10:51:37.941] |  :  globals found: [0] 
[10:51:37.941] |  Searching for globals ... DONE
[10:51:37.942] |  globals: [0] <none>
[10:51:37.942] |  packages: [0] <none>
[10:51:37.942] getGlobalsAndPackages() ... done
[10:51:37.942]    + additional globals found: [n=0] 
[10:51:37.942]    + additional namespaces needed: [n=0] 
[10:51:37.942]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:37.942]  - seeds: <none>
[10:51:37.942]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.942] getGlobalsAndPackages() ...
[10:51:37.942] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.942] |  Resolving globals: FALSE
[10:51:37.943] |  Tweak future expression to call with '...' arguments ...
[10:51:37.943] |  :  {
[10:51:37.943] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.943] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:37.943] |  :      "# as a global variable                                         "
[10:51:37.943] |  :      do.call(function(...) {
[10:51:37.943] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.943] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:37.943] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:37.943] |  :          "# anonymous function.                                          "
[10:51:37.943] |  :          "#                                                              "
[10:51:37.943] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:37.943] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:37.943] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.943] |  :          "# global environment, which is where globals are written.      "
[10:51:37.943] |  :          penv <- env <- environment(...future.FUN)
[10:51:37.943] |  :          repeat {
[10:51:37.943] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:37.943] |  :                  emptyenv())) 
[10:51:37.943] |  :                  break
[10:51:37.943] |  :              penv <- env
[10:51:37.943] |  :              env <- parent.env(env)
[10:51:37.943] |  :          }
[10:51:37.943] |  :          if (identical(penv, globalenv())) {
[10:51:37.943] |  :              environment(...future.FUN) <- environment()
[10:51:37.943] |  :          }
[10:51:37.943] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.943] |  :              !isNamespace(penv)) {
[10:51:37.943] |  :              parent.env(penv) <- environment()
[10:51:37.943] |  :          }
[10:51:37.943] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.943] |  :          {
[10:51:37.943] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.943] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.943] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.943] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:37.943] |  :              }
[10:51:37.943] |  :              {
[10:51:37.943] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.943] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.943] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:37.943] |  :                  })
[10:51:37.943] |  :              }
[10:51:37.943] |  :          }
[10:51:37.943] |  :      }, args = future.call.arguments)
[10:51:37.943] |  :  }
[10:51:37.943] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:37.943] |  Search for packages associated with the globals ...
[10:51:37.944] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:37.944] |  :  Packages: [1] ‘future.apply’
[10:51:37.944] |  Search for packages associated with the globals ... DONE
[10:51:37.944] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:37.944] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:37.944] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:37.944] |  packages: [1] ‘future.apply’
[10:51:37.945] getGlobalsAndPackages() ... done
[10:51:37.945] run() for Future (‘Future’) ...
[10:51:37.945] |  state: ‘created’
[10:51:37.945] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.945] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.945] |  Using SequentialFutureBackend ...
[10:51:37.945] |  :  Launching futures ...
[10:51:37.945] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:37.946] |  :  .  |  getFutureData() ...
[10:51:37.946] |  :  .  |  :  getFutureCore() ...
[10:51:37.946] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:37.946] |  :  .  |  :  getFutureCore() ... done
[10:51:37.946] |  :  .  |  :  getFutureCapture() ...
[10:51:37.946] |  :  .  |  :  getFutureCapture() ... done
[10:51:37.946] |  :  .  |  :  getFutureContext() ...
[10:51:37.946] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.946] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:37.946] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.947] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:37.947] |  :  .  |  :  getFutureContext() ... done
[10:51:37.947] |  :  .  |  getFutureData() ... done
[10:51:37.947] |  :  .  |  attachPackages() ...
[10:51:37.947] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:37.947] |  :  .  |  attachPackages() ... DONE
[10:51:37.947] |  :  .  |  attachPackages() ...
[10:51:37.947] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:37.947] |  :  .  |  attachPackages() ... DONE
[10:51:37.948] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.948] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.948] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.948] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.948] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.949] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:37.949] |  :  .  |  :  .  |  New stack:
[10:51:37.949] |  :  .  |  :  .  |  List of 1
[10:51:37.949] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.949] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.949] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.949] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.949] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.949] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.949] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.951] |  :  .  |  :  .  |  Old stack:
[10:51:37.951] |  :  .  |  :  .  |  List of 1
[10:51:37.951] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.951] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.951] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.951] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.951] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.951] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:37.951] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.951] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.951] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.951] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.954] |  :  .  |  :  .  |  Not identical
[10:51:37.954] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:37.954] |  :  .  |  :  .  |  :  List of 2
[10:51:37.954] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.954] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.954] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.954] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.954] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.954] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:37.954] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.954] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.954] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.954] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.954] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.954] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.954] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.954] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.954] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.960] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:37.960] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:37.960] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.960] |  :  .  |  :  .  List of future strategies:
[10:51:37.960] |  :  .  |  :  .  1. sequential:
[10:51:37.960] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.960] |  :  .  |  :  .     - tweaked: FALSE
[10:51:37.960] |  :  .  |  :  .     - call: plan(sequential)
[10:51:37.961] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.961] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.961] |  :  .  |  assign_globals() ...
[10:51:37.961] |  :  .  |  List of 11
[10:51:37.961] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:37.961] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:37.961] |  :  .  |   $ times                    : int 4
[10:51:37.961] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:37.961] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:37.961] |  :  .  |   $ dim                      : int [1:2] 2 2
[10:51:37.961] |  :  .  |   $ valid_types              : chr [1:2] "logical" "integer"
[10:51:37.961] |  :  .  |   $ future.call.arguments    : list()
[10:51:37.961] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:37.961] |  :  .  |   $ ...future.elements_ii    :List of 10
[10:51:37.961] |  :  .  |    ..$ : int 1
[10:51:37.961] |  :  .  |    ..$ : int 2
[10:51:37.961] |  :  .  |    ..$ : int 3
[10:51:37.961] |  :  .  |    ..$ : int 4
[10:51:37.961] |  :  .  |    ..$ : int 5
[10:51:37.961] |  :  .  |    ..$ : int 6
[10:51:37.961] |  :  .  |    ..$ : int 7
[10:51:37.961] |  :  .  |    ..$ : int 8
[10:51:37.961] |  :  .  |    ..$ : int 9
[10:51:37.961] |  :  .  |    ..$ : int 10
[10:51:37.961] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:37.961] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:37.961] |  :  .  |   - attr(*, "where")=List of 11
[10:51:37.961] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:37.961] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:37.961] |  :  .  |   - attr(*, "total_size")= num 24886
[10:51:37.961] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:37.961] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:37.971] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:37.972] |  :  .  |  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:37.972] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:37.972] |  :  .  |  - copied ‘times’ to environment
[10:51:37.972] |  :  .  |  - copied ‘stopf’ to environment
[10:51:37.972] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:37.972] |  :  .  |  - copied ‘dim’ to environment
[10:51:37.972] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:37.972] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:37.972] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:37.972] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:37.972] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:37.973] |  :  .  |  assign_globals() ... done
[10:51:37.974] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.974] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:37.974] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:37.975] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:37.976] |  :  .  |  :  .  |  :  New stack:
[10:51:37.976] |  :  .  |  :  .  |  :  List of 1
[10:51:37.976] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.976] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.976] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.976] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.976] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.976] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.976] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.976] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.976] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.976] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.979] |  :  .  |  :  .  |  :  Old stack:
[10:51:37.979] |  :  .  |  :  .  |  :  List of 1
[10:51:37.979] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:37.979] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:37.979] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.979] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.979] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.979] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:37.979] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:37.979] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:37.979] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:37.979] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:37.982] |  :  .  |  :  .  |  :  Identical
[10:51:37.982] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:37.982] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:37.982] |  :  .  |  :  .  |  List of future strategies:
[10:51:37.982] |  :  .  |  :  .  |  1. sequential:
[10:51:37.982] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:37.982] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:37.982] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:37.982] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:37.982] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.982] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:37.983] |  :  .  |  SequentialFuture started (and completed)
[10:51:37.983] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:37.983] |  :  Launching futures ... done
[10:51:37.983] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.983] |  Using SequentialFutureBackend ... done
[10:51:37.983] run() for Future (‘SequentialFuture’) ... done
[10:51:37.983] Created future:
[10:51:37.983] SequentialFuture:
[10:51:37.983] Label: ‘future_vapply-1’
[10:51:37.983] Expression:
[10:51:37.983] {
[10:51:37.983]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:37.983]     "# expression in do.call(), because function called uses '...'  "
[10:51:37.983]     "# as a global variable                                         "
[10:51:37.983]     do.call(function(...) {
[10:51:37.983]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:37.983]         "# without having an '...' argument. This means '...' is treated"
[10:51:37.983]         "# as a global variable. This may happen when FUN() is an       "
[10:51:37.983]         "# anonymous function.                                          "
[10:51:37.983]         "#                                                              "
[10:51:37.983]         "# If an anonymous function, we will make sure to restore the   "
[10:51:37.983]         "# function environment of FUN() to the calling environment.    "
[10:51:37.983]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:37.983]         "# global environment, which is where globals are written.      "
[10:51:37.983]         penv <- env <- environment(...future.FUN)
[10:51:37.983]         repeat {
[10:51:37.983]             if (identical(env, globalenv()) || identical(env, 
[10:51:37.983]                 emptyenv())) 
[10:51:37.983]                 break
[10:51:37.983]             penv <- env
[10:51:37.983]             env <- parent.env(env)
[10:51:37.983]         }
[10:51:37.983]         if (identical(penv, globalenv())) {
[10:51:37.983]             environment(...future.FUN) <- environment()
[10:51:37.983]         }
[10:51:37.983]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:37.983]             !isNamespace(penv)) {
[10:51:37.983]             parent.env(penv) <- environment()
[10:51:37.983]         }
[10:51:37.983]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:37.983]         {
[10:51:37.983]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:37.983]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:37.983]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:37.983]                 on.exit(options(oopts), add = TRUE)
[10:51:37.983]             }
[10:51:37.983]             {
[10:51:37.983]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:37.983]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:37.983]                   ...future.FUN(...future.X_jj, ...)
[10:51:37.983]                 })
[10:51:37.983]             }
[10:51:37.983]         }
[10:51:37.983]     }, args = future.call.arguments)
[10:51:37.983] }
[10:51:37.983] Lazy evaluation: FALSE
[10:51:37.983] Asynchronous evaluation: TRUE
[10:51:37.983] Local evaluation: TRUE
[10:51:37.983] Environment: R_GlobalEnv
[10:51:37.983] Capture standard output: TRUE
[10:51:37.983] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:37.983] Immediate condition classes: ‘immediateCondition’
[10:51:37.983] Globals: 11 objects totaling 13.88 KiB (function ‘...future.FUN’ of 5.05 KiB, function ‘x_FUN’ of 567 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:37.983] Packages: 1 packages (‘future.apply’)
[10:51:37.983] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:37.983] Resolved: TRUE
[10:51:37.983] Value: 562 bytes of class ‘list’
[10:51:37.983] Early signaling: FALSE
[10:51:37.983] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:37.983] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:37.984] Chunk #1 of 1 ... DONE
[10:51:37.984] Launching 1 futures (chunks) ... DONE
[10:51:37.985] Resolving 1 futures (chunks) ...
[10:51:37.985] value() on list ...
[10:51:37.985] |  recursive: 0
[10:51:37.985] |  length: 1
[10:51:37.985] |  
[10:51:37.985] |  Number of remaining objects: 1
[10:51:37.985] |  checking value #1 ...
[10:51:37.985] |  :  'obj' is SequentialFuture
[10:51:37.985] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:37.985] |  :  .  state: ‘finished’
[10:51:37.985] |  :  .  run: TRUE
[10:51:37.986] |  :  .  result: ‘FutureResult’
[10:51:37.986] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:37.986] |  :  SequentialFuture #1
[10:51:37.986] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.986] |  :  .  nx: 1
[10:51:37.986] |  :  .  relay: TRUE
[10:51:37.986] |  :  .  stdout: TRUE
[10:51:37.986] |  :  .  signal: TRUE
[10:51:37.986] |  :  .  resignal: FALSE
[10:51:37.986] |  :  .  force: TRUE
[10:51:37.986] |  :  .  relayed: [n=1] FALSE
[10:51:37.986] |  :  .  queued futures: [n=1] FALSE
[10:51:37.987] |  :  .  until=1
[10:51:37.987] |  :  .  relaying element #1
[10:51:37.987] |  :  .  relayed: [n=1] TRUE
[10:51:37.987] |  :  .  queued futures: [n=1] TRUE
[10:51:37.987] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.987] |  :  value(<SequentialFuture>, ...) ...
[10:51:37.987] |  :  .  value: <list>
[10:51:37.987] |  :  value(<SequentialFuture>, ...) ... done
[10:51:37.987] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:37.988] |  :  .  nx: 1
[10:51:37.988] |  :  .  relay: TRUE
[10:51:37.988] |  :  .  stdout: TRUE
[10:51:37.988] |  :  .  signal: TRUE
[10:51:37.988] |  :  .  resignal: FALSE
[10:51:37.988] |  :  .  force: TRUE
[10:51:37.988] |  :  .  relayed: [n=1] TRUE
[10:51:37.988] |  :  .  queued futures: [n=1] TRUE
[10:51:37.988] |  :  .  until=1
[10:51:37.988] |  :  .  relayed: [n=1] TRUE
[10:51:37.988] |  :  .  queued futures: [n=1] TRUE
[10:51:37.988] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:37.989] |  :  length: 0 (resolved future 1)
[10:51:37.989] |  checking value #1 ... done
[10:51:37.989] |  Relaying remaining futures ...
[10:51:37.989] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:37.989] |  :  .  nx: 1
[10:51:37.989] |  :  .  relay: TRUE
[10:51:37.989] |  :  .  stdout: TRUE
[10:51:37.989] |  :  .  signal: TRUE
[10:51:37.989] |  :  .  resignal: FALSE
[10:51:37.989] |  :  .  force: TRUE
[10:51:37.989] |  :  .  relayed: [n=1] TRUE
[10:51:37.989] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:37.990] |  :  .  relayed: [n=1] TRUE
[10:51:37.990] |  :  .  queued futures: [n=1] TRUE
[10:51:37.990] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:37.990] |  Relaying remaining futures ... done
[10:51:37.990] value() on list ... done
[10:51:37.990]  - Number of value chunks collected: 1
[10:51:37.990] Resolving 1 futures (chunks) ... DONE
[10:51:37.990] Reducing values from 1 chunks ...
[10:51:37.990]  - Number of values collected after concatenation: 10
[10:51:37.990]  - Number of values expected: 10
[10:51:37.990] Reducing values from 1 chunks ... DONE
[10:51:37.991] future_lapply() ... DONE
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 num [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
[10:51:37.991] future_lapply() ...
[10:51:37.993] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:37.994] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:37.994] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:37.994] Number of chunks: 1
[10:51:37.994] getGlobalsAndPackagesXApply() ...
[10:51:37.994]  - future.globals: TRUE
[10:51:37.994] getGlobalsAndPackages() ...
[10:51:37.994] |  Searching for globals ...
[10:51:37.999] |  :  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘matrix’
[10:51:38.000] |  Searching for globals ... DONE
[10:51:38.000] |  Resolving globals: FALSE
[10:51:38.000] |  Search for packages associated with the globals ...
[10:51:38.000] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:38.001] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:38.001] |  Search for packages associated with the globals ... DONE
[10:51:38.001] |  The total size of the 7 globals is 13.63 KiB (13957 bytes)
[10:51:38.001] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.63 KiB The three largest globals are ‘FUN’ (5.09 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:38.002] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.002] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.002] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.002] |  packages: [1] ‘future.apply’
[10:51:38.002] getGlobalsAndPackages() ... done
[10:51:38.002]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.002]  - needed namespaces: [n=1] ‘future.apply’
[10:51:38.002] Finding globals ... DONE
[10:51:38.002]  - use_args: TRUE
[10:51:38.003]  - Getting '...' globals ...
[10:51:38.003] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.003] |  recursive: 0
[10:51:38.003] |  length: 1
[10:51:38.003] |  elements: ‘...’
[10:51:38.003] |  'obj' is DotDotDotList
[10:51:38.003] |  resolve(obj, ...) ...
[10:51:38.003] |  resolve(obj, ...) ... done
[10:51:38.004] |  length: 0 (resolved future 1)
[10:51:38.004] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.004]    - '...' content: [n=0] 
[10:51:38.004] List of 1
[10:51:38.004]  $ ...: list()
[10:51:38.004]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.004]  - attr(*, "where")=List of 1
[10:51:38.004]   ..$ ...:<environment: 0x55d464ebf8a0> 
[10:51:38.004]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.004]  - attr(*, "resolved")= logi TRUE
[10:51:38.004]  - attr(*, "total_size")= num NA
[10:51:38.006]  - Getting '...' globals ... DONE
[10:51:38.006] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:38.007] List of 8
[10:51:38.007]  $ ...future.FUN:function (x, ...)  
[10:51:38.007]  $ x_FUN        :function (x)  
[10:51:38.007]  $ times        : int 4
[10:51:38.007]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.007]  $ stop_if_not  :function (...)  
[10:51:38.007]  $ dim          : int [1:2] 2 2
[10:51:38.007]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:38.007]  $ ...          : list()
[10:51:38.007]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.007]  - attr(*, "where")=List of 8
[10:51:38.007]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.007]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:38.007]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:38.007]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:38.007]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:38.007]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:38.007]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:38.007]   ..$ ...          :<environment: 0x55d464ebf8a0> 
[10:51:38.007]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.007]  - attr(*, "resolved")= logi FALSE
[10:51:38.007]  - attr(*, "total_size")= num 24958
[10:51:38.012] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:38.012] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.012] Number of futures (= number of chunks): 1
[10:51:38.013] Launching 1 futures (chunks) ...
[10:51:38.013] Chunk #1 of 1 ...
[10:51:38.013]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.013] getGlobalsAndPackages() ...
[10:51:38.013] |  Searching for globals ...
[10:51:38.013] |  :  globals found: [0] 
[10:51:38.013] |  Searching for globals ... DONE
[10:51:38.013] |  globals: [0] <none>
[10:51:38.014] |  packages: [0] <none>
[10:51:38.014] getGlobalsAndPackages() ... done
[10:51:38.014]    + additional globals found: [n=0] 
[10:51:38.014]    + additional namespaces needed: [n=0] 
[10:51:38.014]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.014]  - seeds: <none>
[10:51:38.014]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.014] getGlobalsAndPackages() ...
[10:51:38.014] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.014] |  Resolving globals: FALSE
[10:51:38.014] |  Tweak future expression to call with '...' arguments ...
[10:51:38.016] |  :  {
[10:51:38.016] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.016] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:38.016] |  :      "# as a global variable                                         "
[10:51:38.016] |  :      do.call(function(...) {
[10:51:38.016] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.016] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:38.016] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.016] |  :          "# anonymous function.                                          "
[10:51:38.016] |  :          "#                                                              "
[10:51:38.016] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.016] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:38.016] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.016] |  :          "# global environment, which is where globals are written.      "
[10:51:38.016] |  :          penv <- env <- environment(...future.FUN)
[10:51:38.016] |  :          repeat {
[10:51:38.016] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:38.016] |  :                  emptyenv())) 
[10:51:38.016] |  :                  break
[10:51:38.016] |  :              penv <- env
[10:51:38.016] |  :              env <- parent.env(env)
[10:51:38.016] |  :          }
[10:51:38.016] |  :          if (identical(penv, globalenv())) {
[10:51:38.016] |  :              environment(...future.FUN) <- environment()
[10:51:38.016] |  :          }
[10:51:38.016] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.016] |  :              !isNamespace(penv)) {
[10:51:38.016] |  :              parent.env(penv) <- environment()
[10:51:38.016] |  :          }
[10:51:38.016] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.016] |  :          {
[10:51:38.016] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.016] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.016] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.016] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:38.016] |  :              }
[10:51:38.016] |  :              {
[10:51:38.016] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.016] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.016] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:38.016] |  :                  })
[10:51:38.016] |  :              }
[10:51:38.016] |  :          }
[10:51:38.016] |  :      }, args = future.call.arguments)
[10:51:38.016] |  :  }
[10:51:38.016] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.016] |  Search for packages associated with the globals ...
[10:51:38.016] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:38.017] |  :  Packages: [1] ‘future.apply’
[10:51:38.017] |  Search for packages associated with the globals ... DONE
[10:51:38.017] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.017] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.017] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.017] |  packages: [1] ‘future.apply’
[10:51:38.017] getGlobalsAndPackages() ... done
[10:51:38.018] run() for Future (‘Future’) ...
[10:51:38.018] |  state: ‘created’
[10:51:38.018] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.018] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.018] |  Using SequentialFutureBackend ...
[10:51:38.018] |  :  Launching futures ...
[10:51:38.018] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:38.018] |  :  .  |  getFutureData() ...
[10:51:38.019] |  :  .  |  :  getFutureCore() ...
[10:51:38.019] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:38.019] |  :  .  |  :  getFutureCore() ... done
[10:51:38.019] |  :  .  |  :  getFutureCapture() ...
[10:51:38.019] |  :  .  |  :  getFutureCapture() ... done
[10:51:38.019] |  :  .  |  :  getFutureContext() ...
[10:51:38.019] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.019] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:38.019] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.019] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:38.020] |  :  .  |  :  getFutureContext() ... done
[10:51:38.020] |  :  .  |  getFutureData() ... done
[10:51:38.020] |  :  .  |  attachPackages() ...
[10:51:38.020] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:38.020] |  :  .  |  attachPackages() ... DONE
[10:51:38.020] |  :  .  |  attachPackages() ...
[10:51:38.020] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:38.020] |  :  .  |  attachPackages() ... DONE
[10:51:38.021] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.021] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.021] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.021] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.021] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.021] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.022] |  :  .  |  :  .  |  New stack:
[10:51:38.022] |  :  .  |  :  .  |  List of 1
[10:51:38.022] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.022] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.022] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.022] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.022] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.022] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.022] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.024] |  :  .  |  :  .  |  Old stack:
[10:51:38.024] |  :  .  |  :  .  |  List of 1
[10:51:38.024] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.024] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.024] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.024] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.024] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.024] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:38.024] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.024] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.024] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.024] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.027] |  :  .  |  :  .  |  Not identical
[10:51:38.027] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.027] |  :  .  |  :  .  |  :  List of 2
[10:51:38.027] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.027] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.027] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.027] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.027] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.027] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.027] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.027] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.027] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.027] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.027] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.027] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.027] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.027] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.027] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.031] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.031] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.031] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.031] |  :  .  |  :  .  List of future strategies:
[10:51:38.031] |  :  .  |  :  .  1. sequential:
[10:51:38.031] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.031] |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.031] |  :  .  |  :  .     - call: plan(sequential)
[10:51:38.032] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.032] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.032] |  :  .  |  assign_globals() ...
[10:51:38.032] |  :  .  |  List of 11
[10:51:38.032] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:38.032] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:38.032] |  :  .  |   $ times                    : int 4
[10:51:38.032] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.032] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:38.032] |  :  .  |   $ dim                      : int [1:2] 2 2
[10:51:38.032] |  :  .  |   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:38.032] |  :  .  |   $ future.call.arguments    : list()
[10:51:38.032] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.032] |  :  .  |   $ ...future.elements_ii    :List of 10
[10:51:38.032] |  :  .  |    ..$ : int 1
[10:51:38.032] |  :  .  |    ..$ : int 2
[10:51:38.032] |  :  .  |    ..$ : int 3
[10:51:38.032] |  :  .  |    ..$ : int 4
[10:51:38.032] |  :  .  |    ..$ : int 5
[10:51:38.032] |  :  .  |    ..$ : int 6
[10:51:38.032] |  :  .  |    ..$ : int 7
[10:51:38.032] |  :  .  |    ..$ : int 8
[10:51:38.032] |  :  .  |    ..$ : int 9
[10:51:38.032] |  :  .  |    ..$ : int 10
[10:51:38.032] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:38.032] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:38.032] |  :  .  |   - attr(*, "where")=List of 11
[10:51:38.032] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.032] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:38.032] |  :  .  |   - attr(*, "total_size")= num 24958
[10:51:38.032] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.032] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:38.043] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:38.043] |  :  .  |  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:38.043] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:38.043] |  :  .  |  - copied ‘times’ to environment
[10:51:38.044] |  :  .  |  - copied ‘stopf’ to environment
[10:51:38.044] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:38.044] |  :  .  |  - copied ‘dim’ to environment
[10:51:38.044] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:38.044] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:38.044] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:38.044] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:38.044] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.044] |  :  .  |  assign_globals() ... done
[10:51:38.046] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.046] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.046] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.046] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.046] |  :  .  |  :  .  |  :  New stack:
[10:51:38.046] |  :  .  |  :  .  |  :  List of 1
[10:51:38.046] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.046] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.046] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.046] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.046] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.046] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.046] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.046] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.046] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.046] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.049] |  :  .  |  :  .  |  :  Old stack:
[10:51:38.049] |  :  .  |  :  .  |  :  List of 1
[10:51:38.049] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.049] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.049] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.049] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.049] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.049] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.049] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.049] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.049] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.049] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.052] |  :  .  |  :  .  |  :  Identical
[10:51:38.053] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.053] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.053] |  :  .  |  :  .  |  List of future strategies:
[10:51:38.053] |  :  .  |  :  .  |  1. sequential:
[10:51:38.053] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.053] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:38.053] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:38.054] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.054] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.054] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.054] |  :  .  |  SequentialFuture started (and completed)
[10:51:38.054] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:38.054] |  :  Launching futures ... done
[10:51:38.054] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.055] |  Using SequentialFutureBackend ... done
[10:51:38.055] run() for Future (‘SequentialFuture’) ... done
[10:51:38.055] Created future:
[10:51:38.055] SequentialFuture:
[10:51:38.055] Label: ‘future_vapply-1’
[10:51:38.055] Expression:
[10:51:38.055] {
[10:51:38.055]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.055]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.055]     "# as a global variable                                         "
[10:51:38.055]     do.call(function(...) {
[10:51:38.055]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.055]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.055]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.055]         "# anonymous function.                                          "
[10:51:38.055]         "#                                                              "
[10:51:38.055]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.055]         "# function environment of FUN() to the calling environment.    "
[10:51:38.055]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.055]         "# global environment, which is where globals are written.      "
[10:51:38.055]         penv <- env <- environment(...future.FUN)
[10:51:38.055]         repeat {
[10:51:38.055]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.055]                 emptyenv())) 
[10:51:38.055]                 break
[10:51:38.055]             penv <- env
[10:51:38.055]             env <- parent.env(env)
[10:51:38.055]         }
[10:51:38.055]         if (identical(penv, globalenv())) {
[10:51:38.055]             environment(...future.FUN) <- environment()
[10:51:38.055]         }
[10:51:38.055]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.055]             !isNamespace(penv)) {
[10:51:38.055]             parent.env(penv) <- environment()
[10:51:38.055]         }
[10:51:38.055]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.055]         {
[10:51:38.055]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.055]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.055]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.055]                 on.exit(options(oopts), add = TRUE)
[10:51:38.055]             }
[10:51:38.055]             {
[10:51:38.055]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.055]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.055]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.055]                 })
[10:51:38.055]             }
[10:51:38.055]         }
[10:51:38.055]     }, args = future.call.arguments)
[10:51:38.055] }
[10:51:38.055] Lazy evaluation: FALSE
[10:51:38.055] Asynchronous evaluation: TRUE
[10:51:38.055] Local evaluation: TRUE
[10:51:38.055] Environment: R_GlobalEnv
[10:51:38.055] Capture standard output: TRUE
[10:51:38.055] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.055] Immediate condition classes: ‘immediateCondition’
[10:51:38.055] Globals: 11 objects totaling 13.92 KiB (function ‘...future.FUN’ of 5.08 KiB, function ‘x_FUN’ of 567 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.055] Packages: 1 packages (‘future.apply’)
[10:51:38.055] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.055] Resolved: TRUE
[10:51:38.055] Value: 562 bytes of class ‘list’
[10:51:38.055] Early signaling: FALSE
[10:51:38.055] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.055] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.056] Chunk #1 of 1 ... DONE
[10:51:38.056] Launching 1 futures (chunks) ... DONE
[10:51:38.056] Resolving 1 futures (chunks) ...
[10:51:38.056] value() on list ...
[10:51:38.056] |  recursive: 0
[10:51:38.056] |  length: 1
[10:51:38.056] |  
[10:51:38.057] |  Number of remaining objects: 1
[10:51:38.057] |  checking value #1 ...
[10:51:38.057] |  :  'obj' is SequentialFuture
[10:51:38.057] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:38.057] |  :  .  state: ‘finished’
[10:51:38.057] |  :  .  run: TRUE
[10:51:38.057] |  :  .  result: ‘FutureResult’
[10:51:38.057] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:38.057] |  :  SequentialFuture #1
[10:51:38.057] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.057] |  :  .  nx: 1
[10:51:38.058] |  :  .  relay: TRUE
[10:51:38.058] |  :  .  stdout: TRUE
[10:51:38.058] |  :  .  signal: TRUE
[10:51:38.058] |  :  .  resignal: FALSE
[10:51:38.058] |  :  .  force: TRUE
[10:51:38.058] |  :  .  relayed: [n=1] FALSE
[10:51:38.058] |  :  .  queued futures: [n=1] FALSE
[10:51:38.058] |  :  .  until=1
[10:51:38.058] |  :  .  relaying element #1
[10:51:38.058] |  :  .  relayed: [n=1] TRUE
[10:51:38.059] |  :  .  queued futures: [n=1] TRUE
[10:51:38.059] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.059] |  :  value(<SequentialFuture>, ...) ...
[10:51:38.059] |  :  .  value: <list>
[10:51:38.059] |  :  value(<SequentialFuture>, ...) ... done
[10:51:38.059] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.059] |  :  .  nx: 1
[10:51:38.059] |  :  .  relay: TRUE
[10:51:38.059] |  :  .  stdout: TRUE
[10:51:38.059] |  :  .  signal: TRUE
[10:51:38.059] |  :  .  resignal: FALSE
[10:51:38.059] |  :  .  force: TRUE
[10:51:38.060] |  :  .  relayed: [n=1] TRUE
[10:51:38.060] |  :  .  queued futures: [n=1] TRUE
[10:51:38.060] |  :  .  until=1
[10:51:38.060] |  :  .  relayed: [n=1] TRUE
[10:51:38.060] |  :  .  queued futures: [n=1] TRUE
[10:51:38.060] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.060] |  :  length: 0 (resolved future 1)
[10:51:38.060] |  checking value #1 ... done
[10:51:38.060] |  Relaying remaining futures ...
[10:51:38.060] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:38.060] |  :  .  nx: 1
[10:51:38.061] |  :  .  relay: TRUE
[10:51:38.061] |  :  .  stdout: TRUE
[10:51:38.061] |  :  .  signal: TRUE
[10:51:38.061] |  :  .  resignal: FALSE
[10:51:38.061] |  :  .  force: TRUE
[10:51:38.061] |  :  .  relayed: [n=1] TRUE
[10:51:38.061] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:38.061] |  :  .  relayed: [n=1] TRUE
[10:51:38.061] |  :  .  queued futures: [n=1] TRUE
[10:51:38.061] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:38.061] |  Relaying remaining futures ... done
[10:51:38.061] value() on list ... done
[10:51:38.062]  - Number of value chunks collected: 1
[10:51:38.062] Resolving 1 futures (chunks) ... DONE
[10:51:38.062] Reducing values from 1 chunks ...
[10:51:38.062]  - Number of values collected after concatenation: 10
[10:51:38.062]  - Number of values expected: 10
[10:51:38.062] Reducing values from 1 chunks ... DONE
[10:51:38.062] future_lapply() ... DONE
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 num [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:2] "A" "B"
  ..$ : NULL
[10:51:38.064] future_lapply() ...
[10:51:38.066] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.066] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.066] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.066] Number of chunks: 1
[10:51:38.066] getGlobalsAndPackagesXApply() ...
[10:51:38.066]  - future.globals: TRUE
[10:51:38.067] getGlobalsAndPackages() ...
[10:51:38.067] |  Searching for globals ...
[10:51:38.071] |  :  globals found: [19] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘matrix’, ‘list’, ‘c’
[10:51:38.071] |  Searching for globals ... DONE
[10:51:38.071] |  Resolving globals: FALSE
[10:51:38.071] |  Search for packages associated with the globals ...
[10:51:38.072] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:38.073] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:38.073] |  Search for packages associated with the globals ... DONE
[10:51:38.073] |  The total size of the 7 globals is 16.05 KiB (16436 bytes)
[10:51:38.073] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 16.05 KiB The three largest globals are ‘FUN’ (6.71 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:38.074] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.074] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.074] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.074] |  packages: [1] ‘future.apply’
[10:51:38.074] getGlobalsAndPackages() ... done
[10:51:38.074]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.074]  - needed namespaces: [n=1] ‘future.apply’
[10:51:38.074] Finding globals ... DONE
[10:51:38.074]  - use_args: TRUE
[10:51:38.075]  - Getting '...' globals ...
[10:51:38.075] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.075] |  recursive: 0
[10:51:38.075] |  length: 1
[10:51:38.075] |  elements: ‘...’
[10:51:38.075] |  'obj' is DotDotDotList
[10:51:38.075] |  resolve(obj, ...) ...
[10:51:38.075] |  resolve(obj, ...) ... done
[10:51:38.076] |  length: 0 (resolved future 1)
[10:51:38.076] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.076]    - '...' content: [n=0] 
[10:51:38.076] List of 1
[10:51:38.076]  $ ...: list()
[10:51:38.076]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.076]  - attr(*, "where")=List of 1
[10:51:38.076]   ..$ ...:<environment: 0x55d46469a7f8> 
[10:51:38.076]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.076]  - attr(*, "resolved")= logi TRUE
[10:51:38.076]  - attr(*, "total_size")= num NA
[10:51:38.078]  - Getting '...' globals ... DONE
[10:51:38.078] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:38.078] List of 8
[10:51:38.078]  $ ...future.FUN:function (x, ...)  
[10:51:38.078]  $ x_FUN        :function (x)  
[10:51:38.078]  $ times        : int 4
[10:51:38.078]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.078]  $ stop_if_not  :function (...)  
[10:51:38.078]  $ dim          : int [1:2] 2 2
[10:51:38.078]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:38.078]  $ ...          : list()
[10:51:38.078]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.078]  - attr(*, "where")=List of 8
[10:51:38.078]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.078]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:38.078]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:38.078]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:38.078]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:38.078]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:38.078]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:38.078]   ..$ ...          :<environment: 0x55d46469a7f8> 
[10:51:38.078]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.078]  - attr(*, "resolved")= logi FALSE
[10:51:38.078]  - attr(*, "total_size")= num 29094
[10:51:38.084] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:38.084] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.084] Number of futures (= number of chunks): 1
[10:51:38.084] Launching 1 futures (chunks) ...
[10:51:38.084] Chunk #1 of 1 ...
[10:51:38.085]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.085] getGlobalsAndPackages() ...
[10:51:38.085] |  Searching for globals ...
[10:51:38.085] |  :  globals found: [0] 
[10:51:38.085] |  Searching for globals ... DONE
[10:51:38.085] |  globals: [0] <none>
[10:51:38.085] |  packages: [0] <none>
[10:51:38.085] getGlobalsAndPackages() ... done
[10:51:38.085]    + additional globals found: [n=0] 
[10:51:38.085]    + additional namespaces needed: [n=0] 
[10:51:38.086]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.086]  - seeds: <none>
[10:51:38.086]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.086] getGlobalsAndPackages() ...
[10:51:38.086] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.086] |  Resolving globals: FALSE
[10:51:38.086] |  Tweak future expression to call with '...' arguments ...
[10:51:38.086] |  :  {
[10:51:38.086] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.086] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:38.086] |  :      "# as a global variable                                         "
[10:51:38.086] |  :      do.call(function(...) {
[10:51:38.086] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.086] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:38.086] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.086] |  :          "# anonymous function.                                          "
[10:51:38.086] |  :          "#                                                              "
[10:51:38.086] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.086] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:38.086] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.086] |  :          "# global environment, which is where globals are written.      "
[10:51:38.086] |  :          penv <- env <- environment(...future.FUN)
[10:51:38.086] |  :          repeat {
[10:51:38.086] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:38.086] |  :                  emptyenv())) 
[10:51:38.086] |  :                  break
[10:51:38.086] |  :              penv <- env
[10:51:38.086] |  :              env <- parent.env(env)
[10:51:38.086] |  :          }
[10:51:38.086] |  :          if (identical(penv, globalenv())) {
[10:51:38.086] |  :              environment(...future.FUN) <- environment()
[10:51:38.086] |  :          }
[10:51:38.086] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.086] |  :              !isNamespace(penv)) {
[10:51:38.086] |  :              parent.env(penv) <- environment()
[10:51:38.086] |  :          }
[10:51:38.086] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.086] |  :          {
[10:51:38.086] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.086] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.086] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.086] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:38.086] |  :              }
[10:51:38.086] |  :              {
[10:51:38.086] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.086] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.086] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:38.086] |  :                  })
[10:51:38.086] |  :              }
[10:51:38.086] |  :          }
[10:51:38.086] |  :      }, args = future.call.arguments)
[10:51:38.086] |  :  }
[10:51:38.087] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.087] |  Search for packages associated with the globals ...
[10:51:38.087] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:38.087] |  :  Packages: [1] ‘future.apply’
[10:51:38.087] |  Search for packages associated with the globals ... DONE
[10:51:38.088] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.088] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.088] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.088] |  packages: [1] ‘future.apply’
[10:51:38.088] getGlobalsAndPackages() ... done
[10:51:38.088] run() for Future (‘Future’) ...
[10:51:38.088] |  state: ‘created’
[10:51:38.089] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.089] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.089] |  Using SequentialFutureBackend ...
[10:51:38.089] |  :  Launching futures ...
[10:51:38.089] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:38.089] |  :  .  |  getFutureData() ...
[10:51:38.089] |  :  .  |  :  getFutureCore() ...
[10:51:38.089] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:38.089] |  :  .  |  :  getFutureCore() ... done
[10:51:38.089] |  :  .  |  :  getFutureCapture() ...
[10:51:38.090] |  :  .  |  :  getFutureCapture() ... done
[10:51:38.090] |  :  .  |  :  getFutureContext() ...
[10:51:38.090] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.090] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:38.090] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.090] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:38.090] |  :  .  |  :  getFutureContext() ... done
[10:51:38.090] |  :  .  |  getFutureData() ... done
[10:51:38.090] |  :  .  |  attachPackages() ...
[10:51:38.090] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:38.091] |  :  .  |  attachPackages() ... DONE
[10:51:38.091] |  :  .  |  attachPackages() ...
[10:51:38.092] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:38.092] |  :  .  |  attachPackages() ... DONE
[10:51:38.092] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.092] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.093] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.093] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.093] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.093] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.093] |  :  .  |  :  .  |  New stack:
[10:51:38.093] |  :  .  |  :  .  |  List of 1
[10:51:38.093] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.093] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.093] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.093] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.093] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.093] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.093] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.095] |  :  .  |  :  .  |  Old stack:
[10:51:38.096] |  :  .  |  :  .  |  List of 1
[10:51:38.096] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.096] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.096] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.096] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.096] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.096] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:38.096] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.096] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.096] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.096] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.098] |  :  .  |  :  .  |  Not identical
[10:51:38.098] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.098] |  :  .  |  :  .  |  :  List of 2
[10:51:38.098] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.098] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.098] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.098] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.098] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.098] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.098] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.098] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.098] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.098] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.098] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.098] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.098] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.098] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.098] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.103] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.103] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.103] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.103] |  :  .  |  :  .  List of future strategies:
[10:51:38.103] |  :  .  |  :  .  1. sequential:
[10:51:38.103] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.103] |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.103] |  :  .  |  :  .     - call: plan(sequential)
[10:51:38.104] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.104] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.104] |  :  .  |  assign_globals() ...
[10:51:38.104] |  :  .  |  List of 11
[10:51:38.104] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:38.104] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:38.104] |  :  .  |   $ times                    : int 4
[10:51:38.104] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.104] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:38.104] |  :  .  |   $ dim                      : int [1:2] 2 2
[10:51:38.104] |  :  .  |   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:38.104] |  :  .  |   $ future.call.arguments    : list()
[10:51:38.104] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.104] |  :  .  |   $ ...future.elements_ii    :List of 10
[10:51:38.104] |  :  .  |    ..$ : int 1
[10:51:38.104] |  :  .  |    ..$ : int 2
[10:51:38.104] |  :  .  |    ..$ : int 3
[10:51:38.104] |  :  .  |    ..$ : int 4
[10:51:38.104] |  :  .  |    ..$ : int 5
[10:51:38.104] |  :  .  |    ..$ : int 6
[10:51:38.104] |  :  .  |    ..$ : int 7
[10:51:38.104] |  :  .  |    ..$ : int 8
[10:51:38.104] |  :  .  |    ..$ : int 9
[10:51:38.104] |  :  .  |    ..$ : int 10
[10:51:38.104] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:38.104] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:38.104] |  :  .  |   - attr(*, "where")=List of 11
[10:51:38.104] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.104] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:38.104] |  :  .  |   - attr(*, "total_size")= num 29094
[10:51:38.104] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.104] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:38.115] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:38.115] |  :  .  |  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:38.115] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:38.115] |  :  .  |  - copied ‘times’ to environment
[10:51:38.115] |  :  .  |  - copied ‘stopf’ to environment
[10:51:38.115] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:38.115] |  :  .  |  - copied ‘dim’ to environment
[10:51:38.116] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:38.116] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:38.116] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:38.116] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:38.116] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.116] |  :  .  |  assign_globals() ... done
[10:51:38.118] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.118] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.118] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.118] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.118] |  :  .  |  :  .  |  :  New stack:
[10:51:38.118] |  :  .  |  :  .  |  :  List of 1
[10:51:38.118] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.118] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.118] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.118] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.118] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.118] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.118] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.118] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.118] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.118] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.121] |  :  .  |  :  .  |  :  Old stack:
[10:51:38.121] |  :  .  |  :  .  |  :  List of 1
[10:51:38.121] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.121] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.121] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.121] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.121] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.121] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.121] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.121] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.121] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.121] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.124] |  :  .  |  :  .  |  :  Identical
[10:51:38.124] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.124] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.124] |  :  .  |  :  .  |  List of future strategies:
[10:51:38.124] |  :  .  |  :  .  |  1. sequential:
[10:51:38.124] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.124] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:38.124] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:38.124] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.125] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.125] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.125] |  :  .  |  SequentialFuture started (and completed)
[10:51:38.125] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:38.125] |  :  Launching futures ... done
[10:51:38.125] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.125] |  Using SequentialFutureBackend ... done
[10:51:38.125] run() for Future (‘SequentialFuture’) ... done
[10:51:38.125] Created future:
[10:51:38.126] SequentialFuture:
[10:51:38.126] Label: ‘future_vapply-1’
[10:51:38.126] Expression:
[10:51:38.126] {
[10:51:38.126]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.126]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.126]     "# as a global variable                                         "
[10:51:38.126]     do.call(function(...) {
[10:51:38.126]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.126]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.126]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.126]         "# anonymous function.                                          "
[10:51:38.126]         "#                                                              "
[10:51:38.126]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.126]         "# function environment of FUN() to the calling environment.    "
[10:51:38.126]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.126]         "# global environment, which is where globals are written.      "
[10:51:38.126]         penv <- env <- environment(...future.FUN)
[10:51:38.126]         repeat {
[10:51:38.126]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.126]                 emptyenv())) 
[10:51:38.126]                 break
[10:51:38.126]             penv <- env
[10:51:38.126]             env <- parent.env(env)
[10:51:38.126]         }
[10:51:38.126]         if (identical(penv, globalenv())) {
[10:51:38.126]             environment(...future.FUN) <- environment()
[10:51:38.126]         }
[10:51:38.126]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.126]             !isNamespace(penv)) {
[10:51:38.126]             parent.env(penv) <- environment()
[10:51:38.126]         }
[10:51:38.126]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.126]         {
[10:51:38.126]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.126]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.126]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.126]                 on.exit(options(oopts), add = TRUE)
[10:51:38.126]             }
[10:51:38.126]             {
[10:51:38.126]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.126]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.126]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.126]                 })
[10:51:38.126]             }
[10:51:38.126]         }
[10:51:38.126]     }, args = future.call.arguments)
[10:51:38.126] }
[10:51:38.126] Lazy evaluation: FALSE
[10:51:38.126] Asynchronous evaluation: TRUE
[10:51:38.126] Local evaluation: TRUE
[10:51:38.126] Environment: R_GlobalEnv
[10:51:38.126] Capture standard output: TRUE
[10:51:38.126] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.126] Immediate condition classes: ‘immediateCondition’
[10:51:38.126] Globals: 11 objects totaling 16.34 KiB (function ‘...future.FUN’ of 6.70 KiB, function ‘x_FUN’ of 1.36 KiB, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.126] Packages: 1 packages (‘future.apply’)
[10:51:38.126] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.126] Resolved: TRUE
[10:51:38.126] Value: 1.23 KiB of class ‘list’
[10:51:38.126] Early signaling: FALSE
[10:51:38.126] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.126] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.127] Chunk #1 of 1 ... DONE
[10:51:38.127] Launching 1 futures (chunks) ... DONE
[10:51:38.127] Resolving 1 futures (chunks) ...
[10:51:38.127] value() on list ...
[10:51:38.127] |  recursive: 0
[10:51:38.127] |  length: 1
[10:51:38.127] |  
[10:51:38.127] |  Number of remaining objects: 1
[10:51:38.127] |  checking value #1 ...
[10:51:38.127] |  :  'obj' is SequentialFuture
[10:51:38.128] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:38.128] |  :  .  state: ‘finished’
[10:51:38.129] |  :  .  run: TRUE
[10:51:38.129] |  :  .  result: ‘FutureResult’
[10:51:38.129] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:38.129] |  :  SequentialFuture #1
[10:51:38.129] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.129] |  :  .  nx: 1
[10:51:38.129] |  :  .  relay: TRUE
[10:51:38.129] |  :  .  stdout: TRUE
[10:51:38.129] |  :  .  signal: TRUE
[10:51:38.129] |  :  .  resignal: FALSE
[10:51:38.129] |  :  .  force: TRUE
[10:51:38.130] |  :  .  relayed: [n=1] FALSE
[10:51:38.130] |  :  .  queued futures: [n=1] FALSE
[10:51:38.130] |  :  .  until=1
[10:51:38.130] |  :  .  relaying element #1
[10:51:38.130] |  :  .  relayed: [n=1] TRUE
[10:51:38.130] |  :  .  queued futures: [n=1] TRUE
[10:51:38.130] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.130] |  :  value(<SequentialFuture>, ...) ...
[10:51:38.130] |  :  .  value: <list>
[10:51:38.131] |  :  value(<SequentialFuture>, ...) ... done
[10:51:38.131] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.131] |  :  .  nx: 1
[10:51:38.131] |  :  .  relay: TRUE
[10:51:38.131] |  :  .  stdout: TRUE
[10:51:38.131] |  :  .  signal: TRUE
[10:51:38.131] |  :  .  resignal: FALSE
[10:51:38.131] |  :  .  force: TRUE
[10:51:38.131] |  :  .  relayed: [n=1] TRUE
[10:51:38.131] |  :  .  queued futures: [n=1] TRUE
[10:51:38.131] |  :  .  until=1
[10:51:38.131] |  :  .  relayed: [n=1] TRUE
[10:51:38.131] |  :  .  queued futures: [n=1] TRUE
[10:51:38.132] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.132] |  :  length: 0 (resolved future 1)
[10:51:38.132] |  checking value #1 ... done
[10:51:38.132] |  Relaying remaining futures ...
[10:51:38.132] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:38.132] |  :  .  nx: 1
[10:51:38.132] |  :  .  relay: TRUE
[10:51:38.132] |  :  .  stdout: TRUE
[10:51:38.132] |  :  .  signal: TRUE
[10:51:38.132] |  :  .  resignal: FALSE
[10:51:38.132] |  :  .  force: TRUE
[10:51:38.133] |  :  .  relayed: [n=1] TRUE
[10:51:38.133] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:38.133] |  :  .  relayed: [n=1] TRUE
[10:51:38.133] |  :  .  queued futures: [n=1] TRUE
[10:51:38.133] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:38.133] |  Relaying remaining futures ... done
[10:51:38.133] value() on list ... done
[10:51:38.133]  - Number of value chunks collected: 1
[10:51:38.133] Resolving 1 futures (chunks) ... DONE
[10:51:38.133] Reducing values from 1 chunks ...
[10:51:38.133]  - Number of values collected after concatenation: 10
[10:51:38.133]  - Number of values expected: 10
[10:51:38.134] Reducing values from 1 chunks ... DONE
[10:51:38.134] future_lapply() ... DONE
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:2] "A" "B"
  ..$ : NULL
- From example(vapply) ...
[10:51:38.137] future_lapply() ...
[10:51:38.139] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.139] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.139] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.139] Number of chunks: 1
[10:51:38.139] getGlobalsAndPackagesXApply() ...
[10:51:38.139]  - future.globals: TRUE
[10:51:38.140] getGlobalsAndPackages() ...
[10:51:38.140] |  Searching for globals ...
[10:51:38.143] |  :  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘UseMethod’
[10:51:38.143] |  Searching for globals ... DONE
[10:51:38.143] |  Resolving globals: FALSE
[10:51:38.144] |  Search for packages associated with the globals ...
[10:51:38.144] |  :  Packages associated with globals: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:38.144] |  :  Packages: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:38.144] |  Search for packages associated with the globals ... DONE
[10:51:38.145] |  The total size of the 7 globals is 13.03 KiB (13339 bytes)
[10:51:38.145] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.03 KiB The three largest globals are ‘FUN’ (4.75 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:38.145] |  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:38.145] |  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:38.145] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.145] |  packages: [2] ‘stats’, ‘future.apply’
[10:51:38.146] getGlobalsAndPackages() ... done
[10:51:38.146]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.146]  - needed namespaces: [n=2] ‘stats’, ‘future.apply’
[10:51:38.146] Finding globals ... DONE
[10:51:38.146]  - use_args: TRUE
[10:51:38.146]  - Getting '...' globals ...
[10:51:38.146] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.148] |  recursive: 0
[10:51:38.148] |  length: 1
[10:51:38.148] |  elements: ‘...’
[10:51:38.148] |  'obj' is DotDotDotList
[10:51:38.148] |  resolve(obj, ...) ...
[10:51:38.148] |  resolve(obj, ...) ... done
[10:51:38.148] |  length: 0 (resolved future 1)
[10:51:38.148] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.148]    - '...' content: [n=0] 
[10:51:38.149] List of 1
[10:51:38.149]  $ ...: list()
[10:51:38.149]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.149]  - attr(*, "where")=List of 1
[10:51:38.149]   ..$ ...:<environment: 0x55d46442d0b0> 
[10:51:38.149]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.149]  - attr(*, "resolved")= logi TRUE
[10:51:38.149]  - attr(*, "total_size")= num NA
[10:51:38.151]  - Getting '...' globals ... DONE
[10:51:38.151] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:38.151] List of 8
[10:51:38.151]  $ ...future.FUN:function (x, ...)  
[10:51:38.151]  $ x_FUN        :function (x, ...)  
[10:51:38.151]  $ times        : int 5
[10:51:38.151]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.151]  $ stop_if_not  :function (...)  
[10:51:38.151]  $ dim          : NULL
[10:51:38.151]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:38.151]  $ ...          : list()
[10:51:38.151]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.151]  - attr(*, "where")=List of 8
[10:51:38.151]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.151]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:38.151]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:38.151]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:38.151]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:38.151]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:38.151]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:38.151]   ..$ ...          :<environment: 0x55d46442d0b0> 
[10:51:38.151]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.151]  - attr(*, "resolved")= logi FALSE
[10:51:38.151]  - attr(*, "total_size")= num 24127
[10:51:38.157] Packages to be attached in all futures: [n=2] ‘stats’, ‘future.apply’
[10:51:38.157] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.157] Number of futures (= number of chunks): 1
[10:51:38.157] Launching 1 futures (chunks) ...
[10:51:38.157] Chunk #1 of 1 ...
[10:51:38.157]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.157] getGlobalsAndPackages() ...
[10:51:38.157] |  Searching for globals ...
[10:51:38.158] |  :  globals found: [0] 
[10:51:38.158] |  Searching for globals ... DONE
[10:51:38.158] |  globals: [0] <none>
[10:51:38.158] |  packages: [0] <none>
[10:51:38.158] getGlobalsAndPackages() ... done
[10:51:38.158]    + additional globals found: [n=0] 
[10:51:38.158]    + additional namespaces needed: [n=0] 
[10:51:38.158]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.158]  - seeds: <none>
[10:51:38.158]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.159] getGlobalsAndPackages() ...
[10:51:38.159] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.159] |  Resolving globals: FALSE
[10:51:38.159] |  Tweak future expression to call with '...' arguments ...
[10:51:38.159] |  :  {
[10:51:38.159] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.159] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:38.159] |  :      "# as a global variable                                         "
[10:51:38.159] |  :      do.call(function(...) {
[10:51:38.159] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.159] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:38.159] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.159] |  :          "# anonymous function.                                          "
[10:51:38.159] |  :          "#                                                              "
[10:51:38.159] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.159] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:38.159] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.159] |  :          "# global environment, which is where globals are written.      "
[10:51:38.159] |  :          penv <- env <- environment(...future.FUN)
[10:51:38.159] |  :          repeat {
[10:51:38.159] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:38.159] |  :                  emptyenv())) 
[10:51:38.159] |  :                  break
[10:51:38.159] |  :              penv <- env
[10:51:38.159] |  :              env <- parent.env(env)
[10:51:38.159] |  :          }
[10:51:38.159] |  :          if (identical(penv, globalenv())) {
[10:51:38.159] |  :              environment(...future.FUN) <- environment()
[10:51:38.159] |  :          }
[10:51:38.159] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.159] |  :              !isNamespace(penv)) {
[10:51:38.159] |  :              parent.env(penv) <- environment()
[10:51:38.159] |  :          }
[10:51:38.159] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.159] |  :          {
[10:51:38.159] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.159] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.159] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.159] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:38.159] |  :              }
[10:51:38.159] |  :              {
[10:51:38.159] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.159] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.159] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:38.159] |  :                  })
[10:51:38.159] |  :              }
[10:51:38.159] |  :          }
[10:51:38.159] |  :      }, args = future.call.arguments)
[10:51:38.159] |  :  }
[10:51:38.159] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.160] |  Search for packages associated with the globals ...
[10:51:38.160] |  :  Packages associated with globals: [2] ‘stats’, ‘future.apply’
[10:51:38.160] |  :  Packages: [2] ‘stats’, ‘future.apply’
[10:51:38.160] |  Search for packages associated with the globals ... DONE
[10:51:38.160] |  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:38.160] |  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:38.161] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.161] |  packages: [2] ‘stats’, ‘future.apply’
[10:51:38.161] getGlobalsAndPackages() ... done
[10:51:38.161] run() for Future (‘Future’) ...
[10:51:38.161] |  state: ‘created’
[10:51:38.161] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.161] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.161] |  Using SequentialFutureBackend ...
[10:51:38.162] |  :  Launching futures ...
[10:51:38.162] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:38.162] |  :  .  |  getFutureData() ...
[10:51:38.162] |  :  .  |  :  getFutureCore() ...
[10:51:38.162] |  :  .  |  :  .  Packages needed by the future expression (n = 2): ‘stats’, ‘future.apply’
[10:51:38.162] |  :  .  |  :  getFutureCore() ... done
[10:51:38.162] |  :  .  |  :  getFutureCapture() ...
[10:51:38.162] |  :  .  |  :  getFutureCapture() ... done
[10:51:38.162] |  :  .  |  :  getFutureContext() ...
[10:51:38.162] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.163] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:38.163] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.163] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:38.163] |  :  .  |  :  getFutureContext() ... done
[10:51:38.163] |  :  .  |  getFutureData() ... done
[10:51:38.163] |  :  .  |  attachPackages() ...
[10:51:38.163] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:38.163] |  :  .  |  attachPackages() ... DONE
[10:51:38.164] |  :  .  |  attachPackages() ...
[10:51:38.164] |  :  .  |  :  packages: [n=2] ‘stats’, ‘future.apply’
[10:51:38.164] |  :  .  |  attachPackages() ... DONE
[10:51:38.164] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.164] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.164] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.165] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.165] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.165] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.165] |  :  .  |  :  .  |  New stack:
[10:51:38.165] |  :  .  |  :  .  |  List of 1
[10:51:38.165] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.165] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.165] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.165] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.165] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.165] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.165] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.168] |  :  .  |  :  .  |  Old stack:
[10:51:38.169] |  :  .  |  :  .  |  List of 1
[10:51:38.169] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.169] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.169] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.169] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.169] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.169] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:38.169] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.169] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.169] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.169] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.171] |  :  .  |  :  .  |  Not identical
[10:51:38.171] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.172] |  :  .  |  :  .  |  :  List of 2
[10:51:38.172] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.172] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.172] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.172] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.172] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.172] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.172] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.172] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.172] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.172] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.172] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.172] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.172] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.172] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.172] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.176] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.176] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.176] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.176] |  :  .  |  :  .  List of future strategies:
[10:51:38.176] |  :  .  |  :  .  1. sequential:
[10:51:38.176] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.176] |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.176] |  :  .  |  :  .     - call: plan(sequential)
[10:51:38.177] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.177] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.177] |  :  .  |  assign_globals() ...
[10:51:38.177] |  :  .  |  List of 11
[10:51:38.177] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:38.177] |  :  .  |   $ x_FUN                    :function (x, ...)  
[10:51:38.177] |  :  .  |   $ times                    : int 5
[10:51:38.177] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.177] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:38.177] |  :  .  |   $ dim                      : NULL
[10:51:38.177] |  :  .  |   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:38.177] |  :  .  |   $ future.call.arguments    : list()
[10:51:38.177] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.177] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:51:38.177] |  :  .  |    ..$ a    : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:51:38.177] |  :  .  |    ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:51:38.177] |  :  .  |    ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:51:38.177] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:38.177] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:38.177] |  :  .  |   - attr(*, "where")=List of 11
[10:51:38.177] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.177] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:38.177] |  :  .  |   - attr(*, "total_size")= num 24127
[10:51:38.177] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.177] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:38.186] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:38.186] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:38.186] |  :  .  |  - copied ‘times’ to environment
[10:51:38.187] |  :  .  |  - copied ‘stopf’ to environment
[10:51:38.187] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:38.187] |  :  .  |  - copied ‘dim’ to environment
[10:51:38.187] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:38.187] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:38.187] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:38.187] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:38.187] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.187] |  :  .  |  assign_globals() ... done
[10:51:38.189] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.189] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.190] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.190] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.190] |  :  .  |  :  .  |  :  New stack:
[10:51:38.190] |  :  .  |  :  .  |  :  List of 1
[10:51:38.190] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.190] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.190] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.190] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.190] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.190] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.190] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.190] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.190] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.190] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.193] |  :  .  |  :  .  |  :  Old stack:
[10:51:38.193] |  :  .  |  :  .  |  :  List of 1
[10:51:38.193] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.193] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.193] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.193] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.193] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.193] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.193] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.193] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.193] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.193] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.196] |  :  .  |  :  .  |  :  Identical
[10:51:38.196] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.196] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.196] |  :  .  |  :  .  |  List of future strategies:
[10:51:38.196] |  :  .  |  :  .  |  1. sequential:
[10:51:38.196] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.196] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:38.196] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:38.196] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.196] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.197] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.197] |  :  .  |  SequentialFuture started (and completed)
[10:51:38.197] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:38.197] |  :  Launching futures ... done
[10:51:38.197] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.197] |  Using SequentialFutureBackend ... done
[10:51:38.197] run() for Future (‘SequentialFuture’) ... done
[10:51:38.197] Created future:
[10:51:38.197] SequentialFuture:
[10:51:38.197] Label: ‘future_vapply-1’
[10:51:38.197] Expression:
[10:51:38.197] {
[10:51:38.197]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.197]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.197]     "# as a global variable                                         "
[10:51:38.197]     do.call(function(...) {
[10:51:38.197]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.197]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.197]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.197]         "# anonymous function.                                          "
[10:51:38.197]         "#                                                              "
[10:51:38.197]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.197]         "# function environment of FUN() to the calling environment.    "
[10:51:38.197]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.197]         "# global environment, which is where globals are written.      "
[10:51:38.197]         penv <- env <- environment(...future.FUN)
[10:51:38.197]         repeat {
[10:51:38.197]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.197]                 emptyenv())) 
[10:51:38.197]                 break
[10:51:38.197]             penv <- env
[10:51:38.197]             env <- parent.env(env)
[10:51:38.197]         }
[10:51:38.197]         if (identical(penv, globalenv())) {
[10:51:38.197]             environment(...future.FUN) <- environment()
[10:51:38.197]         }
[10:51:38.197]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.197]             !isNamespace(penv)) {
[10:51:38.197]             parent.env(penv) <- environment()
[10:51:38.197]         }
[10:51:38.197]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.197]         {
[10:51:38.197]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.197]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.197]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.197]                 on.exit(options(oopts), add = TRUE)
[10:51:38.197]             }
[10:51:38.197]             {
[10:51:38.197]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.197]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.197]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.197]                 })
[10:51:38.197]             }
[10:51:38.197]         }
[10:51:38.197]     }, args = future.call.arguments)
[10:51:38.197] }
[10:51:38.197] Lazy evaluation: FALSE
[10:51:38.197] Asynchronous evaluation: TRUE
[10:51:38.197] Local evaluation: TRUE
[10:51:38.197] Environment: R_GlobalEnv
[10:51:38.197] Capture standard output: TRUE
[10:51:38.197] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.197] Immediate condition classes: ‘immediateCondition’
[10:51:38.197] Globals: 11 objects totaling 13.46 KiB (function ‘...future.FUN’ of 4.74 KiB, function ‘x_FUN’ of 311 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.197] Packages: 2 packages (‘stats’, ‘future.apply’)
[10:51:38.197] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.197] Resolved: TRUE
[10:51:38.197] Value: 413 bytes of class ‘list’
[10:51:38.197] Early signaling: FALSE
[10:51:38.197] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.197] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.199] Chunk #1 of 1 ... DONE
[10:51:38.199] Launching 1 futures (chunks) ... DONE
[10:51:38.199] Resolving 1 futures (chunks) ...
[10:51:38.199] value() on list ...
[10:51:38.199] |  recursive: 0
[10:51:38.199] |  length: 1
[10:51:38.199] |  
[10:51:38.199] |  Number of remaining objects: 1
[10:51:38.199] |  checking value #1 ...
[10:51:38.199] |  :  'obj' is SequentialFuture
[10:51:38.200] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:38.200] |  :  .  state: ‘finished’
[10:51:38.200] |  :  .  run: TRUE
[10:51:38.200] |  :  .  result: ‘FutureResult’
[10:51:38.200] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:38.200] |  :  SequentialFuture #1
[10:51:38.200] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.200] |  :  .  nx: 1
[10:51:38.200] |  :  .  relay: TRUE
[10:51:38.200] |  :  .  stdout: TRUE
[10:51:38.200] |  :  .  signal: TRUE
[10:51:38.201] |  :  .  resignal: FALSE
[10:51:38.201] |  :  .  force: TRUE
[10:51:38.201] |  :  .  relayed: [n=1] FALSE
[10:51:38.201] |  :  .  queued futures: [n=1] FALSE
[10:51:38.201] |  :  .  until=1
[10:51:38.201] |  :  .  relaying element #1
[10:51:38.202] |  :  .  relayed: [n=1] TRUE
[10:51:38.202] |  :  .  queued futures: [n=1] TRUE
[10:51:38.203] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.203] |  :  value(<SequentialFuture>, ...) ...
[10:51:38.203] |  :  .  value: <list>
[10:51:38.203] |  :  value(<SequentialFuture>, ...) ... done
[10:51:38.203] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.203] |  :  .  nx: 1
[10:51:38.203] |  :  .  relay: TRUE
[10:51:38.203] |  :  .  stdout: TRUE
[10:51:38.203] |  :  .  signal: TRUE
[10:51:38.203] |  :  .  resignal: FALSE
[10:51:38.204] |  :  .  force: TRUE
[10:51:38.204] |  :  .  relayed: [n=1] TRUE
[10:51:38.204] |  :  .  queued futures: [n=1] TRUE
[10:51:38.204] |  :  .  until=1
[10:51:38.204] |  :  .  relayed: [n=1] TRUE
[10:51:38.204] |  :  .  queued futures: [n=1] TRUE
[10:51:38.204] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.204] |  :  length: 0 (resolved future 1)
[10:51:38.204] |  checking value #1 ... done
[10:51:38.204] |  Relaying remaining futures ...
[10:51:38.204] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:38.205] |  :  .  nx: 1
[10:51:38.205] |  :  .  relay: TRUE
[10:51:38.205] |  :  .  stdout: TRUE
[10:51:38.205] |  :  .  signal: TRUE
[10:51:38.205] |  :  .  resignal: FALSE
[10:51:38.205] |  :  .  force: TRUE
[10:51:38.205] |  :  .  relayed: [n=1] TRUE
[10:51:38.205] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:38.205] |  :  .  relayed: [n=1] TRUE
[10:51:38.205] |  :  .  queued futures: [n=1] TRUE
[10:51:38.205] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:38.206] |  Relaying remaining futures ... done
[10:51:38.206] value() on list ... done
[10:51:38.206]  - Number of value chunks collected: 1
[10:51:38.206] Resolving 1 futures (chunks) ... DONE
[10:51:38.206] Reducing values from 1 chunks ...
[10:51:38.206]  - Number of values collected after concatenation: 3
[10:51:38.206]  - Number of values expected: 3
[10:51:38.206] Reducing values from 1 chunks ... DONE
[10:51:38.206] future_lapply() ... DONE
 num [1:5, 1:3] 1 3.25 5.5 7.75 10 ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:5] "0%" "25%" "50%" "75%" ...
  ..$ : chr [1:3] "a" "beta" "logic"
[10:51:38.208] future_lapply() ...
[10:51:38.212] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.212] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.213] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.213] Number of chunks: 1
[10:51:38.213] getGlobalsAndPackagesXApply() ...
[10:51:38.213]  - future.globals: TRUE
[10:51:38.213] getGlobalsAndPackages() ...
[10:51:38.213] |  Searching for globals ...
[10:51:38.220] |  :  globals found: [21] ‘FUN’, ‘{’, ‘<-’, ‘is.na’, ‘if’, ‘any’, ‘[’, ‘!’, ‘return’, ‘rep.int’, ‘sort’, ‘length’, ‘==’, ‘/’, ‘floor’, ‘(’, ‘+’, ‘c’, ‘-’, ‘*’, ‘ceiling’
[10:51:38.220] |  Searching for globals ... DONE
[10:51:38.220] |  Resolving globals: FALSE
[10:51:38.220] |  Search for packages associated with the globals ...
[10:51:38.221] |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:51:38.221] |  :  Packages: [2] ‘stats’, ‘base’
[10:51:38.221] |  Search for packages associated with the globals ... DONE
[10:51:38.222] |  The total size of the 1 globals is 4.67 KiB (4777 bytes)
[10:51:38.222] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 4.67 KiB There is one global: ‘FUN’ (4.67 KiB of class ‘function’)
[10:51:38.222] |  Packages after dropping 'base': [1] ‘stats’
[10:51:38.222] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:51:38.222] |  globals: [1] ‘FUN’
[10:51:38.222] |  packages: [1] ‘stats’
[10:51:38.222] getGlobalsAndPackages() ... done
[10:51:38.223]  - globals found/used: [n=1] ‘FUN’
[10:51:38.223]  - needed namespaces: [n=1] ‘stats’
[10:51:38.223] Finding globals ... DONE
[10:51:38.223]  - use_args: TRUE
[10:51:38.223]  - Getting '...' globals ...
[10:51:38.223] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.223] |  recursive: 0
[10:51:38.224] |  length: 1
[10:51:38.224] |  elements: ‘...’
[10:51:38.224] |  'obj' is DotDotDotList
[10:51:38.224] |  resolve(obj, ...) ...
[10:51:38.224] |  resolve(obj, ...) ... done
[10:51:38.224] |  length: 0 (resolved future 1)
[10:51:38.224] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.224]    - '...' content: [n=0] 
[10:51:38.224] List of 1
[10:51:38.224]  $ ...: list()
[10:51:38.224]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.224]  - attr(*, "where")=List of 1
[10:51:38.224]   ..$ ...:<environment: 0x55d4627a92f0> 
[10:51:38.224]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.224]  - attr(*, "resolved")= logi TRUE
[10:51:38.224]  - attr(*, "total_size")= num NA
[10:51:38.227]  - Getting '...' globals ... DONE
[10:51:38.227] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:38.227] List of 2
[10:51:38.227]  $ ...future.FUN:function (x, na.rm = TRUE)  
[10:51:38.227]  $ ...          : list()
[10:51:38.227]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.227]  - attr(*, "where")=List of 2
[10:51:38.227]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.227]   ..$ ...          :<environment: 0x55d4627a92f0> 
[10:51:38.227]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.227]  - attr(*, "resolved")= logi FALSE
[10:51:38.227]  - attr(*, "total_size")= num 18895
[10:51:38.230] Packages to be attached in all futures: [n=1] ‘stats’
[10:51:38.230] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.230] Number of futures (= number of chunks): 1
[10:51:38.231] Launching 1 futures (chunks) ...
[10:51:38.231] Chunk #1 of 1 ...
[10:51:38.231]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.231] getGlobalsAndPackages() ...
[10:51:38.231] |  Searching for globals ...
[10:51:38.231] |  :  globals found: [0] 
[10:51:38.231] |  Searching for globals ... DONE
[10:51:38.231] |  globals: [0] <none>
[10:51:38.232] |  packages: [0] <none>
[10:51:38.232] getGlobalsAndPackages() ... done
[10:51:38.232]    + additional globals found: [n=0] 
[10:51:38.232]    + additional namespaces needed: [n=0] 
[10:51:38.232]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.232]  - seeds: <none>
[10:51:38.232]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.232] getGlobalsAndPackages() ...
[10:51:38.232] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.232] |  Resolving globals: FALSE
[10:51:38.232] |  Tweak future expression to call with '...' arguments ...
[10:51:38.233] |  :  {
[10:51:38.233] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.233] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:38.233] |  :      "# as a global variable                                         "
[10:51:38.233] |  :      do.call(function(...) {
[10:51:38.233] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.233] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.233] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.233] |  :              on.exit(options(oopts), add = TRUE)
[10:51:38.233] |  :          }
[10:51:38.233] |  :          {
[10:51:38.233] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.233] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.233] |  :                  ...future.FUN(...future.X_jj, ...)
[10:51:38.233] |  :              })
[10:51:38.233] |  :          }
[10:51:38.233] |  :      }, args = future.call.arguments)
[10:51:38.233] |  :  }
[10:51:38.233] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.233] |  Search for packages associated with the globals ...
[10:51:38.233] |  :  Packages associated with globals: [1] ‘stats’
[10:51:38.233] |  :  Packages: [1] ‘stats’
[10:51:38.234] |  Search for packages associated with the globals ... DONE
[10:51:38.234] |  Packages after dropping 'base': [1] ‘stats’
[10:51:38.234] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:51:38.234] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.234] |  packages: [1] ‘stats’
[10:51:38.234] getGlobalsAndPackages() ... done
[10:51:38.234] run() for Future (‘Future’) ...
[10:51:38.234] |  state: ‘created’
[10:51:38.235] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.235] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.235] |  Using SequentialFutureBackend ...
[10:51:38.235] |  :  Launching futures ...
[10:51:38.235] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:38.235] |  :  .  |  getFutureData() ...
[10:51:38.235] |  :  .  |  :  getFutureCore() ...
[10:51:38.235] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:51:38.235] |  :  .  |  :  getFutureCore() ... done
[10:51:38.236] |  :  .  |  :  getFutureCapture() ...
[10:51:38.236] |  :  .  |  :  getFutureCapture() ... done
[10:51:38.236] |  :  .  |  :  getFutureContext() ...
[10:51:38.236] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.236] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:38.236] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.236] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:38.236] |  :  .  |  :  getFutureContext() ... done
[10:51:38.236] |  :  .  |  getFutureData() ... done
[10:51:38.237] |  :  .  |  attachPackages() ...
[10:51:38.237] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:38.237] |  :  .  |  attachPackages() ... DONE
[10:51:38.237] |  :  .  |  attachPackages() ...
[10:51:38.237] |  :  .  |  :  packages: [n=1] ‘stats’
[10:51:38.237] |  :  .  |  attachPackages() ... DONE
[10:51:38.237] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.240] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.240] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.241] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.241] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.241] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.241] |  :  .  |  :  .  |  New stack:
[10:51:38.241] |  :  .  |  :  .  |  List of 1
[10:51:38.241] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.241] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.241] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.241] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.241] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.241] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.241] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.244] |  :  .  |  :  .  |  Old stack:
[10:51:38.244] |  :  .  |  :  .  |  List of 1
[10:51:38.244] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.244] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.244] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.244] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.244] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.244] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:38.244] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.244] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.244] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.244] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.247] |  :  .  |  :  .  |  Not identical
[10:51:38.247] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.247] |  :  .  |  :  .  |  :  List of 2
[10:51:38.247] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.247] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.247] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.247] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.247] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.247] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.247] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.247] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.247] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.247] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.247] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.247] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.247] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.247] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.247] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.252] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.252] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.252] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.252] |  :  .  |  :  .  List of future strategies:
[10:51:38.252] |  :  .  |  :  .  1. sequential:
[10:51:38.252] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.252] |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.252] |  :  .  |  :  .     - call: plan(sequential)
[10:51:38.253] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.253] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.253] |  :  .  |  assign_globals() ...
[10:51:38.253] |  :  .  |  List of 5
[10:51:38.253] |  :  .  |   $ ...future.FUN            :function (x, na.rm = TRUE)  
[10:51:38.253] |  :  .  |   $ future.call.arguments    : list()
[10:51:38.253] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.253] |  :  .  |   $ ...future.elements_ii    :List of 7
[10:51:38.253] |  :  .  |    ..$ : int [1:3] 1 2 3
[10:51:38.253] |  :  .  |    ..$ : int [1:4] 1 2 3 4
[10:51:38.253] |  :  .  |    ..$ : int [1:5] 1 2 3 4 5
[10:51:38.253] |  :  .  |    ..$ : int [1:6] 1 2 3 4 5 6
[10:51:38.253] |  :  .  |    ..$ : int [1:7] 1 2 3 4 5 6 7
[10:51:38.253] |  :  .  |    ..$ : int [1:8] 1 2 3 4 5 6 7 8
[10:51:38.253] |  :  .  |    ..$ : int [1:9] 1 2 3 4 5 6 7 8 9
[10:51:38.253] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:38.253] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:38.253] |  :  .  |   - attr(*, "where")=List of 5
[10:51:38.253] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.253] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.253] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.253] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.253] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.253] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:38.253] |  :  .  |   - attr(*, "total_size")= num 18895
[10:51:38.253] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.253] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:38.261] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:38.261] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:38.261] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:38.262] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:38.262] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.262] |  :  .  |  assign_globals() ... done
[10:51:38.264] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.264] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.264] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.264] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.264] |  :  .  |  :  .  |  :  New stack:
[10:51:38.264] |  :  .  |  :  .  |  :  List of 1
[10:51:38.264] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.264] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.264] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.264] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.264] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.264] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.264] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.264] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.264] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.264] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.267] |  :  .  |  :  .  |  :  Old stack:
[10:51:38.267] |  :  .  |  :  .  |  :  List of 1
[10:51:38.267] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.267] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.267] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.267] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.267] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.267] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.267] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.267] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.267] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.267] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.270] |  :  .  |  :  .  |  :  Identical
[10:51:38.270] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.270] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.270] |  :  .  |  :  .  |  List of future strategies:
[10:51:38.270] |  :  .  |  :  .  |  1. sequential:
[10:51:38.270] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.270] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:38.270] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:38.271] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.271] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.271] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.271] |  :  .  |  SequentialFuture started (and completed)
[10:51:38.271] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:38.272] |  :  Launching futures ... done
[10:51:38.272] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.272] |  Using SequentialFutureBackend ... done
[10:51:38.272] run() for Future (‘SequentialFuture’) ... done
[10:51:38.272] Created future:
[10:51:38.272] SequentialFuture:
[10:51:38.272] Label: ‘future_sapply-1’
[10:51:38.272] Expression:
[10:51:38.272] {
[10:51:38.272]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.272]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.272]     "# as a global variable                                         "
[10:51:38.272]     do.call(function(...) {
[10:51:38.272]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.272]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.272]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.272]             on.exit(options(oopts), add = TRUE)
[10:51:38.272]         }
[10:51:38.272]         {
[10:51:38.272]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.272]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.272]                 ...future.FUN(...future.X_jj, ...)
[10:51:38.272]             })
[10:51:38.272]         }
[10:51:38.272]     }, args = future.call.arguments)
[10:51:38.272] }
[10:51:38.272] Lazy evaluation: FALSE
[10:51:38.272] Asynchronous evaluation: TRUE
[10:51:38.272] Local evaluation: TRUE
[10:51:38.272] Environment: R_GlobalEnv
[10:51:38.272] Capture standard output: TRUE
[10:51:38.272] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.272] Immediate condition classes: ‘immediateCondition’
[10:51:38.272] Globals: 5 objects totaling 5.40 KiB (function ‘...future.FUN’ of 4.67 KiB, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 597 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:38.272] Packages: 1 packages (‘stats’)
[10:51:38.272] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.272] Resolved: TRUE
[10:51:38.272] Value: 367 bytes of class ‘list’
[10:51:38.272] Early signaling: FALSE
[10:51:38.272] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.272] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.273] Chunk #1 of 1 ... DONE
[10:51:38.273] Launching 1 futures (chunks) ... DONE
[10:51:38.273] Resolving 1 futures (chunks) ...
[10:51:38.273] value() on list ...
[10:51:38.273] |  recursive: 0
[10:51:38.273] |  length: 1
[10:51:38.274] |  
[10:51:38.274] |  Number of remaining objects: 1
[10:51:38.274] |  checking value #1 ...
[10:51:38.274] |  :  'obj' is SequentialFuture
[10:51:38.274] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:38.274] |  :  .  state: ‘finished’
[10:51:38.274] |  :  .  run: TRUE
[10:51:38.274] |  :  .  result: ‘FutureResult’
[10:51:38.274] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:38.274] |  :  SequentialFuture #1
[10:51:38.275] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.275] |  :  .  nx: 1
[10:51:38.275] |  :  .  relay: TRUE
[10:51:38.275] |  :  .  stdout: TRUE
[10:51:38.275] |  :  .  signal: TRUE
[10:51:38.275] |  :  .  resignal: FALSE
[10:51:38.275] |  :  .  force: TRUE
[10:51:38.275] |  :  .  relayed: [n=1] FALSE
[10:51:38.275] |  :  .  queued futures: [n=1] FALSE
[10:51:38.275] |  :  .  until=1
[10:51:38.275] |  :  .  relaying element #1
[10:51:38.276] |  :  .  relayed: [n=1] TRUE
[10:51:38.276] |  :  .  queued futures: [n=1] TRUE
[10:51:38.276] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.276] |  :  value(<SequentialFuture>, ...) ...
[10:51:38.276] |  :  .  value: <list>
[10:51:38.276] |  :  value(<SequentialFuture>, ...) ... done
[10:51:38.276] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.276] |  :  .  nx: 1
[10:51:38.276] |  :  .  relay: TRUE
[10:51:38.276] |  :  .  stdout: TRUE
[10:51:38.277] |  :  .  signal: TRUE
[10:51:38.277] |  :  .  resignal: FALSE
[10:51:38.277] |  :  .  force: TRUE
[10:51:38.277] |  :  .  relayed: [n=1] TRUE
[10:51:38.277] |  :  .  queued futures: [n=1] TRUE
[10:51:38.277] |  :  .  until=1
[10:51:38.277] |  :  .  relayed: [n=1] TRUE
[10:51:38.277] |  :  .  queued futures: [n=1] TRUE
[10:51:38.277] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.277] |  :  length: 0 (resolved future 1)
[10:51:38.277] |  checking value #1 ... done
[10:51:38.278] |  Relaying remaining futures ...
[10:51:38.278] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:38.278] |  :  .  nx: 1
[10:51:38.278] |  :  .  relay: TRUE
[10:51:38.278] |  :  .  stdout: TRUE
[10:51:38.278] |  :  .  signal: TRUE
[10:51:38.278] |  :  .  resignal: FALSE
[10:51:38.278] |  :  .  force: TRUE
[10:51:38.278] |  :  .  relayed: [n=1] TRUE
[10:51:38.278] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:38.278] |  :  .  relayed: [n=1] TRUE
[10:51:38.279] |  :  .  queued futures: [n=1] TRUE
[10:51:38.279] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:38.279] |  Relaying remaining futures ... done
[10:51:38.279] value() on list ... done
[10:51:38.279]  - Number of value chunks collected: 1
[10:51:38.279] Resolving 1 futures (chunks) ... DONE
[10:51:38.279] Reducing values from 1 chunks ...
[10:51:38.279]  - Number of values collected after concatenation: 7
[10:51:38.279]  - Number of values expected: 7
[10:51:38.279] Reducing values from 1 chunks ... DONE
[10:51:38.279] future_lapply() ... DONE
[10:51:38.281] future_lapply() ...
[10:51:38.284] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.284] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.284] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.284] Number of chunks: 1
[10:51:38.284] getGlobalsAndPackagesXApply() ...
[10:51:38.284]  - future.globals: TRUE
[10:51:38.284] getGlobalsAndPackages() ...
[10:51:38.284] |  Searching for globals ...
[10:51:38.293] |  :  globals found: [31] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘is.na’, ‘any’, ‘[’, ‘!’, ‘return’, ‘rep.int’, ‘sort’, ‘/’, ‘floor’, ‘(’, ‘+’, ‘c’, ‘-’, ‘*’, ‘ceiling’
[10:51:38.293] |  Searching for globals ... DONE
[10:51:38.293] |  Resolving globals: FALSE
[10:51:38.293] |  Search for packages associated with the globals ...
[10:51:38.293] |  :  Packages associated with globals: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:38.294] |  :  Packages: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:38.294] |  Search for packages associated with the globals ... DONE
[10:51:38.295] |  The total size of the 7 globals is 26.71 KiB (27354 bytes)
[10:51:38.295] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 26.71 KiB The three largest globals are ‘FUN’ (14.07 KiB of class ‘function’), ‘x_FUN’ (4.67 KiB of class ‘function’) and ‘stop_if_not’ (4.51 KiB of class ‘function’)
[10:51:38.295] |  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:38.295] |  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:38.295] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.296] |  packages: [2] ‘stats’, ‘future.apply’
[10:51:38.296] getGlobalsAndPackages() ... done
[10:51:38.296]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.296]  - needed namespaces: [n=2] ‘stats’, ‘future.apply’
[10:51:38.296] Finding globals ... DONE
[10:51:38.296]  - use_args: TRUE
[10:51:38.296]  - Getting '...' globals ...
[10:51:38.297] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.297] |  recursive: 0
[10:51:38.297] |  length: 1
[10:51:38.297] |  elements: ‘...’
[10:51:38.297] |  'obj' is DotDotDotList
[10:51:38.297] |  resolve(obj, ...) ...
[10:51:38.297] |  resolve(obj, ...) ... done
[10:51:38.297] |  length: 0 (resolved future 1)
[10:51:38.297] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.297]    - '...' content: [n=0] 
[10:51:38.298] List of 1
[10:51:38.298]  $ ...: list()
[10:51:38.298]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.298]  - attr(*, "where")=List of 1
[10:51:38.298]   ..$ ...:<environment: 0x55d4650e4418> 
[10:51:38.298]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.298]  - attr(*, "resolved")= logi TRUE
[10:51:38.298]  - attr(*, "total_size")= num NA
[10:51:38.302]  - Getting '...' globals ... DONE
[10:51:38.302] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:38.302] List of 8
[10:51:38.302]  $ ...future.FUN:function (x, ...)  
[10:51:38.302]  $ x_FUN        :function (x, na.rm = TRUE)  
[10:51:38.302]  $ times        : int 5
[10:51:38.302]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.302]  $ stop_if_not  :function (...)  
[10:51:38.302]  $ dim          : NULL
[10:51:38.302]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:38.302]  $ ...          : list()
[10:51:38.302]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.302]  - attr(*, "where")=List of 8
[10:51:38.302]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.302]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:38.302]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:38.302]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:38.302]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:38.302]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:38.302]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:38.302]   ..$ ...          :<environment: 0x55d4650e4418> 
[10:51:38.302]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.302]  - attr(*, "resolved")= logi FALSE
[10:51:38.302]  - attr(*, "total_size")= num 48005
[10:51:38.308] Packages to be attached in all futures: [n=2] ‘stats’, ‘future.apply’
[10:51:38.308] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.308] Number of futures (= number of chunks): 1
[10:51:38.309] Launching 1 futures (chunks) ...
[10:51:38.309] Chunk #1 of 1 ...
[10:51:38.309]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.309] getGlobalsAndPackages() ...
[10:51:38.309] |  Searching for globals ...
[10:51:38.309] |  :  globals found: [0] 
[10:51:38.309] |  Searching for globals ... DONE
[10:51:38.309] |  globals: [0] <none>
[10:51:38.310] |  packages: [0] <none>
[10:51:38.310] getGlobalsAndPackages() ... done
[10:51:38.310]    + additional globals found: [n=0] 
[10:51:38.310]    + additional namespaces needed: [n=0] 
[10:51:38.310]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.310]  - seeds: <none>
[10:51:38.310]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.310] getGlobalsAndPackages() ...
[10:51:38.310] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.310] |  Resolving globals: FALSE
[10:51:38.310] |  Tweak future expression to call with '...' arguments ...
[10:51:38.311] |  :  {
[10:51:38.311] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.311] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:38.311] |  :      "# as a global variable                                         "
[10:51:38.311] |  :      do.call(function(...) {
[10:51:38.311] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.311] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:38.311] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.311] |  :          "# anonymous function.                                          "
[10:51:38.311] |  :          "#                                                              "
[10:51:38.311] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.311] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:38.311] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.311] |  :          "# global environment, which is where globals are written.      "
[10:51:38.311] |  :          penv <- env <- environment(...future.FUN)
[10:51:38.311] |  :          repeat {
[10:51:38.311] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:38.311] |  :                  emptyenv())) 
[10:51:38.311] |  :                  break
[10:51:38.311] |  :              penv <- env
[10:51:38.311] |  :              env <- parent.env(env)
[10:51:38.311] |  :          }
[10:51:38.311] |  :          if (identical(penv, globalenv())) {
[10:51:38.311] |  :              environment(...future.FUN) <- environment()
[10:51:38.311] |  :          }
[10:51:38.311] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.311] |  :              !isNamespace(penv)) {
[10:51:38.311] |  :              parent.env(penv) <- environment()
[10:51:38.311] |  :          }
[10:51:38.311] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.311] |  :          {
[10:51:38.311] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.311] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.311] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.311] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:38.311] |  :              }
[10:51:38.311] |  :              {
[10:51:38.311] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.311] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.311] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:38.311] |  :                  })
[10:51:38.311] |  :              }
[10:51:38.311] |  :          }
[10:51:38.311] |  :      }, args = future.call.arguments)
[10:51:38.311] |  :  }
[10:51:38.311] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.311] |  Search for packages associated with the globals ...
[10:51:38.311] |  :  Packages associated with globals: [2] ‘stats’, ‘future.apply’
[10:51:38.312] |  :  Packages: [2] ‘stats’, ‘future.apply’
[10:51:38.312] |  Search for packages associated with the globals ... DONE
[10:51:38.312] |  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:38.312] |  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:38.312] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.312] |  packages: [2] ‘stats’, ‘future.apply’
[10:51:38.312] getGlobalsAndPackages() ... done
[10:51:38.313] run() for Future (‘Future’) ...
[10:51:38.313] |  state: ‘created’
[10:51:38.313] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.313] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.313] |  Using SequentialFutureBackend ...
[10:51:38.313] |  :  Launching futures ...
[10:51:38.313] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:38.314] |  :  .  |  getFutureData() ...
[10:51:38.314] |  :  .  |  :  getFutureCore() ...
[10:51:38.314] |  :  .  |  :  .  Packages needed by the future expression (n = 2): ‘stats’, ‘future.apply’
[10:51:38.314] |  :  .  |  :  getFutureCore() ... done
[10:51:38.314] |  :  .  |  :  getFutureCapture() ...
[10:51:38.314] |  :  .  |  :  getFutureCapture() ... done
[10:51:38.314] |  :  .  |  :  getFutureContext() ...
[10:51:38.314] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.314] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:38.314] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.315] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:38.315] |  :  .  |  :  getFutureContext() ... done
[10:51:38.315] |  :  .  |  getFutureData() ... done
[10:51:38.315] |  :  .  |  attachPackages() ...
[10:51:38.315] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:38.315] |  :  .  |  attachPackages() ... DONE
[10:51:38.315] |  :  .  |  attachPackages() ...
[10:51:38.315] |  :  .  |  :  packages: [n=2] ‘stats’, ‘future.apply’
[10:51:38.315] |  :  .  |  attachPackages() ... DONE
[10:51:38.316] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.316] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.316] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.316] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.317] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.317] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.317] |  :  .  |  :  .  |  New stack:
[10:51:38.317] |  :  .  |  :  .  |  List of 1
[10:51:38.317] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.317] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.317] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.317] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.317] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.317] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.317] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.319] |  :  .  |  :  .  |  Old stack:
[10:51:38.319] |  :  .  |  :  .  |  List of 1
[10:51:38.319] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.319] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.319] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.319] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.319] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.319] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:38.319] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.319] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.319] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.319] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.324] |  :  .  |  :  .  |  Not identical
[10:51:38.324] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.324] |  :  .  |  :  .  |  :  List of 2
[10:51:38.324] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.324] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.324] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.324] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.324] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.324] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.324] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.324] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.324] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.324] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.324] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.324] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.324] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.324] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.324] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.329] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.329] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.329] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.329] |  :  .  |  :  .  List of future strategies:
[10:51:38.329] |  :  .  |  :  .  1. sequential:
[10:51:38.329] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.329] |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.329] |  :  .  |  :  .     - call: plan(sequential)
[10:51:38.330] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.330] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.330] |  :  .  |  assign_globals() ...
[10:51:38.330] |  :  .  |  List of 11
[10:51:38.330] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:38.330] |  :  .  |   $ x_FUN                    :function (x, na.rm = TRUE)  
[10:51:38.330] |  :  .  |   $ times                    : int 5
[10:51:38.330] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.330] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:38.330] |  :  .  |   $ dim                      : NULL
[10:51:38.330] |  :  .  |   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:38.330] |  :  .  |   $ future.call.arguments    : list()
[10:51:38.330] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.330] |  :  .  |   $ ...future.elements_ii    :List of 7
[10:51:38.330] |  :  .  |    ..$ : int [1:3] 1 2 3
[10:51:38.330] |  :  .  |    ..$ : int [1:4] 1 2 3 4
[10:51:38.330] |  :  .  |    ..$ : int [1:5] 1 2 3 4 5
[10:51:38.330] |  :  .  |    ..$ : int [1:6] 1 2 3 4 5 6
[10:51:38.330] |  :  .  |    ..$ : int [1:7] 1 2 3 4 5 6 7
[10:51:38.330] |  :  .  |    ..$ : int [1:8] 1 2 3 4 5 6 7 8
[10:51:38.330] |  :  .  |    ..$ : int [1:9] 1 2 3 4 5 6 7 8 9
[10:51:38.330] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:38.330] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:38.330] |  :  .  |   - attr(*, "where")=List of 11
[10:51:38.330] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.330] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:38.330] |  :  .  |   - attr(*, "total_size")= num 48005
[10:51:38.330] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.330] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:38.341] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:38.341] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:38.341] |  :  .  |  - copied ‘times’ to environment
[10:51:38.342] |  :  .  |  - copied ‘stopf’ to environment
[10:51:38.342] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:38.342] |  :  .  |  - copied ‘dim’ to environment
[10:51:38.342] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:38.342] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:38.342] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:38.342] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:38.342] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.342] |  :  .  |  assign_globals() ... done
[10:51:38.344] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.344] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.344] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.344] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.345] |  :  .  |  :  .  |  :  New stack:
[10:51:38.345] |  :  .  |  :  .  |  :  List of 1
[10:51:38.345] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.345] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.345] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.345] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.345] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.345] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.345] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.345] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.345] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.345] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.348] |  :  .  |  :  .  |  :  Old stack:
[10:51:38.348] |  :  .  |  :  .  |  :  List of 1
[10:51:38.348] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.348] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.348] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.348] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.348] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.348] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.348] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.348] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.348] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.348] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.350] |  :  .  |  :  .  |  :  Identical
[10:51:38.351] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.351] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.351] |  :  .  |  :  .  |  List of future strategies:
[10:51:38.351] |  :  .  |  :  .  |  1. sequential:
[10:51:38.351] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.351] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:38.351] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:38.351] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.351] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.351] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.352] |  :  .  |  SequentialFuture started (and completed)
[10:51:38.352] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:38.352] |  :  Launching futures ... done
[10:51:38.352] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.352] |  Using SequentialFutureBackend ... done
[10:51:38.352] run() for Future (‘SequentialFuture’) ... done
[10:51:38.352] Created future:
[10:51:38.352] SequentialFuture:
[10:51:38.352] Label: ‘future_vapply-1’
[10:51:38.352] Expression:
[10:51:38.352] {
[10:51:38.352]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.352]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.352]     "# as a global variable                                         "
[10:51:38.352]     do.call(function(...) {
[10:51:38.352]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.352]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.352]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.352]         "# anonymous function.                                          "
[10:51:38.352]         "#                                                              "
[10:51:38.352]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.352]         "# function environment of FUN() to the calling environment.    "
[10:51:38.352]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.352]         "# global environment, which is where globals are written.      "
[10:51:38.352]         penv <- env <- environment(...future.FUN)
[10:51:38.352]         repeat {
[10:51:38.352]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.352]                 emptyenv())) 
[10:51:38.352]                 break
[10:51:38.352]             penv <- env
[10:51:38.352]             env <- parent.env(env)
[10:51:38.352]         }
[10:51:38.352]         if (identical(penv, globalenv())) {
[10:51:38.352]             environment(...future.FUN) <- environment()
[10:51:38.352]         }
[10:51:38.352]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.352]             !isNamespace(penv)) {
[10:51:38.352]             parent.env(penv) <- environment()
[10:51:38.352]         }
[10:51:38.352]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.352]         {
[10:51:38.352]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.352]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.352]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.352]                 on.exit(options(oopts), add = TRUE)
[10:51:38.352]             }
[10:51:38.352]             {
[10:51:38.352]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.352]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.352]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.352]                 })
[10:51:38.352]             }
[10:51:38.352]         }
[10:51:38.352]     }, args = future.call.arguments)
[10:51:38.352] }
[10:51:38.352] Lazy evaluation: FALSE
[10:51:38.352] Asynchronous evaluation: TRUE
[10:51:38.352] Local evaluation: TRUE
[10:51:38.352] Environment: R_GlobalEnv
[10:51:38.352] Capture standard output: TRUE
[10:51:38.352] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.352] Immediate condition classes: ‘immediateCondition’
[10:51:38.352] Globals: 11 objects totaling 27.44 KiB (function ‘...future.FUN’ of 14.07 KiB, function ‘x_FUN’ of 4.67 KiB, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.352] Packages: 2 packages (‘stats’, ‘future.apply’)
[10:51:38.352] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.352] Resolved: TRUE
[10:51:38.352] Value: 367 bytes of class ‘list’
[10:51:38.352] Early signaling: FALSE
[10:51:38.352] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.352] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.353] Chunk #1 of 1 ... DONE
[10:51:38.354] Launching 1 futures (chunks) ... DONE
[10:51:38.354] Resolving 1 futures (chunks) ...
[10:51:38.354] value() on list ...
[10:51:38.354] |  recursive: 0
[10:51:38.354] |  length: 1
[10:51:38.354] |  
[10:51:38.354] |  Number of remaining objects: 1
[10:51:38.354] |  checking value #1 ...
[10:51:38.354] |  :  'obj' is SequentialFuture
[10:51:38.354] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:38.354] |  :  .  state: ‘finished’
[10:51:38.355] |  :  .  run: TRUE
[10:51:38.355] |  :  .  result: ‘FutureResult’
[10:51:38.355] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:38.355] |  :  SequentialFuture #1
[10:51:38.355] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.355] |  :  .  nx: 1
[10:51:38.355] |  :  .  relay: TRUE
[10:51:38.355] |  :  .  stdout: TRUE
[10:51:38.355] |  :  .  signal: TRUE
[10:51:38.355] |  :  .  resignal: FALSE
[10:51:38.355] |  :  .  force: TRUE
[10:51:38.356] |  :  .  relayed: [n=1] FALSE
[10:51:38.356] |  :  .  queued futures: [n=1] FALSE
[10:51:38.356] |  :  .  until=1
[10:51:38.356] |  :  .  relaying element #1
[10:51:38.356] |  :  .  relayed: [n=1] TRUE
[10:51:38.356] |  :  .  queued futures: [n=1] TRUE
[10:51:38.356] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.356] |  :  value(<SequentialFuture>, ...) ...
[10:51:38.356] |  :  .  value: <list>
[10:51:38.357] |  :  value(<SequentialFuture>, ...) ... done
[10:51:38.357] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.357] |  :  .  nx: 1
[10:51:38.357] |  :  .  relay: TRUE
[10:51:38.357] |  :  .  stdout: TRUE
[10:51:38.357] |  :  .  signal: TRUE
[10:51:38.357] |  :  .  resignal: FALSE
[10:51:38.357] |  :  .  force: TRUE
[10:51:38.357] |  :  .  relayed: [n=1] TRUE
[10:51:38.357] |  :  .  queued futures: [n=1] TRUE
[10:51:38.357] |  :  .  until=1
[10:51:38.357] |  :  .  relayed: [n=1] TRUE
[10:51:38.358] |  :  .  queued futures: [n=1] TRUE
[10:51:38.358] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.358] |  :  length: 0 (resolved future 1)
[10:51:38.358] |  checking value #1 ... done
[10:51:38.358] |  Relaying remaining futures ...
[10:51:38.358] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:38.358] |  :  .  nx: 1
[10:51:38.358] |  :  .  relay: TRUE
[10:51:38.358] |  :  .  stdout: TRUE
[10:51:38.358] |  :  .  signal: TRUE
[10:51:38.358] |  :  .  resignal: FALSE
[10:51:38.358] |  :  .  force: TRUE
[10:51:38.359] |  :  .  relayed: [n=1] TRUE
[10:51:38.360] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:38.360] |  :  .  relayed: [n=1] TRUE
[10:51:38.360] |  :  .  queued futures: [n=1] TRUE
[10:51:38.360] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:38.360] |  Relaying remaining futures ... done
[10:51:38.360] value() on list ... done
[10:51:38.360]  - Number of value chunks collected: 1
[10:51:38.360] Resolving 1 futures (chunks) ... DONE
[10:51:38.360] Reducing values from 1 chunks ...
[10:51:38.361]  - Number of values collected after concatenation: 7
[10:51:38.361]  - Number of values expected: 7
[10:51:38.361] Reducing values from 1 chunks ... DONE
[10:51:38.361] future_lapply() ... DONE
 num [1:5, 1:7] 1 1.5 2 2.5 3 1 1.5 2.5 3.5 4 ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:5] "Min." "1st Qu." "Median" "3rd Qu." ...
  ..$ : NULL
[10:51:38.363] future_lapply() ...
[10:51:38.363] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.363] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.364] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.364] Number of chunks: 1
[10:51:38.364] getGlobalsAndPackagesXApply() ...
[10:51:38.364]  - future.globals: TRUE
[10:51:38.364] getGlobalsAndPackages() ...
[10:51:38.364] |  Searching for globals ...
[10:51:38.365] |  :  globals found: [3] ‘FUN’, ‘outer’, ‘rep’
[10:51:38.365] |  Searching for globals ... DONE
[10:51:38.366] |  Resolving globals: FALSE
[10:51:38.366] |  Search for packages associated with the globals ...
[10:51:38.366] |  :  Packages associated with globals: [1] ‘base’
[10:51:38.366] |  :  Packages: [1] ‘base’
[10:51:38.366] |  Search for packages associated with the globals ... DONE
[10:51:38.366] |  The total size of the 1 globals is 680 bytes (680 bytes)
[10:51:38.367] |  The total size of the 1 globals exported for future expression (‘FUN(y = c(2, 4, 6, 8, 10))’) is 680 bytes There is one global: ‘FUN’ (680 bytes of class ‘function’)
[10:51:38.367] |  Packages after dropping 'base': [0] 
[10:51:38.367] |  globals: [1] ‘FUN’
[10:51:38.367] |  packages: [0] 
[10:51:38.367] getGlobalsAndPackages() ... done
[10:51:38.367]  - globals found/used: [n=1] ‘FUN’
[10:51:38.367]  - needed namespaces: [n=0] 
[10:51:38.367] Finding globals ... DONE
[10:51:38.367]  - use_args: TRUE
[10:51:38.367]  - Getting '...' globals ...
[10:51:38.368] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.368] |  recursive: 0
[10:51:38.368] |  length: 1
[10:51:38.368] |  elements: ‘...’
[10:51:38.368] |  'obj' is DotDotDotList
[10:51:38.368] |  resolve(obj, ...) ...
[10:51:38.368] |  resolve(obj, ...) ... done
[10:51:38.368] |  length: 0 (resolved future 1)
[10:51:38.369] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.369]    - '...' content: [n=1] ‘y’
[10:51:38.369] List of 1
[10:51:38.369]  $ ...:List of 1
[10:51:38.369]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:38.369]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.369]  - attr(*, "where")=List of 1
[10:51:38.369]   ..$ ...:<environment: 0x55d4650c7aa8> 
[10:51:38.369]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.369]  - attr(*, "resolved")= logi TRUE
[10:51:38.369]  - attr(*, "total_size")= num NA
[10:51:38.372]  - Getting '...' globals ... DONE
[10:51:38.372] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:38.372] List of 2
[10:51:38.372]  $ ...future.FUN:function (x, y)  
[10:51:38.372]  $ ...          :List of 1
[10:51:38.372]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:38.372]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.372]  - attr(*, "where")=List of 2
[10:51:38.372]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.372]   ..$ ...          :<environment: 0x55d4650c7aa8> 
[10:51:38.372]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.372]  - attr(*, "resolved")= logi FALSE
[10:51:38.372]  - attr(*, "total_size")= num 7318
[10:51:38.375] Packages to be attached in all futures: [n=0] 
[10:51:38.375] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.375] Number of futures (= number of chunks): 1
[10:51:38.375] Launching 1 futures (chunks) ...
[10:51:38.375] Chunk #1 of 1 ...
[10:51:38.375]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.376] getGlobalsAndPackages() ...
[10:51:38.376] |  Searching for globals ...
[10:51:38.376] |  :  globals found: [0] 
[10:51:38.376] |  Searching for globals ... DONE
[10:51:38.376] |  globals: [0] <none>
[10:51:38.376] |  packages: [0] <none>
[10:51:38.376] getGlobalsAndPackages() ... done
[10:51:38.376]    + additional globals found: [n=0] 
[10:51:38.376]    + additional namespaces needed: [n=0] 
[10:51:38.376]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.377]  - seeds: <none>
[10:51:38.377]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.377] getGlobalsAndPackages() ...
[10:51:38.377] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.377] |  Resolving globals: FALSE
[10:51:38.377] |  Tweak future expression to call with '...' arguments ...
[10:51:38.377] |  :  {
[10:51:38.377] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.377] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:38.377] |  :      "# as a global variable                                         "
[10:51:38.377] |  :      do.call(function(...) {
[10:51:38.377] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.377] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:38.377] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.377] |  :          "# anonymous function.                                          "
[10:51:38.377] |  :          "#                                                              "
[10:51:38.377] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.377] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:38.377] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.377] |  :          "# global environment, which is where globals are written.      "
[10:51:38.377] |  :          penv <- env <- environment(...future.FUN)
[10:51:38.377] |  :          repeat {
[10:51:38.377] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:38.377] |  :                  emptyenv())) 
[10:51:38.377] |  :                  break
[10:51:38.377] |  :              penv <- env
[10:51:38.377] |  :              env <- parent.env(env)
[10:51:38.377] |  :          }
[10:51:38.377] |  :          if (identical(penv, globalenv())) {
[10:51:38.377] |  :              environment(...future.FUN) <- environment()
[10:51:38.377] |  :          }
[10:51:38.377] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.377] |  :              !isNamespace(penv)) {
[10:51:38.377] |  :              parent.env(penv) <- environment()
[10:51:38.377] |  :          }
[10:51:38.377] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.377] |  :          {
[10:51:38.377] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.377] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.377] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.377] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:38.377] |  :              }
[10:51:38.377] |  :              {
[10:51:38.377] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.377] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.377] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:38.377] |  :                  })
[10:51:38.377] |  :              }
[10:51:38.377] |  :          }
[10:51:38.377] |  :      }, args = future.call.arguments)
[10:51:38.377] |  :  }
[10:51:38.378] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.378] |  Search for packages associated with the globals ...
[10:51:38.378] |  :  Packages associated with globals: [0] 
[10:51:38.378] |  :  Packages: [0] 
[10:51:38.378] |  Search for packages associated with the globals ... DONE
[10:51:38.379] |  Packages after dropping 'base': [0] 
[10:51:38.380] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.380] |  packages: [0] 
[10:51:38.380] getGlobalsAndPackages() ... done
[10:51:38.380] run() for Future (‘Future’) ...
[10:51:38.380] |  state: ‘created’
[10:51:38.380] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.380] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.380] |  Using SequentialFutureBackend ...
[10:51:38.381] |  :  Launching futures ...
[10:51:38.381] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:38.381] |  :  .  |  getFutureData() ...
[10:51:38.381] |  :  .  |  :  getFutureCore() ...
[10:51:38.381] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:38.381] |  :  .  |  :  getFutureCore() ... done
[10:51:38.381] |  :  .  |  :  getFutureCapture() ...
[10:51:38.381] |  :  .  |  :  getFutureCapture() ... done
[10:51:38.381] |  :  .  |  :  getFutureContext() ...
[10:51:38.381] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.382] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:38.382] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.382] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:38.382] |  :  .  |  :  getFutureContext() ... done
[10:51:38.382] |  :  .  |  getFutureData() ... done
[10:51:38.382] |  :  .  |  attachPackages() ...
[10:51:38.382] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:38.382] |  :  .  |  attachPackages() ... DONE
[10:51:38.383] |  :  .  |  attachPackages() ...
[10:51:38.383] |  :  .  |  :  packages: [n=0] 
[10:51:38.383] |  :  .  |  attachPackages() ... DONE
[10:51:38.383] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.383] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.383] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.383] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.384] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.384] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.384] |  :  .  |  :  .  |  New stack:
[10:51:38.384] |  :  .  |  :  .  |  List of 1
[10:51:38.384] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.384] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.384] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.384] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.384] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.384] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.384] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.386] |  :  .  |  :  .  |  Old stack:
[10:51:38.386] |  :  .  |  :  .  |  List of 1
[10:51:38.386] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.386] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.386] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.386] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.386] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.386] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:38.386] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.386] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.386] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.386] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.389] |  :  .  |  :  .  |  Not identical
[10:51:38.389] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.389] |  :  .  |  :  .  |  :  List of 2
[10:51:38.389] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.389] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.389] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.389] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.389] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.389] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.394] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.394] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.394] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.394] |  :  .  |  :  .  List of future strategies:
[10:51:38.394] |  :  .  |  :  .  1. sequential:
[10:51:38.394] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.394] |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.394] |  :  .  |  :  .     - call: plan(sequential)
[10:51:38.394] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.395] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.395] |  :  .  |  assign_globals() ...
[10:51:38.395] |  :  .  |  List of 5
[10:51:38.395] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:51:38.395] |  :  .  |   $ future.call.arguments    :List of 1
[10:51:38.395] |  :  .  |    ..$ y: num [1:5] 2 4 6 8 10
[10:51:38.395] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.395] |  :  .  |   $ ...future.elements_ii    :List of 4
[10:51:38.395] |  :  .  |    ..$ A: num 50
[10:51:38.395] |  :  .  |    ..$ B: num 60
[10:51:38.395] |  :  .  |    ..$ C: num 70
[10:51:38.395] |  :  .  |    ..$ D: num 80
[10:51:38.395] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:38.395] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:38.395] |  :  .  |   - attr(*, "where")=List of 5
[10:51:38.395] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.395] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.395] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.395] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.395] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.395] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:38.395] |  :  .  |   - attr(*, "total_size")= num 7318
[10:51:38.395] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.395] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:38.403] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:38.403] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:38.403] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:38.403] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:38.403] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:38.403] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.403] |  :  .  |  assign_globals() ... done
[10:51:38.405] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.405] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.405] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.405] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.405] |  :  .  |  :  .  |  :  New stack:
[10:51:38.405] |  :  .  |  :  .  |  :  List of 1
[10:51:38.405] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.405] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.405] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.405] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.405] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.405] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.405] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.405] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.405] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.405] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.408] |  :  .  |  :  .  |  :  Old stack:
[10:51:38.408] |  :  .  |  :  .  |  :  List of 1
[10:51:38.408] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.408] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.408] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.408] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.408] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.408] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.408] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.408] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.408] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.408] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.411] |  :  .  |  :  .  |  :  Identical
[10:51:38.411] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.411] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.411] |  :  .  |  :  .  |  List of future strategies:
[10:51:38.411] |  :  .  |  :  .  |  1. sequential:
[10:51:38.411] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.411] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:38.411] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:38.412] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.412] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.412] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.412] |  :  .  |  SequentialFuture started (and completed)
[10:51:38.412] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:38.412] |  :  Launching futures ... done
[10:51:38.412] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.413] |  Using SequentialFutureBackend ... done
[10:51:38.413] run() for Future (‘SequentialFuture’) ... done
[10:51:38.413] Created future:
[10:51:38.413] SequentialFuture:
[10:51:38.413] Label: ‘future_sapply-1’
[10:51:38.413] Expression:
[10:51:38.413] {
[10:51:38.413]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.413]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.413]     "# as a global variable                                         "
[10:51:38.413]     do.call(function(...) {
[10:51:38.413]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.413]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.413]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.413]         "# anonymous function.                                          "
[10:51:38.413]         "#                                                              "
[10:51:38.413]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.413]         "# function environment of FUN() to the calling environment.    "
[10:51:38.413]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.413]         "# global environment, which is where globals are written.      "
[10:51:38.413]         penv <- env <- environment(...future.FUN)
[10:51:38.413]         repeat {
[10:51:38.413]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.413]                 emptyenv())) 
[10:51:38.413]                 break
[10:51:38.413]             penv <- env
[10:51:38.413]             env <- parent.env(env)
[10:51:38.413]         }
[10:51:38.413]         if (identical(penv, globalenv())) {
[10:51:38.413]             environment(...future.FUN) <- environment()
[10:51:38.413]         }
[10:51:38.413]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.413]             !isNamespace(penv)) {
[10:51:38.413]             parent.env(penv) <- environment()
[10:51:38.413]         }
[10:51:38.413]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.413]         {
[10:51:38.413]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.413]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.413]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.413]                 on.exit(options(oopts), add = TRUE)
[10:51:38.413]             }
[10:51:38.413]             {
[10:51:38.413]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.413]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.413]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.413]                 })
[10:51:38.413]             }
[10:51:38.413]         }
[10:51:38.413]     }, args = future.call.arguments)
[10:51:38.413] }
[10:51:38.413] Lazy evaluation: FALSE
[10:51:38.413] Asynchronous evaluation: TRUE
[10:51:38.413] Local evaluation: TRUE
[10:51:38.413] Environment: R_GlobalEnv
[10:51:38.413] Capture standard output: TRUE
[10:51:38.413] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.413] Immediate condition classes: ‘immediateCondition’
[10:51:38.413] Globals: 5 objects totaling 1.06 KiB (function ‘...future.FUN’ of 680 bytes, DotDotDotList ‘future.call.arguments’ of 183 bytes, list ‘...future.elements_ii’ of 164 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:38.413] Packages: <none>
[10:51:38.413] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.413] Resolved: TRUE
[10:51:38.413] Value: 666 bytes of class ‘list’
[10:51:38.413] Early signaling: FALSE
[10:51:38.413] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.413] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.414] Chunk #1 of 1 ... DONE
[10:51:38.414] Launching 1 futures (chunks) ... DONE
[10:51:38.414] Resolving 1 futures (chunks) ...
[10:51:38.414] value() on list ...
[10:51:38.414] |  recursive: 0
[10:51:38.414] |  length: 1
[10:51:38.414] |  
[10:51:38.415] |  Number of remaining objects: 1
[10:51:38.415] |  checking value #1 ...
[10:51:38.415] |  :  'obj' is SequentialFuture
[10:51:38.415] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:38.415] |  :  .  state: ‘finished’
[10:51:38.415] |  :  .  run: TRUE
[10:51:38.415] |  :  .  result: ‘FutureResult’
[10:51:38.415] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:38.415] |  :  SequentialFuture #1
[10:51:38.415] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.415] |  :  .  nx: 1
[10:51:38.416] |  :  .  relay: TRUE
[10:51:38.416] |  :  .  stdout: TRUE
[10:51:38.416] |  :  .  signal: TRUE
[10:51:38.416] |  :  .  resignal: FALSE
[10:51:38.416] |  :  .  force: TRUE
[10:51:38.416] |  :  .  relayed: [n=1] FALSE
[10:51:38.416] |  :  .  queued futures: [n=1] FALSE
[10:51:38.416] |  :  .  until=1
[10:51:38.416] |  :  .  relaying element #1
[10:51:38.417] |  :  .  relayed: [n=1] TRUE
[10:51:38.417] |  :  .  queued futures: [n=1] TRUE
[10:51:38.418] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.418] |  :  value(<SequentialFuture>, ...) ...
[10:51:38.418] |  :  .  value: <list>
[10:51:38.418] |  :  value(<SequentialFuture>, ...) ... done
[10:51:38.418] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.418] |  :  .  nx: 1
[10:51:38.418] |  :  .  relay: TRUE
[10:51:38.418] |  :  .  stdout: TRUE
[10:51:38.418] |  :  .  signal: TRUE
[10:51:38.418] |  :  .  resignal: FALSE
[10:51:38.419] |  :  .  force: TRUE
[10:51:38.419] |  :  .  relayed: [n=1] TRUE
[10:51:38.419] |  :  .  queued futures: [n=1] TRUE
[10:51:38.419] |  :  .  until=1
[10:51:38.419] |  :  .  relayed: [n=1] TRUE
[10:51:38.419] |  :  .  queued futures: [n=1] TRUE
[10:51:38.419] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.419] |  :  length: 0 (resolved future 1)
[10:51:38.419] |  checking value #1 ... done
[10:51:38.419] |  Relaying remaining futures ...
[10:51:38.420] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:38.420] |  :  .  nx: 1
[10:51:38.420] |  :  .  relay: TRUE
[10:51:38.420] |  :  .  stdout: TRUE
[10:51:38.420] |  :  .  signal: TRUE
[10:51:38.420] |  :  .  resignal: FALSE
[10:51:38.420] |  :  .  force: TRUE
[10:51:38.420] |  :  .  relayed: [n=1] TRUE
[10:51:38.420] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:38.420] |  :  .  relayed: [n=1] TRUE
[10:51:38.420] |  :  .  queued futures: [n=1] TRUE
[10:51:38.421] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:38.421] |  Relaying remaining futures ... done
[10:51:38.421] value() on list ... done
[10:51:38.421]  - Number of value chunks collected: 1
[10:51:38.421] Resolving 1 futures (chunks) ... DONE
[10:51:38.421] Reducing values from 1 chunks ...
[10:51:38.421]  - Number of values collected after concatenation: 4
[10:51:38.421]  - Number of values expected: 4
[10:51:38.421] Reducing values from 1 chunks ... DONE
[10:51:38.421] future_lapply() ... DONE
[10:51:38.422] future_lapply() ...
[10:51:38.424] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.424] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.424] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.424] Number of chunks: 1
[10:51:38.424] getGlobalsAndPackagesXApply() ...
[10:51:38.424]  - future.globals: TRUE
[10:51:38.424] getGlobalsAndPackages() ...
[10:51:38.424] |  Searching for globals ...
[10:51:38.428] |  :  globals found: [18] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘outer’, ‘rep’
[10:51:38.428] |  Searching for globals ... DONE
[10:51:38.428] |  Resolving globals: FALSE
[10:51:38.429] |  Search for packages associated with the globals ...
[10:51:38.429] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:38.429] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:38.429] |  Search for packages associated with the globals ... DONE
[10:51:38.430] |  The total size of the 7 globals is 14.32 KiB (14666 bytes)
[10:51:38.430] |  The total size of the 7 globals exported for future expression (‘FUN(y = c(2, 4, 6, 8, 10))’) is 14.32 KiB The three largest globals are ‘FUN’ (5.67 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:38.430] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.430] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.430] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.431] |  packages: [1] ‘future.apply’
[10:51:38.431] getGlobalsAndPackages() ... done
[10:51:38.431]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.431]  - needed namespaces: [n=1] ‘future.apply’
[10:51:38.431] Finding globals ... DONE
[10:51:38.431]  - use_args: TRUE
[10:51:38.431]  - Getting '...' globals ...
[10:51:38.431] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.432] |  recursive: 0
[10:51:38.432] |  length: 1
[10:51:38.432] |  elements: ‘...’
[10:51:38.432] |  'obj' is DotDotDotList
[10:51:38.432] |  resolve(obj, ...) ...
[10:51:38.432] |  resolve(obj, ...) ... done
[10:51:38.432] |  length: 0 (resolved future 1)
[10:51:38.432] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.432]    - '...' content: [n=1] ‘y’
[10:51:38.432] List of 1
[10:51:38.432]  $ ...:List of 1
[10:51:38.432]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:38.432]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.432]  - attr(*, "where")=List of 1
[10:51:38.432]   ..$ ...:<environment: 0x55d46334f820> 
[10:51:38.432]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.432]  - attr(*, "resolved")= logi TRUE
[10:51:38.432]  - attr(*, "total_size")= num NA
[10:51:38.437]  - Getting '...' globals ... DONE
[10:51:38.437] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:38.437] List of 8
[10:51:38.437]  $ ...future.FUN:function (x, ...)  
[10:51:38.437]  $ x_FUN        :function (x, y)  
[10:51:38.437]  $ times        : int 15
[10:51:38.437]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.437]  $ stop_if_not  :function (...)  
[10:51:38.437]  $ dim          : int [1:2] 3 5
[10:51:38.437]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:38.437]  $ ...          :List of 1
[10:51:38.437]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:38.437]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.437]  - attr(*, "where")=List of 8
[10:51:38.437]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.437]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:38.437]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:38.437]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:38.437]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:38.437]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:38.437]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:38.437]   ..$ ...          :<environment: 0x55d46334f820> 
[10:51:38.437]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.437]  - attr(*, "resolved")= logi FALSE
[10:51:38.437]  - attr(*, "total_size")= num 26659
[10:51:38.443] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:38.443] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.444] Number of futures (= number of chunks): 1
[10:51:38.444] Launching 1 futures (chunks) ...
[10:51:38.444] Chunk #1 of 1 ...
[10:51:38.444]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.444] getGlobalsAndPackages() ...
[10:51:38.444] |  Searching for globals ...
[10:51:38.444] |  :  globals found: [0] 
[10:51:38.445] |  Searching for globals ... DONE
[10:51:38.445] |  globals: [0] <none>
[10:51:38.445] |  packages: [0] <none>
[10:51:38.445] getGlobalsAndPackages() ... done
[10:51:38.445]    + additional globals found: [n=0] 
[10:51:38.445]    + additional namespaces needed: [n=0] 
[10:51:38.445]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.445]  - seeds: <none>
[10:51:38.445]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.445] getGlobalsAndPackages() ...
[10:51:38.446] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.446] |  Resolving globals: FALSE
[10:51:38.446] |  Tweak future expression to call with '...' arguments ...
[10:51:38.446] |  :  {
[10:51:38.446] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.446] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:38.446] |  :      "# as a global variable                                         "
[10:51:38.446] |  :      do.call(function(...) {
[10:51:38.446] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.446] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:38.446] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.446] |  :          "# anonymous function.                                          "
[10:51:38.446] |  :          "#                                                              "
[10:51:38.446] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.446] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:38.446] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.446] |  :          "# global environment, which is where globals are written.      "
[10:51:38.446] |  :          penv <- env <- environment(...future.FUN)
[10:51:38.446] |  :          repeat {
[10:51:38.446] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:38.446] |  :                  emptyenv())) 
[10:51:38.446] |  :                  break
[10:51:38.446] |  :              penv <- env
[10:51:38.446] |  :              env <- parent.env(env)
[10:51:38.446] |  :          }
[10:51:38.446] |  :          if (identical(penv, globalenv())) {
[10:51:38.446] |  :              environment(...future.FUN) <- environment()
[10:51:38.446] |  :          }
[10:51:38.446] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.446] |  :              !isNamespace(penv)) {
[10:51:38.446] |  :              parent.env(penv) <- environment()
[10:51:38.446] |  :          }
[10:51:38.446] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.446] |  :          {
[10:51:38.446] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.446] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.446] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.446] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:38.446] |  :              }
[10:51:38.446] |  :              {
[10:51:38.446] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.446] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.446] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:38.446] |  :                  })
[10:51:38.446] |  :              }
[10:51:38.446] |  :          }
[10:51:38.446] |  :      }, args = future.call.arguments)
[10:51:38.446] |  :  }
[10:51:38.446] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.446] |  Search for packages associated with the globals ...
[10:51:38.447] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:38.447] |  :  Packages: [1] ‘future.apply’
[10:51:38.447] |  Search for packages associated with the globals ... DONE
[10:51:38.447] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.447] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.448] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.448] |  packages: [1] ‘future.apply’
[10:51:38.448] getGlobalsAndPackages() ... done
[10:51:38.448] run() for Future (‘Future’) ...
[10:51:38.448] |  state: ‘created’
[10:51:38.448] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.448] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.448] |  Using SequentialFutureBackend ...
[10:51:38.449] |  :  Launching futures ...
[10:51:38.449] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:38.449] |  :  .  |  getFutureData() ...
[10:51:38.449] |  :  .  |  :  getFutureCore() ...
[10:51:38.449] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:38.449] |  :  .  |  :  getFutureCore() ... done
[10:51:38.449] |  :  .  |  :  getFutureCapture() ...
[10:51:38.449] |  :  .  |  :  getFutureCapture() ... done
[10:51:38.449] |  :  .  |  :  getFutureContext() ...
[10:51:38.449] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.450] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:38.450] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.450] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:38.450] |  :  .  |  :  getFutureContext() ... done
[10:51:38.450] |  :  .  |  getFutureData() ... done
[10:51:38.450] |  :  .  |  attachPackages() ...
[10:51:38.450] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:38.450] |  :  .  |  attachPackages() ... DONE
[10:51:38.450] |  :  .  |  attachPackages() ...
[10:51:38.451] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:38.451] |  :  .  |  attachPackages() ... DONE
[10:51:38.451] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.451] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.451] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.452] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.452] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.452] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.452] |  :  .  |  :  .  |  New stack:
[10:51:38.452] |  :  .  |  :  .  |  List of 1
[10:51:38.452] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.452] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.452] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.452] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.452] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.452] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.452] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.456] |  :  .  |  :  .  |  Old stack:
[10:51:38.456] |  :  .  |  :  .  |  List of 1
[10:51:38.456] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.456] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.456] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.456] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.456] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.456] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:38.456] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.456] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.456] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.456] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.459] |  :  .  |  :  .  |  Not identical
[10:51:38.459] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.460] |  :  .  |  :  .  |  :  List of 2
[10:51:38.460] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.460] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.460] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.460] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.460] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.460] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.460] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.460] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.460] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.460] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.460] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.460] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.460] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.460] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.460] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.464] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.465] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.465] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.465] |  :  .  |  :  .  List of future strategies:
[10:51:38.465] |  :  .  |  :  .  1. sequential:
[10:51:38.465] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.465] |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.465] |  :  .  |  :  .     - call: plan(sequential)
[10:51:38.465] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.465] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.466] |  :  .  |  assign_globals() ...
[10:51:38.466] |  :  .  |  List of 11
[10:51:38.466] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:38.466] |  :  .  |   $ x_FUN                    :function (x, y)  
[10:51:38.466] |  :  .  |   $ times                    : int 15
[10:51:38.466] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.466] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:38.466] |  :  .  |   $ dim                      : int [1:2] 3 5
[10:51:38.466] |  :  .  |   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:38.466] |  :  .  |   $ future.call.arguments    :List of 1
[10:51:38.466] |  :  .  |    ..$ y: num [1:5] 2 4 6 8 10
[10:51:38.466] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.466] |  :  .  |   $ ...future.elements_ii    :List of 4
[10:51:38.466] |  :  .  |    ..$ A: num 50
[10:51:38.466] |  :  .  |    ..$ B: num 60
[10:51:38.466] |  :  .  |    ..$ C: num 70
[10:51:38.466] |  :  .  |    ..$ D: num 80
[10:51:38.466] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:38.466] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:38.466] |  :  .  |   - attr(*, "where")=List of 11
[10:51:38.466] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.466] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:38.466] |  :  .  |   - attr(*, "total_size")= num 26659
[10:51:38.466] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.466] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:38.477] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:38.477] |  :  .  |  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:38.477] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:38.477] |  :  .  |  - copied ‘times’ to environment
[10:51:38.477] |  :  .  |  - copied ‘stopf’ to environment
[10:51:38.477] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:38.477] |  :  .  |  - copied ‘dim’ to environment
[10:51:38.477] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:38.478] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:38.478] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:38.478] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:38.478] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.478] |  :  .  |  assign_globals() ... done
[10:51:38.480] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.480] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.480] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.480] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.480] |  :  .  |  :  .  |  :  New stack:
[10:51:38.480] |  :  .  |  :  .  |  :  List of 1
[10:51:38.480] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.480] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.480] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.480] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.480] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.480] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.480] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.480] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.480] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.480] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.483] |  :  .  |  :  .  |  :  Old stack:
[10:51:38.483] |  :  .  |  :  .  |  :  List of 1
[10:51:38.483] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.483] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.483] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.483] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.483] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.483] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.483] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.483] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.483] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.483] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.486] |  :  .  |  :  .  |  :  Identical
[10:51:38.486] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.486] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.486] |  :  .  |  :  .  |  List of future strategies:
[10:51:38.486] |  :  .  |  :  .  |  1. sequential:
[10:51:38.486] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.486] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:38.486] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:38.487] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.487] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.487] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.487] |  :  .  |  SequentialFuture started (and completed)
[10:51:38.487] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:38.488] |  :  Launching futures ... done
[10:51:38.488] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.488] |  Using SequentialFutureBackend ... done
[10:51:38.488] run() for Future (‘SequentialFuture’) ... done
[10:51:38.488] Created future:
[10:51:38.488] SequentialFuture:
[10:51:38.488] Label: ‘future_vapply-1’
[10:51:38.488] Expression:
[10:51:38.488] {
[10:51:38.488]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.488]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.488]     "# as a global variable                                         "
[10:51:38.488]     do.call(function(...) {
[10:51:38.488]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.488]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.488]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.488]         "# anonymous function.                                          "
[10:51:38.488]         "#                                                              "
[10:51:38.488]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.488]         "# function environment of FUN() to the calling environment.    "
[10:51:38.488]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.488]         "# global environment, which is where globals are written.      "
[10:51:38.488]         penv <- env <- environment(...future.FUN)
[10:51:38.488]         repeat {
[10:51:38.488]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.488]                 emptyenv())) 
[10:51:38.488]                 break
[10:51:38.488]             penv <- env
[10:51:38.488]             env <- parent.env(env)
[10:51:38.488]         }
[10:51:38.488]         if (identical(penv, globalenv())) {
[10:51:38.488]             environment(...future.FUN) <- environment()
[10:51:38.488]         }
[10:51:38.488]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.488]             !isNamespace(penv)) {
[10:51:38.488]             parent.env(penv) <- environment()
[10:51:38.488]         }
[10:51:38.488]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.488]         {
[10:51:38.488]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.488]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.488]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.488]                 on.exit(options(oopts), add = TRUE)
[10:51:38.488]             }
[10:51:38.488]             {
[10:51:38.488]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.488]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.488]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.488]                 })
[10:51:38.488]             }
[10:51:38.488]         }
[10:51:38.488]     }, args = future.call.arguments)
[10:51:38.488] }
[10:51:38.488] Lazy evaluation: FALSE
[10:51:38.488] Asynchronous evaluation: TRUE
[10:51:38.488] Local evaluation: TRUE
[10:51:38.488] Environment: R_GlobalEnv
[10:51:38.488] Capture standard output: TRUE
[10:51:38.488] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.488] Immediate condition classes: ‘immediateCondition’
[10:51:38.488] Globals: 11 objects totaling 14.71 KiB (function ‘...future.FUN’ of 5.67 KiB, function ‘x_FUN’ of 680 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.488] Packages: 1 packages (‘future.apply’)
[10:51:38.488] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.488] Resolved: TRUE
[10:51:38.488] Value: 666 bytes of class ‘list’
[10:51:38.488] Early signaling: FALSE
[10:51:38.488] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.488] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.489] Chunk #1 of 1 ... DONE
[10:51:38.489] Launching 1 futures (chunks) ... DONE
[10:51:38.489] Resolving 1 futures (chunks) ...
[10:51:38.489] value() on list ...
[10:51:38.490] |  recursive: 0
[10:51:38.490] |  length: 1
[10:51:38.490] |  
[10:51:38.490] |  Number of remaining objects: 1
[10:51:38.490] |  checking value #1 ...
[10:51:38.490] |  :  'obj' is SequentialFuture
[10:51:38.490] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:38.490] |  :  .  state: ‘finished’
[10:51:38.490] |  :  .  run: TRUE
[10:51:38.490] |  :  .  result: ‘FutureResult’
[10:51:38.491] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:38.491] |  :  SequentialFuture #1
[10:51:38.491] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.491] |  :  .  nx: 1
[10:51:38.491] |  :  .  relay: TRUE
[10:51:38.491] |  :  .  stdout: TRUE
[10:51:38.491] |  :  .  signal: TRUE
[10:51:38.491] |  :  .  resignal: FALSE
[10:51:38.491] |  :  .  force: TRUE
[10:51:38.491] |  :  .  relayed: [n=1] FALSE
[10:51:38.491] |  :  .  queued futures: [n=1] FALSE
[10:51:38.491] |  :  .  until=1
[10:51:38.492] |  :  .  relaying element #1
[10:51:38.492] |  :  .  relayed: [n=1] TRUE
[10:51:38.492] |  :  .  queued futures: [n=1] TRUE
[10:51:38.492] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.492] |  :  value(<SequentialFuture>, ...) ...
[10:51:38.492] |  :  .  value: <list>
[10:51:38.492] |  :  value(<SequentialFuture>, ...) ... done
[10:51:38.492] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.492] |  :  .  nx: 1
[10:51:38.493] |  :  .  relay: TRUE
[10:51:38.493] |  :  .  stdout: TRUE
[10:51:38.493] |  :  .  signal: TRUE
[10:51:38.494] |  :  .  resignal: FALSE
[10:51:38.494] |  :  .  force: TRUE
[10:51:38.494] |  :  .  relayed: [n=1] TRUE
[10:51:38.494] |  :  .  queued futures: [n=1] TRUE
[10:51:38.494] |  :  .  until=1
[10:51:38.495] |  :  .  relayed: [n=1] TRUE
[10:51:38.495] |  :  .  queued futures: [n=1] TRUE
[10:51:38.495] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.495] |  :  length: 0 (resolved future 1)
[10:51:38.495] |  checking value #1 ... done
[10:51:38.495] |  Relaying remaining futures ...
[10:51:38.495] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:38.495] |  :  .  nx: 1
[10:51:38.495] |  :  .  relay: TRUE
[10:51:38.495] |  :  .  stdout: TRUE
[10:51:38.496] |  :  .  signal: TRUE
[10:51:38.496] |  :  .  resignal: FALSE
[10:51:38.496] |  :  .  force: TRUE
[10:51:38.496] |  :  .  relayed: [n=1] TRUE
[10:51:38.496] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:38.496] |  :  .  relayed: [n=1] TRUE
[10:51:38.496] |  :  .  queued futures: [n=1] TRUE
[10:51:38.496] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:38.496] |  Relaying remaining futures ... done
[10:51:38.496] value() on list ... done
[10:51:38.497]  - Number of value chunks collected: 1
[10:51:38.497] Resolving 1 futures (chunks) ... DONE
[10:51:38.497] Reducing values from 1 chunks ...
[10:51:38.497]  - Number of values collected after concatenation: 4
[10:51:38.497]  - Number of values expected: 4
[10:51:38.497] Reducing values from 1 chunks ... DONE
[10:51:38.497] future_lapply() ... DONE
 num [1:3, 1:5, 1:4] 100 100 100 200 200 200 300 300 300 400 ...
 - attr(*, "dimnames")=List of 3
  ..$ : NULL
  ..$ : NULL
  ..$ : chr [1:4] "A" "B" "C" "D"
[10:51:38.499] future_lapply() ...
[10:51:38.501] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.501] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.501] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.502] Number of chunks: 1
[10:51:38.502] getGlobalsAndPackagesXApply() ...
[10:51:38.502]  - future.globals: TRUE
[10:51:38.502] getGlobalsAndPackages() ...
[10:51:38.502] |  Searching for globals ...
[10:51:38.505] |  :  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:38.505] |  Searching for globals ... DONE
[10:51:38.505] |  Resolving globals: FALSE
[10:51:38.505] |  Search for packages associated with the globals ...
[10:51:38.506] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:38.506] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:38.506] |  Search for packages associated with the globals ... DONE
[10:51:38.507] |  The total size of the 7 globals is 14.73 KiB (15079 bytes)
[10:51:38.507] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 14.73 KiB The three largest globals are ‘FUN’ (6.74 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:38.507] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.507] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.507] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.508] |  packages: [1] ‘future.apply’
[10:51:38.508] getGlobalsAndPackages() ... done
[10:51:38.508]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.508]  - needed namespaces: [n=1] ‘future.apply’
[10:51:38.508] Finding globals ... DONE
[10:51:38.508]  - use_args: TRUE
[10:51:38.508]  - Getting '...' globals ...
[10:51:38.508] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.509] |  recursive: 0
[10:51:38.509] |  length: 1
[10:51:38.509] |  elements: ‘...’
[10:51:38.509] |  'obj' is DotDotDotList
[10:51:38.509] |  resolve(obj, ...) ...
[10:51:38.509] |  resolve(obj, ...) ... done
[10:51:38.509] |  length: 0 (resolved future 1)
[10:51:38.509] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.509]    - '...' content: [n=0] 
[10:51:38.509] List of 1
[10:51:38.509]  $ ...: list()
[10:51:38.509]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.509]  - attr(*, "where")=List of 1
[10:51:38.509]   ..$ ...:<environment: 0x55d4632d5a08> 
[10:51:38.509]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.509]  - attr(*, "resolved")= logi TRUE
[10:51:38.509]  - attr(*, "total_size")= num NA
[10:51:38.513]  - Getting '...' globals ... DONE
[10:51:38.513] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:38.513] List of 8
[10:51:38.513]  $ ...future.FUN:function (x, ...)  
[10:51:38.513]  $ x_FUN        :function (x)  
[10:51:38.513]  $ times        : int 1
[10:51:38.513]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.513]  $ stop_if_not  :function (...)  
[10:51:38.513]  $ dim          : NULL
[10:51:38.513]  $ valid_types  : chr "logical"
[10:51:38.513]  $ ...          : list()
[10:51:38.513]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.513]  - attr(*, "where")=List of 8
[10:51:38.513]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.513]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:38.513]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:38.513]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:38.513]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:38.513]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:38.513]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:38.513]   ..$ ...          :<environment: 0x55d4632d5a08> 
[10:51:38.513]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.513]  - attr(*, "resolved")= logi FALSE
[10:51:38.513]  - attr(*, "total_size")= num 30734
[10:51:38.519] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:38.520] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.520] Number of futures (= number of chunks): 1
[10:51:38.520] Launching 1 futures (chunks) ...
[10:51:38.520] Chunk #1 of 1 ...
[10:51:38.520]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.520] getGlobalsAndPackages() ...
[10:51:38.520] |  Searching for globals ...
[10:51:38.521] |  :  globals found: [0] 
[10:51:38.521] |  Searching for globals ... DONE
[10:51:38.521] |  globals: [0] <none>
[10:51:38.521] |  packages: [0] <none>
[10:51:38.521] getGlobalsAndPackages() ... done
[10:51:38.521]    + additional globals found: [n=0] 
[10:51:38.521]    + additional namespaces needed: [n=0] 
[10:51:38.521]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.521]  - seeds: <none>
[10:51:38.521]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.521] getGlobalsAndPackages() ...
[10:51:38.522] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.522] |  Resolving globals: FALSE
[10:51:38.522] |  Tweak future expression to call with '...' arguments ...
[10:51:38.522] |  :  {
[10:51:38.522] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.522] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:38.522] |  :      "# as a global variable                                         "
[10:51:38.522] |  :      do.call(function(...) {
[10:51:38.522] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.522] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:38.522] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.522] |  :          "# anonymous function.                                          "
[10:51:38.522] |  :          "#                                                              "
[10:51:38.522] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.522] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:38.522] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.522] |  :          "# global environment, which is where globals are written.      "
[10:51:38.522] |  :          penv <- env <- environment(...future.FUN)
[10:51:38.522] |  :          repeat {
[10:51:38.522] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:38.522] |  :                  emptyenv())) 
[10:51:38.522] |  :                  break
[10:51:38.522] |  :              penv <- env
[10:51:38.522] |  :              env <- parent.env(env)
[10:51:38.522] |  :          }
[10:51:38.522] |  :          if (identical(penv, globalenv())) {
[10:51:38.522] |  :              environment(...future.FUN) <- environment()
[10:51:38.522] |  :          }
[10:51:38.522] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.522] |  :              !isNamespace(penv)) {
[10:51:38.522] |  :              parent.env(penv) <- environment()
[10:51:38.522] |  :          }
[10:51:38.522] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.522] |  :          {
[10:51:38.522] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.522] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.522] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.522] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:38.522] |  :              }
[10:51:38.522] |  :              {
[10:51:38.522] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.522] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.522] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:38.522] |  :                  })
[10:51:38.522] |  :              }
[10:51:38.522] |  :          }
[10:51:38.522] |  :      }, args = future.call.arguments)
[10:51:38.522] |  :  }
[10:51:38.522] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.522] |  Search for packages associated with the globals ...
[10:51:38.523] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:38.523] |  :  Packages: [1] ‘future.apply’
[10:51:38.523] |  Search for packages associated with the globals ... DONE
[10:51:38.523] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.524] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.524] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.524] |  packages: [1] ‘future.apply’
[10:51:38.524] getGlobalsAndPackages() ... done
[10:51:38.524] run() for Future (‘Future’) ...
[10:51:38.524] |  state: ‘created’
[10:51:38.524] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.524] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.525] |  Using SequentialFutureBackend ...
[10:51:38.525] |  :  Launching futures ...
[10:51:38.525] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:38.525] |  :  .  |  getFutureData() ...
[10:51:38.525] |  :  .  |  :  getFutureCore() ...
[10:51:38.525] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:38.525] |  :  .  |  :  getFutureCore() ... done
[10:51:38.525] |  :  .  |  :  getFutureCapture() ...
[10:51:38.525] |  :  .  |  :  getFutureCapture() ... done
[10:51:38.525] |  :  .  |  :  getFutureContext() ...
[10:51:38.526] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.526] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:38.526] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.526] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:38.526] |  :  .  |  :  getFutureContext() ... done
[10:51:38.526] |  :  .  |  getFutureData() ... done
[10:51:38.526] |  :  .  |  attachPackages() ...
[10:51:38.526] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:38.527] |  :  .  |  attachPackages() ... DONE
[10:51:38.527] |  :  .  |  attachPackages() ...
[10:51:38.527] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:38.527] |  :  .  |  attachPackages() ... DONE
[10:51:38.527] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.527] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.527] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.528] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.528] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.528] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.528] |  :  .  |  :  .  |  New stack:
[10:51:38.528] |  :  .  |  :  .  |  List of 1
[10:51:38.528] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.528] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.528] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.528] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.528] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.528] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.528] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.530] |  :  .  |  :  .  |  Old stack:
[10:51:38.531] |  :  .  |  :  .  |  List of 1
[10:51:38.531] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.531] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.531] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.531] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.531] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.531] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:38.531] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.531] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.531] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.531] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.536] |  :  .  |  :  .  |  Not identical
[10:51:38.536] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.536] |  :  .  |  :  .  |  :  List of 2
[10:51:38.536] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.536] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.536] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.536] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.536] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.536] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.541] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.541] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.541] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.541] |  :  .  |  :  .  List of future strategies:
[10:51:38.541] |  :  .  |  :  .  1. sequential:
[10:51:38.541] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.541] |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.541] |  :  .  |  :  .     - call: plan(sequential)
[10:51:38.542] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.542] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.542] |  :  .  |  assign_globals() ...
[10:51:38.542] |  :  .  |  List of 11
[10:51:38.542] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:38.542] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:38.542] |  :  .  |   $ times                    : int 1
[10:51:38.542] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.542] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:38.542] |  :  .  |   $ dim                      : NULL
[10:51:38.542] |  :  .  |   $ valid_types              : chr "logical"
[10:51:38.542] |  :  .  |   $ future.call.arguments    : list()
[10:51:38.542] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.542] |  :  .  |   $ ...future.elements_ii    :List of 11
[10:51:38.542] |  :  .  |    ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
[10:51:38.542] |  :  .  |    ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ...
[10:51:38.542] |  :  .  |    ..$ disp: num [1:32] 160 160 108 258 360 ...
[10:51:38.542] |  :  .  |    ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...
[10:51:38.542] |  :  .  |    ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
[10:51:38.542] |  :  .  |    ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ...
[10:51:38.542] |  :  .  |    ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ...
[10:51:38.542] |  :  .  |    ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ...
[10:51:38.542] |  :  .  |    ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ...
[10:51:38.542] |  :  .  |    ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ...
[10:51:38.542] |  :  .  |    ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ...
[10:51:38.542] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:38.542] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:38.542] |  :  .  |   - attr(*, "where")=List of 11
[10:51:38.542] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.542] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:38.542] |  :  .  |   - attr(*, "total_size")= num 30734
[10:51:38.542] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.542] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:38.557] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:38.557] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:38.557] |  :  .  |  - copied ‘times’ to environment
[10:51:38.557] |  :  .  |  - copied ‘stopf’ to environment
[10:51:38.557] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:38.557] |  :  .  |  - copied ‘dim’ to environment
[10:51:38.557] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:38.557] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:38.557] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:38.558] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:38.558] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.558] |  :  .  |  assign_globals() ... done
[10:51:38.559] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.560] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.560] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.560] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.560] |  :  .  |  :  .  |  :  New stack:
[10:51:38.560] |  :  .  |  :  .  |  :  List of 1
[10:51:38.560] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.560] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.560] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.560] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.560] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.560] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.560] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.560] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.560] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.560] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.563] |  :  .  |  :  .  |  :  Old stack:
[10:51:38.563] |  :  .  |  :  .  |  :  List of 1
[10:51:38.563] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.563] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.563] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.563] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.563] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.563] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.563] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.563] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.563] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.563] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.566] |  :  .  |  :  .  |  :  Identical
[10:51:38.566] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.567] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.567] |  :  .  |  :  .  |  List of future strategies:
[10:51:38.567] |  :  .  |  :  .  |  1. sequential:
[10:51:38.567] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.567] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:38.567] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:38.567] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.567] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.567] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.568] |  :  .  |  SequentialFuture started (and completed)
[10:51:38.568] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:38.568] |  :  Launching futures ... done
[10:51:38.568] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.568] |  Using SequentialFutureBackend ... done
[10:51:38.568] run() for Future (‘SequentialFuture’) ... done
[10:51:38.568] Created future:
[10:51:38.568] SequentialFuture:
[10:51:38.568] Label: ‘future_vapply-1’
[10:51:38.568] Expression:
[10:51:38.568] {
[10:51:38.568]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.568]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.568]     "# as a global variable                                         "
[10:51:38.568]     do.call(function(...) {
[10:51:38.568]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.568]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.568]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.568]         "# anonymous function.                                          "
[10:51:38.568]         "#                                                              "
[10:51:38.568]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.568]         "# function environment of FUN() to the calling environment.    "
[10:51:38.568]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.568]         "# global environment, which is where globals are written.      "
[10:51:38.568]         penv <- env <- environment(...future.FUN)
[10:51:38.568]         repeat {
[10:51:38.568]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.568]                 emptyenv())) 
[10:51:38.568]                 break
[10:51:38.568]             penv <- env
[10:51:38.568]             env <- parent.env(env)
[10:51:38.568]         }
[10:51:38.568]         if (identical(penv, globalenv())) {
[10:51:38.568]             environment(...future.FUN) <- environment()
[10:51:38.568]         }
[10:51:38.568]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.568]             !isNamespace(penv)) {
[10:51:38.568]             parent.env(penv) <- environment()
[10:51:38.568]         }
[10:51:38.568]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.568]         {
[10:51:38.568]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.568]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.568]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.568]                 on.exit(options(oopts), add = TRUE)
[10:51:38.568]             }
[10:51:38.568]             {
[10:51:38.568]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.568]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.568]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.568]                 })
[10:51:38.568]             }
[10:51:38.568]         }
[10:51:38.568]     }, args = future.call.arguments)
[10:51:38.568] }
[10:51:38.568] Lazy evaluation: FALSE
[10:51:38.568] Asynchronous evaluation: TRUE
[10:51:38.568] Local evaluation: TRUE
[10:51:38.568] Environment: R_GlobalEnv
[10:51:38.568] Capture standard output: TRUE
[10:51:38.568] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.568] Immediate condition classes: ‘immediateCondition’
[10:51:38.568] Globals: 11 objects totaling 17.89 KiB (function ‘...future.FUN’ of 6.73 KiB, function ‘x_FUN’ of 41 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.568] Packages: 1 packages (‘future.apply’)
[10:51:38.568] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.568] Resolved: TRUE
[10:51:38.568] Value: 163 bytes of class ‘list’
[10:51:38.568] Early signaling: FALSE
[10:51:38.568] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.568] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.570] Chunk #1 of 1 ... DONE
[10:51:38.570] Launching 1 futures (chunks) ... DONE
[10:51:38.570] Resolving 1 futures (chunks) ...
[10:51:38.570] value() on list ...
[10:51:38.570] |  recursive: 0
[10:51:38.570] |  length: 1
[10:51:38.570] |  
[10:51:38.570] |  Number of remaining objects: 1
[10:51:38.570] |  checking value #1 ...
[10:51:38.570] |  :  'obj' is SequentialFuture
[10:51:38.571] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:38.571] |  :  .  state: ‘finished’
[10:51:38.571] |  :  .  run: TRUE
[10:51:38.571] |  :  .  result: ‘FutureResult’
[10:51:38.571] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:38.571] |  :  SequentialFuture #1
[10:51:38.571] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.571] |  :  .  nx: 1
[10:51:38.571] |  :  .  relay: TRUE
[10:51:38.573] |  :  .  stdout: TRUE
[10:51:38.573] |  :  .  signal: TRUE
[10:51:38.573] |  :  .  resignal: FALSE
[10:51:38.573] |  :  .  force: TRUE
[10:51:38.574] |  :  .  relayed: [n=1] FALSE
[10:51:38.574] |  :  .  queued futures: [n=1] FALSE
[10:51:38.574] |  :  .  until=1
[10:51:38.574] |  :  .  relaying element #1
[10:51:38.574] |  :  .  relayed: [n=1] TRUE
[10:51:38.574] |  :  .  queued futures: [n=1] TRUE
[10:51:38.574] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.574] |  :  value(<SequentialFuture>, ...) ...
[10:51:38.575] |  :  .  value: <list>
[10:51:38.575] |  :  value(<SequentialFuture>, ...) ... done
[10:51:38.575] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.575] |  :  .  nx: 1
[10:51:38.575] |  :  .  relay: TRUE
[10:51:38.575] |  :  .  stdout: TRUE
[10:51:38.575] |  :  .  signal: TRUE
[10:51:38.575] |  :  .  resignal: FALSE
[10:51:38.576] |  :  .  force: TRUE
[10:51:38.576] |  :  .  relayed: [n=1] TRUE
[10:51:38.576] |  :  .  queued futures: [n=1] TRUE
[10:51:38.576] |  :  .  until=1
[10:51:38.576] |  :  .  relayed: [n=1] TRUE
[10:51:38.576] |  :  .  queued futures: [n=1] TRUE
[10:51:38.576] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.576] |  :  length: 0 (resolved future 1)
[10:51:38.577] |  checking value #1 ... done
[10:51:38.577] |  Relaying remaining futures ...
[10:51:38.577] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:38.577] |  :  .  nx: 1
[10:51:38.577] |  :  .  relay: TRUE
[10:51:38.577] |  :  .  stdout: TRUE
[10:51:38.577] |  :  .  signal: TRUE
[10:51:38.577] |  :  .  resignal: FALSE
[10:51:38.577] |  :  .  force: TRUE
[10:51:38.577] |  :  .  relayed: [n=1] TRUE
[10:51:38.577] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:38.578] |  :  .  relayed: [n=1] TRUE
[10:51:38.578] |  :  .  queued futures: [n=1] TRUE
[10:51:38.578] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:38.578] |  Relaying remaining futures ... done
[10:51:38.578] value() on list ... done
[10:51:38.578]  - Number of value chunks collected: 1
[10:51:38.578] Resolving 1 futures (chunks) ... DONE
[10:51:38.579] Reducing values from 1 chunks ...
[10:51:38.579]  - Number of values collected after concatenation: 11
[10:51:38.579]  - Number of values expected: 11
[10:51:38.579] Reducing values from 1 chunks ... DONE
[10:51:38.579] future_lapply() ... DONE
 Named logi [1:11] TRUE TRUE TRUE TRUE TRUE TRUE ...
 - attr(*, "names")= chr [1:11] "mpg" "cyl" "disp" "hp" ...
- future_vapply(x, ...) where length(x) != length(as.list(x)) ...
[10:51:38.580] future_lapply() ...
[10:51:38.584] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.584] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.584] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.584] Number of chunks: 1
[10:51:38.584] getGlobalsAndPackagesXApply() ...
[10:51:38.584]  - future.globals: TRUE
[10:51:38.584] getGlobalsAndPackages() ...
[10:51:38.585] |  Searching for globals ...
[10:51:38.589] |  :  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:38.590] |  Searching for globals ... DONE
[10:51:38.590] |  Resolving globals: FALSE
[10:51:38.590] |  Search for packages associated with the globals ...
[10:51:38.590] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:38.591] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:38.591] |  Search for packages associated with the globals ... DONE
[10:51:38.591] |  The total size of the 7 globals is 11.92 KiB (12201 bytes)
[10:51:38.592] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 11.92 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (3.92 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:38.592] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.592] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.592] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.592] |  packages: [1] ‘future.apply’
[10:51:38.592] getGlobalsAndPackages() ... done
[10:51:38.593]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.593]  - needed namespaces: [n=1] ‘future.apply’
[10:51:38.593] Finding globals ... DONE
[10:51:38.593]  - use_args: TRUE
[10:51:38.593]  - Getting '...' globals ...
[10:51:38.593] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.593] |  recursive: 0
[10:51:38.594] |  length: 1
[10:51:38.594] |  elements: ‘...’
[10:51:38.594] |  'obj' is DotDotDotList
[10:51:38.594] |  resolve(obj, ...) ...
[10:51:38.594] |  resolve(obj, ...) ... done
[10:51:38.594] |  length: 0 (resolved future 1)
[10:51:38.594] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.594]    - '...' content: [n=0] 
[10:51:38.594] List of 1
[10:51:38.594]  $ ...: list()
[10:51:38.594]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.594]  - attr(*, "where")=List of 1
[10:51:38.594]   ..$ ...:<environment: 0x55d462db1eb8> 
[10:51:38.594]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.594]  - attr(*, "resolved")= logi TRUE
[10:51:38.594]  - attr(*, "total_size")= num NA
[10:51:38.599]  - Getting '...' globals ... DONE
[10:51:38.599] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:38.599] List of 8
[10:51:38.599]  $ ...future.FUN:function (x, ...)  
[10:51:38.599]  $ x_FUN        :function (x)  
[10:51:38.599]  $ times        : int 1
[10:51:38.599]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.599]  $ stop_if_not  :function (...)  
[10:51:38.599]  $ dim          : NULL
[10:51:38.599]  $ valid_types  : chr [1:2] "logical" "integer"
[10:51:38.599]  $ ...          : list()
[10:51:38.599]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.599]  - attr(*, "where")=List of 8
[10:51:38.599]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.599]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:38.599]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:38.599]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:38.599]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:38.599]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:38.599]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:38.599]   ..$ ...          :<environment: 0x55d462db1eb8> 
[10:51:38.599]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.599]  - attr(*, "resolved")= logi FALSE
[10:51:38.599]  - attr(*, "total_size")= num 22016
[10:51:38.605] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:38.605] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.605] Number of futures (= number of chunks): 1
[10:51:38.605] Launching 1 futures (chunks) ...
[10:51:38.605] Chunk #1 of 1 ...
[10:51:38.606]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.606] getGlobalsAndPackages() ...
[10:51:38.606] |  Searching for globals ...
[10:51:38.606] |  :  globals found: [0] 
[10:51:38.606] |  Searching for globals ... DONE
[10:51:38.606] |  globals: [0] <none>
[10:51:38.606] |  packages: [0] <none>
[10:51:38.606] getGlobalsAndPackages() ... done
[10:51:38.607]    + additional globals found: [n=0] 
[10:51:38.607]    + additional namespaces needed: [n=0] 
[10:51:38.607]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.607]  - seeds: <none>
[10:51:38.607]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.607] getGlobalsAndPackages() ...
[10:51:38.607] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.607] |  Resolving globals: FALSE
[10:51:38.607] |  Tweak future expression to call with '...' arguments ...
[10:51:38.607] |  :  {
[10:51:38.607] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.607] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:38.607] |  :      "# as a global variable                                         "
[10:51:38.607] |  :      do.call(function(...) {
[10:51:38.607] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.607] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:38.607] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.607] |  :          "# anonymous function.                                          "
[10:51:38.607] |  :          "#                                                              "
[10:51:38.607] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.607] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:38.607] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.607] |  :          "# global environment, which is where globals are written.      "
[10:51:38.607] |  :          penv <- env <- environment(...future.FUN)
[10:51:38.607] |  :          repeat {
[10:51:38.607] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:38.607] |  :                  emptyenv())) 
[10:51:38.607] |  :                  break
[10:51:38.607] |  :              penv <- env
[10:51:38.607] |  :              env <- parent.env(env)
[10:51:38.607] |  :          }
[10:51:38.607] |  :          if (identical(penv, globalenv())) {
[10:51:38.607] |  :              environment(...future.FUN) <- environment()
[10:51:38.607] |  :          }
[10:51:38.607] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.607] |  :              !isNamespace(penv)) {
[10:51:38.607] |  :              parent.env(penv) <- environment()
[10:51:38.607] |  :          }
[10:51:38.607] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.607] |  :          {
[10:51:38.607] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.607] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.607] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.607] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:38.607] |  :              }
[10:51:38.607] |  :              {
[10:51:38.607] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.607] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.607] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:38.607] |  :                  })
[10:51:38.607] |  :              }
[10:51:38.607] |  :          }
[10:51:38.607] |  :      }, args = future.call.arguments)
[10:51:38.607] |  :  }
[10:51:38.608] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.608] |  Search for packages associated with the globals ...
[10:51:38.608] |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:38.609] |  :  Packages: [1] ‘future.apply’
[10:51:38.609] |  Search for packages associated with the globals ... DONE
[10:51:38.609] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.609] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.609] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.609] |  packages: [1] ‘future.apply’
[10:51:38.609] getGlobalsAndPackages() ... done
[10:51:38.610] run() for Future (‘Future’) ...
[10:51:38.610] |  state: ‘created’
[10:51:38.610] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.610] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.610] |  Using SequentialFutureBackend ...
[10:51:38.610] |  :  Launching futures ...
[10:51:38.610] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:38.610] |  :  .  |  getFutureData() ...
[10:51:38.610] |  :  .  |  :  getFutureCore() ...
[10:51:38.610] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:38.611] |  :  .  |  :  getFutureCore() ... done
[10:51:38.611] |  :  .  |  :  getFutureCapture() ...
[10:51:38.611] |  :  .  |  :  getFutureCapture() ... done
[10:51:38.611] |  :  .  |  :  getFutureContext() ...
[10:51:38.611] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.611] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:38.611] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.611] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:38.611] |  :  .  |  :  getFutureContext() ... done
[10:51:38.611] |  :  .  |  getFutureData() ... done
[10:51:38.612] |  :  .  |  attachPackages() ...
[10:51:38.612] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:38.612] |  :  .  |  attachPackages() ... DONE
[10:51:38.612] |  :  .  |  attachPackages() ...
[10:51:38.612] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:38.612] |  :  .  |  attachPackages() ... DONE
[10:51:38.613] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.613] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.613] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.613] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.613] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.613] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.613] |  :  .  |  :  .  |  New stack:
[10:51:38.614] |  :  .  |  :  .  |  List of 1
[10:51:38.614] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.614] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.614] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.614] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.614] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.614] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.614] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.617] |  :  .  |  :  .  |  Old stack:
[10:51:38.617] |  :  .  |  :  .  |  List of 1
[10:51:38.617] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.617] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.617] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.617] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.617] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.617] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:38.617] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.617] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.617] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.617] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.620] |  :  .  |  :  .  |  Not identical
[10:51:38.620] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.620] |  :  .  |  :  .  |  :  List of 2
[10:51:38.620] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.620] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.620] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.620] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.620] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.620] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.620] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.620] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.620] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.620] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.620] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.620] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.620] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.620] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.620] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.625] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.625] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.625] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.625] |  :  .  |  :  .  List of future strategies:
[10:51:38.625] |  :  .  |  :  .  1. sequential:
[10:51:38.625] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.625] |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.625] |  :  .  |  :  .     - call: plan(sequential)
[10:51:38.625] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.625] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.626] |  :  .  |  assign_globals() ...
[10:51:38.626] |  :  .  |  List of 11
[10:51:38.626] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:38.626] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:38.626] |  :  .  |   $ times                    : int 1
[10:51:38.626] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.626] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:38.626] |  :  .  |   $ dim                      : NULL
[10:51:38.626] |  :  .  |   $ valid_types              : chr [1:2] "logical" "integer"
[10:51:38.626] |  :  .  |   $ future.call.arguments    : list()
[10:51:38.626] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.626] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:51:38.626] |  :  .  |    ..$ a: num 1
[10:51:38.626] |  :  .  |    ..$ b: num 2
[10:51:38.626] |  :  .  |    ..$ c: num 3
[10:51:38.626] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:38.626] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:38.626] |  :  .  |   - attr(*, "where")=List of 11
[10:51:38.626] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.626] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:38.626] |  :  .  |   - attr(*, "total_size")= num 22016
[10:51:38.626] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.626] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:38.635] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:38.636] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:38.636] |  :  .  |  - copied ‘times’ to environment
[10:51:38.636] |  :  .  |  - copied ‘stopf’ to environment
[10:51:38.636] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:38.636] |  :  .  |  - copied ‘dim’ to environment
[10:51:38.636] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:38.636] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:38.636] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:38.636] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:38.636] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.637] |  :  .  |  assign_globals() ... done
[10:51:38.638] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.638] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.638] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.638] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.639] |  :  .  |  :  .  |  :  New stack:
[10:51:38.639] |  :  .  |  :  .  |  :  List of 1
[10:51:38.639] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.639] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.639] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.639] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.639] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.639] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.639] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.639] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.639] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.639] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.642] |  :  .  |  :  .  |  :  Old stack:
[10:51:38.642] |  :  .  |  :  .  |  :  List of 1
[10:51:38.642] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.642] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.642] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.642] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.642] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.642] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.642] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.642] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.642] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.642] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.645] |  :  .  |  :  .  |  :  Identical
[10:51:38.645] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.645] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.645] |  :  .  |  :  .  |  List of future strategies:
[10:51:38.645] |  :  .  |  :  .  |  1. sequential:
[10:51:38.645] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.645] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:38.645] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:38.645] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.645] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.645] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.646] |  :  .  |  SequentialFuture started (and completed)
[10:51:38.646] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:38.646] |  :  Launching futures ... done
[10:51:38.646] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.646] |  Using SequentialFutureBackend ... done
[10:51:38.646] run() for Future (‘SequentialFuture’) ... done
[10:51:38.646] Created future:
[10:51:38.646] SequentialFuture:
[10:51:38.646] Label: ‘future_vapply-1’
[10:51:38.646] Expression:
[10:51:38.646] {
[10:51:38.646]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.646]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.646]     "# as a global variable                                         "
[10:51:38.646]     do.call(function(...) {
[10:51:38.646]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.646]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.646]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.646]         "# anonymous function.                                          "
[10:51:38.646]         "#                                                              "
[10:51:38.646]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.646]         "# function environment of FUN() to the calling environment.    "
[10:51:38.646]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.646]         "# global environment, which is where globals are written.      "
[10:51:38.646]         penv <- env <- environment(...future.FUN)
[10:51:38.646]         repeat {
[10:51:38.646]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.646]                 emptyenv())) 
[10:51:38.646]                 break
[10:51:38.646]             penv <- env
[10:51:38.646]             env <- parent.env(env)
[10:51:38.646]         }
[10:51:38.646]         if (identical(penv, globalenv())) {
[10:51:38.646]             environment(...future.FUN) <- environment()
[10:51:38.646]         }
[10:51:38.646]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.646]             !isNamespace(penv)) {
[10:51:38.646]             parent.env(penv) <- environment()
[10:51:38.646]         }
[10:51:38.646]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.646]         {
[10:51:38.646]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.646]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.646]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.646]                 on.exit(options(oopts), add = TRUE)
[10:51:38.646]             }
[10:51:38.646]             {
[10:51:38.646]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.646]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.646]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.646]                 })
[10:51:38.646]             }
[10:51:38.646]         }
[10:51:38.646]     }, args = future.call.arguments)
[10:51:38.646] }
[10:51:38.646] Lazy evaluation: FALSE
[10:51:38.646] Asynchronous evaluation: TRUE
[10:51:38.646] Local evaluation: TRUE
[10:51:38.646] Environment: R_GlobalEnv
[10:51:38.646] Capture standard output: TRUE
[10:51:38.646] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.646] Immediate condition classes: ‘immediateCondition’
[10:51:38.646] Globals: 11 objects totaling 12.19 KiB (function ‘...future.FUN’ of 3.91 KiB, function ‘x_FUN’ of 37 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.646] Packages: 1 packages (‘future.apply’)
[10:51:38.646] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.646] Resolved: TRUE
[10:51:38.646] Value: 67 bytes of class ‘list’
[10:51:38.646] Early signaling: FALSE
[10:51:38.646] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.646] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.647] Chunk #1 of 1 ... DONE
[10:51:38.648] Launching 1 futures (chunks) ... DONE
[10:51:38.648] Resolving 1 futures (chunks) ...
[10:51:38.648] value() on list ...
[10:51:38.648] |  recursive: 0
[10:51:38.648] |  length: 1
[10:51:38.648] |  
[10:51:38.648] |  Number of remaining objects: 1
[10:51:38.648] |  checking value #1 ...
[10:51:38.648] |  :  'obj' is SequentialFuture
[10:51:38.648] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:38.649] |  :  .  state: ‘finished’
[10:51:38.649] |  :  .  run: TRUE
[10:51:38.649] |  :  .  result: ‘FutureResult’
[10:51:38.649] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:38.649] |  :  SequentialFuture #1
[10:51:38.649] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.649] |  :  .  nx: 1
[10:51:38.649] |  :  .  relay: TRUE
[10:51:38.649] |  :  .  stdout: TRUE
[10:51:38.651] |  :  .  signal: TRUE
[10:51:38.651] |  :  .  resignal: FALSE
[10:51:38.651] |  :  .  force: TRUE
[10:51:38.651] |  :  .  relayed: [n=1] FALSE
[10:51:38.652] |  :  .  queued futures: [n=1] FALSE
[10:51:38.652] |  :  .  until=1
[10:51:38.652] |  :  .  relaying element #1
[10:51:38.652] |  :  .  relayed: [n=1] TRUE
[10:51:38.652] |  :  .  queued futures: [n=1] TRUE
[10:51:38.652] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.652] |  :  value(<SequentialFuture>, ...) ...
[10:51:38.652] |  :  .  value: <list>
[10:51:38.653] |  :  value(<SequentialFuture>, ...) ... done
[10:51:38.653] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.653] |  :  .  nx: 1
[10:51:38.653] |  :  .  relay: TRUE
[10:51:38.653] |  :  .  stdout: TRUE
[10:51:38.653] |  :  .  signal: TRUE
[10:51:38.653] |  :  .  resignal: FALSE
[10:51:38.653] |  :  .  force: TRUE
[10:51:38.653] |  :  .  relayed: [n=1] TRUE
[10:51:38.653] |  :  .  queued futures: [n=1] TRUE
[10:51:38.653] |  :  .  until=1
[10:51:38.653] |  :  .  relayed: [n=1] TRUE
[10:51:38.654] |  :  .  queued futures: [n=1] TRUE
[10:51:38.654] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.654] |  :  length: 0 (resolved future 1)
[10:51:38.654] |  checking value #1 ... done
[10:51:38.654] |  Relaying remaining futures ...
[10:51:38.654] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:38.654] |  :  .  nx: 1
[10:51:38.654] |  :  .  relay: TRUE
[10:51:38.654] |  :  .  stdout: TRUE
[10:51:38.654] |  :  .  signal: TRUE
[10:51:38.655] |  :  .  resignal: FALSE
[10:51:38.655] |  :  .  force: TRUE
[10:51:38.655] |  :  .  relayed: [n=1] TRUE
[10:51:38.655] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:38.655] |  :  .  relayed: [n=1] TRUE
[10:51:38.655] |  :  .  queued futures: [n=1] TRUE
[10:51:38.655] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:38.655] |  Relaying remaining futures ... done
[10:51:38.655] value() on list ... done
[10:51:38.655]  - Number of value chunks collected: 1
[10:51:38.656] Resolving 1 futures (chunks) ... DONE
[10:51:38.656] Reducing values from 1 chunks ...
[10:51:38.656]  - Number of values collected after concatenation: 3
[10:51:38.656]  - Number of values expected: 3
[10:51:38.656] Reducing values from 1 chunks ... DONE
[10:51:38.656] future_lapply() ... DONE
- exceptions ...
[10:51:38.656] future_lapply() ...
[10:51:38.658] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.658] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.659] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.659] Number of chunks: 1
[10:51:38.659] getGlobalsAndPackagesXApply() ...
[10:51:38.659]  - future.globals: TRUE
[10:51:38.659] getGlobalsAndPackages() ...
[10:51:38.659] |  Searching for globals ...
[10:51:38.663] |  :  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:38.663] |  Searching for globals ... DONE
[10:51:38.663] |  Resolving globals: FALSE
[10:51:38.663] |  Search for packages associated with the globals ...
[10:51:38.663] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:38.664] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:38.664] |  Search for packages associated with the globals ... DONE
[10:51:38.664] |  The total size of the 7 globals is 12.81 KiB (13119 bytes)
[10:51:38.665] |  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.81 KiB The three largest globals are ‘FUN’ (4.65 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:38.665] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.665] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.665] |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.665] |  packages: [1] ‘future.apply’
[10:51:38.665] getGlobalsAndPackages() ... done
[10:51:38.665]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.665]  - needed namespaces: [n=1] ‘future.apply’
[10:51:38.666] Finding globals ... DONE
[10:51:38.666]  - use_args: TRUE
[10:51:38.666]  - Getting '...' globals ...
[10:51:38.666] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.666] |  recursive: 0
[10:51:38.666] |  length: 1
[10:51:38.666] |  elements: ‘...’
[10:51:38.666] |  'obj' is DotDotDotList
[10:51:38.667] |  resolve(obj, ...) ...
[10:51:38.667] |  resolve(obj, ...) ... done
[10:51:38.667] |  length: 0 (resolved future 1)
[10:51:38.667] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.667]    - '...' content: [n=0] 
[10:51:38.667] List of 1
[10:51:38.667]  $ ...: list()
[10:51:38.667]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.667]  - attr(*, "where")=List of 1
[10:51:38.667]   ..$ ...:<environment: 0x55d4640617d0> 
[10:51:38.667]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.667]  - attr(*, "resolved")= logi TRUE
[10:51:38.667]  - attr(*, "total_size")= num NA
[10:51:38.671]  - Getting '...' globals ... DONE
[10:51:38.671] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:38.671] List of 8
[10:51:38.671]  $ ...future.FUN:function (x, ...)  
[10:51:38.671]  $ x_FUN        :function (x)  
[10:51:38.671]  $ times        : int 2
[10:51:38.671]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.671]  $ stop_if_not  :function (...)  
[10:51:38.671]  $ dim          : NULL
[10:51:38.671]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:38.671]  $ ...          : list()
[10:51:38.671]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.671]  - attr(*, "where")=List of 8
[10:51:38.671]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.671]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:38.671]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:38.671]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:38.671]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:38.671]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:38.671]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:38.671]   ..$ ...          :<environment: 0x55d4640617d0> 
[10:51:38.671]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.671]  - attr(*, "resolved")= logi FALSE
[10:51:38.671]  - attr(*, "total_size")= num 23676
[10:51:38.678] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:38.678] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.678] Number of futures (= number of chunks): 1
[10:51:38.678] Launching 1 futures (chunks) ...
[10:51:38.678] Chunk #1 of 1 ...
[10:51:38.678]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.678] getGlobalsAndPackages() ...
[10:51:38.679] |  Searching for globals ...
[10:51:38.679] |  :  globals found: [0] 
[10:51:38.679] |  Searching for globals ... DONE
[10:51:38.679] |  globals: [0] <none>
[10:51:38.679] |  packages: [0] <none>
[10:51:38.679] getGlobalsAndPackages() ... done
[10:51:38.679]    + additional globals found: [n=0] 
[10:51:38.679]    + additional namespaces needed: [n=0] 
[10:51:38.680]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.680]  - seeds: <none>
[10:51:38.680]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.680] getGlobalsAndPackages() ...
[10:51:38.680] |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.680] |  Resolving globals: FALSE
[10:51:38.680] |  Tweak future expression to call with '...' arguments ...
[10:51:38.680] |  :  {
[10:51:38.680] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.680] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:38.680] |  :      "# as a global variable                                         "
[10:51:38.680] |  :      do.call(function(...) {
[10:51:38.680] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.680] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:38.680] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.680] |  :          "# anonymous function.                                          "
[10:51:38.680] |  :          "#                                                              "
[10:51:38.680] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.680] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:38.680] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.680] |  :          "# global environment, which is where globals are written.      "
[10:51:38.680] |  :          penv <- env <- environment(...future.FUN)
[10:51:38.680] |  :          repeat {
[10:51:38.680] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:38.680] |  :                  emptyenv())) 
[10:51:38.680] |  :                  break
[10:51:38.680] |  :              penv <- env
[10:51:38.680] |  :              env <- parent.env(env)
[10:51:38.680] |  :          }
[10:51:38.680] |  :          if (identical(penv, globalenv())) {
[10:51:38.680] |  :              environment(...future.FUN) <- environment()
[10:51:38.680] |  :          }
[10:51:38.680] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.680] |  :              !isNamespace(penv)) {
[10:51:38.680] |  :              parent.env(penv) <- environment()
[10:51:38.680] |  :          }
[10:51:38.680] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.680] |  :          {
[10:51:38.680] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.680] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.680] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.680] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:38.680] |  :              }
[10:51:38.680] |  :              {
[10:51:38.680] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.680] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.680] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:38.680] |  :                  })
[10:51:38.680] |  :              }
[10:51:38.680] |  :          }
[10:51:38.680] |  :      }, args = future.call.arguments)
[10:51:38.680] |  :  }
[10:51:38.681] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.681] |  Search for packages associated with the globals ...
[10:51:38.681] |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:38.681] |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:38.681] |  Search for packages associated with the globals ... DONE
[10:51:38.682] |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.682] |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.682] |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.682] |  packages: [1] ‘future.apply’
[10:51:38.682] getGlobalsAndPackages() ... done
[10:51:38.682] run() for Future (‘Future’) ...
[10:51:38.682] |  state: ‘created’
[10:51:38.683] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.683] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.683] |  Using SequentialFutureBackend ...
[10:51:38.683] |  :  Launching futures ...
[10:51:38.683] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:38.683] |  :  .  |  getFutureData() ...
[10:51:38.683] |  :  .  |  :  getFutureCore() ...
[10:51:38.683] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:38.683] |  :  .  |  :  getFutureCore() ... done
[10:51:38.684] |  :  .  |  :  getFutureCapture() ...
[10:51:38.684] |  :  .  |  :  getFutureCapture() ... done
[10:51:38.684] |  :  .  |  :  getFutureContext() ...
[10:51:38.684] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.684] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:38.684] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.684] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:38.684] |  :  .  |  :  getFutureContext() ... done
[10:51:38.684] |  :  .  |  getFutureData() ... done
[10:51:38.684] |  :  .  |  attachPackages() ...
[10:51:38.685] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:38.685] |  :  .  |  attachPackages() ... DONE
[10:51:38.685] |  :  .  |  attachPackages() ...
[10:51:38.685] |  :  .  |  :  packages: [n=1] ‘future.apply’
[10:51:38.685] |  :  .  |  attachPackages() ... DONE
[10:51:38.685] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.685] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.686] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.686] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.686] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.686] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.686] |  :  .  |  :  .  |  New stack:
[10:51:38.686] |  :  .  |  :  .  |  List of 1
[10:51:38.686] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.686] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.686] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.686] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.686] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.686] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.686] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.689] |  :  .  |  :  .  |  Old stack:
[10:51:38.689] |  :  .  |  :  .  |  List of 1
[10:51:38.689] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.689] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.689] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.689] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.689] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.689] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:38.689] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.689] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.689] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.689] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.693] |  :  .  |  :  .  |  Not identical
[10:51:38.693] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.693] |  :  .  |  :  .  |  :  List of 2
[10:51:38.693] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.693] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.693] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.693] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.693] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.693] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.693] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.693] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.693] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.693] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.693] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.693] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.693] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.693] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.693] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.698] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.698] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.699] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.699] |  :  .  |  :  .  List of future strategies:
[10:51:38.699] |  :  .  |  :  .  1. sequential:
[10:51:38.699] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.699] |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.699] |  :  .  |  :  .     - call: plan(sequential)
[10:51:38.699] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.699] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.699] |  :  .  |  assign_globals() ...
[10:51:38.700] |  :  .  |  List of 11
[10:51:38.700] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:51:38.700] |  :  .  |   $ x_FUN                    :function (x)  
[10:51:38.700] |  :  .  |   $ times                    : int 2
[10:51:38.700] |  :  .  |   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.700] |  :  .  |   $ stop_if_not              :function (...)  
[10:51:38.700] |  :  .  |   $ dim                      : NULL
[10:51:38.700] |  :  .  |   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:38.700] |  :  .  |   $ future.call.arguments    : list()
[10:51:38.700] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.700] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:51:38.700] |  :  .  |    ..$ : int 1
[10:51:38.700] |  :  .  |    ..$ : int 2
[10:51:38.700] |  :  .  |    ..$ : int 3
[10:51:38.700] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:38.700] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:38.700] |  :  .  |   - attr(*, "where")=List of 11
[10:51:38.700] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.700] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:38.700] |  :  .  |   - attr(*, "total_size")= num 23676
[10:51:38.700] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.700] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:38.708] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:38.708] |  :  .  |  - copied ‘x_FUN’ to environment
[10:51:38.708] |  :  .  |  - copied ‘times’ to environment
[10:51:38.708] |  :  .  |  - copied ‘stopf’ to environment
[10:51:38.708] |  :  .  |  - copied ‘stop_if_not’ to environment
[10:51:38.708] |  :  .  |  - copied ‘dim’ to environment
[10:51:38.708] |  :  .  |  - copied ‘valid_types’ to environment
[10:51:38.710] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:38.710] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:38.710] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:38.710] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.710] |  :  .  |  assign_globals() ... done
[10:51:38.712] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.713] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.713] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.713] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.713] |  :  .  |  :  .  |  :  New stack:
[10:51:38.713] |  :  .  |  :  .  |  :  List of 1
[10:51:38.713] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.713] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.713] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.713] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.713] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.713] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.713] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.713] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.713] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.713] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.716] |  :  .  |  :  .  |  :  Old stack:
[10:51:38.716] |  :  .  |  :  .  |  :  List of 1
[10:51:38.716] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.716] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.716] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.716] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.716] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.716] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.716] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.716] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.716] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.716] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.719] |  :  .  |  :  .  |  :  Identical
[10:51:38.719] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.719] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.719] |  :  .  |  :  .  |  List of future strategies:
[10:51:38.719] |  :  .  |  :  .  |  1. sequential:
[10:51:38.719] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.719] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:38.719] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:38.720] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.720] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.720] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.720] |  :  .  |  SequentialFuture started (and completed)
[10:51:38.720] |  :  .  |  signalConditions() ...
[10:51:38.721] |  :  .  |  :  include = ‘immediateCondition’
[10:51:38.721] |  :  .  |  :  exclude = 
[10:51:38.721] |  :  .  |  :  resignal = FALSE
[10:51:38.721] |  :  .  |  :  Number of conditions: 1
[10:51:38.721] |  :  .  |  signalConditions() ... done
[10:51:38.721] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:38.721] |  :  Launching futures ... done
[10:51:38.721] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.721] |  Using SequentialFutureBackend ... done
[10:51:38.721] run() for Future (‘SequentialFuture’) ... done
[10:51:38.722] Created future:
[10:51:38.722] SequentialFuture:
[10:51:38.722] Label: ‘future_vapply-1’
[10:51:38.722] Expression:
[10:51:38.722] {
[10:51:38.722]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.722]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.722]     "# as a global variable                                         "
[10:51:38.722]     do.call(function(...) {
[10:51:38.722]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.722]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.722]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.722]         "# anonymous function.                                          "
[10:51:38.722]         "#                                                              "
[10:51:38.722]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.722]         "# function environment of FUN() to the calling environment.    "
[10:51:38.722]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.722]         "# global environment, which is where globals are written.      "
[10:51:38.722]         penv <- env <- environment(...future.FUN)
[10:51:38.722]         repeat {
[10:51:38.722]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.722]                 emptyenv())) 
[10:51:38.722]                 break
[10:51:38.722]             penv <- env
[10:51:38.722]             env <- parent.env(env)
[10:51:38.722]         }
[10:51:38.722]         if (identical(penv, globalenv())) {
[10:51:38.722]             environment(...future.FUN) <- environment()
[10:51:38.722]         }
[10:51:38.722]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.722]             !isNamespace(penv)) {
[10:51:38.722]             parent.env(penv) <- environment()
[10:51:38.722]         }
[10:51:38.722]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.722]         {
[10:51:38.722]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.722]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.722]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.722]                 on.exit(options(oopts), add = TRUE)
[10:51:38.722]             }
[10:51:38.722]             {
[10:51:38.722]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.722]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.722]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.722]                 })
[10:51:38.722]             }
[10:51:38.722]         }
[10:51:38.722]     }, args = future.call.arguments)
[10:51:38.722] }
[10:51:38.722] Lazy evaluation: FALSE
[10:51:38.722] Asynchronous evaluation: TRUE
[10:51:38.722] Local evaluation: TRUE
[10:51:38.722] Environment: R_GlobalEnv
[10:51:38.722] Capture standard output: TRUE
[10:51:38.722] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.722] Immediate condition classes: ‘immediateCondition’
[10:51:38.722] Globals: 11 objects totaling 13.02 KiB (function ‘...future.FUN’ of 4.65 KiB, function ‘x_FUN’ of 185 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.722] Packages: 1 packages (‘future.apply’)
[10:51:38.722] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.722] Resolved: TRUE
[10:51:38.722] Value: 27 bytes of class ‘NULL’
[10:51:38.722] Conditions captured: [n=1] ‘simpleError’
[10:51:38.722] Early signaling: FALSE
[10:51:38.722] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.722] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:38.723] Chunk #1 of 1 ... DONE
[10:51:38.723] Launching 1 futures (chunks) ... DONE
[10:51:38.723] Resolving 1 futures (chunks) ...
[10:51:38.723] value() on list ...
[10:51:38.723] |  recursive: 0
[10:51:38.723] |  length: 1
[10:51:38.723] |  
[10:51:38.723] |  Number of remaining objects: 1
[10:51:38.724] |  checking value #1 ...
[10:51:38.724] |  :  'obj' is SequentialFuture
[10:51:38.724] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:38.724] |  :  .  state: ‘finished’
[10:51:38.724] |  :  .  run: TRUE
[10:51:38.724] |  :  .  result: ‘FutureResult’
[10:51:38.724] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:38.724] |  :  SequentialFuture #1
[10:51:38.724] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:38.724] |  :  .  nx: 1
[10:51:38.724] |  :  .  relay: TRUE
[10:51:38.725] |  :  .  stdout: TRUE
[10:51:38.725] |  :  .  signal: TRUE
[10:51:38.725] |  :  .  resignal: FALSE
[10:51:38.725] |  :  .  force: TRUE
[10:51:38.725] |  :  .  relayed: [n=1] FALSE
[10:51:38.725] |  :  .  queued futures: [n=1] FALSE
[10:51:38.725] |  :  .  until=1
[10:51:38.725] |  :  .  relaying element #1
[10:51:38.725] |  :  .  signalConditions() ...
[10:51:38.725] |  :  .  |  include = ‘immediateCondition’
[10:51:38.725] |  :  .  |  exclude = 
[10:51:38.726] |  :  .  |  resignal = FALSE
[10:51:38.726] |  :  .  |  Number of conditions: 1
[10:51:38.726] |  :  .  signalConditions() ... done
[10:51:38.726] |  :  .  signalConditions() ...
[10:51:38.726] |  :  .  |  include = ‘immediateCondition’
[10:51:38.726] |  :  .  |  exclude = 
[10:51:38.726] |  :  .  |  resignal = FALSE
[10:51:38.726] |  :  .  |  Number of conditions: 1
[10:51:38.726] |  :  .  signalConditions() ... done
[10:51:38.726] |  :  .  signalConditions() ...
[10:51:38.727] |  :  .  |  include = ‘condition’
[10:51:38.727] |  :  .  |  exclude = ‘error’, ‘immediateCondition’
[10:51:38.727] |  :  .  |  resignal = TRUE
[10:51:38.727] |  :  .  |  Number of conditions: 1
[10:51:38.727] |  :  .  signalConditions() ... done
[10:51:38.727] |  :  .  relayed: [n=1] TRUE
[10:51:38.727] |  :  .  queued futures: [n=1] TRUE
[10:51:38.727] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:38.727] |  :  value(<SequentialFuture>, ...) ...
[10:51:38.727] |  :  .  signalConditions() ...
[10:51:38.728] |  :  .  |  include = ‘immediateCondition’
[10:51:38.728] |  :  .  |  exclude = 
[10:51:38.728] |  :  .  |  resignal = FALSE
[10:51:38.728] |  :  .  |  Number of conditions: 1
[10:51:38.728] |  :  .  signalConditions() ... done
[10:51:38.728] |  :  .  value: <simpleError>
[10:51:38.728] |  :  value(<SequentialFuture>, ...) ... done
[10:51:38.728] |  :  signal simpleError ...
[10:51:38.728] |  :  .  futures(x) ...
[10:51:38.728] |  :  .  futures(x) ... done
[10:51:38.728] |  :  .  interrupt(y) ...
[10:51:38.729] |  :  .  interrupt(y) ... done
[10:51:38.729] |  :  .  resolve(y, ...) ...
[10:51:38.730] |  :  .  |  resolved() for ‘SequentialFuture’ ...
[10:51:38.730] |  :  .  |  :  state: ‘finished’
[10:51:38.730] |  :  .  |  :  run: TRUE
[10:51:38.730] |  :  .  |  :  result: ‘FutureResult’
[10:51:38.731] |  :  .  |  resolved() for ‘SequentialFuture’ ... done
[10:51:38.731] |  :  .  |  signalConditions() ...
[10:51:38.731] |  :  .  |  :  include = ‘immediateCondition’
[10:51:38.731] |  :  .  |  :  exclude = 
[10:51:38.731] |  :  .  |  :  resignal = FALSE
[10:51:38.731] |  :  .  |  :  Number of conditions: 1
[10:51:38.731] |  :  .  |  signalConditions() ... done
[10:51:38.731] |  :  .  |  signalConditions() ...
[10:51:38.731] |  :  .  |  :  include = ‘immediateCondition’
[10:51:38.732] |  :  .  |  :  exclude = 
[10:51:38.732] |  :  .  |  :  resignal = FALSE
[10:51:38.732] |  :  .  |  :  Number of conditions: 1
[10:51:38.732] |  :  .  |  signalConditions() ... done
[10:51:38.732] |  :  .  |  signalConditions() ...
[10:51:38.732] |  :  .  |  :  include = ‘condition’
[10:51:38.732] |  :  .  |  :  exclude = ‘immediateCondition’
[10:51:38.732] |  :  .  |  :  resignal = TRUE
[10:51:38.732] |  :  .  |  :  Number of conditions: 1
[10:51:38.732] |  :  .  |  :  Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:51:38.733] |  :  .  |  signalConditions() ... done
[10:51:38.733] |  :  .  resolve(y, ...) ... done
[10:51:38.733] |  :  .  stop(value) in 3, 2, 1 ...
[10:51:38.733] |  :  value() on list ... done
[10:51:38.733] |  :  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.733] |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:38.733] |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.733] |  :  .  |  :  New stack:
[10:51:38.734] |  :  .  |  :  List of 1
[10:51:38.734] |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.734] |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.734] |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.734] |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.734] |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.734] |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.734] |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.736] |  :  .  |  :  Old stack:
[10:51:38.736] |  :  .  |  :  List of 1
[10:51:38.736] |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.736] |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.736] |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.736] |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.736] |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.736] |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.736] |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.736] |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.736] |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.736] |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.739] |  :  .  |  :  Not identical
[10:51:38.739] |  :  .  |  :  all.equal() for future ...
[10:51:38.739] |  :  .  |  :  .  List of 2
[10:51:38.739] |  :  .  |  :  .   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.739] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.739] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.739] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.739] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.739] |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:38.739] |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.739] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.739] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.739] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.739] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.739] |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:38.739] |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.739] |  :  .  |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.739] |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.744] |  :  .  |  :  all.equal() for future ... done
[10:51:38.744] |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.744] |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:38.744] |  :  .  |  List of future strategies:
[10:51:38.744] |  :  .  |  1. sequential:
[10:51:38.744] |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.744] |  :  .  |     - tweaked: FALSE
[10:51:38.744] |  :  .  |     - call: plan(sequential)
[10:51:38.744] |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:38.744] |  :  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[10:51:38.745] |  :  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.745] |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:38.745] |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:38.745] |  :  .  |  :  New stack:
[10:51:38.745] |  :  .  |  :  List of 1
[10:51:38.745] |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.745] |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.745] |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.745] |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.745] |  :  .  |  :      ...)  
[10:51:38.745] |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.745] |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.745] |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:38.745] |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.749] |  :  .  |  :  Old stack:
[10:51:38.749] |  :  .  |  :  List of 1
[10:51:38.749] |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.749] |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.749] |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.749] |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.749] |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.749] |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:38.749] |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.749] |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.749] |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.749] |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.752] |  :  .  |  :  Not identical
[10:51:38.752] |  :  .  |  :  all.equal() for future ...
[10:51:38.752] |  :  .  |  :  .  List of 2
[10:51:38.752] |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.752] |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.752] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.752] |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.752] |  :  .  |  :  .      ...)  
[10:51:38.752] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.752] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.752] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:38.752] |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.752] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.752] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.752] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.752] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.752] |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:38.752] |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46287b438> 
[10:51:38.752] |  :  .  |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.752] |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.757] |  :  .  |  :  .  Formals differ
[10:51:38.757] |  :  .  |  :  all.equal() for future ... done
[10:51:38.757] |  :  .  |  :  Future strategies differ at level 1
[10:51:38.757] |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:38.757] |  :  .  |  plan(): Setting new future strategy stack:
[10:51:38.757] |  :  .  |  List of future strategies:
[10:51:38.757] |  :  .  |  1. multicore:
[10:51:38.757] |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:38.757] |  :  .  |     - tweaked: FALSE
[10:51:38.757] |  :  .  |     - call: plan(strategy)
[10:51:38.758] |  :  .  |  List of 1
[10:51:38.758] |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.758] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.758] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.758] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.758] |  :  .  |      ...)  
[10:51:38.758] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.758] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.758] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:38.758] |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.760] |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:51:38.760] |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.760] |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.760] |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.760] |  :  .  |  :  Legacy shutdown of cluster workers ...
[10:51:38.761] |  :  .  |  :  .  Stopping existing cluster ...
[10:51:38.761] |  :  .  |  :  .  |  No pre-existing cluster. Skipping
[10:51:38.761] |  :  .  |  :  .  Stopping existing cluster ... done
[10:51:38.761] |  :  .  |  :  Legacy shutdown of cluster workers ... done
[10:51:38.761] |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:51:38.761] |  :  .  |  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:51:38.761] |  :  .  |  :  function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.761] |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.761] |  :  .  |  :   - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.761] |  :  .  |  :   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.761] |  :  .  |  :      ...)  
[10:51:38.761] |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.761] |  :  .  |  :   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.761] |  :  .  |  :   - attr(*, "call")= language plan(strategy)
[10:51:38.763] |  :  .  |  :  init: NULL
[10:51:38.763] |  :  .  |  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:51:38.763] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.763] |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:38.763] |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.764] |  :  .  |  Backend function: <‘NULL’>
[10:51:38.765] |  :  .  |  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:38.765] |  :  .  |  plan(): nbrOfWorkers() = 2
[10:51:38.766] |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:38.766] |  :  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
 logi(0) 
 logi(0) 
 logi(0) 
 logi(0) 
 logi(0) 
 int(0) 
 int(0) 
 Named chr [1:2] "integer" "character"
 - attr(*, "names")= chr [1:2] "x" "y"
[10:51:38.769] future_lapply() ...
[10:51:38.772] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.772] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:38.772] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.772] |  :  Backend function: <‘NULL’>
[10:51:38.783] |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:38.784] Number of chunks: 2
[10:51:38.784] getGlobalsAndPackagesXApply() ...
[10:51:38.784]  - future.globals: TRUE
[10:51:38.784] |  :  getGlobalsAndPackages() ...
[10:51:38.784] |  :  .  Searching for globals ...
[10:51:38.789] |  :  .  |  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:38.790] |  :  .  Searching for globals ... DONE
[10:51:38.790] |  :  .  Resolving globals: FALSE
[10:51:38.790] |  :  .  Search for packages associated with the globals ...
[10:51:38.790] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:38.791] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:38.791] |  :  .  Search for packages associated with the globals ... DONE
[10:51:38.791] |  :  .  The total size of the 7 globals is 12.01 KiB (12294 bytes)
[10:51:38.792] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.01 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.02 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:38.792] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.792] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.792] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.792] |  :  .  packages: [1] ‘future.apply’
[10:51:38.792] |  :  getGlobalsAndPackages() ... done
[10:51:38.792]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.792]  - needed namespaces: [n=1] ‘future.apply’
[10:51:38.793] Finding globals ... DONE
[10:51:38.793]  - use_args: TRUE
[10:51:38.793]  - Getting '...' globals ...
[10:51:38.793] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.793] |  :  .  recursive: 0
[10:51:38.793] |  :  .  length: 1
[10:51:38.793] |  :  .  elements: ‘...’
[10:51:38.794] |  :  .  'obj' is DotDotDotList
[10:51:38.794] |  :  .  resolve(obj, ...) ...
[10:51:38.794] |  :  .  resolve(obj, ...) ... done
[10:51:38.794] |  :  .  length: 0 (resolved future 1)
[10:51:38.794] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.794]    - '...' content: [n=0] 
[10:51:38.794] List of 1
[10:51:38.794]  $ ...: list()
[10:51:38.794]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.794]  - attr(*, "where")=List of 1
[10:51:38.794]   ..$ ...:<environment: 0x55d4650eedb8> 
[10:51:38.794]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.794]  - attr(*, "resolved")= logi TRUE
[10:51:38.794]  - attr(*, "total_size")= num NA
[10:51:38.797]  - Getting '...' globals ... DONE
[10:51:38.797] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:38.797] List of 8
[10:51:38.797]  $ ...future.FUN:function (x, ...)  
[10:51:38.797]  $ x_FUN        :function (x)  
[10:51:38.797]  $ times        : int 1
[10:51:38.797]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.797]  $ stop_if_not  :function (...)  
[10:51:38.797]  $ dim          : NULL
[10:51:38.797]  $ valid_types  : chr "character"
[10:51:38.797]  $ ...          : list()
[10:51:38.797]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.797]  - attr(*, "where")=List of 8
[10:51:38.797]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.797]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:38.797]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:38.797]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:38.797]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:38.797]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:38.797]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:38.797]   ..$ ...          :<environment: 0x55d4650eedb8> 
[10:51:38.797]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.797]  - attr(*, "resolved")= logi FALSE
[10:51:38.797]  - attr(*, "total_size")= num 22333
[10:51:38.803] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:38.803] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.803] Number of futures (= number of chunks): 2
[10:51:38.803] Launching 2 futures (chunks) ...
[10:51:38.803] Chunk #1 of 2 ...
[10:51:38.803]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.804] |  :  getGlobalsAndPackages() ...
[10:51:38.804] |  :  .  Searching for globals ...
[10:51:38.804] |  :  .  |  globals found: [0] 
[10:51:38.804] |  :  .  Searching for globals ... DONE
[10:51:38.804] |  :  .  globals: [0] <none>
[10:51:38.804] |  :  .  packages: [0] <none>
[10:51:38.804] |  :  getGlobalsAndPackages() ... done
[10:51:38.804]    + additional globals found: [n=0] 
[10:51:38.805]    + additional namespaces needed: [n=0] 
[10:51:38.805]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.805]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:38.805]  - seeds: <none>
[10:51:38.805]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.805] |  :  getGlobalsAndPackages() ...
[10:51:38.805] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.805] |  :  .  Resolving globals: FALSE
[10:51:38.805] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:38.807] |  :  .  |  {
[10:51:38.807] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.807] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:38.807] |  :  .  |      "# as a global variable                                         "
[10:51:38.807] |  :  .  |      do.call(function(...) {
[10:51:38.807] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.807] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:38.807] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.807] |  :  .  |          "# anonymous function.                                          "
[10:51:38.807] |  :  .  |          "#                                                              "
[10:51:38.807] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.807] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:38.807] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.807] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:38.807] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:38.807] |  :  .  |          repeat {
[10:51:38.807] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:38.807] |  :  .  |                  emptyenv())) 
[10:51:38.807] |  :  .  |                  break
[10:51:38.807] |  :  .  |              penv <- env
[10:51:38.807] |  :  .  |              env <- parent.env(env)
[10:51:38.807] |  :  .  |          }
[10:51:38.807] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:38.807] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:38.807] |  :  .  |          }
[10:51:38.807] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.807] |  :  .  |              !isNamespace(penv)) {
[10:51:38.807] |  :  .  |              parent.env(penv) <- environment()
[10:51:38.807] |  :  .  |          }
[10:51:38.807] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.807] |  :  .  |          {
[10:51:38.807] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.807] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.807] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.807] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:38.807] |  :  .  |              }
[10:51:38.807] |  :  .  |              {
[10:51:38.807] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.807] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.807] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:38.807] |  :  .  |                  })
[10:51:38.807] |  :  .  |              }
[10:51:38.807] |  :  .  |          }
[10:51:38.807] |  :  .  |      }, args = future.call.arguments)
[10:51:38.807] |  :  .  |  }
[10:51:38.808] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.808] |  :  .  Search for packages associated with the globals ...
[10:51:38.808] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:38.808] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:38.809] |  :  .  Search for packages associated with the globals ... DONE
[10:51:38.809] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.809] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.809] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.809] |  :  .  packages: [1] ‘future.apply’
[10:51:38.809] |  :  getGlobalsAndPackages() ... done
[10:51:38.810] |  :  run() for Future (‘Future’) ...
[10:51:38.810] |  :  .  state: ‘created’
[10:51:38.810] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.810] |  :  .  |  makeFutureBackend(<multicore>) ...
[10:51:38.810] |  :  .  |  :  Backend function: <‘NULL’>
[10:51:38.812] |  :  .  |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:38.812] |  :  .  |  makeFutureBackend(<multicore>) ... done
[10:51:38.812] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.812] |  :  .  Using MulticoreFutureBackend ...
[10:51:38.812] |  :  .  |  Launching futures ...
[10:51:38.813] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:38.813] |  :  .  |  :  .  getFutureData() ...
[10:51:38.813] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:38.813] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:38.813] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:38.813] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:38.814] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:38.814] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:38.814] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.814] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:38.814] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.814] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:38.814] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:38.815] |  :  .  |  :  .  getFutureData() ... done
[10:51:38.815] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:38.816] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:38.818] |  :  .  |  :  .  MulticoreFuture started
[10:51:38.819] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:38.819] |  :  .  |  :  .  attachPackages() ...
[10:51:38.819] |  :  .  |  Launching futures ... done
[10:51:38.819] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:38.819] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:38.820] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:38.820] |  :  .  Using MulticoreFutureBackend ... done
[10:51:38.820] |  :  .  |  :  .  attachPackages() ...
[10:51:38.820] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:38.820] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:38.820] Created future:
[10:51:38.821] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:38.821] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.822] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:38.822] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.823] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.823] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.824] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:38.824] |  :  .  |  :  .  |  :  .  New stack:
[10:51:38.824] |  :  .  |  :  .  |  :  .  List of 1
[10:51:38.824] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.824] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.824] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.824] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.824] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.824] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.824] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.828] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:38.828] |  :  .  |  :  .  |  :  .  List of 1
[10:51:38.828] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.828] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.828] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.828] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.828] |  :  .  |  :  .  |  :  .      ...)  
[10:51:38.828] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.828] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.828] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:38.828] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:38.828] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.828] |  :  .  |  :  .  |  :  .      ...)  
[10:51:38.828] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.828] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.833] |  :  .  |  :  .  |  :  .  Not identical
[10:51:38.834] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:38.835] |  :  readImmediateCondition() ...
[10:51:38.835] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:38.835] |  :   - Number of RDS files: 0
[10:51:38.836] |  :  readImmediateCondition() ... DONE
[10:51:38.821] MulticoreFuture:
[10:51:38.821] Label: ‘future_vapply-1’
[10:51:38.821] Expression:
[10:51:38.821] {
[10:51:38.821]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.821]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.821]     "# as a global variable                                         "
[10:51:38.821]     do.call(function(...) {
[10:51:38.821]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.821]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.821]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.821]         "# anonymous function.                                          "
[10:51:38.821]         "#                                                              "
[10:51:38.821]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.821]         "# function environment of FUN() to the calling environment.    "
[10:51:38.821]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.821]         "# global environment, which is where globals are written.      "
[10:51:38.821]         penv <- env <- environment(...future.FUN)
[10:51:38.821]         repeat {
[10:51:38.821]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.821]                 emptyenv())) 
[10:51:38.821]                 break
[10:51:38.821]             penv <- env
[10:51:38.821]             env <- parent.env(env)
[10:51:38.821]         }
[10:51:38.821]         if (identical(penv, globalenv())) {
[10:51:38.821]             environment(...future.FUN) <- environment()
[10:51:38.821]         }
[10:51:38.821]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.821]             !isNamespace(penv)) {
[10:51:38.821]             parent.env(penv) <- environment()
[10:51:38.821]         }
[10:51:38.821]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.821]         {
[10:51:38.821]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.821]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.821]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.821]                 on.exit(options(oopts), add = TRUE)
[10:51:38.821]             }
[10:51:38.821]             {
[10:51:38.821]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.821]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.821]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.821]                 })
[10:51:38.821]             }
[10:51:38.821]         }
[10:51:38.821]     }, args = future.call.arguments)
[10:51:38.821] }
[10:51:38.821] Lazy evaluation: FALSE
[10:51:38.821] Asynchronous evaluation: TRUE
[10:51:38.821] Local evaluation: TRUE
[10:51:38.821] Environment: R_GlobalEnv
[10:51:38.821] Capture standard output: TRUE
[10:51:38.821] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.821] Immediate condition classes: ‘immediateCondition’
[10:51:38.821] Globals: 11 objects totaling 12.33 KiB (function ‘...future.FUN’ of 4.02 KiB, function ‘x_FUN’ of 36 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.821] Packages: 1 packages (‘future.apply’)
[10:51:38.821] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.821] Resolved: FALSE
[10:51:38.821] Value: <not collected>
[10:51:38.821] Conditions captured: <none>
[10:51:38.821] Early signaling: FALSE
[10:51:38.821] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.821] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:38.836] Chunk #1 of 2 ... DONE
[10:51:38.836] Chunk #2 of 2 ...
[10:51:38.837]  - Finding globals in 'X' for chunk #2 ...
[10:51:38.837] |  :  getGlobalsAndPackages() ...
[10:51:38.837] |  :  .  Searching for globals ...
[10:51:38.838] |  :  .  |  globals found: [0] 
[10:51:38.838] |  :  .  Searching for globals ... DONE
[10:51:38.838] |  :  .  globals: [0] <none>
[10:51:38.838] |  :  .  packages: [0] <none>
[10:51:38.838] |  :  getGlobalsAndPackages() ... done
[10:51:38.838]    + additional globals found: [n=0] 
[10:51:38.838]    + additional namespaces needed: [n=0] 
[10:51:38.839]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:38.839]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:38.839]  - seeds: <none>
[10:51:38.839]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.839] |  :  getGlobalsAndPackages() ...
[10:51:38.839] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.839] |  :  .  Resolving globals: FALSE
[10:51:38.840] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:38.840] |  :  .  |  {
[10:51:38.840] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.840] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:38.840] |  :  .  |      "# as a global variable                                         "
[10:51:38.840] |  :  .  |      do.call(function(...) {
[10:51:38.840] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.840] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:38.840] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.840] |  :  .  |          "# anonymous function.                                          "
[10:51:38.840] |  :  .  |          "#                                                              "
[10:51:38.840] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.840] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:38.840] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.840] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:38.840] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:38.840] |  :  .  |          repeat {
[10:51:38.840] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:38.840] |  :  .  |                  emptyenv())) 
[10:51:38.840] |  :  .  |                  break
[10:51:38.840] |  :  .  |              penv <- env
[10:51:38.840] |  :  .  |              env <- parent.env(env)
[10:51:38.840] |  :  .  |          }
[10:51:38.840] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:38.840] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:38.840] |  :  .  |          }
[10:51:38.840] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.840] |  :  .  |              !isNamespace(penv)) {
[10:51:38.840] |  :  .  |              parent.env(penv) <- environment()
[10:51:38.840] |  :  .  |          }
[10:51:38.840] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.840] |  :  .  |          {
[10:51:38.840] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.840] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.840] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.840] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:38.840] |  :  .  |              }
[10:51:38.840] |  :  .  |              {
[10:51:38.840] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.840] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.840] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:38.840] |  :  .  |                  })
[10:51:38.840] |  :  .  |              }
[10:51:38.840] |  :  .  |          }
[10:51:38.840] |  :  .  |      }, args = future.call.arguments)
[10:51:38.840] |  :  .  |  }
[10:51:38.840] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.841] |  :  .  Search for packages associated with the globals ...
[10:51:38.841] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:38.842] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:38.842] |  :  .  Search for packages associated with the globals ... DONE
[10:51:38.842] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.843] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.843] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.843] |  :  .  packages: [1] ‘future.apply’
[10:51:38.843] |  :  getGlobalsAndPackages() ... done
[10:51:38.843] |  :  run() for Future (‘Future’) ...
[10:51:38.844] |  :  .  state: ‘created’
[10:51:38.844] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.844] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.844] |  :  .  Using MulticoreFutureBackend ...
[10:51:38.844] |  :  .  |  Launching futures ...
[10:51:38.844] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:38.834] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:38.834] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=func[10:51:38.845] |  :  .  |  :  .  getFutureData() ...
tion (..., maxSizeOfObjects = +Inf)  
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.834] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.834] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.834] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.834] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:38.834] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.845] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:38.845] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:38.845] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:38.845] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:38.845] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:38.845] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:38.845] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:38.846] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.846] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:38.846] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:38.846] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.846] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:38.846] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:38.846] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:38.846] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:38.846] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:38.846] |  :  .  |  :  .  getFutureData() ... done
[10:51:38.847] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:38.846] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:38.846] |  :  .  |  :  .  |  :  1. sequential:
[10:51:38.846] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.846] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:38.846] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.847] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:38.847] |  :  .  |  :  .  |  :  List of 1
[10:51:38.847] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.847] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.847] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.847] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.847] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.847] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.847] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.852] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:38.852] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:38.852] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.852] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.852] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.852] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:38.853] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:38.853] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:38.853] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.853] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.853] |  :  .  |  :  .  assign_globals() ...
[10:51:38.853] |  :  .  |  :  .  MulticoreFuture started
[10:51:38.854] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:38.854] |  :  .  |  Launching futures ... done
[10:51:38.854] |  :  .  |  :  .  attachPackages() ...
[10:51:38.854] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:38.854] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:38.855] |  :  .  Using MulticoreFutureBackend ... done
[10:51:38.855] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:38.855] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:38.855] |  :  .  |  :  .  attachPackages() ...
[10:51:38.855] Created future:
[10:51:38.855] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:38.856] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:38.854] |  :  .  |  :  .  List of 11
[10:51:38.854] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:38.854] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:38.854] |  :  .  |  :  .   $ times                    : int 1
[10:51:38.854] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.854] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:38.854] |  :  .  |  :  .   $ dim                      : NULL
[10:51:38.854] |  :  .  |  :  .   $ valid_types              : chr "character"
[10:51:38.854] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:38.854] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.854] |  :  .  |  :  .   $ ...future.elements_ii    :List of 1
[10:51:38.854] |  :  .  |  :  .    ..$ x: int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:51:38.854] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:38.854] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:38.854] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:38.854] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.854] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:38.854] |  :  .  |  :  .   - attr(*, "total_size")= num 22333
[10:51:38.854] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.854] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:38.862] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:38.862] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:38.862] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:38.862] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:38.862] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:38.863] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:38.863] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:38.863] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:38.863] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:38.863] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:38.863] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.863] |  :  .  |  :  .  assign_globals() ... done
[10:51:38.863] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.863] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:38.864] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.865] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.866] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.866] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:38.867] |  :  .  |  :  .  |  :  .  New stack:
[10:51:38.867] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.867] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.868] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.868] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.868] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:38.868] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:38.868] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.868] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.868] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:38.868] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:38.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:38.868] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.868] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:38.868] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.868] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.872] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:38.867] |  :  .  |  :  .  |  :  .  List of 1
[10:51:38.867] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.867] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.867] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.873] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:38.872] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:38.872] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.872] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.872] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.872] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.872] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.872] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.872] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.875] |  :  readImmediateCondition() ...
[10:51:38.876] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:38.876] |  :   - Number of RDS files: 0
[10:51:38.876] |  :  readImmediateCondition() ... DONE
[10:51:38.855] MulticoreFuture:
[10:51:38.855] Label: ‘future_vapply-2’
[10:51:38.855] Expression:
[10:51:38.855] {
[10:51:38.855]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.855]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.855]     "# as a global variable                                         "
[10:51:38.855]     do.call(function(...) {
[10:51:38.855]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.855]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.855]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.855]         "# anonymous function.                                          "
[10:51:38.855]         "#                                                              "
[10:51:38.855]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.855]         "# function environment of FUN() to the calling environment.    "
[10:51:38.855]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.855]         "# global environment, which is where globals are written.      "
[10:51:38.855]         penv <- env <- environment(...future.FUN)
[10:51:38.855]         repeat {
[10:51:38.855]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.855]                 emptyenv())) 
[10:51:38.855]                 break
[10:51:38.855]             penv <- env
[10:51:38.855]             env <- parent.env(env)
[10:51:38.855]         }
[10:51:38.855]         if (identical(penv, globalenv())) {
[10:51:38.855]             environment(...future.FUN) <- environment()
[10:51:38.855]         }
[10:51:38.855]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.855]             !isNamespace(penv)) {
[10:51:38.855]             parent.env(penv) <- environment()
[10:51:38.855]         }
[10:51:38.855]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.855]         {
[10:51:38.855]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.855]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.855]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.855]                 on.exit(options(oopts), add = TRUE)
[10:51:38.855]             }
[10:51:38.855]             {
[10:51:38.855]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.855]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.855]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.855]                 })
[10:51:38.855]             }
[10:51:38.855]         }
[10:51:38.855]     }, args = future.call.arguments)
[10:51:38.855] }
[10:51:38.855] Lazy evaluation: FALSE
[10:51:38.855] Asynchronous evaluation: TRUE
[10:51:38.855] Local evaluation: TRUE
[10:51:38.855] Environment: R_GlobalEnv
[10:51:38.855] Capture standard output: TRUE
[10:51:38.855] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.855] Immediate condition classes: ‘immediateCondition’
[10:51:38.855] Globals: 11 objects totaling 12.32 KiB (function ‘...future.FUN’ of 4.02 KiB, function ‘x_FUN’ of 36 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.855] Packages: 1 packages (‘future.apply’)
[10:51:38.855] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.855] Resolved: FALSE
[10:51:38.855] Value: <not collected>
[10:51:38.855] Conditions captured: <none>
[10:51:38.855] Early signaling: FALSE
[10:51:38.855] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.855] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:38.877] Chunk #2 of 2 ... DONE
[10:51:38.878] Launching 2 futures (chunks) ... DONE
[10:51:38.878] Resolving 2 futures (chunks) ...
[10:51:38.878] |  :  value() on list ...
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.874] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.879] |  :  .  recursive: 0
[10:51:38.879] |  :  .  length: 2
[10:51:38.879] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:38.879] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.879] |  :  .  
[10:51:38.879] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:38.879] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.879] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:38.879] |  :  .  Number of remaining objects: 2
[10:51:38.880] |  :  .  checking value #1 ...
[10:51:38.880] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:38.880] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:38.880] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:38.880] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.880] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:38.880] |  :  .  |  'obj' is MulticoreFuture
[10:51:38.874] |  :  .  |  :  .  |  :  .  List of 1
[10:51:38.874] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.874] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.874] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.874] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.874] |  :  .  |  :  .  |  :  .      ...)  
[10:51:38.874] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.874] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.874] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:38.874] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:38.874] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.874] |  :  .  |  :  .  |  :  .      ...)  
[10:51:38.874] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.874] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.881] |  :  .  |  :  .  |  :  .  Not identical
[10:51:38.881] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:38.880] |  :  .  |  :  .  |  :  .  List of 1
[10:51:38.880] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.880] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.880] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.880] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.880] |  :  .  |  :  .  |  :  .      ...)  
[10:51:38.880] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.880] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.880] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:38.880] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:38.880] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.880] |  :  .  |  :  .  |  :  .      ...)  
[10:51:38.880] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.880] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.883] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:38.883] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:38.883] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.883] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:38.884] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.884] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:38.884] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.884] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.884] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.884] |  :  .  |  readImmediateCondition() ...
[10:51:38.885] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:38.885] |  :  .  |   - Number of RDS files: 0
[10:51:38.885] |  :  .  |  readImmediateCondition() ... DONE
[10:51:38.886] |  :  .  |  MulticoreFuture #1
[10:51:38.886] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:38.886] |  :  .  |  :  nx: 2
[10:51:38.886] |  :  .  |  :  relay: TRUE
[10:51:38.886] |  :  .  |  :  stdout: TRUE
[10:51:38.887] |  :  .  |  :  signal: TRUE
[10:51:38.887] |  :  .  |  :  resignal: FALSE
[10:51:38.887] |  :  .  |  :  force: TRUE
[10:51:38.887] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:38.888] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:38.888] |  :  .  |  :  until=1
[10:51:38.881] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:38.881] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.881] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.881] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.881] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.881] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:38.881] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.888] |  :  .  |  :  relaying element #1
[10:51:38.889] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:38.889] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:38.889] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:38.890] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:38.890] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:38.890] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:38.890] |  :  .  |  :  .  |  :  1. sequential:
[10:51:38.890] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:38.890] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:38.890] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.891] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.892] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:38.892] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:38.892] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:38.893] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:38.893] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:38.893] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:38.893] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.893] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.894] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.894] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.894] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.895] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.895] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.891] |  :  .  |  :  .  |  :  List of 1
[10:51:38.891] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.891] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.891] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.891] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.891] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.891] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.891] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.895] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:38.895] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:38.895] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:38.895] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:38.895] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:38.896] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:38.896] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.896] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.896] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:38.896] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.896] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.896] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.896] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:38.896] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.897] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:38.897] |  :  .  |  :  value: <list>
[10:51:38.897] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:38.897] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:38.897] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.897] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:38.897] |  :  .  |  :  nx: 2
[10:51:38.897] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.897] |  :  .  |  :  relay: TRUE
[10:51:38.897] |  :  .  |  :  stdout: TRUE
[10:51:38.898] |  :  .  |  :  .  assign_globals() ...
[10:51:38.898] |  :  .  |  :  signal: TRUE
[10:51:38.898] |  :  .  |  :  resignal: FALSE
[10:51:38.898] |  :  .  |  :  force: TRUE
[10:51:38.898] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:38.898] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:38.898] |  :  .  |  :  until=2
[10:51:38.899] |  :  .  |  :  relaying element #2
[10:51:38.899] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:38.899] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:38.899] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:38.899] |  :  .  |  length: 1 (resolved future 1)
[10:51:38.899] |  :  .  checking value #1 ... done
[10:51:38.900] |  :  .  checking value #2 ...
[10:51:38.900] |  :  .  |  'obj' is MulticoreFuture
[10:51:38.898] |  :  .  |  :  .  List of 11
[10:51:38.898] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:38.898] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:38.898] |  :  .  |  :  .   $ times                    : int 1
[10:51:38.898] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.898] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:38.898] |  :  .  |  :  .   $ dim                      : NULL
[10:51:38.898] |  :  .  |  :  .   $ valid_types              : chr "character"
[10:51:38.898] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:38.898] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.898] |  :  .  |  :  .   $ ...future.elements_ii    :List of 1
[10:51:38.898] |  :  .  |  :  .    ..$ y: chr [1:10] "a" "b" "c" "d" ...
[10:51:38.898] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:38.898] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:38.898] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:38.898] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:38.898] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:38.898] |  :  .  |  :  .   - attr(*, "total_size")= num 22333
[10:51:38.898] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.898] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:38.910] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:38.910] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:38.910] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:38.910] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:38.910] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:38.910] |  :  .  |  readImmediateCondition() ...
[10:51:38.910] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:38.910] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:38.910] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:38.910] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:38.911] |  :  .  |   - Number of RDS files: 0
[10:51:38.911] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:38.911] |  :  .  |  readImmediateCondition() ... DONE
[10:51:38.911] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:38.911] |  :  .  checking value #2 ... done
[10:51:38.911] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:38.911] |  :  .  |  :  .  assign_globals() ... done
[10:51:38.913] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.913] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.914] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.914] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:38.914] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:38.914] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:38.914] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.914] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.914] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.914] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.914] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:38.914] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.914] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.914] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:38.914] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:38.914] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.914] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:38.914] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.914] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.917] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:38.917] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:38.917] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.917] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.917] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.917] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.917] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.917] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.917] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.921] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:38.921] |  :  .  Number of remaining objects: 1
[10:51:38.921] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:38.921] |  :  .  checking value #2 ...
[10:51:38.922] |  :  .  |  'obj' is MulticoreFuture
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.922] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.927] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:38.927] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:38.927] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:38.927] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:38.927] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:38.927] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:38.927] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:38.927] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:38.927] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:38.927] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:38.928] |  :  .  |  :  .  |  :  .  List of 1
[10:51:38.928] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:38.928] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:38.928] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:38.928] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.928] |  :  .  |  :  .  |  :  .      ...)  
[10:51:38.928] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.928] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.928] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:38.928] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:38.928] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:38.928] |  :  .  |  :  .  |  :  .      ...)  
[10:51:38.928] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:38.928] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:38.931] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:38.931] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:38.931] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.931] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:38.931] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.931] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:38.931] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:38.932] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.932] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:38.932] |  :  .  |  readImmediateCondition() ...
[10:51:38.932] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:38.932] |  :  .  |   - Number of RDS files: 0
[10:51:38.932] |  :  .  |  readImmediateCondition() ... DONE
[10:51:38.933] |  :  .  checking value #2 ... done
[10:51:38.943] |  :  .  Number of remaining objects: 1
[10:51:38.943] |  :  .  checking value #2 ...
[10:51:38.943] |  :  .  |  'obj' is MulticoreFuture
[10:51:38.943] |  :  .  |  readImmediateCondition() ...
[10:51:38.943] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:38.943] |  :  .  |   - Number of RDS files: 0
[10:51:38.944] |  :  .  |  readImmediateCondition() ... DONE
[10:51:38.944] |  :  .  |  MulticoreFuture #2
[10:51:38.944] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:38.944] |  :  .  |  :  nx: 2
[10:51:38.944] |  :  .  |  :  relay: TRUE
[10:51:38.944] |  :  .  |  :  stdout: TRUE
[10:51:38.944] |  :  .  |  :  signal: TRUE
[10:51:38.944] |  :  .  |  :  resignal: FALSE
[10:51:38.944] |  :  .  |  :  force: TRUE
[10:51:38.945] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:38.945] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:38.945] |  :  .  |  :  until=2
[10:51:38.945] |  :  .  |  :  relaying element #2
[10:51:38.945] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.945] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:38.946] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:38.946] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:38.946] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:38.946] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:38.946] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:38.947] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.947] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.947] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.947] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.947] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.948] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.948] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.948] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:38.948] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:38.948] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:38.948] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:38.948] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.949] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.949] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:38.949] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:38.949] |  :  .  |  :  value: <list>
[10:51:38.949] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:38.949] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:38.950] |  :  .  |  :  nx: 2
[10:51:38.950] |  :  .  |  :  relay: TRUE
[10:51:38.950] |  :  .  |  :  stdout: TRUE
[10:51:38.950] |  :  .  |  :  signal: TRUE
[10:51:38.950] |  :  .  |  :  resignal: FALSE
[10:51:38.950] |  :  .  |  :  force: TRUE
[10:51:38.950] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:38.951] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:38.951] |  :  .  |  :  until=2
[10:51:38.951] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:38.951] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:38.951] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:38.951] |  :  .  |  length: 0 (resolved future 2)
[10:51:38.951] |  :  .  checking value #2 ... done
[10:51:38.951] |  :  .  Relaying remaining futures ...
[10:51:38.952] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:38.952] |  :  .  |  :  nx: 2
[10:51:38.952] |  :  .  |  :  relay: TRUE
[10:51:38.952] |  :  .  |  :  stdout: TRUE
[10:51:38.952] |  :  .  |  :  signal: TRUE
[10:51:38.952] |  :  .  |  :  resignal: FALSE
[10:51:38.952] |  :  .  |  :  force: TRUE
[10:51:38.952] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:38.952] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:38.952] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:38.953] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:38.953] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:38.955] |  :  .  Relaying remaining futures ... done
[10:51:38.955] |  :  value() on list ... done
[10:51:38.955]  - Number of value chunks collected: 2
[10:51:38.955] Resolving 2 futures (chunks) ... DONE
[10:51:38.955] Reducing values from 2 chunks ...
[10:51:38.955]  - Number of values collected after concatenation: 2
[10:51:38.955]  - Number of values expected: 2
[10:51:38.955] Reducing values from 2 chunks ... DONE
[10:51:38.956] future_lapply() ... DONE
 Named chr [1:2] "integer" "character"
 - attr(*, "names")= chr [1:2] "x" "y"
 num[0 , 1:10] 
[10:51:38.957] future_lapply() ...
[10:51:38.960] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.960] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:38.960] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.961] Number of chunks: 2
[10:51:38.961] getGlobalsAndPackagesXApply() ...
[10:51:38.961]  - future.globals: TRUE
[10:51:38.961] |  :  getGlobalsAndPackages() ...
[10:51:38.961] |  :  .  Searching for globals ...
[10:51:38.965] |  :  .  |  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘double’
[10:51:38.965] |  :  .  Searching for globals ... DONE
[10:51:38.965] |  :  .  Resolving globals: FALSE
[10:51:38.965] |  :  .  Search for packages associated with the globals ...
[10:51:38.966] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:38.966] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:38.966] |  :  .  Search for packages associated with the globals ... DONE
[10:51:38.967] |  :  .  The total size of the 7 globals is 12.77 KiB (13081 bytes)
[10:51:38.967] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.77 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:38.967] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.967] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.968] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.968] |  :  .  packages: [1] ‘future.apply’
[10:51:38.968] |  :  getGlobalsAndPackages() ... done
[10:51:38.968]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:38.968]  - needed namespaces: [n=1] ‘future.apply’
[10:51:38.968] Finding globals ... DONE
[10:51:38.968]  - use_args: TRUE
[10:51:38.968]  - Getting '...' globals ...
[10:51:38.969] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:38.969] |  :  .  recursive: 0
[10:51:38.969] |  :  .  length: 1
[10:51:38.969] |  :  .  elements: ‘...’
[10:51:38.969] |  :  .  'obj' is DotDotDotList
[10:51:38.969] |  :  .  resolve(obj, ...) ...
[10:51:38.969] |  :  .  resolve(obj, ...) ... done
[10:51:38.969] |  :  .  length: 0 (resolved future 1)
[10:51:38.969] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:38.970]    - '...' content: [n=0] 
[10:51:38.970] List of 1
[10:51:38.970]  $ ...: list()
[10:51:38.970]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.970]  - attr(*, "where")=List of 1
[10:51:38.970]   ..$ ...:<environment: 0x55d464fd9088> 
[10:51:38.970]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.970]  - attr(*, "resolved")= logi TRUE
[10:51:38.970]  - attr(*, "total_size")= num NA
[10:51:38.972]  - Getting '...' globals ... DONE
[10:51:38.972] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:38.973] List of 8
[10:51:38.973]  $ ...future.FUN:function (x, ...)  
[10:51:38.973]  $ x_FUN        :function (x)  
[10:51:38.973]  $ times        : int 0
[10:51:38.973]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:38.973]  $ stop_if_not  :function (...)  
[10:51:38.973]  $ dim          : NULL
[10:51:38.973]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:38.973]  $ ...          : list()
[10:51:38.973]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:38.973]  - attr(*, "where")=List of 8
[10:51:38.973]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:38.973]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:38.973]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:38.973]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:38.973]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:38.973]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:38.973]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:38.973]   ..$ ...          :<environment: 0x55d464fd9088> 
[10:51:38.973]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:38.973]  - attr(*, "resolved")= logi FALSE
[10:51:38.973]  - attr(*, "total_size")= num 23490
[10:51:38.981] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:38.982] getGlobalsAndPackagesXApply() ... DONE
[10:51:38.982] Number of futures (= number of chunks): 2
[10:51:38.982] Launching 2 futures (chunks) ...
[10:51:38.982] Chunk #1 of 2 ...
[10:51:38.982]  - Finding globals in 'X' for chunk #1 ...
[10:51:38.982] |  :  getGlobalsAndPackages() ...
[10:51:38.982] |  :  .  Searching for globals ...
[10:51:38.983] |  :  .  |  globals found: [0] 
[10:51:38.983] |  :  .  Searching for globals ... DONE
[10:51:38.983] |  :  .  globals: [0] <none>
[10:51:38.983] |  :  .  packages: [0] <none>
[10:51:38.983] |  :  getGlobalsAndPackages() ... done
[10:51:38.983]    + additional globals found: [n=0] 
[10:51:38.983]    + additional namespaces needed: [n=0] 
[10:51:38.983]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:38.983]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:38.983]  - seeds: <none>
[10:51:38.983]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.984] |  :  getGlobalsAndPackages() ...
[10:51:38.984] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.984] |  :  .  Resolving globals: FALSE
[10:51:38.984] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:38.984] |  :  .  |  {
[10:51:38.984] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.984] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:38.984] |  :  .  |      "# as a global variable                                         "
[10:51:38.984] |  :  .  |      do.call(function(...) {
[10:51:38.984] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.984] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:38.984] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:38.984] |  :  .  |          "# anonymous function.                                          "
[10:51:38.984] |  :  .  |          "#                                                              "
[10:51:38.984] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:38.984] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:38.984] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.984] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:38.984] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:38.984] |  :  .  |          repeat {
[10:51:38.984] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:38.984] |  :  .  |                  emptyenv())) 
[10:51:38.984] |  :  .  |                  break
[10:51:38.984] |  :  .  |              penv <- env
[10:51:38.984] |  :  .  |              env <- parent.env(env)
[10:51:38.984] |  :  .  |          }
[10:51:38.984] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:38.984] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:38.984] |  :  .  |          }
[10:51:38.984] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.984] |  :  .  |              !isNamespace(penv)) {
[10:51:38.984] |  :  .  |              parent.env(penv) <- environment()
[10:51:38.984] |  :  .  |          }
[10:51:38.984] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.984] |  :  .  |          {
[10:51:38.984] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.984] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.984] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.984] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:38.984] |  :  .  |              }
[10:51:38.984] |  :  .  |              {
[10:51:38.984] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.984] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.984] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:38.984] |  :  .  |                  })
[10:51:38.984] |  :  .  |              }
[10:51:38.984] |  :  .  |          }
[10:51:38.984] |  :  .  |      }, args = future.call.arguments)
[10:51:38.984] |  :  .  |  }
[10:51:38.985] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:38.985] |  :  .  Search for packages associated with the globals ...
[10:51:38.985] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:38.985] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:38.985] |  :  .  Search for packages associated with the globals ... DONE
[10:51:38.985] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:38.986] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:38.986] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:38.986] |  :  .  packages: [1] ‘future.apply’
[10:51:38.986] |  :  getGlobalsAndPackages() ... done
[10:51:38.986] |  :  run() for Future (‘Future’) ...
[10:51:38.986] |  :  .  state: ‘created’
[10:51:38.986] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.987] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.987] |  :  .  Using MulticoreFutureBackend ...
[10:51:38.987] |  :  .  |  Launching futures ...
[10:51:38.987] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:38.987] |  :  .  |  :  .  getFutureData() ...
[10:51:38.987] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:38.987] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:38.987] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:38.987] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:38.987] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:38.988] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:38.988] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.988] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:38.988] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.988] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:38.988] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:38.988] |  :  .  |  :  .  getFutureData() ... done
[10:51:38.988] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:38.989] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:38.991] |  :  .  |  :  .  MulticoreFuture started
[10:51:38.991] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:38.991] |  :  .  |  Launching futures ... done
[10:51:38.992] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:38.991] |  :  .  |  :  .  attachPackages() ...
[10:51:38.992] |  :  .  Using MulticoreFutureBackend ... done
[10:51:38.992] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:38.992] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:38.992] Created future:
[10:51:38.992] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:38.992] |  :  .  |  :  .  attachPackages() ...
[10:51:38.992] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:38.993] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:38.994] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:38.994] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:38.994] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:38.995] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:38.995] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:38.995] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:38.995] |  :  .  |  :  .  |  :  .  New stack:
[10:51:38.995] |  :  .  |  :  .  |  :  .  List of 1
[10:51:38.995] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:38.995] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:38.995] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:38.995] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.995] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:38.995] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:38.995] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.002] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.005] |  :  readImmediateCondition() ...
[10:51:39.005] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.005] |  :   - Number of RDS files: 0
[10:51:39.005] |  :  readImmediateCondition() ... DONE
[10:51:38.992] MulticoreFuture:
[10:51:38.992] Label: ‘future_vapply-1’
[10:51:38.992] Expression:
[10:51:38.992] {
[10:51:38.992]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:38.992]     "# expression in do.call(), because function called uses '...'  "
[10:51:38.992]     "# as a global variable                                         "
[10:51:38.992]     do.call(function(...) {
[10:51:38.992]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:38.992]         "# without having an '...' argument. This means '...' is treated"
[10:51:38.992]         "# as a global variable. This may happen when FUN() is an       "
[10:51:38.992]         "# anonymous function.                                          "
[10:51:38.992]         "#                                                              "
[10:51:38.992]         "# If an anonymous function, we will make sure to restore the   "
[10:51:38.992]         "# function environment of FUN() to the calling environment.    "
[10:51:38.992]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:38.992]         "# global environment, which is where globals are written.      "
[10:51:38.992]         penv <- env <- environment(...future.FUN)
[10:51:38.992]         repeat {
[10:51:38.992]             if (identical(env, globalenv()) || identical(env, 
[10:51:38.992]                 emptyenv())) 
[10:51:38.992]                 break
[10:51:38.992]             penv <- env
[10:51:38.992]             env <- parent.env(env)
[10:51:38.992]         }
[10:51:38.992]         if (identical(penv, globalenv())) {
[10:51:38.992]             environment(...future.FUN) <- environment()
[10:51:38.992]         }
[10:51:38.992]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:38.992]             !isNamespace(penv)) {
[10:51:38.992]             parent.env(penv) <- environment()
[10:51:38.992]         }
[10:51:38.992]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:38.992]         {
[10:51:38.992]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:38.992]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:38.992]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:38.992]                 on.exit(options(oopts), add = TRUE)
[10:51:38.992]             }
[10:51:38.992]             {
[10:51:38.992]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:38.992]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:38.992]                   ...future.FUN(...future.X_jj, ...)
[10:51:38.992]                 })
[10:51:38.992]             }
[10:51:38.992]         }
[10:51:38.992]     }, args = future.call.arguments)
[10:51:38.992] }
[10:51:38.992] Lazy evaluation: FALSE
[10:51:38.992] Asynchronous evaluation: TRUE
[10:51:38.992] Local evaluation: TRUE
[10:51:38.992] Environment: R_GlobalEnv
[10:51:38.992] Capture standard output: TRUE
[10:51:38.992] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:38.992] Immediate condition classes: ‘immediateCondition’
[10:51:38.992] Globals: 11 objects totaling 13.01 KiB (function ‘...future.FUN’ of 4.50 KiB, function ‘x_FUN’ of 295 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:38.992] Packages: 1 packages (‘future.apply’)
[10:51:38.992] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:38.992] Resolved: FALSE
[10:51:38.992] Value: <not collected>
[10:51:38.992] Conditions captured: <none>
[10:51:38.992] Early signaling: FALSE
[10:51:38.992] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:38.992] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.006] Chunk #1 of 2 ... DONE
[10:51:39.006] Chunk #2 of 2 ...
[10:51:39.006]  - Finding globals in 'X' for chunk #2 ...
[10:51:39.007] |  :  getGlobalsAndPackages() ...
[10:51:39.007] |  :  .  Searching for globals ...
[10:51:39.007] |  :  .  |  globals found: [0] 
[10:51:39.007] |  :  .  Searching for globals ... DONE
[10:51:39.008] |  :  .  globals: [0] <none>
[10:51:39.008] |  :  .  packages: [0] <none>
[10:51:39.008] |  :  getGlobalsAndPackages() ... done
[10:51:39.008]    + additional globals found: [n=0] 
[10:51:39.008]    + additional namespaces needed: [n=0] 
[10:51:39.008]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:39.008]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.008]  - seeds: <none>
[10:51:39.009]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.009] |  :  getGlobalsAndPackages() ...
[10:51:39.009] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.009] |  :  .  Resolving globals: FALSE
[10:51:39.009] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.009] |  :  .  |  {
[10:51:39.009] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.009] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.009] |  :  .  |      "# as a global variable                                         "
[10:51:39.009] |  :  .  |      do.call(function(...) {
[10:51:39.009] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.009] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.009] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.009] |  :  .  |          "# anonymous function.                                          "
[10:51:39.009] |  :  .  |          "#                                                              "
[10:51:39.009] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.009] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.009] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.009] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.009] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.009] |  :  .  |          repeat {
[10:51:39.009] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.009] |  :  .  |                  emptyenv())) 
[10:51:39.009] |  :  .  |                  break
[10:51:39.009] |  :  .  |              penv <- env
[10:51:39.009] |  :  .  |              env <- parent.env(env)
[10:51:39.009] |  :  .  |          }
[10:51:39.009] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.009] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.009] |  :  .  |          }
[10:51:39.009] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.009] |  :  .  |              !isNamespace(penv)) {
[10:51:39.009] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.009] |  :  .  |          }
[10:51:39.009] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.009] |  :  .  |          {
[10:51:39.009] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.009] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.009] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.009] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.009] |  :  .  |              }
[10:51:39.009] |  :  .  |              {
[10:51:39.009] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.009] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.009] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.009] |  :  .  |                  })
[10:51:39.009] |  :  .  |              }
[10:51:39.009] |  :  .  |          }
[10:51:39.009] |  :  .  |      }, args = future.call.arguments)
[10:51:39.009] |  :  .  |  }
[10:51:39.002] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.002] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.002] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.002] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.002] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.002] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.002] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.002] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.002] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.002] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.002] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.002] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.002] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.002] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.011] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.011] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.012] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.012] |  :  .  Search for packages associated with the globals ...
[10:51:39.013] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:39.014] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:39.014] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.014] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.014] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.015] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.015] |  :  .  packages: [1] ‘future.apply’
[10:51:39.015] |  :  getGlobalsAndPackages() ... done
[10:51:39.016] |  :  run() for Future (‘Future’) ...
[10:51:39.016] |  :  .  state: ‘created’
[10:51:39.016] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.016] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.016] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.017] |  :  .  |  Launching futures ...
[10:51:39.017] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.017] |  :  .  |  :  .  getFutureData() ...
[10:51:39.017] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.017] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.017] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.018] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.018] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.018] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.018] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.011] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.011] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.011] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.011] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.011] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.011] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.011] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.018] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.019] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.019] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.019] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.019] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.019] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.019] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.019] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.019] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.019] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.020] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.020] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.020] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.020] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.020] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.020] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.020] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.020] |  :  .  |  :  .  |  :  List of 1
[10:51:39.020] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.020] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.020] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.020] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.020] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.020] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.020] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.023] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.022] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.023] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.023] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.023] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.024] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.024] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.023] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.024] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.024] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.024] |  :  .  |  :  .  attachPackages() ...
[10:51:39.024] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.024] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.024] |  :  .  |  Launching futures ... done
[10:51:39.025] |  :  .  |  :  .  assign_globals() ...
[10:51:39.024] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.025] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.025] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.025] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.026] |  :  .  |  :  .  attachPackages() ...
[10:51:39.026] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.027] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.027] Created future:
[10:51:39.027] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.028] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.029] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.029] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.030] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.030] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.031] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.031] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.031] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.031] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.031] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.031] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.036] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.025] |  :  .  |  :  .  List of 11
[10:51:39.025] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.025] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.025] |  :  .  |  :  .   $ times                    : int 0
[10:51:39.025] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.025] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.025] |  :  .  |  :  .   $ dim                      : NULL
[10:51:39.025] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:39.025] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.025] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.025] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.025] |  :  .  |  :  .    ..$ : int 1
[10:51:39.025] |  :  .  |  :  .    ..$ : int 2
[10:51:39.025] |  :  .  |  :  .    ..$ : int 3
[10:51:39.025] |  :  .  |  :  .    ..$ : int 4
[10:51:39.025] |  :  .  |  :  .    ..$ : int 5
[10:51:39.025] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.025] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.025] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.025] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.025] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.025] |  :  .  |  :  .   - attr(*, "total_size")= num 23490
[10:51:39.025] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.025] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.037] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.037] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:39.037] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.037] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.037] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.037] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.037] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.037] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.038] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.038] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.038] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.038] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.038] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.040] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.040] |  :  readImmediateCondition() ...
[10:51:39.040] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.040] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.040] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.041] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.036] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.036] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.036] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.036] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.036] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.036] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.036] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.036] | [10:51:39.041] |  :  .  |  :  .  |  :  .  |  New stack:
 :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.036] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.036] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.036] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.036] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.036] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.036] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.041] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.041] |  :   - Number of RDS files: 0
[10:51:39.041] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.041] |  :  readImmediateCondition() ... DONE
[10:51:39.027] MulticoreFuture:
[10:51:39.027] Label: ‘future_vapply-2’
[10:51:39.027] Expression:
[10:51:39.027] {
[10:51:39.027]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.027]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.027]     "# as a global variable                                         "
[10:51:39.027]     do.call(function(...) {
[10:51:39.027]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.027]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.027]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.027]         "# anonymous function.                                          "
[10:51:39.027]         "#                                                              "
[10:51:39.027]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.027]         "# function environment of FUN() to the calling environment.    "
[10:51:39.027]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.027]         "# global environment, which is where globals are written.      "
[10:51:39.027]         penv <- env <- environment(...future.FUN)
[10:51:39.027]         repeat {
[10:51:39.027]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.027]                 emptyenv())) 
[10:51:39.027]                 break
[10:51:39.027]             penv <- env
[10:51:39.027]             env <- parent.env(env)
[10:51:39.027]         }
[10:51:39.027]         if (identical(penv, globalenv())) {
[10:51:39.027]             environment(...future.FUN) <- environment()
[10:51:39.027]         }
[10:51:39.027]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.027]             !isNamespace(penv)) {
[10:51:39.027]             parent.env(penv) <- environment()
[10:51:39.027]         }
[10:51:39.027]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.027]         {
[10:51:39.027]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.027]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.027]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.027]                 on.exit(options(oopts), add = TRUE)
[10:51:39.027]             }
[10:51:39.027]             {
[10:51:39.027]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.027]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.027]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.027]                 })
[10:51:39.027]             }
[10:51:39.027]         }
[10:51:39.027]     }, args = future.call.arguments)
[10:51:39.027] }
[10:51:39.027] Lazy evaluation: FALSE
[10:51:39.027] Asynchronous evaluation: TRUE
[10:51:39.027] Local evaluation: TRUE
[10:51:39.027] Environment: R_GlobalEnv
[10:51:39.027] Capture standard output: TRUE
[10:51:39.027] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.027] Immediate condition classes: ‘immediateCondition’
[10:51:39.027] Globals: 11 objects totaling 13.01 KiB (function ‘...future.FUN’ of 4.50 KiB, function ‘x_FUN’ of 295 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.027] Packages: 1 packages (‘future.apply’)
[10:51:39.027] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.027] Resolved: FALSE
[10:51:39.027] Value: <not collected>
[10:51:39.027] Conditions captured: <none>
[10:51:39.027] Early signaling: FALSE
[10:51:39.027] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.027] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.042] Chunk #2 of 2 ... DONE
[10:51:39.042] Launching 2 futures (chunks) ... DONE
[10:51:39.042] Resolving 2 futures (chunks) ...
[10:51:39.043] |  :  value() on list ...
[10:51:39.043] |  :  .  recursive: 0
[10:51:39.043] |  :  .  length: 2
[10:51:39.043] |  :  .  
[10:51:39.044] |  :  .  Number of remaining objects: 2
[10:51:39.041] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.041] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.041] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.041] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.041] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.041] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.044] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.044] |  :  .  checking value #1 ...
[10:51:39.044] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.044] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.044] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.044] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.044] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.044] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.044] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.044] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.044] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.041] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.041] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.041] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.041] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.041] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.041] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.041] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.049] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.049] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.050] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.050] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.052] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.046] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.052] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.052] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.052] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.052] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.052] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.053] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.053] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.053] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.053] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.053] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.053] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.053] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.053] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.053] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.053] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.054] |  :  .  |  readImmediateCondition() ...
[10:51:39.055] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.055] |  :  .  |   - Number of RDS files: 0
[10:51:39.055] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.055] |  :  .  checking value #1 ... done
[10:51:39.055] |  :  .  checking value #2 ...
[10:51:39.056] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.054] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.054] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.054] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.054] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.054] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.054] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.054] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.054] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.054] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.054] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.054] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.054] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.054] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.054] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.057] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.057] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.057] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.053] |  :  .  |  :  .  |  :  List of 1
[10:51:39.053] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.053] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.053] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.053] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.053] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.053] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.053] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.057] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.057] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.057] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.058] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.058] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.058] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.058] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.058] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.058] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.058] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.058] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.058] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.059] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.059] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.059] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.059] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.060] |  :  .  |  :  .  assign_globals() ...
[10:51:39.066] |  :  .  |  readImmediateCondition() ...
[10:51:39.066] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.067] |  :  .  |   - Number of RDS files: 0
[10:51:39.067] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.067] |  :  .  checking value #2 ... done
[10:51:39.060] |  :  .  |  :  .  List of 11
[10:51:39.060] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.060] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.060] |  :  .  |  :  .   $ times                    : int 0
[10:51:39.060] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.060] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.060] |  :  .  |  :  .   $ dim                      : NULL
[10:51:39.060] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:39.060] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.060] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.060] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.060] |  :  .  |  :  .    ..$ : int 6
[10:51:39.060] |  :  .  |  :  .    ..$ : int 7
[10:51:39.060] |  :  .  |  :  .    ..$ : int 8
[10:51:39.060] |  :  .  |  :  .    ..$ : int 9
[10:51:39.060] |  :  .  |  :  .    ..$ : int 10
[10:51:39.060] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.060] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.060] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.060] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.060] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.060] |  :  .  |  :  .   - attr(*, "total_size")= num 23490
[10:51:39.060] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.060] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.070] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.070] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:39.070] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.070] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.070] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.071] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.071] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.071] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.071] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.071] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.071] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.071] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.071] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.075] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.076] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.076] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.076] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.076] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.077] |  :  .  Number of remaining objects: 2
[10:51:39.078] |  :  .  checking value #1 ...
[10:51:39.078] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.078] |  :  .  |  readImmediateCondition() ...
[10:51:39.078] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.079] |  :  .  |   - Number of RDS files: 0
[10:51:39.079] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.079] |  :  .  |  MulticoreFuture #1
[10:51:39.079] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.079] |  :  .  |  :  nx: 2
[10:51:39.080] |  :  .  |  :  relay: TRUE
[10:51:39.080] |  :  .  |  :  stdout: TRUE
[10:51:39.080] |  :  .  |  :  signal: TRUE
[10:51:39.080] |  :  .  |  :  resignal: FALSE
[10:51:39.080] |  :  .  |  :  force: TRUE
[10:51:39.081] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:39.081] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:39.081] |  :  .  |  :  until=1
[10:51:39.081] |  :  .  |  :  relaying element #1
[10:51:39.076] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.076] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.076] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.076] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.076] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.076] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.076] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.076] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.076] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.081] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.082] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.082] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.083] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.083] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.083] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.083] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.084] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.084] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.084] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.084] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.085] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.085] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.085] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.085] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.082] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.082] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.082] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.082] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.082] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.082] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.082] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.082] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.085] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.085] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.086] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.086] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:39.086] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.086] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.086] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.087] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.087] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.087] |  :  .  |  :  value: <list>
[10:51:39.087] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.087] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.088] |  :  .  |  :  nx: 2
[10:51:39.088] |  :  .  |  :  relay: TRUE
[10:51:39.088] |  :  .  |  :  stdout: TRUE
[10:51:39.088] |  :  .  |  :  signal: TRUE
[10:51:39.088] |  :  .  |  :  resignal: FALSE
[10:51:39.089] |  :  .  |  :  force: TRUE
[10:51:39.089] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.089] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.089] |  :  .  |  :  until=2
[10:51:39.089] |  :  .  |  :  relaying element #2
[10:51:39.089] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.090] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.090] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:39.090] |  :  .  |  length: 1 (resolved future 1)
[10:51:39.090] |  :  .  checking value #1 ... done
[10:51:39.090] |  :  .  checking value #2 ...
[10:51:39.091] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.086] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.093] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.093] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.093] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.093] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.093] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.093] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.093] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.093] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.093] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.093] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.094] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.094] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.094] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.094] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.094] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.094] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.094] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.094] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.094] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.094] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.094] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.094] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.094] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.094] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.097] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.097] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.097] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.097] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.097] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.097] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.098] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.098] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.099] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.100] |  :  .  |  readImmediateCondition() ...
[10:51:39.100] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.100] |  :  .  |   - Number of RDS files: 0
[10:51:39.100] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.100] |  :  .  |  MulticoreFuture #2
[10:51:39.100] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.101] |  :  .  |  :  nx: 2
[10:51:39.101] |  :  .  |  :  relay: TRUE
[10:51:39.101] |  :  .  |  :  stdout: TRUE
[10:51:39.101] |  :  .  |  :  signal: TRUE
[10:51:39.101] |  :  .  |  :  resignal: FALSE
[10:51:39.101] |  :  .  |  :  force: TRUE
[10:51:39.101] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.101] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.101] |  :  .  |  :  until=2
[10:51:39.102] |  :  .  |  :  relaying element #2
[10:51:39.102] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.102] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.102] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.103] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.103] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.103] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.103] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.103] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.104] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.104] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.106] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.107] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.107] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.107] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.107] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.107] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.107] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.108] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.108] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.108] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.108] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.108] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.108] |  :  .  |  :  value: <list>
[10:51:39.109] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.109] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.109] |  :  .  |  :  nx: 2
[10:51:39.109] |  :  .  |  :  relay: TRUE
[10:51:39.109] |  :  .  |  :  stdout: TRUE
[10:51:39.109] |  :  .  |  :  signal: TRUE
[10:51:39.109] |  :  .  |  :  resignal: FALSE
[10:51:39.110] |  :  .  |  :  force: TRUE
[10:51:39.110] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.110] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.110] |  :  .  |  :  until=2
[10:51:39.110] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.110] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.110] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.110] |  :  .  |  length: 0 (resolved future 2)
[10:51:39.111] |  :  .  checking value #2 ... done
[10:51:39.111] |  :  .  Relaying remaining futures ...
[10:51:39.111] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:39.111] |  :  .  |  :  nx: 2
[10:51:39.111] |  :  .  |  :  relay: TRUE
[10:51:39.111] |  :  .  |  :  stdout: TRUE
[10:51:39.111] |  :  .  |  :  signal: TRUE
[10:51:39.111] |  :  .  |  :  resignal: FALSE
[10:51:39.112] |  :  .  |  :  force: TRUE
[10:51:39.112] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.112] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:39.112] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.112] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.112] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:39.112] |  :  .  Relaying remaining futures ... done
[10:51:39.113] |  :  value() on list ... done
[10:51:39.113]  - Number of value chunks collected: 2
[10:51:39.113] Resolving 2 futures (chunks) ... DONE
[10:51:39.113] Reducing values from 2 chunks ...
[10:51:39.113]  - Number of values collected after concatenation: 10
[10:51:39.113]  - Number of values expected: 10
[10:51:39.113] Reducing values from 2 chunks ... DONE
[10:51:39.113] future_lapply() ... DONE
 num[0 , 1:10] 
 int[0 , 1:10] 
[10:51:39.114] future_lapply() ...
[10:51:39.117] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.117] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.117] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.117] Number of chunks: 2
[10:51:39.117] getGlobalsAndPackagesXApply() ...
[10:51:39.118]  - future.globals: TRUE
[10:51:39.118] |  :  getGlobalsAndPackages() ...
[10:51:39.118] |  :  .  Searching for globals ...
[10:51:39.122] |  :  .  |  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘integer’
[10:51:39.122] |  :  .  Searching for globals ... DONE
[10:51:39.122] |  :  .  Resolving globals: FALSE
[10:51:39.122] |  :  .  Search for packages associated with the globals ...
[10:51:39.122] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:39.123] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:39.123] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.123] |  :  .  The total size of the 7 globals is 12.75 KiB (13056 bytes)
[10:51:39.124] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.75 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.50 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:39.124] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.124] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.124] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:39.124] |  :  .  packages: [1] ‘future.apply’
[10:51:39.124] |  :  getGlobalsAndPackages() ... done
[10:51:39.125]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:39.125]  - needed namespaces: [n=1] ‘future.apply’
[10:51:39.125] Finding globals ... DONE
[10:51:39.125]  - use_args: TRUE
[10:51:39.125]  - Getting '...' globals ...
[10:51:39.125] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:39.125] |  :  .  recursive: 0
[10:51:39.125] |  :  .  length: 1
[10:51:39.126] |  :  .  elements: ‘...’
[10:51:39.127] |  :  .  'obj' is DotDotDotList
[10:51:39.127] |  :  .  resolve(obj, ...) ...
[10:51:39.127] |  :  .  resolve(obj, ...) ... done
[10:51:39.127] |  :  .  length: 0 (resolved future 1)
[10:51:39.127] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:39.127]    - '...' content: [n=0] 
[10:51:39.128] List of 1
[10:51:39.128]  $ ...: list()
[10:51:39.128]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.128]  - attr(*, "where")=List of 1
[10:51:39.128]   ..$ ...:<environment: 0x55d463765cf0> 
[10:51:39.128]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.128]  - attr(*, "resolved")= logi TRUE
[10:51:39.128]  - attr(*, "total_size")= num NA
[10:51:39.130]  - Getting '...' globals ... DONE
[10:51:39.130] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:39.131] List of 8
[10:51:39.131]  $ ...future.FUN:function (x, ...)  
[10:51:39.131]  $ x_FUN        :function (x)  
[10:51:39.131]  $ times        : int 0
[10:51:39.131]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.131]  $ stop_if_not  :function (...)  
[10:51:39.131]  $ dim          : NULL
[10:51:39.131]  $ valid_types  : chr [1:2] "logical" "integer"
[10:51:39.131]  $ ...          : list()
[10:51:39.131]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.131]  - attr(*, "where")=List of 8
[10:51:39.131]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:39.131]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:39.131]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:39.131]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:39.131]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:39.131]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:39.131]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:39.131]   ..$ ...          :<environment: 0x55d463765cf0> 
[10:51:39.131]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.131]  - attr(*, "resolved")= logi FALSE
[10:51:39.131]  - attr(*, "total_size")= num 23453
[10:51:39.136] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:39.136] getGlobalsAndPackagesXApply() ... DONE
[10:51:39.136] Number of futures (= number of chunks): 2
[10:51:39.137] Launching 2 futures (chunks) ...
[10:51:39.137] Chunk #1 of 2 ...
[10:51:39.137]  - Finding globals in 'X' for chunk #1 ...
[10:51:39.137] |  :  getGlobalsAndPackages() ...
[10:51:39.137] |  :  .  Searching for globals ...
[10:51:39.137] |  :  .  |  globals found: [0] 
[10:51:39.137] |  :  .  Searching for globals ... DONE
[10:51:39.137] |  :  .  globals: [0] <none>
[10:51:39.137] |  :  .  packages: [0] <none>
[10:51:39.138] |  :  getGlobalsAndPackages() ... done
[10:51:39.138]    + additional globals found: [n=0] 
[10:51:39.138]    + additional namespaces needed: [n=0] 
[10:51:39.138]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:39.138]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.138]  - seeds: <none>
[10:51:39.138]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.138] |  :  getGlobalsAndPackages() ...
[10:51:39.138] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.138] |  :  .  Resolving globals: FALSE
[10:51:39.139] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.139] |  :  .  |  {
[10:51:39.139] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.139] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.139] |  :  .  |      "# as a global variable                                         "
[10:51:39.139] |  :  .  |      do.call(function(...) {
[10:51:39.139] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.139] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.139] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.139] |  :  .  |          "# anonymous function.                                          "
[10:51:39.139] |  :  .  |          "#                                                              "
[10:51:39.139] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.139] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.139] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.139] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.139] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.139] |  :  .  |          repeat {
[10:51:39.139] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.139] |  :  .  |                  emptyenv())) 
[10:51:39.139] |  :  .  |                  break
[10:51:39.139] |  :  .  |              penv <- env
[10:51:39.139] |  :  .  |              env <- parent.env(env)
[10:51:39.139] |  :  .  |          }
[10:51:39.139] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.139] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.139] |  :  .  |          }
[10:51:39.139] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.139] |  :  .  |              !isNamespace(penv)) {
[10:51:39.139] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.139] |  :  .  |          }
[10:51:39.139] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.139] |  :  .  |          {
[10:51:39.139] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.139] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.139] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.139] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.139] |  :  .  |              }
[10:51:39.139] |  :  .  |              {
[10:51:39.139] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.139] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.139] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.139] |  :  .  |                  })
[10:51:39.139] |  :  .  |              }
[10:51:39.139] |  :  .  |          }
[10:51:39.139] |  :  .  |      }, args = future.call.arguments)
[10:51:39.139] |  :  .  |  }
[10:51:39.139] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.139] |  :  .  Search for packages associated with the globals ...
[10:51:39.139] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:39.140] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:39.140] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.140] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.140] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.140] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.140] |  :  .  packages: [1] ‘future.apply’
[10:51:39.140] |  :  getGlobalsAndPackages() ... done
[10:51:39.141] |  :  run() for Future (‘Future’) ...
[10:51:39.141] |  :  .  state: ‘created’
[10:51:39.141] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.141] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.141] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.141] |  :  .  |  Launching futures ...
[10:51:39.141] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.141] |  :  .  |  :  .  getFutureData() ...
[10:51:39.142] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.142] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.142] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.142] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.142] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.142] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.142] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.142] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.142] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.142] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.143] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.143] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.143] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.143] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.145] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.145] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.146] |  :  .  |  :  .  attachPackages() ...
[10:51:39.146] |  :  .  |  Launching futures ... done
[10:51:39.148] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.148] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.148] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.148] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.149] |  :  .  |  :  .  attachPackages() ...
[10:51:39.149] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.149] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.149] Created future:
[10:51:39.150] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.151] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.151] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.152] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.153] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.153] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.154] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.154] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.154] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.154] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.154] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.154] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.154] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.154] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.154] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.154] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.160] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.162] |  :  readImmediateCondition() ...
[10:51:39.163] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.163] |  :   - Number of RDS files: 0
[10:51:39.163] |  :  readImmediateCondition() ... DONE
[10:51:39.149] MulticoreFuture:
[10:51:39.149] Label: ‘future_vapply-1’
[10:51:39.149] Expression:
[10:51:39.149] {
[10:51:39.149]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.149]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.149]     "# as a global variable                                         "
[10:51:39.149]     do.call(function(...) {
[10:51:39.149]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.149]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.149]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.149]         "# anonymous function.                                          "
[10:51:39.149]         "#                                                              "
[10:51:39.149]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.149]         "# function environment of FUN() to the calling environment.    "
[10:51:39.149]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.149]         "# global environment, which is where globals are written.      "
[10:51:39.149]         penv <- env <- environment(...future.FUN)
[10:51:39.149]         repeat {
[10:51:39.149]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.149]                 emptyenv())) 
[10:51:39.149]                 break
[10:51:39.149]             penv <- env
[10:51:39.149]             env <- parent.env(env)
[10:51:39.149]         }
[10:51:39.149]         if (identical(penv, globalenv())) {
[10:51:39.149]             environment(...future.FUN) <- environment()
[10:51:39.149]         }
[10:51:39.149]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.149]             !isNamespace(penv)) {
[10:51:39.149]             parent.env(penv) <- environment()
[10:51:39.149]         }
[10:51:39.149]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.149]         {
[10:51:39.149]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.149]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.149]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.149]                 on.exit(options(oopts), add = TRUE)
[10:51:39.149]             }
[10:51:39.149]             {
[10:51:39.149]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.149]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.149]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.149]                 })
[10:51:39.149]             }
[10:51:39.149]         }
[10:51:39.149]     }, args = future.call.arguments)
[10:51:39.149] }
[10:51:39.149] Lazy evaluation: FALSE
[10:51:39.149] Asynchronous evaluation: TRUE
[10:51:39.149] Local evaluation: TRUE
[10:51:39.149] Environment: R_GlobalEnv
[10:51:39.149] Capture standard output: TRUE
[10:51:39.149] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.149] Immediate condition classes: ‘immediateCondition’
[10:51:39.149] Globals: 11 objects totaling 12.98 KiB (function ‘...future.FUN’ of 4.49 KiB, function ‘x_FUN’ of 296 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.149] Packages: 1 packages (‘future.apply’)
[10:51:39.149] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.149] Resolved: FALSE
[10:51:39.149] Value: <not collected>
[10:51:39.149] Conditions captured: <none>
[10:51:39.149] Early signaling: FALSE
[10:51:39.149] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.149] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.164] Chunk #1 of 2 ... DONE
[10:51:39.164] Chunk #2 of 2 ...
[10:51:39.165]  - Finding globals in 'X' for chunk #2 ...
[10:51:39.165] |  :  getGlobalsAndPackages() ...
[10:51:39.165] |  :  .  Searching for globals ...
[10:51:39.160] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.160] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.160] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.160] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.160] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.160] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.160] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.160] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.160] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.160] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.160] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.160] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.160] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.160] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.166] |  :  .  |  globals found: [0] 
[10:51:39.166] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.166] |  :  .  Searching for globals ... DONE
[10:51:39.166] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.166] |  :  .  globals: [0] <none>
[10:51:39.166] |  :  .  packages: [0] <none>
[10:51:39.166] |  :  getGlobalsAndPackages() ... done
[10:51:39.166]    + additional globals found: [n=0] 
[10:51:39.167]    + additional namespaces needed: [n=0] 
[10:51:39.167]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:39.167]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.167]  - seeds: <none>
[10:51:39.167]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.167] |  :  getGlobalsAndPackages() ...
[10:51:39.168] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.168] |  :  .  Resolving globals: FALSE
[10:51:39.168] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.168] |  :  .  |  {
[10:51:39.168] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.168] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.168] |  :  .  |      "# as a global variable                                         "
[10:51:39.168] |  :  .  |      do.call(function(...) {
[10:51:39.168] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.168] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.168] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.168] |  :  .  |          "# anonymous function.                                          "
[10:51:39.168] |  :  .  |          "#                                                              "
[10:51:39.168] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.168] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.168] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.168] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.168] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.168] |  :  .  |          repeat {
[10:51:39.168] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.168] |  :  .  |                  emptyenv())) 
[10:51:39.168] |  :  .  |                  break
[10:51:39.168] |  :  .  |              penv <- env
[10:51:39.168] |  :  .  |              env <- parent.env(env)
[10:51:39.168] |  :  .  |          }
[10:51:39.168] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.168] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.168] |  :  .  |          }
[10:51:39.168] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.168] |  :  .  |              !isNamespace(penv)) {
[10:51:39.168] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.168] |  :  .  |          }
[10:51:39.168] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.168] |  :  .  |          {
[10:51:39.168] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.168] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.168] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.168] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.168] |  :  .  |              }
[10:51:39.168] |  :  .  |              {
[10:51:39.168] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.168] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.168] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.168] |  :  .  |                  })
[10:51:39.168] |  :  .  |              }
[10:51:39.168] |  :  .  |          }
[10:51:39.168] |  :  .  |      }, args = future.call.arguments)
[10:51:39.168] |  :  .  |  }
[10:51:39.169] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.169] |  :  .  Search for packages associated with the globals ...
[10:51:39.170] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:39.170] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:39.171] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.171] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.171] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.166] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.166] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.166] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.166] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.166] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.166] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.166] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.171] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.171] |  :  .  packages: [1] ‘future.apply’
[10:51:39.171] |  :  getGlobalsAndPackages() ... done
[10:51:39.172] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.172] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.172] |  :  run() for Future (‘Future’) ...
[10:51:39.172] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.172] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.172] |  :  .  state: ‘created’
[10:51:39.172] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.172] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.172] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.172] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.173] |  :  .  |  Launching futures ...
[10:51:39.172] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.172] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.172] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.172] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.172] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.173] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.173] |  :  .  |  :  .  getFutureData() ...
[10:51:39.173] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.173] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.173] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.173] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.174] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.174] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.174] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.174] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.174] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.174] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.174] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.175] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.175] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.175] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.173] |  :  .  |  :  .  |  :  List of 1
[10:51:39.173] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.173] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.173] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.173] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.173] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.173] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.173] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.175] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.175] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.176] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.176] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.176] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.176] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.176] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.176] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.177] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.178] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.178] |  :  .  |  Launching futures ... done
[10:51:39.178] |  :  .  |  :  .  attachPackages() ...
[10:51:39.178] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.179] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.178] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.179] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.179] |  :  .  |  :  .  assign_globals() ...
[10:51:39.179] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.179] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.179] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.179] |  :  .  |  :  .  attachPackages() ...
[10:51:39.180] Created future:
[10:51:39.180] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.180] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.181] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.182] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.182] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.183] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.183] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.183] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.184] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.184] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.184] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.184] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.184] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.184] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.184] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.184] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.184] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.188] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.179] |  :  .  |  :  .  List of 11
[10:51:39.179] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.179] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.179] |  :  .  |  :  .   $ times                    : int 0
[10:51:39.179] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.179] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.179] |  :  .  |  :  .   $ dim                      : NULL
[10:51:39.179] |  :  .  |  :  .   $ valid_types              : chr [1:2] "logical" "integer"
[10:51:39.179] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.179] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.179] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.179] |  :  .  |  :  .    ..$ : int 1
[10:51:39.179] |  :  .  |  :  .    ..$ : int 2
[10:51:39.179] |  :  .  |  :  .    ..$ : int 3
[10:51:39.179] |  :  .  |  :  .    ..$ : int 4
[10:51:39.179] |  :  .  |  :  .    ..$ : int 5
[10:51:39.179] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.179] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.179] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.179] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.179] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.179] |  :  .  |  :  .   - attr(*, "total_size")= num 23453
[10:51:39.179] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.179] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.189] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.189] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:39.189] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.189] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.189] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.190] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.190] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.190] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.190] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.190] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.190] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.190] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.190] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.192] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.193] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.188] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.188] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.188] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.188] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" [10:51:39.193] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
"function"
[10:51:39.188] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.188] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.188] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.188] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.188] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.188] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.188] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.188] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.188] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.188] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.193] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.193] |  :  readImmediateCondition() ...
[10:51:39.193] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.193] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.193] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.193] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.193] |  :   - Number of RDS files: 0
[10:51:39.194] |  :  readImmediateCondition() ... DONE
[10:51:39.180] MulticoreFuture:
[10:51:39.180] Label: ‘future_vapply-2’
[10:51:39.180] Expression:
[10:51:39.180] {
[10:51:39.180]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.180]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.180]     "# as a global variable                                         "
[10:51:39.180]     do.call(function(...) {
[10:51:39.180]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.180]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.180]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.180]         "# anonymous function.                                          "
[10:51:39.180]         "#                                                              "
[10:51:39.180]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.180]         "# function environment of FUN() to the calling environment.    "
[10:51:39.180]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.180]         "# global environment, which is where globals are written.      "
[10:51:39.180]         penv <- env <- environment(...future.FUN)
[10:51:39.180]         repeat {
[10:51:39.180]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.180]                 emptyenv())) 
[10:51:39.180]                 break
[10:51:39.180]             penv <- env
[10:51:39.180]             env <- parent.env(env)
[10:51:39.180]         }
[10:51:39.180]         if (identical(penv, globalenv())) {
[10:51:39.180]             environment(...future.FUN) <- environment()
[10:51:39.180]         }
[10:51:39.180]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.180]             !isNamespace(penv)) {
[10:51:39.180]             parent.env(penv) <- environment()
[10:51:39.180]         }
[10:51:39.180]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.180]         {
[10:51:39.180]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.180]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.180]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.180]                 on.exit(options(oopts), add = TRUE)
[10:51:39.180]             }
[10:51:39.180]             {
[10:51:39.180]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.180]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.180]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.180]                 })
[10:51:39.180]             }
[10:51:39.180]         }
[10:51:39.180]     }, args = future.call.arguments)
[10:51:39.180] }
[10:51:39.180] Lazy evaluation: FALSE
[10:51:39.180] Asynchronous evaluation: TRUE
[10:51:39.180] Local evaluation: TRUE
[10:51:39.180] Environment: R_GlobalEnv
[10:51:39.180] Capture standard output: TRUE
[10:51:39.180] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.180] Immediate condition classes: ‘immediateCondition’
[10:51:39.180] Globals: 11 objects totaling 12.98 KiB (function ‘...future.FUN’ of 4.49 KiB, function ‘x_FUN’ of 296 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.180] Packages: 1 packages (‘future.apply’)
[10:51:39.180] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.180] Resolved: FALSE
[10:51:39.180] Value: <not collected>
[10:51:39.180] Conditions captured: <none>
[10:51:39.180] Early signaling: FALSE
[10:51:39.180] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.180] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.195] Chunk #2 of 2 ... DONE
[10:51:39.195] Launching 2 futures (chunks) ... DONE
[10:51:39.195] Resolving 2 futures (chunks) ...
[10:51:39.195] |  :  value() on list ...
[10:51:39.196] |  :  .  recursive: 0
[10:51:39.196] |  :  .  length: 2
[10:51:39.196] |  :  .  
[10:51:39.196] |  :  .  Number of remaining objects: 2
[10:51:39.196] |  :  .  checking value #1 ...
[10:51:39.197] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.193] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.193] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.193] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.193] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.193] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.193] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.198] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.198] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.198] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.198] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.198] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.201] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.206] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.206] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.206] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.206] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.193] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.193] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc[10:51:39.206] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
 = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.193] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.193] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.193] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.193] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.193] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.206] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.206] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.206] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.206] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.206] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.207] |  :  .  |  readImmediateCondition() ...
[10:51:39.207] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.207] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.208] |  :  .  |   - Number of RDS files: 0
[10:51:39.208] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.208] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.208] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.208] |  :  .  checking value #1 ... done
[10:51:39.208] |  :  .  checking value #2 ...
[10:51:39.208] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.208] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.208] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.209] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.209] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.209] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.209] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.209] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.207] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.207] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.207] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.207] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.207] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.207] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.207] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.207] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.207] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.207] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.207] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.207] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.207] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.207] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.210] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.210] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.210] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.210] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.210] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.210] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.210] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.211] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.211] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.209] |  :  .  |  :  .  |  :  List of 1
[10:51:39.209] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.209] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.209] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.209] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.209] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.209] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.209] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.213] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.213] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.213] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.214] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.214] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.214] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.214] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.214] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.214] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.214] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.215] |  :  .  |  :  .  assign_globals() ...
[10:51:39.219] |  :  .  |  readImmediateCondition() ...
[10:51:39.219] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.219] |  :  .  |   - Number of RDS files: 0
[10:51:39.219] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.220] |  :  .  checking value #2 ... done
[10:51:39.215] |  :  .  |  :  .  List of 11
[10:51:39.215] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.215] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.215] |  :  .  |  :  .   $ times                    : int 0
[10:51:39.215] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.215] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.215] |  :  .  |  :  .   $ dim                      : NULL
[10:51:39.215] |  :  .  |  :  .   $ valid_types              : chr [1:2] "logical" "integer"
[10:51:39.215] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.215] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.215] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.215] |  :  .  |  :  .    ..$ : int 6
[10:51:39.215] |  :  .  |  :  .    ..$ : int 7
[10:51:39.215] |  :  .  |  :  .    ..$ : int 8
[10:51:39.215] |  :  .  |  :  .    ..$ : int 9
[10:51:39.215] |  :  .  |  :  .    ..$ : int 10
[10:51:39.215] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.215] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.215] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.215] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.215] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.215] |  :  .  |  :  .   - attr(*, "total_size")= num 23453
[10:51:39.215] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.215] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.228] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.228] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:39.228] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.228] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.228] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.229] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.229] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.229] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.229] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.229] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.229] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.229] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.229] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.230] |  :  .  Number of remaining objects: 2
[10:51:39.230] |  :  .  checking value #1 ...
[10:51:39.230] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.231] |  :  .  |  readImmediateCondition() ...
[10:51:39.231] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.231] |  :  .  |   - Number of RDS files: 0
[10:51:39.232] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.232] |  :  .  |  MulticoreFuture #1
[10:51:39.232] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.232] |  :  .  |  :  nx: 2
[10:51:39.232] |  :  .  |  :  relay: TRUE
[10:51:39.233] |  :  .  |  :  stdout: TRUE
[10:51:39.233] |  :  .  |  :  signal: TRUE
[10:51:39.233] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.233] |  :  .  |  :  resignal: FALSE
[10:51:39.233] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.233] |  :  .  |  :  force: TRUE
[10:51:39.233] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.233] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:39.233] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.233] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:39.234] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.234] |  :  .  |  :  until=1
[10:51:39.234] |  :  .  |  :  relaying element #1
[10:51:39.234] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.235] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.235] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.236] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.236] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.236] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.236] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.237] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.237] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.237] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.237] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.238] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.238] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.238] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.238] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.239] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.234] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.234] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.234] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.234] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.234] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.234] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.234] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.234] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.234] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.234[10:51:39.239] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.234] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.234] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.234] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.234] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.239] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.239] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.239] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.239] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.240] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.240] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.240] |  :  .  |  :  value: <list>
[10:51:39.240] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.240] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.241] |  :  .  |  :  nx: 2
[10:51:39.241] |  :  .  |  :  relay: TRUE
[10:51:39.239] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.239] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.239] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.239] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.239] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.239] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.239] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.239] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.241] |  :  .  |  :  stdout: TRUE
[10:51:39.244] |  :  .  |  :  signal: TRUE
[10:51:39.244] |  :  .  |  :  resignal: FALSE
[10:51:39.245] |  :  .  |  :  force: TRUE
[10:51:39.245] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.245] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.245] |  :  .  |  :  until=2
[10:51:39.246] |  :  .  |  :  relaying element #2
[10:51:39.246] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.246] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.247] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:39.247] |  :  .  |  length: 1 (resolved future 1)
[10:51:39.247] |  :  .  checking value #1 ... done
[10:51:39.247] |  :  .  checking value #2 ...
[10:51:39.248] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.243] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.250] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.250] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.251] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.252] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.252] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.252] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.252] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.252] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.252] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.252] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.252] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.252] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.252] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.252] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.252] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.252] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.252] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.252] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.252] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.252] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.252] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.252] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.252] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.252] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.256] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.256] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.256] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.256] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.257] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.257] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.257] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.257] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.257] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.257] |  :  .  |  readImmediateCondition() ...
[10:51:39.258] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.258] |  :  .  |   - Number of RDS files: 0
[10:51:39.258] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.258] |  :  .  |  MulticoreFuture #2
[10:51:39.258] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.259] |  :  .  |  :  nx: 2
[10:51:39.259] |  :  .  |  :  relay: TRUE
[10:51:39.259] |  :  .  |  :  stdout: TRUE
[10:51:39.259] |  :  .  |  :  signal: TRUE
[10:51:39.259] |  :  .  |  :  resignal: FALSE
[10:51:39.259] |  :  .  |  :  force: TRUE
[10:51:39.259] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.259] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.260] |  :  .  |  :  until=2
[10:51:39.260] |  :  .  |  :  relaying element #2
[10:51:39.260] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.260] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.261] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.261] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.261] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.261] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.262] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.262] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.262] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.262] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.263] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.263] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.263] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.263] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.264] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.264] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.264] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.264] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.264] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.264] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.265] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.265] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.265] |  :  .  |  :  value: <list>
[10:51:39.265] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.265] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.265] |  :  .  |  :  nx: 2
[10:51:39.266] |  :  .  |  :  relay: TRUE
[10:51:39.266] |  :  .  |  :  stdout: TRUE
[10:51:39.266] |  :  .  |  :  signal: TRUE
[10:51:39.266] |  :  .  |  :  resignal: FALSE
[10:51:39.266] |  :  .  |  :  force: TRUE
[10:51:39.266] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.266] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.266] |  :  .  |  :  until=2
[10:51:39.266] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.267] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.267] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.267] |  :  .  |  length: 0 (resolved future 2)
[10:51:39.267] |  :  .  checking value #2 ... done
[10:51:39.267] |  :  .  Relaying remaining futures ...
[10:51:39.267] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:39.267] |  :  .  |  :  nx: 2
[10:51:39.267] |  :  .  |  :  relay: TRUE
[10:51:39.267] |  :  .  |  :  stdout: TRUE
[10:51:39.268] |  :  .  |  :  signal: TRUE
[10:51:39.268] |  :  .  |  :  resignal: FALSE
[10:51:39.268] |  :  .  |  :  force: TRUE
[10:51:39.268] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.268] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:39.268] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.268] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.268] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:39.268] |  :  .  Relaying remaining futures ... done
[10:51:39.268] |  :  value() on list ... done
[10:51:39.269]  - Number of value chunks collected: 2
[10:51:39.269] Resolving 2 futures (chunks) ... DONE
[10:51:39.269] Reducing values from 2 chunks ...
[10:51:39.269]  - Number of values collected after concatenation: 10
[10:51:39.269]  - Number of values expected: 10
[10:51:39.269] Reducing values from 2 chunks ... DONE
[10:51:39.269] future_lapply() ... DONE
 int[0 , 1:10] 
 num [1:10] 1 1.41 1.73 2 2.24 ...
[10:51:39.270] future_lapply() ...
[10:51:39.272] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.273] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.273] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.273] Number of chunks: 2
[10:51:39.273] getGlobalsAndPackagesXApply() ...
[10:51:39.273]  - future.globals: TRUE
[10:51:39.273] |  :  getGlobalsAndPackages() ...
[10:51:39.274] |  :  .  Searching for globals ...
[10:51:39.278] |  :  .  |  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:39.279] |  :  .  Searching for globals ... DONE
[10:51:39.279] |  :  .  Resolving globals: FALSE
[10:51:39.279] |  :  .  Search for packages associated with the globals ...
[10:51:39.279] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:39.280] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:39.280] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.280] |  :  .  The total size of the 7 globals is 12.08 KiB (12367 bytes)
[10:51:39.281] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.08 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.07 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:39.281] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.281] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.281] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:39.281] |  :  .  packages: [1] ‘future.apply’
[10:51:39.281] |  :  getGlobalsAndPackages() ... done
[10:51:39.281]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:39.281]  - needed namespaces: [n=1] ‘future.apply’
[10:51:39.282] Finding globals ... DONE
[10:51:39.282]  - use_args: TRUE
[10:51:39.282]  - Getting '...' globals ...
[10:51:39.282] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:39.282] |  :  .  recursive: 0
[10:51:39.282] |  :  .  length: 1
[10:51:39.282] |  :  .  elements: ‘...’
[10:51:39.283] |  :  .  'obj' is DotDotDotList
[10:51:39.283] |  :  .  resolve(obj, ...) ...
[10:51:39.283] |  :  .  resolve(obj, ...) ... done
[10:51:39.283] |  :  .  length: 0 (resolved future 1)
[10:51:39.283] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:39.283]    - '...' content: [n=0] 
[10:51:39.283] List of 1
[10:51:39.283]  $ ...: list()
[10:51:39.283]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.283]  - attr(*, "where")=List of 1
[10:51:39.283]   ..$ ...:<environment: 0x55d4643f60e0> 
[10:51:39.283]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.283]  - attr(*, "resolved")= logi TRUE
[10:51:39.283]  - attr(*, "total_size")= num NA
[10:51:39.286]  - Getting '...' globals ... DONE
[10:51:39.286] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:39.286] List of 8
[10:51:39.286]  $ ...future.FUN:function (x, ...)  
[10:51:39.286]  $ x_FUN        :function (x)  
[10:51:39.286]  $ times        : int 1
[10:51:39.286]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.286]  $ stop_if_not  :function (...)  
[10:51:39.286]  $ dim          : NULL
[10:51:39.286]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:39.286]  $ ...          : list()
[10:51:39.286]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.286]  - attr(*, "where")=List of 8
[10:51:39.286]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:39.286]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:39.286]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:39.286]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:39.286]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:39.286]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:39.286]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:39.286]   ..$ ...          :<environment: 0x55d4643f60e0> 
[10:51:39.286]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.286]  - attr(*, "resolved")= logi FALSE
[10:51:39.286]  - attr(*, "total_size")= num 22322
[10:51:39.292] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:39.292] getGlobalsAndPackagesXApply() ... DONE
[10:51:39.292] Number of futures (= number of chunks): 2
[10:51:39.292] Launching 2 futures (chunks) ...
[10:51:39.292] Chunk #1 of 2 ...
[10:51:39.292]  - Finding globals in 'X' for chunk #1 ...
[10:51:39.292] |  :  getGlobalsAndPackages() ...
[10:51:39.292] |  :  .  Searching for globals ...
[10:51:39.293] |  :  .  |  globals found: [0] 
[10:51:39.293] |  :  .  Searching for globals ... DONE
[10:51:39.293] |  :  .  globals: [0] <none>
[10:51:39.293] |  :  .  packages: [0] <none>
[10:51:39.293] |  :  getGlobalsAndPackages() ... done
[10:51:39.293]    + additional globals found: [n=0] 
[10:51:39.293]    + additional namespaces needed: [n=0] 
[10:51:39.293]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:39.293]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.293]  - seeds: <none>
[10:51:39.294]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.294] |  :  getGlobalsAndPackages() ...
[10:51:39.294] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.294] |  :  .  Resolving globals: FALSE
[10:51:39.294] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.294] |  :  .  |  {
[10:51:39.294] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.294] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.294] |  :  .  |      "# as a global variable                                         "
[10:51:39.294] |  :  .  |      do.call(function(...) {
[10:51:39.294] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.294] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.294] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.294] |  :  .  |          "# anonymous function.                                          "
[10:51:39.294] |  :  .  |          "#                                                              "
[10:51:39.294] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.294] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.294] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.294] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.294] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.294] |  :  .  |          repeat {
[10:51:39.294] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.294] |  :  .  |                  emptyenv())) 
[10:51:39.294] |  :  .  |                  break
[10:51:39.294] |  :  .  |              penv <- env
[10:51:39.294] |  :  .  |              env <- parent.env(env)
[10:51:39.294] |  :  .  |          }
[10:51:39.294] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.294] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.294] |  :  .  |          }
[10:51:39.294] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.294] |  :  .  |              !isNamespace(penv)) {
[10:51:39.294] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.294] |  :  .  |          }
[10:51:39.294] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.294] |  :  .  |          {
[10:51:39.294] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.294] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.294] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.294] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.294] |  :  .  |              }
[10:51:39.294] |  :  .  |              {
[10:51:39.294] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.294] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.294] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.294] |  :  .  |                  })
[10:51:39.294] |  :  .  |              }
[10:51:39.294] |  :  .  |          }
[10:51:39.294] |  :  .  |      }, args = future.call.arguments)
[10:51:39.294] |  :  .  |  }
[10:51:39.295] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.296] |  :  .  Search for packages associated with the globals ...
[10:51:39.296] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:39.297] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:39.297] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.297] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.297] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.297] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.297] |  :  .  packages: [1] ‘future.apply’
[10:51:39.297] |  :  getGlobalsAndPackages() ... done
[10:51:39.298] |  :  run() for Future (‘Future’) ...
[10:51:39.298] |  :  .  state: ‘created’
[10:51:39.298] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.298] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.298] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.298] |  :  .  |  Launching futures ...
[10:51:39.298] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.298] |  :  .  |  :  .  getFutureData() ...
[10:51:39.299] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.299] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.299] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.299] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.299] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.299] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.299] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.299] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.299] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.299] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.300] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.300] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.300] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.300] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.302] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.303] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.303] |  :  .  |  :  .  attachPackages() ...
[10:51:39.304] |  :  .  |  Launching futures ... done
[10:51:39.304] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.304] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.304] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.304] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.305] |  :  .  |  :  .  attachPackages() ...
[10:51:39.305] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.305] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.305] Created future:
[10:51:39.306] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.307] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.307] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.308] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.308] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.309] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.309] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.309] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.309] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.309] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.309] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.309] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.309] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.309] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.309] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.309] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.314] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.314] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.314] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.314] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.314] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.314] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.314] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.314] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.314] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.314] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.314] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.314] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.314] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.314] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.314] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.318] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.318] |  :  readImmediateCondition() ...
[10:51:39.318] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.319] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.319] |  :   - Number of RDS files: 0
[10:51:39.319] |  :  readImmediateCondition() ... DONE
[10:51:39.306] MulticoreFuture:
[10:51:39.306] Label: ‘future_vapply-1’
[10:51:39.306] Expression:
[10:51:39.306] {
[10:51:39.306]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.306]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.306]     "# as a global variable                                         "
[10:51:39.306]     do.call(function(...) {
[10:51:39.306]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.306]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.306]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.306]         "# anonymous function.                                          "
[10:51:39.306]         "#                                                              "
[10:51:39.306]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.306]         "# function environment of FUN() to the calling environment.    "
[10:51:39.306]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.306]         "# global environment, which is where globals are written.      "
[10:51:39.306]         penv <- env <- environment(...future.FUN)
[10:51:39.306]         repeat {
[10:51:39.306]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.306]                 emptyenv())) 
[10:51:39.306]                 break
[10:51:39.306]             penv <- env
[10:51:39.306]             env <- parent.env(env)
[10:51:39.306]         }
[10:51:39.306]         if (identical(penv, globalenv())) {
[10:51:39.306]             environment(...future.FUN) <- environment()
[10:51:39.306]         }
[10:51:39.306]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.306]             !isNamespace(penv)) {
[10:51:39.306]             parent.env(penv) <- environment()
[10:51:39.306]         }
[10:51:39.306]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.306]         {
[10:51:39.306]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.306]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.306]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.306]                 on.exit(options(oopts), add = TRUE)
[10:51:39.306]             }
[10:51:39.306]             {
[10:51:39.306]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.306]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.306]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.306]                 })
[10:51:39.306]             }
[10:51:39.306]         }
[10:51:39.306]     }, args = future.call.arguments)
[10:51:39.306] }
[10:51:39.306] Lazy evaluation: FALSE
[10:51:39.306] Asynchronous evaluation: TRUE
[10:51:39.306] Local evaluation: TRUE
[10:51:39.306] Environment: R_GlobalEnv
[10:51:39.306] Capture standard output: TRUE
[10:51:39.306] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.306] Immediate condition classes: ‘immediateCondition’
[10:51:39.306] Globals: 11 objects totaling 12.31 KiB (function ‘...future.FUN’ of 4.06 KiB, function ‘x_FUN’ of 35 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.306] Packages: 1 packages (‘future.apply’)
[10:51:39.306] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.306] Resolved: FALSE
[10:51:39.306] Value: <not collected>
[10:51:39.306] Conditions captured: <none>
[10:51:39.306] Early signaling: FALSE
[10:51:39.306] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.306] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.320] Chunk #1 of 2 ... DONE
[10:51:39.320] Chunk #2 of 2 ...
[10:51:39.320]  - Finding globals in 'X' for chunk #2 ...
[10:51:39.320] |  :  getGlobalsAndPackages() ...
[10:51:39.320] |  :  .  Searching for globals ...
[10:51:39.321] |  :  .  |  globals found: [0] 
[10:51:39.321] |  :  .  Searching for globals ... DONE
[10:51:39.321] |  :  .  globals: [0] <none>
[10:51:39.321] |  :  .  packages: [0] <none>
[10:51:39.321] |  :  getGlobalsAndPackages() ... done
[10:51:39.322]    + additional globals found: [n=0] 
[10:51:39.322]    + additional namespaces needed: [n=0] 
[10:51:39.322]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:39.322]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.322]  - seeds: <none>
[10:51:39.322]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.322] |  :  getGlobalsAndPackages() ...
[10:51:39.323] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.323] |  :  .  Resolving globals: FALSE
[10:51:39.323] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.323] |  :  .  |  {
[10:51:39.323] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.323] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.323] |  :  .  |      "# as a global variable                                         "
[10:51:39.323] |  :  .  |      do.call(function(...) {
[10:51:39.323] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.323] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.323] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.323] |  :  .  |          "# anonymous function.                                          "
[10:51:39.323] |  :  .  |          "#                                                              "
[10:51:39.323] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.323] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.323] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.323] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.323] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.323] |  :  .  |          repeat {
[10:51:39.323] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.323] |  :  .  |                  emptyenv())) 
[10:51:39.323] |  :  .  |                  break
[10:51:39.323] |  :  .  |              penv <- env
[10:51:39.323] |  :  .  |              env <- parent.env(env)
[10:51:39.323] |  :  .  |          }
[10:51:39.323] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.323] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.323] |  :  .  |          }
[10:51:39.323] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.323] |  :  .  |              !isNamespace(penv)) {
[10:51:39.323] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.323] |  :  .  |          }
[10:51:39.323] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.323] |  :  .  |          {
[10:51:39.323] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.323] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.323] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.323] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.323] |  :  .  |              }
[10:51:39.323] |  :  .  |              {
[10:51:39.323] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.323] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.323] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.323] |  :  .  |                  })
[10:51:39.323] |  :  .  |              }
[10:51:39.323] |  :  .  |          }
[10:51:39.323] |  :  .  |      }, args = future.call.arguments)
[10:51:39.323] |  :  .  |  }
[10:51:39.324] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.324] |  :  .  Search for packages associated with the globals ...
[10:51:39.324] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:39.319] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.319] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.319] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.319] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.319] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.319] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.319] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.325] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:39.325] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.325] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.325] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.326] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.326] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.326] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.326] |  :  .  packages: [1] ‘future.apply’
[10:51:39.326] |  :  getGlobalsAndPackages() ... done
[10:51:39.326] |  :  run() for Future (‘Future’) ...
[10:51:39.326] |  :  .  state: ‘created’
[10:51:39.327] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.327] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.327] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.327] |  :  .  |  Launching futures ...
[10:51:39.327] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.327] |  :  .  |  :  .  getFutureData() ...
[10:51:39.327] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.328] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.328] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.328] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.326] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.328] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.328] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.328] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.328] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.328] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.328] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.329] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.329] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.329] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.329] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.328] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.328] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.328] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.328] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.328] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.329] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.330] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.332] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.332] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.333] |  :  .  |  Launching futures ... done
[10:51:39.333] |  :  .  |  :  .  attachPackages() ...
[10:51:39.329] |  :  .  |  :  .  |  :  List of 1
[10:51:39.329] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.329] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.329] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.329] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.329] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.329] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.329] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.333] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.333] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.333] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.333] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.333] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.333] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.334] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.334] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.334] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.334] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.334] |  :  .  |  :  .  attachPackages() ...
[10:51:39.334] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.334] Created future:
[10:51:39.334] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.334] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.334] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.334] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.334] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.335] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.335] |  :  .  |  :  .  assign_globals() ...
[10:51:39.336] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.336] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.336] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.337] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.337] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.338] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.338] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.338] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.338] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.338] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.338] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.338] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.338] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.338] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.338] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.342] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.335] |  :  .  |  :  .  List of 11
[10:51:39.335] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.335] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.335] |  :  .  |  :  .   $ times                    : int 1
[10:51:39.335] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.335] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.335] |  :  .  |  :  .   $ dim                      : NULL
[10:51:39.335] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:39.335] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.335] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.335] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.335] |  :  .  |  :  .    ..$ : int 1
[10:51:39.335] |  :  .  |  :  .    ..$ : int 2
[10:51:39.335] |  :  .  |  :  .    ..$ : int 3
[10:51:39.335] |  :  .  |  :  .    ..$ : int 4
[10:51:39.335] |  :  .  |  :  .    ..$ : int 5
[10:51:39.335] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.335] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.335] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.335] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.335] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.335] |  :  .  |  :  .   - attr(*, "total_size")= num 22322
[10:51:39.335] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.335] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.345] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.345] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.345] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.345] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.345] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.345] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.345] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.345] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.346] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.346] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.346] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.346] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.347] |  :  readImmediateCondition() ...
[10:51:39.347] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.348] |  :   - Number of RDS files: 0
[10:51:39.348] |  :  readImmediateCondition() ... DONE
[10:51:39.334] MulticoreFuture:
[10:51:39.334] Label: ‘future_vapply-2’
[10:51:39.334] Expression:
[10:51:39.334] {
[10:51:39.334]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.334]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.334]     "# as a global variable                                         "
[10:51:39.334]     do.call(function(...) {
[10:51:39.334]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.334]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.334]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.334]         "# anonymous function.                                          "
[10:51:39.334]         "#                                                              "
[10:51:39.334]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.334]         "# function environment of FUN() to the calling environment.    "
[10:51:39.334]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.334]         "# global environment, which is where globals are written.      "
[10:51:39.334]         penv <- env <- environment(...future.FUN)
[10:51:39.334]         repeat {
[10:51:39.334]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.334]                 emptyenv())) 
[10:51:39.334]                 break
[10:51:39.334]             penv <- env
[10:51:39.334]             env <- parent.env(env)
[10:51:39.334]         }
[10:51:39.334]         if (identical(penv, globalenv())) {
[10:51:39.334]             environment(...future.FUN) <- environment()
[10:51:39.334]         }
[10:51:39.334]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.334]             !isNamespace(penv)) {
[10:51:39.334]             parent.env(penv) <- environment()
[10:51:39.334]         }
[10:51:39.334]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.334]         {
[10:51:39.334]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.334]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.334]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.334]                 on.exit(options(oopts), add = TRUE)
[10:51:39.334]             }
[10:51:39.334]             {
[10:51:39.334]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.334]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.334]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.334]                 })
[10:51:39.334]             }
[10:51:39.334]         }
[10:51:39.334]     }, args = future.call.arguments)
[10:51:39.334] }
[10:51:39.334] Lazy evaluation: FALSE
[10:51:39.334] Asynchronous evaluation: TRUE
[10:51:39.334] Local evaluation: TRUE
[10:51:39.334] Environment: R_GlobalEnv
[10:51:39.334] Capture standard output: TRUE
[10:51:39.334] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.334] Immediate condition classes: ‘immediateCondition’
[10:51:39.334] Globals: 11 objects totaling 12.31 KiB (function ‘...future.FUN’ of 4.06 KiB, function ‘x_FUN’ of 35 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.334] Packages: 1 packages (‘future.apply’)
[10:51:39.334] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.334] Resolved: FALSE
[10:51:39.334] Value: <not collected>
[10:51:39.334] Conditions captured: <none>
[10:51:39.334] Early signaling: FALSE
[10:51:39.334] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.334] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.349] Chunk #2 of 2 ... DONE
[10:51:39.349] Launching 2 futures (chunks) ... DONE
[10:51:39.349] Resolving 2 futures (chunks) ...
[10:51:39.350] |  :  value() on list ...
[10:51:39.350] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.350] |  :  .  recursive: 0
[10:51:39.350] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.350] |  :  .  length: 2
[10:51:39.350] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.350] |  :  .  
[10:51:39.350] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.351] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.351] |  :  .  Number of remaining objects: 2
[10:51:39.351] |  :  .  checking value #1 ...
[10:51:39.351] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.351] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.351] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.351] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.351] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.351] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.351] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.351] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.351] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.351] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.351] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.351] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.351] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.351] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.351] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.354] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.342] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.342] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.342] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.342] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.342] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.342] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.342] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.342] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.342] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.342] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.342] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.342] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.342] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.342] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.355] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.355] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.355] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.355] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.355] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.357] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.361] |  :  .  |  readImmediateCondition() ...
[10:51:39.362] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.362] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.362] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.362] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.362] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.362] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.362] |  :  .  |   - Number of RDS files: 0
[10:51:39.362] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.362] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.362] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.362] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.362] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.362] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.362] |  :  .  checking value #1 ... done
[10:51:39.363] |  :  .  checking value #2 ...
[10:51:39.363] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.355] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.355] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.355] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.355] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.355] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.355] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.355] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.364] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.364] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.365] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.365] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.365] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.362] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.362] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.362] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.362] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.362] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.362] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.362] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.362] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.362] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.362] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.362] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.362] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.362] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.362] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.365] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.365] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.365] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.365] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.365] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.365] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.366] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.366] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.366] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.366] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.368] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.368] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.366] |  :  .  |  :  .  |  :  List of 1
[10:51:39.366] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.366] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.366] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.366] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.366] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.366] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.366] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.368] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.368] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, c[10:51:39.368] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
leanup = FALSE) ...
[10:51:39.368] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.369] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.369] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.369] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.369] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.369] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.369] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.370] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.370] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.370] |  :  .  |  :  .  assign_globals() ...
[10:51:39.373] |  :  .  |  readImmediateCondition() ...
[10:51:39.373] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.374] |  :  .  |   - Number of RDS files: 0
[10:51:39.374] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.374] |  :  .  checking value #2 ... done
[10:51:39.370] |  :  .  |  :  .  List of 11
[10:51:39.370] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.370] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.370] |  :  .  |  :  .   $ times                    : int 1
[10:51:39.370] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.370] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.370] |  :  .  |  :  .   $ dim                      : NULL
[10:51:39.370] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:39.370] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.370] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.370] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.370] |  :  .  |  :  .    ..$ : int 6
[10:51:39.370] |  :  .  |  :  .    ..$ : int 7
[10:51:39.370] |  :  .  |  :  .    ..$ : int 8
[10:51:39.370] |  :  .  |  :  .    ..$ : int 9
[10:51:39.370] |  :  .  |  :  .    ..$ : int 10
[10:51:39.370] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.370] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.370] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.370] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.370] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.370] |  :  .  |  :  .   - attr(*, "total_size")= num 22322
[10:51:39.370] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.370] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.382] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.383] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.383] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.383] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.383] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.383] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.383] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.383] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.383] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.383] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.384] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.384] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.384] |  :  .  Number of remaining objects: 2
[10:51:39.385] |  :  .  checking value #1 ...
[10:51:39.385] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.385] |  :  .  |  readImmediateCondition() ...
[10:51:39.385] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.386] |  :  .  |   - Number of RDS files: 0
[10:51:39.386] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.386] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.387] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.387] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.387] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.387] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.386] |  :  .  |  MulticoreFuture #1
[10:51:39.389] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.389] |  :  .  |  :  nx: 2
[10:51:39.390] |  :  .  |  :  relay: TRUE
[10:51:39.390] |  :  .  |  :  stdout: TRUE
[10:51:39.390] |  :  .  |  :  signal: TRUE
[10:51:39.390] |  :  .  |  :  resignal: FALSE
[10:51:39.391] |  :  .  |  :  force: TRUE
[10:51:39.391] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:39.391] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:39.392] |  :  .  |  :  until=1
[10:51:39.387] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.387] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.387] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.387] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.387] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.387] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.387] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.387] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.387] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.387[10:51:39.392] |  :  .  |  :  relaying element #1
] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.387] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.387] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.387] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.387] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.392] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.392] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.393] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.393] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.394] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.394] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.394] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.394] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.395] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.395] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.395] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.395] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.395] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.392] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.392] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.392] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= langua[10:51:39.396] |  :  .  |  :  result() for MulticoreFuture ...
ge plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.392] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.396] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.396] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.396] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.396] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:39.396] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.397] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.397] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.397] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.397] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.397] |  :  .  |  :  value: <list>
[10:51:39.397] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.398] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.398] |  :  .  |  :  nx: 2
[10:51:39.398] |  :  .  |  :  relay: TRUE
[10:51:39.398] |  :  .  |  :  stdout: TRUE
[10:51:39.398] |  :  .  |  :  signal: TRUE
[10:51:39.398] |  :  .  |  :  resignal: FALSE
[10:51:39.398] |  :  .  |  :  force: TRUE
[10:51:39.399] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.399] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.399] |  :  .  |  :  until=2
[10:51:39.399] |  :  .  |  :  relaying element #2
[10:51:39.399] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.399] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.400] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:39.400] |  :  .  |  length: 1 (resolved future 1)
[10:51:39.400] |  :  .  checking value #1 ... done
[10:51:39.400] |  :  .  checking value #2 ...
[10:51:39.400] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.410] |  :  .  |  readImmediateCondition() ...
[10:51:39.411] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.411] |  :  .  |   - Number of RDS files: 0
[10:51:39.411] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.411] |  :  .  checking value #2 ... done
[10:51:39.421] |  :  .  Number of remaining objects: 1
[10:51:39.422] |  :  .  checking value #2 ...
[10:51:39.422] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.432] |  :  .  |  readImmediateCondition() ...
[10:51:39.432] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.432] |  :  .  |   - Number of RDS files: 0
[10:51:39.433] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.433] |  :  .  checking value #2 ... done
[10:51:39.443] |  :  .  Number of remaining objects: 1
[10:51:39.443] |  :  .  checking value #2 ...
[10:51:39.443] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.396] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.447] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.448] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.448] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.448] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.448] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.448] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.448] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.448] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.448] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.448] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.448] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.448] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.448] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.448] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.448] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.448] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.448] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.448] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.448] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.448] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.448] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.448] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.448] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.448] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.451] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.451] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.451] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.452] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.452] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.452] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.452] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.452] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.452] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.452] |  :  .  |  readImmediateCondition() ...
[10:51:39.453] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.453] |  :  .  |   - Number of RDS files: 0
[10:51:39.453] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.453] |  :  .  |  MulticoreFuture #2
[10:51:39.453] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.453] |  :  .  |  :  nx: 2
[10:51:39.453] |  :  .  |  :  relay: TRUE
[10:51:39.453] |  :  .  |  :  stdout: TRUE
[10:51:39.454] |  :  .  |  :  signal: TRUE
[10:51:39.454] |  :  .  |  :  resignal: FALSE
[10:51:39.454] |  :  .  |  :  force: TRUE
[10:51:39.454] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.454] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.454] |  :  .  |  :  until=2
[10:51:39.454] |  :  .  |  :  relaying element #2
[10:51:39.454] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.455] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.455] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.455] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.455] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.456] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.456] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.456] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.456] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.456] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.456] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.456] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.456] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.457] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.457] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.457] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.457] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.457] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.457] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.457] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.457] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.457] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.458] |  :  .  |  :  value: <list>
[10:51:39.458] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.458] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.458] |  :  .  |  :  nx: 2
[10:51:39.458] |  :  .  |  :  relay: TRUE
[10:51:39.458] |  :  .  |  :  stdout: TRUE
[10:51:39.458] |  :  .  |  :  signal: TRUE
[10:51:39.458] |  :  .  |  :  resignal: FALSE
[10:51:39.458] |  :  .  |  :  force: TRUE
[10:51:39.458] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.459] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.459] |  :  .  |  :  until=2
[10:51:39.459] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.459] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.459] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.459] |  :  .  |  length: 0 (resolved future 2)
[10:51:39.459] |  :  .  checking value #2 ... done
[10:51:39.459] |  :  .  Relaying remaining futures ...
[10:51:39.459] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:39.460] |  :  .  |  :  nx: 2
[10:51:39.460] |  :  .  |  :  relay: TRUE
[10:51:39.460] |  :  .  |  :  stdout: TRUE
[10:51:39.460] |  :  .  |  :  signal: TRUE
[10:51:39.460] |  :  .  |  :  resignal: FALSE
[10:51:39.460] |  :  .  |  :  force: TRUE
[10:51:39.460] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.460] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:39.460] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.460] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.461] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:39.461] |  :  .  Relaying remaining futures ... done
[10:51:39.461] |  :  value() on list ... done
[10:51:39.461]  - Number of value chunks collected: 2
[10:51:39.461] Resolving 2 futures (chunks) ... DONE
[10:51:39.461] Reducing values from 2 chunks ...
[10:51:39.461]  - Number of values collected after concatenation: 10
[10:51:39.461]  - Number of values expected: 10
[10:51:39.461] Reducing values from 2 chunks ... DONE
[10:51:39.461] future_lapply() ... DONE
 num [1:10] 1 1.41 1.73 2 2.24 ...
 num [1:2, 1:10] 1 1 2 4 3 9 4 16 5 25 ...
[10:51:39.462] future_lapply() ...
[10:51:39.467] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.467] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.467] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.468] Number of chunks: 2
[10:51:39.468] getGlobalsAndPackagesXApply() ...
[10:51:39.468]  - future.globals: TRUE
[10:51:39.468] |  :  getGlobalsAndPackages() ...
[10:51:39.468] |  :  .  Searching for globals ...
[10:51:39.473] |  :  .  |  globals found: [18] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘c’, ‘^’
[10:51:39.473] |  :  .  Searching for globals ... DONE
[10:51:39.473] |  :  .  Resolving globals: FALSE
[10:51:39.474] |  :  .  Search for packages associated with the globals ...
[10:51:39.474] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:39.474] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:39.475] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.475] |  :  .  The total size of the 7 globals is 13.34 KiB (13657 bytes)
[10:51:39.475] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.34 KiB The three largest globals are ‘FUN’ (4.89 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:39.475] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.476] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.476] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:39.476] |  :  .  packages: [1] ‘future.apply’
[10:51:39.476] |  :  getGlobalsAndPackages() ... done
[10:51:39.476]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:39.476]  - needed namespaces: [n=1] ‘future.apply’
[10:51:39.476] Finding globals ... DONE
[10:51:39.476]  - use_args: TRUE
[10:51:39.476]  - Getting '...' globals ...
[10:51:39.477] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:39.477] |  :  .  recursive: 0
[10:51:39.477] |  :  .  length: 1
[10:51:39.477] |  :  .  elements: ‘...’
[10:51:39.477] |  :  .  'obj' is DotDotDotList
[10:51:39.477] |  :  .  resolve(obj, ...) ...
[10:51:39.477] |  :  .  resolve(obj, ...) ... done
[10:51:39.478] |  :  .  length: 0 (resolved future 1)
[10:51:39.478] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:39.478]    - '...' content: [n=0] 
[10:51:39.478] List of 1
[10:51:39.478]  $ ...: list()
[10:51:39.478]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.478]  - attr(*, "where")=List of 1
[10:51:39.478]   ..$ ...:<environment: 0x55d464ace8d0> 
[10:51:39.478]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.478]  - attr(*, "resolved")= logi TRUE
[10:51:39.478]  - attr(*, "total_size")= num NA
[10:51:39.481]  - Getting '...' globals ... DONE
[10:51:39.481] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:39.481] List of 8
[10:51:39.481]  $ ...future.FUN:function (x, ...)  
[10:51:39.481]  $ x_FUN        :function (x)  
[10:51:39.481]  $ times        : int 2
[10:51:39.481]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.481]  $ stop_if_not  :function (...)  
[10:51:39.481]  $ dim          : NULL
[10:51:39.481]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:39.481]  $ ...          : list()
[10:51:39.481]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.481]  - attr(*, "where")=List of 8
[10:51:39.481]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:39.481]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:39.481]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:39.481]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:39.481]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:39.481]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:39.481]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:39.481]   ..$ ...          :<environment: 0x55d464ace8d0> 
[10:51:39.481]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.481]  - attr(*, "resolved")= logi FALSE
[10:51:39.481]  - attr(*, "total_size")= num 24454
[10:51:39.488] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:39.488] getGlobalsAndPackagesXApply() ... DONE
[10:51:39.489] Number of futures (= number of chunks): 2
[10:51:39.489] Launching 2 futures (chunks) ...
[10:51:39.489] Chunk #1 of 2 ...
[10:51:39.489]  - Finding globals in 'X' for chunk #1 ...
[10:51:39.489] |  :  getGlobalsAndPackages() ...
[10:51:39.489] |  :  .  Searching for globals ...
[10:51:39.490] |  :  .  |  globals found: [0] 
[10:51:39.490] |  :  .  Searching for globals ... DONE
[10:51:39.490] |  :  .  globals: [0] <none>
[10:51:39.490] |  :  .  packages: [0] <none>
[10:51:39.490] |  :  getGlobalsAndPackages() ... done
[10:51:39.490]    + additional globals found: [n=0] 
[10:51:39.490]    + additional namespaces needed: [n=0] 
[10:51:39.490]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:39.490]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.490]  - seeds: <none>
[10:51:39.491]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.491] |  :  getGlobalsAndPackages() ...
[10:51:39.491] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.491] |  :  .  Resolving globals: FALSE
[10:51:39.491] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.491] |  :  .  |  {
[10:51:39.491] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.491] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.491] |  :  .  |      "# as a global variable                                         "
[10:51:39.491] |  :  .  |      do.call(function(...) {
[10:51:39.491] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.491] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.491] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.491] |  :  .  |          "# anonymous function.                                          "
[10:51:39.491] |  :  .  |          "#                                                              "
[10:51:39.491] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.491] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.491] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.491] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.491] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.491] |  :  .  |          repeat {
[10:51:39.491] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.491] |  :  .  |                  emptyenv())) 
[10:51:39.491] |  :  .  |                  break
[10:51:39.491] |  :  .  |              penv <- env
[10:51:39.491] |  :  .  |              env <- parent.env(env)
[10:51:39.491] |  :  .  |          }
[10:51:39.491] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.491] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.491] |  :  .  |          }
[10:51:39.491] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.491] |  :  .  |              !isNamespace(penv)) {
[10:51:39.491] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.491] |  :  .  |          }
[10:51:39.491] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.491] |  :  .  |          {
[10:51:39.491] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.491] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.491] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.491] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.491] |  :  .  |              }
[10:51:39.491] |  :  .  |              {
[10:51:39.491] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.491] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.491] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.491] |  :  .  |                  })
[10:51:39.491] |  :  .  |              }
[10:51:39.491] |  :  .  |          }
[10:51:39.491] |  :  .  |      }, args = future.call.arguments)
[10:51:39.491] |  :  .  |  }
[10:51:39.492] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.492] |  :  .  Search for packages associated with the globals ...
[10:51:39.492] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:39.492] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:39.492] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.493] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.493] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.493] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.493] |  :  .  packages: [1] ‘future.apply’
[10:51:39.493] |  :  getGlobalsAndPackages() ... done
[10:51:39.493] |  :  run() for Future (‘Future’) ...
[10:51:39.493] |  :  .  state: ‘created’
[10:51:39.494] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.494] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.494] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.494] |  :  .  |  Launching futures ...
[10:51:39.494] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.494] |  :  .  |  :  .  getFutureData() ...
[10:51:39.494] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.494] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.494] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.494] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.495] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.495] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.495] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.495] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.495] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.495] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.495] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.495] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.495] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.496] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.498] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.498] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.498] |  :  .  |  Launching futures ... done
[10:51:39.499] |  :  .  |  :  .  attachPackages() ...
[10:51:39.499] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.499] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.499] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.499] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.499] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.499] Created future:
[10:51:39.499] |  :  .  |  :  .  attachPackages() ...
[10:51:39.500] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.500] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.501] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.501] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.501] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.502] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.502] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.502] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.502] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.503] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.503] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.503] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.503] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.503] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.503] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.503] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.503] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.507] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.512] |  :  readImmediateCondition() ...
[10:51:39.512] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.512] |  :   - Number of RDS files: 0
[10:51:39.512] |  :  readImmediateCondition() ... DONE
[10:51:39.500] MulticoreFuture:
[10:51:39.500] Label: ‘future_vapply-1’
[10:51:39.500] Expression:
[10:51:39.500] {
[10:51:39.500]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.500]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.500]     "# as a global variable                                         "
[10:51:39.500]     do.call(function(...) {
[10:51:39.500]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.500]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.500]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.500]         "# anonymous function.                                          "
[10:51:39.500]         "#                                                              "
[10:51:39.500]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.500]         "# function environment of FUN() to the calling environment.    "
[10:51:39.500]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.500]         "# global environment, which is where globals are written.      "
[10:51:39.500]         penv <- env <- environment(...future.FUN)
[10:51:39.500]         repeat {
[10:51:39.500]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.500]                 emptyenv())) 
[10:51:39.500]                 break
[10:51:39.500]             penv <- env
[10:51:39.500]             env <- parent.env(env)
[10:51:39.500]         }
[10:51:39.500]         if (identical(penv, globalenv())) {
[10:51:39.500]             environment(...future.FUN) <- environment()
[10:51:39.500]         }
[10:51:39.500]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.500]             !isNamespace(penv)) {
[10:51:39.500]             parent.env(penv) <- environment()
[10:51:39.500]         }
[10:51:39.500]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.500]         {
[10:51:39.500]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.500]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.500]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.500]                 on.exit(options(oopts), add = TRUE)
[10:51:39.500]             }
[10:51:39.500]             {
[10:51:39.500]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.500]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.500]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.500]                 })
[10:51:39.500]             }
[10:51:39.500]         }
[10:51:39.500]     }, args = future.call.arguments)
[10:51:39.500] }
[10:51:39.500] Lazy evaluation: FALSE
[10:51:39.500] Asynchronous evaluation: TRUE
[10:51:39.500] Local evaluation: TRUE
[10:51:39.500] Environment: R_GlobalEnv
[10:51:39.500] Capture standard output: TRUE
[10:51:39.500] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.500] Immediate condition classes: ‘immediateCondition’
[10:51:39.500] Globals: 11 objects totaling 13.57 KiB (function ‘...future.FUN’ of 4.88 KiB, function ‘x_FUN’ of 483 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.500] Packages: 1 packages (‘future.apply’)
[10:51:39.500] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.500] Resolved: FALSE
[10:51:39.500] Value: <not collected>
[10:51:39.500] Conditions captured: <none>
[10:51:39.500] Early signaling: FALSE
[10:51:39.500] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.500] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.513] Chunk #1 of 2 ... DONE
[10:51:39.513] Chunk #2 of 2 ...
[10:51:39.513]  - Finding globals in 'X' for chunk #2 ...
[10:51:39.513] |  :  getGlobalsAndPackages() ...
[10:51:39.514] |  :  .  Searching for globals ...
[10:51:39.514] |  :  .  |  globals found: [0] 
[10:51:39.514] |  :  .  Searching for globals ... DONE
[10:51:39.514] |  :  .  globals: [0] <none>
[10:51:39.514] |  :  .  packages: [0] <none>
[10:51:39.515] |  :  getGlobalsAndPackages() ... done
[10:51:39.515]    + additional globals found: [n=0] 
[10:51:39.515]    + additional namespaces needed: [n=0] 
[10:51:39.515]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:39.515]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.515]  - seeds: <none>
[10:51:39.515]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.516] |  :  getGlobalsAndPackages() ...
[10:51:39.516] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.516] |  :  .  Resolving globals: FALSE
[10:51:39.516] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.516] |  :  .  |  {
[10:51:39.516] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.516] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.516] |  :  .  |      "# as a global variable                                         "
[10:51:39.516] |  :  .  |      do.call(function(...) {
[10:51:39.516] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.516] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.516] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.516] |  :  .  |          "# anonymous function.                                          "
[10:51:39.516] |  :  .  |          "#                                                              "
[10:51:39.516] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.516] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.516] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.516] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.516] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.516] |  :  .  |          repeat {
[10:51:39.516] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.516] |  :  .  |                  emptyenv())) 
[10:51:39.516] |  :  .  |                  break
[10:51:39.516] |  :  .  |              penv <- env
[10:51:39.516] |  :  .  |              env <- parent.env(env)
[10:51:39.516] |  :  .  |          }
[10:51:39.516] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.516] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.516] |  :  .  |          }
[10:51:39.516] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.516] |  :  .  |              !isNamespace(penv)) {
[10:51:39.516] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.516] |  :  .  |          }
[10:51:39.516] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.516] |  :  .  |          {
[10:51:39.516] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.516] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.516] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.516] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.516] |  :  .  |              }
[10:51:39.516] |  :  .  |              {
[10:51:39.516] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.516] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.516] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.516] |  :  .  |                  })
[10:51:39.516] |  :  .  |              }
[10:51:39.516] |  :  .  |          }
[10:51:39.516] |  :  .  |      }, args = future.call.arguments)
[10:51:39.516] |  :  .  |  }
[10:51:39.517] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.517] |  :  .  Search for packages associated with the globals ...
[10:51:39.517] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:39.518] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:39.518] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.518] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.519] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.519] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.519] |  :  .  packages: [1] ‘future.apply’
[10:51:39.519] |  :  getGlobalsAndPackages() ... done
[10:51:39.520] |  :  run() for Future (‘Future’) ...
[10:51:39.520] |  :  .  state: ‘created’
[10:51:39.520] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.520] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.520] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.520] |  :  .  |  Launching futures ...
[10:51:39.564] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.564] |  :  .  |  :  .  getFutureData() ...
[10:51:39.507] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.507] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.507] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.507] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.507] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.507] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.507] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.507] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.507] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.507] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.507] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.507] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.507] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.507] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.564] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.564] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.564] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.564] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.564] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.564] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.564] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.564] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.565] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.565] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.565] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.565] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.565] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.565] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.565] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.566] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.568] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.564] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.564] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.564] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.564] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.564] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.564] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.564] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.568] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.569] |  :  .  |  Launching futures ... done
[10:51:39.569] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.569] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.569] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.569] |  :  .  |  :  .  attachPackages() ...
[10:51:39.569] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.569] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.569] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.569] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.569] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.569] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.569] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.569] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.569] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.569] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.569] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.570] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.570] Created future:
[10:51:39.570] |  :  .  |  :  .  attachPackages() ...
[10:51:39.570] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.570] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.572] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.570] |  :  .  |  :  .  |  :  List of 1
[10:51:39.570] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.570] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.570] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.570] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.570] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.570] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.570] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.572] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.572] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.572] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.572] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.572] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.572] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.573] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.573] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.573] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.573] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.573] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.573] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.573] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.573] |  :  .  |  :  .  assign_globals() ...
[10:51:39.574] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.574] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.574] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.574] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.574] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.574] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.574] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.578] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.574] |  :  .  |  :  .  List of 11
[10:51:39.574] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.574] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.574] |  :  .  |  :  .   $ times                    : int 2
[10:51:39.574] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.574] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.574] |  :  .  |  :  .   $ dim                      : NULL
[10:51:39.574] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:39.574] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.574] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.574] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.574] |  :  .  |  :  .    ..$ : int 1
[10:51:39.574] |  :  .  |  :  .    ..$ : int 2
[10:51:39.574] |  :  .  |  :  .    ..$ : int 3
[10:51:39.574] |  :  .  |  :  .    ..$ : int 4
[10:51:39.574] |  :  .  |  :  .    ..$ : int 5
[10:51:39.574] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.574] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.574] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.574] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.574] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.574] |  :  .  |  :  .   - attr(*, "total_size")= num 24454
[10:51:39.574] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.574] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.582] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.583] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:39.583] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.583] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.583] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.583] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.583] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.583] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.583] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.578] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.578] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.578] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.578] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.578] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.578] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.578] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.578] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.578] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.583] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.583] |  :  readImmediateCondition() ...
[10:51:39.583] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.583] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.584] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.584] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.584] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.584] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.584] |  :   - Number of RDS files: 0
[10:51:39.584] |  :  readImmediateCondition() ... DONE
[10:51:39.570] MulticoreFuture:
[10:51:39.570] Label: ‘future_vapply-2’
[10:51:39.570] Expression:
[10:51:39.570] {
[10:51:39.570]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.570]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.570]     "# as a global variable                                         "
[10:51:39.570]     do.call(function(...) {
[10:51:39.570]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.570]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.570]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.570]         "# anonymous function.                                          "
[10:51:39.570]         "#                                                              "
[10:51:39.570]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.570]         "# function environment of FUN() to the calling environment.    "
[10:51:39.570]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.570]         "# global environment, which is where globals are written.      "
[10:51:39.570]         penv <- env <- environment(...future.FUN)
[10:51:39.570]         repeat {
[10:51:39.570]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.570]                 emptyenv())) 
[10:51:39.570]                 break
[10:51:39.570]             penv <- env
[10:51:39.570]             env <- parent.env(env)
[10:51:39.570]         }
[10:51:39.570]         if (identical(penv, globalenv())) {
[10:51:39.570]             environment(...future.FUN) <- environment()
[10:51:39.570]         }
[10:51:39.570]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.570]             !isNamespace(penv)) {
[10:51:39.570]             parent.env(penv) <- environment()
[10:51:39.570]         }
[10:51:39.570]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.570]         {
[10:51:39.570]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.570]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.570]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.570]                 on.exit(options(oopts), add = TRUE)
[10:51:39.570]             }
[10:51:39.570]             {
[10:51:39.570]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.570]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.570]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.570]                 })
[10:51:39.570]             }
[10:51:39.570]         }
[10:51:39.570]     }, args = future.call.arguments)
[10:51:39.570] }
[10:51:39.570] Lazy evaluation: FALSE
[10:51:39.570] Asynchronous evaluation: TRUE
[10:51:39.570] Local evaluation: TRUE
[10:51:39.570] Environment: R_GlobalEnv
[10:51:39.570] Capture standard output: TRUE
[10:51:39.570] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.570] Immediate condition classes: ‘immediateCondition’
[10:51:39.570] Globals: 11 objects totaling 13.57 KiB (function ‘...future.FUN’ of 4.88 KiB, function ‘x_FUN’ of 483 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.570] Packages: 1 packages (‘future.apply’)
[10:51:39.570] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.570] Resolved: FALSE
[10:51:39.570] Value: <not collected>
[10:51:39.570] Conditions captured: <none>
[10:51:39.570] Early signaling: FALSE
[10:51:39.570] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.570] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.585] Chunk #2 of 2 ... DONE
[10:51:39.585] Launching 2 futures (chunks) ... DONE
[10:51:39.585] Resolving 2 futures (chunks) ...
[10:51:39.586] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.586] |  :  value() on list ...
[10:51:39.586] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.586] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.586] |  :  .  recursive: 0
[10:51:39.586] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.586] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.586] |  :  .  length: 2
[10:51:39.586] |  :  .  
[10:51:39.586] |  :  .  Number of remaining objects: 2
[10:51:39.587] |  :  .  checking value #1 ...
[10:51:39.587] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.586] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.586] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.586] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.586] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.586] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.586] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.586] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.586] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.586] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.586] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.586] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.586] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.586] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.586] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.590] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.584] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.584] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.584] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.584] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.584] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.584] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.584] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.592] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.593] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.593] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.590] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.590] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.590] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.590] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.590] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.590] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.590] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.590] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.593] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.593] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.593] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.593] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.593] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.593] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.593] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.597] |  :  .  |  readImmediateCondition() ...
[10:51:39.597] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.594] |  :  .  |  :  .  |  :  List of 1
[10:51:39.594] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.594] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.594] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.594] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.594] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.594] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.594] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.598] |  :  .  |   - Number of RDS files: 0
[10:51:39.598] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.598] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.598] |  :  .  checking value #1 ... done
[10:51:39.598] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.598] |  :  .  checking value #2 ...
[10:51:39.598] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.598] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.599] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.599] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.599] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.599] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.599] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.600] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.600] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.600] |  :  .  |  :  .  assign_globals() ...
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.593] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.601] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.601] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.601] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.602] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.602] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.602] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.602] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.602] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.602] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.602] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.602] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.602] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.602] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.602] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.602] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.602] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.602] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.602] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.602] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.602] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.602] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.602] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.602] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.602] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.608] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.608] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.608] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.608] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.609] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.609] |  :  .  |  readImmediateCondition() ...
[10:51:39.609] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.609] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.609] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.609] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.609] |  :  .  |   - Number of RDS files: 0
[10:51:39.609] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.609] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.610] |  :  .  checking value #2 ... done
[10:51:39.600] |  :  .  |  :  .  List of 11
[10:51:39.600] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.600] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.600] |  :  .  |  :  .   $ times                    : int 2
[10:51:39.600] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.600] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.600] |  :  .  |  :  .   $ dim                      : NULL
[10:51:39.600] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:39.600] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.600] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.600] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.600] |  :  .  |  :  .    ..$ : int 6
[10:51:39.600] |  :  .  |  :  .    ..$ : int 7
[10:51:39.600] |  :  .  |  :  .    ..$ : int 8
[10:51:39.600] |  :  .  |  :  .    ..$ : int 9
[10:51:39.600] |  :  .  |  :  .    ..$ : int 10
[10:51:39.600] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.600] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.600] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.600] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.600] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.600] |  :  .  |  :  .   - attr(*, "total_size")= num 24454
[10:51:39.600] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.600] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.616] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.616] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:39.616] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.616] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.616] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.617] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.617] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.617] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.617] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.617] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.617] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.617] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.618] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.620] |  :  .  Number of remaining objects: 2
[10:51:39.620] |  :  .  checking value #1 ...
[10:51:39.620] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.620] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.621] |  :  .  |  readImmediateCondition() ...
[10:51:39.621] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.621] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.621] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.621] |  :  .  |   - Number of RDS files: 0
[10:51:39.621] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.621] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.621] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.621] |  :  .  |  MulticoreFuture #1
[10:51:39.622] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.622] |  :  .  |  :  nx: 2
[10:51:39.622] |  :  .  |  :  relay: TRUE
[10:51:39.622] |  :  .  |  :  stdout: TRUE
[10:51:39.622] |  :  .  |  :  signal: TRUE
[10:51:39.622] |  :  .  |  :  resignal: FALSE
[10:51:39.623] |  :  .  |  :  force: TRUE
[10:51:39.623] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:39.623] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:39.623] |  :  .  |  :  until=1
[10:51:39.623] |  :  .  |  :  relaying element #1
[10:51:39.624] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.624] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.625] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.625] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.625] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.625] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.626] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.626] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.626] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.626] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.627] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.627] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.627] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.627] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.627] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.628] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.628] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:39.622] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.622] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.622] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.622] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.622] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.622] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.622] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.622] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.622] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.622] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.622] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.622] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.622] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.622] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.628] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.628] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.628] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.628] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.629] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.629] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.629] |  :  .  |  :  value: <list>
[10:51:39.629] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.629] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.630] |  :  .  |  :  nx: 2
[10:51:39.630] |  :  .  |  :  relay: TRUE
[10:51:39.630] |  :  .  |  :  stdout: TRUE
[10:51:39.630] |  :  .  |  :  signal: TRUE
[10:51:39.630] |  :  .  |  :  resignal: FALSE
[10:51:39.630] |  :  .  |  :  force: TRUE
[10:51:39.631] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.631] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.631] |  :  .  |  :  until=2
[10:51:39.631] |  :  .  |  :  relaying element #2
[10:51:39.631] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.631] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.632] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:39.632] |  :  .  |  length: 1 (resolved future 1)
[10:51:39.632] |  :  .  checking value #1 ... done
[10:51:39.632] |  :  .  checking value #2 ...
[10:51:39.628] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.628] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.628] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.628] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.628] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.628] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.628] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.628] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.633] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.633] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.639] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.640] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.640] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.640] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.640] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.640] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.640] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.640] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.640] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.640] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.643] |  :  .  |  readImmediateCondition() ...
[10:51:39.643] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.643] |  :  .  |   - Number of RDS files: 0
[10:51:39.644] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.644] |  :  .  checking value #2 ... done
[10:51:39.641] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.641] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.641] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.641] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.641] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.641] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.641] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.641] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.641] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.641] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.641] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.641] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.641] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.641] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.645] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.645] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.645] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.646] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.646] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.646] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.646] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.646] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.646] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.654] |  :  .  Number of remaining objects: 1
[10:51:39.654] |  :  .  checking value #2 ...
[10:51:39.654] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.654] |  :  .  |  readImmediateCondition() ...
[10:51:39.655] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.655] |  :  .  |   - Number of RDS files: 0
[10:51:39.655] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.655] |  :  .  |  MulticoreFuture #2
[10:51:39.655] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.655] |  :  .  |  :  nx: 2
[10:51:39.655] |  :  .  |  :  relay: TRUE
[10:51:39.655] |  :  .  |  :  stdout: TRUE
[10:51:39.656] |  :  .  |  :  signal: TRUE
[10:51:39.656] |  :  .  |  :  resignal: FALSE
[10:51:39.656] |  :  .  |  :  force: TRUE
[10:51:39.656] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.656] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.656] |  :  .  |  :  until=2
[10:51:39.656] |  :  .  |  :  relaying element #2
[10:51:39.656] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.657] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.657] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.657] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.657] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.658] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.658] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.658] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.658] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.658] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.659] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.659] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.659] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.659] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.659] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.659] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.660] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.660] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.660] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.660] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.660] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.660] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.661] |  :  .  |  :  value: <list>
[10:51:39.661] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.661] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.661] |  :  .  |  :  nx: 2
[10:51:39.661] |  :  .  |  :  relay: TRUE
[10:51:39.661] |  :  .  |  :  stdout: TRUE
[10:51:39.662] |  :  .  |  :  signal: TRUE
[10:51:39.662] |  :  .  |  :  resignal: FALSE
[10:51:39.662] |  :  .  |  :  force: TRUE
[10:51:39.662] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.662] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.662] |  :  .  |  :  until=2
[10:51:39.663] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.663] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.663] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.663] |  :  .  |  length: 0 (resolved future 2)
[10:51:39.663] |  :  .  checking value #2 ... done
[10:51:39.663] |  :  .  Relaying remaining futures ...
[10:51:39.664] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:39.664] |  :  .  |  :  nx: 2
[10:51:39.664] |  :  .  |  :  relay: TRUE
[10:51:39.664] |  :  .  |  :  stdout: TRUE
[10:51:39.664] |  :  .  |  :  signal: TRUE
[10:51:39.664] |  :  .  |  :  resignal: FALSE
[10:51:39.664] |  :  .  |  :  force: TRUE
[10:51:39.664] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.664] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:39.665] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.665] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.665] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:39.665] |  :  .  Relaying remaining futures ... done
[10:51:39.665] |  :  value() on list ... done
[10:51:39.665]  - Number of value chunks collected: 2
[10:51:39.665] Resolving 2 futures (chunks) ... DONE
[10:51:39.665] Reducing values from 2 chunks ...
[10:51:39.665]  - Number of values collected after concatenation: 10
[10:51:39.666]  - Number of values expected: 10
[10:51:39.666] Reducing values from 2 chunks ... DONE
[10:51:39.666] future_lapply() ... DONE
 num [1:2, 1:10] 1 1 2 4 3 9 4 16 5 25 ...
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
[10:51:39.667] future_lapply() ...
[10:51:39.670] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.670] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.670] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.671] Number of chunks: 2
[10:51:39.671] getGlobalsAndPackagesXApply() ...
[10:51:39.671]  - future.globals: TRUE
[10:51:39.671] |  :  getGlobalsAndPackages() ...
[10:51:39.671] |  :  .  Searching for globals ...
[10:51:39.676] |  :  .  |  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘matrix’
[10:51:39.677] |  :  .  Searching for globals ... DONE
[10:51:39.677] |  :  .  Resolving globals: FALSE
[10:51:39.677] |  :  .  Search for packages associated with the globals ...
[10:51:39.677] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:39.678] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:39.678] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.678] |  :  .  The total size of the 7 globals is 13.59 KiB (13914 bytes)
[10:51:39.679] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.59 KiB The three largest globals are ‘FUN’ (5.06 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:39.679] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.679] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.679] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:39.680] |  :  .  packages: [1] ‘future.apply’
[10:51:39.680] |  :  getGlobalsAndPackages() ... done
[10:51:39.680]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:39.680]  - needed namespaces: [n=1] ‘future.apply’
[10:51:39.680] Finding globals ... DONE
[10:51:39.680]  - use_args: TRUE
[10:51:39.680]  - Getting '...' globals ...
[10:51:39.681] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:39.681] |  :  .  recursive: 0
[10:51:39.681] |  :  .  length: 1
[10:51:39.681] |  :  .  elements: ‘...’
[10:51:39.681] |  :  .  'obj' is DotDotDotList
[10:51:39.681] |  :  .  resolve(obj, ...) ...
[10:51:39.681] |  :  .  resolve(obj, ...) ... done
[10:51:39.682] |  :  .  length: 0 (resolved future 1)
[10:51:39.682] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:39.682]    - '...' content: [n=0] 
[10:51:39.682] List of 1
[10:51:39.682]  $ ...: list()
[10:51:39.682]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.682]  - attr(*, "where")=List of 1
[10:51:39.682]   ..$ ...:<environment: 0x55d463767fc8> 
[10:51:39.682]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.682]  - attr(*, "resolved")= logi TRUE
[10:51:39.682]  - attr(*, "total_size")= num NA
[10:51:39.685]  - Getting '...' globals ... DONE
[10:51:39.685] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:39.686] List of 8
[10:51:39.686]  $ ...future.FUN:function (x, ...)  
[10:51:39.686]  $ x_FUN        :function (x)  
[10:51:39.686]  $ times        : int 4
[10:51:39.686]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.686]  $ stop_if_not  :function (...)  
[10:51:39.686]  $ dim          : int [1:2] 2 2
[10:51:39.686]  $ valid_types  : chr [1:2] "logical" "integer"
[10:51:39.686]  $ ...          : list()
[10:51:39.686]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.686]  - attr(*, "where")=List of 8
[10:51:39.686]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:39.686]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:39.686]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:39.686]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:39.686]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:39.686]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:39.686]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:39.686]   ..$ ...          :<environment: 0x55d463767fc8> 
[10:51:39.686]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.686]  - attr(*, "resolved")= logi FALSE
[10:51:39.686]  - attr(*, "total_size")= num 24886
[10:51:39.693] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:39.693] getGlobalsAndPackagesXApply() ... DONE
[10:51:39.693] Number of futures (= number of chunks): 2
[10:51:39.694] Launching 2 futures (chunks) ...
[10:51:39.694] Chunk #1 of 2 ...
[10:51:39.694]  - Finding globals in 'X' for chunk #1 ...
[10:51:39.694] |  :  getGlobalsAndPackages() ...
[10:51:39.694] |  :  .  Searching for globals ...
[10:51:39.694] |  :  .  |  globals found: [0] 
[10:51:39.695] |  :  .  Searching for globals ... DONE
[10:51:39.695] |  :  .  globals: [0] <none>
[10:51:39.695] |  :  .  packages: [0] <none>
[10:51:39.695] |  :  getGlobalsAndPackages() ... done
[10:51:39.695]    + additional globals found: [n=0] 
[10:51:39.695]    + additional namespaces needed: [n=0] 
[10:51:39.695]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:39.695]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.695]  - seeds: <none>
[10:51:39.696]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.696] |  :  getGlobalsAndPackages() ...
[10:51:39.696] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.696] |  :  .  Resolving globals: FALSE
[10:51:39.696] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.696] |  :  .  |  {
[10:51:39.696] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.696] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.696] |  :  .  |      "# as a global variable                                         "
[10:51:39.696] |  :  .  |      do.call(function(...) {
[10:51:39.696] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.696] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.696] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.696] |  :  .  |          "# anonymous function.                                          "
[10:51:39.696] |  :  .  |          "#                                                              "
[10:51:39.696] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.696] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.696] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.696] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.696] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.696] |  :  .  |          repeat {
[10:51:39.696] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.696] |  :  .  |                  emptyenv())) 
[10:51:39.696] |  :  .  |                  break
[10:51:39.696] |  :  .  |              penv <- env
[10:51:39.696] |  :  .  |              env <- parent.env(env)
[10:51:39.696] |  :  .  |          }
[10:51:39.696] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.696] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.696] |  :  .  |          }
[10:51:39.696] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.696] |  :  .  |              !isNamespace(penv)) {
[10:51:39.696] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.696] |  :  .  |          }
[10:51:39.696] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.696] |  :  .  |          {
[10:51:39.696] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.696] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.696] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.696] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.696] |  :  .  |              }
[10:51:39.696] |  :  .  |              {
[10:51:39.696] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.696] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.696] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.696] |  :  .  |                  })
[10:51:39.696] |  :  .  |              }
[10:51:39.696] |  :  .  |          }
[10:51:39.696] |  :  .  |      }, args = future.call.arguments)
[10:51:39.696] |  :  .  |  }
[10:51:39.697] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.697] |  :  .  Search for packages associated with the globals ...
[10:51:39.697] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:39.698] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:39.698] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.698] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.698] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.698] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.698] |  :  .  packages: [1] ‘future.apply’
[10:51:39.699] |  :  getGlobalsAndPackages() ... done
[10:51:39.699] |  :  run() for Future (‘Future’) ...
[10:51:39.699] |  :  .  state: ‘created’
[10:51:39.699] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.699] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.699] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.700] |  :  .  |  Launching futures ...
[10:51:39.700] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.700] |  :  .  |  :  .  getFutureData() ...
[10:51:39.700] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.700] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.700] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.700] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.700] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.701] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.701] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.701] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.701] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.701] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.701] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.701] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.702] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.702] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.704] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.704] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.705] |  :  .  |  Launching futures ... done
[10:51:39.705] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.705] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.705] |  :  .  |  :  .  attachPackages() ...
[10:51:39.705] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.705] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.705] Created future:
[10:51:39.706] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.706] |  :  .  |  :  .  attachPackages() ...
[10:51:39.706] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.706] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.707] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.707] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.708] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.708] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.708] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.709] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.709] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.709] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.709] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.709] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.709] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.709] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.709] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.709] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.709] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.712] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.712] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.712] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.712] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.712] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.712] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.712] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.712] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.712] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.712] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.712] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.712] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.712] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.712] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.712] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.717] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.717] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.717] |  :  readImmediateCondition() ...
[10:51:39.717] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.718] |  :   - Number of RDS files: 0
[10:51:39.718] |  :  readImmediateCondition() ... DONE
[10:51:39.705] MulticoreFuture:
[10:51:39.705] Label: ‘future_vapply-1’
[10:51:39.705] Expression:
[10:51:39.705] {
[10:51:39.705]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.705]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.705]     "# as a global variable                                         "
[10:51:39.705]     do.call(function(...) {
[10:51:39.705]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.705]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.705]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.705]         "# anonymous function.                                          "
[10:51:39.705]         "#                                                              "
[10:51:39.705]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.705]         "# function environment of FUN() to the calling environment.    "
[10:51:39.705]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.705]         "# global environment, which is where globals are written.      "
[10:51:39.705]         penv <- env <- environment(...future.FUN)
[10:51:39.705]         repeat {
[10:51:39.705]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.705]                 emptyenv())) 
[10:51:39.705]                 break
[10:51:39.705]             penv <- env
[10:51:39.705]             env <- parent.env(env)
[10:51:39.705]         }
[10:51:39.705]         if (identical(penv, globalenv())) {
[10:51:39.705]             environment(...future.FUN) <- environment()
[10:51:39.705]         }
[10:51:39.705]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.705]             !isNamespace(penv)) {
[10:51:39.705]             parent.env(penv) <- environment()
[10:51:39.705]         }
[10:51:39.705]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.705]         {
[10:51:39.705]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.705]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.705]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.705]                 on.exit(options(oopts), add = TRUE)
[10:51:39.705]             }
[10:51:39.705]             {
[10:51:39.705]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.705]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.705]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.705]                 })
[10:51:39.705]             }
[10:51:39.705]         }
[10:51:39.705]     }, args = future.call.arguments)
[10:51:39.705] }
[10:51:39.705] Lazy evaluation: FALSE
[10:51:39.705] Asynchronous evaluation: TRUE
[10:51:39.705] Local evaluation: TRUE
[10:51:39.705] Environment: R_GlobalEnv
[10:51:39.705] Capture standard output: TRUE
[10:51:39.705] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.705] Immediate condition classes: ‘immediateCondition’
[10:51:39.705] Globals: 11 objects totaling 13.82 KiB (function ‘...future.FUN’ of 5.05 KiB, function ‘x_FUN’ of 567 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.705] Packages: 1 packages (‘future.apply’)
[10:51:39.705] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.705] Resolved: FALSE
[10:51:39.705] Value: <not collected>
[10:51:39.705] Conditions captured: <none>
[10:51:39.705] Early signaling: FALSE
[10:51:39.705] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.705] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.719] Chunk #1 of 2 ... DONE
[10:51:39.719] Chunk #2 of 2 ...
[10:51:39.719]  - Finding globals in 'X' for chunk #2 ...
[10:51:39.719] |  :  getGlobalsAndPackages() ...
[10:51:39.719] |  :  .  Searching for globals ...
[10:51:39.720] |  :  .  |  globals found: [0] 
[10:51:39.720] |  :  .  Searching for globals ... DONE
[10:51:39.720] |  :  .  globals: [0] <none>
[10:51:39.720] |  :  .  packages: [0] <none>
[10:51:39.720] |  :  getGlobalsAndPackages() ... done
[10:51:39.720]    + additional globals found: [n=0] 
[10:51:39.720]    + additional namespaces needed: [n=0] 
[10:51:39.721]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:39.721]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.721]  - seeds: <none>
[10:51:39.721]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.721] |  :  getGlobalsAndPackages() ...
[10:51:39.721] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.721] |  :  .  Resolving globals: FALSE
[10:51:39.721] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.722] |  :  .  |  {
[10:51:39.722] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.722] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.722] |  :  .  |      "# as a global variable                                         "
[10:51:39.722] |  :  .  |      do.call(function(...) {
[10:51:39.722] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.722] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.722] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.722] |  :  .  |          "# anonymous function.                                          "
[10:51:39.722] |  :  .  |          "#                                                              "
[10:51:39.722] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.722] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.722] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.722] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.722] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.722] |  :  .  |          repeat {
[10:51:39.722] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.722] |  :  .  |                  emptyenv())) 
[10:51:39.722] |  :  .  |                  break
[10:51:39.722] |  :  .  |              penv <- env
[10:51:39.722] |  :  .  |              env <- parent.env(env)
[10:51:39.722] |  :  .  |          }
[10:51:39.722] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.722] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.722] |  :  .  |          }
[10:51:39.722] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.722] |  :  .  |              !isNamespace(penv)) {
[10:51:39.722] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.722] |  :  .  |          }
[10:51:39.722] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.722] |  :  .  |          {
[10:51:39.722] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.722] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.722] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.722] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.722] |  :  .  |              }
[10:51:39.722] |  :  .  |              {
[10:51:39.722] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.722] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.722] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.722] |  :  .  |                  })
[10:51:39.722] |  :  .  |              }
[10:51:39.722] |  :  .  |          }
[10:51:39.722] |  :  .  |      }, args = future.call.arguments)
[10:51:39.722] |  :  .  |  }
[10:51:39.722] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.722] |  :  .  Search for packages associated with the globals ...
[10:51:39.717] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.717] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.717] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.717] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.717] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.717] |  :  .  |  [10:51:39.723] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
:  .  |  :  .  |      ...)  
[10:51:39.717] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.723] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:39.723] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.724] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.724] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.724] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.724] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.724] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.724] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.724] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.724] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.724] |  :  .  packages: [1] ‘future.apply’
[10:51:39.724] |  :  getGlobalsAndPackages() ... done
[10:51:39.724] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.724] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.724] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.724] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.724] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.725] |  :  run() for Future (‘Future’) ...
[10:51:39.725] |  :  .  state: ‘created’
[10:51:39.725] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.725] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.725] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.726] |  :  .  |  Launching futures ...
[10:51:39.726] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.726] |  :  .  |  :  .  getFutureData() ...
[10:51:39.726] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.726] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.726] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.726] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.727] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.727] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.727] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.727] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.727] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.727] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.728] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.728] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.725] |  :  .  |  :  .  |  :  List of 1
[10:51:39.725] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.725] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.725] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.725] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.725] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.725] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.725] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.728] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.728] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.728] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.728] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.728] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.728] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.729] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.729] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.729] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.729] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.729] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.729] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.730] |  :  .  |  :  .  assign_globals() ...
[10:51:39.730] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.731] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.731] |  :  .  |  Launching futures ... done
[10:51:39.731] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.731] |  :  .  |  :  .  attachPackages() ...
[10:51:39.732] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.732] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.732] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.732] Created future:
[10:51:39.732] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.733] |  :  .  |  :  .  attachPackages() ...
[10:51:39.733] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.733] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.734] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.735] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.735] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.735] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.736] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.736] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.736] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.736] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.736] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.736] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.736] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.736] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.736] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.736] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.736] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.740] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.730] |  :  .  |  :  .  List of 11
[10:51:39.730] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.730] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.730] |  :  .  |  :  .   $ times                    : int 4
[10:51:39.730] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.730] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.730] |  :  .  |  :  .   $ dim                      : int [1:2] 2 2
[10:51:39.730] |  :  .  |  :  .   $ valid_types              : chr [1:2] "logical" "integer"
[10:51:39.730] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.730] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.730] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.730] |  :  .  |  :  .    ..$ : int 1
[10:51:39.730] |  :  .  |  :  .    ..$ : int 2
[10:51:39.730] |  :  .  |  :  .    ..$ : int 3
[10:51:39.730] |  :  .  |  :  .    ..$ : int 4
[10:51:39.730] |  :  .  |  :  .    ..$ : int 5
[10:51:39.730] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.730] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.730] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.730] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.730] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.730] |  :  .  |  :  .   - attr(*, "total_size")= num 24886
[10:51:39.730] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.730] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.742] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.742] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:39.742] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.742] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.740] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.740] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.740] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.740] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.740] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.740] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.740] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.740] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.740] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.740] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.740] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.740] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.740] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.740] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.744] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.744] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.745] |  :  readImmediateCondition() ...
[10:51:39.746] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.746] |  :   - Number of RDS files: 0
[10:51:39.746] |  :  readImmediateCondition() ... DONE
[10:51:39.743] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.747] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.747] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.732] MulticoreFuture:
[10:51:39.732] Label: ‘future_vapply-2’
[10:51:39.732] Expression:
[10:51:39.732] {
[10:51:39.732]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.732]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.732]     "# as a global variable                                         "
[10:51:39.732]     do.call(function(...) {
[10:51:39.732]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.732]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.732]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.732]         "# anonymous function.                                          "
[10:51:39.732]         "#                                                              "
[10:51:39.732]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.732]         "# function environment of FUN() to the calling environment.    "
[10:51:39.732]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.732]         "# global environment, which is where globals are written.      "
[10:51:39.732]         penv <- env <- environment(...future.FUN)
[10:51:39.732]         repeat {
[10:51:39.732]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.732]                 emptyenv())) 
[10:51:39.732]                 break
[10:51:39.732]             penv <- env
[10:51:39.732]             env <- parent.env(env)
[10:51:39.732]         }
[10:51:39.732]         if (identical(penv, globalenv())) {
[10:51:39.732]             environment(...future.FUN) <- environment()
[10:51:39.732]         }
[10:51:39.732]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.732]             !isNamespace(penv)) {
[10:51:39.732]             parent.env(penv) <- environment()
[10:51:39.732]         }
[10:51:39.732]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.732]         {
[10:51:39.732]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.732]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.732]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.732]                 on.exit(options(oopts), add = TRUE)
[10:51:39.732]             }
[10:51:39.732]             {
[10:51:39.732]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.732]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.732]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.732]                 })
[10:51:39.732]             }
[10:51:39.732]         }
[10:51:39.732]     }, args = future.call.arguments)
[10:51:39.732] }
[10:51:39.732] Lazy evaluation: FALSE
[10:51:39.732] Asynchronous evaluation: TRUE
[10:51:39.732] Local evaluation: TRUE
[10:51:39.732] Environment: R_GlobalEnv
[10:51:39.732] Capture standard output: TRUE
[10:51:39.732] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.732] Immediate condition classes: ‘immediateCondition’
[10:51:39.732] Globals: 11 objects totaling 13.82 KiB (function ‘...future.FUN’ of 5.05 KiB, function ‘x_FUN’ of 567 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.732] Packages: 1 packages (‘future.apply’)
[10:51:39.732] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.732] Resolved: FALSE
[10:51:39.732] Value: <not collected>
[10:51:39.732] Conditions captured: <none>
[10:51:39.732] Early signaling: FALSE
[10:51:39.732] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.732] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.747] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.747] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.747] Chunk #2 of 2 ... DONE
[10:51:39.747] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.747] Launching 2 futures (chunks) ... DONE
[10:51:39.747] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.747] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.747] Resolving 2 futures (chunks) ...
[10:51:39.748] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.748] |  :  value() on list ...
[10:51:39.748] |  :  .  recursive: 0
[10:51:39.748] |  :  .  length: 2
[10:51:39.748] |  :  .  
[10:51:39.749] |  :  .  Number of remaining objects: 2
[10:51:39.749] |  :  .  checking value #1 ...
[10:51:39.749] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.750] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.751] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.751] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.751] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.751] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.744] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.744] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.744] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.744] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.744] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.744] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.744] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.752] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.752] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.752] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.753] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.753] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.753] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.753] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.753] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.753] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.753] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.751] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.751] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.751] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.751] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.751] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.751] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.751] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.751] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.751] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.751] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.751] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.751] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.751] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.751] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.756] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.753] |  :  .  |  :  .  |  :  List of 1
[10:51:39.753] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.753] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.753] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.753] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.753] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.753] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.753] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.756] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.756] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.757] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.757] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.757] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.757] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.757] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.758] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.758] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.758] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.758] |  :  .  |  :  .  assign_globals() ...
[10:51:39.756] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.756] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.756] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.756] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.756] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.756] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.756] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.756] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.759] |  :  .  |  readImmediateCondition() ...
[10:51:39.760] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.760] |  :  .  |   - Number of RDS files: 0
[10:51:39.760] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.760] |  :  .  checking value #1 ... done
[10:51:39.760] |  :  .  checking value #2 ...
[10:51:39.761] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.759] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.766] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.766] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.766] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.766] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.766] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.766] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.766] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.766] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.766] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.766] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.767] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.767] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.767] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.767] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.767] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.767] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.767] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.767] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.767] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.767] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.767] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.767] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.767] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.767] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.771] |  :  .  |  readImmediateCondition() ...
[10:51:39.771] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.771] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.771] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.772] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.772] |  :  .  |   - Number of RDS files: 0
[10:51:39.772] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.772] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.772] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.772] |  :  .  checking value #2 ... done
[10:51:39.772] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.772] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.772] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.772] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.758] |  :  .  |  :  .  List of 11
[10:51:39.758] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.758] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.758] |  :  .  |  :  .   $ times                    : int 4
[10:51:39.758] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.758] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.758] |  :  .  |  :  .   $ dim                      : int [1:2] 2 2
[10:51:39.758] |  :  .  |  :  .   $ valid_types              : chr [1:2] "logical" "integer"
[10:51:39.758] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.758] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.758] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.758] |  :  .  |  :  .    ..$ : int 6
[10:51:39.758] |  :  .  |  :  .    ..$ : int 7
[10:51:39.758] |  :  .  |  :  .    ..$ : int 8
[10:51:39.758] |  :  .  |  :  .    ..$ : int 9
[10:51:39.758] |  :  .  |  :  .    ..$ : int 10
[10:51:39.758] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.758] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.758] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.758] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.758] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.758] |  :  .  |  :  .   - attr(*, "total_size")= num 24886
[10:51:39.758] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.758] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.777] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.777] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:39.777] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.777] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.777] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.778] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.778] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.778] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.778] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.778] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.778] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.778] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.779] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.781] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.782] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.782] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.782] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.782] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.782] |  :  .  Number of remaining objects: 2
[10:51:39.782] |  :  .  checking value #1 ...
[10:51:39.783] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.783] |  :  .  |  readImmediateCondition() ...
[10:51:39.783] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.783] |  :  .  |   - Number of RDS files: 0
[10:51:39.784] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.784] |  :  .  |  MulticoreFuture #1
[10:51:39.784] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.784] |  :  .  |  :  nx: 2
[10:51:39.784] |  :  .  |  :  relay: TRUE
[10:51:39.785] |  :  .  |  :  stdout: TRUE
[10:51:39.785] |  :  .  |  :  signal: TRUE
[10:51:39.785] |  :  .  |  :  resignal: FALSE
[10:51:39.785] |  :  .  |  :  force: TRUE
[10:51:39.785] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:39.786] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:39.786] |  :  .  |  :  until=1
[10:51:39.786] |  :  .  |  :  relaying element #1
[10:51:39.786] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.787] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.787] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.788] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.788] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.788] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.789] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.789] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.789] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.782] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.782] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.782] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.782] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.782] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.782] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.782] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.782] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.782] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.782] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.782] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.782] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.782] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.782] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.789] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.789] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.790] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.790] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.790] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.790] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.790] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.791] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.791] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:39.791] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.791] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.791] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.792] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.792] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.792] |  :  .  |  :  value: <list>
[10:51:39.792] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.792] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.793] |  :  .  |  :  nx: 2
[10:51:39.793] |  :  .  |  :  relay: TRUE
[10:51:39.793] |  :  .  |  :  stdout: TRUE
[10:51:39.793] |  :  .  |  :  signal: TRUE
[10:51:39.793] |  :  .  |  :  resignal: FALSE
[10:51:39.794] |  :  .  |  :  force: TRUE
[10:51:39.794] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.794] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.794] |  :  .  |  :  until=2
[10:51:39.789] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.789] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.789] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.789] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.789] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.789] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.789] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.789] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.794] |  :  .  |  :  relaying element #2
[10:51:39.794] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.794] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.795] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.795] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:39.795] |  :  .  |  length: 1 (resolved future 1)
[10:51:39.795] |  :  .  checking value #1 ... done
[10:51:39.796] |  :  .  checking value #2 ...
[10:51:39.796] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.795] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.803] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.803] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.803] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.803] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.803] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.803] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.803] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.803] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.803] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.803] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.806] |  :  .  |  readImmediateCondition() ...
[10:51:39.806] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.807] |  :  .  |   - Number of RDS files: 0
[10:51:39.807] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.807] |  :  .  checking value #2 ... done
[10:51:39.804] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.804] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.804] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.804] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.804] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.804] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.804] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.804] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.804] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.804] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.804] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.804] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.804] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.804] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.809] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.809] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.810] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.810] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.810] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.810] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.810] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.810] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.810] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.817] |  :  .  Number of remaining objects: 1
[10:51:39.817] |  :  .  checking value #2 ...
[10:51:39.818] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.818] |  :  .  |  readImmediateCondition() ...
[10:51:39.818] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.818] |  :  .  |   - Number of RDS files: 0
[10:51:39.818] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.818] |  :  .  |  MulticoreFuture #2
[10:51:39.819] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.819] |  :  .  |  :  nx: 2
[10:51:39.819] |  :  .  |  :  relay: TRUE
[10:51:39.819] |  :  .  |  :  stdout: TRUE
[10:51:39.819] |  :  .  |  :  signal: TRUE
[10:51:39.819] |  :  .  |  :  resignal: FALSE
[10:51:39.819] |  :  .  |  :  force: TRUE
[10:51:39.819] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.819] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.820] |  :  .  |  :  until=2
[10:51:39.820] |  :  .  |  :  relaying element #2
[10:51:39.820] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.820] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.820] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.821] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.821] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.821] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.821] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.821] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.822] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.822] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.822] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.822] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.822] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.823] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.823] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.823] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.823] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.823] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.823] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.824] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.824] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.824] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.824] |  :  .  |  :  value: <list>
[10:51:39.824] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.825] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.825] |  :  .  |  :  nx: 2
[10:51:39.825] |  :  .  |  :  relay: TRUE
[10:51:39.825] |  :  .  |  :  stdout: TRUE
[10:51:39.825] |  :  .  |  :  signal: TRUE
[10:51:39.825] |  :  .  |  :  resignal: FALSE
[10:51:39.825] |  :  .  |  :  force: TRUE
[10:51:39.826] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.826] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.826] |  :  .  |  :  until=2
[10:51:39.826] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.826] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.826] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.827] |  :  .  |  length: 0 (resolved future 2)
[10:51:39.827] |  :  .  checking value #2 ... done
[10:51:39.827] |  :  .  Relaying remaining futures ...
[10:51:39.827] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:39.827] |  :  .  |  :  nx: 2
[10:51:39.827] |  :  .  |  :  relay: TRUE
[10:51:39.827] |  :  .  |  :  stdout: TRUE
[10:51:39.828] |  :  .  |  :  signal: TRUE
[10:51:39.828] |  :  .  |  :  resignal: FALSE
[10:51:39.828] |  :  .  |  :  force: TRUE
[10:51:39.828] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.828] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:39.828] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.828] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.828] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:39.829] |  :  .  Relaying remaining futures ... done
[10:51:39.829] |  :  value() on list ... done
[10:51:39.829]  - Number of value chunks collected: 2
[10:51:39.829] Resolving 2 futures (chunks) ... DONE
[10:51:39.829] Reducing values from 2 chunks ...
[10:51:39.829]  - Number of values collected after concatenation: 10
[10:51:39.829]  - Number of values expected: 10
[10:51:39.829] Reducing values from 2 chunks ... DONE
[10:51:39.829] future_lapply() ... DONE
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 num [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
[10:51:39.831] future_lapply() ...
[10:51:39.836] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.836] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.836] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.837] Number of chunks: 2
[10:51:39.837] getGlobalsAndPackagesXApply() ...
[10:51:39.837]  - future.globals: TRUE
[10:51:39.837] |  :  getGlobalsAndPackages() ...
[10:51:39.837] |  :  .  Searching for globals ...
[10:51:39.842] |  :  .  |  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘matrix’
[10:51:39.842] |  :  .  Searching for globals ... DONE
[10:51:39.842] |  :  .  Resolving globals: FALSE
[10:51:39.842] |  :  .  Search for packages associated with the globals ...
[10:51:39.843] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:39.843] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:39.843] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.844] |  :  .  The total size of the 7 globals is 13.63 KiB (13957 bytes)
[10:51:39.844] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.63 KiB The three largest globals are ‘FUN’ (5.09 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:39.844] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.844] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.844] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:39.845] |  :  .  packages: [1] ‘future.apply’
[10:51:39.845] |  :  getGlobalsAndPackages() ... done
[10:51:39.845]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:39.845]  - needed namespaces: [n=1] ‘future.apply’
[10:51:39.845] Finding globals ... DONE
[10:51:39.845]  - use_args: TRUE
[10:51:39.845]  - Getting '...' globals ...
[10:51:39.846] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:39.846] |  :  .  recursive: 0
[10:51:39.846] |  :  .  length: 1
[10:51:39.846] |  :  .  elements: ‘...’
[10:51:39.846] |  :  .  'obj' is DotDotDotList
[10:51:39.846] |  :  .  resolve(obj, ...) ...
[10:51:39.846] |  :  .  resolve(obj, ...) ... done
[10:51:39.847] |  :  .  length: 0 (resolved future 1)
[10:51:39.847] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:39.847]    - '...' content: [n=0] 
[10:51:39.847] List of 1
[10:51:39.847]  $ ...: list()
[10:51:39.847]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.847]  - attr(*, "where")=List of 1
[10:51:39.847]   ..$ ...:<environment: 0x55d4675fa3b8> 
[10:51:39.847]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.847]  - attr(*, "resolved")= logi TRUE
[10:51:39.847]  - attr(*, "total_size")= num NA
[10:51:39.850]  - Getting '...' globals ... DONE
[10:51:39.850] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:39.850] List of 8
[10:51:39.850]  $ ...future.FUN:function (x, ...)  
[10:51:39.850]  $ x_FUN        :function (x)  
[10:51:39.850]  $ times        : int 4
[10:51:39.850]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.850]  $ stop_if_not  :function (...)  
[10:51:39.850]  $ dim          : int [1:2] 2 2
[10:51:39.850]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:39.850]  $ ...          : list()
[10:51:39.850]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.850]  - attr(*, "where")=List of 8
[10:51:39.850]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:39.850]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:39.850]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:39.850]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:39.850]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:39.850]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:39.850]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:39.850]   ..$ ...          :<environment: 0x55d4675fa3b8> 
[10:51:39.850]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.850]  - attr(*, "resolved")= logi FALSE
[10:51:39.850]  - attr(*, "total_size")= num 24958
[10:51:39.857] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:39.857] getGlobalsAndPackagesXApply() ... DONE
[10:51:39.858] Number of futures (= number of chunks): 2
[10:51:39.858] Launching 2 futures (chunks) ...
[10:51:39.858] Chunk #1 of 2 ...
[10:51:39.858]  - Finding globals in 'X' for chunk #1 ...
[10:51:39.858] |  :  getGlobalsAndPackages() ...
[10:51:39.858] |  :  .  Searching for globals ...
[10:51:39.859] |  :  .  |  globals found: [0] 
[10:51:39.859] |  :  .  Searching for globals ... DONE
[10:51:39.859] |  :  .  globals: [0] <none>
[10:51:39.859] |  :  .  packages: [0] <none>
[10:51:39.859] |  :  getGlobalsAndPackages() ... done
[10:51:39.859]    + additional globals found: [n=0] 
[10:51:39.859]    + additional namespaces needed: [n=0] 
[10:51:39.859]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:39.860]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.860]  - seeds: <none>
[10:51:39.860]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.860] |  :  getGlobalsAndPackages() ...
[10:51:39.860] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.860] |  :  .  Resolving globals: FALSE
[10:51:39.860] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.860] |  :  .  |  {
[10:51:39.860] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.860] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.860] |  :  .  |      "# as a global variable                                         "
[10:51:39.860] |  :  .  |      do.call(function(...) {
[10:51:39.860] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.860] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.860] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.860] |  :  .  |          "# anonymous function.                                          "
[10:51:39.860] |  :  .  |          "#                                                              "
[10:51:39.860] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.860] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.860] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.860] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.860] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.860] |  :  .  |          repeat {
[10:51:39.860] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.860] |  :  .  |                  emptyenv())) 
[10:51:39.860] |  :  .  |                  break
[10:51:39.860] |  :  .  |              penv <- env
[10:51:39.860] |  :  .  |              env <- parent.env(env)
[10:51:39.860] |  :  .  |          }
[10:51:39.860] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.860] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.860] |  :  .  |          }
[10:51:39.860] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.860] |  :  .  |              !isNamespace(penv)) {
[10:51:39.860] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.860] |  :  .  |          }
[10:51:39.860] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.860] |  :  .  |          {
[10:51:39.860] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.860] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.860] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.860] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.860] |  :  .  |              }
[10:51:39.860] |  :  .  |              {
[10:51:39.860] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.860] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.860] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.860] |  :  .  |                  })
[10:51:39.860] |  :  .  |              }
[10:51:39.860] |  :  .  |          }
[10:51:39.860] |  :  .  |      }, args = future.call.arguments)
[10:51:39.860] |  :  .  |  }
[10:51:39.861] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.861] |  :  .  Search for packages associated with the globals ...
[10:51:39.861] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:39.862] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:39.862] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.862] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.862] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.862] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.862] |  :  .  packages: [1] ‘future.apply’
[10:51:39.863] |  :  getGlobalsAndPackages() ... done
[10:51:39.863] |  :  run() for Future (‘Future’) ...
[10:51:39.863] |  :  .  state: ‘created’
[10:51:39.863] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.863] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.863] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.863] |  :  .  |  Launching futures ...
[10:51:39.864] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.864] |  :  .  |  :  .  getFutureData() ...
[10:51:39.864] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.864] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.864] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.864] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.864] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.864] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.865] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.865] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.865] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.865] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.865] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.865] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.865] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.866] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.868] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.868] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.868] |  :  .  |  Launching futures ... done
[10:51:39.868] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.868] |  :  .  |  :  .  attachPackages() ...
[10:51:39.869] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.869] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.869] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.869] Created future:
[10:51:39.869] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.869] |  :  .  |  :  .  attachPackages() ...
[10:51:39.869] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.870] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.871] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.871] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.871] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.871] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.872] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.872] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.872] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.872] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.872] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.872] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.872] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.872] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.872] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.872] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.872] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.876] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.876] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.876] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.876] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.876] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.876] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.876] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.876] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.876] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.876] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.876] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.876] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.876] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.876] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.876] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.881] |  :  .  |  :  .  |  :  .  Not identical
[10:51:39.881] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.881] |  :  readImmediateCondition() ...
[10:51:39.881] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.882] |  :   - Number of RDS files: 0
[10:51:39.882] |  :  readImmediateCondition() ... DONE
[10:51:39.869] MulticoreFuture:
[10:51:39.869] Label: ‘future_vapply-1’
[10:51:39.869] Expression:
[10:51:39.869] {
[10:51:39.869]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.869]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.869]     "# as a global variable                                         "
[10:51:39.869]     do.call(function(...) {
[10:51:39.869]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.869]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.869]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.869]         "# anonymous function.                                          "
[10:51:39.869]         "#                                                              "
[10:51:39.869]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.869]         "# function environment of FUN() to the calling environment.    "
[10:51:39.869]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.869]         "# global environment, which is where globals are written.      "
[10:51:39.869]         penv <- env <- environment(...future.FUN)
[10:51:39.869]         repeat {
[10:51:39.869]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.869]                 emptyenv())) 
[10:51:39.869]                 break
[10:51:39.869]             penv <- env
[10:51:39.869]             env <- parent.env(env)
[10:51:39.869]         }
[10:51:39.869]         if (identical(penv, globalenv())) {
[10:51:39.869]             environment(...future.FUN) <- environment()
[10:51:39.869]         }
[10:51:39.869]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.869]             !isNamespace(penv)) {
[10:51:39.869]             parent.env(penv) <- environment()
[10:51:39.869]         }
[10:51:39.869]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.869]         {
[10:51:39.869]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.869]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.869]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.869]                 on.exit(options(oopts), add = TRUE)
[10:51:39.869]             }
[10:51:39.869]             {
[10:51:39.869]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.869]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.869]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.869]                 })
[10:51:39.869]             }
[10:51:39.869]         }
[10:51:39.869]     }, args = future.call.arguments)
[10:51:39.869] }
[10:51:39.869] Lazy evaluation: FALSE
[10:51:39.869] Asynchronous evaluation: TRUE
[10:51:39.869] Local evaluation: TRUE
[10:51:39.869] Environment: R_GlobalEnv
[10:51:39.869] Capture standard output: TRUE
[10:51:39.869] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.869] Immediate condition classes: ‘immediateCondition’
[10:51:39.869] Globals: 11 objects totaling 13.86 KiB (function ‘...future.FUN’ of 5.08 KiB, function ‘x_FUN’ of 567 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.869] Packages: 1 packages (‘future.apply’)
[10:51:39.869] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.869] Resolved: FALSE
[10:51:39.869] Value: <not collected>
[10:51:39.869] Conditions captured: <none>
[10:51:39.869] Early signaling: FALSE
[10:51:39.869] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.869] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.882] Chunk #1 of 2 ... DONE
[10:51:39.883] Chunk #2 of 2 ...
[10:51:39.883]  - Finding globals in 'X' for chunk #2 ...
[10:51:39.883] |  :  getGlobalsAndPackages() ...
[10:51:39.883] |  :  .  Searching for globals ...
[10:51:39.883] |  :  .  |  globals found: [0] 
[10:51:39.884] |  :  .  Searching for globals ... DONE
[10:51:39.884] |  :  .  globals: [0] <none>
[10:51:39.884] |  :  .  packages: [0] <none>
[10:51:39.884] |  :  getGlobalsAndPackages() ... done
[10:51:39.884]    + additional globals found: [n=0] 
[10:51:39.884]    + additional namespaces needed: [n=0] 
[10:51:39.884]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:39.884]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:39.884]  - seeds: <none>
[10:51:39.885]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.885] |  :  getGlobalsAndPackages() ...
[10:51:39.885] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.885] |  :  .  Resolving globals: FALSE
[10:51:39.885] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:39.885] |  :  .  |  {
[10:51:39.885] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.885] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:39.885] |  :  .  |      "# as a global variable                                         "
[10:51:39.885] |  :  .  |      do.call(function(...) {
[10:51:39.885] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.885] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:39.885] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:39.885] |  :  .  |          "# anonymous function.                                          "
[10:51:39.885] |  :  .  |          "#                                                              "
[10:51:39.885] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:39.885] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:39.885] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.885] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:39.885] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:39.885] |  :  .  |          repeat {
[10:51:39.885] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:39.885] |  :  .  |                  emptyenv())) 
[10:51:39.885] |  :  .  |                  break
[10:51:39.885] |  :  .  |              penv <- env
[10:51:39.885] |  :  .  |              env <- parent.env(env)
[10:51:39.885] |  :  .  |          }
[10:51:39.885] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:39.885] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:39.885] |  :  .  |          }
[10:51:39.885] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.885] |  :  .  |              !isNamespace(penv)) {
[10:51:39.885] |  :  .  |              parent.env(penv) <- environment()
[10:51:39.885] |  :  .  |          }
[10:51:39.885] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.885] |  :  .  |          {
[10:51:39.885] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.885] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.885] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.885] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:39.885] |  :  .  |              }
[10:51:39.885] |  :  .  |              {
[10:51:39.885] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.885] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.885] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:39.885] |  :  .  |                  })
[10:51:39.885] |  :  .  |              }
[10:51:39.885] |  :  .  |          }
[10:51:39.885] |  :  .  |      }, args = future.call.arguments)
[10:51:39.885] |  :  .  |  }
[10:51:39.886] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:39.886] |  :  .  Search for packages associated with the globals ...
[10:51:39.886] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:39.881] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.881] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.881] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.881] |  :  .  |  :  .  |  :  .  |      earlySign[10:51:39.887] |  :  .  |  Packages: [1] ‘future.apply’
al = FALSE, envir = parent.frame())  
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.881] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.881] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.881] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.887] |  :  .  Search for packages associated with the globals ... DONE
[10:51:39.887] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:39.888] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:39.888] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:39.888] |  :  .  packages: [1] ‘future.apply’
[10:51:39.888] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.888] |  :  getGlobalsAndPackages() ... done
[10:51:39.888] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.888] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.888] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.888] |  :  run() for Future (‘Future’) ...
[10:51:39.888] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.888] |  :  .  state: ‘created’
[10:51:39.889] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.889] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.889] |  :  .  Using MulticoreFutureBackend ...
[10:51:39.889] |  :  .  |  Launching futures ...
[10:51:39.888] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.888] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.888] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.888] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.888] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.889] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.889] |  :  .  |  :  .  getFutureData() ...
[10:51:39.890] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:39.890] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:39.890] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:39.890] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:39.890] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:39.890] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:39.890] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.890] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:39.891] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.891] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:39.891] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:39.891] |  :  .  |  :  .  getFutureData() ... done
[10:51:39.891] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.892] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:39.889] |  :  .  |  :  .  |  :  List of 1
[10:51:39.889] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.889] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.889] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.889] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.889] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.889] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.889] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.892] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.893] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.893] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.893] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.893] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.893] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.894] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.894] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.894] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.894] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.894] |  :  .  |  :  .  MulticoreFuture started
[10:51:39.894] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:39.894] |  :  .  |  :  .  assign_globals() ...
[10:51:39.895] |  :  .  |  Launching futures ... done
[10:51:39.895] |  :  .  |  :  .  attachPackages() ...
[10:51:39.895] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.895] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:39.895] |  :  .  Using MulticoreFutureBackend ... done
[10:51:39.895] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:39.896] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.896] Created future:
[10:51:39.896] |  :  .  |  :  .  attachPackages() ...
[10:51:39.896] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:39.896] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:39.898] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.898] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.898] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.899] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.899] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.900] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:39.900] |  :  .  |  :  .  |  :  .  New stack:
[10:51:39.900] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.900] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.900] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.900] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.900] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.900] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.900] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.900] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.903] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:39.904] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.904] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.904] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.904] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.904] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.904] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.904] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.904] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.904] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.904] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.904] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.904] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.904] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.904] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.895] |  :  .  |  :  .  List of 11
[10:51:39.895] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.895] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.895] |  :  .  |  :  .   $ times                    : int 4
[10:51:39.895] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.895] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.895] |  :  .  |  :  .   $ dim                      : int [1:2] 2 2
[10:51:39.895] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:39.895] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.895] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.895] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.895] |  :  .  |  :  .    ..$ : int 1
[10:51:39.895] |  :  .  |  :  .    ..$ : int 2
[10:51:39.895] |  :  .  |  :  .    ..$ : int 3
[10:51:39.895] |  :  .  |  :  .    ..$ : int 4
[10:51:39.895] |  :  .  |  :  .    ..$ : int 5
[10:51:39.895] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.895] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.895] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.895] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.895] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.895] |  :  .  |  :  .   - attr(*, "total_size")= num 24958
[10:51:39.895] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:[10:51:39.908] |  :  .  |  :  .  |  :  .  Not identical
51:39.895] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.908] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:39.908] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.908] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:39.909] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.909] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.909] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.909] |  :  readImmediateCondition() ...
[10:51:39.909] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.909] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.909] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.909] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.910] |  :   - Number of RDS files: 0
[10:51:39.910] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.910] |  :  readImmediateCondition() ... DONE
[10:51:39.910] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.910] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.910] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.910] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.896] MulticoreFuture:
[10:51:39.896] Label: ‘future_vapply-2’
[10:51:39.896] Expression:
[10:51:39.896] {
[10:51:39.896]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:39.896]     "# expression in do.call(), because function called uses '...'  "
[10:51:39.896]     "# as a global variable                                         "
[10:51:39.896]     do.call(function(...) {
[10:51:39.896]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:39.896]         "# without having an '...' argument. This means '...' is treated"
[10:51:39.896]         "# as a global variable. This may happen when FUN() is an       "
[10:51:39.896]         "# anonymous function.                                          "
[10:51:39.896]         "#                                                              "
[10:51:39.896]         "# If an anonymous function, we will make sure to restore the   "
[10:51:39.896]         "# function environment of FUN() to the calling environment.    "
[10:51:39.896]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:39.896]         "# global environment, which is where globals are written.      "
[10:51:39.896]         penv <- env <- environment(...future.FUN)
[10:51:39.896]         repeat {
[10:51:39.896]             if (identical(env, globalenv()) || identical(env, 
[10:51:39.896]                 emptyenv())) 
[10:51:39.896]                 break
[10:51:39.896]             penv <- env
[10:51:39.896]             env <- parent.env(env)
[10:51:39.896]         }
[10:51:39.896]         if (identical(penv, globalenv())) {
[10:51:39.896]             environment(...future.FUN) <- environment()
[10:51:39.896]         }
[10:51:39.896]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:39.896]             !isNamespace(penv)) {
[10:51:39.896]             parent.env(penv) <- environment()
[10:51:39.896]         }
[10:51:39.896]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:39.896]         {
[10:51:39.896]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:39.896]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:39.896]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:39.896]                 on.exit(options(oopts), add = TRUE)
[10:51:39.896]             }
[10:51:39.896]             {
[10:51:39.896]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:39.896]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:39.896]                   ...future.FUN(...future.X_jj, ...)
[10:51:39.896]                 })
[10:51:39.896]             }
[10:51:39.896]         }
[10:51:39.896]     }, args = future.call.arguments)
[10:51:39.896] }
[10:51:39.896] Lazy evaluation: FALSE
[10:51:39.896] Asynchronous evaluation: TRUE
[10:51:39.896] Local evaluation: TRUE
[10:51:39.896] Environment: R_GlobalEnv
[10:51:39.896] Capture standard output: TRUE
[10:51:39.896] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:39.896] Immediate condition classes: ‘immediateCondition’
[10:51:39.896] Globals: 11 objects totaling 13.86 KiB (function ‘...future.FUN’ of 5.08 KiB, function ‘x_FUN’ of 567 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:39.896] Packages: 1 packages (‘future.apply’)
[10:51:39.896] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:39.896] Resolved: FALSE
[10:51:39.896] Value: <not collected>
[10:51:39.896] Conditions captured: <none>
[10:51:39.896] Early signaling: FALSE
[10:51:39.896] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:39.896] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:39.911] Chunk #2 of 2 ... DONE
[10:51:39.911] Launching 2 futures (chunks) ... DONE
[10:51:39.911] Resolving 2 futures (chunks) ...
[10:51:39.911] |  :  value() on list ...
[10:51:39.911] |  :  .  recursive: 0
[10:51:39.912] |  :  .  length: 2
[10:51:39.912] |  :  .  
[10:51:39.912] |  :  .  Number of remaining objects: 2
[10:51:39.912] |  :  .  checking value #1 ...
[10:51:39.912] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.914] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.914] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.914] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.915] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.915] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.908] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:39.908] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.908] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.908] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.908] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.908] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.908] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.916] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:39.917] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:39.917] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:39.917] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:39.917] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:39.917] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:39.917] |  :  .  |  :  .  |  :  1. sequential:
[10:51:39.917] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:39.917] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:39.917] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.915] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.915] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.915] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.915] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.915] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.915] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.915] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.915] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.915] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.915] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.915] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.915] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.915] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.915] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.920] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.918] |  :  .  |  :  .  |  :  List of 1
[10:51:39.918] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.918] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.918] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.918] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.918] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.918] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.918] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.921] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.921] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.922] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.922] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:39.922] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.922] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:39.922] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:39.922] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:39.923] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.923] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.923] |  :  .  |  readImmediateCondition() ...
[10:51:39.923] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.920] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.920] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.920] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.920] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.920] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.920] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.920] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.920] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.923] |  :  .  |  :  .  assign_globals() ...
[10:51:39.923] |  :  .  |   - Number of RDS files: 0
[10:51:39.923] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.923] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.924] |  :  .  checking value #1 ... done
[10:51:39.924] |  :  .  checking value #2 ...
[10:51:39.924] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.924] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.930] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.930] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.930] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.931] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.931] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.931] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.931] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.931] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.931] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.931] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.934] |  :  .  |  readImmediateCondition() ...
[10:51:39.935] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.935] |  :  .  |   - Number of RDS files: 0
[10:51:39.935] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.931] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.931] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.931] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.931] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.931] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.931] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.931] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.931] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.931] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.931] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.931] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.931] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.931] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.931] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.935] |  :  .  checking value #2 ... done
[10:51:39.935] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.936] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.936] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.936] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.936] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.936] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.936] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.937] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.937] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.923] |  :  .  |  :  .  List of 11
[10:51:39.923] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:39.923] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:39.923] |  :  .  |  :  .   $ times                    : int 4
[10:51:39.923] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:39.923] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:39.923] |  :  .  |  :  .   $ dim                      : int [1:2] 2 2
[10:51:39.923] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:39.923] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:39.923] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:39.923] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:39.923] |  :  .  |  :  .    ..$ : int 6
[10:51:39.923] |  :  .  |  :  .    ..$ : int 7
[10:51:39.923] |  :  .  |  :  .    ..$ : int 8
[10:51:39.923] |  :  .  |  :  .    ..$ : int 9
[10:51:39.923] |  :  .  |  :  .    ..$ : int 10
[10:51:39.923] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:39.923] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:39.923] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:39.923] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:39.923] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:39.923] |  :  .  |  :  .   - attr(*, "total_size")= num 24958
[10:51:39.923] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:39.923] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:39.937] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:39.938] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:39.938] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:39.938] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:39.938] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:39.938] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:39.938] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:39.938] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:39.938] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:39.939] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:39.939] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:39.939] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:39.939] |  :  .  |  :  .  assign_globals() ... done
[10:51:39.942] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.942] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:39.942] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:39.943] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:39.943] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:39.946] |  :  .  Number of remaining objects: 2
[10:51:39.946] |  :  .  checking value #1 ...
[10:51:39.946] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.946] |  :  .  |  readImmediateCondition() ...
[10:51:39.946] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.947] |  :  .  |   - Number of RDS files: 0
[10:51:39.947] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.947] |  :  .  |  MulticoreFuture #1
[10:51:39.947] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.948] |  :  .  |  :  nx: 2
[10:51:39.948] |  :  .  |  :  relay: TRUE
[10:51:39.943] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.943] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.943] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.943] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.943] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.943] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.943] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.943] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.943] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:39.943] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.943] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.943] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:39.943] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.943] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.948] |  :  .  |  :  stdout: TRUE
[10:51:39.948] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:39.948] |  :  .  |  :  signal: TRUE
[10:51:39.948] |  :  .  |  :  resignal: FALSE
[10:51:39.948] |  :  .  |  :  force: TRUE
[10:51:39.949] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:39.949] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:39.949] |  :  .  |  :  until=1
[10:51:39.949] |  :  .  |  :  relaying element #1
[10:51:39.949] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.950] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.951] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.951] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.951] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.951] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.952] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.952] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.952] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.952] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.948] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:39.948] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.948] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.948] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.948] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.948] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.948] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.948] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.953] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:39.953] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:39.953] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.953] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.953] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.954] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.954] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:39.954] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.954] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.954] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.955] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.955] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.955] |  :  .  |  :  value: <list>
[10:51:39.955] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.955] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:39.956] |  :  .  |  :  nx: 2
[10:51:39.956] |  :  .  |  :  relay: TRUE
[10:51:39.956] |  :  .  |  :  stdout: TRUE
[10:51:39.956] |  :  .  |  :  signal: TRUE
[10:51:39.956] |  :  .  |  :  resignal: FALSE
[10:51:39.957] |  :  .  |  :  force: TRUE
[10:51:39.957] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.957] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.957] |  :  .  |  :  until=2
[10:51:39.957] |  :  .  |  :  relaying element #2
[10:51:39.957] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.958] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.958] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:39.958] |  :  .  |  length: 1 (resolved future 1)
[10:51:39.958] |  :  .  checking value #1 ... done
[10:51:39.958] |  :  .  checking value #2 ...
[10:51:39.959] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:39.953] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:39.966] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:39.966] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:39.966] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:39.966] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:39.966] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:39.966] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:39.966] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:39.966] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:39.966] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:39.966] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:39.969] |  :  .  |  readImmediateCondition() ...
[10:51:39.969] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.970] |  :  .  |   - Number of RDS files: 0
[10:51:39.970] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.970] |  :  .  checking value #2 ... done
[10:51:39.967] |  :  .  |  :  .  |  :  .  List of 1
[10:51:39.967] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:39.967] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:39.967] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:39.967] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.967] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.967] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.967] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.967] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:39.967] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:39.967] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:39.967] |  :  .  |  :  .  |  :  .      ...)  
[10:51:39.967] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:39.967] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:39.972] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:39.972] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:39.972] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.972] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.972] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.972] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:39.973] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:39.973] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.973] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:39.980] |  :  .  Number of remaining objects: 1
[10:51:39.980] |  :  .  checking value #2 ...
[10:51:39.980] |  :  .  |  'obj' is MulticoreFuture
[10:51:39.981] |  :  .  |  readImmediateCondition() ...
[10:51:39.981] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.981] |  :  .  |   - Number of RDS files: 0
[10:51:39.981] |  :  .  |  readImmediateCondition() ... DONE
[10:51:39.981] |  :  .  |  MulticoreFuture #2
[10:51:39.981] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.981] |  :  .  |  :  nx: 2
[10:51:39.982] |  :  .  |  :  relay: TRUE
[10:51:39.982] |  :  .  |  :  stdout: TRUE
[10:51:39.982] |  :  .  |  :  signal: TRUE
[10:51:39.982] |  :  .  |  :  resignal: FALSE
[10:51:39.982] |  :  .  |  :  force: TRUE
[10:51:39.982] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:39.982] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:39.982] |  :  .  |  :  until=2
[10:51:39.982] |  :  .  |  :  relaying element #2
[10:51:39.982] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.983] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:39.983] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:39.983] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:39.984] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:39.984] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:39.984] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:39.984] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.984] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.984] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.985] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.985] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.985] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.985] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.985] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.986] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.986] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.986] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:39.986] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.986] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.986] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:39.987] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:39.987] |  :  .  |  :  value: <list>
[10:51:39.987] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:39.987] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:39.987] |  :  .  |  :  nx: 2
[10:51:39.987] |  :  .  |  :  relay: TRUE
[10:51:39.988] |  :  .  |  :  stdout: TRUE
[10:51:39.988] |  :  .  |  :  signal: TRUE
[10:51:39.988] |  :  .  |  :  resignal: FALSE
[10:51:39.988] |  :  .  |  :  force: TRUE
[10:51:39.988] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.988] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.988] |  :  .  |  :  until=2
[10:51:39.989] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.989] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.989] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:39.989] |  :  .  |  length: 0 (resolved future 2)
[10:51:39.989] |  :  .  checking value #2 ... done
[10:51:39.989] |  :  .  Relaying remaining futures ...
[10:51:39.990] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:39.990] |  :  .  |  :  nx: 2
[10:51:39.990] |  :  .  |  :  relay: TRUE
[10:51:39.990] |  :  .  |  :  stdout: TRUE
[10:51:39.990] |  :  .  |  :  signal: TRUE
[10:51:39.990] |  :  .  |  :  resignal: FALSE
[10:51:39.990] |  :  .  |  :  force: TRUE
[10:51:39.990] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.990] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:39.991] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:39.991] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:39.991] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:39.991] |  :  .  Relaying remaining futures ... done
[10:51:39.991] |  :  value() on list ... done
[10:51:39.991]  - Number of value chunks collected: 2
[10:51:39.991] Resolving 2 futures (chunks) ... DONE
[10:51:39.991] Reducing values from 2 chunks ...
[10:51:39.992]  - Number of values collected after concatenation: 10
[10:51:39.992]  - Number of values expected: 10
[10:51:39.992] Reducing values from 2 chunks ... DONE
[10:51:39.992] future_lapply() ... DONE
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 num [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:2] "A" "B"
  ..$ : NULL
[10:51:39.995] future_lapply() ...
[10:51:39.997] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:39.997] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:39.998] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:39.998] Number of chunks: 2
[10:51:39.998] getGlobalsAndPackagesXApply() ...
[10:51:39.998]  - future.globals: TRUE
[10:51:39.999] |  :  getGlobalsAndPackages() ...
[10:51:39.999] |  :  .  Searching for globals ...
[10:51:40.004] |  :  .  |  globals found: [19] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘matrix’, ‘list’, ‘c’
[10:51:40.004] |  :  .  Searching for globals ... DONE
[10:51:40.004] |  :  .  Resolving globals: FALSE
[10:51:40.004] |  :  .  Search for packages associated with the globals ...
[10:51:40.005] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:40.005] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:40.005] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.006] |  :  .  The total size of the 7 globals is 16.05 KiB (16436 bytes)
[10:51:40.006] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 16.05 KiB The three largest globals are ‘FUN’ (6.71 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:40.006] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:40.007] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:40.007] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:40.007] |  :  .  packages: [1] ‘future.apply’
[10:51:40.007] |  :  getGlobalsAndPackages() ... done
[10:51:40.007]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:40.007]  - needed namespaces: [n=1] ‘future.apply’
[10:51:40.007] Finding globals ... DONE
[10:51:40.007]  - use_args: TRUE
[10:51:40.008]  - Getting '...' globals ...
[10:51:40.008] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:40.008] |  :  .  recursive: 0
[10:51:40.008] |  :  .  length: 1
[10:51:40.008] |  :  .  elements: ‘...’
[10:51:40.008] |  :  .  'obj' is DotDotDotList
[10:51:40.009] |  :  .  resolve(obj, ...) ...
[10:51:40.009] |  :  .  resolve(obj, ...) ... done
[10:51:40.009] |  :  .  length: 0 (resolved future 1)
[10:51:40.009] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:40.009]    - '...' content: [n=0] 
[10:51:40.009] List of 1
[10:51:40.009]  $ ...: list()
[10:51:40.009]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.009]  - attr(*, "where")=List of 1
[10:51:40.009]   ..$ ...:<environment: 0x55d466c52150> 
[10:51:40.009]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.009]  - attr(*, "resolved")= logi TRUE
[10:51:40.009]  - attr(*, "total_size")= num NA
[10:51:40.012]  - Getting '...' globals ... DONE
[10:51:40.012] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:40.012] List of 8
[10:51:40.012]  $ ...future.FUN:function (x, ...)  
[10:51:40.012]  $ x_FUN        :function (x)  
[10:51:40.012]  $ times        : int 4
[10:51:40.012]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.012]  $ stop_if_not  :function (...)  
[10:51:40.012]  $ dim          : int [1:2] 2 2
[10:51:40.012]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:40.012]  $ ...          : list()
[10:51:40.012]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.012]  - attr(*, "where")=List of 8
[10:51:40.012]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:40.012]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:40.012]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:40.012]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:40.012]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:40.012]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:40.012]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:40.012]   ..$ ...          :<environment: 0x55d466c52150> 
[10:51:40.012]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.012]  - attr(*, "resolved")= logi FALSE
[10:51:40.012]  - attr(*, "total_size")= num 29094
[10:51:40.022] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:40.022] getGlobalsAndPackagesXApply() ... DONE
[10:51:40.022] Number of futures (= number of chunks): 2
[10:51:40.022] Launching 2 futures (chunks) ...
[10:51:40.022] Chunk #1 of 2 ...
[10:51:40.022]  - Finding globals in 'X' for chunk #1 ...
[10:51:40.022] |  :  getGlobalsAndPackages() ...
[10:51:40.022] |  :  .  Searching for globals ...
[10:51:40.023] |  :  .  |  globals found: [0] 
[10:51:40.023] |  :  .  Searching for globals ... DONE
[10:51:40.023] |  :  .  globals: [0] <none>
[10:51:40.023] |  :  .  packages: [0] <none>
[10:51:40.023] |  :  getGlobalsAndPackages() ... done
[10:51:40.023]    + additional globals found: [n=0] 
[10:51:40.023]    + additional namespaces needed: [n=0] 
[10:51:40.023]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:40.024]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.024]  - seeds: <none>
[10:51:40.024]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.024] |  :  getGlobalsAndPackages() ...
[10:51:40.024] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.024] |  :  .  Resolving globals: FALSE
[10:51:40.024] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.024] |  :  .  |  {
[10:51:40.024] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.024] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.024] |  :  .  |      "# as a global variable                                         "
[10:51:40.024] |  :  .  |      do.call(function(...) {
[10:51:40.024] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.024] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.024] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.024] |  :  .  |          "# anonymous function.                                          "
[10:51:40.024] |  :  .  |          "#                                                              "
[10:51:40.024] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.024] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.024] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.024] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.024] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.024] |  :  .  |          repeat {
[10:51:40.024] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.024] |  :  .  |                  emptyenv())) 
[10:51:40.024] |  :  .  |                  break
[10:51:40.024] |  :  .  |              penv <- env
[10:51:40.024] |  :  .  |              env <- parent.env(env)
[10:51:40.024] |  :  .  |          }
[10:51:40.024] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.024] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.024] |  :  .  |          }
[10:51:40.024] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.024] |  :  .  |              !isNamespace(penv)) {
[10:51:40.024] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.024] |  :  .  |          }
[10:51:40.024] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.024] |  :  .  |          {
[10:51:40.024] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.024] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.024] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.024] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.024] |  :  .  |              }
[10:51:40.024] |  :  .  |              {
[10:51:40.024] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.024] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.024] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.024] |  :  .  |                  })
[10:51:40.024] |  :  .  |              }
[10:51:40.024] |  :  .  |          }
[10:51:40.024] |  :  .  |      }, args = future.call.arguments)
[10:51:40.024] |  :  .  |  }
[10:51:40.025] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.025] |  :  .  Search for packages associated with the globals ...
[10:51:40.025] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:40.026] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:40.026] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.026] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:40.026] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:40.026] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.026] |  :  .  packages: [1] ‘future.apply’
[10:51:40.027] |  :  getGlobalsAndPackages() ... done
[10:51:40.027] |  :  run() for Future (‘Future’) ...
[10:51:40.027] |  :  .  state: ‘created’
[10:51:40.027] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.027] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.027] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.027] |  :  .  |  Launching futures ...
[10:51:40.028] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.028] |  :  .  |  :  .  getFutureData() ...
[10:51:40.028] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.028] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:40.028] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.028] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.028] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.028] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.029] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.029] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.029] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.029] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.029] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.029] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.029] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.030] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.032] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.032] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.032] |  :  .  |  Launching futures ... done
[10:51:40.032] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.032] |  :  .  |  :  .  attachPackages() ...
[10:51:40.033] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.033] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.033] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.033] Created future:
[10:51:40.033] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.033] |  :  .  |  :  .  attachPackages() ...
[10:51:40.033] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:40.034] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.035] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.035] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.035] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.035] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.036] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.036] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.036] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.036] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.036] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.036] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.036] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.036] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.036] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.036] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.036] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.040] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.040] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.040] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.040] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.040] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.040] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.040] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.040] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.040] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.040] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.045] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.045] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.045] |  :  readImmediateCondition() ...
[10:51:40.046] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.046] |  :   - Number of RDS files: 0
[10:51:40.046] |  :  readImmediateCondition() ... DONE
[10:51:40.033] MulticoreFuture:
[10:51:40.033] Label: ‘future_vapply-1’
[10:51:40.033] Expression:
[10:51:40.033] {
[10:51:40.033]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.033]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.033]     "# as a global variable                                         "
[10:51:40.033]     do.call(function(...) {
[10:51:40.033]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.033]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.033]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.033]         "# anonymous function.                                          "
[10:51:40.033]         "#                                                              "
[10:51:40.033]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.033]         "# function environment of FUN() to the calling environment.    "
[10:51:40.033]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.033]         "# global environment, which is where globals are written.      "
[10:51:40.033]         penv <- env <- environment(...future.FUN)
[10:51:40.033]         repeat {
[10:51:40.033]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.033]                 emptyenv())) 
[10:51:40.033]                 break
[10:51:40.033]             penv <- env
[10:51:40.033]             env <- parent.env(env)
[10:51:40.033]         }
[10:51:40.033]         if (identical(penv, globalenv())) {
[10:51:40.033]             environment(...future.FUN) <- environment()
[10:51:40.033]         }
[10:51:40.033]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.033]             !isNamespace(penv)) {
[10:51:40.033]             parent.env(penv) <- environment()
[10:51:40.033]         }
[10:51:40.033]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.033]         {
[10:51:40.033]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.033]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.033]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.033]                 on.exit(options(oopts), add = TRUE)
[10:51:40.033]             }
[10:51:40.033]             {
[10:51:40.033]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.033]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.033]                   ...future.FUN(...future.X_jj, ...)
[10:51:40.033]                 })
[10:51:40.033]             }
[10:51:40.033]         }
[10:51:40.033]     }, args = future.call.arguments)
[10:51:40.033] }
[10:51:40.033] Lazy evaluation: FALSE
[10:51:40.033] Asynchronous evaluation: TRUE
[10:51:40.033] Local evaluation: TRUE
[10:51:40.033] Environment: R_GlobalEnv
[10:51:40.033] Capture standard output: TRUE
[10:51:40.033] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.033] Immediate condition classes: ‘immediateCondition’
[10:51:40.033] Globals: 11 objects totaling 16.28 KiB (function ‘...future.FUN’ of 6.70 KiB, function ‘x_FUN’ of 1.36 KiB, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:40.033] Packages: 1 packages (‘future.apply’)
[10:51:40.033] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.033] Resolved: FALSE
[10:51:40.033] Value: <not collected>
[10:51:40.033] Conditions captured: <none>
[10:51:40.033] Early signaling: FALSE
[10:51:40.033] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.033] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.047] Chunk #1 of 2 ... DONE
[10:51:40.047] Chunk #2 of 2 ...
[10:51:40.047]  - Finding globals in 'X' for chunk #2 ...
[10:51:40.047] |  :  getGlobalsAndPackages() ...
[10:51:40.047] |  :  .  Searching for globals ...
[10:51:40.048] |  :  .  |  globals found: [0] 
[10:51:40.048] |  :  .  Searching for globals ... DONE
[10:51:40.048] |  :  .  globals: [0] <none>
[10:51:40.048] |  :  .  packages: [0] <none>
[10:51:40.048] |  :  getGlobalsAndPackages() ... done
[10:51:40.048]    + additional globals found: [n=0] 
[10:51:40.049]    + additional namespaces needed: [n=0] 
[10:51:40.049]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:40.049]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.049]  - seeds: <none>
[10:51:40.049]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.049] |  :  getGlobalsAndPackages() ...
[10:51:40.049] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.049] |  :  .  Resolving globals: FALSE
[10:51:40.050] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.050] |  :  .  |  {
[10:51:40.050] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.050] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.050] |  :  .  |      "# as a global variable                                         "
[10:51:40.050] |  :  .  |      do.call(function(...) {
[10:51:40.050] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.050] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.050] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.050] |  :  .  |          "# anonymous function.                                          "
[10:51:40.050] |  :  .  |          "#                                                              "
[10:51:40.050] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.050] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.050] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.050] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.050] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.050] |  :  .  |          repeat {
[10:51:40.050] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.050] |  :  .  |                  emptyenv())) 
[10:51:40.050] |  :  .  |                  break
[10:51:40.050] |  :  .  |              penv <- env
[10:51:40.050] |  :  .  |              env <- parent.env(env)
[10:51:40.050] |  :  .  |          }
[10:51:40.050] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.050] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.050] |  :  .  |          }
[10:51:40.050] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.050] |  :  .  |              !isNamespace(penv)) {
[10:51:40.050] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.050] |  :  .  |          }
[10:51:40.050] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.050] |  :  .  |          {
[10:51:40.050] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.050] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.050] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.050] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.050] |  :  .  |              }
[10:51:40.050] |  :  .  |              {
[10:51:40.050] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.050] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.050] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.050] |  :  .  |                  })
[10:51:40.050] |  :  .  |              }
[10:51:40.050] |  :  .  |          }
[10:51:40.050] |  :  .  |      }, args = future.call.arguments)
[10:51:40.050] |  :  .  |  }
[10:51:40.050] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.051] |  :  .  Search for packages associated with the globals ...
[10:51:40.051] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:40.052] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:40.052] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.045] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.045] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.045] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.045] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.045] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.045] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.045] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.052] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:40.052] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:40.052] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.052] |  :  .  packages: [1] ‘future.apply’
[10:51:40.052] |  :  getGlobalsAndPackages() ... done
[10:51:40.053] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.053] |  :  run() for Future (‘Future’) ...
[10:51:40.053] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.053] |  :  .  state: ‘created’
[10:51:40.053] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.053] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.053] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.053] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.053] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.054] |  :  .  |  Launching futures ...
[10:51:40.054] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.054] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.054] |  :  .  |  :  .  getFutureData() ...
[10:51:40.054] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.054] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:40.054] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.054] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.054] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.054] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.054] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.054] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.054] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.054] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.055] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.055] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.055] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.055] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.055] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.055] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.055] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.056] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.056] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.055] |  :  .  |  :  .  |  :  List of 1
[10:51:40.055] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.055] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.055] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.055] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.055] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.055] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.055] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.058] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.059] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.058] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.059] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.059] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.059] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.059] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.059] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.059] |  :  .  |  Launching futures ... done
[10:51:40.059] |  :  .  |  :  .  attachPackages() ...
[10:51:40.060] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.059] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.060] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.060] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.060] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.060] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.060] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.060] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.060] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.060] |  :  .  |  :  .  assign_globals() ...
[10:51:40.060] |  :  .  |  :  .  attachPackages() ...
[10:51:40.060] Created future:
[10:51:40.061] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:40.061] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.062] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.062] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.063] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.064] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.064] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.064] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.064] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.064] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.064] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.064] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.064] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.064] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.064] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.064] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.064] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.069] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.060] |  :  .  |  :  .  List of 11
[10:51:40.060] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:40.060] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:40.060] |  :  .  |  :  .   $ times                    : int 4
[10:51:40.060] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.060] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:40.060] |  :  .  |  :  .   $ dim                      : int [1:2] 2 2
[10:51:40.060] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:40.060] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:40.060] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.060] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:40.060] |  :  .  |  :  .    ..$ : int 1
[10:51:40.060] |  :  .  |  :  .    ..$ : int 2
[10:51:40.060] |  :  .  |  :  .    ..$ : int 3
[10:51:40.060] |  :  .  |  :  .    ..$ : int 4
[10:51:40.060] |  :  .  |  :  .    ..$ : int 5
[10:51:40.060] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.060] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.060] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:40.060] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.060] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.060] |  :  .  |  :  .   - attr(*, "total_size")= num 29094
[10:51:40.060] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.060] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.074] |  :  readImmediateCondition() ...
[10:51:40.074] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.074] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.074] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:40.074] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:40.074] |  :   - Number of RDS files: 0
[10:51:40.074] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:40.074] |  :  readImmediateCondition() ... DONE
[10:51:40.075] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:40.075] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:40.075] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:40.075] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:40.069] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.069] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.069] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.069] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.069] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.069] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.069] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.069] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.069] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.069] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.069] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.069] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.069] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.069] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.061] MulticoreFuture:
[10:51:40.061] Label: ‘future_vapply-2’
[10:51:40.061] Expression:
[10:51:40.061] {
[10:51:40.061]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.061]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.061]     "# as a global variable                                         "
[10:51:40.061]     do.call(function(...) {
[10:51:40.061]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.061]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.061]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.061]         "# anonymous function.                                          "
[10:51:40.061]         "#                                                              "
[10:51:40.061]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.061]         "# function environment of FUN() to the calling environment.    "
[10:51:40.061]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.061]         "# global environment, which is where globals are written.      "
[10:51:40.061]         penv <- env <- environment(...future.FUN)
[10:51:40.061]         repeat {
[10:51:40.061]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.061]                 emptyenv())) 
[10:51:40.061]                 break
[10:51:40.061]             penv <- env
[10:51:40.061]             env <- parent.env(env)
[10:51:40.061]         }
[10:51:40.061]         if (identical(penv, globalenv())) {
[10:51:40.061]             environment(...future.FUN) <- environment()
[10:51:40.061]         }
[10:51:40.061]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.061]             !isNamespace(penv)) {
[10:51:40.061]             parent.env(penv) <- environment()
[10:51:40.061]         }
[10:51:40.061]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.061]         {
[10:51:40.061]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.061]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.061]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.061]                 on.exit(options(oopts), add = TRUE)
[10:51:40.061]             }
[10:51:40.061]             {
[10:51:40.061]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.061]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.061]                   ...future.FUN(...future.X_jj, ...)
[10:51:40.061]                 })
[10:51:40.061]             }
[10:51:40.061]         }
[10:51:40.061]     }, args = future.call.arguments)
[10:51:40.061] }
[10:51:40.061] Lazy evaluation: FALSE
[10:51:40.061] Asynchronous evaluation: TRUE
[10:51:40.061] Local evaluation: TRUE
[10:51:40.061] Environment: R_GlobalEnv
[10:51:40.061] Capture standard output: TRUE
[10:51:40.061] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.061] Immediate condition classes: ‘immediateCondition’
[10:51:40.061] Globals: 11 objects totaling 16.28 KiB (function ‘...future.FUN’ of 6.70 KiB, function ‘x_FUN’ of 1.36 KiB, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:40.061] Packages: 1 packages (‘future.apply’)
[10:51:40.061] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.061] Resolved: FALSE
[10:51:40.061] Value: <not collected>
[10:51:40.061] Conditions captured: <none>
[10:51:40.061] Early signaling: FALSE
[10:51:40.061] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.061] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.075] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.075] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.075] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.075] Chunk #2 of 2 ... DONE
[10:51:40.075] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.075] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.076] Launching 2 futures (chunks) ... DONE
[10:51:40.076] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.076] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.076] Resolving 2 futures (chunks) ...
[10:51:40.076] |  :  value() on list ...
[10:51:40.076] |  :  .  recursive: 0
[10:51:40.077] |  :  .  length: 2
[10:51:40.077] |  :  .  
[10:51:40.077] |  :  .  Number of remaining objects: 2
[10:51:40.077] |  :  .  checking value #1 ...
[10:51:40.078] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.079] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.079] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.079] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.079] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.080] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.076] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.076] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.076] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.076] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.076] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.076] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.076] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.083] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.084] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.084] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.084] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.080] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.080] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.080] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.080] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.080] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.080] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.080] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.080] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.080] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.080] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.080] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.080] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.080] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.080] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.084] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.084] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.084] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.084] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.084] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.084] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.084] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.084] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.084] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.084] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.084] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.084] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.084] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.084] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.084] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.087] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.087] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.085] |  :  .  |  :  .  |  :  List of 1
[10:51:40.085] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.085] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.085] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.085] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.085] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.085] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.085] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.088] |  :  .  |  readImmediateCondition() ...
[10:51:40.088] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.088] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.088] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.089] |  :  .  |   - Number of RDS files: 0
[10:51:40.089] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.089] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.089] |  :  .  checking value #1 ... done
[10:51:40.089] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.089] |  :  .  checking value #2 ...
[10:51:40.089] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.089] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.090] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.090] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.090] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.090] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.090] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.091] |  :  .  |  :  .  assign_globals() ...
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.088] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.094] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.094] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.094] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.094] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.094] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.094] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.094] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.094] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.094] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.094] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.095] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.095] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.095] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.095] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.095] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.095] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.095] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.095] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.095] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.095] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.095] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.095] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.095] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.095] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.099] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.099] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.100] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.100] |  :  .  |  readImmediateCondition() ...
[10:51:40.100] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.100] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.100] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.100] |  :  .  |   - Number of RDS files: 0
[10:51:40.100] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.100] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.101] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.101] |  :  .  checking value #2 ... done
[10:51:40.101] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.101] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.091] |  :  .  |  :  .  List of 11
[10:51:40.091] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:40.091] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:40.091] |  :  .  |  :  .   $ times                    : int 4
[10:51:40.091] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.091] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:40.091] |  :  .  |  :  .   $ dim                      : int [1:2] 2 2
[10:51:40.091] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:40.091] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:40.091] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.091] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:40.091] |  :  .  |  :  .    ..$ : int 6
[10:51:40.091] |  :  .  |  :  .    ..$ : int 7
[10:51:40.091] |  :  .  |  :  .    ..$ : int 8
[10:51:40.091] |  :  .  |  :  .    ..$ : int 9
[10:51:40.091] |  :  .  |  :  .    ..$ : int 10
[10:51:40.091] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.091] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.091] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:40.091] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.091] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.091] |  :  .  |  :  .   - attr(*, "total_size")= num 29094
[10:51:40.091] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.091] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.105] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.105] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:40.105] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:40.106] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:40.106] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:40.106] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:40.106] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:40.106] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:40.106] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.106] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.107] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.107] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.107] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.110] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.110] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.110] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.110] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.110] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.111] |  :  .  Number of remaining objects: 2
[10:51:40.111] |  :  .  checking value #1 ...
[10:51:40.111] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.112] |  :  .  |  readImmediateCondition() ...
[10:51:40.112] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.112] |  :  .  |   - Number of RDS files: 0
[10:51:40.112] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.112] |  :  .  |  MulticoreFuture #1
[10:51:40.113] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.113] |  :  .  |  :  nx: 2
[10:51:40.113] |  :  .  |  :  relay: TRUE
[10:51:40.113] |  :  .  |  :  stdout: TRUE
[10:51:40.113] |  :  .  |  :  signal: TRUE
[10:51:40.114] |  :  .  |  :  resignal: FALSE
[10:51:40.114] |  :  .  |  :  force: TRUE
[10:51:40.114] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:40.114] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:40.115] |  :  .  |  :  until=1
[10:51:40.115] |  :  .  |  :  relaying element #1
[10:51:40.115] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.116] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.116] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.117] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.110] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.110] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.110] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.110] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.110] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.110] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.110] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.110] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.110] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.110] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.110] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.110] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.110] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.110] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.117] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.117] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.117] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.117] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.118] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.118] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.118] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.118] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.119] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.119] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.119] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.119] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.119] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.120] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:40.120] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.120] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.120] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.121] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.121] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.121] |  :  .  |  :  value: <list>
[10:51:40.121] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.121] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.117] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.117] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.117] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.117] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.117] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.117] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.117] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.117] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.122] |  :  .  |  :  nx: 2
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.122] |  :  .  |  :  relay: TRUE
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.122] |  :  .  |  :  stdout: TRUE
[10:51:40.122] |  :  .  |  :  signal: TRUE
[10:51:40.122] |  :  .  |  :  resignal: FALSE
[10:51:40.122] |  :  .  |  :  force: TRUE
[10:51:40.123] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.123] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.123] |  :  .  |  :  until=2
[10:51:40.123] |  :  .  |  :  relaying element #2
[10:51:40.123] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.124] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.124] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:40.124] |  :  .  |  length: 1 (resolved future 1)
[10:51:40.124] |  :  .  checking value #1 ... done
[10:51:40.124] |  :  .  checking value #2 ...
[10:51:40.125] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.122] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.129] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.130] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.130] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.130] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.130] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.130] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.130] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.130] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.130] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.130] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.131] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.131] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.131] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.131] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.131] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.131] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.131] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.131] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.131] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.131] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.131] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.131] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.131] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.131] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.135] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.135] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.135] |  :  .  |  readImmediateCondition() ...
[10:51:40.135] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.135] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.135] |  :  .  |   - Number of RDS files: 0
[10:51:40.135] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.135] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.136] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.136] |  :  .  checking value #2 ... done
[10:51:40.136] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.136] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.136] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.136] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.146] |  :  .  Number of remaining objects: 1
[10:51:40.146] |  :  .  checking value #2 ...
[10:51:40.146] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.146] |  :  .  |  readImmediateCondition() ...
[10:51:40.147] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.147] |  :  .  |   - Number of RDS files: 0
[10:51:40.147] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.147] |  :  .  |  MulticoreFuture #2
[10:51:40.147] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.147] |  :  .  |  :  nx: 2
[10:51:40.147] |  :  .  |  :  relay: TRUE
[10:51:40.147] |  :  .  |  :  stdout: TRUE
[10:51:40.148] |  :  .  |  :  signal: TRUE
[10:51:40.148] |  :  .  |  :  resignal: FALSE
[10:51:40.148] |  :  .  |  :  force: TRUE
[10:51:40.148] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.148] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.148] |  :  .  |  :  until=2
[10:51:40.148] |  :  .  |  :  relaying element #2
[10:51:40.148] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.149] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.149] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.149] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.149] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.149] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.150] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.150] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.150] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.150] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.150] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.151] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.151] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.151] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.151] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.151] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.151] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.152] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.152] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.152] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.152] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.152] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.152] |  :  .  |  :  value: <list>
[10:51:40.153] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.153] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.153] |  :  .  |  :  nx: 2
[10:51:40.153] |  :  .  |  :  relay: TRUE
[10:51:40.153] |  :  .  |  :  stdout: TRUE
[10:51:40.153] |  :  .  |  :  signal: TRUE
[10:51:40.153] |  :  .  |  :  resignal: FALSE
[10:51:40.154] |  :  .  |  :  force: TRUE
[10:51:40.154] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.154] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.154] |  :  .  |  :  until=2
[10:51:40.154] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.154] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.155] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.155] |  :  .  |  length: 0 (resolved future 2)
[10:51:40.155] |  :  .  checking value #2 ... done
[10:51:40.155] |  :  .  Relaying remaining futures ...
[10:51:40.155] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:40.155] |  :  .  |  :  nx: 2
[10:51:40.155] |  :  .  |  :  relay: TRUE
[10:51:40.155] |  :  .  |  :  stdout: TRUE
[10:51:40.156] |  :  .  |  :  signal: TRUE
[10:51:40.156] |  :  .  |  :  resignal: FALSE
[10:51:40.156] |  :  .  |  :  force: TRUE
[10:51:40.156] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.156] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:40.156] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.156] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.156] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:40.156] |  :  .  Relaying remaining futures ... done
[10:51:40.157] |  :  value() on list ... done
[10:51:40.157]  - Number of value chunks collected: 2
[10:51:40.157] Resolving 2 futures (chunks) ... DONE
[10:51:40.157] Reducing values from 2 chunks ...
[10:51:40.157]  - Number of values collected after concatenation: 10
[10:51:40.157]  - Number of values expected: 10
[10:51:40.157] Reducing values from 2 chunks ... DONE
[10:51:40.157] future_lapply() ... DONE
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:2] "A" "B"
  ..$ : NULL
- From example(vapply) ...
[10:51:40.160] future_lapply() ...
[10:51:40.163] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.163] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.163] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.164] Number of chunks: 2
[10:51:40.164] getGlobalsAndPackagesXApply() ...
[10:51:40.164]  - future.globals: TRUE
[10:51:40.164] |  :  getGlobalsAndPackages() ...
[10:51:40.164] |  :  .  Searching for globals ...
[10:51:40.169] |  :  .  |  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘UseMethod’
[10:51:40.169] |  :  .  Searching for globals ... DONE
[10:51:40.169] |  :  .  Resolving globals: FALSE
[10:51:40.169] |  :  .  Search for packages associated with the globals ...
[10:51:40.170] |  :  .  |  Packages associated with globals: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:40.170] |  :  .  |  Packages: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:40.171] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.171] |  :  .  The total size of the 7 globals is 13.03 KiB (13339 bytes)
[10:51:40.171] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.03 KiB The three largest globals are ‘FUN’ (4.75 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:40.172] |  :  .  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:40.172] |  :  .  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:40.172] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:40.172] |  :  .  packages: [2] ‘stats’, ‘future.apply’
[10:51:40.172] |  :  getGlobalsAndPackages() ... done
[10:51:40.172]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:40.172]  - needed namespaces: [n=2] ‘stats’, ‘future.apply’
[10:51:40.173] Finding globals ... DONE
[10:51:40.173]  - use_args: TRUE
[10:51:40.173]  - Getting '...' globals ...
[10:51:40.173] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:40.173] |  :  .  recursive: 0
[10:51:40.173] |  :  .  length: 1
[10:51:40.174] |  :  .  elements: ‘...’
[10:51:40.174] |  :  .  'obj' is DotDotDotList
[10:51:40.174] |  :  .  resolve(obj, ...) ...
[10:51:40.174] |  :  .  resolve(obj, ...) ... done
[10:51:40.174] |  :  .  length: 0 (resolved future 1)
[10:51:40.174] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:40.174]    - '...' content: [n=0] 
[10:51:40.174] List of 1
[10:51:40.174]  $ ...: list()
[10:51:40.174]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.174]  - attr(*, "where")=List of 1
[10:51:40.174]   ..$ ...:<environment: 0x55d466347578> 
[10:51:40.174]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.174]  - attr(*, "resolved")= logi TRUE
[10:51:40.174]  - attr(*, "total_size")= num NA
[10:51:40.177]  - Getting '...' globals ... DONE
[10:51:40.178] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:40.178] List of 8
[10:51:40.178]  $ ...future.FUN:function (x, ...)  
[10:51:40.178]  $ x_FUN        :function (x, ...)  
[10:51:40.178]  $ times        : int 5
[10:51:40.178]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.178]  $ stop_if_not  :function (...)  
[10:51:40.178]  $ dim          : NULL
[10:51:40.178]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:40.178]  $ ...          : list()
[10:51:40.178]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.178]  - attr(*, "where")=List of 8
[10:51:40.178]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:40.178]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:40.178]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:40.178]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:40.178]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:40.178]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:40.178]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:40.178]   ..$ ...          :<environment: 0x55d466347578> 
[10:51:40.178]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.178]  - attr(*, "resolved")= logi FALSE
[10:51:40.178]  - attr(*, "total_size")= num 24127
[10:51:40.184] Packages to be attached in all futures: [n=2] ‘stats’, ‘future.apply’
[10:51:40.185] getGlobalsAndPackagesXApply() ... DONE
[10:51:40.185] Number of futures (= number of chunks): 2
[10:51:40.185] Launching 2 futures (chunks) ...
[10:51:40.185] Chunk #1 of 2 ...
[10:51:40.185]  - Finding globals in 'X' for chunk #1 ...
[10:51:40.185] |  :  getGlobalsAndPackages() ...
[10:51:40.185] |  :  .  Searching for globals ...
[10:51:40.186] |  :  .  |  globals found: [0] 
[10:51:40.186] |  :  .  Searching for globals ... DONE
[10:51:40.186] |  :  .  globals: [0] <none>
[10:51:40.186] |  :  .  packages: [0] <none>
[10:51:40.186] |  :  getGlobalsAndPackages() ... done
[10:51:40.186]    + additional globals found: [n=0] 
[10:51:40.186]    + additional namespaces needed: [n=0] 
[10:51:40.187]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:40.187]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.187]  - seeds: <none>
[10:51:40.187]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.187] |  :  getGlobalsAndPackages() ...
[10:51:40.187] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.187] |  :  .  Resolving globals: FALSE
[10:51:40.187] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.188] |  :  .  |  {
[10:51:40.188] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.188] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.188] |  :  .  |      "# as a global variable                                         "
[10:51:40.188] |  :  .  |      do.call(function(...) {
[10:51:40.188] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.188] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.188] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.188] |  :  .  |          "# anonymous function.                                          "
[10:51:40.188] |  :  .  |          "#                                                              "
[10:51:40.188] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.188] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.188] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.188] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.188] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.188] |  :  .  |          repeat {
[10:51:40.188] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.188] |  :  .  |                  emptyenv())) 
[10:51:40.188] |  :  .  |                  break
[10:51:40.188] |  :  .  |              penv <- env
[10:51:40.188] |  :  .  |              env <- parent.env(env)
[10:51:40.188] |  :  .  |          }
[10:51:40.188] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.188] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.188] |  :  .  |          }
[10:51:40.188] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.188] |  :  .  |              !isNamespace(penv)) {
[10:51:40.188] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.188] |  :  .  |          }
[10:51:40.188] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.188] |  :  .  |          {
[10:51:40.188] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.188] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.188] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.188] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.188] |  :  .  |              }
[10:51:40.188] |  :  .  |              {
[10:51:40.188] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.188] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.188] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.188] |  :  .  |                  })
[10:51:40.188] |  :  .  |              }
[10:51:40.188] |  :  .  |          }
[10:51:40.188] |  :  .  |      }, args = future.call.arguments)
[10:51:40.188] |  :  .  |  }
[10:51:40.188] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.188] |  :  .  Search for packages associated with the globals ...
[10:51:40.188] |  :  .  |  Packages associated with globals: [2] ‘stats’, ‘future.apply’
[10:51:40.189] |  :  .  |  Packages: [2] ‘stats’, ‘future.apply’
[10:51:40.189] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.189] |  :  .  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:40.189] |  :  .  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:40.189] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.190] |  :  .  packages: [2] ‘stats’, ‘future.apply’
[10:51:40.190] |  :  getGlobalsAndPackages() ... done
[10:51:40.190] |  :  run() for Future (‘Future’) ...
[10:51:40.190] |  :  .  state: ‘created’
[10:51:40.190] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.190] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.190] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.191] |  :  .  |  Launching futures ...
[10:51:40.191] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.191] |  :  .  |  :  .  getFutureData() ...
[10:51:40.191] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.191] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 2): ‘stats’, ‘future.apply’
[10:51:40.191] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.191] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.191] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.192] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.192] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.192] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.192] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.192] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.192] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.192] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.193] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.193] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.195] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.196] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.196] |  :  .  |  Launching futures ... done
[10:51:40.196] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.196] |  :  .  |  :  .  attachPackages() ...
[10:51:40.196] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.196] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.197] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.197] Created future:
[10:51:40.197] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.197] |  :  .  |  :  .  attachPackages() ...
[10:51:40.197] |  :  .  |  :  .  |  packages: [n=2] ‘stats’, ‘future.apply’
[10:51:40.197] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.198] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.198] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.199] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.199] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.199] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.200] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.200] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.200] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.200] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.200] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.200] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.200] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.200] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.200] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.200] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.204] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.204] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.204] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.204] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.204] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.204] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.204] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.204] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.204] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.204] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.204] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.204] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.204] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.204] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.204] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.208] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.208] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.209] |  :  readImmediateCondition() ...
[10:51:40.209] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.209] |  :   - Number of RDS files: 0
[10:51:40.210] |  :  readImmediateCondition() ... DONE
[10:51:40.197] MulticoreFuture:
[10:51:40.197] Label: ‘future_vapply-1’
[10:51:40.197] Expression:
[10:51:40.197] {
[10:51:40.197]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.197]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.197]     "# as a global variable                                         "
[10:51:40.197]     do.call(function(...) {
[10:51:40.197]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.197]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.197]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.197]         "# anonymous function.                                          "
[10:51:40.197]         "#                                                              "
[10:51:40.197]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.197]         "# function environment of FUN() to the calling environment.    "
[10:51:40.197]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.197]         "# global environment, which is where globals are written.      "
[10:51:40.197]         penv <- env <- environment(...future.FUN)
[10:51:40.197]         repeat {
[10:51:40.197]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.197]                 emptyenv())) 
[10:51:40.197]                 break
[10:51:40.197]             penv <- env
[10:51:40.197]             env <- parent.env(env)
[10:51:40.197]         }
[10:51:40.197]         if (identical(penv, globalenv())) {
[10:51:40.197]             environment(...future.FUN) <- environment()
[10:51:40.197]         }
[10:51:40.197]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.197]             !isNamespace(penv)) {
[10:51:40.197]             parent.env(penv) <- environment()
[10:51:40.197]         }
[10:51:40.197]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.197]         {
[10:51:40.197]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.197]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.197]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.197]                 on.exit(options(oopts), add = TRUE)
[10:51:40.197]             }
[10:51:40.197]             {
[10:51:40.197]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.197]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.197]                   ...future.FUN(...future.X_jj, ...)
[10:51:40.197]                 })
[10:51:40.197]             }
[10:51:40.197]         }
[10:51:40.197]     }, args = future.call.arguments)
[10:51:40.197] }
[10:51:40.197] Lazy evaluation: FALSE
[10:51:40.197] Asynchronous evaluation: TRUE
[10:51:40.197] Local evaluation: TRUE
[10:51:40.197] Environment: R_GlobalEnv
[10:51:40.197] Capture standard output: TRUE
[10:51:40.197] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.197] Immediate condition classes: ‘immediateCondition’
[10:51:40.197] Globals: 11 objects totaling 13.35 KiB (function ‘...future.FUN’ of 4.74 KiB, function ‘x_FUN’ of 311 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:40.197] Packages: 2 packages (‘stats’, ‘future.apply’)
[10:51:40.197] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.197] Resolved: FALSE
[10:51:40.197] Value: <not collected>
[10:51:40.197] Conditions captured: <none>
[10:51:40.197] Early signaling: FALSE
[10:51:40.197] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.197] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.210] Chunk #1 of 2 ... DONE
[10:51:40.210] Chunk #2 of 2 ...
[10:51:40.211]  - Finding globals in 'X' for chunk #2 ...
[10:51:40.211] |  :  getGlobalsAndPackages() ...
[10:51:40.211] |  :  .  Searching for globals ...
[10:51:40.211] |  :  .  |  globals found: [0] 
[10:51:40.211] |  :  .  Searching for globals ... DONE
[10:51:40.212] |  :  .  globals: [0] <none>
[10:51:40.212] |  :  .  packages: [0] <none>
[10:51:40.212] |  :  getGlobalsAndPackages() ... done
[10:51:40.212]    + additional globals found: [n=0] 
[10:51:40.212]    + additional namespaces needed: [n=0] 
[10:51:40.212]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:40.212]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.212]  - seeds: <none>
[10:51:40.212]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.213] |  :  getGlobalsAndPackages() ...
[10:51:40.213] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.213] |  :  .  Resolving globals: FALSE
[10:51:40.213] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.213] |  :  .  |  {
[10:51:40.213] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.213] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.213] |  :  .  |      "# as a global variable                                         "
[10:51:40.213] |  :  .  |      do.call(function(...) {
[10:51:40.213] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.213] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.213] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.213] |  :  .  |          "# anonymous function.                                          "
[10:51:40.213] |  :  .  |          "#                                                              "
[10:51:40.213] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.213] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.213] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.213] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.213] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.213] |  :  .  |          repeat {
[10:51:40.213] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.213] |  :  .  |                  emptyenv())) 
[10:51:40.213] |  :  .  |                  break
[10:51:40.213] |  :  .  |              penv <- env
[10:51:40.213] |  :  .  |              env <- parent.env(env)
[10:51:40.213] |  :  .  |          }
[10:51:40.213] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.213] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.213] |  :  .  |          }
[10:51:40.213] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.213] |  :  .  |              !isNamespace(penv)) {
[10:51:40.213] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.213] |  :  .  |          }
[10:51:40.213] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.213] |  :  .  |          {
[10:51:40.213] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.213] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.213] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.213] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.213] |  :  .  |              }
[10:51:40.213] |  :  .  |              {
[10:51:40.213] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.213] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.213] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.213] |  :  .  |                  })
[10:51:40.213] |  :  .  |              }
[10:51:40.213] |  :  .  |          }
[10:51:40.213] |  :  .  |      }, args = future.call.arguments)
[10:51:40.213] |  :  .  |  }
[10:51:40.214] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.214] |  :  .  Search for packages associated with the globals ...
[10:51:40.214] |  :  .  |  Packages associated with globals: [2] ‘stats’, ‘future.apply’
[10:51:40.215] |  :  .  |  Packages: [2] ‘stats’, ‘future.apply’
[10:51:40.215] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.215] |  :  .  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:40.216] |  :  .  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:40.216] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.216] |  :  .  packages: [2] ‘stats’, ‘future.apply’
[10:51:40.216] |  :  getGlobalsAndPackages() ... done
[10:51:40.216] |  :  run() for Future (‘Future’) ...
[10:51:40.217] |  :  .  state: ‘created’
[10:51:40.217] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.217] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.217] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.217] |  :  .  |  Launching futures ...
[10:51:40.217] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.217] |  :  .  |  :  .  getFutureData() ...
[10:51:40.218] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.218] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 2): ‘stats’, ‘future.apply’
[10:51:40.218] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.218] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.218] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.218] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.218] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.218] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.219] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.219] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.219] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.219] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.219] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.208] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.208] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.208] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.208] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.208] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.208] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.208] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.220] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.220] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.220] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.220] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.220] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.221] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.221] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.221] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.221] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.221] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.221] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.222] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.223] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.223] |  :  .  |  Launching futures ... done
[10:51:40.223] |  :  .  |  :  .  attachPackages() ...
[10:51:40.223] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.223] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.224] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.224] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.224] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.224] Created future:
[10:51:40.221] |  :  .  |  :  .  |  :  List of 1
[10:51:40.221] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.221] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.221] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.221] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.221] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.221] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.221] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.224] |  :  .  |  :  .  attachPackages() ...
[10:51:40.224] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.224] |  :  .  |  :  .  |  packages: [n=2] ‘stats’, ‘future.apply’
[10:51:40.225] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.225] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.225] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.225] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.225] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.225] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.226] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.226] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.226] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.226] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.226] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.226] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.227] |  :  .  |  :  .  assign_globals() ...
[10:51:40.227] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.227] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.228] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.228] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.228] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.228] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.228] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.228] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.228] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.228] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.228] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.228] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.228] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.237] |  :  readImmediateCondition() ...
[10:51:40.237] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.238] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.238] |  :   - Number of RDS files: 0
[10:51:40.227] |  :  .  |  :  .  List of 11
[10:51:40.227] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:40.227] |  :  .  |  :  .   $ x_FUN                    :function (x, ...)  
[10:51:40.227] |  :  .  |  :  .   $ times                    : int 5
[10:51:40.227] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.227] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:40.227] |  :  .  |  :  .   $ dim                      : NULL
[10:51:40.227] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:40.227] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:40.227] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.227] |  :  .  |  :  .   $ ...future.elements_ii    :List of 1
[10:51:40.227] |  :  .  |  :  .    ..$ a: int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:51:40.227] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.227] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.227] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:40.227] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.227] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.227] |  :  .  |  :  .   - attr(*, "total_size")= num 24127
[10:51:40.227] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.227] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.238] |  :  readImmediateCondition() ... DONE
[10:51:40.238] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.239] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:40.239] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:40.224] MulticoreFuture:
[10:51:40.224] Label: ‘future_vapply-2’
[10:51:40.224] Expression:
[10:51:40.224] {
[10:51:40.224]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.224]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.224]     "# as a global variable                                         "
[10:51:40.224]     do.call(function(...) {
[10:51:40.224]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.224]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.224]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.224]         "# anonymous function.                                          "
[10:51:40.224]         "#                                                              "
[10:51:40.224]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.224]         "# function environment of FUN() to the calling environment.    "
[10:51:40.224]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.224]         "# global environment, which is where globals are written.      "
[10:51:40.224]         penv <- env <- environment(...future.FUN)
[10:51:40.224]         repeat {
[10:51:40.224]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.224]                 emptyenv())) 
[10:51:40.224]                 break
[10:51:40.224]             penv <- env
[10:51:40.224]             env <- parent.env(env)
[10:51:40.224]         }
[10:51:40.224]         if (identical(penv, globalenv())) {
[10:51:40.224]             environment(...future.FUN) <- environment()
[10:51:40.224]         }
[10:51:40.224]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.224]             !isNamespace(penv)) {
[10:51:40.224]             parent.env(penv) <- environment()
[10:51:40.224]         }
[10:51:40.224]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.224]         {
[10:51:40.224]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.224]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.224]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.224]                 on.exit(options(oopts), add = TRUE)
[10:51:40.224]             }
[10:51:40.224]             {
[10:51:40.224]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.224]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.224]                   ..[10:51:40.239] |  :  .  |  :  .  - copied ‘stopf’ to environment
.future.FUN(...future.X_jj, ...)
[10:51:40.224]                 })
[10:51:40.224]             }
[10:51:40.224]         }
[10:51:40.224]     }, args = future.call.arguments)
[10:51:40.224] }
[10:51:40.224] Lazy evaluation: FALSE
[10:51:40.224] Asynchronous evaluation: TRUE
[10:51:40.224] Local evaluation: TRUE
[10:51:40.224] Environment: R_GlobalEnv
[10:51:40.224] Capture standard output: TRUE
[10:51:40.224] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.224] Immediate condition classes: ‘immediateCondition’
[10:51:40.224] Globals: 11 objects totaling 13.34 KiB (function ‘...future.FUN’ of 4.74 KiB, function ‘x_FUN’ of 311 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:40.224] Packages: 2 packages (‘stats’, ‘future.apply’)
[10:51:40.224] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.224] Resolved: FALSE
[10:51:40.224] Value: <not collected>
[10:51:40.224] Conditions captured: <none>
[10:51:40.224] Early signaling: FALSE
[10:51:40.224] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.224] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.239] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:40.239] Chunk #2 of 2 ... DONE
[10:51:40.239] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:40.239] Launching 2 futures (chunks) ... DONE
[10:51:40.239] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:40.239] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.239] Resolving 2 futures (chunks) ...
[10:51:40.240] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.240] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.240] |  :  value() on list ...
[10:51:40.240] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.240] |  :  .  recursive: 0
[10:51:40.240] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.240] |  :  .  length: 2
[10:51:40.240] |  :  .  
[10:51:40.241] |  :  .  Number of remaining objects: 2
[10:51:40.241] |  :  .  checking value #1 ...
[10:51:40.241] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.238] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.238] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.238] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.238] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.238] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.238] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.238] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.238] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.238] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.238] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.238] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.238] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.238] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.238] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.243] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.243] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.243] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.244] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.244] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.244] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.244] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.244] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.244] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.244] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.244] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.244] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.244] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.249] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.244] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.244] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.244] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.244] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.244] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.244] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.244] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.250] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.251] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.251] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.251] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.251] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.251] |  :  .  |  readImmediateCondition() ...
[10:51:40.252] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.252] |  :  .  |   - Number of RDS files: 0
[10:51:40.251] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.251] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.251] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.251] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.251] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.252] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.252] |  :  .  checking value #1 ... done
[10:51:40.252] |  :  .  checking value #2 ...
[10:51:40.253] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.249] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.249] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.249] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.249] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.252] |  :  .  |  :  .  |  :  List of 1
[10:51:40.252] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.252] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.252] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.252] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.252] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.252] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.252] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.256] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.256] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.256] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.256] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.256] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.257] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.257] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.257] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.257] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.257] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.258] |  :  .  |  :  .  assign_globals() ...
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.253] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.260] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.260] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.260] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.261] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.261] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.261] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.261] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.261] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.261] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.261] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.263] |  :  .  |  readImmediateCondition() ...
[10:51:40.263] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.264] |  :  .  |   - Number of RDS files: 0
[10:51:40.261] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.261] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.261] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.261] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.261] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.261] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.261] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.261] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.261] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.261] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.261] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.261] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.261] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.261] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.266] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.266] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.266] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.267] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.267] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.267] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.267] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.267] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.267] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.264] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.268] |  :  .  checking value #2 ... done
[10:51:40.258] |  :  .  |  :  .  List of 11
[10:51:40.258] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:40.258] |  :  .  |  :  .   $ x_FUN                    :function (x, ...)  
[10:51:40.258] |  :  .  |  :  .   $ times                    : int 5
[10:51:40.258] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.258] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:40.258] |  :  .  |  :  .   $ dim                      : NULL
[10:51:40.258] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:40.258] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:40.258] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.258] |  :  .  |  :  .   $ ...future.elements_ii    :List of 2
[10:51:40.258] |  :  .  |  :  .    ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:51:40.258] |  :  .  |  :  .    ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:51:40.258] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.258] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.258] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:40.258] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.258] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.258] |  :  .  |  :  .   - attr(*, "total_size")= num 24127
[10:51:40.258] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.258] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.273] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.273] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:40.273] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:40.274] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:40.274] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:40.274] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:40.274] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:40.274] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.275] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.275] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.275] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.275] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.279] |  :  .  Number of remaining objects: 2
[10:51:40.279] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.279] |  :  .  checking value #1 ...
[10:51:40.279] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.279] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.279] |  :  .  |  readImmediateCondition() ...
[10:51:40.279] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.280] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.280] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.280] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.280] |  :  .  |   - Number of RDS files: 0
[10:51:40.280] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.280] |  :  .  |  MulticoreFuture #1
[10:51:40.280] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.281] |  :  .  |  :  nx: 2
[10:51:40.281] |  :  .  |  :  relay: TRUE
[10:51:40.281] |  :  .  |  :  stdout: TRUE
[10:51:40.281] |  :  .  |  :  signal: TRUE
[10:51:40.281] |  :  .  |  :  resignal: FALSE
[10:51:40.281] |  :  .  |  :  force: TRUE
[10:51:40.282] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:40.282] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:40.282] |  :  .  |  :  until=1
[10:51:40.282] |  :  .  |  :  relaying element #1
[10:51:40.282] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.283] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.283] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.284] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.284] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.284] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.284] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.285] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.285] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.285] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.285] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.286] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.286] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.286] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.286] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.286] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.287] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:40.287] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.287] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.280] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.280] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.280] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.280] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.280] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.280] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.280] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.280] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.280] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.280] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.280] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.280] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.280] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.280] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.287] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.287] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.287] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.288] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.288] |  :  .  |  :  value: <list>
[10:51:40.288] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.288] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.288] |  :  .  |  :  nx: 2
[10:51:40.289] |  :  .  |  :  relay: TRUE
[10:51:40.289] |  :  .  |  :  stdout: TRUE
[10:51:40.289] |  :  .  |  :  signal: TRUE
[10:51:40.289] |  :  .  |  :  resignal: FALSE
[10:51:40.289] |  :  .  |  :  force: TRUE
[10:51:40.289] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.290] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.290] |  :  .  |  :  until=2
[10:51:40.290] |  :  .  |  :  relaying element #2
[10:51:40.290] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.290] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.291] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:40.291] |  :  .  |  length: 1 (resolved future 1)
[10:51:40.291] |  :  .  checking value #1 ... done
[10:51:40.291] |  :  .  checking value #2 ...
[10:51:40.291] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.287] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.287] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.287] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.287] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.287] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.287] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.287] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.287] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.292] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.292] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.293] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.299] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.299] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.299] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.299] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.300] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.300] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.300] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.300] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.300] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.300] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.302] |  :  .  |  readImmediateCondition() ...
[10:51:40.302] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.302] |  :  .  |   - Number of RDS files: 0
[10:51:40.302] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.303] |  :  .  checking value #2 ... done
[10:51:40.300] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.300] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.300] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.300] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.300] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.300] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.300] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.300] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.300] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.300] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.300] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.300] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.300] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.300] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.305] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.305] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.305] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.306] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.306] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.306] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.306] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.306] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.306] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.313] |  :  .  Number of remaining objects: 1
[10:51:40.313] |  :  .  checking value #2 ...
[10:51:40.313] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.313] |  :  .  |  readImmediateCondition() ...
[10:51:40.313] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.314] |  :  .  |   - Number of RDS files: 0
[10:51:40.314] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.314] |  :  .  |  MulticoreFuture #2
[10:51:40.314] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.314] |  :  .  |  :  nx: 2
[10:51:40.314] |  :  .  |  :  relay: TRUE
[10:51:40.314] |  :  .  |  :  stdout: TRUE
[10:51:40.314] |  :  .  |  :  signal: TRUE
[10:51:40.314] |  :  .  |  :  resignal: FALSE
[10:51:40.315] |  :  .  |  :  force: TRUE
[10:51:40.315] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.315] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.315] |  :  .  |  :  until=2
[10:51:40.315] |  :  .  |  :  relaying element #2
[10:51:40.315] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.316] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.316] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.316] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.316] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.316] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.317] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.317] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.317] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.317] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.317] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.318] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.318] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.318] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.318] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.318] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.318] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.319] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.319] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.319] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.319] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.319] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.319] |  :  .  |  :  value: <list>
[10:51:40.320] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.320] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.320] |  :  .  |  :  nx: 2
[10:51:40.320] |  :  .  |  :  relay: TRUE
[10:51:40.320] |  :  .  |  :  stdout: TRUE
[10:51:40.320] |  :  .  |  :  signal: TRUE
[10:51:40.320] |  :  .  |  :  resignal: FALSE
[10:51:40.321] |  :  .  |  :  force: TRUE
[10:51:40.321] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.321] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.321] |  :  .  |  :  until=2
[10:51:40.321] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.321] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.322] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.322] |  :  .  |  length: 0 (resolved future 2)
[10:51:40.322] |  :  .  checking value #2 ... done
[10:51:40.322] |  :  .  Relaying remaining futures ...
[10:51:40.322] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:40.323] |  :  .  |  :  nx: 2
[10:51:40.323] |  :  .  |  :  relay: TRUE
[10:51:40.323] |  :  .  |  :  stdout: TRUE
[10:51:40.323] |  :  .  |  :  signal: TRUE
[10:51:40.323] |  :  .  |  :  resignal: FALSE
[10:51:40.323] |  :  .  |  :  force: TRUE
[10:51:40.323] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.323] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:40.324] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.324] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.324] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:40.324] |  :  .  Relaying remaining futures ... done
[10:51:40.324] |  :  value() on list ... done
[10:51:40.324]  - Number of value chunks collected: 2
[10:51:40.324] Resolving 2 futures (chunks) ... DONE
[10:51:40.324] Reducing values from 2 chunks ...
[10:51:40.325]  - Number of values collected after concatenation: 3
[10:51:40.325]  - Number of values expected: 3
[10:51:40.325] Reducing values from 2 chunks ... DONE
[10:51:40.325] future_lapply() ... DONE
 num [1:5, 1:3] 1 3.25 5.5 7.75 10 ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:5] "0%" "25%" "50%" "75%" ...
  ..$ : chr [1:3] "a" "beta" "logic"
[10:51:40.327] future_lapply() ...
[10:51:40.333] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.334] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.334] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.334] Number of chunks: 2
[10:51:40.334] getGlobalsAndPackagesXApply() ...
[10:51:40.334]  - future.globals: TRUE
[10:51:40.335] |  :  getGlobalsAndPackages() ...
[10:51:40.335] |  :  .  Searching for globals ...
[10:51:40.341] |  :  .  |  globals found: [21] ‘FUN’, ‘{’, ‘<-’, ‘is.na’, ‘if’, ‘any’, ‘[’, ‘!’, ‘return’, ‘rep.int’, ‘sort’, ‘length’, ‘==’, ‘/’, ‘floor’, ‘(’, ‘+’, ‘c’, ‘-’, ‘*’, ‘ceiling’
[10:51:40.342] |  :  .  Searching for globals ... DONE
[10:51:40.342] |  :  .  Resolving globals: FALSE
[10:51:40.342] |  :  .  Search for packages associated with the globals ...
[10:51:40.342] |  :  .  |  Packages associated with globals: [2] ‘stats’, ‘base’
[10:51:40.343] |  :  .  |  Packages: [2] ‘stats’, ‘base’
[10:51:40.343] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.343] |  :  .  The total size of the 1 globals is 4.67 KiB (4777 bytes)
[10:51:40.344] |  :  .  The total size of the 1 globals exported for future expression (‘FUN()’) is 4.67 KiB There is one global: ‘FUN’ (4.67 KiB of class ‘function’)
[10:51:40.344] |  :  .  Packages after dropping 'base': [1] ‘stats’
[10:51:40.344] |  :  .  Packages after dropping non-attached packages: [1] ‘stats’
[10:51:40.344] |  :  .  globals: [1] ‘FUN’
[10:51:40.344] |  :  .  packages: [1] ‘stats’
[10:51:40.344] |  :  getGlobalsAndPackages() ... done
[10:51:40.344]  - globals found/used: [n=1] ‘FUN’
[10:51:40.345]  - needed namespaces: [n=1] ‘stats’
[10:51:40.345] Finding globals ... DONE
[10:51:40.345]  - use_args: TRUE
[10:51:40.345]  - Getting '...' globals ...
[10:51:40.345] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:40.345] |  :  .  recursive: 0
[10:51:40.346] |  :  .  length: 1
[10:51:40.346] |  :  .  elements: ‘...’
[10:51:40.346] |  :  .  'obj' is DotDotDotList
[10:51:40.346] |  :  .  resolve(obj, ...) ...
[10:51:40.346] |  :  .  resolve(obj, ...) ... done
[10:51:40.346] |  :  .  length: 0 (resolved future 1)
[10:51:40.346] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:40.346]    - '...' content: [n=0] 
[10:51:40.347] List of 1
[10:51:40.347]  $ ...: list()
[10:51:40.347]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.347]  - attr(*, "where")=List of 1
[10:51:40.347]   ..$ ...:<environment: 0x55d464595d70> 
[10:51:40.347]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.347]  - attr(*, "resolved")= logi TRUE
[10:51:40.347]  - attr(*, "total_size")= num NA
[10:51:40.349]  - Getting '...' globals ... DONE
[10:51:40.350] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:40.350] List of 2
[10:51:40.350]  $ ...future.FUN:function (x, na.rm = TRUE)  
[10:51:40.350]  $ ...          : list()
[10:51:40.350]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.350]  - attr(*, "where")=List of 2
[10:51:40.350]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:40.350]   ..$ ...          :<environment: 0x55d464595d70> 
[10:51:40.350]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.350]  - attr(*, "resolved")= logi FALSE
[10:51:40.350]  - attr(*, "total_size")= num 18895
[10:51:40.353] Packages to be attached in all futures: [n=1] ‘stats’
[10:51:40.353] getGlobalsAndPackagesXApply() ... DONE
[10:51:40.353] Number of futures (= number of chunks): 2
[10:51:40.353] Launching 2 futures (chunks) ...
[10:51:40.354] Chunk #1 of 2 ...
[10:51:40.354]  - Finding globals in 'X' for chunk #1 ...
[10:51:40.354] |  :  getGlobalsAndPackages() ...
[10:51:40.354] |  :  .  Searching for globals ...
[10:51:40.354] |  :  .  |  globals found: [0] 
[10:51:40.354] |  :  .  Searching for globals ... DONE
[10:51:40.355] |  :  .  globals: [0] <none>
[10:51:40.355] |  :  .  packages: [0] <none>
[10:51:40.355] |  :  getGlobalsAndPackages() ... done
[10:51:40.355]    + additional globals found: [n=0] 
[10:51:40.355]    + additional namespaces needed: [n=0] 
[10:51:40.355]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:40.355]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.355]  - seeds: <none>
[10:51:40.355]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.355] |  :  getGlobalsAndPackages() ...
[10:51:40.356] |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.356] |  :  .  Resolving globals: FALSE
[10:51:40.356] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.356] |  :  .  |  {
[10:51:40.356] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.356] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.356] |  :  .  |      "# as a global variable                                         "
[10:51:40.356] |  :  .  |      do.call(function(...) {
[10:51:40.356] |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.356] |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.356] |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.356] |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:51:40.356] |  :  .  |          }
[10:51:40.356] |  :  .  |          {
[10:51:40.356] |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.356] |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.356] |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:51:40.356] |  :  .  |              })
[10:51:40.356] |  :  .  |          }
[10:51:40.356] |  :  .  |      }, args = future.call.arguments)
[10:51:40.356] |  :  .  |  }
[10:51:40.356] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.356] |  :  .  Search for packages associated with the globals ...
[10:51:40.357] |  :  .  |  Packages associated with globals: [1] ‘stats’
[10:51:40.357] |  :  .  |  Packages: [1] ‘stats’
[10:51:40.357] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.357] |  :  .  Packages after dropping 'base': [1] ‘stats’
[10:51:40.357] |  :  .  Packages after dropping non-attached packages: [1] ‘stats’
[10:51:40.358] |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.358] |  :  .  packages: [1] ‘stats’
[10:51:40.358] |  :  getGlobalsAndPackages() ... done
[10:51:40.358] |  :  run() for Future (‘Future’) ...
[10:51:40.358] |  :  .  state: ‘created’
[10:51:40.358] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.359] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.359] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.359] |  :  .  |  Launching futures ...
[10:51:40.359] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.359] |  :  .  |  :  .  getFutureData() ...
[10:51:40.359] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.359] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘stats’
[10:51:40.359] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.359] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.360] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.360] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.360] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.360] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.360] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.360] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.360] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.361] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.361] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.361] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.364] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.364] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.364] |  :  .  |  Launching futures ... done
[10:51:40.364] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.364] |  :  .  |  :  .  attachPackages() ...
[10:51:40.365] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.365] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.365] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.365] Created future:
[10:51:40.365] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.365] |  :  .  |  :  .  attachPackages() ...
[10:51:40.365] |  :  .  |  :  .  |  packages: [n=1] ‘stats’
[10:51:40.366] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.367] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.367] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.368] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.368] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.369] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.369] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.369] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.370] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.370] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.370] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.370] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.370] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.370] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.370] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.370] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.373] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.377] |  :  readImmediateCondition() ...
[10:51:40.377] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.378] |  :   - Number of RDS files: 0
[10:51:40.378] |  :  readImmediateCondition() ... DONE
[10:51:40.374] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.374] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.374] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.374] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.374] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.374] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.374] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.374] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.374] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.374] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.374] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.374] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.374] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.374] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.378] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.378] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.365] MulticoreFuture:
[10:51:40.365] Label: ‘future_sapply-1’
[10:51:40.365] Expression:
[10:51:40.365] {
[10:51:40.365]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.365]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.365]     "# as a global variable                                         "
[10:51:40.365]     do.call(function(...) {
[10:51:40.365]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.365]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.365]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.365]             on.exit(options(oopts), add = TRUE)
[10:51:40.365]         }
[10:51:40.365]         {
[10:51:40.365]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.365]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.365]                 ...future.FUN(...future.X_jj, ...)
[10:51:40.365]             })
[10:51:40.365]         }
[10:51:40.365]     }, args = future.call.arguments)
[10:51:40.365] }
[10:51:40.365] Lazy evaluation: FALSE
[10:51:40.365] Asynchronous evaluation: TRUE
[10:51:40.365] Local evaluation: TRUE
[10:51:40.365] Environment: R_GlobalEnv
[10:51:40.365] Capture standard output: TRUE
[10:51:40.365] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.365] Immediate condition classes: ‘immediateCondition’
[10:51:40.365] Globals: 5 objects totaling 5.17 KiB (function ‘...future.FUN’ of 4.67 KiB, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 369 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:40.365] Packages: 1 packages (‘stats’)
[10:51:40.365] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.365] Resolved: FALSE
[10:51:40.365] Value: <not collected>
[10:51:40.365] Conditions captured: <none>
[10:51:40.365] Early signaling: FALSE
[10:51:40.365] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.365] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.378] Chunk #1 of 2 ... DONE
[10:51:40.379] Chunk #2 of 2 ...
[10:51:40.379]  - Finding globals in 'X' for chunk #2 ...
[10:51:40.379] |  :  getGlobalsAndPackages() ...
[10:51:40.379] |  :  .  Searching for globals ...
[10:51:40.380] |  :  .  |  globals found: [0] 
[10:51:40.380] |  :  .  Searching for globals ... DONE
[10:51:40.380] |  :  .  globals: [0] <none>
[10:51:40.380] |  :  .  packages: [0] <none>
[10:51:40.380] |  :  getGlobalsAndPackages() ... done
[10:51:40.380]    + additional globals found: [n=0] 
[10:51:40.380]    + additional namespaces needed: [n=0] 
[10:51:40.380]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:40.381]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.381]  - seeds: <none>
[10:51:40.381]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.381] |  :  getGlobalsAndPackages() ...
[10:51:40.381] |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.381] |  :  .  Resolving globals: FALSE
[10:51:40.381] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.382] |  :  .  |  {
[10:51:40.382] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.382] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.382] |  :  .  |      "# as a global variable                                         "
[10:51:40.382] |  :  .  |      do.call(function(...) {
[10:51:40.382] |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.382] |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.382] |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.382] |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:51:40.382] |  :  .  |          }
[10:51:40.382] |  :  .  |          {
[10:51:40.382] |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.382] |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.382] |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:51:40.382] |  :  .  |              })
[10:51:40.382] |  :  .  |          }
[10:51:40.382] |  :  .  |      }, args = future.call.arguments)
[10:51:40.382] |  :  .  |  }
[10:51:40.382] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.382] |  :  .  Search for packages associated with the globals ...
[10:51:40.382] |  :  .  |  Packages associated with globals: [1] ‘stats’
[10:51:40.383] |  :  .  |  Packages: [1] ‘stats’
[10:51:40.383] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.383] |  :  .  Packages after dropping 'base': [1] ‘stats’
[10:51:40.383] |  :  .  Packages after dropping non-attached packages: [1] ‘stats’
[10:51:40.384] |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.384] |  :  .  packages: [1] ‘stats’
[10:51:40.384] |  :  getGlobalsAndPackages() ... done
[10:51:40.384] |  :  run() for Future (‘Future’) ...
[10:51:40.378] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.378] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.378] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.378] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.378] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.378] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.378] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.384] |  :  .  state: ‘created’
[10:51:40.385] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.385] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.385] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.385] |  :  .  |  Launching futures ...
[10:51:40.385] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.385] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.385] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.385] |  :  .  |  :  .  getFutureData() ...
[10:51:40.385] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.385] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.386] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.386] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘stats’
[10:51:40.386] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.386] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.386] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.386] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.386] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.386] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.386] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.386] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.386] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.386] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.386] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.386] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.387] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.387] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.387] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.387] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.387] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.388] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.386] |  :  .  |  :  .  |  :  List of 1
[10:51:40.386] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.386] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.386] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.386] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.386] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.386] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.386] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.390] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.390] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.390] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.390] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.390] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.390] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.390] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.391] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.391] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.391] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.391] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.391] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.391] |  :  .  |  Launching futures ... done
[10:51:40.392] |  :  .  |  :  .  assign_globals() ...
[10:51:40.391] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.391] |  :  .  |  :  .  attachPackages() ...
[10:51:40.392] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.392] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.392] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.392] Created future:
[10:51:40.392] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.393] |  :  .  |  :  .  attachPackages() ...
[10:51:40.393] |  :  .  |  :  .  |  packages: [n=1] ‘stats’
[10:51:40.393] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.394] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.395] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.395] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.395] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.396] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.396] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.396] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.392] |  :  .  |  :  .  List of 5
[10:51:40.392] |  :  .  |  :  .   $ ...future.FUN            :function (x, na.rm = TRUE)  
[10:51:40.392] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:40.392] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.392] |  :  .  |  :  .   $ ...future.elements_ii    :List of 4
[10:51:40.392] |  :  .  |  :  .    ..$ : int [1:3] 1 2 3
[10:51:40.392] |  :  .  |  :  .    ..$ : int [1:4] 1 2 3 4
[10:51:40.392] |  :  .  |  :  .    ..$ : int [1:5] 1 2 3 4 5
[10:51:40.392] |  :  .  |  :  .    ..$ : int [1:6] 1 2 3 4 5 6
[10:51:40.392] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.392] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.392] |  :  .  |  :  .   - attr(*, "where")=List of 5
[10:51:40.392] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.392] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.392] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.392] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.392] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.392] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.392] |  :  .  |  :  .   - attr(*, "total_size")= num 18895
[10:51[10:51:40.396] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.396] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, ear:40.392] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.392] |  :  .  |  :  .   - alySignal = FALSE, envir = parent.frame())  
[10:51:40.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequentttr(*, "already-done")= logi TRUE
ial" "uniprocess" "future" "function"
[10:51:40.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.396] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.396] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.400] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.400] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.400] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.400] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.400] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.401] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.401] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.404] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.404] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.404] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.400] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.400] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.400] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.400] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.400] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.400] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.400] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.400] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.400] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.400] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.400] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores[10:51:40.404] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.400] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.400] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.400] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.404] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.404] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.405] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.405] |  :  readImmediateCondition() ...
[10:51:40.405] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.406] |  :   - Number of RDS files: 0
[10:51:40.406] |  :  readImmediateCondition() ... DONE
[10:51:40.393] MulticoreFuture:
[10:51:40.393] Label: ‘future_sapply-2’
[10:51:40.393] Expression:
[10:51:40.393] {
[10:51:40.393]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.393]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.393]     "# as a global variable                                         "
[10:51:40.393]     do.call(function(...) {
[10:51:40.393]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.393]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.393]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.393]             on.exit(options(oopts), add = TRUE)
[10:51:40.393]         }
[10:51:40.393]         {
[10:51:40.393]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.393]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.393]                 ...future.FUN(...future.X_jj, ...)
[10:51:40.393]             })
[10:51:40.393]         }
[10:51:40.393]     }, args = future.call.arguments)
[10:51:40.393] }
[10:51:40.393] Lazy evaluation: FALSE
[10:51:40.393] Asynchronous evaluation: TRUE
[10:51:40.393] Local evaluation: TRUE
[10:51:40.393] Environment: R_GlobalEnv
[10:51:40.393] Capture standard output: TRUE
[10:51:40.393] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.393] Immediate condition classes: ‘immediateCondition’
[10:51:40.393] Globals: 5 objects totaling 5.10 KiB (function ‘...future.FUN’ of 4.67 KiB, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 293 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:40.393] Packages: 1 packages (‘stats’)
[10:51:40.393] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.393] Resolved: FALSE
[10:51:40.393] Value: <not collected>
[10:51:40.393] Conditions captured: <none>
[10:51:40.393] Early signaling: FALSE
[10:51:40.393] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.393] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.407] Chunk #2 of 2 ... DONE
[10:51:40.407] Launching 2 futures (chunks) ... DONE
[10:51:40.407] Resolving 2 futures (chunks) ...
[10:51:40.407] |  :  value() on list ...
[10:51:40.407] |  :  .  recursive: 0
[10:51:40.408] |  :  .  length: 2
[10:51:40.408] |  :  .  
[10:51:40.408] |  :  .  Number of remaining objects: 2
[10:51:40.408] |  :  .  checking value #1 ...
[10:51:40.408] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.405] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.405] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.405] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.405] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.405] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.405] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.409] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.405] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.405] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.405] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.405] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.405] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.405] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.405] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.413] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.413] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.413] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.413] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.413] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.414] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.414] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.414] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.414] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.414] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.409] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.409] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.409] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.409] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.409] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.409] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.409] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.409] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.414] |  :  .  |  :  .  |  :  List of 1
[10:51:40.414] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.414] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.414] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.414] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.414] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.414] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.414] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.417] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.418] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.418] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.418] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.418] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.418] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.419] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.419] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.419] |  :  .  |  readImmediateCondition() ...
[10:51:40.419] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.419] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.419] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.419] |  :  .  |   - Number of RDS files: 0
[10:51:40.420] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.420] |  :  .  |  :  .  assign_globals() ...
[10:51:40.420] |  :  .  checking value #1 ... done
[10:51:40.420] |  :  .  checking value #2 ...
[10:51:40.420] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.416] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.424] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.424] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.425] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.425] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.425] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.425] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.425] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.425] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.425] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.425] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.431] |  :  .  |  readImmediateCondition() ...
[10:51:40.426] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.426] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.426] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.426] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.426] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.426] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.426] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.426] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.426] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.426] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.426] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.426] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.426] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.426] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.431] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.431] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.431] |  :  .  |   - Number of RDS files: 0
[10:51:40.431] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.431] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.432] |  :  .  checking value #2 ... done
[10:51:40.432] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.432] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.432] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.432] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.433] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.433] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.433] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.420] |  :  .  |  :  .  List of 5
[10:51:40.420] |  :  .  |  :  .   $ ...future.FUN            :function (x, na.rm = TRUE)  
[10:51:40.420] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:40.420] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.420] |  :  .  |  :  .   $ ...future.elements_ii    :List of 3
[10:51:40.420] |  :  .  |  :  .    ..$ : int [1:7] 1 2 3 4 5 6 7
[10:51:40.420] |  :  .  |  :  .    ..$ : int [1:8] 1 2 3 4 5 6 7 8
[10:51:40.420] |  :  .  |  :  .    ..$ : int [1:9] 1 2 3 4 5 6 7 8 9
[10:51:40.420] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.420] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.420] |  :  .  |  :  .   - attr(*, "where")=List of 5
[10:51:40.420] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.420] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.420] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.420] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.420] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.420] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.420] |  :  .  |  :  .   - attr(*, "total_size")= num 18895
[10:51:40.420] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.420] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.433] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.433] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.433] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.434] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.434] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.434] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.437] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.437] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.437] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.437] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.437] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.442] |  :  .  Number of remaining objects: 2
[10:51:40.438] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.438] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.438] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.438] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.438] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.438] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.438] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.438] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.438] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.438] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.438] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.438] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.438] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.438] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.442] |  :  .  checking value #1 ...
[10:51:40.442] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.442] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.443] |  :  .  |  readImmediateCondition() ...
[10:51:40.443] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.443] |  :  .  |   - Number of RDS files: 0
[10:51:40.443] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.443] |  :  .  |  MulticoreFuture #1
[10:51:40.444] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.444] |  :  .  |  :  nx: 2
[10:51:40.444] |  :  .  |  :  relay: TRUE
[10:51:40.444] |  :  .  |  :  stdout: TRUE
[10:51:40.444] |  :  .  |  :  signal: TRUE
[10:51:40.444] |  :  .  |  :  resignal: FALSE
[10:51:40.445] |  :  .  |  :  force: TRUE
[10:51:40.445] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:40.445] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:40.445] |  :  .  |  :  until=1
[10:51:40.445] |  :  .  |  :  relaying element #1
[10:51:40.446] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.447] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.442] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.442] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.442] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.442] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.442] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.442] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.442] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.442] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.447] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.447] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.447] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.447] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.447] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.448] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.448] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.448] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.448] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.449] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.449] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.449] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.449] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.450] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.450] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.450] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.450] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:40.450] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.451] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.451] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.451] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.451] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.451] |  :  .  |  :  value: <list>
[10:51:40.452] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.452] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.452] |  :  .  |  :  nx: 2
[10:51:40.452] |  :  .  |  :  relay: TRUE
[10:51:40.452] |  :  .  |  :  stdout: TRUE
[10:51:40.452] |  :  .  |  :  signal: TRUE
[10:51:40.453] |  :  .  |  :  resignal: FALSE
[10:51:40.453] |  :  .  |  :  force: TRUE
[10:51:40.453] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.453] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.453] |  :  .  |  :  until=2
[10:51:40.453] |  :  .  |  :  relaying element #2
[10:51:40.454] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.454] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.454] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:40.454] |  :  .  |  length: 1 (resolved future 1)
[10:51:40.455] |  :  .  checking value #1 ... done
[10:51:40.455] |  :  .  checking value #2 ...
[10:51:40.455] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.448] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.457] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.457] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.457] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.458] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.458] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.458] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.458] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.458] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.458] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.458] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.458] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.458] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.458] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.458] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.458] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.458] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.458] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.458] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.458] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.458] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.458] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.458] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.458] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.458] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.463] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.463] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.463] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.463] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.464] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.464] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.464] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.464] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.464] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.465] |  :  .  |  readImmediateCondition() ...
[10:51:40.465] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.465] |  :  .  |   - Number of RDS files: 0
[10:51:40.465] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.465] |  :  .  |  MulticoreFuture #2
[10:51:40.465] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.465] |  :  .  |  :  nx: 2
[10:51:40.466] |  :  .  |  :  relay: TRUE
[10:51:40.466] |  :  .  |  :  stdout: TRUE
[10:51:40.466] |  :  .  |  :  signal: TRUE
[10:51:40.466] |  :  .  |  :  resignal: FALSE
[10:51:40.466] |  :  .  |  :  force: TRUE
[10:51:40.466] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.466] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.466] |  :  .  |  :  until=2
[10:51:40.466] |  :  .  |  :  relaying element #2
[10:51:40.466] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.467] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.467] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.467] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.468] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.468] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.468] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.468] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.468] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.468] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.469] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.469] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.469] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.469] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.469] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.470] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.470] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.470] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.470] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.470] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.470] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.471] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.471] |  :  .  |  :  value: <list>
[10:51:40.471] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.471] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.471] |  :  .  |  :  nx: 2
[10:51:40.471] |  :  .  |  :  relay: TRUE
[10:51:40.471] |  :  .  |  :  stdout: TRUE
[10:51:40.472] |  :  .  |  :  signal: TRUE
[10:51:40.472] |  :  .  |  :  resignal: FALSE
[10:51:40.472] |  :  .  |  :  force: TRUE
[10:51:40.472] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.472] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.472] |  :  .  |  :  until=2
[10:51:40.472] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.473] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.473] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.473] |  :  .  |  length: 0 (resolved future 2)
[10:51:40.473] |  :  .  checking value #2 ... done
[10:51:40.473] |  :  .  Relaying remaining futures ...
[10:51:40.474] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:40.474] |  :  .  |  :  nx: 2
[10:51:40.474] |  :  .  |  :  relay: TRUE
[10:51:40.474] |  :  .  |  :  stdout: TRUE
[10:51:40.474] |  :  .  |  :  signal: TRUE
[10:51:40.474] |  :  .  |  :  resignal: FALSE
[10:51:40.474] |  :  .  |  :  force: TRUE
[10:51:40.474] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.474] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:40.475] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.475] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.475] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:40.475] |  :  .  Relaying remaining futures ... done
[10:51:40.475] |  :  value() on list ... done
[10:51:40.475]  - Number of value chunks collected: 2
[10:51:40.475] Resolving 2 futures (chunks) ... DONE
[10:51:40.475] Reducing values from 2 chunks ...
[10:51:40.475]  - Number of values collected after concatenation: 7
[10:51:40.476]  - Number of values expected: 7
[10:51:40.476] Reducing values from 2 chunks ... DONE
[10:51:40.476] future_lapply() ... DONE
[10:51:40.476] future_lapply() ...
[10:51:40.479] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.479] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.479] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.480] Number of chunks: 2
[10:51:40.480] getGlobalsAndPackagesXApply() ...
[10:51:40.480]  - future.globals: TRUE
[10:51:40.480] |  :  getGlobalsAndPackages() ...
[10:51:40.480] |  :  .  Searching for globals ...
[10:51:40.493] |  :  .  |  globals found: [31] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘is.na’, ‘any’, ‘[’, ‘!’, ‘return’, ‘rep.int’, ‘sort’, ‘/’, ‘floor’, ‘(’, ‘+’, ‘c’, ‘-’, ‘*’, ‘ceiling’
[10:51:40.493] |  :  .  Searching for globals ... DONE
[10:51:40.493] |  :  .  Resolving globals: FALSE
[10:51:40.493] |  :  .  Search for packages associated with the globals ...
[10:51:40.494] |  :  .  |  Packages associated with globals: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:40.494] |  :  .  |  Packages: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:40.494] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.495] |  :  .  The total size of the 7 globals is 26.71 KiB (27354 bytes)
[10:51:40.495] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 26.71 KiB The three largest globals are ‘FUN’ (14.07 KiB of class ‘function’), ‘x_FUN’ (4.67 KiB of class ‘function’) and ‘stop_if_not’ (4.51 KiB of class ‘function’)
[10:51:40.496] |  :  .  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:40.496] |  :  .  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:40.496] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:40.496] |  :  .  packages: [2] ‘stats’, ‘future.apply’
[10:51:40.496] |  :  getGlobalsAndPackages() ... done
[10:51:40.496]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:40.496]  - needed namespaces: [n=2] ‘stats’, ‘future.apply’
[10:51:40.497] Finding globals ... DONE
[10:51:40.497]  - use_args: TRUE
[10:51:40.497]  - Getting '...' globals ...
[10:51:40.497] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:40.497] |  :  .  recursive: 0
[10:51:40.497] |  :  .  length: 1
[10:51:40.497] |  :  .  elements: ‘...’
[10:51:40.498] |  :  .  'obj' is DotDotDotList
[10:51:40.498] |  :  .  resolve(obj, ...) ...
[10:51:40.498] |  :  .  resolve(obj, ...) ... done
[10:51:40.498] |  :  .  length: 0 (resolved future 1)
[10:51:40.498] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:40.498]    - '...' content: [n=0] 
[10:51:40.498] List of 1
[10:51:40.498]  $ ...: list()
[10:51:40.498]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.498]  - attr(*, "where")=List of 1
[10:51:40.498]   ..$ ...:<environment: 0x55d467409120> 
[10:51:40.498]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.498]  - attr(*, "resolved")= logi TRUE
[10:51:40.498]  - attr(*, "total_size")= num NA
[10:51:40.501]  - Getting '...' globals ... DONE
[10:51:40.502] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:40.502] List of 8
[10:51:40.502]  $ ...future.FUN:function (x, ...)  
[10:51:40.502]  $ x_FUN        :function (x, na.rm = TRUE)  
[10:51:40.502]  $ times        : int 5
[10:51:40.502]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.502]  $ stop_if_not  :function (...)  
[10:51:40.502]  $ dim          : NULL
[10:51:40.502]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:40.502]  $ ...          : list()
[10:51:40.502]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.502]  - attr(*, "where")=List of 8
[10:51:40.502]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:40.502]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:40.502]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:40.502]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:40.502]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:40.502]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:40.502]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:40.502]   ..$ ...          :<environment: 0x55d467409120> 
[10:51:40.502]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.502]  - attr(*, "resolved")= logi FALSE
[10:51:40.502]  - attr(*, "total_size")= num 48005
[10:51:40.509] Packages to be attached in all futures: [n=2] ‘stats’, ‘future.apply’
[10:51:40.509] getGlobalsAndPackagesXApply() ... DONE
[10:51:40.509] Number of futures (= number of chunks): 2
[10:51:40.510] Launching 2 futures (chunks) ...
[10:51:40.510] Chunk #1 of 2 ...
[10:51:40.510]  - Finding globals in 'X' for chunk #1 ...
[10:51:40.510] |  :  getGlobalsAndPackages() ...
[10:51:40.510] |  :  .  Searching for globals ...
[10:51:40.510] |  :  .  |  globals found: [0] 
[10:51:40.511] |  :  .  Searching for globals ... DONE
[10:51:40.511] |  :  .  globals: [0] <none>
[10:51:40.511] |  :  .  packages: [0] <none>
[10:51:40.511] |  :  getGlobalsAndPackages() ... done
[10:51:40.511]    + additional globals found: [n=0] 
[10:51:40.511]    + additional namespaces needed: [n=0] 
[10:51:40.511]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:40.511]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.511]  - seeds: <none>
[10:51:40.511]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.512] |  :  getGlobalsAndPackages() ...
[10:51:40.512] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.512] |  :  .  Resolving globals: FALSE
[10:51:40.512] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.512] |  :  .  |  {
[10:51:40.512] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.512] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.512] |  :  .  |      "# as a global variable                                         "
[10:51:40.512] |  :  .  |      do.call(function(...) {
[10:51:40.512] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.512] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.512] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.512] |  :  .  |          "# anonymous function.                                          "
[10:51:40.512] |  :  .  |          "#                                                              "
[10:51:40.512] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.512] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.512] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.512] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.512] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.512] |  :  .  |          repeat {
[10:51:40.512] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.512] |  :  .  |                  emptyenv())) 
[10:51:40.512] |  :  .  |                  break
[10:51:40.512] |  :  .  |              penv <- env
[10:51:40.512] |  :  .  |              env <- parent.env(env)
[10:51:40.512] |  :  .  |          }
[10:51:40.512] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.512] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.512] |  :  .  |          }
[10:51:40.512] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.512] |  :  .  |              !isNamespace(penv)) {
[10:51:40.512] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.512] |  :  .  |          }
[10:51:40.512] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.512] |  :  .  |          {
[10:51:40.512] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.512] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.512] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.512] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.512] |  :  .  |              }
[10:51:40.512] |  :  .  |              {
[10:51:40.512] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.512] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.512] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.512] |  :  .  |                  })
[10:51:40.512] |  :  .  |              }
[10:51:40.512] |  :  .  |          }
[10:51:40.512] |  :  .  |      }, args = future.call.arguments)
[10:51:40.512] |  :  .  |  }
[10:51:40.513] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.513] |  :  .  Search for packages associated with the globals ...
[10:51:40.513] |  :  .  |  Packages associated with globals: [2] ‘stats’, ‘future.apply’
[10:51:40.513] |  :  .  |  Packages: [2] ‘stats’, ‘future.apply’
[10:51:40.514] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.514] |  :  .  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:40.514] |  :  .  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:40.514] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.514] |  :  .  packages: [2] ‘stats’, ‘future.apply’
[10:51:40.514] |  :  getGlobalsAndPackages() ... done
[10:51:40.515] |  :  run() for Future (‘Future’) ...
[10:51:40.515] |  :  .  state: ‘created’
[10:51:40.515] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.515] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.515] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.515] |  :  .  |  Launching futures ...
[10:51:40.515] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.515] |  :  .  |  :  .  getFutureData() ...
[10:51:40.516] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.516] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 2): ‘stats’, ‘future.apply’
[10:51:40.516] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.516] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.516] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.516] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.516] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.516] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.517] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.517] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.517] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.517] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.517] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.517] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.520] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.520] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.521] |  :  .  |  Launching futures ... done
[10:51:40.521] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.521] |  :  .  |  :  .  attachPackages() ...
[10:51:40.521] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.521] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.521] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.521] Created future:
[10:51:40.521] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.522] |  :  .  |  :  .  attachPackages() ...
[10:51:40.522] |  :  .  |  :  .  |  packages: [n=2] ‘stats’, ‘future.apply’
[10:51:40.522] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.523] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.523] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.523] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.524] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.524] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.524] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.525] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.525] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.525] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.525] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.525] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.525] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.525] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.525] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.525] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.529] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.529] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.529] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.529] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.529] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.529] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.529] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.529] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.529] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.529] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.529] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.529] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.529] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.529] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.529] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.534] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.534] |  :  readImmediateCondition() ...
[10:51:40.534] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.534] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.534] |  :   - Number of RDS files: 0
[10:51:40.534] |  :  readImmediateCondition() ... DONE
[10:51:40.521] MulticoreFuture:
[10:51:40.521] Label: ‘future_vapply-1’
[10:51:40.521] Expression:
[10:51:40.521] {
[10:51:40.521]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.521]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.521]     "# as a global variable                                         "
[10:51:40.521]     do.call(function(...) {
[10:51:40.521]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.521]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.521]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.521]         "# anonymous function.                                          "
[10:51:40.521]         "#                                                              "
[10:51:40.521]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.521]         "# function environment of FUN() to the calling environment.    "
[10:51:40.521]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.521]         "# global environment, which is where globals are written.      "
[10:51:40.521]         penv <- env <- environment(...future.FUN)
[10:51:40.521]         repeat {
[10:51:40.521]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.521]                 emptyenv())) 
[10:51:40.521]                 break
[10:51:40.521]             penv <- env
[10:51:40.521]             env <- parent.env(env)
[10:51:40.521]         }
[10:51:40.521]         if (identical(penv, globalenv())) {
[10:51:40.521]             environment(...future.FUN) <- environment()
[10:51:40.521]         }
[10:51:40.521]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.521]             !isNamespace(penv)) {
[10:51:40.521]             parent.env(penv) <- environment()
[10:51:40.521]         }
[10:51:40.521]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.521]         {
[10:51:40.521]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.521]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.521]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.521]                 on.exit(options(oopts), add = TRUE)
[10:51:40.521]             }
[10:51:40.521]             {
[10:51:40.521]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.521]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.521]                   ...future.FUN(...future.X_jj, ...)
[10:51:40.521]                 })
[10:51:40.521]             }
[10:51:40.521]         }
[10:51:40.521]     }, args = future.call.arguments)
[10:51:40.521] }
[10:51:40.521] Lazy evaluation: FALSE
[10:51:40.521] Asynchronous evaluation: TRUE
[10:51:40.521] Local evaluation: TRUE
[10:51:40.521] Environment: R_GlobalEnv
[10:51:40.521] Capture standard output: TRUE
[10:51:40.521] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.521] Immediate condition classes: ‘immediateCondition’
[10:51:40.521] Globals: 11 objects totaling 27.22 KiB (function ‘...future.FUN’ of 14.07 KiB, function ‘x_FUN’ of 4.67 KiB, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:40.521] Packages: 2 packages (‘stats’, ‘future.apply’)
[10:51:40.521] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.521] Resolved: FALSE
[10:51:40.521] Value: <not collected>
[10:51:40.521] Conditions captured: <none>
[10:51:40.521] Early signaling: FALSE
[10:51:40.521] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.521] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.535] Chunk #1 of 2 ... DONE
[10:51:40.535] Chunk #2 of 2 ...
[10:51:40.535]  - Finding globals in 'X' for chunk #2 ...
[10:51:40.535] |  :  getGlobalsAndPackages() ...
[10:51:40.536] |  :  .  Searching for globals ...
[10:51:40.536] |  :  .  |  globals found: [0] 
[10:51:40.536] |  :  .  Searching for globals ... DONE
[10:51:40.536] |  :  .  globals: [0] <none>
[10:51:40.536] |  :  .  packages: [0] <none>
[10:51:40.537] |  :  getGlobalsAndPackages() ... done
[10:51:40.537]    + additional globals found: [n=0] 
[10:51:40.537]    + additional namespaces needed: [n=0] 
[10:51:40.537]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:40.537]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.537]  - seeds: <none>
[10:51:40.537]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.537] |  :  getGlobalsAndPackages() ...
[10:51:40.537] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.538] |  :  .  Resolving globals: FALSE
[10:51:40.538] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.538] |  :  .  |  {
[10:51:40.538] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.538] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.538] |  :  .  |      "# as a global variable                                         "
[10:51:40.538] |  :  .  |      do.call(function(...) {
[10:51:40.538] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.538] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.538] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.538] |  :  .  |          "# anonymous function.                                          "
[10:51:40.538] |  :  .  |          "#                                                              "
[10:51:40.538] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.538] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.538] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.538] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.538] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.538] |  :  .  |          repeat {
[10:51:40.538] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.538] |  :  .  |                  emptyenv())) 
[10:51:40.538] |  :  .  |                  break
[10:51:40.538] |  :  .  |              penv <- env
[10:51:40.538] |  :  .  |              env <- parent.env(env)
[10:51:40.538] |  :  .  |          }
[10:51:40.538] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.538] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.538] |  :  .  |          }
[10:51:40.538] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.538] |  :  .  |              !isNamespace(penv)) {
[10:51:40.538] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.538] |  :  .  |          }
[10:51:40.538] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.538] |  :  .  |          {
[10:51:40.538] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.538] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.538] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.538] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.538] |  :  .  |              }
[10:51:40.538] |  :  .  |              {
[10:51:40.538] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.538] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.538] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.538] |  :  .  |                  })
[10:51:40.538] |  :  .  |              }
[10:51:40.538] |  :  .  |          }
[10:51:40.538] |  :  .  |      }, args = future.call.arguments)
[10:51:40.538] |  :  .  |  }
[10:51:40.539] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.539] |  :  .  Search for packages associated with the globals ...
[10:51:40.539] |  :  .  |  Packages associated with globals: [2] ‘stats’, ‘future.apply’
[10:51:40.540] |  :  .  |  Packages: [2] ‘stats’, ‘future.apply’
[10:51:40.534] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.534] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.534] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.534] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.534] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.534] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.534] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.540] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.540] |  :  .  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:40.540] |  :  .  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:40.540] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.541] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.541] |  :  .  packages: [2] ‘stats’, ‘future.apply’
[10:51:40.541] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.541] |  :  getGlobalsAndPackages() ... done
[10:51:40.541] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.541] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.541] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.541] |  :  run() for Future (‘Future’) ...
[10:51:40.541] |  :  .  state: ‘created’
[10:51:40.541] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.542] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.542] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.541] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.541] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.541] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.541] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.541] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.542] |  :  .  |  Launching futures ...
[10:51:40.542] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.542] |  :  .  |  :  .  getFutureData() ...
[10:51:40.542] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.543] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 2): ‘stats’, ‘future.apply’
[10:51:40.543] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.543] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.543] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.543] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.543] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.543] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.543] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.544] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.544] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.544] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.544] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.545] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.542] |  :  .  |  :  .  |  :  List of 1
[10:51:40.542] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.542] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.542] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.542] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.542] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.542] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.542] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.545] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.545] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.545] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.546] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.546] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.546] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.546] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.546] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.546] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.547] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.547] |  :  .  |  :  .  assign_globals() ...
[10:51:40.547] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.548] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.548] |  :  .  |  Launching futures ... done
[10:51:40.548] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.548] |  :  .  |  :  .  attachPackages() ...
[10:51:40.548] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.548] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.549] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.549] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.549] Created future:
[10:51:40.549] |  :  .  |  :  .  attachPackages() ...
[10:51:40.549] |  :  .  |  :  .  |  packages: [n=2] ‘stats’, ‘future.apply’
[10:51:40.550] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.551] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.551] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.552] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.552] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.553] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.553] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.553] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.553] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.553] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.553] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.553] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.557] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.547] |  :  .  |  :  .  List of 11
[10:51:40.547] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:40.547] |  :  .  |  :  .   $ x_FUN                    :function (x, na.rm = TRUE)  
[10:51:40.547] |  :  .  |  :  .   $ times                    : int 5
[10:51:40.547] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.547] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:40.547] |  :  .  |  :  .   $ dim                      : NULL
[10:51:40.547] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:40.547] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:40.547] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.547] |  :  .  |  :  .   $ ...future.elements_ii    :List of 4
[10:51:40.547] |  :  .  |  :  .    ..$ : int [1:3] 1 2 3
[10:51:40.547] |  :  .  |  :  .    ..$ : int [1:4] 1 2 3 4
[10:51:40.547] |  :  .  |  :  .    ..$ : int [1:5] 1 2 3 4 5
[10:51:40.547] |  :  .  |  :  .    ..$ : int [1:6] 1 2 3 4 5 6
[10:51:40.547] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.547] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.547] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:40.547] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.547] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.547] |  :  .  |  :  .   - attr(*, "total_size")= num 48005
[10:51:40.547] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.547] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.560] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.560] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:40.560] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:40.560] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:40.560] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:40.560] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:40.560] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:40.561] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.561] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.561] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.561] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.561] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.557] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.557] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.557] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.557] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.557] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.557] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.557] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.557] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.557] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.557] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.557] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.557] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.557] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.557] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.561] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.562] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.562] |  :  readImmediateCondition() ...
[10:51:40.563] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.563] |  :   - Number of RDS files: 0
[10:51:40.563] |  :  readImmediateCondition() ... DONE
[10:51:40.549] MulticoreFuture:
[10:51:40.549] Label: ‘future_vapply-2’
[10:51:40.549] Expression:
[10:51:40.549] {
[10:51:40.549]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.549]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.549]     "# as a global variable                                         "
[10:51:40.549]     do.call(function(...) {
[10:51:40.549]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.549]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.549]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.549]         "# anonymous function.                                          "
[10:51:40.549]         "#                                                              "
[10:51:40.549]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.549]         "# function environment of FUN() to the calling environment.    "
[10:51:40.549]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.549]         "# global environment, which is where globals are written.      "
[10:51:40.549]         penv <- env <- environment(...future.FUN)
[10:51:40.549]         repeat {
[10:51:40.549]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.549]                 emptyenv())) 
[10:51:40.549]                 break
[10:51:40.549]             penv <- env
[10:51:40.549]             env <- parent.env(env)
[10:51:40.549]         }
[10:51:40.549]         if (identical(penv, globalenv())) {
[10:51:40.549]             environment(...future.FUN) <- environment()
[10:51:40.549]         }
[10:51:40.549]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.549]             !isNamespace(penv)) {
[10:51:40.549]             parent.env(penv) <- environment()
[10:51:40.549]         }
[10:51:40.549]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.549]         {
[10:51:40.549]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.549]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.549]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.549]                 on.exit(options(oopts), add = TRUE)
[10:51:40.549]             }
[10:51:40.549]             {
[10:51:40.549]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.549]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.549]                   ...future.FUN(...future.X_jj, ...)
[10:51:40.549]                 })
[10:51:40.549]             }
[10:51:40.549]         }
[10:51:40.549]     }, args = future.call.arguments)
[10:51:40.549] }
[10:51:40.549] Lazy evaluation: FALSE
[10:51:40.549] Asynchronous evaluation: TRUE
[10:51:40.549] Local evaluation: TRUE
[10:51:40.549] Environment: R_GlobalEnv
[10:51:40.549] Capture standard output: TRUE
[10:51:40.549] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.549] Immediate condition classes: ‘immediateCondition’
[10:51:40.549] Globals: 11 objects totaling 27.14 KiB (function ‘...future.FUN’ of 14.07 KiB, function ‘x_FUN’ of 4.67 KiB, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:40.549] Packages: 2 packages (‘stats’, ‘future.apply’)
[10:51:40.549] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.549] Resolved: FALSE
[10:51:40.549] Value: <not collected>
[10:51:40.549] Conditions captured: <none>
[10:51:40.549] Early signaling: FALSE
[10:51:40.549] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.549] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.564] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.564] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.564] Chunk #2 of 2 ... DONE
[10:51:40.565] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.565] Launching 2 futures (chunks) ... DONE
[10:51:40.565] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.565] Resolving 2 futures (chunks) ...
[10:51:40.565] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.565] |  :  value() on list ...
[10:51:40.565] |  :  .  recursive: 0
[10:51:40.565] |  :  .  length: 2
[10:51:40.566] |  :  .  
[10:51:40.566] |  :  .  Number of remaining objects: 2
[10:51:40.566] |  :  .  checking value #1 ...
[10:51:40.566] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.565] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.565] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.565] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.565] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.565] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.565] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.565] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.565] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.565] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.565] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.565] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.565] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.565] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.565] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.569] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.562] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.562] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.562] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.562] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.562] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.562] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.562] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.570] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.570] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.570] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.570] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.571] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.571] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.571] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.571] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.571] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.571] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.569] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.569] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.569] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.569] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.569] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.569] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.569] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.569] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.572] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.572] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.571] |  :  .  |  :  .  |  :  List of 1
[10:51:40.571] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.571] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.571] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.571] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.571] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.571] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.571] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.574] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.575] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.575] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.575] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.575] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.575] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.576] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.576] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.576] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.576] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.576] |  :  .  |  :  .  assign_globals() ...
[10:51:40.577] |  :  .  |  readImmediateCondition() ...
[10:51:40.577] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.577] |  :  .  |   - Number of RDS files: 0
[10:51:40.577] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.578] |  :  .  checking value #1 ... done
[10:51:40.578] |  :  .  checking value #2 ...
[10:51:40.578] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.573] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.579] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.579] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.579] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.579] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.579] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.579] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.579] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.579] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.579] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.579] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.580] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.580] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.580] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.580] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.580] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.580] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.580] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.580] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.580] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.580] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.580] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.580] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.580] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.580] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.584] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.584] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.584] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.585] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.588] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.588] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.588] |  :  .  |  readImmediateCondition() ...
[10:51:40.588] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.588] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.589] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.589] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.589] |  :  .  |   - Number of RDS files: 0
[10:51:40.589] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.589] |  :  .  checking value #2 ... done
[10:51:40.577] |  :  .  |  :  .  List of 11
[10:51:40.577] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:40.577] |  :  .  |  :  .   $ x_FUN                    :function (x, na.rm = TRUE)  
[10:51:40.577] |  :  .  |  :  .   $ times                    : int 5
[10:51:40.577] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.577] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:40.577] |  :  .  |  :  .   $ dim                      : NULL
[10:51:40.577] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:40.577] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:40.577] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.577] |  :  .  |  :  .   $ ...future.elements_ii    :List of 3
[10:51:40.577] |  :  .  |  :  .    ..$ : int [1:7] 1 2 3 4 5 6 7
[10:51:40.577] |  :  .  |  :  .    ..$ : int [1:8] 1 2 3 4 5 6 7 8
[10:51:40.577] |  :  .  |  :  .    ..$ : int [1:9] 1 2 3 4 5 6 7 8 9
[10:51:40.577] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.577] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.577] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:40.577] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.577] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.577] |  :  .  |  :  .   - attr(*, "total_size")= num 48005
[10:51:40.577] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.577] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.590] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.590] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:40.590] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:40.590] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:40.590] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:40.590] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:40.591] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:40.591] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.591] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.591] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.591] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.591] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.594] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.595] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.595] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.595] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.595] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.595] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.595] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.595] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.595] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.595] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.595] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.595] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.595] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.595] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.595] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.595] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.595] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.595] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.595] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.599] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.599] |  :  .  Number of remaining objects: 2
[10:51:40.600] |  :  .  checking value #1 ...
[10:51:40.600] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.600] |  :  .  |  readImmediateCondition() ...
[10:51:40.600] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.601] |  :  .  |   - Number of RDS files: 0
[10:51:40.601] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.601] |  :  .  |  MulticoreFuture #1
[10:51:40.601] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.601] |  :  .  |  :  nx: 2
[10:51:40.602] |  :  .  |  :  relay: TRUE
[10:51:40.602] |  :  .  |  :  stdout: TRUE
[10:51:40.602] |  :  .  |  :  signal: TRUE
[10:51:40.602] |  :  .  |  :  resignal: FALSE
[10:51:40.602] |  :  .  |  :  force: TRUE
[10:51:40.602] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:40.603] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:40.603] |  :  .  |  :  until=1
[10:51:40.603] |  :  .  |  :  relaying element #1
[10:51:40.603] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.599] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.599] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.599] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.599] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.599] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.599] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.599] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.599] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.604] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.604] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.605] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.605] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.605] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.606] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.606] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.606] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.606] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.607] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.607] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.607] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.607] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.607] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.608] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.608] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:40.608] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.608] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.608] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.609] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.609] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.609] |  :  .  |  :  value: <list>
[10:51:40.609] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.609] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.609] |  :  .  |  :  nx: 2
[10:51:40.610] |  :  .  |  :  relay: TRUE
[10:51:40.610] |  :  .  |  :  stdout: TRUE
[10:51:40.610] |  :  .  |  :  signal: TRUE
[10:51:40.610] |  :  .  |  :  resignal: FALSE
[10:51:40.610] |  :  .  |  :  force: TRUE
[10:51:40.610] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.611] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.611] |  :  .  |  :  until=2
[10:51:40.611] |  :  .  |  :  relaying element #2
[10:51:40.611] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.611] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.611] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:40.612] |  :  .  |  length: 1 (resolved future 1)
[10:51:40.612] |  :  .  checking value #1 ... done
[10:51:40.612] |  :  .  checking value #2 ...
[10:51:40.612] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.604] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.618] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.618] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.618] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.618] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.618] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.619] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.619] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.619] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.619] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.619] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.623] |  :  .  |  readImmediateCondition() ...
[10:51:40.623] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.623] |  :  .  |   - Number of RDS files: 0
[10:51:40.623] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.624] |  :  .  checking value #2 ... done
[10:51:40.619] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.619] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.619] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.619] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.619] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.619] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.619] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.619] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.619] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.619] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.619] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.619] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.619] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.619] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.624] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.624] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.625] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.625] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.625] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.625] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.625] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.625] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.626] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.634] |  :  .  Number of remaining objects: 1
[10:51:40.634] |  :  .  checking value #2 ...
[10:51:40.634] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.634] |  :  .  |  readImmediateCondition() ...
[10:51:40.634] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.635] |  :  .  |   - Number of RDS files: 0
[10:51:40.635] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.635] |  :  .  |  MulticoreFuture #2
[10:51:40.635] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.635] |  :  .  |  :  nx: 2
[10:51:40.635] |  :  .  |  :  relay: TRUE
[10:51:40.635] |  :  .  |  :  stdout: TRUE
[10:51:40.635] |  :  .  |  :  signal: TRUE
[10:51:40.635] |  :  .  |  :  resignal: FALSE
[10:51:40.636] |  :  .  |  :  force: TRUE
[10:51:40.636] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.636] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.636] |  :  .  |  :  until=2
[10:51:40.636] |  :  .  |  :  relaying element #2
[10:51:40.636] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.637] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.637] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.637] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.637] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.637] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.638] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.638] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.638] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.638] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.638] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.638] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.639] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.639] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.639] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.639] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.639] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.639] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.640] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.640] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.640] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.640] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.640] |  :  .  |  :  value: <list>
[10:51:40.640] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.641] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.641] |  :  .  |  :  nx: 2
[10:51:40.641] |  :  .  |  :  relay: TRUE
[10:51:40.641] |  :  .  |  :  stdout: TRUE
[10:51:40.641] |  :  .  |  :  signal: TRUE
[10:51:40.641] |  :  .  |  :  resignal: FALSE
[10:51:40.641] |  :  .  |  :  force: TRUE
[10:51:40.642] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.642] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.642] |  :  .  |  :  until=2
[10:51:40.642] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.642] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.642] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.643] |  :  .  |  length: 0 (resolved future 2)
[10:51:40.643] |  :  .  checking value #2 ... done
[10:51:40.643] |  :  .  Relaying remaining futures ...
[10:51:40.643] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:40.643] |  :  .  |  :  nx: 2
[10:51:40.643] |  :  .  |  :  relay: TRUE
[10:51:40.643] |  :  .  |  :  stdout: TRUE
[10:51:40.644] |  :  .  |  :  signal: TRUE
[10:51:40.644] |  :  .  |  :  resignal: FALSE
[10:51:40.644] |  :  .  |  :  force: TRUE
[10:51:40.644] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.644] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:40.644] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.644] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.644] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:40.645] |  :  .  Relaying remaining futures ... done
[10:51:40.645] |  :  value() on list ... done
[10:51:40.645]  - Number of value chunks collected: 2
[10:51:40.645] Resolving 2 futures (chunks) ... DONE
[10:51:40.645] Reducing values from 2 chunks ...
[10:51:40.645]  - Number of values collected after concatenation: 7
[10:51:40.645]  - Number of values expected: 7
[10:51:40.645] Reducing values from 2 chunks ... DONE
[10:51:40.645] future_lapply() ... DONE
 num [1:5, 1:7] 1 1.5 2 2.5 3 1 1.5 2.5 3.5 4 ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:5] "Min." "1st Qu." "Median" "3rd Qu." ...
  ..$ : NULL
[10:51:40.648] future_lapply() ...
[10:51:40.649] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.649] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.649] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.650] Number of chunks: 2
[10:51:40.650] getGlobalsAndPackagesXApply() ...
[10:51:40.650]  - future.globals: TRUE
[10:51:40.650] |  :  getGlobalsAndPackages() ...
[10:51:40.650] |  :  .  Searching for globals ...
[10:51:40.652] |  :  .  |  globals found: [3] ‘FUN’, ‘outer’, ‘rep’
[10:51:40.652] |  :  .  Searching for globals ... DONE
[10:51:40.652] |  :  .  Resolving globals: FALSE
[10:51:40.652] |  :  .  Search for packages associated with the globals ...
[10:51:40.652] |  :  .  |  Packages associated with globals: [1] ‘base’
[10:51:40.653] |  :  .  |  Packages: [1] ‘base’
[10:51:40.653] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.653] |  :  .  The total size of the 1 globals is 680 bytes (680 bytes)
[10:51:40.653] |  :  .  The total size of the 1 globals exported for future expression (‘FUN(y = c(2, 4, 6, 8, 10))’) is 680 bytes There is one global: ‘FUN’ (680 bytes of class ‘function’)
[10:51:40.653] |  :  .  Packages after dropping 'base': [0] 
[10:51:40.654] |  :  .  globals: [1] ‘FUN’
[10:51:40.654] |  :  .  packages: [0] 
[10:51:40.654] |  :  getGlobalsAndPackages() ... done
[10:51:40.654]  - globals found/used: [n=1] ‘FUN’
[10:51:40.654]  - needed namespaces: [n=0] 
[10:51:40.654] Finding globals ... DONE
[10:51:40.654]  - use_args: TRUE
[10:51:40.654]  - Getting '...' globals ...
[10:51:40.655] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:40.655] |  :  .  recursive: 0
[10:51:40.655] |  :  .  length: 1
[10:51:40.655] |  :  .  elements: ‘...’
[10:51:40.655] |  :  .  'obj' is DotDotDotList
[10:51:40.656] |  :  .  resolve(obj, ...) ...
[10:51:40.656] |  :  .  resolve(obj, ...) ... done
[10:51:40.656] |  :  .  length: 0 (resolved future 1)
[10:51:40.656] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:40.656]    - '...' content: [n=1] ‘y’
[10:51:40.656] List of 1
[10:51:40.656]  $ ...:List of 1
[10:51:40.656]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:40.656]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.656]  - attr(*, "where")=List of 1
[10:51:40.656]   ..$ ...:<environment: 0x55d466da61d8> 
[10:51:40.656]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.656]  - attr(*, "resolved")= logi TRUE
[10:51:40.656]  - attr(*, "total_size")= num NA
[10:51:40.660]  - Getting '...' globals ... DONE
[10:51:40.660] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:40.660] List of 2
[10:51:40.660]  $ ...future.FUN:function (x, y)  
[10:51:40.660]  $ ...          :List of 1
[10:51:40.660]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:40.660]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.660]  - attr(*, "where")=List of 2
[10:51:40.660]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:40.660]   ..$ ...          :<environment: 0x55d466da61d8> 
[10:51:40.660]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.660]  - attr(*, "resolved")= logi FALSE
[10:51:40.660]  - attr(*, "total_size")= num 7318
[10:51:40.664] Packages to be attached in all futures: [n=0] 
[10:51:40.664] getGlobalsAndPackagesXApply() ... DONE
[10:51:40.664] Number of futures (= number of chunks): 2
[10:51:40.664] Launching 2 futures (chunks) ...
[10:51:40.664] Chunk #1 of 2 ...
[10:51:40.664]  - Finding globals in 'X' for chunk #1 ...
[10:51:40.664] |  :  getGlobalsAndPackages() ...
[10:51:40.665] |  :  .  Searching for globals ...
[10:51:40.665] |  :  .  |  globals found: [0] 
[10:51:40.665] |  :  .  Searching for globals ... DONE
[10:51:40.665] |  :  .  globals: [0] <none>
[10:51:40.665] |  :  .  packages: [0] <none>
[10:51:40.665] |  :  getGlobalsAndPackages() ... done
[10:51:40.665]    + additional globals found: [n=0] 
[10:51:40.665]    + additional namespaces needed: [n=0] 
[10:51:40.666]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:40.666]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.666]  - seeds: <none>
[10:51:40.666]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.666] |  :  getGlobalsAndPackages() ...
[10:51:40.666] |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.666] |  :  .  Resolving globals: FALSE
[10:51:40.666] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.667] |  :  .  |  {
[10:51:40.667] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.667] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.667] |  :  .  |      "# as a global variable                                         "
[10:51:40.667] |  :  .  |      do.call(function(...) {
[10:51:40.667] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.667] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.667] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.667] |  :  .  |          "# anonymous function.                                          "
[10:51:40.667] |  :  .  |          "#                                                              "
[10:51:40.667] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.667] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.667] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.667] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.667] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.667] |  :  .  |          repeat {
[10:51:40.667] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.667] |  :  .  |                  emptyenv())) 
[10:51:40.667] |  :  .  |                  break
[10:51:40.667] |  :  .  |              penv <- env
[10:51:40.667] |  :  .  |              env <- parent.env(env)
[10:51:40.667] |  :  .  |          }
[10:51:40.667] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.667] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.667] |  :  .  |          }
[10:51:40.667] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.667] |  :  .  |              !isNamespace(penv)) {
[10:51:40.667] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.667] |  :  .  |          }
[10:51:40.667] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.667] |  :  .  |          {
[10:51:40.667] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.667] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.667] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.667] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.667] |  :  .  |              }
[10:51:40.667] |  :  .  |              {
[10:51:40.667] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.667] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.667] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.667] |  :  .  |                  })
[10:51:40.667] |  :  .  |              }
[10:51:40.667] |  :  .  |          }
[10:51:40.667] |  :  .  |      }, args = future.call.arguments)
[10:51:40.667] |  :  .  |  }
[10:51:40.667] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.667] |  :  .  Search for packages associated with the globals ...
[10:51:40.667] |  :  .  |  Packages associated with globals: [0] 
[10:51:40.668] |  :  .  |  Packages: [0] 
[10:51:40.668] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.668] |  :  .  Packages after dropping 'base': [0] 
[10:51:40.668] |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.668] |  :  .  packages: [0] 
[10:51:40.668] |  :  getGlobalsAndPackages() ... done
[10:51:40.669] |  :  run() for Future (‘Future’) ...
[10:51:40.669] |  :  .  state: ‘created’
[10:51:40.669] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.671] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.671] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.672] |  :  .  |  Launching futures ...
[10:51:40.672] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.672] |  :  .  |  :  .  getFutureData() ...
[10:51:40.672] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.672] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:51:40.672] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.672] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.672] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.673] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.673] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.673] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.673] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.673] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.673] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.673] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.673] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.674] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.676] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.677] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.677] |  :  .  |  Launching futures ... done
[10:51:40.677] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.677] |  :  .  |  :  .  attachPackages() ...
[10:51:40.677] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.677] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.677] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.678] Created future:
[10:51:40.678] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.678] |  :  .  |  :  .  attachPackages() ...
[10:51:40.678] |  :  .  |  :  .  |  packages: [n=0] 
[10:51:40.678] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.679] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.679] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.679] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.680] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.680] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.680] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.681] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.681] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.681] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.681] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.681] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.681] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.681] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.681] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.681] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.685] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.685] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.685] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.685] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.685] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.685] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.685] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.685] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.685] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.685] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.690] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.690] |  :  readImmediateCondition() ...
[10:51:40.690] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.690] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.690] |  :   - Number of RDS files: 0
[10:51:40.690] |  :  readImmediateCondition() ... DONE
[10:51:40.678] MulticoreFuture:
[10:51:40.678] Label: ‘future_sapply-1’
[10:51:40.678] Expression:
[10:51:40.678] {
[10:51:40.678]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.678]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.678]     "# as a global variable                                         "
[10:51:40.678]     do.call(function(...) {
[10:51:40.678]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.678]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.678]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.678]         "# anonymous function.                                          "
[10:51:40.678]         "#                                                              "
[10:51:40.678]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.678]         "# function environment of FUN() to the calling environment.    "
[10:51:40.678]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.678]         "# global environment, which is where globals are written.      "
[10:51:40.678]         penv <- env <- environment(...future.FUN)
[10:51:40.678]         repeat {
[10:51:40.678]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.678]                 emptyenv())) 
[10:51:40.678]                 break
[10:51:40.678]             penv <- env
[10:51:40.678]             env <- parent.env(env)
[10:51:40.678]         }
[10:51:40.678]         if (identical(penv, globalenv())) {
[10:51:40.678]             environment(...future.FUN) <- environment()
[10:51:40.678]         }
[10:51:40.678]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.678]             !isNamespace(penv)) {
[10:51:40.678]             parent.env(penv) <- environment()
[10:51:40.678]         }
[10:51:40.678]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.678]         {
[10:51:40.678]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.678]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.678]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.678]                 on.exit(options(oopts), add = TRUE)
[10:51:40.678]             }
[10:51:40.678]             {
[10:51:40.678]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.678]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.678]                   ...future.FUN(...future.X_jj, ...)
[10:51:40.678]                 })
[10:51:40.678]             }
[10:51:40.678]         }
[10:51:40.678]     }, args = future.call.arguments)
[10:51:40.678] }
[10:51:40.678] Lazy evaluation: FALSE
[10:51:40.678] Asynchronous evaluation: TRUE
[10:51:40.678] Local evaluation: TRUE
[10:51:40.678] Environment: R_GlobalEnv
[10:51:40.678] Capture standard output: TRUE
[10:51:40.678] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.678] Immediate condition classes: ‘immediateCondition’
[10:51:40.678] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 680 bytes, DotDotDotList ‘future.call.arguments’ of 183 bytes, list ‘...future.elements_ii’ of 114 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:40.678] Packages: <none>
[10:51:40.678] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.678] Resolved: FALSE
[10:51:40.678] Value: <not collected>
[10:51:40.678] Conditions captured: <none>
[10:51:40.678] Early signaling: FALSE
[10:51:40.678] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.678] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.691] Chunk #1 of 2 ... DONE
[10:51:40.691] Chunk #2 of 2 ...
[10:51:40.691]  - Finding globals in 'X' for chunk #2 ...
[10:51:40.691] |  :  getGlobalsAndPackages() ...
[10:51:40.692] |  :  .  Searching for globals ...
[10:51:40.692] |  :  .  |  globals found: [0] 
[10:51:40.692] |  :  .  Searching for globals ... DONE
[10:51:40.692] |  :  .  globals: [0] <none>
[10:51:40.692] |  :  .  packages: [0] <none>
[10:51:40.693] |  :  getGlobalsAndPackages() ... done
[10:51:40.693]    + additional globals found: [n=0] 
[10:51:40.693]    + additional namespaces needed: [n=0] 
[10:51:40.693]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:40.693]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.693]  - seeds: <none>
[10:51:40.693]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.693] |  :  getGlobalsAndPackages() ...
[10:51:40.694] |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.694] |  :  .  Resolving globals: FALSE
[10:51:40.694] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.694] |  :  .  |  {
[10:51:40.694] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.694] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.694] |  :  .  |      "# as a global variable                                         "
[10:51:40.694] |  :  .  |      do.call(function(...) {
[10:51:40.694] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.694] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.694] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.694] |  :  .  |          "# anonymous function.                                          "
[10:51:40.694] |  :  .  |          "#                                                              "
[10:51:40.694] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.694] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.694] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.694] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.694] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.694] |  :  .  |          repeat {
[10:51:40.694] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.694] |  :  .  |                  emptyenv())) 
[10:51:40.694] |  :  .  |                  break
[10:51:40.694] |  :  .  |              penv <- env
[10:51:40.694] |  :  .  |              env <- parent.env(env)
[10:51:40.694] |  :  .  |          }
[10:51:40.694] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.694] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.694] |  :  .  |          }
[10:51:40.694] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.694] |  :  .  |              !isNamespace(penv)) {
[10:51:40.694] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.694] |  :  .  |          }
[10:51:40.694] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.694] |  :  .  |          {
[10:51:40.694] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.694] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.694] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.694] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.694] |  :  .  |              }
[10:51:40.694] |  :  .  |              {
[10:51:40.694] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.694] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.694] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.694] |  :  .  |                  })
[10:51:40.694] |  :  .  |              }
[10:51:40.694] |  :  .  |          }
[10:51:40.694] |  :  .  |      }, args = future.call.arguments)
[10:51:40.694] |  :  .  |  }
[10:51:40.695] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.695] |  :  .  Search for packages associated with the globals ...
[10:51:40.695] |  :  .  |  Packages associated with globals: [0] 
[10:51:40.696] |  :  .  |  Packages: [0] 
[10:51:40.696] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.696] |  :  .  Packages after dropping 'base': [0] 
[10:51:40.696] |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.696] |  :  .  packages: [0] 
[10:51:40.690] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.690] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.690] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.690] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.690] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.690] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.690] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.696] |  :  getGlobalsAndPackages() ... done
[10:51:40.697] |  :  run() for Future (‘Future’) ...
[10:51:40.697] |  :  .  state: ‘created’
[10:51:40.697] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.697] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.697] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.697] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.697] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.697] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.698] |  :  .  |  Launching futures ...
[10:51:40.698] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.698] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.698] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.698] |  :  .  |  :  .  getFutureData() ...
[10:51:40.698] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.698] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:51:40.698] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.698] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.698] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.698] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.698] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.698] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.698] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.699] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.699] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.699] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.699] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.699] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.699] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.699] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.700] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.700] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.700] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.699] |  :  .  |  :  .  |  :  List of 1
[10:51:40.699] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.699] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.699] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.699] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.699] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.699] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.699] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.702] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.702] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.702] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.703] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.703] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.703] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.703] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.703] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.703] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.703] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.704] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.704] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.704] |  :  .  |  Launching futures ... done
[10:51:40.704] |  :  .  |  :  .  attachPackages() ...
[10:51:40.704] |  :  .  |  :  .  assign_globals() ...
[10:51:40.704] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.704] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.704] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.705] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.705] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.705] |  :  .  |  :  .  attachPackages() ...
[10:51:40.705] Created future:
[10:51:40.705] |  :  .  |  :  .  |  packages: [n=0] 
[10:51:40.705] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.707] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.707] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.707] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.708] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.708] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.709] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.709] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.709] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.709] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.709] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.709] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.709] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.709] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.709] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.709] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.713] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.704] |  :  .  |  :  .  List of 5
[10:51:40.704] |  :  .  |  :  .   $ ...future.FUN            :function (x, y)  
[10:51:40.704] |  :  .  |  :  .   $ future.call.arguments    :List of 1
[10:51:40.704] |  :  .  |  :  .    ..$ y: num [1:5] 2 4 6 8 10
[10:51:40.704] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.704] |  :  .  |  :  .   $ ...future.elements_ii    :List of 2
[10:51:40.704] |  :  .  |  :  .    ..$ A: num 50
[10:51:40.704] |  :  .  |  :  .    ..$ B: num 60
[10:51:40.704] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.704] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.704] |  :  .  |  :  .   - attr(*, "where")=List of 5
[10:51:40.704] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.704] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.704] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.704] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.704] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.704] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.704] |  :  .  |  :  .   - attr(*, "total_size")= num 7318
[10:51:40.704] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.704] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.715] |  :  .  |  :  .  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:40.715] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.715] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.715] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.715] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.715] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.715] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.713] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.713] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.713] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.713] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.713] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.713] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.713] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.713] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.713] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.713] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.713] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.713] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.713] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.713] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.718] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.718] |  :  readImmediateCondition() ...
[10:51:40.718] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.718] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.718] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.719] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.719] |  :   - Number of RDS files: 0
[10:51:40.719] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.719] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.719] |  :  readImmediateCondition() ... DONE
[10:51:40.719] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.705] MulticoreFuture:
[10:51:40.705] Label: ‘future_sapply-2’
[10:51:40.705] Expression:
[10:51:40.705] {
[10:51:40.705]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.705]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.705]     "# as a global variable                                         "
[10:51:40.705]     do.call(function(...) {
[10:51:40.705]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.705]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.705]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.705]         "# anonymous function.                                          "
[10:51:40.705]         "#                                                              "
[10:51:40.705]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.705]         "# function environment of FUN() to the calling environment.    "
[10:51:40.705]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.705]         "# global environment, which is where globals are written.      "
[10:51:40.705]         penv <- env <- environment(...future.FUN)
[10:51:40.705]         repeat {
[10:51:40.705]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.705]                 emptyenv())) 
[10:51:40.705]                 break
[10:51:40.705]             penv <- env
[10:51:40.705]             env <- parent.env(env)
[10:51:40.705]         }
[10:51:40.705]         if (identical(penv, globalenv())) {
[10:51:40.705]             environment(...future.FUN) <- environment()
[10:51:40.705]         }
[10:51:40.705]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.705]             !isNamespace(penv)) {
[10:51:40.705]             parent.env(penv) <- environment()
[10:51:40.705]         }
[10:51:40.705]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.705]         {
[10:51:40.705]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.705]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.705]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.705]                 on.exit(options(oopts), add = TRUE)
[10:51:40.705]             }
[10:51:40.705]             {
[10:51:40.705]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.705]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.705]                   ...future.FUN(...future.X_jj, ...)
[10:51:40.705]                 })
[10:51:40.705]             }
[10:51:40.705]         }
[10:51:40.705]     }, args = future.call.arguments)
[10:51:40.705] }
[10:51:40.705] Lazy evaluation: FALSE
[10:51:40.705] Asynchronous evaluation: TRUE
[10:51:40.705] Local evaluation: TRUE
[10:51:40.705] Environment: R_GlobalEnv
[10:51:40.705] Capture standard output: TRUE
[10:51:40.705] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.705] Immediate condition classes: ‘immediateCondition’
[10:51:40.705] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 680 bytes, DotDotDotList ‘future.call.arguments’ of 183 bytes, list ‘...future.elements_ii’ of 114 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:40.705] Packages: <none>
[10:51:40.705] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.705] Resolved: FALSE
[10:51:40.705] Value: <not collected>
[10:51:40.705] Conditions captured: <none>
[10:51:40.705] Early signaling: FALSE
[10:51:40.705] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.705] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.720] Chunk #2 of 2 ... DONE
[10:51:40.720] Launching 2 futures (chunks) ... DONE
[10:51:40.720] Resolving 2 futures (chunks) ...
[10:51:40.721] |  :  value() on list ...
[10:51:40.721] |  :  .  recursive: 0
[10:51:40.721] |  :  .  length: 2
[10:51:40.721] |  :  .  
[10:51:40.721] |  :  .  Number of remaining objects: 2
[10:51:40.722] |  :  .  checking value #1 ...
[10:51:40.722] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.719] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.719] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.719] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.719] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.719] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.719] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.724] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.724] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.724] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.724] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.724] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.724] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.724] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.724] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.724] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.719] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.719] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.719] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.719] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.719] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.719] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.719] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.729] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.729] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.729] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.729] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.730] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.730] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.730] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.730] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.730] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.730] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.732] |  :  .  |  readImmediateCondition() ...
[10:51:40.732] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.733] |  :  .  |   - Number of RDS files: 0
[10:51:40.733] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.727] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.733] |  :  .  checking value #1 ... done
[10:51:40.733] |  :  .  checking value #2 ...
[10:51:40.734] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.734] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.734] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.734] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.734] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.735] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.731] |  :  .  |  :  .  |  :  List of 1
[10:51:40.731] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.731] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.731] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.731] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.731] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.731] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.731] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.735] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.735] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.735] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.735] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.735] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.735] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.735] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.735] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.735] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.736] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.736] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.736] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.736] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.736] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.737] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.737] |  :  .  |  :  .  assign_globals() ...
[10:51:40.735] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.735] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.735] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.735] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.735] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.735] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.735] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.735] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.735] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.735] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.735] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.735] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.735] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.735] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.739] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.740] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.740] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.740] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.740] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.740] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.740] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.740] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.741] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.744] |  :  .  |  readImmediateCondition() ...
[10:51:40.744] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.745] |  :  .  |   - Number of RDS files: 0
[10:51:40.745] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.745] |  :  .  checking value #2 ... done
[10:51:40.737] |  :  .  |  :  .  List of 5
[10:51:40.737] |  :  .  |  :  .   $ ...future.FUN            :function (x, y)  
[10:51:40.737] |  :  .  |  :  .   $ future.call.arguments    :List of 1
[10:51:40.737] |  :  .  |  :  .    ..$ y: num [1:5] 2 4 6 8 10
[10:51:40.737] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.737] |  :  .  |  :  .   $ ...future.elements_ii    :List of 2
[10:51:40.737] |  :  .  |  :  .    ..$ C: num 70
[10:51:40.737] |  :  .  |  :  .    ..$ D: num 80
[10:51:40.737] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.737] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.737] |  :  .  |  :  .   - attr(*, "where")=List of 5
[10:51:40.737] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.737] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.737] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.737] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.737] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.737] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.737] |  :  .  |  :  .   - attr(*, "total_size")= num 7318
[10:51:40.737] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.737] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.746] |  :  .  |  :  .  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:40.746] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.746] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.747] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.747] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.747] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.747] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.750] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.750] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.750] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.750] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.751] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.751] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.751] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.751] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.751] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.751] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.751] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.751] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.751] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.751] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.751] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.751] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.751] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.751] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.751] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.755] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.755] |  :  .  Number of remaining objects: 2
[10:51:40.755] |  :  .  checking value #1 ...
[10:51:40.756] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.756] |  :  .  |  readImmediateCondition() ...
[10:51:40.756] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.756] |  :  .  |   - Number of RDS files: 0
[10:51:40.757] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.757] |  :  .  |  MulticoreFuture #1
[10:51:40.757] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.757] |  :  .  |  :  nx: 2
[10:51:40.757] |  :  .  |  :  relay: TRUE
[10:51:40.758] |  :  .  |  :  stdout: TRUE
[10:51:40.758] |  :  .  |  :  signal: TRUE
[10:51:40.758] |  :  .  |  :  resignal: FALSE
[10:51:40.758] |  :  .  |  :  force: TRUE
[10:51:40.758] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:40.758] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:40.759] |  :  .  |  :  until=1
[10:51:40.759] |  :  .  |  :  relaying element #1
[10:51:40.759] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.755] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.755] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.755] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.755] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.755] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.755] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.755] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.755] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.760] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.760] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.761] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.761] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.761] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.761] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.762] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.762] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.762] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.762] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.763] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.763] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.763] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.763] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.763] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.764] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:40.764] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.764] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.764] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.765] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.765] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.765] |  :  .  |  :  value: <list>
[10:51:40.765] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.766] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.766] |  :  .  |  :  nx: 2
[10:51:40.766] |  :  .  |  :  relay: TRUE
[10:51:40.766] |  :  .  |  :  stdout: TRUE
[10:51:40.766] |  :  .  |  :  signal: TRUE
[10:51:40.767] |  :  .  |  :  resignal: FALSE
[10:51:40.767] |  :  .  |  :  force: TRUE
[10:51:40.767] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.767] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.767] |  :  .  |  :  until=2
[10:51:40.768] |  :  .  |  :  relaying element #2
[10:51:40.768] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.768] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.768] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:40.768] |  :  .  |  length: 1 (resolved future 1)
[10:51:40.769] |  :  .  checking value #1 ... done
[10:51:40.769] |  :  .  checking value #2 ...
[10:51:40.769] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.760] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.770] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.770] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.770] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.770] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.770] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.771] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.771] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.771] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.771] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.771] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.771] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.771] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.771] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.771] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.771] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.771] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.771] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.771] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.771] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.771] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.771] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.771] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.771] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.771] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.775] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.775] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.776] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.776] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.776] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.776] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.776] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.776] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.777] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.777] |  :  .  |  readImmediateCondition() ...
[10:51:40.777] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.777] |  :  .  |   - Number of RDS files: 0
[10:51:40.777] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.778] |  :  .  |  MulticoreFuture #2
[10:51:40.778] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.778] |  :  .  |  :  nx: 2
[10:51:40.778] |  :  .  |  :  relay: TRUE
[10:51:40.778] |  :  .  |  :  stdout: TRUE
[10:51:40.778] |  :  .  |  :  signal: TRUE
[10:51:40.778] |  :  .  |  :  resignal: FALSE
[10:51:40.778] |  :  .  |  :  force: TRUE
[10:51:40.779] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.779] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.779] |  :  .  |  :  until=2
[10:51:40.779] |  :  .  |  :  relaying element #2
[10:51:40.779] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.780] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.780] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.780] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.780] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.781] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.781] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.781] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.781] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.781] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.782] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.782] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.782] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.782] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.782] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.782] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.783] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.783] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.783] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.783] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.783] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.784] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.784] |  :  .  |  :  value: <list>
[10:51:40.784] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.784] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.784] |  :  .  |  :  nx: 2
[10:51:40.784] |  :  .  |  :  relay: TRUE
[10:51:40.785] |  :  .  |  :  stdout: TRUE
[10:51:40.785] |  :  .  |  :  signal: TRUE
[10:51:40.785] |  :  .  |  :  resignal: FALSE
[10:51:40.785] |  :  .  |  :  force: TRUE
[10:51:40.785] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.785] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.786] |  :  .  |  :  until=2
[10:51:40.786] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.786] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.786] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.786] |  :  .  |  length: 0 (resolved future 2)
[10:51:40.786] |  :  .  checking value #2 ... done
[10:51:40.787] |  :  .  Relaying remaining futures ...
[10:51:40.787] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:40.787] |  :  .  |  :  nx: 2
[10:51:40.787] |  :  .  |  :  relay: TRUE
[10:51:40.787] |  :  .  |  :  stdout: TRUE
[10:51:40.787] |  :  .  |  :  signal: TRUE
[10:51:40.787] |  :  .  |  :  resignal: FALSE
[10:51:40.787] |  :  .  |  :  force: TRUE
[10:51:40.787] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.787] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:40.788] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.788] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.788] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:40.788] |  :  .  Relaying remaining futures ... done
[10:51:40.788] |  :  value() on list ... done
[10:51:40.788]  - Number of value chunks collected: 2
[10:51:40.788] Resolving 2 futures (chunks) ... DONE
[10:51:40.789] Reducing values from 2 chunks ...
[10:51:40.789]  - Number of values collected after concatenation: 4
[10:51:40.789]  - Number of values expected: 4
[10:51:40.789] Reducing values from 2 chunks ... DONE
[10:51:40.789] future_lapply() ... DONE
[10:51:40.790] future_lapply() ...
[10:51:40.792] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.793] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.793] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.793] Number of chunks: 2
[10:51:40.793] getGlobalsAndPackagesXApply() ...
[10:51:40.793]  - future.globals: TRUE
[10:51:40.794] |  :  getGlobalsAndPackages() ...
[10:51:40.794] |  :  .  Searching for globals ...
[10:51:40.799] |  :  .  |  globals found: [18] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘outer’, ‘rep’
[10:51:40.799] |  :  .  Searching for globals ... DONE
[10:51:40.799] |  :  .  Resolving globals: FALSE
[10:51:40.799] |  :  .  Search for packages associated with the globals ...
[10:51:40.799] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:40.800] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:40.800] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.801] |  :  .  The total size of the 7 globals is 14.32 KiB (14666 bytes)
[10:51:40.801] |  :  .  The total size of the 7 globals exported for future expression (‘FUN(y = c(2, 4, 6, 8, 10))’) is 14.32 KiB The three largest globals are ‘FUN’ (5.67 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:40.801] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:40.801] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:40.802] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:40.802] |  :  .  packages: [1] ‘future.apply’
[10:51:40.802] |  :  getGlobalsAndPackages() ... done
[10:51:40.802]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:40.802]  - needed namespaces: [n=1] ‘future.apply’
[10:51:40.802] Finding globals ... DONE
[10:51:40.803]  - use_args: TRUE
[10:51:40.803]  - Getting '...' globals ...
[10:51:40.803] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:40.803] |  :  .  recursive: 0
[10:51:40.803] |  :  .  length: 1
[10:51:40.804] |  :  .  elements: ‘...’
[10:51:40.804] |  :  .  'obj' is DotDotDotList
[10:51:40.804] |  :  .  resolve(obj, ...) ...
[10:51:40.804] |  :  .  resolve(obj, ...) ... done
[10:51:40.804] |  :  .  length: 0 (resolved future 1)
[10:51:40.804] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:40.804]    - '...' content: [n=1] ‘y’
[10:51:40.804] List of 1
[10:51:40.804]  $ ...:List of 1
[10:51:40.804]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:40.804]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.804]  - attr(*, "where")=List of 1
[10:51:40.804]   ..$ ...:<environment: 0x55d465f2d510> 
[10:51:40.804]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.804]  - attr(*, "resolved")= logi TRUE
[10:51:40.804]  - attr(*, "total_size")= num NA
[10:51:40.808]  - Getting '...' globals ... DONE
[10:51:40.809] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:40.809] List of 8
[10:51:40.809]  $ ...future.FUN:function (x, ...)  
[10:51:40.809]  $ x_FUN        :function (x, y)  
[10:51:40.809]  $ times        : int 15
[10:51:40.809]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.809]  $ stop_if_not  :function (...)  
[10:51:40.809]  $ dim          : int [1:2] 3 5
[10:51:40.809]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:40.809]  $ ...          :List of 1
[10:51:40.809]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:40.809]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.809]  - attr(*, "where")=List of 8
[10:51:40.809]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:40.809]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:40.809]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:40.809]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:40.809]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:40.809]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:40.809]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:40.809]   ..$ ...          :<environment: 0x55d465f2d510> 
[10:51:40.809]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.809]  - attr(*, "resolved")= logi FALSE
[10:51:40.809]  - attr(*, "total_size")= num 26659
[10:51:40.816] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:40.816] getGlobalsAndPackagesXApply() ... DONE
[10:51:40.816] Number of futures (= number of chunks): 2
[10:51:40.816] Launching 2 futures (chunks) ...
[10:51:40.817] Chunk #1 of 2 ...
[10:51:40.817]  - Finding globals in 'X' for chunk #1 ...
[10:51:40.817] |  :  getGlobalsAndPackages() ...
[10:51:40.817] |  :  .  Searching for globals ...
[10:51:40.817] |  :  .  |  globals found: [0] 
[10:51:40.817] |  :  .  Searching for globals ... DONE
[10:51:40.817] |  :  .  globals: [0] <none>
[10:51:40.818] |  :  .  packages: [0] <none>
[10:51:40.818] |  :  getGlobalsAndPackages() ... done
[10:51:40.818]    + additional globals found: [n=0] 
[10:51:40.818]    + additional namespaces needed: [n=0] 
[10:51:40.818]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:40.818]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.818]  - seeds: <none>
[10:51:40.818]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.818] |  :  getGlobalsAndPackages() ...
[10:51:40.819] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.819] |  :  .  Resolving globals: FALSE
[10:51:40.819] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.819] |  :  .  |  {
[10:51:40.819] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.819] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.819] |  :  .  |      "# as a global variable                                         "
[10:51:40.819] |  :  .  |      do.call(function(...) {
[10:51:40.819] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.819] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.819] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.819] |  :  .  |          "# anonymous function.                                          "
[10:51:40.819] |  :  .  |          "#                                                              "
[10:51:40.819] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.819] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.819] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.819] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.819] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.819] |  :  .  |          repeat {
[10:51:40.819] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.819] |  :  .  |                  emptyenv())) 
[10:51:40.819] |  :  .  |                  break
[10:51:40.819] |  :  .  |              penv <- env
[10:51:40.819] |  :  .  |              env <- parent.env(env)
[10:51:40.819] |  :  .  |          }
[10:51:40.819] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.819] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.819] |  :  .  |          }
[10:51:40.819] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.819] |  :  .  |              !isNamespace(penv)) {
[10:51:40.819] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.819] |  :  .  |          }
[10:51:40.819] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.819] |  :  .  |          {
[10:51:40.819] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.819] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.819] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.819] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.819] |  :  .  |              }
[10:51:40.819] |  :  .  |              {
[10:51:40.819] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.819] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.819] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.819] |  :  .  |                  })
[10:51:40.819] |  :  .  |              }
[10:51:40.819] |  :  .  |          }
[10:51:40.819] |  :  .  |      }, args = future.call.arguments)
[10:51:40.819] |  :  .  |  }
[10:51:40.820] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.820] |  :  .  Search for packages associated with the globals ...
[10:51:40.820] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:40.820] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:40.820] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.821] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:40.821] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:40.821] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.821] |  :  .  packages: [1] ‘future.apply’
[10:51:40.821] |  :  getGlobalsAndPackages() ... done
[10:51:40.821] |  :  run() for Future (‘Future’) ...
[10:51:40.822] |  :  .  state: ‘created’
[10:51:40.822] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.822] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.822] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.822] |  :  .  |  Launching futures ...
[10:51:40.822] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.822] |  :  .  |  :  .  getFutureData() ...
[10:51:40.822] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.823] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:40.823] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.823] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.823] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.823] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.823] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.823] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.823] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.824] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.824] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.824] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.824] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.824] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.827] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.827] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.827] |  :  .  |  Launching futures ... done
[10:51:40.828] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.828] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.828] |  :  .  |  :  .  attachPackages() ...
[10:51:40.828] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.828] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.828] Created future:
[10:51:40.828] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.829] |  :  .  |  :  .  attachPackages() ...
[10:51:40.829] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:40.829] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.830] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.830] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.830] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.831] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.831] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.831] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.831] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.832] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.832] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.832] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.832] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.832] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.832] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.832] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.832] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.835] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.835] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.835] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.835] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.835] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.835] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.835] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.835] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.835] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.835] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.840] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.840] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.840] |  :  readImmediateCondition() ...
[10:51:40.841] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.841] |  :   - Number of RDS files: 0
[10:51:40.841] |  :  readImmediateCondition() ... DONE
[10:51:40.828] MulticoreFuture:
[10:51:40.828] Label: ‘future_vapply-1’
[10:51:40.828] Expression:
[10:51:40.828] {
[10:51:40.828]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.828]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.828]     "# as a global variable                                         "
[10:51:40.828]     do.call(function(...) {
[10:51:40.828]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.828]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.828]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.828]         "# anonymous function.                                          "
[10:51:40.828]         "#                                                              "
[10:51:40.828]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.828]         "# function environment of FUN() to the calling environment.    "
[10:51:40.828]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.828]         "# global environment, which is where globals are written.      "
[10:51:40.828]         penv <- env <- environment(...future.FUN)
[10:51:40.828]         repeat {
[10:51:40.828]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.828]                 emptyenv())) 
[10:51:40.828]                 break
[10:51:40.828]             penv <- env
[10:51:40.828]             env <- parent.env(env)
[10:51:40.828]         }
[10:51:40.828]         if (identical(penv, globalenv())) {
[10:51:40.828]             environment(...future.FUN) <- environment()
[10:51:40.828]         }
[10:51:40.828]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.828]             !isNamespace(penv)) {
[10:51:40.828]             parent.env(penv) <- environment()
[10:51:40.828]         }
[10:51:40.828]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.828]         {
[10:51:40.828]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.828]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.828]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.828]                 on.exit(options(oopts), add = TRUE)
[10:51:40.828]             }
[10:51:40.828]             {
[10:51:40.828]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.828]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.828]                   ...future.FUN(...future.X_jj, ...)
[10:51:40.828]                 })
[10:51:40.828]             }
[10:51:40.828]         }
[10:51:40.828]     }, args = future.call.arguments)
[10:51:40.828] }
[10:51:40.828] Lazy evaluation: FALSE
[10:51:40.828] Asynchronous evaluation: TRUE
[10:51:40.828] Local evaluation: TRUE
[10:51:40.828] Environment: R_GlobalEnv
[10:51:40.828] Capture standard output: TRUE
[10:51:40.828] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.828] Immediate condition classes: ‘immediateCondition’
[10:51:40.828] Globals: 11 objects totaling 14.66 KiB (function ‘...future.FUN’ of 5.67 KiB, function ‘x_FUN’ of 680 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:40.828] Packages: 1 packages (‘future.apply’)
[10:51:40.828] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.828] Resolved: FALSE
[10:51:40.828] Value: <not collected>
[10:51:40.828] Conditions captured: <none>
[10:51:40.828] Early signaling: FALSE
[10:51:40.828] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.828] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.842] Chunk #1 of 2 ... DONE
[10:51:40.842] Chunk #2 of 2 ...
[10:51:40.842]  - Finding globals in 'X' for chunk #2 ...
[10:51:40.842] |  :  getGlobalsAndPackages() ...
[10:51:40.843] |  :  .  Searching for globals ...
[10:51:40.843] |  :  .  |  globals found: [0] 
[10:51:40.843] |  :  .  Searching for globals ... DONE
[10:51:40.843] |  :  .  globals: [0] <none>
[10:51:40.843] |  :  .  packages: [0] <none>
[10:51:40.844] |  :  getGlobalsAndPackages() ... done
[10:51:40.844]    + additional globals found: [n=0] 
[10:51:40.844]    + additional namespaces needed: [n=0] 
[10:51:40.844]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:40.844]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.844]  - seeds: <none>
[10:51:40.844]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.844] |  :  getGlobalsAndPackages() ...
[10:51:40.844] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.845] |  :  .  Resolving globals: FALSE
[10:51:40.845] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.845] |  :  .  |  {
[10:51:40.845] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.845] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.845] |  :  .  |      "# as a global variable                                         "
[10:51:40.845] |  :  .  |      do.call(function(...) {
[10:51:40.845] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.845] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.845] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.845] |  :  .  |          "# anonymous function.                                          "
[10:51:40.845] |  :  .  |          "#                                                              "
[10:51:40.845] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.845] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.845] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.845] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.845] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.845] |  :  .  |          repeat {
[10:51:40.845] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.845] |  :  .  |                  emptyenv())) 
[10:51:40.845] |  :  .  |                  break
[10:51:40.845] |  :  .  |              penv <- env
[10:51:40.845] |  :  .  |              env <- parent.env(env)
[10:51:40.845] |  :  .  |          }
[10:51:40.845] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.845] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.845] |  :  .  |          }
[10:51:40.845] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.845] |  :  .  |              !isNamespace(penv)) {
[10:51:40.845] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.845] |  :  .  |          }
[10:51:40.845] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.845] |  :  .  |          {
[10:51:40.845] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.845] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.845] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.845] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.845] |  :  .  |              }
[10:51:40.845] |  :  .  |              {
[10:51:40.845] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.845] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.845] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.845] |  :  .  |                  })
[10:51:40.845] |  :  .  |              }
[10:51:40.845] |  :  .  |          }
[10:51:40.845] |  :  .  |      }, args = future.call.arguments)
[10:51:40.845] |  :  .  |  }
[10:51:40.840] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.840] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.840] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.840] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.840] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.840] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.840] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.846] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.846] |  :  .  Search for packages associated with the globals ...
[10:51:40.846] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:40.846] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.846] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.847] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.847] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.847] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:40.847] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.847] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.847] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:40.847] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:40.847] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.847] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.847] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.847] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.847] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.847] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.848] |  :  .  packages: [1] ‘future.apply’
[10:51:40.848] |  :  getGlobalsAndPackages() ... done
[10:51:40.848] |  :  run() for Future (‘Future’) ...
[10:51:40.848] |  :  .  state: ‘created’
[10:51:40.848] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.848] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.849] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.849] |  :  .  |  Launching futures ...
[10:51:40.849] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.849] |  :  .  |  :  .  getFutureData() ...
[10:51:40.849] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.849] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:40.849] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.850] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.850] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.850] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.850] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.850] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.850] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.850] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.848] |  :  .  |  :  .  |  :  List of 1
[10:51:40.848] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.848] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.848] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.848] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.848] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.848] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.848] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.851] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.851] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.851] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.851] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.851] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.851] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.851] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.851] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.851] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.852] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.852] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.852] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.852] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.852] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.853] |  :  .  |  :  .  assign_globals() ...
[10:51:40.854] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.854] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.855] |  :  .  |  Launching futures ... done
[10:51:40.855] |  :  .  |  :  .  attachPackages() ...
[10:51:40.855] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.855] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.855] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.855] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.856] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.856] Created future:
[10:51:40.856] |  :  .  |  :  .  attachPackages() ...
[10:51:40.856] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:40.856] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.858] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.858] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.858] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.859] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.859] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.860] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.860] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.860] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.860] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.860] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.860] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.860] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.860] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.860] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.860] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.863] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:40.864] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.864] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.864] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.864] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.864] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.864] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.864] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.864] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.864] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.864] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.864] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.864] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.864] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.864] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.868] |  :  .  |  :  .  |  :  .  Not identical
[10:51:40.868] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:40.869] |  :  readImmediateCondition() ...
[10:51:40.869] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.870] |  :   - Number of RDS files: 0
[10:51:40.870] |  :  readImmediateCondition() ... DONE
[10:51:40.853] |  :  .  |  :  .  List of 11
[10:51:40.853] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:40.853] |  :  .  |  :  .   $ x_FUN                    :function (x, y)  
[10:51:40.853] |  :  .  |  :  .   $ times                    : int 15
[10:51:40.853] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.853] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:40.853] |  :  .  |  :  .   $ dim                      : int [1:2] 3 5
[10:51:40.853] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:40.853] |  :  .  |  :  .   $ future.call.arguments    :List of 1
[10:51:40.853] |  :  .  |  :  .    ..$ y: num [1:5] 2 4 6 8 10
[10:51:40.853] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.853] |  :  .  |  :  .   $ ...future.elements_ii    :List of 2
[10:51:40.853] |  :  .  |  :  .    ..$ A: num 50
[10:51:40.853] |  :  .  |  :  .    ..$ B: num 60
[10:51:40.853] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.853] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.853] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:40.853] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.853] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.853] |  :  .  |  :  .   - attr(*, "total_size")= num 26659
[10:51:40.853] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.853] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.870] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.870] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:40.870] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:40.856] MulticoreFuture:
[10:51:40.856] Label: ‘future_vapply-2’
[10:51:40.856] Expression:
[10:51:40.856] {
[10:51:40.856]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.856]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.856]     "# as a global variable                                         "
[10:51:40.856]     do.call(function(...) {
[10:51:40.856]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.856]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.856]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.856]         "# anonymous function.                                          "
[10:51:40.856]         "#                                                              "
[10:51:40.856]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.856]         "# function environment of FUN() to the calling environment.    "
[10:51:40.856]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.856]         "# global environment, which is where globals are written.      "
[10:51:40.856]         penv <- env <- environment(...future.FUN)
[10:51:40.856]         repeat {
[10:51:40.856]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.856]                 emptyenv())) 
[10:51:40.856]                 break
[10:51:40.856]             penv <- env
[10:51:40.856]             env <- parent.env(env)
[10:51:40.856]         }
[10:51:40.856]         if (identical(penv, globalenv())) {
[10:51:40.856]             environment(...future.FUN) <- environment()
[10:51:40.856]         }
[10:51:40.856]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.856]             !isNamespace(penv)) {
[10:51:40.856]             parent.env(penv) <- environment()
[10:51:40.856]         }
[10:51:40.856]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.856]         {
[10:51:40.856]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.856]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.856]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.856]                 on.exit(options(oopts), add = TRUE)
[10:51:40.856]             }
[10:51:40.856]             {
[10:51:40.856]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.856]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.856]                   ...future.FUN(...future.X_jj, ...)
[10:51:40.856]                 })
[10:51:40.856]             }
[10:51:40.856]         }
[10:51:40.856]     }, args = future.call.arguments)
[10:51:40.856] }
[10:51:40.856] Lazy evaluation: FALSE
[10:51:40.856] Asynchronous evaluation: TRUE
[10:51:40.856] Local evaluation: TRUE
[10:51:40.856] Environment: R_GlobalEnv
[10:51:40.856] Capture standard output: TRUE
[10:51:40.856] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.856] Immediate condition classes: ‘immediateCondition’
[10:51:40.856] Globals: 11 objects totaling 14.66 KiB (function ‘...future.FUN’ of 5.67 KiB, function ‘x_FUN’ of 680 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:40.856] Packages: 1 packages (‘future.apply’)
[10:51:40.856] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.856] Resolved: FALSE
[10:51:40.856] Value: <not collected>
[10:51:40.856] Conditions captured: <none>
[10:51:40.856] Early signaling: FALSE
[10:51:40.856] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.856] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.871] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:40.871] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:40.871] Chunk #2 of 2 ... DONE
[10:51:40.871] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:40.871] Launching 2 futures (chunks) ... DONE
[10:51:40.871] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:40.871] Resolving 2 futures (chunks) ...
[10:51:40.871] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:40.871] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.871] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.871] |  :  value() on list ...
[10:51:40.872] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.872] |  :  .  recursive: 0
[10:51:40.872] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.872] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.872] |  :  .  length: 2
[10:51:40.872] |  :  .  
[10:51:40.872] |  :  .  Number of remaining objects: 2
[10:51:40.872] |  :  .  checking value #1 ...
[10:51:40.873] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.875] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.875] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.875] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.876] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.876] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.876] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.876] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.876] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.876] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.876] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.876] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.876] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.876] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.876] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.876] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.876] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.876] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.876] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.876] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.880] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.868] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:40.868] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.868] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.868] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.868] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.868] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.868] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.882] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:40.882] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:40.882] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:40.882] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:40.883] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:40.883] |  :  .  |  readImmediateCondition() ...
[10:51:40.883] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.880] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.880] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.880] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.880] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.880] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.880] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.880] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.880] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.883] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:40.883] |  :  .  |  :  .  |  :  1. sequential:
[10:51:40.883] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:40.883] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:40.883] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.884] |  :  .  |   - Number of RDS files: 0
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.884] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.884] |  :  .  checking value #1 ... done
[10:51:40.884] |  :  .  checking value #2 ...
[10:51:40.884] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.884] |  :  .  |  :  .  |  :  List of 1
[10:51:40.884] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.884] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.884] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.884] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.884] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.884] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.884] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.887] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.888] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.888] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.888] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:40.888] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.888] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:40.889] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:40.889] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:40.889] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.889] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.889] |  :  .  |  :  .  assign_globals() ...
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.884] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.892] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.892] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.892] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.892] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.893] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.893] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.893] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.893] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.893] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.893] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.895] |  :  .  |  readImmediateCondition() ...
[10:51:40.895] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.895] |  :  .  |   - Number of RDS files: 0
[10:51:40.896] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.896] |  :  .  checking value #2 ... done
[10:51:40.893] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.893] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.893] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.893] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.893] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.893] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.893] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.893] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.893] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.893] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.893] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.893] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.893] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.893] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.898] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.898] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.898] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.898] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.898] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.899] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.899] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.899] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.899] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.890] |  :  .  |  :  .  List of 11
[10:51:40.890] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:40.890] |  :  .  |  :  .   $ x_FUN                    :function (x, y)  
[10:51:40.890] |  :  .  |  :  .   $ times                    : int 15
[10:51:40.890] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.890] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:40.890] |  :  .  |  :  .   $ dim                      : int [1:2] 3 5
[10:51:40.890] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:40.890] |  :  .  |  :  .   $ future.call.arguments    :List of 1
[10:51:40.890] |  :  .  |  :  .    ..$ y: num [1:5] 2 4 6 8 10
[10:51:40.890] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.890] |  :  .  |  :  .   $ ...future.elements_ii    :List of 2
[10:51:40.890] |  :  .  |  :  .    ..$ C: num 70
[10:51:40.890] |  :  .  |  :  .    ..$ D: num 80
[10:51:40.890] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:40.890] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:40.890] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:40.890] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:40.890] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:40.890] |  :  .  |  :  .   - attr(*, "total_size")= num 26659
[10:51:40.890] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.890] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:40.903] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:40.903] |  :  .  |  :  .  - reassign environment for ‘x_FUN’ [where=emptyenv()]
[10:51:40.903] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:40.904] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:40.904] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:40.904] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:40.904] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:40.904] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:40.904] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:40.904] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:40.905] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:40.905] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:40.905] |  :  .  |  :  .  assign_globals() ... done
[10:51:40.906] |  :  .  Number of remaining objects: 2
[10:51:40.906] |  :  .  checking value #1 ...
[10:51:40.906] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.907] |  :  .  |  readImmediateCondition() ...
[10:51:40.907] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.907] |  :  .  |   - Number of RDS files: 0
[10:51:40.907] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.908] |  :  .  |  MulticoreFuture #1
[10:51:40.908] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.908] |  :  .  |  :  nx: 2
[10:51:40.908] |  :  .  |  :  relay: TRUE
[10:51:40.908] |  :  .  |  :  stdout: TRUE
[10:51:40.909] |  :  .  |  :  signal: TRUE
[10:51:40.909] |  :  .  |  :  resignal: FALSE
[10:51:40.909] |  :  .  |  :  force: TRUE
[10:51:40.909] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.909] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:40.909] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:40.909] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.909] |  :  .  |  :  until=1
[10:51:40.910] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.910] |  :  .  |  :  relaying element #1
[10:51:40.910] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:40.910] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.910] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:40.911] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.911] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.911] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.911] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.912] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.912] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.912] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.912] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.913] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.913] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.913] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.913] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.914] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.914] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.914] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.914] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:40.914] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.915] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.915] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.915] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.915] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.915] |  :  .  |  :  value: <list>
[10:51:40.916] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.916] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:40.916] |  :  .  |  :  nx: 2
[10:51:40.916] |  :  .  |  :  relay: TRUE
[10:51:40.916] |  :  .  |  :  stdout: TRUE
[10:51:40.917] |  :  .  |  :  signal: TRUE
[10:51:40.917] |  :  .  |  :  resignal: FALSE
[10:51:40.917] |  :  .  |  :  force: TRUE
[10:51:40.917] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.917] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.917] |  :  .  |  :  until=2
[10:51:40.918] |  :  .  |  :  relaying element #2
[10:51:40.918] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.918] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.918] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:40.918] |  :  .  |  length: 1 (resolved future 1)
[10:51:40.919] |  :  .  checking value #1 ... done
[10:51:40.910] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.910] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.910] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.910] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.910] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.910] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.910] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.910] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.910] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:40.910] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.910] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.910] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:40.910] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.910] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.919] |  :  .  checking value #2 ...
[10:51:40.919] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.919] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:40.919] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:40.919] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.919] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.919] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.919] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.919] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.919] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.919] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.923] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.929] |  :  .  |  readImmediateCondition() ...
[10:51:40.930] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:40.930] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.930] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:40.930] |  :  .  |   - Number of RDS files: 0
[10:51:40.930] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.930] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:40.930] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:40.930] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:40.930] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:40.930] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:40.930] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:40.930] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:40.930] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:40.934] |  :  .  checking value #2 ... done
[10:51:40.931] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.931] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:40.931] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:40.931] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:40.931] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.931] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.931] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.931] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.931] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:40.931] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:40.931] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:40.931] |  :  .  |  :  .  |  :  .      ...)  
[10:51:40.931] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:40.931] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:40.936] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:40.937] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:40.937] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.937] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.937] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.937] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:40.938] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:40.938] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.938] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:40.945] |  :  .  Number of remaining objects: 1
[10:51:40.945] |  :  .  checking value #2 ...
[10:51:40.945] |  :  .  |  'obj' is MulticoreFuture
[10:51:40.945] |  :  .  |  readImmediateCondition() ...
[10:51:40.945] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.946] |  :  .  |   - Number of RDS files: 0
[10:51:40.946] |  :  .  |  readImmediateCondition() ... DONE
[10:51:40.946] |  :  .  |  MulticoreFuture #2
[10:51:40.946] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.946] |  :  .  |  :  nx: 2
[10:51:40.946] |  :  .  |  :  relay: TRUE
[10:51:40.946] |  :  .  |  :  stdout: TRUE
[10:51:40.947] |  :  .  |  :  signal: TRUE
[10:51:40.947] |  :  .  |  :  resignal: FALSE
[10:51:40.947] |  :  .  |  :  force: TRUE
[10:51:40.947] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:40.947] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:40.947] |  :  .  |  :  until=2
[10:51:40.947] |  :  .  |  :  relaying element #2
[10:51:40.947] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.948] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:40.948] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:40.948] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:40.948] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:40.948] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:40.949] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:40.949] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.949] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.949] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.949] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.950] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.950] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.950] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.950] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.950] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.950] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.951] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:40.951] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.951] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.951] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:40.951] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:40.951] |  :  .  |  :  value: <list>
[10:51:40.952] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:40.952] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:40.952] |  :  .  |  :  nx: 2
[10:51:40.952] |  :  .  |  :  relay: TRUE
[10:51:40.952] |  :  .  |  :  stdout: TRUE
[10:51:40.952] |  :  .  |  :  signal: TRUE
[10:51:40.952] |  :  .  |  :  resignal: FALSE
[10:51:40.953] |  :  .  |  :  force: TRUE
[10:51:40.953] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.953] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.953] |  :  .  |  :  until=2
[10:51:40.953] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.953] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.954] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:40.954] |  :  .  |  length: 0 (resolved future 2)
[10:51:40.954] |  :  .  checking value #2 ... done
[10:51:40.954] |  :  .  Relaying remaining futures ...
[10:51:40.954] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:40.954] |  :  .  |  :  nx: 2
[10:51:40.955] |  :  .  |  :  relay: TRUE
[10:51:40.955] |  :  .  |  :  stdout: TRUE
[10:51:40.955] |  :  .  |  :  signal: TRUE
[10:51:40.955] |  :  .  |  :  resignal: FALSE
[10:51:40.955] |  :  .  |  :  force: TRUE
[10:51:40.955] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.955] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:40.955] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:40.956] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:40.956] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:40.956] |  :  .  Relaying remaining futures ... done
[10:51:40.956] |  :  value() on list ... done
[10:51:40.956]  - Number of value chunks collected: 2
[10:51:40.956] Resolving 2 futures (chunks) ... DONE
[10:51:40.956] Reducing values from 2 chunks ...
[10:51:40.956]  - Number of values collected after concatenation: 4
[10:51:40.956]  - Number of values expected: 4
[10:51:40.957] Reducing values from 2 chunks ... DONE
[10:51:40.957] future_lapply() ... DONE
 num [1:3, 1:5, 1:4] 100 100 100 200 200 200 300 300 300 400 ...
 - attr(*, "dimnames")=List of 3
  ..$ : NULL
  ..$ : NULL
  ..$ : chr [1:4] "A" "B" "C" "D"
[10:51:40.959] future_lapply() ...
[10:51:40.962] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.962] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.962] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.963] Number of chunks: 2
[10:51:40.963] getGlobalsAndPackagesXApply() ...
[10:51:40.963]  - future.globals: TRUE
[10:51:40.963] |  :  getGlobalsAndPackages() ...
[10:51:40.963] |  :  .  Searching for globals ...
[10:51:40.967] |  :  .  |  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:40.967] |  :  .  Searching for globals ... DONE
[10:51:40.967] |  :  .  Resolving globals: FALSE
[10:51:40.968] |  :  .  Search for packages associated with the globals ...
[10:51:40.968] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:40.968] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:40.969] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.969] |  :  .  The total size of the 7 globals is 14.73 KiB (15079 bytes)
[10:51:40.969] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 14.73 KiB The three largest globals are ‘FUN’ (6.74 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:40.970] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:40.970] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:40.970] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:40.970] |  :  .  packages: [1] ‘future.apply’
[10:51:40.970] |  :  getGlobalsAndPackages() ... done
[10:51:40.970]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:40.971]  - needed namespaces: [n=1] ‘future.apply’
[10:51:40.971] Finding globals ... DONE
[10:51:40.971]  - use_args: TRUE
[10:51:40.971]  - Getting '...' globals ...
[10:51:40.971] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:40.971] |  :  .  recursive: 0
[10:51:40.972] |  :  .  length: 1
[10:51:40.972] |  :  .  elements: ‘...’
[10:51:40.972] |  :  .  'obj' is DotDotDotList
[10:51:40.972] |  :  .  resolve(obj, ...) ...
[10:51:40.972] |  :  .  resolve(obj, ...) ... done
[10:51:40.972] |  :  .  length: 0 (resolved future 1)
[10:51:40.972] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:40.973]    - '...' content: [n=0] 
[10:51:40.973] List of 1
[10:51:40.973]  $ ...: list()
[10:51:40.973]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.973]  - attr(*, "where")=List of 1
[10:51:40.973]   ..$ ...:<environment: 0x55d464ebdef8> 
[10:51:40.973]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.973]  - attr(*, "resolved")= logi TRUE
[10:51:40.973]  - attr(*, "total_size")= num NA
[10:51:40.976]  - Getting '...' globals ... DONE
[10:51:40.976] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:40.976] List of 8
[10:51:40.976]  $ ...future.FUN:function (x, ...)  
[10:51:40.976]  $ x_FUN        :function (x)  
[10:51:40.976]  $ times        : int 1
[10:51:40.976]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:40.976]  $ stop_if_not  :function (...)  
[10:51:40.976]  $ dim          : NULL
[10:51:40.976]  $ valid_types  : chr "logical"
[10:51:40.976]  $ ...          : list()
[10:51:40.976]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:40.976]  - attr(*, "where")=List of 8
[10:51:40.976]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:40.976]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:40.976]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:40.976]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:40.976]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:40.976]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:40.976]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:40.976]   ..$ ...          :<environment: 0x55d464ebdef8> 
[10:51:40.976]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:40.976]  - attr(*, "resolved")= logi FALSE
[10:51:40.976]  - attr(*, "total_size")= num 30734
[10:51:40.983] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:40.983] getGlobalsAndPackagesXApply() ... DONE
[10:51:40.983] Number of futures (= number of chunks): 2
[10:51:40.983] Launching 2 futures (chunks) ...
[10:51:40.983] Chunk #1 of 2 ...
[10:51:40.984]  - Finding globals in 'X' for chunk #1 ...
[10:51:40.984] |  :  getGlobalsAndPackages() ...
[10:51:40.984] |  :  .  Searching for globals ...
[10:51:40.984] |  :  .  |  globals found: [0] 
[10:51:40.984] |  :  .  Searching for globals ... DONE
[10:51:40.984] |  :  .  globals: [0] <none>
[10:51:40.984] |  :  .  packages: [0] <none>
[10:51:40.985] |  :  getGlobalsAndPackages() ... done
[10:51:40.985]    + additional globals found: [n=0] 
[10:51:40.985]    + additional namespaces needed: [n=0] 
[10:51:40.985]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:40.985]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:40.985]  - seeds: <none>
[10:51:40.985]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.985] |  :  getGlobalsAndPackages() ...
[10:51:40.985] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.986] |  :  .  Resolving globals: FALSE
[10:51:40.986] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:40.986] |  :  .  |  {
[10:51:40.986] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.986] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:40.986] |  :  .  |      "# as a global variable                                         "
[10:51:40.986] |  :  .  |      do.call(function(...) {
[10:51:40.986] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.986] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:40.986] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:40.986] |  :  .  |          "# anonymous function.                                          "
[10:51:40.986] |  :  .  |          "#                                                              "
[10:51:40.986] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:40.986] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:40.986] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.986] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:40.986] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:40.986] |  :  .  |          repeat {
[10:51:40.986] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:40.986] |  :  .  |                  emptyenv())) 
[10:51:40.986] |  :  .  |                  break
[10:51:40.986] |  :  .  |              penv <- env
[10:51:40.986] |  :  .  |              env <- parent.env(env)
[10:51:40.986] |  :  .  |          }
[10:51:40.986] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:40.986] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:40.986] |  :  .  |          }
[10:51:40.986] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.986] |  :  .  |              !isNamespace(penv)) {
[10:51:40.986] |  :  .  |              parent.env(penv) <- environment()
[10:51:40.986] |  :  .  |          }
[10:51:40.986] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.986] |  :  .  |          {
[10:51:40.986] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.986] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.986] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.986] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:40.986] |  :  .  |              }
[10:51:40.986] |  :  .  |              {
[10:51:40.986] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.986] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.986] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:40.986] |  :  .  |                  })
[10:51:40.986] |  :  .  |              }
[10:51:40.986] |  :  .  |          }
[10:51:40.986] |  :  .  |      }, args = future.call.arguments)
[10:51:40.986] |  :  .  |  }
[10:51:40.986] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:40.986] |  :  .  Search for packages associated with the globals ...
[10:51:40.987] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:40.987] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:40.987] |  :  .  Search for packages associated with the globals ... DONE
[10:51:40.987] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:40.988] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:40.988] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:40.988] |  :  .  packages: [1] ‘future.apply’
[10:51:40.988] |  :  getGlobalsAndPackages() ... done
[10:51:40.988] |  :  run() for Future (‘Future’) ...
[10:51:40.988] |  :  .  state: ‘created’
[10:51:40.989] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.989] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.989] |  :  .  Using MulticoreFutureBackend ...
[10:51:40.989] |  :  .  |  Launching futures ...
[10:51:40.989] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.989] |  :  .  |  :  .  getFutureData() ...
[10:51:40.989] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:40.989] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:40.990] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:40.990] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:40.990] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:40.990] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:40.990] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.990] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:40.990] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.990] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:40.991] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:40.991] |  :  .  |  :  .  getFutureData() ... done
[10:51:40.991] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.991] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:40.993] |  :  .  |  :  .  MulticoreFuture started
[10:51:40.994] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:40.994] |  :  .  |  Launching futures ... done
[10:51:40.994] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:40.994] |  :  .  |  :  .  attachPackages() ...
[10:51:40.994] |  :  .  Using MulticoreFutureBackend ... done
[10:51:40.994] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:40.994] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:40.995] Created future:
[10:51:40.995] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.995] |  :  .  |  :  .  attachPackages() ...
[10:51:40.995] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:40.995] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:40.996] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:40.997] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:40.997] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:40.997] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:40.998] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:40.998] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:40.998] |  :  .  |  :  .  |  :  .  New stack:
[10:51:40.998] |  :  .  |  :  .  |  :  .  List of 1
[10:51:40.998] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:40.998] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:40.998] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:40.998] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.998] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:40.998] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:40.998] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.002] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:41.002] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.002] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.002] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.002] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.002] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.002] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.002] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.002] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.002] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.002] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.002] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.002] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.002] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.002] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.006] |  :  .  |  :  .  |  :  .  Not identical
[10:51:41.006] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:41.007] |  :  readImmediateCondition() ...
[10:51:41.007] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.007] |  :   - Number of RDS files: 0
[10:51:41.008] |  :  readImmediateCondition() ... DONE
[10:51:40.995] MulticoreFuture:
[10:51:40.995] Label: ‘future_vapply-1’
[10:51:40.995] Expression:
[10:51:40.995] {
[10:51:40.995]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:40.995]     "# expression in do.call(), because function called uses '...'  "
[10:51:40.995]     "# as a global variable                                         "
[10:51:40.995]     do.call(function(...) {
[10:51:40.995]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:40.995]         "# without having an '...' argument. This means '...' is treated"
[10:51:40.995]         "# as a global variable. This may happen when FUN() is an       "
[10:51:40.995]         "# anonymous function.                                          "
[10:51:40.995]         "#                                                              "
[10:51:40.995]         "# If an anonymous function, we will make sure to restore the   "
[10:51:40.995]         "# function environment of FUN() to the calling environment.    "
[10:51:40.995]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:40.995]         "# global environment, which is where globals are written.      "
[10:51:40.995]         penv <- env <- environment(...future.FUN)
[10:51:40.995]         repeat {
[10:51:40.995]             if (identical(env, globalenv()) || identical(env, 
[10:51:40.995]                 emptyenv())) 
[10:51:40.995]                 break
[10:51:40.995]             penv <- env
[10:51:40.995]             env <- parent.env(env)
[10:51:40.995]         }
[10:51:40.995]         if (identical(penv, globalenv())) {
[10:51:40.995]             environment(...future.FUN) <- environment()
[10:51:40.995]         }
[10:51:40.995]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:40.995]             !isNamespace(penv)) {
[10:51:40.995]             parent.env(penv) <- environment()
[10:51:40.995]         }
[10:51:40.995]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:40.995]         {
[10:51:40.995]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:40.995]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:40.995]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:40.995]                 on.exit(options(oopts), add = TRUE)
[10:51:40.995]             }
[10:51:40.995]             {
[10:51:40.995]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:40.995]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:40.995]                   ...future.FUN(...future.X_jj, ...)
[10:51:40.995]                 })
[10:51:40.995]             }
[10:51:40.995]         }
[10:51:40.995]     }, args = future.call.arguments)
[10:51:40.995] }
[10:51:40.995] Lazy evaluation: FALSE
[10:51:40.995] Asynchronous evaluation: TRUE
[10:51:40.995] Local evaluation: TRUE
[10:51:40.995] Environment: R_GlobalEnv
[10:51:40.995] Capture standard output: TRUE
[10:51:40.995] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:40.995] Immediate condition classes: ‘immediateCondition’
[10:51:40.995] Globals: 11 objects totaling 16.54 KiB (function ‘...future.FUN’ of 6.73 KiB, function ‘x_FUN’ of 41 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:40.995] Packages: 1 packages (‘future.apply’)
[10:51:40.995] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:40.995] Resolved: FALSE
[10:51:40.995] Value: <not collected>
[10:51:40.995] Conditions captured: <none>
[10:51:40.995] Early signaling: FALSE
[10:51:40.995] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:40.995] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.008] Chunk #1 of 2 ... DONE
[10:51:41.008] Chunk #2 of 2 ...
[10:51:41.009]  - Finding globals in 'X' for chunk #2 ...
[10:51:41.009] |  :  getGlobalsAndPackages() ...
[10:51:41.009] |  :  .  Searching for globals ...
[10:51:41.009] |  :  .  |  globals found: [0] 
[10:51:41.010] |  :  .  Searching for globals ... DONE
[10:51:41.010] |  :  .  globals: [0] <none>
[10:51:41.010] |  :  .  packages: [0] <none>
[10:51:41.010] |  :  getGlobalsAndPackages() ... done
[10:51:41.010]    + additional globals found: [n=0] 
[10:51:41.010]    + additional namespaces needed: [n=0] 
[10:51:41.010]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:41.010]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:41.010]  - seeds: <none>
[10:51:41.011]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.011] |  :  getGlobalsAndPackages() ...
[10:51:41.011] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.011] |  :  .  Resolving globals: FALSE
[10:51:41.011] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:41.011] |  :  .  |  {
[10:51:41.011] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.011] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:41.011] |  :  .  |      "# as a global variable                                         "
[10:51:41.011] |  :  .  |      do.call(function(...) {
[10:51:41.011] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.011] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:41.011] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:41.011] |  :  .  |          "# anonymous function.                                          "
[10:51:41.011] |  :  .  |          "#                                                              "
[10:51:41.011] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:41.011] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:41.011] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.011] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:41.011] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:41.011] |  :  .  |          repeat {
[10:51:41.011] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:41.011] |  :  .  |                  emptyenv())) 
[10:51:41.011] |  :  .  |                  break
[10:51:41.011] |  :  .  |              penv <- env
[10:51:41.011] |  :  .  |              env <- parent.env(env)
[10:51:41.011] |  :  .  |          }
[10:51:41.011] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:41.011] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:41.011] |  :  .  |          }
[10:51:41.011] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.011] |  :  .  |              !isNamespace(penv)) {
[10:51:41.011] |  :  .  |              parent.env(penv) <- environment()
[10:51:41.011] |  :  .  |          }
[10:51:41.011] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.011] |  :  .  |          {
[10:51:41.011] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.011] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.011] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.011] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:41.011] |  :  .  |              }
[10:51:41.011] |  :  .  |              {
[10:51:41.011] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.011] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.011] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:41.011] |  :  .  |                  })
[10:51:41.011] |  :  .  |              }
[10:51:41.011] |  :  .  |          }
[10:51:41.011] |  :  .  |      }, args = future.call.arguments)
[10:51:41.011] |  :  .  |  }
[10:51:41.012] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:41.012] |  :  .  Search for packages associated with the globals ...
[10:51:41.006] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:41.006] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.006] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.006] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.006] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.006] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.006] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.012] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:41.013] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:41.013] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:41.013] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:41.013] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:41.013] |  :  .  Search for packages associated with the globals ... DONE
[10:51:41.013] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:41.013] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:41.013] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:41.013] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:41.014] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.014] |  :  .  packages: [1] ‘future.apply’
[10:51:41.014] |  :  getGlobalsAndPackages() ... done
[10:51:41.013] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:41.013] |  :  .  |  :  .  |  :  1. sequential:
[10:51:41.013] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:41.013] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:41.013] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.014] |  :  run() for Future (‘Future’) ...
[10:51:41.014] |  :  .  state: ‘created’
[10:51:41.015] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.015] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.015] |  :  .  Using MulticoreFutureBackend ...
[10:51:41.015] |  :  .  |  Launching futures ...
[10:51:41.015] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:41.015] |  :  .  |  :  .  getFutureData() ...
[10:51:41.015] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:41.015] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:41.016] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:41.016] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:41.016] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:41.016] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:41.016] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.016] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:41.016] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.016] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:41.017] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:41.017] |  :  .  |  :  .  getFutureData() ... done
[10:51:41.014] |  :  .  |  :  .  |  :  List of 1
[10:51:41.014] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.014] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.014] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.014] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.014] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.014] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.014] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.017] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:41.017] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.017] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.017] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.017] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:41.018] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:41.018] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.018] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:41.018] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:41.018] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:41.019] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.019] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.019] |  :  .  |  :  .  assign_globals() ...
[10:51:41.020] |  :  .  |  :  .  MulticoreFuture started
[10:51:41.020] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:41.021] |  :  .  |  Launching futures ... done
[10:51:41.021] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.021] |  :  .  |  :  .  attachPackages() ...
[10:51:41.021] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:41.021] |  :  .  Using MulticoreFutureBackend ... done
[10:51:41.021] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:41.022] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:41.022] Created future:
[10:51:41.022] |  :  .  |  :  .  attachPackages() ...
[10:51:41.022] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:41.022] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:41.024] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.024] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.024] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.025] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.025] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.025] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:41.026] |  :  .  |  :  .  |  :  .  New stack:
[10:51:41.026] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.026] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.026] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.026] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.029] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:41.019] |  :  .  |  :  .  List of 11
[10:51:41.019] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:41.019] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:41.019] |  :  .  |  :  .   $ times                    : int 1
[10:51:41.019] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:41.019] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:41.019] |  :  .  |  :  .   $ dim                      : NULL
[10:51:41.019] |  :  .  |  :  .   $ valid_types              : chr "logical"
[10:51:41.019] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:41.019] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.019] |  :  .  |  :  .   $ ...future.elements_ii    :List of 6
[10:51:41.019] |  :  .  |  :  .    ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
[10:51:41.019] |  :  .  |  :  .    ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ...
[10:51:41.019] |  :  .  |  :  .    ..$ disp: num [1:32] 160 160 108 258 360 ...
[10:51:41.019] |  :  .  |  :  .    ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...
[10:51:41.019] |  :  .  |  :  .    ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
[10:51:41.019] |  :  .  |  :  .    ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ...
[10:51:41.019] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:41.019] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:41.019] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:41.019] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:41.019] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:41.019] |  :  .  |  :  .   - attr(*, "total_size")= num 30734
[10:51:41.019] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.019] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:41.032] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:41.033] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:41.033] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:41.033] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:41.033] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:41.033] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:41.033] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:41.029] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.029] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.029] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.029] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.029] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.029] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.029] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.029] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.029] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.029] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.029] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.029] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.029] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.029] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.033] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:41.034] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:41.034] |  :  .  |  :  .  |  :  .  Not identical
[10:51:41.034] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:41.034] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:41.034] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:41.034] |  :  .  |  :  .  assign_globals() ... done
[10:51:41.035] |  :  readImmediateCondition() ...
[10:51:41.035] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.035] |  :   - Number of RDS files: 0
[10:51:41.036] |  :  readImmediateCondition() ... DONE
[10:51:41.022] MulticoreFuture:
[10:51:41.022] Label: ‘future_vapply-2’
[10:51:41.022] Expression:
[10:51:41.022] {
[10:51:41.022]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.022]     "# expression in do.call(), because function called uses '...'  "
[10:51:41.022]     "# as a global variable                                         "
[10:51:41.022]     do.call(function(...) {
[10:51:41.022]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.022]         "# without having an '...' argument. This means '...' is treated"
[10:51:41.022]         "# as a global variable. This may happen when FUN() is an       "
[10:51:41.022]         "# anonymous function.                                          "
[10:51:41.022]         "#                                                              "
[10:51:41.022]         "# If an anonymous function, we will make sure to restore the   "
[10:51:41.022]         "# function environment of FUN() to the calling environment.    "
[10:51:41.022]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.022]         "# global environment, which is where globals are written.      "
[10:51:41.022]         penv <- env <- environment(...future.FUN)
[10:51:41.022]         repeat {
[10:51:41.022]             if (identical(env, globalenv()) || identical(env, 
[10:51:41.022]                 emptyenv())) 
[10:51:41.022]                 break
[10:51:41.022]             penv <- env
[10:51:41.022]             env <- parent.env(env)
[10:51:41.022]         }
[10:51:41.022]         if (identical(penv, globalenv())) {
[10:51:41.022]             environment(...future.FUN) <- environment()
[10:51:41.022]         }
[10:51:41.022]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.022]             !isNamespace(penv)) {
[10:51:41.022]             parent.env(penv) <- environment()
[10:51:41.022]         }
[10:51:41.022]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.022]         {
[10:51:41.022]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.022]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.022]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.022]                 on.exit(options(oopts), add = TRUE)
[10:51:41.022]             }
[10:51:41.022]             {
[10:51:41.022]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.022]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.022]                   ...future.FUN(...future.X_jj, ...)
[10:51:41.022]                 })
[10:51:41.022]             }
[10:51:41.022]         }
[10:51:41.022]     }, args = future.call.arguments)
[10:51:41.022] }
[10:51:41.022] Lazy evaluation: FALSE
[10:51:41.022] Asynchronous evaluation: TRUE
[10:51:41.022] Local evaluation: TRUE
[10:51:41.022] Environment: R_GlobalEnv
[10:51:41.022] Capture standard output: TRUE
[10:51:41.022] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:41.022] Immediate condition classes: ‘immediateCondition’
[10:51:41.022] Globals: 11 objects totaling 16.28 KiB (function ‘...future.FUN’ of 6.73 KiB, function ‘x_FUN’ of 41 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:41.022] Packages: 1 packages (‘future.apply’)
[10:51:41.022] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:41.022] Resolved: FALSE
[10:51:41.022] Value: <not collected>
[10:51:41.022] Conditions captured: <none>
[10:51:41.022] Early signaling: FALSE
[10:51:41.022] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:41.022] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.037] Chunk #2 of 2 ... DONE
[10:51:41.037] Launching 2 futures (chunks) ... DONE
[10:51:41.037] Resolving 2 futures (chunks) ...
[10:51:41.037] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.037] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.037] |  :  value() on list ...
[10:51:41.037] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.037] |  :  .  recursive: 0
[10:51:41.037] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:41.038] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:41.038] |  :  .  length: 2
[10:51:41.038] |  :  .  
[10:51:41.038] |  :  .  Number of remaining objects: 2
[10:51:41.038] |  :  .  checking value #1 ...
[10:51:41.038] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.034] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:41.034] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.034] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.034] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.034] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.034] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.034] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.038] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.038] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.038] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.038] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.038] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.038] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.038] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.038] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.038] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.038] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.038] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.038] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.038] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.038] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.042] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:41.042] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:41.042] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:41.042] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:41.042] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:41.042] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:41.043] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:41.043] |  :  .  |  :  .  |  :  1. sequential:
[10:51:41.043] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:41.043] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:41.043] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.042] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.042] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.042] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.042] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.042] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.042] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.042] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.042] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:41.043] |  :  .  |  :  .  |  :  List of 1
[10:51:41.043] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.043] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.043] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.043] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.043] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.043] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.043] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.046] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.047] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.047] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.047] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:41.047] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.047] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:41.048] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:41.048] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:41.048] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.048] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.048] |  :  .  |  :  .  assign_globals() ...
[10:51:41.049] |  :  .  |  readImmediateCondition() ...
[10:51:41.049] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.049] |  :  .  |   - Number of RDS files: 0
[10:51:41.049] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.050] |  :  .  checking value #1 ... done
[10:51:41.050] |  :  .  checking value #2 ...
[10:51:41.050] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.045] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.055] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:41.055] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:41.055] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:41.055] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:41.055] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:41.056] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:41.056] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:41.056] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:41.056] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:41.056] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:41.060] |  :  .  |  readImmediateCondition() ...
[10:51:41.056] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.056] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.056] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.056] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.056] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.056] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.056] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.056] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.056] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.056] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.056] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.056] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.056] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.056] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.060] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.061] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.061] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.061] |  :  .  |   - Number of RDS files: 0
[10:51:41.061] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.061] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.061] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.061] |  :  .  checking value #2 ... done
[10:51:41.061] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.061] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:41.062] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.062] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.062] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.048] |  :  .  |  :  .  List of 11
[10:51:41.048] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:41.048] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:41.048] |  :  .  |  :  .   $ times                    : int 1
[10:51:41.048] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:41.048] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:41.048] |  :  .  |  :  .   $ dim                      : NULL
[10:51:41.048] |  :  .  |  :  .   $ valid_types              : chr "logical"
[10:51:41.048] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:41.048] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.048] |  :  .  |  :  .   $ ...future.elements_ii    :List of 5
[10:51:41.048] |  :  .  |  :  .    ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ...
[10:51:41.048] |  :  .  |  :  .    ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ...
[10:51:41.048] |  :  .  |  :  .    ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ...
[10:51:41.048] |  :  .  |  :  .    ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ...
[10:51:41.048] |  :  .  |  :  .    ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ...
[10:51:41.048] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:41.048] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:41.048] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:41.048] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:41.048] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:41.048] |  :  .  |  :  .   - attr(*, "total_size")= num 30734
[10:51:41.048] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.048] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:41.063] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:41.063] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:41.063] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:41.063] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:41.063] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:41.063] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:41.064] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:41.064] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:41.064] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:41.064] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:41.064] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:41.064] |  :  .  |  :  .  assign_globals() ... done
[10:51:41.067] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.067] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.071] |  :  .  Number of remaining objects: 2
[10:51:41.072] |  :  .  checking value #1 ...
[10:51:41.068] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.072] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.072] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:41.072] |  :  .  |  readImmediateCondition() ...
[10:51:41.072] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:41.072] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.073] |  :  .  |   - Number of RDS files: 0
[10:51:41.073] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.073] |  :  .  |  MulticoreFuture #1
[10:51:41.073] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:41.073] |  :  .  |  :  nx: 2
[10:51:41.073] |  :  .  |  :  relay: TRUE
[10:51:41.074] |  :  .  |  :  stdout: TRUE
[10:51:41.074] |  :  .  |  :  signal: TRUE
[10:51:41.074] |  :  .  |  :  resignal: FALSE
[10:51:41.074] |  :  .  |  :  force: TRUE
[10:51:41.074] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:41.075] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:41.075] |  :  .  |  :  until=1
[10:51:41.075] |  :  .  |  :  relaying element #1
[10:51:41.075] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.076] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:41.076] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.077] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:41.077] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:41.077] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:41.078] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:41.078] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.078] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.078] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.078] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.079] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.072] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.072] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.072] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.072] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.072] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.072] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.072] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.072] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.072] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.072] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.072] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.072] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.072] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.072] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.079] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.079] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:41.079] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.079] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:41.079] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:41.080] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:41.080] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:41.080] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.080] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.080] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.081] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.081] |  :  .  |  :  value: <list>
[10:51:41.081] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:41.081] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:41.081] |  :  .  |  :  nx: 2
[10:51:41.082] |  :  .  |  :  relay: TRUE
[10:51:41.082] |  :  .  |  :  stdout: TRUE
[10:51:41.082] |  :  .  |  :  signal: TRUE
[10:51:41.082] |  :  .  |  :  resignal: FALSE
[10:51:41.082] |  :  .  |  :  force: TRUE
[10:51:41.082] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:41.083] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:41.083] |  :  .  |  :  until=2
[10:51:41.083] |  :  .  |  :  relaying element #2
[10:51:41.083] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:41.083] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:41.084] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:41.084] |  :  .  |  length: 1 (resolved future 1)
[10:51:41.084] |  :  .  checking value #1 ... done
[10:51:41.079] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.079] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.079] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.079] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.079] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.079] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.079] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.079] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.084] |  :  .  checking value #2 ...
[10:51:41.084] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:41.084] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.085] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.091] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:41.091] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:41.092] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:41.092] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:41.092] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:41.092] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:41.092] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:41.092] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:41.092] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:41.092] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:41.095] |  :  .  |  readImmediateCondition() ...
[10:51:41.095] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.095] |  :  .  |   - Number of RDS files: 0
[10:51:41.095] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.096] |  :  .  checking value #2 ... done
[10:51:41.093] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.093] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.093] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.093] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.093] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.093] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.093] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.093] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.093] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.093] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.093] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.093] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.093] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.093] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.098] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.098] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.098] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.098] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.098] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.098] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:41.099] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.099] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.099] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.106] |  :  .  Number of remaining objects: 1
[10:51:41.106] |  :  .  checking value #2 ...
[10:51:41.106] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.106] |  :  .  |  readImmediateCondition() ...
[10:51:41.106] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.107] |  :  .  |   - Number of RDS files: 0
[10:51:41.107] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.107] |  :  .  |  MulticoreFuture #2
[10:51:41.107] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:41.107] |  :  .  |  :  nx: 2
[10:51:41.107] |  :  .  |  :  relay: TRUE
[10:51:41.107] |  :  .  |  :  stdout: TRUE
[10:51:41.107] |  :  .  |  :  signal: TRUE
[10:51:41.107] |  :  .  |  :  resignal: FALSE
[10:51:41.108] |  :  .  |  :  force: TRUE
[10:51:41.108] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:41.108] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:41.108] |  :  .  |  :  until=2
[10:51:41.108] |  :  .  |  :  relaying element #2
[10:51:41.108] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.109] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:41.109] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.109] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:41.109] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:41.109] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:41.110] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:41.110] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.110] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.110] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.110] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.111] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.111] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.111] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.111] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:41.111] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:41.111] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:41.111] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:41.112] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.112] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.112] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.112] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.112] |  :  .  |  :  value: <list>
[10:51:41.112] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:41.113] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:41.113] |  :  .  |  :  nx: 2
[10:51:41.113] |  :  .  |  :  relay: TRUE
[10:51:41.113] |  :  .  |  :  stdout: TRUE
[10:51:41.113] |  :  .  |  :  signal: TRUE
[10:51:41.113] |  :  .  |  :  resignal: FALSE
[10:51:41.113] |  :  .  |  :  force: TRUE
[10:51:41.114] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:41.114] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:41.114] |  :  .  |  :  until=2
[10:51:41.114] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:41.114] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:41.114] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:41.115] |  :  .  |  length: 0 (resolved future 2)
[10:51:41.115] |  :  .  checking value #2 ... done
[10:51:41.115] |  :  .  Relaying remaining futures ...
[10:51:41.115] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:41.115] |  :  .  |  :  nx: 2
[10:51:41.115] |  :  .  |  :  relay: TRUE
[10:51:41.115] |  :  .  |  :  stdout: TRUE
[10:51:41.115] |  :  .  |  :  signal: TRUE
[10:51:41.115] |  :  .  |  :  resignal: FALSE
[10:51:41.116] |  :  .  |  :  force: TRUE
[10:51:41.116] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:41.116] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:41.116] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:41.116] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:41.116] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:41.116] |  :  .  Relaying remaining futures ... done
[10:51:41.116] |  :  value() on list ... done
[10:51:41.117]  - Number of value chunks collected: 2
[10:51:41.117] Resolving 2 futures (chunks) ... DONE
[10:51:41.117] Reducing values from 2 chunks ...
[10:51:41.117]  - Number of values collected after concatenation: 11
[10:51:41.117]  - Number of values expected: 11
[10:51:41.117] Reducing values from 2 chunks ... DONE
[10:51:41.117] future_lapply() ... DONE
 Named logi [1:11] TRUE TRUE TRUE TRUE TRUE TRUE ...
 - attr(*, "names")= chr [1:11] "mpg" "cyl" "disp" "hp" ...
- future_vapply(x, ...) where length(x) != length(as.list(x)) ...
[10:51:41.118] future_lapply() ...
[10:51:41.121] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.121] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.121] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.122] Number of chunks: 2
[10:51:41.122] getGlobalsAndPackagesXApply() ...
[10:51:41.122]  - future.globals: TRUE
[10:51:41.122] |  :  getGlobalsAndPackages() ...
[10:51:41.123] |  :  .  Searching for globals ...
[10:51:41.127] |  :  .  |  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:41.127] |  :  .  Searching for globals ... DONE
[10:51:41.127] |  :  .  Resolving globals: FALSE
[10:51:41.127] |  :  .  Search for packages associated with the globals ...
[10:51:41.127] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:41.128] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:41.128] |  :  .  Search for packages associated with the globals ... DONE
[10:51:41.128] |  :  .  The total size of the 7 globals is 11.92 KiB (12201 bytes)
[10:51:41.129] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 11.92 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (3.92 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:41.129] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:41.129] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:41.129] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:41.130] |  :  .  packages: [1] ‘future.apply’
[10:51:41.130] |  :  getGlobalsAndPackages() ... done
[10:51:41.130]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:41.130]  - needed namespaces: [n=1] ‘future.apply’
[10:51:41.130] Finding globals ... DONE
[10:51:41.130]  - use_args: TRUE
[10:51:41.130]  - Getting '...' globals ...
[10:51:41.131] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:41.131] |  :  .  recursive: 0
[10:51:41.131] |  :  .  length: 1
[10:51:41.131] |  :  .  elements: ‘...’
[10:51:41.131] |  :  .  'obj' is DotDotDotList
[10:51:41.131] |  :  .  resolve(obj, ...) ...
[10:51:41.131] |  :  .  resolve(obj, ...) ... done
[10:51:41.132] |  :  .  length: 0 (resolved future 1)
[10:51:41.132] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:41.132]    - '...' content: [n=0] 
[10:51:41.134] List of 1
[10:51:41.134]  $ ...: list()
[10:51:41.134]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.134]  - attr(*, "where")=List of 1
[10:51:41.134]   ..$ ...:<environment: 0x55d467040d30> 
[10:51:41.134]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.134]  - attr(*, "resolved")= logi TRUE
[10:51:41.134]  - attr(*, "total_size")= num NA
[10:51:41.137]  - Getting '...' globals ... DONE
[10:51:41.138] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:41.138] List of 8
[10:51:41.138]  $ ...future.FUN:function (x, ...)  
[10:51:41.138]  $ x_FUN        :function (x)  
[10:51:41.138]  $ times        : int 1
[10:51:41.138]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:41.138]  $ stop_if_not  :function (...)  
[10:51:41.138]  $ dim          : NULL
[10:51:41.138]  $ valid_types  : chr [1:2] "logical" "integer"
[10:51:41.138]  $ ...          : list()
[10:51:41.138]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.138]  - attr(*, "where")=List of 8
[10:51:41.138]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:41.138]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:41.138]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:41.138]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:41.138]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:41.138]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:41.138]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:41.138]   ..$ ...          :<environment: 0x55d467040d30> 
[10:51:41.138]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.138]  - attr(*, "resolved")= logi FALSE
[10:51:41.138]  - attr(*, "total_size")= num 22016
[10:51:41.144] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:41.144] getGlobalsAndPackagesXApply() ... DONE
[10:51:41.145] Number of futures (= number of chunks): 2
[10:51:41.145] Launching 2 futures (chunks) ...
[10:51:41.145] Chunk #1 of 2 ...
[10:51:41.145]  - Finding globals in 'X' for chunk #1 ...
[10:51:41.145] |  :  getGlobalsAndPackages() ...
[10:51:41.145] |  :  .  Searching for globals ...
[10:51:41.146] |  :  .  |  globals found: [0] 
[10:51:41.146] |  :  .  Searching for globals ... DONE
[10:51:41.146] |  :  .  globals: [0] <none>
[10:51:41.146] |  :  .  packages: [0] <none>
[10:51:41.146] |  :  getGlobalsAndPackages() ... done
[10:51:41.146]    + additional globals found: [n=0] 
[10:51:41.146]    + additional namespaces needed: [n=0] 
[10:51:41.146]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:41.146]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:41.147]  - seeds: <none>
[10:51:41.147]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.147] |  :  getGlobalsAndPackages() ...
[10:51:41.147] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.147] |  :  .  Resolving globals: FALSE
[10:51:41.147] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:41.147] |  :  .  |  {
[10:51:41.147] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.147] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:41.147] |  :  .  |      "# as a global variable                                         "
[10:51:41.147] |  :  .  |      do.call(function(...) {
[10:51:41.147] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.147] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:41.147] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:41.147] |  :  .  |          "# anonymous function.                                          "
[10:51:41.147] |  :  .  |          "#                                                              "
[10:51:41.147] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:41.147] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:41.147] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.147] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:41.147] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:41.147] |  :  .  |          repeat {
[10:51:41.147] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:41.147] |  :  .  |                  emptyenv())) 
[10:51:41.147] |  :  .  |                  break
[10:51:41.147] |  :  .  |              penv <- env
[10:51:41.147] |  :  .  |              env <- parent.env(env)
[10:51:41.147] |  :  .  |          }
[10:51:41.147] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:41.147] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:41.147] |  :  .  |          }
[10:51:41.147] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.147] |  :  .  |              !isNamespace(penv)) {
[10:51:41.147] |  :  .  |              parent.env(penv) <- environment()
[10:51:41.147] |  :  .  |          }
[10:51:41.147] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.147] |  :  .  |          {
[10:51:41.147] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.147] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.147] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.147] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:41.147] |  :  .  |              }
[10:51:41.147] |  :  .  |              {
[10:51:41.147] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.147] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.147] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:41.147] |  :  .  |                  })
[10:51:41.147] |  :  .  |              }
[10:51:41.147] |  :  .  |          }
[10:51:41.147] |  :  .  |      }, args = future.call.arguments)
[10:51:41.147] |  :  .  |  }
[10:51:41.148] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:41.148] |  :  .  Search for packages associated with the globals ...
[10:51:41.148] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:41.149] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:41.149] |  :  .  Search for packages associated with the globals ... DONE
[10:51:41.149] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:41.149] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:41.149] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.149] |  :  .  packages: [1] ‘future.apply’
[10:51:41.150] |  :  getGlobalsAndPackages() ... done
[10:51:41.150] |  :  run() for Future (‘Future’) ...
[10:51:41.150] |  :  .  state: ‘created’
[10:51:41.150] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.150] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.150] |  :  .  Using MulticoreFutureBackend ...
[10:51:41.150] |  :  .  |  Launching futures ...
[10:51:41.151] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:41.151] |  :  .  |  :  .  getFutureData() ...
[10:51:41.151] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:41.151] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:41.151] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:41.151] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:41.151] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:41.151] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:41.151] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.152] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:41.152] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.152] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:41.152] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:41.152] |  :  .  |  :  .  getFutureData() ... done
[10:51:41.152] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:41.153] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:41.155] |  :  .  |  :  .  MulticoreFuture started
[10:51:41.155] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:41.155] |  :  .  |  Launching futures ... done
[10:51:41.155] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.156] |  :  .  |  :  .  attachPackages() ...
[10:51:41.156] |  :  .  Using MulticoreFutureBackend ... done
[10:51:41.156] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:41.156] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:41.156] Created future:
[10:51:41.156] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:41.156] |  :  .  |  :  .  attachPackages() ...
[10:51:41.157] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:41.157] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:41.158] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.158] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.158] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.159] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.159] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.159] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:41.159] |  :  .  |  :  .  |  :  .  New stack:
[10:51:41.160] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.160] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.160] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.160] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.160] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.160] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.160] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.160] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.164] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:41.168] |  :  readImmediateCondition() ...
[10:51:41.169] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.169] |  :   - Number of RDS files: 0
[10:51:41.169] |  :  readImmediateCondition() ... DONE
[10:51:41.156] MulticoreFuture:
[10:51:41.156] Label: ‘future_vapply-1’
[10:51:41.156] Expression:
[10:51:41.156] {
[10:51:41.156]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.156]     "# expression in do.call(), because function called uses '...'  "
[10:51:41.156]     "# as a global variable                                         "
[10:51:41.156]     do.call(function(...) {
[10:51:41.156]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.156]         "# without having an '...' argument. This means '...' is treated"
[10:51:41.156]         "# as a global variable. This may happen when FUN() is an       "
[10:51:41.156]         "# anonymous function.                                          "
[10:51:41.156]         "#                                                              "
[10:51:41.156]         "# If an anonymous function, we will make sure to restore the   "
[10:51:41.156]         "# function environment of FUN() to the calling environment.    "
[10:51:41.156]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.156]         "# global environment, which is where globals are written.      "
[10:51:41.156]         penv <- env <- environment(...future.FUN)
[10:51:41.156]         repeat {
[10:51:41.156]             if (identical(env, globalenv()) || identical(env, 
[10:51:41.156]                 emptyenv())) 
[10:51:41.156]                 break
[10:51:41.156]             penv <- env
[10:51:41.156]             env <- parent.env(env)
[10:51:41.156]         }
[10:51:41.156]         if (identical(penv, globalenv())) {
[10:51:41.156]             environment(...future.FUN) <- environment()
[10:51:41.156]         }
[10:51:41.156]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.156]             !isNamespace(penv)) {
[10:51:41.156]             parent.env(penv) <- environment()
[10:51:41.156]         }
[10:51:41.156]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.156]         {
[10:51:41.156]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.156]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.156]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.156]                 on.exit(options(oopts), add = TRUE)
[10:51:41.156]             }
[10:51:41.156]             {
[10:51:41.156]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.156]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.156]                   ...future.FUN(...future.X_jj, ...)
[10:51:41.156]                 })
[10:51:41.156]             }
[10:51:41.156]         }
[10:51:41.156]     }, args = future.call.arguments)
[10:51:41.156] }
[10:51:41.156] Lazy evaluation: FALSE
[10:51:41.156] Asynchronous evaluation: TRUE
[10:51:41.156] Local evaluation: TRUE
[10:51:41.156] Environment: R_GlobalEnv
[10:51:41.156] Capture standard output: TRUE
[10:51:41.156] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:41.156] Immediate condition classes: ‘immediateCondition’
[10:51:41.156] Globals: 11 objects totaling 12.15 KiB (function ‘...future.FUN’ of 3.91 KiB, function ‘x_FUN’ of 37 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:41.156] Packages: 1 packages (‘future.apply’)
[10:51:41.156] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:41.156] Resolved: FALSE
[10:51:41.156] Value: <not collected>
[10:51:41.156] Conditions captured: <none>
[10:51:41.156] Early signaling: FALSE
[10:51:41.156] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:41.156] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.170] Chunk #1 of 2 ... DONE
[10:51:41.164] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.164] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.164] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.164] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.164] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.164] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.164] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.164] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.164] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.170] Chunk #2 of 2 ...
[10:51:41.170] |  :  .  |  :  .  |  :  .  Not identical
[10:51:41.170]  - Finding globals in 'X' for chunk #2 ...
[10:51:41.170] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:41.170] |  :  getGlobalsAndPackages() ...
[10:51:41.170] |  :  .  Searching for globals ...
[10:51:41.171] |  :  .  |  globals found: [0] 
[10:51:41.171] |  :  .  Searching for globals ... DONE
[10:51:41.171] |  :  .  globals: [0] <none>
[10:51:41.171] |  :  .  packages: [0] <none>
[10:51:41.171] |  :  getGlobalsAndPackages() ... done
[10:51:41.172]    + additional globals found: [n=0] 
[10:51:41.172]    + additional namespaces needed: [n=0] 
[10:51:41.172]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:41.172]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:41.172]  - seeds: <none>
[10:51:41.172]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.172] |  :  getGlobalsAndPackages() ...
[10:51:41.172] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.173] |  :  .  Resolving globals: FALSE
[10:51:41.173] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:41.173] |  :  .  |  {
[10:51:41.173] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.173] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:41.173] |  :  .  |      "# as a global variable                                         "
[10:51:41.173] |  :  .  |      do.call(function(...) {
[10:51:41.173] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.173] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:41.173] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:41.173] |  :  .  |          "# anonymous function.                                          "
[10:51:41.173] |  :  .  |          "#                                                              "
[10:51:41.173] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:41.173] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:41.173] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.173] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:41.173] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:41.173] |  :  .  |          repeat {
[10:51:41.173] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:41.173] |  :  .  |                  emptyenv())) 
[10:51:41.173] |  :  .  |                  break
[10:51:41.173] |  :  .  |              penv <- env
[10:51:41.173] |  :  .  |              env <- parent.env(env)
[10:51:41.173] |  :  .  |          }
[10:51:41.173] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:41.173] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:41.173] |  :  .  |          }
[10:51:41.173] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.173] |  :  .  |              !isNamespace(penv)) {
[10:51:41.173] |  :  .  |              parent.env(penv) <- environment()
[10:51:41.173] |  :  .  |          }
[10:51:41.173] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.173] |  :  .  |          {
[10:51:41.173] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.173] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.173] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.173] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:41.173] |  :  .  |              }
[10:51:41.173] |  :  .  |              {
[10:51:41.173] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.173] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.173] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:41.173] |  :  .  |                  })
[10:51:41.173] |  :  .  |              }
[10:51:41.173] |  :  .  |          }
[10:51:41.173] |  :  .  |      }, args = future.call.arguments)
[10:51:41.173] |  :  .  |  }
[10:51:41.174] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:41.174] |  :  .  Search for packages associated with the globals ...
[10:51:41.174] |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:41.175] |  :  .  |  Packages: [1] ‘future.apply’
[10:51:41.175] |  :  .  Search for packages associated with the globals ... DONE
[10:51:41.175] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:41.176] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:41.176] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.176] |  :  .  packages: [1] ‘future.apply’
[10:51:41.176] |  :  getGlobalsAndPackages() ... done
[10:51:41.170] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:41.170] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.170] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.170] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.170] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.170] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.170] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.177] |  :  run() for Future (‘Future’) ...
[10:51:41.177] |  :  .  state: ‘created’
[10:51:41.177] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.177] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.177] |  :  .  Using MulticoreFutureBackend ...
[10:51:41.177] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:41.177] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:41.177] |  :  .  |  Launching futures ...
[10:51:41.178] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:41.178] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:41.178] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:41.178] |  :  .  |  :  .  getFutureData() ...
[10:51:41.178] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:41.178] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:41.178] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:41.178] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:41.178] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:41.178] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:41.178] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:41.178] |  :  .  |  :  .  |  :  1. sequential:
[10:51:41.178] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:41.178] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:41.178] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.179] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:41.179] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.179] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:41.179] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.179] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:41.179] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:41.180] |  :  .  |  :  .  getFutureData() ... done
[10:51:41.180] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:41.180] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:41.179] |  :  .  |  :  .  |  :  List of 1
[10:51:41.179] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.179] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.179] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.179] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.179] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.179] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.179] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.182] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.182] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.182] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.182] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:41.183] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.183] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:41.183] |  :  .  |  :  .  MulticoreFuture started
[10:51:41.183] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:41.183] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:41.183] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:41.183] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.183] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.183] |  :  .  |  Launching futures ... done
[10:51:41.183] |  :  .  |  :  .  attachPackages() ...
[10:51:41.184] |  :  .  |  :  .  assign_globals() ...
[10:51:41.184] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.184] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:41.184] |  :  .  Using MulticoreFutureBackend ... done
[10:51:41.184] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:41.184] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:41.185] Created future:
[10:51:41.185] |  :  .  |  :  .  attachPackages() ...
[10:51:41.185] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:41.185] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:41.186] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.187] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.187] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.188] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.188] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.188] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:41.189] |  :  .  |  :  .  |  :  .  New stack:
[10:51:41.189] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.189] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.189] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.189] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.189] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.189] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.189] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.189] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.192] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:41.184] |  :  .  |  :  .  List of 11
[10:51:41.184] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:41.184] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:41.184] |  :  .  |  :  .   $ times                    : int 1
[10:51:41.184] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:41.184] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:41.184] |  :  .  |  :  .   $ dim                      : NULL
[10:51:41.184] |  :  .  |  :  .   $ valid_types              : chr [1:2] "logical" "integer"
[10:51:41.184] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:41.184] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.184] |  :  .  |  :  .   $ ...future.elements_ii    :List of 1
[10:51:41.184] |  :  .  |  :  .    ..$ a: num 1
[10:51:41.184] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:41.184] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:41.184] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:41.184] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:41.184] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:41.184] |  :  .  |  :  .   - attr(*, "total_size")= num 22016
[10:51:41.184] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.184] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:41.195] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:41.195] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:41.196] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:41.196] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:41.196] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:41.196] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:41.196] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:41.196] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:41.196] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:41.197] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:41.197] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:41.197] |  :  .  |  :  .  assign_globals() ... done
[10:51:41.193] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.193] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.193] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.193] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.193] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.193] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.193] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.193] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.193] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.193] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.193] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.193] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.193] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.193] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.197] |  :  .  |  :  .  |  :  .  Not identical
[10:51:41.198] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:41.198] |  :  readImmediateCondition() ...
[10:51:41.198] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.198] |  :   - Number of RDS files: 0
[10:51:41.198] |  :  readImmediateCondition() ... DONE
[10:51:41.185] MulticoreFuture:
[10:51:41.185] Label: ‘future_vapply-2’
[10:51:41.185] Expression:
[10:51:41.185] {
[10:51:41.185]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.185]     "# expression in do.call(), because function called uses '...'  "
[10:51:41.185]     "# as a global variable                                         "
[10:51:41.185]     do.call(function(...) {
[10:51:41.185]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.185]         "# without having an '...' argument. This means '...' is treated"
[10:51:41.185]         "# as a global variable. This may happen when FUN() is an       "
[10:51:41.185]         "# anonymous function.                                          "
[10:51:41.185]         "#                                                              "
[10:51:41.185]         "# If an anonymous function, we will make sure to restore the   "
[10:51:41.185]         "# function environment of FUN() to the calling environment.    "
[10:51:41.185]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.185]         "# global environment, which is where globals are written.      "
[10:51:41.185]         penv <- env <- environment(...future.FUN)
[10:51:41.185]         repeat {
[10:51:41.185]             if (identical(env, globalenv()) || identical(env, 
[10:51:41.185]                 emptyenv())) 
[10:51:41.185]                 break
[10:51:41.185]             penv <- env
[10:51:41.185]             env <- parent.env(env)
[10:51:41.185]         }
[10:51:41.185]         if (identical(penv, globalenv())) {
[10:51:41.185]             environment(...future.FUN) <- environment()
[10:51:41.185]         }
[10:51:41.185]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.185]             !isNamespace(penv)) {
[10:51:41.185]             parent.env(penv) <- environment()
[10:51:41.185]         }
[10:51:41.185]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.185]         {
[10:51:41.185]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.185]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.185]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.185]                 on.exit(options(oopts), add = TRUE)
[10:51:41.185]             }
[10:51:41.185]             {
[10:51:41.185]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.185]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.185]                   ...future.FUN(...future.X_jj, ...)
[10:51:41.185]                 })
[10:51:41.185]             }
[10:51:41.185]         }
[10:51:41.185]     }, args = future.call.arguments)
[10:51:41.185] }
[10:51:41.185] Lazy evaluation: FALSE
[10:51:41.185] Asynchronous evaluation: TRUE
[10:51:41.185] Local evaluation: TRUE
[10:51:41.185] Environment: R_GlobalEnv
[10:51:41.185] Capture standard output: TRUE
[10:51:41.185] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:41.185] Immediate condition classes: ‘immediateCondition’
[10:51:41.185] Globals: 11 objects totaling 12.17 KiB (function ‘...future.FUN’ of 3.91 KiB, function ‘x_FUN’ of 37 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:41.185] Packages: 1 packages (‘future.apply’)
[10:51:41.185] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:41.185] Resolved: FALSE
[10:51:41.185] Value: <not collected>
[10:51:41.185] Conditions captured: <none>
[10:51:41.185] Early signaling: FALSE
[10:51:41.185] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:41.185] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.199] Chunk #2 of 2 ... DONE
[10:51:41.200] Launching 2 futures (chunks) ... DONE
[10:51:41.200] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.200] Resolving 2 futures (chunks) ...
[10:51:41.200] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.200] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.200] |  :  value() on list ...
[10:51:41.200] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:41.200] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:41.200] |  :  .  recursive: 0
[10:51:41.200] |  :  .  length: 2
[10:51:41.201] |  :  .  
[10:51:41.201] |  :  .  Number of remaining objects: 2
[10:51:41.201] |  :  .  checking value #1 ...
[10:51:41.201] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.200] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.200] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.200] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.200] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.200] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.200] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.200] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.200] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.200] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.200] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.200] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.200] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.200] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.200] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.205] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:41.198] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:41.198] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.198] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.198] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.198] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.198] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.198] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.206] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:41.206] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:41.207] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:41.207] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:41.207] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:41.205] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.205] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.205] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.205] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.205] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.205] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.205] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.205] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.207] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:41.207] |  :  .  |  :  .  |  :  1. sequential:
[10:51:41.207] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:41.207] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:41.207] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:41.208] |  :  .  |  :  .  |  :  List of 1
[10:51:41.208] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.208] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.208] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.208] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.208] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.208] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.208] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.211] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.211] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.211] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.211] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:41.212] |  :  .  |  readImmediateCondition() ...
[10:51:41.212] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.212] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.212] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:41.212] |  :  .  |   - Number of RDS files: 0
[10:51:41.212] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:41.212] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.213] |  :  .  checking value #1 ... done
[10:51:41.213] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:41.213] |  :  .  checking value #2 ...
[10:51:41.213] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.213] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.213] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.213] |  :  .  |  :  .  assign_globals() ...
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.208] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.214] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:41.214] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:41.214] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:41.214] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:41.215] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:41.215] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:41.215] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:41.215] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:41.215] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:41.215] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:41.215] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.215] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.215] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.215] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.215] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.215] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.215] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.215] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.215] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.215] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.215] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.215] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.215] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.215] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.219] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.219] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.220] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.220] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.220] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.220] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:41.220] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.220] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.221] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.223] |  :  .  |  readImmediateCondition() ...
[10:51:41.223] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.224] |  :  .  |   - Number of RDS files: 0
[10:51:41.224] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.224] |  :  .  checking value #2 ... done
[10:51:41.214] |  :  .  |  :  .  List of 11
[10:51:41.214] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:41.214] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:41.214] |  :  .  |  :  .   $ times                    : int 1
[10:51:41.214] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:41.214] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:41.214] |  :  .  |  :  .   $ dim                      : NULL
[10:51:41.214] |  :  .  |  :  .   $ valid_types              : chr [1:2] "logical" "integer"
[10:51:41.214] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:41.214] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.214] |  :  .  |  :  .   $ ...future.elements_ii    :List of 2
[10:51:41.214] |  :  .  |  :  .    ..$ b: num 2
[10:51:41.214] |  :  .  |  :  .    ..$ c: num 3
[10:51:41.214] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:41.214] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:41.214] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:41.214] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:41.214] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:41.214] |  :  .  |  :  .   - attr(*, "total_size")= num 22016
[10:51:41.214] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.214] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:41.226] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:41.226] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:41.226] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:41.226] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:41.226] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:41.226] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:41.226] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:41.227] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:41.227] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:41.227] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:41.227] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:41.227] |  :  .  |  :  .  assign_globals() ... done
[10:51:41.230] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.230] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.230] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.231] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:41.231] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:41.234] |  :  .  Number of remaining objects: 2
[10:51:41.235] |  :  .  checking value #1 ...
[10:51:41.235] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.231] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.231] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.231] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.231] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.231] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.231] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.231] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.231] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.231] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.231] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.231] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.231] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.231] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.231] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.235] |  :  .  |  readImmediateCondition() ...
[10:51:41.235] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:41.235] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.236] |  :  .  |   - Number of RDS files: 0
[10:51:41.236] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.236] |  :  .  |  MulticoreFuture #1
[10:51:41.236] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:41.236] |  :  .  |  :  nx: 2
[10:51:41.237] |  :  .  |  :  relay: TRUE
[10:51:41.237] |  :  .  |  :  stdout: TRUE
[10:51:41.237] |  :  .  |  :  signal: TRUE
[10:51:41.237] |  :  .  |  :  resignal: FALSE
[10:51:41.237] |  :  .  |  :  force: TRUE
[10:51:41.238] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:41.238] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:41.238] |  :  .  |  :  until=1
[10:51:41.238] |  :  .  |  :  relaying element #1
[10:51:41.238] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.239] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:41.240] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.235] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.235] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.235] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.235] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.235] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.235] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.235] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.235] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.240] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:41.240] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:41.241] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:41.241] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:41.241] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.241] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.241] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.242] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.242] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.242] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.242] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.243] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:41.243] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:41.243] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:41.243] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:41.243] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.244] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.244] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.244] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.244] |  :  .  |  :  value: <list>
[10:51:41.245] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:41.245] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:41.245] |  :  .  |  :  nx: 2
[10:51:41.245] |  :  .  |  :  relay: TRUE
[10:51:41.245] |  :  .  |  :  stdout: TRUE
[10:51:41.245] |  :  .  |  :  signal: TRUE
[10:51:41.246] |  :  .  |  :  resignal: FALSE
[10:51:41.246] |  :  .  |  :  force: TRUE
[10:51:41.246] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:41.246] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:41.246] |  :  .  |  :  until=2
[10:51:41.247] |  :  .  |  :  relaying element #2
[10:51:41.247] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:41.247] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:41.247] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:41.247] |  :  .  |  length: 1 (resolved future 1)
[10:51:41.248] |  :  .  checking value #1 ... done
[10:51:41.248] |  :  .  checking value #2 ...
[10:51:41.248] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.240] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.250] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:41.250] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:41.250] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:41.250] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:41.250] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:41.250] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:41.250] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:41.250] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:41.250] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:41.250] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:41.251] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.251] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.251] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.251] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.251] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.251] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.251] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.251] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.251] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.251] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.251] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.251] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.251] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.251] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.255] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.255] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.255] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.256] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.256] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.256] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:41.256] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.256] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.256] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.257] |  :  .  |  readImmediateCondition() ...
[10:51:41.257] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.257] |  :  .  |   - Number of RDS files: 0
[10:51:41.257] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.257] |  :  .  |  MulticoreFuture #2
[10:51:41.257] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:41.257] |  :  .  |  :  nx: 2
[10:51:41.258] |  :  .  |  :  relay: TRUE
[10:51:41.258] |  :  .  |  :  stdout: TRUE
[10:51:41.258] |  :  .  |  :  signal: TRUE
[10:51:41.258] |  :  .  |  :  resignal: FALSE
[10:51:41.258] |  :  .  |  :  force: TRUE
[10:51:41.258] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:41.258] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:41.258] |  :  .  |  :  until=2
[10:51:41.258] |  :  .  |  :  relaying element #2
[10:51:41.259] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.259] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:41.259] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.259] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:41.260] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:41.260] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:41.260] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:41.260] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.260] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.261] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.261] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.261] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.261] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.261] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.261] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:41.262] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:41.262] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:41.262] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:41.262] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.262] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.263] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.263] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.263] |  :  .  |  :  value: <list>
[10:51:41.263] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:41.263] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:51:41.263] |  :  .  |  :  nx: 2
[10:51:41.263] |  :  .  |  :  relay: TRUE
[10:51:41.264] |  :  .  |  :  stdout: TRUE
[10:51:41.264] |  :  .  |  :  signal: TRUE
[10:51:41.264] |  :  .  |  :  resignal: FALSE
[10:51:41.264] |  :  .  |  :  force: TRUE
[10:51:41.264] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:41.264] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:41.265] |  :  .  |  :  until=2
[10:51:41.265] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:41.265] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:41.265] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:51:41.265] |  :  .  |  length: 0 (resolved future 2)
[10:51:41.265] |  :  .  checking value #2 ... done
[10:51:41.265] |  :  .  Relaying remaining futures ...
[10:51:41.266] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:41.266] |  :  .  |  :  nx: 2
[10:51:41.266] |  :  .  |  :  relay: TRUE
[10:51:41.266] |  :  .  |  :  stdout: TRUE
[10:51:41.266] |  :  .  |  :  signal: TRUE
[10:51:41.266] |  :  .  |  :  resignal: FALSE
[10:51:41.266] |  :  .  |  :  force: TRUE
[10:51:41.266] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:41.266] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:41.267] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:41.267] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:41.267] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:41.267] |  :  .  Relaying remaining futures ... done
[10:51:41.267] |  :  value() on list ... done
[10:51:41.267]  - Number of value chunks collected: 2
[10:51:41.267] Resolving 2 futures (chunks) ... DONE
[10:51:41.267] Reducing values from 2 chunks ...
[10:51:41.267]  - Number of values collected after concatenation: 3
[10:51:41.267]  - Number of values expected: 3
[10:51:41.268] Reducing values from 2 chunks ... DONE
[10:51:41.268] future_lapply() ... DONE
- exceptions ...
[10:51:41.268] future_lapply() ...
[10:51:41.271] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.271] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.271] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.272] Number of chunks: 2
[10:51:41.272] getGlobalsAndPackagesXApply() ...
[10:51:41.272]  - future.globals: TRUE
[10:51:41.272] |  :  getGlobalsAndPackages() ...
[10:51:41.272] |  :  .  Searching for globals ...
[10:51:41.277] |  :  .  |  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:41.277] |  :  .  Searching for globals ... DONE
[10:51:41.277] |  :  .  Resolving globals: FALSE
[10:51:41.277] |  :  .  Search for packages associated with the globals ...
[10:51:41.278] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:41.278] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:41.278] |  :  .  Search for packages associated with the globals ... DONE
[10:51:41.279] |  :  .  The total size of the 7 globals is 12.81 KiB (13119 bytes)
[10:51:41.279] |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.81 KiB The three largest globals are ‘FUN’ (4.65 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:41.279] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:41.280] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:41.280] |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:41.280] |  :  .  packages: [1] ‘future.apply’
[10:51:41.280] |  :  getGlobalsAndPackages() ... done
[10:51:41.280]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:41.280]  - needed namespaces: [n=1] ‘future.apply’
[10:51:41.280] Finding globals ... DONE
[10:51:41.280]  - use_args: TRUE
[10:51:41.281]  - Getting '...' globals ...
[10:51:41.281] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:41.281] |  :  .  recursive: 0
[10:51:41.281] |  :  .  length: 1
[10:51:41.281] |  :  .  elements: ‘...’
[10:51:41.281] |  :  .  'obj' is DotDotDotList
[10:51:41.282] |  :  .  resolve(obj, ...) ...
[10:51:41.282] |  :  .  resolve(obj, ...) ... done
[10:51:41.282] |  :  .  length: 0 (resolved future 1)
[10:51:41.282] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:41.282]    - '...' content: [n=0] 
[10:51:41.282] List of 1
[10:51:41.282]  $ ...: list()
[10:51:41.282]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.282]  - attr(*, "where")=List of 1
[10:51:41.282]   ..$ ...:<environment: 0x55d4665b04b0> 
[10:51:41.282]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.282]  - attr(*, "resolved")= logi TRUE
[10:51:41.282]  - attr(*, "total_size")= num NA
[10:51:41.285]  - Getting '...' globals ... DONE
[10:51:41.285] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:41.286] List of 8
[10:51:41.286]  $ ...future.FUN:function (x, ...)  
[10:51:41.286]  $ x_FUN        :function (x)  
[10:51:41.286]  $ times        : int 2
[10:51:41.286]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:41.286]  $ stop_if_not  :function (...)  
[10:51:41.286]  $ dim          : NULL
[10:51:41.286]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:41.286]  $ ...          : list()
[10:51:41.286]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.286]  - attr(*, "where")=List of 8
[10:51:41.286]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:41.286]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:41.286]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:41.286]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:41.286]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:41.286]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:41.286]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:41.286]   ..$ ...          :<environment: 0x55d4665b04b0> 
[10:51:41.286]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.286]  - attr(*, "resolved")= logi FALSE
[10:51:41.286]  - attr(*, "total_size")= num 23676
[10:51:41.292] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:41.292] getGlobalsAndPackagesXApply() ... DONE
[10:51:41.293] Number of futures (= number of chunks): 2
[10:51:41.293] Launching 2 futures (chunks) ...
[10:51:41.293] Chunk #1 of 2 ...
[10:51:41.293]  - Finding globals in 'X' for chunk #1 ...
[10:51:41.293] |  :  getGlobalsAndPackages() ...
[10:51:41.293] |  :  .  Searching for globals ...
[10:51:41.294] |  :  .  |  globals found: [0] 
[10:51:41.294] |  :  .  Searching for globals ... DONE
[10:51:41.294] |  :  .  globals: [0] <none>
[10:51:41.294] |  :  .  packages: [0] <none>
[10:51:41.294] |  :  getGlobalsAndPackages() ... done
[10:51:41.294]    + additional globals found: [n=0] 
[10:51:41.294]    + additional namespaces needed: [n=0] 
[10:51:41.294]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:41.294]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:41.295]  - seeds: <none>
[10:51:41.295]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.295] |  :  getGlobalsAndPackages() ...
[10:51:41.295] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.295] |  :  .  Resolving globals: FALSE
[10:51:41.295] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:41.295] |  :  .  |  {
[10:51:41.295] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.295] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:41.295] |  :  .  |      "# as a global variable                                         "
[10:51:41.295] |  :  .  |      do.call(function(...) {
[10:51:41.295] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.295] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:41.295] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:41.295] |  :  .  |          "# anonymous function.                                          "
[10:51:41.295] |  :  .  |          "#                                                              "
[10:51:41.295] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:41.295] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:41.295] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.295] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:41.295] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:41.295] |  :  .  |          repeat {
[10:51:41.295] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:41.295] |  :  .  |                  emptyenv())) 
[10:51:41.295] |  :  .  |                  break
[10:51:41.295] |  :  .  |              penv <- env
[10:51:41.295] |  :  .  |              env <- parent.env(env)
[10:51:41.295] |  :  .  |          }
[10:51:41.295] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:41.295] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:41.295] |  :  .  |          }
[10:51:41.295] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.295] |  :  .  |              !isNamespace(penv)) {
[10:51:41.295] |  :  .  |              parent.env(penv) <- environment()
[10:51:41.295] |  :  .  |          }
[10:51:41.295] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.295] |  :  .  |          {
[10:51:41.295] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.295] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.295] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.295] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:41.295] |  :  .  |              }
[10:51:41.295] |  :  .  |              {
[10:51:41.295] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.295] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.295] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:41.295] |  :  .  |                  })
[10:51:41.295] |  :  .  |              }
[10:51:41.295] |  :  .  |          }
[10:51:41.295] |  :  .  |      }, args = future.call.arguments)
[10:51:41.295] |  :  .  |  }
[10:51:41.296] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:41.296] |  :  .  Search for packages associated with the globals ...
[10:51:41.296] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:41.297] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:41.297] |  :  .  Search for packages associated with the globals ... DONE
[10:51:41.297] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:41.297] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:41.297] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.297] |  :  .  packages: [1] ‘future.apply’
[10:51:41.298] |  :  getGlobalsAndPackages() ... done
[10:51:41.298] |  :  run() for Future (‘Future’) ...
[10:51:41.298] |  :  .  state: ‘created’
[10:51:41.298] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.298] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.298] |  :  .  Using MulticoreFutureBackend ...
[10:51:41.299] |  :  .  |  Launching futures ...
[10:51:41.299] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:41.299] |  :  .  |  :  .  getFutureData() ...
[10:51:41.299] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:41.299] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:41.299] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:41.299] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:41.299] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:41.299] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:41.300] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.300] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:41.300] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.300] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:41.300] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:41.300] |  :  .  |  :  .  getFutureData() ... done
[10:51:41.300] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:41.301] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:41.303] |  :  .  |  :  .  MulticoreFuture started
[10:51:41.303] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:41.303] |  :  .  |  Launching futures ... done
[10:51:41.304] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.304] |  :  .  |  :  .  attachPackages() ...
[10:51:41.304] |  :  .  Using MulticoreFutureBackend ... done
[10:51:41.304] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:41.304] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:41.304] Created future:
[10:51:41.304] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:41.305] |  :  .  |  :  .  attachPackages() ...
[10:51:41.305] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:41.305] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:41.306] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.306] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.306] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.307] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.307] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.307] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:41.308] |  :  .  |  :  .  |  :  .  New stack:
[10:51:41.308] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.308] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.308] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.308] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.308] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.308] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.308] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.308] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.311] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:41.316] |  :  readImmediateCondition() ...
[10:51:41.317] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.317] |  :   - Number of RDS files: 0
[10:51:41.317] |  :  readImmediateCondition() ... DONE
[10:51:41.304] MulticoreFuture:
[10:51:41.304] Label: ‘future_vapply-1’
[10:51:41.304] Expression:
[10:51:41.304] {
[10:51:41.304]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.304]     "# expression in do.call(), because function called uses '...'  "
[10:51:41.304]     "# as a global variable                                         "
[10:51:41.304]     do.call(function(...) {
[10:51:41.304]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.304]         "# without having an '...' argument. This means '...' is treated"
[10:51:41.304]         "# as a global variable. This may happen when FUN() is an       "
[10:51:41.304]         "# anonymous function.                                          "
[10:51:41.304]         "#                                                              "
[10:51:41.304]         "# If an anonymous function, we will make sure to restore the   "
[10:51:41.304]         "# function environment of FUN() to the calling environment.    "
[10:51:41.304]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.304]         "# global environment, which is where globals are written.      "
[10:51:41.304]         penv <- env <- environment(...future.FUN)
[10:51:41.304]         repeat {
[10:51:41.304]             if (identical(env, globalenv()) || identical(env, 
[10:51:41.304]                 emptyenv())) 
[10:51:41.304]                 break
[10:51:41.304]             penv <- env
[10:51:41.304]             env <- parent.env(env)
[10:51:41.304]         }
[10:51:41.304]         if (identical(penv, globalenv())) {
[10:51:41.304]             environment(...future.FUN) <- environment()
[10:51:41.304]         }
[10:51:41.304]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.304]             !isNamespace(penv)) {
[10:51:41.304]             parent.env(penv) <- environment()
[10:51:41.304]         }
[10:51:41.304]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.304]         {
[10:51:41.304]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.304]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.304]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.304]                 on.exit(options(oopts), add = TRUE)
[10:51:41.304]             }
[10:51:41.304]             {
[10:51:41.304]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.304]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.304]                   ...future.FUN(...future.X_jj, ...)
[10:51:41.304]                 })
[10:51:41.304]             }
[10:51:41.304]         }
[10:51:41.304]     }, args = future.call.arguments)
[10:51:41.304] }
[10:51:41.304] Lazy evaluation: FALSE
[10:51:41.304] Asynchronous evaluation: TRUE
[10:51:41.304] Local evaluation: TRUE
[10:51:41.304] Environment: R_GlobalEnv
[10:51:41.304] Capture standard output: TRUE
[10:51:41.304] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:41.304] Immediate condition classes: ‘immediateCondition’
[10:51:41.304] Globals: 11 objects totaling 13.00 KiB (function ‘...future.FUN’ of 4.65 KiB, function ‘x_FUN’ of 185 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:41.304] Packages: 1 packages (‘future.apply’)
[10:51:41.304] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:41.304] Resolved: FALSE
[10:51:41.304] Value: <not collected>
[10:51:41.304] Conditions captured: <none>
[10:51:41.304] Early signaling: FALSE
[10:51:41.304] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:41.304] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.318] Chunk #1 of 2 ... DONE
[10:51:41.318] Chunk #2 of 2 ...
[10:51:41.318]  - Finding globals in 'X' for chunk #2 ...
[10:51:41.318] |  :  getGlobalsAndPackages() ...
[10:51:41.318] |  :  .  Searching for globals ...
[10:51:41.319] |  :  .  |  globals found: [0] 
[10:51:41.319] |  :  .  Searching for globals ... DONE
[10:51:41.319] |  :  .  globals: [0] <none>
[10:51:41.319] |  :  .  packages: [0] <none>
[10:51:41.319] |  :  getGlobalsAndPackages() ... done
[10:51:41.319]    + additional globals found: [n=0] 
[10:51:41.320]    + additional namespaces needed: [n=0] 
[10:51:41.320]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:41.320]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:41.320]  - seeds: <none>
[10:51:41.320]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.320] |  :  getGlobalsAndPackages() ...
[10:51:41.320] |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.320] |  :  .  Resolving globals: FALSE
[10:51:41.321] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:41.311] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.311] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.311] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.311] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.311] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.311] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.311] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.311] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.311] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.311] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.311] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.311] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.311] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.311] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.321] |  :  .  |  :  .  |  :  .  Not identical
[10:51:41.321] |  :  .  |  {
[10:51:41.321] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.321] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:41.321] |  :  .  |      "# as a global variable                                         "
[10:51:41.321] |  :  .  |      do.call(function(...) {
[10:51:41.321] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.321] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:41.321] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:41.321] |  :  .  |          "# anonymous function.                                          "
[10:51:41.321] |  :  .  |          "#                                                              "
[10:51:41.321] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:41.321] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:41.321] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.321] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:41.321] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:41.321] |  :  .  |          repeat {
[10:51:41.321] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:41.321] |  :  .  |                  emptyenv())) 
[10:51:41.321] |  :  .  |                  break
[10:51:41.321] |  :  .  |              penv <- env
[10:51:41.321] |  :  .  |              env <- parent.env(env)
[10:51:41.321] |  :  .  |          }
[10:51:41.321] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:41.321] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:41.321] |  :  .  |          }
[10:51:41.321] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.321] |  :  .  |              !isNamespace(penv)) {
[10:51:41.321] |  :  .  |              parent.env(penv) <- environment()
[10:51:41.321] |  :  .  |          }
[10:51:41.321] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.321] |  :  .  |          {
[10:51:41.321] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.321] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.321] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.321] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:41.321] |  :  .  |              }
[10:51:41.321] |  :  .  |              {
[10:51:41.321] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.321] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.321] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:41.321] |  :  .  |                  })
[10:51:41.321] |  :  .  |              }
[10:51:41.321] |  :  .  |          }
[10:51:41.321] |  :  .  |      }, args = future.call.arguments)
[10:51:41.321] |  :  .  |  }
[10:51:41.321] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:41.321] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:41.322] |  :  .  Search for packages associated with the globals ...
[10:51:41.322] |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:41.323] |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:41.323] |  :  .  Search for packages associated with the globals ... DONE
[10:51:41.323] |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:41.323] |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:41.323] |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.323] |  :  .  packages: [1] ‘future.apply’
[10:51:41.324] |  :  getGlobalsAndPackages() ... done
[10:51:41.327] |  :  run() for Future (‘Future’) ...
[10:51:41.327] |  :  .  state: ‘created’
[10:51:41.327] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.327] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.327] |  :  .  Using MulticoreFutureBackend ...
[10:51:41.327] |  :  .  |  Launching futures ...
[10:51:41.328] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:41.328] |  :  .  |  :  .  getFutureData() ...
[10:51:41.328] |  :  .  |  :  .  |  getFutureCore() ...
[10:51:41.322] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:41.322] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.322] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.322] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.322] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.322] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.322] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.328] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:41.328] |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:41.328] |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:41.328] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:41.328] |  :  .  |  :  .  |  getFutureContext() ...
[10:51:41.329] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.329] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:41.329] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:41.329] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:41.329] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.329] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:41.329] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:41.329] |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:41.329] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:41.329] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:41.329] |  :  .  |  :  .  getFutureData() ... done
[10:51:41.329] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:41.329] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:41.329] |  :  .  |  :  .  |  :  1. sequential:
[10:51:41.329] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:41.329] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:41.329] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.330] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:51:41.330] |  :  .  |  :  .  |  :  List of 1
[10:51:41.330] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.330] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.330] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.330] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.330] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.330] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.330] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.333] |  :  .  |  :  .  MulticoreFuture started
[10:51:41.333] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.333] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.333] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:51:41.334] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.334] |  :  .  |  Launching futures ... done
[10:51:41.334] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:41.334] |  :  .  |  :  .  attachPackages() ...
[10:51:41.334] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.334] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.334] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:41.334] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:51:41.334] |  :  .  Using MulticoreFutureBackend ... done
[10:51:41.334] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:41.334] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:51:41.334] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:41.335] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:41.335] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.335] Created future:
[10:51:41.335] |  :  .  |  :  .  attachPackages() ...
[10:51:41.335] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.335] |  :  .  |  :  .  |  packages: [n=1] ‘future.apply’
[10:51:41.335] |  :  .  |  :  .  assign_globals() ...
[10:51:41.335] |  :  .  |  :  .  attachPackages() ... DONE
[10:51:41.337] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.337] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.337] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.338] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.338] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.339] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:41.339] |  :  .  |  :  .  |  :  .  New stack:
[10:51:41.339] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.339] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.339] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.339] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.339] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.339] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.339] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.339] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.343] |  :  .  |  :  .  |  :  .  Old stack:
[10:51:41.335] |  :  .  |  :  .  List of 11
[10:51:41.335] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:41.335] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:41.335] |  :  .  |  :  .   $ times                    : int 2
[10:51:41.335] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:41.335] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:41.335] |  :  .  |  :  .   $ dim                      : NULL
[10:51:41.335] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:41.335] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:41.335] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.335] |  :  .  |  :  .   $ ...future.elements_ii    :List of 1
[10:51:41.335] |  :  .  |  :  .    ..$ : int 1
[10:51:41.335] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:41.335] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:41.335] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:41.335] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:41.335] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:41.335] |  :  .  |  :  .   - attr(*, "total_size")= num 23676
[10:51:41.335] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.335] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:41.347] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:41.348] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:41.348] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:41.348] |  :  readImmediateCondition() ...
[10:51:41.348] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:41.348] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:41.348] |  :    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.343] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.343] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.343] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.343] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.343] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.343] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.343] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.343] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.343] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.343] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.343] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.343] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.343] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.343] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.348] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:41.348] |  :  .  |  :  .  |  :  .  Not identical
[10:51:41.348] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:41.349] |  :   - Number of RDS files: 0
[10:51:41.349] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:41.349] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:41.349] |  :  readImmediateCondition() ... DONE
[10:51:41.349] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:41.349] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:41.349] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:41.335] MulticoreFuture:
[10:51:41.335] Label: ‘future_vapply-2’
[10:51:41.335] Expression:
[10:51:41.335] {
[10:51:41.335]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.335]     "# expression in do.call(), because function called uses '...'  "
[10:51:41.335]     "# as a global variable                                         "
[10:51:41.335]     do.call(function(...) {
[10:51:41.335]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.335]         "# without having an '...' argument. This means '...' is treated"
[10:51:41.335]         "# as a global variable. This may happen when FUN() is an       "
[10:51:41.335]         "# anonymous function.                                          "
[10:51:41.335]         "#                                                              "
[10:51:41.335]         "# If an anonymous function, we will make sure to restore the   "
[10:51:41.335]         "# function environment of FUN() to the calling environment.    "
[10:51:41.335]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.335]         "# global environment, which is where globals are written.      "
[10:51:41.335]         penv <- env <- environment(...future.FUN)
[10:51:41.335]         repeat {
[10:51:41.335]             if (identical(env, globalenv()) || identical(env, 
[10:51:41.335]                 emptyenv())) 
[10:51:41.335]                 break
[10:51:41.335]             penv <- env
[10:51:41.335]             env <- parent.env(env)
[10:51:41.335]         }
[10:51:41.335]         if (identical(penv, globalenv())) {
[10:51:41.335]             environment(...future.FUN) <- environment()
[10:51:41.335]         }
[10:51:41.335]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.335]             !isNamespace(penv)) {
[10:51:41.335]             parent.env(penv) <- environment()
[10:51:41.335]         }
[10:51:41.335]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.335]         {
[10:51:41.335]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.335]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.335]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.335]                 on.exit(options(oopts), add = TRUE)
[10:51:41.335]             }
[10:51:41.335]             {
[10:51:41.335]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.335]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.335]                   ...future.FUN(...future.X_jj, ...)
[10:51:41.335]                 })
[10:51:41.335]             }
[10:51:41.335]         }
[10:51:41.335]     }, args = future.call.arguments)
[10:51:41.335] }
[10:51:41.335] Lazy evaluation: FALSE
[10:51:41.335] Asynchronous evaluation: TRUE
[10:51:41.335] Local evaluation: TRUE
[10:51:41.335] Environment: R_GlobalEnv
[10:51:41.335] Capture standard output: TRUE
[10:51:41.335] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:41.335] Immediate condition classes: ‘immediateCondition’
[10:51:41.335] Globals: 11 objects totaling 13.01 KiB (function ‘...future.FUN’ of 4.65 KiB, function ‘x_FUN’ of 185 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:41.335] Packages: 1 packages (‘future.apply’)
[10:51:41.335] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:41.335] Resolved: FALSE
[10:51:41.335] Value: <not collected>
[10:51:41.335] Conditions captured: <none>
[10:51:41.335] Early signaling: FALSE
[10:51:41.335] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:41.335] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:41.349] |  :  .  |  :  .  assign_globals() ... done
[10:51:41.350] Chunk #2 of 2 ... DONE
[10:51:41.350] Launching 2 futures (chunks) ... DONE
[10:51:41.350] Resolving 2 futures (chunks) ...
[10:51:41.350] |  :  value() on list ...
[10:51:41.350] |  :  .  recursive: 0
[10:51:41.351] |  :  .  length: 2
[10:51:41.351] |  :  .  
[10:51:41.351] |  :  .  Number of remaining objects: 2
[10:51:41.351] |  :  .  checking value #1 ...
[10:51:41.351] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.353] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.354] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.354] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.354] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:41.354] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:41.349] |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:41.349] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.349] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.349] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.349] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.349] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.349] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.358] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:41.358] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:41.358] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:41.358] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:41.358] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:41.354] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.354] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.354] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.354] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.354] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.354] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.354] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.354] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.354] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.354] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.354] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.354] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.354] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.354] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.359] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:41.358] |  :  .  |  :  .  |  :  List of future strategies:
[10:51:41.358] |  :  .  |  :  .  |  :  1. sequential:
[10:51:41.358] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:41.358] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:41.358] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.359] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.359] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.359] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.359] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.359] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.359] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.359] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.359] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:41.362] |  :  .  |  readImmediateCondition() ...
[10:51:41.362] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.362] |  :  .  |   - Number of RDS files: 0
[10:51:41.363] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.363] |  :  .  checking value #1 ... done
[10:51:41.363] |  :  .  checking value #2 ...
[10:51:41.363] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.359] |  :  .  |  :  .  |  :  List of 1
[10:51:41.359] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.359] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.359] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.359] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.359] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.359] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.359] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.363] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.364] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.364] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.364] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:41.364] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.364] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:41.365] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:41.365] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:41.365] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.365] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.366] |  :  .  |  :  .  assign_globals() ...
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.362] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.368] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:51:41.368] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:41.369] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:41.369] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:41.369] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:41.369] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:51:41.369] |  :  .  |  :  .  |  :  .  1. multicore:
[10:51:41.369] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:41.369] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:51:41.369] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:51:41.369] |  :  .  |  :  .  |  :  .  List of 1
[10:51:41.369] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.369] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.369] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.369] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.369] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.369] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.369] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.369] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.369] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.369] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.369] |  :  .  |  :  .  |  :  .      ...)  
[10:51:41.369] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.369] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.373] |  :  .  |  readImmediateCondition() ...
[10:51:41.374] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:41.374] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.374] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:41.374] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.374] |  :  .  |   - Number of RDS files: 0
[10:51:41.374] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.374] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.374] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.374] |  :  .  checking value #2 ... done
[10:51:41.375] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:41.375] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:41.375] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.375] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:41.366] |  :  .  |  :  .  List of 11
[10:51:41.366] |  :  .  |  :  .   $ ...future.FUN            :function (x, ...)  
[10:51:41.366] |  :  .  |  :  .   $ x_FUN                    :function (x)  
[10:51:41.366] |  :  .  |  :  .   $ times                    : int 2
[10:51:41.366] |  :  .  |  :  .   $ stopf                    :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:41.366] |  :  .  |  :  .   $ stop_if_not              :function (...)  
[10:51:41.366] |  :  .  |  :  .   $ dim                      : NULL
[10:51:41.366] |  :  .  |  :  .   $ valid_types              : chr [1:3] "logical" "integer" "double"
[10:51:41.366] |  :  .  |  :  .   $ future.call.arguments    : list()
[10:51:41.366] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.366] |  :  .  |  :  .   $ ...future.elements_ii    :List of 2
[10:51:41.366] |  :  .  |  :  .    ..$ : int 2
[10:51:41.366] |  :  .  |  :  .    ..$ : int 3
[10:51:41.366] |  :  .  |  :  .   $ ...future.seeds_ii       : NULL
[10:51:41.366] |  :  .  |  :  .   $ ...future.globals.maxSize: NULL
[10:51:41.366] |  :  .  |  :  .   - attr(*, "where")=List of 11
[10:51:41.366] |  :  .  |  :  .    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .    ..$ x_FUN                    :<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .    ..$ times                    :<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .    ..$ stopf                    :<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .    ..$ stop_if_not              :<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .    ..$ dim                      :<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .    ..$ valid_types              :<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:41.366] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:51:41.366] |  :  .  |  :  .   - attr(*, "total_size")= num 23676
[10:51:41.366] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.366] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:51:41.380] |  :  .  |  :  .  - copied ‘...future.FUN’ to environment
[10:51:41.380] |  :  .  |  :  .  - copied ‘x_FUN’ to environment
[10:51:41.381] |  :  .  |  :  .  - copied ‘times’ to environment
[10:51:41.381] |  :  .  |  :  .  - copied ‘stopf’ to environment
[10:51:41.381] |  :  .  |  :  .  - copied ‘stop_if_not’ to environment
[10:51:41.381] |  :  .  |  :  .  - copied ‘dim’ to environment
[10:51:41.381] |  :  .  |  :  .  - copied ‘valid_types’ to environment
[10:51:41.381] |  :  .  |  :  .  - copied ‘future.call.arguments’ to environment
[10:51:41.382] |  :  .  |  :  .  - copied ‘...future.elements_ii’ to environment
[10:51:41.382] |  :  .  |  :  .  - copied ‘...future.seeds_ii’ to environment
[10:51:41.382] |  :  .  |  :  .  - copied ‘...future.globals.maxSize’ to environment
[10:51:41.382] |  :  .  |  :  .  assign_globals() ... done
[10:51:41.385] |  :  .  Number of remaining objects: 2
[10:51:41.385] |  :  .  checking value #1 ...
[10:51:41.385] |  :  .  |  'obj' is MulticoreFuture
[10:51:41.385] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.385] |  :  .  |  readImmediateCondition() ...
[10:51:41.385] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:41.386] |  :  .  |    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.386] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:41.386] |  :  .  |   - Number of RDS files: 0
[10:51:41.386] |  :  .  |  readImmediateCondition() ... DONE
[10:51:41.386] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:41.386] |  :  .  |  MulticoreFuture #1
[10:51:41.386] |  :  .  |  :  .  |  :  .  |  New stack:
[10:51:41.386] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:51:41.387] |  :  .  |  :  nx: 2
[10:51:41.387] |  :  .  |  :  relay: TRUE
[10:51:41.387] |  :  .  |  :  stdout: TRUE
[10:51:41.387] |  :  .  |  :  signal: TRUE
[10:51:41.387] |  :  .  |  :  resignal: FALSE
[10:51:41.387] |  :  .  |  :  force: TRUE
[10:51:41.388] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:41.388] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:41.388] |  :  .  |  :  until=1
[10:51:41.388] |  :  .  |  :  relaying element #1
[10:51:41.388] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.390] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:41.390] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.390] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:41.390] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:41.391] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:41.391] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:41.391] |  :  .  |  :  .  signalConditions() ...
[10:51:41.391] |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:51:41.392] |  :  .  |  :  .  |  exclude = 
[10:51:41.392] |  :  .  |  :  .  |  resignal = FALSE
[10:51:41.392] |  :  .  |  :  .  |  Number of conditions: 1
[10:51:41.392] |  :  .  |  :  .  signalConditions() ... done
[10:51:41.392] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.393] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.393] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.386] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.386] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.386] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.386] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.386] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.386] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.386] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.386] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.386] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.386] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.386] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.386] |  :  .  |  :  .  |  :  .  |      ...)  
[10:51:41.386] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.386] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.393] |  :  .  |  :  signalConditions() ...
[10:51:41.393] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:51:41.393] |  :  .  |  :  .  include = ‘immediateCondition’
[10:51:41.393] |  :  .  |  :  .  exclude = 
[10:51:41.394] |  :  .  |  :  .  resignal = FALSE
[10:51:41.394] |  :  .  |  :  .  Number of conditions: 1
[10:51:41.394] |  :  .  |  :  signalConditions() ... done
[10:51:41.394] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.394] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.395] |  :  .  |  :  signalConditions() ...
[10:51:41.395] |  :  .  |  :  .  include = ‘immediateCondition’
[10:51:41.395] |  :  .  |  :  .  exclude = 
[10:51:41.395] |  :  .  |  :  .  resignal = FALSE
[10:51:41.395] |  :  .  |  :  .  Number of conditions: 1
[10:51:41.396] |  :  .  |  :  signalConditions() ... done
[10:51:41.396] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.396] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.396] |  :  .  |  :  signalConditions() ...
[10:51:41.397] |  :  .  |  :  .  include = ‘condition’
[10:51:41.397] |  :  .  |  :  .  exclude = ‘error’, ‘immediateCondition’
[10:51:41.397] |  :  .  |  :  .  resignal = TRUE
[10:51:41.397] |  :  .  |  :  .  Number of conditions: 1
[10:51:41.397] |  :  .  |  :  signalConditions() ... done
[10:51:41.397] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:41.398] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:41.398] |  :  .  |  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:51:41.398] |  :  .  |  value(<MulticoreFuture>, ...) ...
[10:51:41.393] |  :  .  |  :  .  |  :  .  |  List of 1
[10:51:41.393] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.393] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.393] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.393] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.393] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.393] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:41.393] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.398] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.398] |  :  .  |  :  .  |  :  .  |  Not identical
[10:51:41.398] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.399] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:51:41.399] |  :  .  |  :  result() for MulticoreFuture ...
[10:51:41.399] |  :  .  |  :  result() for MulticoreFuture ... done
[10:51:41.399] |  :  .  |  :  signalConditions() ...
[10:51:41.399] |  :  .  |  :  .  include = ‘immediateCondition’
[10:51:41.399] |  :  .  |  :  .  exclude = 
[10:51:41.400] |  :  .  |  :  .  resignal = FALSE
[10:51:41.400] |  :  .  |  :  .  Number of conditions: 1
[10:51:41.400] |  :  .  |  :  signalConditions() ... done
[10:51:41.400] |  :  .  |  :  value: <simpleError>
[10:51:41.400] |  :  .  |  value(<MulticoreFuture>, ...) ... done
[10:51:41.401] |  :  .  |  signal simpleError ...
[10:51:41.401] |  :  .  |  :  futures(x) ...
[10:51:41.401] |  :  .  |  :  futures(x) ... done
[10:51:41.401] |  :  .  |  :  interrupt(y) ...
[10:51:41.402] |  :  .  |  :  interrupt(y) ... done
[10:51:41.402] |  :  .  |  :  resolve(y, ...) ...
[10:51:41.402] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:41.402] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:41.403] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:41.403] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:41.403] |  :  .  |  :  .  signalConditions() ...
[10:51:41.403] |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:51:41.403] |  :  .  |  :  .  |  exclude = 
[10:51:41.403] |  :  .  |  :  .  |  resignal = FALSE
[10:51:41.404] |  :  .  |  :  .  |  Number of conditions: 1
[10:51:41.404] |  :  .  |  :  .  signalConditions() ... done
[10:51:41.404] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:41.404] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:41.404] |  :  .  |  :  .  signalConditions() ...
[10:51:41.405] |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:51:41.405] |  :  .  |  :  .  |  exclude = 
[10:51:41.405] |  :  .  |  :  .  |  resignal = FALSE
[10:51:41.405] |  :  .  |  :  .  |  Number of conditions: 1
[10:51:41.405] |  :  .  |  :  .  signalConditions() ... done
[10:51:41.405] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:41.406] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:41.406] |  :  .  |  :  .  signalConditions() ...
[10:51:41.406] |  :  .  |  :  .  |  include = ‘condition’
[10:51:41.406] |  :  .  |  :  .  |  exclude = ‘immediateCondition’
[10:51:41.406] |  :  .  |  :  .  |  resignal = TRUE
[10:51:41.406] |  :  .  |  :  .  |  Number of conditions: 1
[10:51:41.407] |  :  .  |  :  .  |  Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:51:41.407] |  :  .  |  :  .  signalConditions() ... done
[10:51:41.408] |  :  .  |  :  .  readImmediateCondition() ...
[10:51:41.408] |  :  .  |  :  .    - path: ‘/tmp/RtmpulHPkh/.future/immediateConditions’
[10:51:41.408] |  :  .  |  :  .   - Number of RDS files: 0
[10:51:41.408] |  :  .  |  :  .  readImmediateCondition() ... DONE
[10:51:41.408] |  :  .  |  :  .  result() for MulticoreFuture ...
[10:51:41.409] |  :  .  |  :  .  |  Detected non-FutureResult result ...
[10:51:41.409] |  :  .  |  :  .  |  :  Detected interrupted ‘MulticoreFuture’ whose result cannot be retrieved
[10:51:41.410] |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:41.410] |  :  .  |  :  .  |  Detected non-FutureResult result ... done
[10:51:41.410] |  :  .  |  :  .  result() for MulticoreFuture ... done
[10:51:41.410] |  :  .  |  :  resolve(y, ...) ... done
[10:51:41.410] |  :  .  |  :  stop(value) in 3, 2, 1 ...
[10:51:41.410] |  :  .  |  value() on list ... done
[10:51:41.410] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.411] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:41.411] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:41.411] |  :  .  |  :  .  |  New stack:
[10:51:41.411] |  :  .  |  :  .  |  List of 1
[10:51:41.411] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.411] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.411] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.411] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.411] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.411] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:41.411] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.414] |  :  .  |  :  .  |  Old stack:
[10:51:41.414] |  :  .  |  :  .  |  List of 1
[10:51:41.414] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.414] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.414] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.414] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.414] |  :  .  |  :  .  |      ...)  
[10:51:41.414] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.414] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.414] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.414] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.414] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.414] |  :  .  |  :  .  |      ...)  
[10:51:41.414] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.414] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.418] |  :  .  |  :  .  |  Not identical
[10:51:41.419] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:41.419] |  :  .  |  :  .  |  :  List of 2
[10:51:41.419] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.419] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.419] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.419] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.419] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.419] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:41.419] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:41.419] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:41.419] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:41.419] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.419] |  :  .  |  :  .  |  :      ...)  
[10:51:41.419] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.419] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.419] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:41.419] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4657e4f50> 
[10:51:41.419] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:41.419] |  :  .  |  :  .  |  :      ...)  
[10:51:41.419] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:41.424] |  :  .  |  :  .  |  :  Formals differ
[10:51:41.425] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:41.425] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:41.425] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:41.425] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:41.425] |  :  .  |  :  .  List of future strategies:
[10:51:41.425] |  :  .  |  :  .  1. sequential:
[10:51:41.425] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:41.425] |  :  .  |  :  .     - tweaked: FALSE
[10:51:41.425] |  :  .  |  :  .     - call: plan(sequential)
[10:51:41.426] |  :  .  |  :  .  List of 1
[10:51:41.426] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.426] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.426] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.426] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.426] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.426] |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:41.426] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.428] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:51:41.428] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.429] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.429] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.430] |  :  .  |  :  .  |  Legacy shutdown of cluster workers ...
[10:51:41.430] |  :  .  |  :  .  |  :  Stopping existing cluster ...
[10:51:41.430] |  :  .  |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:51:41.430] |  :  .  |  :  .  |  :  Stopping existing cluster ... done
[10:51:41.430] |  :  .  |  :  .  |  Legacy shutdown of cluster workers ... done
[10:51:41.430] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:51:41.431] |  :  .  |  :  .  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:51:41.431] |  :  .  |  :  .  |  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.431] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.431] |  :  .  |  :  .  |   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.431] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.431] |  :  .  |  :  .  |   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.431] |  :  .  |  :  .  |   - attr(*, "call")= language plan(sequential)
[10:51:41.433] |  :  .  |  :  .  |  init: NULL
[10:51:41.433] |  :  .  |  :  .  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:51:41.433] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.433] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:41.433] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.434] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:41.434] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:41.434] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:41.434] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:41.434] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[10:51:41.434] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.435] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:41.435] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:41.435] |  :  .  |  :  .  |  New stack:
[10:51:41.435] |  :  .  |  :  .  |  List of 1
[10:51:41.435] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:41.435] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.435] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:41.435] |  :  .  |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:51:41.435] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:41.435] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:41.435] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:41.435] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:51:41.435] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:41.435] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.438] |  :  .  |  :  .  |  Old stack:
[10:51:41.438] |  :  .  |  :  .  |  List of 1
[10:51:41.438] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.438] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.438] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.438] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.438] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.438] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:41.438] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.441] |  :  .  |  :  .  |  Not identical
[10:51:41.441] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:41.441] |  :  .  |  :  .  |  :  List of 2
[10:51:41.441] |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:41.441] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.441] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:41.441] |  :  .  |  :  .  |  :    ..- attr(*, "init")= logi TRUE
[10:51:41.441] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:41.441] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:41.441] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:41.441] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:51:41.441] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:41.441] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.441] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:41.441] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:41.441] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.441] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:41.441] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:41.446] |  :  .  |  :  .  |  :  Formals differ
[10:51:41.446] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:41.446] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:41.447] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:41.447] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:41.447] |  :  .  |  :  .  List of future strategies:
[10:51:41.447] |  :  .  |  :  .  1. multisession:
[10:51:41.447] |  :  .  |  :  .     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:41.447] |  :  .  |  :  .     - tweaked: FALSE
[10:51:41.447] |  :  .  |  :  .     - call: plan(strategy)
[10:51:41.447] |  :  .  |  :  .  List of 1
[10:51:41.447] |  :  .  |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:41.447] |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.447] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:41.447] |  :  .  |  :  .    ..- attr(*, "init")= logi TRUE
[10:51:41.447] |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:41.447] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:41.447] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:41.447] |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:51:41.447] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:41.447] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:41.450] |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:51:41.451] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.451] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:41.451] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.451] |  :  .  |  :  .  |  Legacy shutdown of cluster workers ...
[10:51:41.451] |  :  .  |  :  .  |  :  Stopping existing cluster ...
[10:51:41.451] |  :  .  |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:51:41.451] |  :  .  |  :  .  |  :  Stopping existing cluster ... done
[10:51:41.451] |  :  .  |  :  .  |  Legacy shutdown of cluster workers ... done
[10:51:41.452] |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:51:41.452] |  :  .  |  :  .  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:51:41.452] |  :  .  |  :  .  |  function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:41.452] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:41.452] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:41.452] |  :  .  |  :  .  |   - attr(*, "init")= logi TRUE
[10:51:41.452] |  :  .  |  :  .  |   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:41.452] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:41.452] |  :  .  |  :  .  |   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:41.452] |  :  .  |  :  .  |   - attr(*, "untweakable")= chr "persistent"
[10:51:41.452] |  :  .  |  :  .  |   - attr(*, "call")= language plan(strategy)
[10:51:41.454] |  :  .  |  :  .  |  init: TRUE
[10:51:41.455] |  :  .  |  :  .  |  makeFutureBackend(<multisession>) ...
[10:51:41.455] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:41.457] |  :  .  |  :  .  |  :  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[10:51:41.457] |  :  .  |  :  .  |  :  .  workers: 2
[10:51:41.457] |  :  .  |  :  .  |  :  .  getCluster() ...
[10:51:41.457] |  :  .  |  :  .  |  :  .  getCluster() ... done
[10:51:41.457] |  :  .  |  :  .  |  :  .  Stopping existing cluster ...
[10:51:41.457] |  :  .  |  :  .  |  :  .  |  No pre-existing cluster. Skipping
[10:51:41.457] |  :  .  |  :  .  |  :  .  Stopping existing cluster ... done
[10:51:41.457] |  :  .  |  :  .  |  :  .  Starting new cluster ...
[10:51:41.458] |  :  .  |  :  .  |  :  .  |  makeCluster(workers, ...) ...
[10:51:41.458] |  :  .  |  :  .  |  :  .  |  :  Arguments:
[10:51:41.458] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:51:41.458] |  :  .  |  :  .  |  :  .  |  :   $             : int 2
[10:51:41.458] |  :  .  |  :  .  |  :  .  |  :   $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:51:41.962] |  :  .  |  :  .  |  :  .  |  :  Generated cluster UUID
[10:51:41.963] |  :  .  |  :  .  |  :  .  |  :  Cluster UUID: ‘7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:41.963] |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:41.965] |  :  .  |  :  .  |  :  .  |  makeCluster(workers, ...) ... done
[10:51:41.965] |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:41.967] |  :  .  |  :  .  |  :  .  Starting new cluster ... done
[10:51:41.967] |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:41.967] |  :  .  |  :  .  |  :  .  Workers UUID: ‘7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:41.967] |  :  .  |  :  .  |  :  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[10:51:41.967] |  :  .  |  :  .  |  :  Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:41.967] |  :  .  |  :  .  |  makeFutureBackend(<multisession>) ... done
[10:51:41.967] |  :  .  |  :  .  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:51:41.968] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.968] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.968] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.968] |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:51:41.968] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:41.968] |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
 logi(0) 
 logi(0) 
 logi(0) 
 logi(0) 
 logi(0) 
 int(0) 
 int(0) 
 Named chr [1:2] "integer" "character"
 - attr(*, "names")= chr [1:2] "x" "y"
[10:51:41.970] future_lapply() ...
[10:51:41.973] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.973] |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:41.973] |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.973] Number of chunks: 2
[10:51:41.973] getGlobalsAndPackagesXApply() ...
[10:51:41.973]  - future.globals: TRUE
[10:51:41.973] |  :  .  |  getGlobalsAndPackages() ...
[10:51:41.974] |  :  .  |  :  Searching for globals ...
[10:51:41.977] |  :  .  |  :  .  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:41.977] |  :  .  |  :  Searching for globals ... DONE
[10:51:41.977] |  :  .  |  :  Resolving globals: FALSE
[10:51:41.977] |  :  .  |  :  Search for packages associated with the globals ...
[10:51:41.977] |  :  .  |  :  .  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:41.978] |  :  .  |  :  .  Packages: [2] ‘base’, ‘future.apply’
[10:51:41.978] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:41.978] |  :  .  |  :  The total size of the 7 globals is 12.01 KiB (12294 bytes)
[10:51:41.979] |  :  .  |  :  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.01 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.02 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:41.979] |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:41.979] |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:41.979] |  :  .  |  :  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:41.979] |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:41.979] |  :  .  |  getGlobalsAndPackages() ... done
[10:51:41.979]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:41.979]  - needed namespaces: [n=1] ‘future.apply’
[10:51:41.979] Finding globals ... DONE
[10:51:41.980]  - use_args: TRUE
[10:51:41.980]  - Getting '...' globals ...
[10:51:41.980] |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:41.980] |  :  .  |  :  recursive: 0
[10:51:41.980] |  :  .  |  :  length: 1
[10:51:41.980] |  :  .  |  :  elements: ‘...’
[10:51:41.980] |  :  .  |  :  'obj' is DotDotDotList
[10:51:41.980] |  :  .  |  :  resolve(obj, ...) ...
[10:51:41.981] |  :  .  |  :  resolve(obj, ...) ... done
[10:51:41.981] |  :  .  |  :  length: 0 (resolved future 1)
[10:51:41.981] |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:41.981]    - '...' content: [n=0] 
[10:51:41.981] List of 1
[10:51:41.981]  $ ...: list()
[10:51:41.981]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.981]  - attr(*, "where")=List of 1
[10:51:41.981]   ..$ ...:<environment: 0x55d464e09640> 
[10:51:41.981]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.981]  - attr(*, "resolved")= logi TRUE
[10:51:41.981]  - attr(*, "total_size")= num NA
[10:51:41.983]  - Getting '...' globals ... DONE
[10:51:41.984] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:41.984] List of 8
[10:51:41.984]  $ ...future.FUN:function (x, ...)  
[10:51:41.984]  $ x_FUN        :function (x)  
[10:51:41.984]  $ times        : int 1
[10:51:41.984]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:41.984]  $ stop_if_not  :function (...)  
[10:51:41.984]  $ dim          : NULL
[10:51:41.984]  $ valid_types  : chr "character"
[10:51:41.984]  $ ...          : list()
[10:51:41.984]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:41.984]  - attr(*, "where")=List of 8
[10:51:41.984]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:41.984]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:41.984]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:41.984]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:41.984]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:41.984]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:41.984]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:41.984]   ..$ ...          :<environment: 0x55d464e09640> 
[10:51:41.984]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:41.984]  - attr(*, "resolved")= logi FALSE
[10:51:41.984]  - attr(*, "total_size")= num 22333
[10:51:41.989] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:41.990] getGlobalsAndPackagesXApply() ... DONE
[10:51:41.990] Number of futures (= number of chunks): 2
[10:51:41.990] Launching 2 futures (chunks) ...
[10:51:41.990] Chunk #1 of 2 ...
[10:51:41.990]  - Finding globals in 'X' for chunk #1 ...
[10:51:41.990] |  :  .  |  getGlobalsAndPackages() ...
[10:51:41.990] |  :  .  |  :  Searching for globals ...
[10:51:41.990] |  :  .  |  :  .  globals found: [0] 
[10:51:41.991] |  :  .  |  :  Searching for globals ... DONE
[10:51:41.991] |  :  .  |  :  globals: [0] <none>
[10:51:41.991] |  :  .  |  :  packages: [0] <none>
[10:51:41.991] |  :  .  |  getGlobalsAndPackages() ... done
[10:51:41.991]    + additional globals found: [n=0] 
[10:51:41.991]    + additional namespaces needed: [n=0] 
[10:51:41.991]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:41.991]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:41.991]  - seeds: <none>
[10:51:41.991]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.992] |  :  .  |  getGlobalsAndPackages() ...
[10:51:41.992] |  :  .  |  :  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.992] |  :  .  |  :  Resolving globals: FALSE
[10:51:41.992] |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:41.992] |  :  .  |  :  .  {
[10:51:41.992] |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:41.992] |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:41.992] |  :  .  |  :  .      "# as a global variable                                         "
[10:51:41.992] |  :  .  |  :  .      do.call(function(...) {
[10:51:41.992] |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:41.992] |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:41.992] |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:41.992] |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:41.992] |  :  .  |  :  .          "#                                                              "
[10:51:41.992] |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:41.992] |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:41.992] |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:41.992] |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:41.992] |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:41.992] |  :  .  |  :  .          repeat {
[10:51:41.992] |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:41.992] |  :  .  |  :  .                  emptyenv())) 
[10:51:41.992] |  :  .  |  :  .                  break
[10:51:41.992] |  :  .  |  :  .              penv <- env
[10:51:41.992] |  :  .  |  :  .              env <- parent.env(env)
[10:51:41.992] |  :  .  |  :  .          }
[10:51:41.992] |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:41.992] |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:41.992] |  :  .  |  :  .          }
[10:51:41.992] |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:41.992] |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:41.992] |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:41.992] |  :  .  |  :  .          }
[10:51:41.992] |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:41.992] |  :  .  |  :  .          {
[10:51:41.992] |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:41.992] |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:41.992] |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:41.992] |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:41.992] |  :  .  |  :  .              }
[10:51:41.992] |  :  .  |  :  .              {
[10:51:41.992] |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:41.992] |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:41.992] |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:41.992] |  :  .  |  :  .                  })
[10:51:41.992] |  :  .  |  :  .              }
[10:51:41.992] |  :  .  |  :  .          }
[10:51:41.992] |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:41.992] |  :  .  |  :  .  }
[10:51:41.993] |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:41.993] |  :  .  |  :  Search for packages associated with the globals ...
[10:51:41.993] |  :  .  |  :  .  Packages associated with globals: [1] ‘future.apply’
[10:51:41.993] |  :  .  |  :  .  Packages: [1] ‘future.apply’
[10:51:41.993] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:41.993] |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:41.994] |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:41.994] |  :  .  |  :  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:41.994] |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:41.994] |  :  .  |  getGlobalsAndPackages() ... done
[10:51:41.994] |  :  .  |  run() for Future (‘Future’) ...
[10:51:41.994] |  :  .  |  :  state: ‘created’
[10:51:41.994] |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:41.994] |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:41.995] |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:41.995] |  :  .  |  :  .  Launching futures ...
[10:51:41.995] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:41.995] |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:41.995] |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:41.997] |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:41.997] |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:41.997] |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:41.997] |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  :  .  Created empty registry ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:41.998] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:41.999] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:41.999] |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:51:41.999] |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:42.061] |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:51:42.061] |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:51:42.061] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:42.061] |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:42.062] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:42.062] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:42.062] |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:42.062] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:42.063] |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:51:42.063] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:42.063] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:42.063] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:42.063] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:42.063] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:42.063] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:42.063] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.063] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:42.064] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.064] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:42.064] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:42.064] |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:51:42.064] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:42.065] |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:51:42.065] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:42.065] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:42.065] |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:42.065] |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:42.065] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:42.065] |  :  .  |  :  .  |  Launching futures ... done
[10:51:42.065] |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.065] |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:42.065] |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:42.066] Created future:
[10:51:42.067] |  :  .  |  :  isFutureResolved() ...
[10:51:42.067] |  :  .  |  :  .  assertValidConnection() ...
[10:51:42.067] |  :  .  |  :  .  |  cluster node index: 1
[10:51:42.068] |  :  .  |  :  .  assertValidConnection() ... done
[10:51:42.078] |  :  .  |  :  isFutureResolved() ... done
[10:51:42.066] MultisessionFuture:
[10:51:42.066] Label: ‘future_vapply-1’
[10:51:42.066] Expression:
[10:51:42.066] {
[10:51:42.066]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.066]     "# expression in do.call(), because function called uses '...'  "
[10:51:42.066]     "# as a global variable                                         "
[10:51:42.066]     do.call(function(...) {
[10:51:42.066]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.066]         "# without having an '...' argument. This means '...' is treated"
[10:51:42.066]         "# as a global variable. This may happen when FUN() is an       "
[10:51:42.066]         "# anonymous function.                                          "
[10:51:42.066]         "#                                                              "
[10:51:42.066]         "# If an anonymous function, we will make sure to restore the   "
[10:51:42.066]         "# function environment of FUN() to the calling environment.    "
[10:51:42.066]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.066]         "# global environment, which is where globals are written.      "
[10:51:42.066]         penv <- env <- environment(...future.FUN)
[10:51:42.066]         repeat {
[10:51:42.066]             if (identical(env, globalenv()) || identical(env, 
[10:51:42.066]                 emptyenv())) 
[10:51:42.066]                 break
[10:51:42.066]             penv <- env
[10:51:42.066]             env <- parent.env(env)
[10:51:42.066]         }
[10:51:42.066]         if (identical(penv, globalenv())) {
[10:51:42.066]             environment(...future.FUN) <- environment()
[10:51:42.066]         }
[10:51:42.066]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.066]             !isNamespace(penv)) {
[10:51:42.066]             parent.env(penv) <- environment()
[10:51:42.066]         }
[10:51:42.066]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.066]         {
[10:51:42.066]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.066]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.066]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.066]                 on.exit(options(oopts), add = TRUE)
[10:51:42.066]             }
[10:51:42.066]             {
[10:51:42.066]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.066]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.066]                   ...future.FUN(...future.X_jj, ...)
[10:51:42.066]                 })
[10:51:42.066]             }
[10:51:42.066]         }
[10:51:42.066]     }, args = future.call.arguments)
[10:51:42.066] }
[10:51:42.066] Lazy evaluation: FALSE
[10:51:42.066] Asynchronous evaluation: TRUE
[10:51:42.066] Local evaluation: TRUE
[10:51:42.066] Environment: R_GlobalEnv
[10:51:42.066] Capture standard output: TRUE
[10:51:42.066] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:42.066] Immediate condition classes: ‘immediateCondition’
[10:51:42.066] Globals: 11 objects totaling 12.33 KiB (function ‘...future.FUN’ of 4.02 KiB, function ‘x_FUN’ of 36 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:42.066] Packages: 1 packages (‘future.apply’)
[10:51:42.066] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:42.066] Resolved: FALSE
[10:51:42.066] Value: <not collected>
[10:51:42.066] Conditions captured: <none>
[10:51:42.066] Early signaling: FALSE
[10:51:42.066] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:42.066] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.079] Chunk #1 of 2 ... DONE
[10:51:42.079] Chunk #2 of 2 ...
[10:51:42.079]  - Finding globals in 'X' for chunk #2 ...
[10:51:42.079] |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:42.079] |  :  .  |  :  .  Searching for globals ...
[10:51:42.080] |  :  .  |  :  .  |  globals found: [0] 
[10:51:42.080] |  :  .  |  :  .  Searching for globals ... DONE
[10:51:42.080] |  :  .  |  :  .  globals: [0] <none>
[10:51:42.080] |  :  .  |  :  .  packages: [0] <none>
[10:51:42.080] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:42.080]    + additional globals found: [n=0] 
[10:51:42.080]    + additional namespaces needed: [n=0] 
[10:51:42.080]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:42.080]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:42.080]  - seeds: <none>
[10:51:42.080]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.081] |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:42.081] |  :  .  |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.081] |  :  .  |  :  .  Resolving globals: FALSE
[10:51:42.081] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:42.081] |  :  .  |  :  .  |  {
[10:51:42.081] |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.081] |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:42.081] |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:42.081] |  :  .  |  :  .  |      do.call(function(...) {
[10:51:42.081] |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.081] |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:42.081] |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:42.081] |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:51:42.081] |  :  .  |  :  .  |          "#                                                              "
[10:51:42.081] |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:42.081] |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:42.081] |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.081] |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:42.081] |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:42.081] |  :  .  |  :  .  |          repeat {
[10:51:42.081] |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:42.081] |  :  .  |  :  .  |                  emptyenv())) 
[10:51:42.081] |  :  .  |  :  .  |                  break
[10:51:42.081] |  :  .  |  :  .  |              penv <- env
[10:51:42.081] |  :  .  |  :  .  |              env <- parent.env(env)
[10:51:42.081] |  :  .  |  :  .  |          }
[10:51:42.081] |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:51:42.081] |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:51:42.081] |  :  .  |  :  .  |          }
[10:51:42.081] |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.081] |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:51:42.081] |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:51:42.081] |  :  .  |  :  .  |          }
[10:51:42.081] |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.081] |  :  .  |  :  .  |          {
[10:51:42.081] |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.081] |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.081] |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.081] |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:42.081] |  :  .  |  :  .  |              }
[10:51:42.081] |  :  .  |  :  .  |              {
[10:51:42.081] |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.081] |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.081] |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:42.081] |  :  .  |  :  .  |                  })
[10:51:42.081] |  :  .  |  :  .  |              }
[10:51:42.081] |  :  .  |  :  .  |          }
[10:51:42.081] |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:42.081] |  :  .  |  :  .  |  }
[10:51:42.082] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:42.082] |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:42.082] |  :  .  |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:42.082] |  :  .  |  :  .  |  Packages: [1] ‘future.apply’
[10:51:42.082] |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:42.082] |  :  .  |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:42.083] |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:42.083] |  :  .  |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.083] |  :  .  |  :  .  packages: [1] ‘future.apply’
[10:51:42.083] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:42.083] |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:42.083] |  :  .  |  :  .  state: ‘created’
[10:51:42.083] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.084] |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.084] |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:42.084] |  :  .  |  :  .  |  Launching futures ...
[10:51:42.084] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:42.084] |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:42.084] |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:42.086] |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:42.086] |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:42.086] |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:51:42.086] |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:42.086] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:42.086] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.086] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:42.086] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:42.087] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.087] |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:42.087] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:42.087] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.087] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:42.087] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:42.087] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.087] |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:51:42.087] |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:42.170] |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:42.170] |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:42.170] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:42.170] |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:51:42.170] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:42.171] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:42.171] |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:51:42.171] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:42.171] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:42.171] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:42.171] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:42.172] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:42.172] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:42.172] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:42.172] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:42.172] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:51:42.172] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.172] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:51:42.172] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:42.173] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:42.173] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:42.173] |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:51:42.173] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:51:42.173] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:42.173] |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:51:42.174] |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:51:42.174] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:42.174] |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:42.174] |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.174] |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:42.174] |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:42.174] Created future:
[10:51:42.175] |  :  .  |  :  .  isFutureResolved() ...
[10:51:42.176] |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:42.176] |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:42.176] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:42.186] |  :  .  |  :  .  isFutureResolved() ... done
[10:51:42.174] MultisessionFuture:
[10:51:42.174] Label: ‘future_vapply-2’
[10:51:42.174] Expression:
[10:51:42.174] {
[10:51:42.174]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.174]     "# expression in do.call(), because function called uses '...'  "
[10:51:42.174]     "# as a global variable                                         "
[10:51:42.174]     do.call(function(...) {
[10:51:42.174]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.174]         "# without having an '...' argument. This means '...' is treated"
[10:51:42.174]         "# as a global variable. This may happen when FUN() is an       "
[10:51:42.174]         "# anonymous function.                                          "
[10:51:42.174]         "#                                                              "
[10:51:42.174]         "# If an anonymous function, we will make sure to restore the   "
[10:51:42.174]         "# function environment of FUN() to the calling environment.    "
[10:51:42.174]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.174]         "# global environment, which is where globals are written.      "
[10:51:42.174]         penv <- env <- environment(...future.FUN)
[10:51:42.174]         repeat {
[10:51:42.174]             if (identical(env, globalenv()) || identical(env, 
[10:51:42.174]                 emptyenv())) 
[10:51:42.174]                 break
[10:51:42.174]             penv <- env
[10:51:42.174]             env <- parent.env(env)
[10:51:42.174]         }
[10:51:42.174]         if (identical(penv, globalenv())) {
[10:51:42.174]             environment(...future.FUN) <- environment()
[10:51:42.174]         }
[10:51:42.174]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.174]             !isNamespace(penv)) {
[10:51:42.174]             parent.env(penv) <- environment()
[10:51:42.174]         }
[10:51:42.174]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.174]         {
[10:51:42.174]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.174]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.174]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.174]                 on.exit(options(oopts), add = TRUE)
[10:51:42.174]             }
[10:51:42.174]             {
[10:51:42.174]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.174]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.174]                   ...future.FUN(...future.X_jj, ...)
[10:51:42.174]                 })
[10:51:42.174]             }
[10:51:42.174]         }
[10:51:42.174]     }, args = future.call.arguments)
[10:51:42.174] }
[10:51:42.174] Lazy evaluation: FALSE
[10:51:42.174] Asynchronous evaluation: TRUE
[10:51:42.174] Local evaluation: TRUE
[10:51:42.174] Environment: R_GlobalEnv
[10:51:42.174] Capture standard output: TRUE
[10:51:42.174] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:42.174] Immediate condition classes: ‘immediateCondition’
[10:51:42.174] Globals: 11 objects totaling 12.32 KiB (function ‘...future.FUN’ of 4.02 KiB, function ‘x_FUN’ of 36 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:42.174] Packages: 1 packages (‘future.apply’)
[10:51:42.174] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:42.174] Resolved: FALSE
[10:51:42.174] Value: <not collected>
[10:51:42.174] Conditions captured: <none>
[10:51:42.174] Early signaling: FALSE
[10:51:42.174] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:42.174] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.187] Chunk #2 of 2 ... DONE
[10:51:42.187] Launching 2 futures (chunks) ... DONE
[10:51:42.187] Resolving 2 futures (chunks) ...
[10:51:42.187] |  :  .  |  :  .  value() on list ...
[10:51:42.187] |  :  .  |  :  .  |  recursive: 0
[10:51:42.187] |  :  .  |  :  .  |  length: 2
[10:51:42.188] |  :  .  |  :  .  |  
[10:51:42.188] |  :  .  |  :  .  |  Number of remaining objects: 2
[10:51:42.188] |  :  .  |  :  .  |  checking value #1 ...
[10:51:42.188] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:42.188] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:42.188] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:42.188] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:42.189] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:42.189] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:42.189] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:42.189] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:42.190] |  :  .  |  :  .  |  :  .  |  received data:
[10:51:42.190] |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:42.190] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. ..$ : chr "integer"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66393
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:42.190] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:42.190] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.064 0.005 0.069 0 0
[10:51:42.190] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:42.190] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:42.203] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:42.203] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:42.203] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:42.203] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:42.203] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:42.203] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:42.204] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.204] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.204] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.204] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:42.204] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:42.204] |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:51:42.204] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:42.204] |  :  .  |  :  .  |  :  .  nx: 2
[10:51:42.204] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:42.204] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:42.205] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:42.205] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:42.205] |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:42.205] |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:51:42.205] |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:51:42.205] |  :  .  |  :  .  |  :  .  until=1
[10:51:42.205] |  :  .  |  :  .  |  :  .  relaying element #1
[10:51:42.205] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.205] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.205] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.205] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.206] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.206] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.206] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.206] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.206] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.206] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.206] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.206] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.206] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:42.206] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:42.206] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:42.207] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:42.207] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.207] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.207] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.207] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.207] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.207] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.207] |  :  .  |  :  .  |  :  .  value: <list>
[10:51:42.207] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:42.207] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:42.208] |  :  .  |  :  .  |  :  .  nx: 2
[10:51:42.208] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:42.208] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:42.208] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:42.208] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:42.208] |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:42.208] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:42.208] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:42.208] |  :  .  |  :  .  |  :  .  until=2
[10:51:42.208] |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:42.208] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:42.208] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:42.208] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:51:42.209] |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:51:42.209] |  :  .  |  :  .  |  checking value #1 ... done
[10:51:42.209] |  :  .  |  :  .  |  checking value #2 ...
[10:51:42.209] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:42.209] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:42.209] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:42.209] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:42.210] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:42.220] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:42.220] |  :  .  |  :  .  |  checking value #2 ... done
[10:51:42.230] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:51:42.230] |  :  .  |  :  .  |  checking value #2 ...
[10:51:42.231] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:42.231] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:42.231] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:42.231] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:42.232] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:42.242] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:42.242] |  :  .  |  :  .  |  checking value #2 ... done
[10:51:42.253] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:51:42.253] |  :  .  |  :  .  |  checking value #2 ...
[10:51:42.253] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:42.253] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:42.254] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:42.254] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:42.254] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:42.265] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:42.265] |  :  .  |  :  .  |  checking value #2 ... done
[10:51:42.275] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:51:42.275] |  :  .  |  :  .  |  checking value #2 ...
[10:51:42.275] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:42.275] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:42.276] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:42.276] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:42.276] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:42.276] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:42.276] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:42.277] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:42.277] |  :  .  |  :  .  |  :  .  |  received data:
[10:51:42.277] |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:42.277] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. ..$ : chr "character"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66394
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:42.277] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:42.277] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.051 0.002 0.054 0 0
[10:51:42.277] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:42.277] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:42.287] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:42.287] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:42.287] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:42.287] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:42.288] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:42.288] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:42.288] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.288] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.288] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.288] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:42.288] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:42.288] |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:51:42.288] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:42.288] |  :  .  |  :  .  |  :  .  nx: 2
[10:51:42.288] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:42.289] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:42.289] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:42.289] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:42.289] |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:42.289] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:42.289] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:42.289] |  :  .  |  :  .  |  :  .  until=2
[10:51:42.289] |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:42.289] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.289] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.289] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.289] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.290] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.290] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.290] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.290] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.290] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.290] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.290] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.290] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.290] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:42.290] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:42.290] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:42.291] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:42.291] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.291] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.291] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.291] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.291] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.291] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.291] |  :  .  |  :  .  |  :  .  value: <list>
[10:51:42.291] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:42.291] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:42.291] |  :  .  |  :  .  |  :  .  nx: 2
[10:51:42.292] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:42.292] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:42.292] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:42.292] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:42.292] |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:42.292] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:42.292] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:42.292] |  :  .  |  :  .  |  :  .  until=2
[10:51:42.292] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:42.292] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:42.292] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:42.293] |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:51:42.293] |  :  .  |  :  .  |  checking value #2 ... done
[10:51:42.293] |  :  .  |  :  .  |  Relaying remaining futures ...
[10:51:42.293] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:42.293] |  :  .  |  :  .  |  :  .  nx: 2
[10:51:42.293] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:42.293] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:42.293] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:42.293] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:42.293] |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:42.293] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:42.293] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:42.294] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:42.294] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:42.294] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:42.294] |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:51:42.294] |  :  .  |  :  .  value() on list ... done
[10:51:42.294]  - Number of value chunks collected: 2
[10:51:42.294] Resolving 2 futures (chunks) ... DONE
[10:51:42.294] Reducing values from 2 chunks ...
[10:51:42.294]  - Number of values collected after concatenation: 2
[10:51:42.294]  - Number of values expected: 2
[10:51:42.295] Reducing values from 2 chunks ... DONE
[10:51:42.295] future_lapply() ... DONE
 Named chr [1:2] "integer" "character"
 - attr(*, "names")= chr [1:2] "x" "y"
 num[0 , 1:10] 
[10:51:42.295] future_lapply() ...
[10:51:42.298] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.298] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:42.298] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.298] Number of chunks: 2
[10:51:42.298] getGlobalsAndPackagesXApply() ...
[10:51:42.298]  - future.globals: TRUE
[10:51:42.299] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:42.299] |  :  .  |  :  .  |  Searching for globals ...
[10:51:42.302] |  :  .  |  :  .  |  :  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘double’
[10:51:42.303] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:42.303] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:42.303] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:42.303] |  :  .  |  :  .  |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:42.304] |  :  .  |  :  .  |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:42.304] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:42.304] |  :  .  |  :  .  |  The total size of the 7 globals is 12.77 KiB (13081 bytes)
[10:51:42.304] |  :  .  |  :  .  |  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.77 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:42.304] |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:42.305] |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:42.305] |  :  .  |  :  .  |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:42.305] |  :  .  |  :  .  |  packages: [1] ‘future.apply’
[10:51:42.305] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:42.305]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:42.305]  - needed namespaces: [n=1] ‘future.apply’
[10:51:42.305] Finding globals ... DONE
[10:51:42.305]  - use_args: TRUE
[10:51:42.305]  - Getting '...' globals ...
[10:51:42.306] |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:42.306] |  :  .  |  :  .  |  recursive: 0
[10:51:42.306] |  :  .  |  :  .  |  length: 1
[10:51:42.306] |  :  .  |  :  .  |  elements: ‘...’
[10:51:42.306] |  :  .  |  :  .  |  'obj' is DotDotDotList
[10:51:42.306] |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:51:42.306] |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:51:42.306] |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:51:42.307] |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:42.307]    - '...' content: [n=0] 
[10:51:42.307] List of 1
[10:51:42.307]  $ ...: list()
[10:51:42.307]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:42.307]  - attr(*, "where")=List of 1
[10:51:42.307]   ..$ ...:<environment: 0x55d465ff0430> 
[10:51:42.307]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:42.307]  - attr(*, "resolved")= logi TRUE
[10:51:42.307]  - attr(*, "total_size")= num NA
[10:51:42.309]  - Getting '...' globals ... DONE
[10:51:42.309] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:42.310] List of 8
[10:51:42.310]  $ ...future.FUN:function (x, ...)  
[10:51:42.310]  $ x_FUN        :function (x)  
[10:51:42.310]  $ times        : int 0
[10:51:42.310]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:42.310]  $ stop_if_not  :function (...)  
[10:51:42.310]  $ dim          : NULL
[10:51:42.310]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:42.310]  $ ...          : list()
[10:51:42.310]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:42.310]  - attr(*, "where")=List of 8
[10:51:42.310]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:42.310]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:42.310]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:42.310]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:42.310]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:42.310]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:42.310]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:42.310]   ..$ ...          :<environment: 0x55d465ff0430> 
[10:51:42.310]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:42.310]  - attr(*, "resolved")= logi FALSE
[10:51:42.310]  - attr(*, "total_size")= num 23490
[10:51:42.315] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:42.315] getGlobalsAndPackagesXApply() ... DONE
[10:51:42.315] Number of futures (= number of chunks): 2
[10:51:42.315] Launching 2 futures (chunks) ...
[10:51:42.315] Chunk #1 of 2 ...
[10:51:42.316]  - Finding globals in 'X' for chunk #1 ...
[10:51:42.316] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:42.316] |  :  .  |  :  .  |  Searching for globals ...
[10:51:42.316] |  :  .  |  :  .  |  :  globals found: [0] 
[10:51:42.316] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:42.316] |  :  .  |  :  .  |  globals: [0] <none>
[10:51:42.316] |  :  .  |  :  .  |  packages: [0] <none>
[10:51:42.316] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:42.316]    + additional globals found: [n=0] 
[10:51:42.317]    + additional namespaces needed: [n=0] 
[10:51:42.317]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:42.317]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:42.317]  - seeds: <none>
[10:51:42.317]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.317] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:42.317] |  :  .  |  :  .  |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.317] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:42.317] |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:42.317] |  :  .  |  :  .  |  :  {
[10:51:42.317] |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.317] |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:42.317] |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:51:42.317] |  :  .  |  :  .  |  :      do.call(function(...) {
[10:51:42.317] |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.317] |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:42.317] |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:42.317] |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:51:42.317] |  :  .  |  :  .  |  :          "#                                                              "
[10:51:42.317] |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:42.317] |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:42.317] |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.317] |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:42.317] |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:42.317] |  :  .  |  :  .  |  :          repeat {
[10:51:42.317] |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:42.317] |  :  .  |  :  .  |  :                  emptyenv())) 
[10:51:42.317] |  :  .  |  :  .  |  :                  break
[10:51:42.317] |  :  .  |  :  .  |  :              penv <- env
[10:51:42.317] |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:51:42.317] |  :  .  |  :  .  |  :          }
[10:51:42.317] |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:42.317] |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:42.317] |  :  .  |  :  .  |  :          }
[10:51:42.317] |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.317] |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:51:42.317] |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:51:42.317] |  :  .  |  :  .  |  :          }
[10:51:42.317] |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.317] |  :  .  |  :  .  |  :          {
[10:51:42.317] |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.317] |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.317] |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.317] |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:42.317] |  :  .  |  :  .  |  :              }
[10:51:42.317] |  :  .  |  :  .  |  :              {
[10:51:42.317] |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.317] |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.317] |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:42.317] |  :  .  |  :  .  |  :                  })
[10:51:42.317] |  :  .  |  :  .  |  :              }
[10:51:42.317] |  :  .  |  :  .  |  :          }
[10:51:42.317] |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:51:42.317] |  :  .  |  :  .  |  :  }
[10:51:42.318] |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:42.318] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:42.318] |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:42.319] |  :  .  |  :  .  |  :  Packages: [1] ‘future.apply’
[10:51:42.319] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:42.319] |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:42.319] |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:42.319] |  :  .  |  :  .  |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.319] |  :  .  |  :  .  |  packages: [1] ‘future.apply’
[10:51:42.319] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:42.320] |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:42.320] |  :  .  |  :  .  |  state: ‘created’
[10:51:42.320] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.320] |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.320] |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:51:42.320] |  :  .  |  :  .  |  :  Launching futures ...
[10:51:42.320] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:42.320] |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:51:42.320] |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:42.322] |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:42.322] |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:51:42.322] |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:51:42.322] |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:42.322] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:51:42.322] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:42.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:42.323] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.323] |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:51:42.323] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:51:42.323] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.323] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:42.323] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:42.323] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.323] |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:51:42.324] |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:51:42.366] |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:51:42.366] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:51:42.366] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:42.367] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:51:42.367] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:51:42.367] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:51:42.367] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:51:42.367] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:42.367] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:51:42.367] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:51:42.367] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:42.368] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:42.368] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:42.368] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:42.368] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:51:42.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:42.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:42.368] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:42.369] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:51:42.369] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:42.369] |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:51:42.369] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:42.369] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:42.369] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:51:42.369] |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:51:42.370] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:51:42.370] |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:51:42.370] |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.370] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:42.370] |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:42.370] Created future:
[10:51:42.371] |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:42.371] |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:42.371] |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:42.372] |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:42.382] |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:42.370] MultisessionFuture:
[10:51:42.370] Label: ‘future_vapply-1’
[10:51:42.370] Expression:
[10:51:42.370] {
[10:51:42.370]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.370]     "# expression in do.call(), because function called uses '...'  "
[10:51:42.370]     "# as a global variable                                         "
[10:51:42.370]     do.call(function(...) {
[10:51:42.370]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.370]         "# without having an '...' argument. This means '...' is treated"
[10:51:42.370]         "# as a global variable. This may happen when FUN() is an       "
[10:51:42.370]         "# anonymous function.                                          "
[10:51:42.370]         "#                                                              "
[10:51:42.370]         "# If an anonymous function, we will make sure to restore the   "
[10:51:42.370]         "# function environment of FUN() to the calling environment.    "
[10:51:42.370]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.370]         "# global environment, which is where globals are written.      "
[10:51:42.370]         penv <- env <- environment(...future.FUN)
[10:51:42.370]         repeat {
[10:51:42.370]             if (identical(env, globalenv()) || identical(env, 
[10:51:42.370]                 emptyenv())) 
[10:51:42.370]                 break
[10:51:42.370]             penv <- env
[10:51:42.370]             env <- parent.env(env)
[10:51:42.370]         }
[10:51:42.370]         if (identical(penv, globalenv())) {
[10:51:42.370]             environment(...future.FUN) <- environment()
[10:51:42.370]         }
[10:51:42.370]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.370]             !isNamespace(penv)) {
[10:51:42.370]             parent.env(penv) <- environment()
[10:51:42.370]         }
[10:51:42.370]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.370]         {
[10:51:42.370]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.370]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.370]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.370]                 on.exit(options(oopts), add = TRUE)
[10:51:42.370]             }
[10:51:42.370]             {
[10:51:42.370]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.370]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.370]                   ...future.FUN(...future.X_jj, ...)
[10:51:42.370]                 })
[10:51:42.370]             }
[10:51:42.370]         }
[10:51:42.370]     }, args = future.call.arguments)
[10:51:42.370] }
[10:51:42.370] Lazy evaluation: FALSE
[10:51:42.370] Asynchronous evaluation: TRUE
[10:51:42.370] Local evaluation: TRUE
[10:51:42.370] Environment: R_GlobalEnv
[10:51:42.370] Capture standard output: TRUE
[10:51:42.370] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:42.370] Immediate condition classes: ‘immediateCondition’
[10:51:42.370] Globals: 11 objects totaling 13.01 KiB (function ‘...future.FUN’ of 4.50 KiB, function ‘x_FUN’ of 295 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:42.370] Packages: 1 packages (‘future.apply’)
[10:51:42.370] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:42.370] Resolved: FALSE
[10:51:42.370] Value: <not collected>
[10:51:42.370] Conditions captured: <none>
[10:51:42.370] Early signaling: FALSE
[10:51:42.370] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:42.370] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.382] Chunk #1 of 2 ... DONE
[10:51:42.383] Chunk #2 of 2 ...
[10:51:42.383]  - Finding globals in 'X' for chunk #2 ...
[10:51:42.383] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:42.383] |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:42.383] |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:51:42.383] |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:42.383] |  :  .  |  :  .  |  :  globals: [0] <none>
[10:51:42.384] |  :  .  |  :  .  |  :  packages: [0] <none>
[10:51:42.384] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:42.384]    + additional globals found: [n=0] 
[10:51:42.384]    + additional namespaces needed: [n=0] 
[10:51:42.384]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:42.384]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:42.384]  - seeds: <none>
[10:51:42.384]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.384] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:42.384] |  :  .  |  :  .  |  :  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.384] |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:42.385] |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:42.385] |  :  .  |  :  .  |  :  .  {
[10:51:42.385] |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.385] |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:42.385] |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:51:42.385] |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:51:42.385] |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.385] |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:42.385] |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:42.385] |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:42.385] |  :  .  |  :  .  |  :  .          "#                                                              "
[10:51:42.385] |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:42.385] |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:42.385] |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.385] |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:42.385] |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:42.385] |  :  .  |  :  .  |  :  .          repeat {
[10:51:42.385] |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:42.385] |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:51:42.385] |  :  .  |  :  .  |  :  .                  break
[10:51:42.385] |  :  .  |  :  .  |  :  .              penv <- env
[10:51:42.385] |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:51:42.385] |  :  .  |  :  .  |  :  .          }
[10:51:42.385] |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:42.385] |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:42.385] |  :  .  |  :  .  |  :  .          }
[10:51:42.385] |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.385] |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:42.385] |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:42.385] |  :  .  |  :  .  |  :  .          }
[10:51:42.385] |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.385] |  :  .  |  :  .  |  :  .          {
[10:51:42.385] |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.385] |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.385] |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.385] |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:42.385] |  :  .  |  :  .  |  :  .              }
[10:51:42.385] |  :  .  |  :  .  |  :  .              {
[10:51:42.385] |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.385] |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.385] |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:42.385] |  :  .  |  :  .  |  :  .                  })
[10:51:42.385] |  :  .  |  :  .  |  :  .              }
[10:51:42.385] |  :  .  |  :  .  |  :  .          }
[10:51:42.385] |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:42.385] |  :  .  |  :  .  |  :  .  }
[10:51:42.385] |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:42.385] |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:42.386] |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘future.apply’
[10:51:42.386] |  :  .  |  :  .  |  :  .  Packages: [1] ‘future.apply’
[10:51:42.386] |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:42.386] |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:42.386] |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:42.386] |  :  .  |  :  .  |  :  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.386] |  :  .  |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:42.387] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:42.387] |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:51:42.387] |  :  .  |  :  .  |  :  state: ‘created’
[10:51:42.387] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.387] |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.387] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:42.387] |  :  .  |  :  .  |  :  .  Launching futures ...
[10:51:42.387] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:42.388] |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:42.388] |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:42.389] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:42.389] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:42.389] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:42.389] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:51:42.390] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:51:42.390] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.390] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:42.390] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:42.390] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.390] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:51:42.390] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:51:42.390] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.390] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:42.390] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:42.391] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.391] |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 2
[10:51:42.391] |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:42.429] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:51:42.429] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:51:42.429] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:42.430] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:42.430] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:42.430] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:42.430] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:42.430] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:42.430] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:51:42.430] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:42.431] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:42.431] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:42.431] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:42.431] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:42.431] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:42.431] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.431] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:42.431] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.432] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:42.432] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:42.432] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:51:42.432] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:42.432] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:51:42.432] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:51:42.432] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:42.433] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:42.433] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:42.433] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:42.433] |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:51:42.433] |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.433] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:42.433] |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:42.433] Created future:
[10:51:42.434] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:42.435] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:42.435] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:42.435] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:42.445] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:42.433] MultisessionFuture:
[10:51:42.433] Label: ‘future_vapply-2’
[10:51:42.433] Expression:
[10:51:42.433] {
[10:51:42.433]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.433]     "# expression in do.call(), because function called uses '...'  "
[10:51:42.433]     "# as a global variable                                         "
[10:51:42.433]     do.call(function(...) {
[10:51:42.433]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.433]         "# without having an '...' argument. This means '...' is treated"
[10:51:42.433]         "# as a global variable. This may happen when FUN() is an       "
[10:51:42.433]         "# anonymous function.                                          "
[10:51:42.433]         "#                                                              "
[10:51:42.433]         "# If an anonymous function, we will make sure to restore the   "
[10:51:42.433]         "# function environment of FUN() to the calling environment.    "
[10:51:42.433]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.433]         "# global environment, which is where globals are written.      "
[10:51:42.433]         penv <- env <- environment(...future.FUN)
[10:51:42.433]         repeat {
[10:51:42.433]             if (identical(env, globalenv()) || identical(env, 
[10:51:42.433]                 emptyenv())) 
[10:51:42.433]                 break
[10:51:42.433]             penv <- env
[10:51:42.433]             env <- parent.env(env)
[10:51:42.433]         }
[10:51:42.433]         if (identical(penv, globalenv())) {
[10:51:42.433]             environment(...future.FUN) <- environment()
[10:51:42.433]         }
[10:51:42.433]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.433]             !isNamespace(penv)) {
[10:51:42.433]             parent.env(penv) <- environment()
[10:51:42.433]         }
[10:51:42.433]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.433]         {
[10:51:42.433]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.433]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.433]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.433]                 on.exit(options(oopts), add = TRUE)
[10:51:42.433]             }
[10:51:42.433]             {
[10:51:42.433]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.433]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.433]                   ...future.FUN(...future.X_jj, ...)
[10:51:42.433]                 })
[10:51:42.433]             }
[10:51:42.433]         }
[10:51:42.433]     }, args = future.call.arguments)
[10:51:42.433] }
[10:51:42.433] Lazy evaluation: FALSE
[10:51:42.433] Asynchronous evaluation: TRUE
[10:51:42.433] Local evaluation: TRUE
[10:51:42.433] Environment: R_GlobalEnv
[10:51:42.433] Capture standard output: TRUE
[10:51:42.433] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:42.433] Immediate condition classes: ‘immediateCondition’
[10:51:42.433] Globals: 11 objects totaling 13.01 KiB (function ‘...future.FUN’ of 4.50 KiB, function ‘x_FUN’ of 295 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:42.433] Packages: 1 packages (‘future.apply’)
[10:51:42.433] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:42.433] Resolved: FALSE
[10:51:42.433] Value: <not collected>
[10:51:42.433] Conditions captured: <none>
[10:51:42.433] Early signaling: FALSE
[10:51:42.433] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:42.433] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.446] Chunk #2 of 2 ... DONE
[10:51:42.446] Launching 2 futures (chunks) ... DONE
[10:51:42.446] Resolving 2 futures (chunks) ...
[10:51:42.446] |  :  .  |  :  .  |  :  value() on list ...
[10:51:42.446] |  :  .  |  :  .  |  :  .  recursive: 0
[10:51:42.446] |  :  .  |  :  .  |  :  .  length: 2
[10:51:42.446] |  :  .  |  :  .  |  :  .  
[10:51:42.446] |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:51:42.447] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:51:42.447] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:42.447] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:42.447] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:42.447] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:42.447] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:42.447] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 5
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num(0) 
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num(0) 
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num(0) 
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num(0) 
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num(0) 
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 66393
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.006 0 0.006 0 0
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:42.448] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:51:42.459] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:51:42.459] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:42.460] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:51:42.460] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:42.460] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:42.460] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:51:42.460] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.460] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.460] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.460] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:42.460] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:42.460] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  until=1
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:51:42.461] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.462] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.462] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.462] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.462] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.462] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.462] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.462] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.462] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.462] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.463] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:42.464] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:42.465] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:42.465] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:42.465] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:51:42.465] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:42.465] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:42.465] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:42.465] |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 1)
[10:51:42.465] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:51:42.465] |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:51:42.465] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:42.465] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:42.466] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:42.466] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:42.466] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:42.476] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:42.476] |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:51:42.487] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:51:42.487] |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:51:42.487] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:42.487] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:42.487] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:42.488] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:42.488] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:42.488] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:42.488] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:42.488] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:51:42.488] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 5
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num(0) 
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num(0) 
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num(0) 
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num(0) 
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num(0) 
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 66394
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.003 0 0
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:42.489] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:51:42.500] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:51:42.500] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:42.500] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:51:42.500] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:42.500] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:42.500] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:51:42.500] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:42.501] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.502] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.503] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.503] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.503] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.503] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.503] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.503] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.503] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:42.503] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:42.503] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:42.503] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:42.504] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:42.505] |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 2)
[10:51:42.506] |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:51:42.506] |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:51:42.506] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:42.506] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:42.506] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:42.506] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:42.506] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:42.506] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:42.506] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:42.506] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:42.506] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:42.507] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:42.507] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:42.507] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:42.507] |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:51:42.507] |  :  .  |  :  .  |  :  value() on list ... done
[10:51:42.507]  - Number of value chunks collected: 2
[10:51:42.507] Resolving 2 futures (chunks) ... DONE
[10:51:42.507] Reducing values from 2 chunks ...
[10:51:42.507]  - Number of values collected after concatenation: 10
[10:51:42.507]  - Number of values expected: 10
[10:51:42.507] Reducing values from 2 chunks ... DONE
[10:51:42.508] future_lapply() ... DONE
 num[0 , 1:10] 
 int[0 , 1:10] 
[10:51:42.508] future_lapply() ...
[10:51:42.510] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.511] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:42.511] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.511] Number of chunks: 2
[10:51:42.511] getGlobalsAndPackagesXApply() ...
[10:51:42.511]  - future.globals: TRUE
[10:51:42.511] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:42.511] |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:42.517] |  :  .  |  :  .  |  :  .  |  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘integer’
[10:51:42.517] |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:42.517] |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:42.517] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:42.518] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:42.518] |  :  .  |  :  .  |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:42.518] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:42.519] |  :  .  |  :  .  |  :  .  The total size of the 7 globals is 12.75 KiB (13056 bytes)
[10:51:42.519] |  :  .  |  :  .  |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.75 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.50 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:42.519] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:42.519] |  :  .  |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:42.519] |  :  .  |  :  .  |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:42.519] |  :  .  |  :  .  |  :  .  packages: [1] ‘future.apply’
[10:51:42.520] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:42.520]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:42.520]  - needed namespaces: [n=1] ‘future.apply’
[10:51:42.520] Finding globals ... DONE
[10:51:42.520]  - use_args: TRUE
[10:51:42.520]  - Getting '...' globals ...
[10:51:42.520] |  :  .  |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:42.520] |  :  .  |  :  .  |  :  .  recursive: 0
[10:51:42.521] |  :  .  |  :  .  |  :  .  length: 1
[10:51:42.521] |  :  .  |  :  .  |  :  .  elements: ‘...’
[10:51:42.521] |  :  .  |  :  .  |  :  .  'obj' is DotDotDotList
[10:51:42.521] |  :  .  |  :  .  |  :  .  resolve(obj, ...) ...
[10:51:42.521] |  :  .  |  :  .  |  :  .  resolve(obj, ...) ... done
[10:51:42.521] |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:51:42.521] |  :  .  |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:42.521]    - '...' content: [n=0] 
[10:51:42.521] List of 1
[10:51:42.521]  $ ...: list()
[10:51:42.521]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:42.521]  - attr(*, "where")=List of 1
[10:51:42.521]   ..$ ...:<environment: 0x55d467548788> 
[10:51:42.521]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:42.521]  - attr(*, "resolved")= logi TRUE
[10:51:42.521]  - attr(*, "total_size")= num NA
[10:51:42.524]  - Getting '...' globals ... DONE
[10:51:42.524] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:42.524] List of 8
[10:51:42.524]  $ ...future.FUN:function (x, ...)  
[10:51:42.524]  $ x_FUN        :function (x)  
[10:51:42.524]  $ times        : int 0
[10:51:42.524]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:42.524]  $ stop_if_not  :function (...)  
[10:51:42.524]  $ dim          : NULL
[10:51:42.524]  $ valid_types  : chr [1:2] "logical" "integer"
[10:51:42.524]  $ ...          : list()
[10:51:42.524]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:42.524]  - attr(*, "where")=List of 8
[10:51:42.524]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:42.524]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:42.524]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:42.524]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:42.524]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:42.524]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:42.524]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:42.524]   ..$ ...          :<environment: 0x55d467548788> 
[10:51:42.524]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:42.524]  - attr(*, "resolved")= logi FALSE
[10:51:42.524]  - attr(*, "total_size")= num 23453
[10:51:42.530] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:42.530] getGlobalsAndPackagesXApply() ... DONE
[10:51:42.530] Number of futures (= number of chunks): 2
[10:51:42.530] Launching 2 futures (chunks) ...
[10:51:42.530] Chunk #1 of 2 ...
[10:51:42.530]  - Finding globals in 'X' for chunk #1 ...
[10:51:42.530] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:42.530] |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:42.531] |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:51:42.531] |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:42.531] |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:51:42.531] |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:51:42.531] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:42.531]    + additional globals found: [n=0] 
[10:51:42.531]    + additional namespaces needed: [n=0] 
[10:51:42.531]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:42.531]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:42.531]  - seeds: <none>
[10:51:42.532]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.532] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:42.532] |  :  .  |  :  .  |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.532] |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:42.532] |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:42.532] |  :  .  |  :  .  |  :  .  |  {
[10:51:42.532] |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.532] |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:42.532] |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:42.532] |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          "#                                                              "
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          repeat {
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:42.532] |  :  .  |  :  .  |  :  .  |                  emptyenv())) 
[10:51:42.532] |  :  .  |  :  .  |  :  .  |                  break
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              penv <- env
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              env <- parent.env(env)
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          }
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          }
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          }
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          {
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.532] |  :  .  |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.532] |  :  .  |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              }
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              {
[10:51:42.532] |  :  .  |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.532] |  :  .  |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.532] |  :  .  |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:42.532] |  :  .  |  :  .  |  :  .  |                  })
[10:51:42.532] |  :  .  |  :  .  |  :  .  |              }
[10:51:42.532] |  :  .  |  :  .  |  :  .  |          }
[10:51:42.532] |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:42.532] |  :  .  |  :  .  |  :  .  |  }
[10:51:42.533] |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:42.533] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:42.533] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:42.533] |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘future.apply’
[10:51:42.533] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:42.533] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:42.534] |  :  .  |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:42.534] |  :  .  |  :  .  |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.534] |  :  .  |  :  .  |  :  .  packages: [1] ‘future.apply’
[10:51:42.534] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:42.534] |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:42.534] |  :  .  |  :  .  |  :  .  state: ‘created’
[10:51:42.534] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.535] |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.535] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:42.535] |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:51:42.535] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:42.535] |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:42.535] |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:42.537] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:42.537] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:42.537] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:51:42.537] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:42.537] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:42.537] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.537] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:42.537] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:42.537] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.537] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:42.538] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:42.538] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.538] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:42.538] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:42.538] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.538] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:51:42.538] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:42.616] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:42.617] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:42.617] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:42.617] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:51:42.617] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:42.617] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:42.617] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:51:42.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:42.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:42.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:42.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:42.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:42.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:42.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:42.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:42.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:51:42.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:51:42.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:42.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:42.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:42.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:51:42.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:42.620] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:42.620] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:51:42.620] |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:51:42.620] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:42.620] |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:42.620] |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.620] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:42.620] |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:42.620] Created future:
[10:51:42.621] |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:42.622] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:42.622] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:42.622] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:42.632] |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:42.620] MultisessionFuture:
[10:51:42.620] Label: ‘future_vapply-1’
[10:51:42.620] Expression:
[10:51:42.620] {
[10:51:42.620]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.620]     "# expression in do.call(), because function called uses '...'  "
[10:51:42.620]     "# as a global variable                                         "
[10:51:42.620]     do.call(function(...) {
[10:51:42.620]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.620]         "# without having an '...' argument. This means '...' is treated"
[10:51:42.620]         "# as a global variable. This may happen when FUN() is an       "
[10:51:42.620]         "# anonymous function.                                          "
[10:51:42.620]         "#                                                              "
[10:51:42.620]         "# If an anonymous function, we will make sure to restore the   "
[10:51:42.620]         "# function environment of FUN() to the calling environment.    "
[10:51:42.620]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.620]         "# global environment, which is where globals are written.      "
[10:51:42.620]         penv <- env <- environment(...future.FUN)
[10:51:42.620]         repeat {
[10:51:42.620]             if (identical(env, globalenv()) || identical(env, 
[10:51:42.620]                 emptyenv())) 
[10:51:42.620]                 break
[10:51:42.620]             penv <- env
[10:51:42.620]             env <- parent.env(env)
[10:51:42.620]         }
[10:51:42.620]         if (identical(penv, globalenv())) {
[10:51:42.620]             environment(...future.FUN) <- environment()
[10:51:42.620]         }
[10:51:42.620]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.620]             !isNamespace(penv)) {
[10:51:42.620]             parent.env(penv) <- environment()
[10:51:42.620]         }
[10:51:42.620]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.620]         {
[10:51:42.620]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.620]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.620]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.620]                 on.exit(options(oopts), add = TRUE)
[10:51:42.620]             }
[10:51:42.620]             {
[10:51:42.620]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.620]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.620]                   ...future.FUN(...future.X_jj, ...)
[10:51:42.620]                 })
[10:51:42.620]             }
[10:51:42.620]         }
[10:51:42.620]     }, args = future.call.arguments)
[10:51:42.620] }
[10:51:42.620] Lazy evaluation: FALSE
[10:51:42.620] Asynchronous evaluation: TRUE
[10:51:42.620] Local evaluation: TRUE
[10:51:42.620] Environment: R_GlobalEnv
[10:51:42.620] Capture standard output: TRUE
[10:51:42.620] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:42.620] Immediate condition classes: ‘immediateCondition’
[10:51:42.620] Globals: 11 objects totaling 12.98 KiB (function ‘...future.FUN’ of 4.49 KiB, function ‘x_FUN’ of 296 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:42.620] Packages: 1 packages (‘future.apply’)
[10:51:42.620] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:42.620] Resolved: FALSE
[10:51:42.620] Value: <not collected>
[10:51:42.620] Conditions captured: <none>
[10:51:42.620] Early signaling: FALSE
[10:51:42.620] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:42.620] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.633] Chunk #1 of 2 ... DONE
[10:51:42.633] Chunk #2 of 2 ...
[10:51:42.633]  - Finding globals in 'X' for chunk #2 ...
[10:51:42.633] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:42.633] |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:42.633] |  :  .  |  :  .  |  :  .  |  :  globals found: [0] 
[10:51:42.633] |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:42.634] |  :  .  |  :  .  |  :  .  |  globals: [0] <none>
[10:51:42.634] |  :  .  |  :  .  |  :  .  |  packages: [0] <none>
[10:51:42.634] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:42.634]    + additional globals found: [n=0] 
[10:51:42.634]    + additional namespaces needed: [n=0] 
[10:51:42.634]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:42.634]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:42.634]  - seeds: <none>
[10:51:42.634]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.634] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:42.634] |  :  .  |  :  .  |  :  .  |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :  {
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          "#                                                              "
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          repeat {
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :                  emptyenv())) 
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :                  break
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              penv <- env
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          }
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          }
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          }
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          {
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              }
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              {
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :                  })
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :              }
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :          }
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  :  }
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:42.635] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:42.636] |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:42.636] |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘future.apply’
[10:51:42.636] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:42.636] |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:42.636] |  :  .  |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:42.636] |  :  .  |  :  .  |  :  .  |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.637] |  :  .  |  :  .  |  :  .  |  packages: [1] ‘future.apply’
[10:51:42.637] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:42.637] |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:42.637] |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:51:42.637] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.637] |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.637] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:51:42.638] |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:51:42.638] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:42.638] |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:51:42.638] |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:42.639] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:42.639] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:51:42.639] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:51:42.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:42.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:51:42.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:42.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:42.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:51:42.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:51:42.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:42.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:42.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:51:42.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:51:42.720] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:51:42.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:51:42.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:42.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:51:42.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:51:42.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:51:42.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:51:42.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:42.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:51:42.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:51:42.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:42.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:42.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:42.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:42.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:51:42.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:42.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:42.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:42.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:51:42.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:42.724] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:51:42.724] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:51:42.724] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:42.724] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:51:42.724] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:51:42.724] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:51:42.724] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:51:42.724] |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.724] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:42.724] |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:42.725] Created future:
[10:51:42.726] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:42.726] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:42.726] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:42.726] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:42.737] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:42.725] MultisessionFuture:
[10:51:42.725] Label: ‘future_vapply-2’
[10:51:42.725] Expression:
[10:51:42.725] {
[10:51:42.725]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.725]     "# expression in do.call(), because function called uses '...'  "
[10:51:42.725]     "# as a global variable                                         "
[10:51:42.725]     do.call(function(...) {
[10:51:42.725]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.725]         "# without having an '...' argument. This means '...' is treated"
[10:51:42.725]         "# as a global variable. This may happen when FUN() is an       "
[10:51:42.725]         "# anonymous function.                                          "
[10:51:42.725]         "#                                                              "
[10:51:42.725]         "# If an anonymous function, we will make sure to restore the   "
[10:51:42.725]         "# function environment of FUN() to the calling environment.    "
[10:51:42.725]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.725]         "# global environment, which is where globals are written.      "
[10:51:42.725]         penv <- env <- environment(...future.FUN)
[10:51:42.725]         repeat {
[10:51:42.725]             if (identical(env, globalenv()) || identical(env, 
[10:51:42.725]                 emptyenv())) 
[10:51:42.725]                 break
[10:51:42.725]             penv <- env
[10:51:42.725]             env <- parent.env(env)
[10:51:42.725]         }
[10:51:42.725]         if (identical(penv, globalenv())) {
[10:51:42.725]             environment(...future.FUN) <- environment()
[10:51:42.725]         }
[10:51:42.725]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.725]             !isNamespace(penv)) {
[10:51:42.725]             parent.env(penv) <- environment()
[10:51:42.725]         }
[10:51:42.725]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.725]         {
[10:51:42.725]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.725]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.725]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.725]                 on.exit(options(oopts), add = TRUE)
[10:51:42.725]             }
[10:51:42.725]             {
[10:51:42.725]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.725]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.725]                   ...future.FUN(...future.X_jj, ...)
[10:51:42.725]                 })
[10:51:42.725]             }
[10:51:42.725]         }
[10:51:42.725]     }, args = future.call.arguments)
[10:51:42.725] }
[10:51:42.725] Lazy evaluation: FALSE
[10:51:42.725] Asynchronous evaluation: TRUE
[10:51:42.725] Local evaluation: TRUE
[10:51:42.725] Environment: R_GlobalEnv
[10:51:42.725] Capture standard output: TRUE
[10:51:42.725] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:42.725] Immediate condition classes: ‘immediateCondition’
[10:51:42.725] Globals: 11 objects totaling 12.98 KiB (function ‘...future.FUN’ of 4.49 KiB, function ‘x_FUN’ of 296 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:42.725] Packages: 1 packages (‘future.apply’)
[10:51:42.725] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:42.725] Resolved: FALSE
[10:51:42.725] Value: <not collected>
[10:51:42.725] Conditions captured: <none>
[10:51:42.725] Early signaling: FALSE
[10:51:42.725] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:42.725] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.737] Chunk #2 of 2 ... DONE
[10:51:42.737] Launching 2 futures (chunks) ... DONE
[10:51:42.737] Resolving 2 futures (chunks) ...
[10:51:42.737] |  :  .  |  :  .  |  :  .  |  value() on list ...
[10:51:42.738] |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:51:42.738] |  :  .  |  :  .  |  :  .  |  :  length: 2
[10:51:42.738] |  :  .  |  :  .  |  :  .  |  :  
[10:51:42.738] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 2
[10:51:42.738] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:51:42.738] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:42.738] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:42.738] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 5
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int(0) 
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int(0) 
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int(0) 
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int(0) 
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int(0) 
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 66393
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.004 0 0
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:42.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:51:42.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:51:42.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:42.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:51:42.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:42.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:42.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #1
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:42.752] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  until=1
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #1
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.753] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.754] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.754] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.754] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.754] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.754] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.754] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.754] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.754] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:42.754] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:42.754] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:42.755] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:42.755] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.755] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.755] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.755] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.757] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.757] |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:51:42.757] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:42.757] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:42.757] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:42.758] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:51:42.759] |  :  .  |  :  .  |  :  .  |  :  .  length: 1 (resolved future 1)
[10:51:42.759] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:51:42.759] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:51:42.759] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:42.759] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:42.759] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:42.759] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:42.760] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:42.767] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 5
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int(0) 
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int(0) 
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int(0) 
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int(0) 
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int(0) 
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 66394
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:42.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:51:42.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:51:42.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #2
[10:51:42.780] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.782] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.782] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.782] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.782] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.782] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.782] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.782] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.782] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.782] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.782] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:42.783] |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:42.784] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 2)
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ...
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:42.785] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:42.786] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:42.786] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:42.786] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:42.786] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:42.786] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:42.786] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:51:42.786] |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ... done
[10:51:42.786] |  :  .  |  :  .  |  :  .  |  value() on list ... done
[10:51:42.786]  - Number of value chunks collected: 2
[10:51:42.786] Resolving 2 futures (chunks) ... DONE
[10:51:42.786] Reducing values from 2 chunks ...
[10:51:42.787]  - Number of values collected after concatenation: 10
[10:51:42.787]  - Number of values expected: 10
[10:51:42.787] Reducing values from 2 chunks ... DONE
[10:51:42.787] future_lapply() ... DONE
 int[0 , 1:10] 
 num [1:10] 1 1.41 1.73 2 2.24 ...
[10:51:42.788] future_lapply() ...
[10:51:42.790] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.790] |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:42.790] |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.790] Number of chunks: 2
[10:51:42.790] getGlobalsAndPackagesXApply() ...
[10:51:42.790]  - future.globals: TRUE
[10:51:42.791] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:42.791] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:42.794] |  :  .  |  :  .  |  :  .  |  :  .  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:42.794] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:42.794] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:42.794] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:42.795] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:42.795] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [2] ‘base’, ‘future.apply’
[10:51:42.795] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:42.795] |  :  .  |  :  .  |  :  .  |  :  The total size of the 7 globals is 12.08 KiB (12367 bytes)
[10:51:42.796] |  :  .  |  :  .  |  :  .  |  :  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.08 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (4.07 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:42.796] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:42.796] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:42.796] |  :  .  |  :  .  |  :  .  |  :  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:42.796] |  :  .  |  :  .  |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:42.796] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:42.796]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:42.797]  - needed namespaces: [n=1] ‘future.apply’
[10:51:42.797] Finding globals ... DONE
[10:51:42.797]  - use_args: TRUE
[10:51:42.797]  - Getting '...' globals ...
[10:51:42.797] |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:42.797] |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:51:42.797] |  :  .  |  :  .  |  :  .  |  :  length: 1
[10:51:42.797] |  :  .  |  :  .  |  :  .  |  :  elements: ‘...’
[10:51:42.798] |  :  .  |  :  .  |  :  .  |  :  'obj' is DotDotDotList
[10:51:42.798] |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:51:42.798] |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:51:42.798] |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:51:42.798] |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:42.798]    - '...' content: [n=0] 
[10:51:42.798] List of 1
[10:51:42.798]  $ ...: list()
[10:51:42.798]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:42.798]  - attr(*, "where")=List of 1
[10:51:42.798]   ..$ ...:<environment: 0x55d462857460> 
[10:51:42.798]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:42.798]  - attr(*, "resolved")= logi TRUE
[10:51:42.798]  - attr(*, "total_size")= num NA
[10:51:42.801]  - Getting '...' globals ... DONE
[10:51:42.801] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:42.801] List of 8
[10:51:42.801]  $ ...future.FUN:function (x, ...)  
[10:51:42.801]  $ x_FUN        :function (x)  
[10:51:42.801]  $ times        : int 1
[10:51:42.801]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:42.801]  $ stop_if_not  :function (...)  
[10:51:42.801]  $ dim          : NULL
[10:51:42.801]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:42.801]  $ ...          : list()
[10:51:42.801]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:42.801]  - attr(*, "where")=List of 8
[10:51:42.801]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:42.801]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:42.801]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:42.801]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:42.801]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:42.801]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:42.801]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:42.801]   ..$ ...          :<environment: 0x55d462857460> 
[10:51:42.801]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:42.801]  - attr(*, "resolved")= logi FALSE
[10:51:42.801]  - attr(*, "total_size")= num 22322
[10:51:42.806] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:42.807] getGlobalsAndPackagesXApply() ... DONE
[10:51:42.807] Number of futures (= number of chunks): 2
[10:51:42.807] Launching 2 futures (chunks) ...
[10:51:42.807] Chunk #1 of 2 ...
[10:51:42.807]  - Finding globals in 'X' for chunk #1 ...
[10:51:42.807] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:42.807] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:42.807] |  :  .  |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:51:42.808] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:42.808] |  :  .  |  :  .  |  :  .  |  :  globals: [0] <none>
[10:51:42.808] |  :  .  |  :  .  |  :  .  |  :  packages: [0] <none>
[10:51:42.808] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:42.808]    + additional globals found: [n=0] 
[10:51:42.808]    + additional namespaces needed: [n=0] 
[10:51:42.808]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:42.808]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:42.808]  - seeds: <none>
[10:51:42.808]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .  {
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          "#                                                              "
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          repeat {
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .                  break
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              penv <- env
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          {
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              {
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .                  })
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  .  }
[10:51:42.809] |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:42.810] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:42.810] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘future.apply’
[10:51:42.810] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘future.apply’
[10:51:42.810] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:42.810] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:42.811] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:42.811] |  :  .  |  :  .  |  :  .  |  :  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.811] |  :  .  |  :  .  |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:42.811] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:42.811] |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:51:42.811] |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:51:42.811] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.811] |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.812] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:42.812] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:51:42.812] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:42.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:42.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:42.813] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:51:42.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:42.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:42.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:51:42.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:42.892] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:51:42.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:51:42.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:42.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:42.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:42.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:42.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:42.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:42.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:51:42.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:42.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:42.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:42.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:42.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:42.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:42.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:42.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:42.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:42.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:51:42.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:42.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:51:42.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:42.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:42.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:42.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:42.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:42.896] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:51:42.896] |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.896] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:42.896] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:42.896] Created future:
[10:51:42.897] |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:42.898] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:42.898] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:42.898] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:42.908] |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:42.897] MultisessionFuture:
[10:51:42.897] Label: ‘future_vapply-1’
[10:51:42.897] Expression:
[10:51:42.897] {
[10:51:42.897]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.897]     "# expression in do.call(), because function called uses '...'  "
[10:51:42.897]     "# as a global variable                                         "
[10:51:42.897]     do.call(function(...) {
[10:51:42.897]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.897]         "# without having an '...' argument. This means '...' is treated"
[10:51:42.897]         "# as a global variable. This may happen when FUN() is an       "
[10:51:42.897]         "# anonymous function.                                          "
[10:51:42.897]         "#                                                              "
[10:51:42.897]         "# If an anonymous function, we will make sure to restore the   "
[10:51:42.897]         "# function environment of FUN() to the calling environment.    "
[10:51:42.897]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.897]         "# global environment, which is where globals are written.      "
[10:51:42.897]         penv <- env <- environment(...future.FUN)
[10:51:42.897]         repeat {
[10:51:42.897]             if (identical(env, globalenv()) || identical(env, 
[10:51:42.897]                 emptyenv())) 
[10:51:42.897]                 break
[10:51:42.897]             penv <- env
[10:51:42.897]             env <- parent.env(env)
[10:51:42.897]         }
[10:51:42.897]         if (identical(penv, globalenv())) {
[10:51:42.897]             environment(...future.FUN) <- environment()
[10:51:42.897]         }
[10:51:42.897]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.897]             !isNamespace(penv)) {
[10:51:42.897]             parent.env(penv) <- environment()
[10:51:42.897]         }
[10:51:42.897]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.897]         {
[10:51:42.897]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.897]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.897]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.897]                 on.exit(options(oopts), add = TRUE)
[10:51:42.897]             }
[10:51:42.897]             {
[10:51:42.897]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.897]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.897]                   ...future.FUN(...future.X_jj, ...)
[10:51:42.897]                 })
[10:51:42.897]             }
[10:51:42.897]         }
[10:51:42.897]     }, args = future.call.arguments)
[10:51:42.897] }
[10:51:42.897] Lazy evaluation: FALSE
[10:51:42.897] Asynchronous evaluation: TRUE
[10:51:42.897] Local evaluation: TRUE
[10:51:42.897] Environment: R_GlobalEnv
[10:51:42.897] Capture standard output: TRUE
[10:51:42.897] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:42.897] Immediate condition classes: ‘immediateCondition’
[10:51:42.897] Globals: 11 objects totaling 12.31 KiB (function ‘...future.FUN’ of 4.06 KiB, function ‘x_FUN’ of 35 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:42.897] Packages: 1 packages (‘future.apply’)
[10:51:42.897] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:42.897] Resolved: FALSE
[10:51:42.897] Value: <not collected>
[10:51:42.897] Conditions captured: <none>
[10:51:42.897] Early signaling: FALSE
[10:51:42.897] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:42.897] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:42.909] Chunk #1 of 2 ... DONE
[10:51:42.909] Chunk #2 of 2 ...
[10:51:42.909]  - Finding globals in 'X' for chunk #2 ...
[10:51:42.909] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:42.909] |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:42.910] |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:51:42.910] |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:42.910] |  :  .  |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:51:42.910] |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:51:42.910] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:42.910]    + additional globals found: [n=0] 
[10:51:42.910]    + additional namespaces needed: [n=0] 
[10:51:42.910]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:42.910]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:42.911]  - seeds: <none>
[10:51:42.911]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          "#                                                              "
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          repeat {
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |                  emptyenv())) 
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |                  break
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              penv <- env
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              env <- parent.env(env)
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              {
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |                  })
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:42.911] |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:51:42.912] |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:42.912] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:42.912] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:42.912] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘future.apply’
[10:51:42.912] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:42.913] |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:42.913] |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:42.913] |  :  .  |  :  .  |  :  .  |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:42.913] |  :  .  |  :  .  |  :  .  |  :  .  packages: [1] ‘future.apply’
[10:51:42.913] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:42.913] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:42.913] |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:51:42.914] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:42.914] |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:42.914] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:42.914] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:51:42.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:42.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:42.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:42.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:42.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:42.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:51:42.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:42.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:42.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:42.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:42.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:42.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:42.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:42.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:42.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:42.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:42.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:51:42.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:42.998] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:42.999] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:42.999] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:42.999] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:51:42.999] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:43.000] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:43.000] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:51:43.000] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:43.000] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:43.000] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:43.000] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:43.000] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:43.000] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:43.000] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:43.000] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:43.001] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.001] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:51:43.001] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.001] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:51:43.001] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:43.001] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:43.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:43.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:51:43.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:51:43.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:43.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:51:43.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:51:43.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:43.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:43.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.002] |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:43.003] |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:43.003] Created future:
[10:51:43.004] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:43.004] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:43.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:43.004] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:43.015] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:43.003] MultisessionFuture:
[10:51:43.003] Label: ‘future_vapply-2’
[10:51:43.003] Expression:
[10:51:43.003] {
[10:51:43.003]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.003]     "# expression in do.call(), because function called uses '...'  "
[10:51:43.003]     "# as a global variable                                         "
[10:51:43.003]     do.call(function(...) {
[10:51:43.003]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.003]         "# without having an '...' argument. This means '...' is treated"
[10:51:43.003]         "# as a global variable. This may happen when FUN() is an       "
[10:51:43.003]         "# anonymous function.                                          "
[10:51:43.003]         "#                                                              "
[10:51:43.003]         "# If an anonymous function, we will make sure to restore the   "
[10:51:43.003]         "# function environment of FUN() to the calling environment.    "
[10:51:43.003]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.003]         "# global environment, which is where globals are written.      "
[10:51:43.003]         penv <- env <- environment(...future.FUN)
[10:51:43.003]         repeat {
[10:51:43.003]             if (identical(env, globalenv()) || identical(env, 
[10:51:43.003]                 emptyenv())) 
[10:51:43.003]                 break
[10:51:43.003]             penv <- env
[10:51:43.003]             env <- parent.env(env)
[10:51:43.003]         }
[10:51:43.003]         if (identical(penv, globalenv())) {
[10:51:43.003]             environment(...future.FUN) <- environment()
[10:51:43.003]         }
[10:51:43.003]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.003]             !isNamespace(penv)) {
[10:51:43.003]             parent.env(penv) <- environment()
[10:51:43.003]         }
[10:51:43.003]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.003]         {
[10:51:43.003]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.003]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.003]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.003]                 on.exit(options(oopts), add = TRUE)
[10:51:43.003]             }
[10:51:43.003]             {
[10:51:43.003]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.003]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.003]                   ...future.FUN(...future.X_jj, ...)
[10:51:43.003]                 })
[10:51:43.003]             }
[10:51:43.003]         }
[10:51:43.003]     }, args = future.call.arguments)
[10:51:43.003] }
[10:51:43.003] Lazy evaluation: FALSE
[10:51:43.003] Asynchronous evaluation: TRUE
[10:51:43.003] Local evaluation: TRUE
[10:51:43.003] Environment: R_GlobalEnv
[10:51:43.003] Capture standard output: TRUE
[10:51:43.003] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:43.003] Immediate condition classes: ‘immediateCondition’
[10:51:43.003] Globals: 11 objects totaling 12.31 KiB (function ‘...future.FUN’ of 4.06 KiB, function ‘x_FUN’ of 35 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:43.003] Packages: 1 packages (‘future.apply’)
[10:51:43.003] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:43.003] Resolved: FALSE
[10:51:43.003] Value: <not collected>
[10:51:43.003] Conditions captured: <none>
[10:51:43.003] Early signaling: FALSE
[10:51:43.003] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:43.003] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.015] Chunk #2 of 2 ... DONE
[10:51:43.015] Launching 2 futures (chunks) ... DONE
[10:51:43.015] Resolving 2 futures (chunks) ...
[10:51:43.016] |  :  .  |  :  .  |  :  .  |  :  .  value() on list ...
[10:51:43.016] |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:51:43.016] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 2
[10:51:43.016] |  :  .  |  :  .  |  :  .  |  :  .  |  
[10:51:43.016] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 2
[10:51:43.016] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:51:43.016] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:43.016] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:43.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:43.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:43.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:43.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:43.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:43.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 5
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num 1
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num 1.41
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num 1.73
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num 2
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num 2.24
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66393
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:43.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:43.029] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:43.029] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:43.029] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:43.029] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:43.030] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=1
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #1
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:43.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:43.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:43.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:43.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:51:43.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:43.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:43.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:43.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:51:43.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:51:43.035] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:51:43.035] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:51:43.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:43.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:43.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:43.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:43.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 5
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num 2.45
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num 2.65
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num 2.83
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num 3
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num 3.16
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66394
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:43.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:43.058] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:43.058] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:43.058] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:43.058] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:43.058] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:43.058] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:43.058] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:43.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:43.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:43.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:43.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:43.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:43.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:43.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:43.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:51:43.063] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ...
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:43.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:43.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:43.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:43.065] |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:51:43.065] |  :  .  |  :  .  |  :  .  |  :  .  value() on list ... done
[10:51:43.065]  - Number of value chunks collected: 2
[10:51:43.065] Resolving 2 futures (chunks) ... DONE
[10:51:43.065] Reducing values from 2 chunks ...
[10:51:43.065]  - Number of values collected after concatenation: 10
[10:51:43.065]  - Number of values expected: 10
[10:51:43.065] Reducing values from 2 chunks ... DONE
[10:51:43.065] future_lapply() ... DONE
 num [1:10] 1 1.41 1.73 2 2.24 ...
 num [1:2, 1:10] 1 1 2 4 3 9 4 16 5 25 ...
[10:51:43.066] future_lapply() ...
[10:51:43.068] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.068] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:43.069] |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.069] Number of chunks: 2
[10:51:43.069] getGlobalsAndPackagesXApply() ...
[10:51:43.069]  - future.globals: TRUE
[10:51:43.069] |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:43.069] |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:43.073] |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [18] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘c’, ‘^’
[10:51:43.073] |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:43.074] |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:43.074] |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:43.074] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:43.074] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:43.075] |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:43.075] |  :  .  |  :  .  |  :  .  |  :  .  |  The total size of the 7 globals is 13.34 KiB (13657 bytes)
[10:51:43.075] |  :  .  |  :  .  |  :  .  |  :  .  |  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.34 KiB The three largest globals are ‘FUN’ (4.89 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:43.075] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.076] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.076] |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:43.076] |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [1] ‘future.apply’
[10:51:43.076] |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:43.076]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:43.076]  - needed namespaces: [n=1] ‘future.apply’
[10:51:43.076] Finding globals ... DONE
[10:51:43.076]  - use_args: TRUE
[10:51:43.076]  - Getting '...' globals ...
[10:51:43.077] |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:43.077] |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:51:43.077] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1
[10:51:43.077] |  :  .  |  :  .  |  :  .  |  :  .  |  elements: ‘...’
[10:51:43.077] |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is DotDotDotList
[10:51:43.077] |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:51:43.077] |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:51:43.077] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:51:43.078] |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:43.078]    - '...' content: [n=0] 
[10:51:43.078] List of 1
[10:51:43.078]  $ ...: list()
[10:51:43.078]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:43.078]  - attr(*, "where")=List of 1
[10:51:43.078]   ..$ ...:<environment: 0x55d466219e98> 
[10:51:43.078]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:43.078]  - attr(*, "resolved")= logi TRUE
[10:51:43.078]  - attr(*, "total_size")= num NA
[10:51:43.080]  - Getting '...' globals ... DONE
[10:51:43.080] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:43.081] List of 8
[10:51:43.081]  $ ...future.FUN:function (x, ...)  
[10:51:43.081]  $ x_FUN        :function (x)  
[10:51:43.081]  $ times        : int 2
[10:51:43.081]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:43.081]  $ stop_if_not  :function (...)  
[10:51:43.081]  $ dim          : NULL
[10:51:43.081]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:43.081]  $ ...          : list()
[10:51:43.081]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:43.081]  - attr(*, "where")=List of 8
[10:51:43.081]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:43.081]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:43.081]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:43.081]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:43.081]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:43.081]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:43.081]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:43.081]   ..$ ...          :<environment: 0x55d466219e98> 
[10:51:43.081]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:43.081]  - attr(*, "resolved")= logi FALSE
[10:51:43.081]  - attr(*, "total_size")= num 24454
[10:51:43.088] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:43.088] getGlobalsAndPackagesXApply() ... DONE
[10:51:43.088] Number of futures (= number of chunks): 2
[10:51:43.088] Launching 2 futures (chunks) ...
[10:51:43.089] Chunk #1 of 2 ...
[10:51:43.089]  - Finding globals in 'X' for chunk #1 ...
[10:51:43.089] |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:43.089] |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:43.089] |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [0] 
[10:51:43.089] |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:43.089] |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [0] <none>
[10:51:43.089] |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] <none>
[10:51:43.090] |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:43.090]    + additional globals found: [n=0] 
[10:51:43.090]    + additional namespaces needed: [n=0] 
[10:51:43.090]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:43.090]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:43.090]  - seeds: <none>
[10:51:43.090]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.090] |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:43.090] |  :  .  |  :  .  |  :  .  |  :  .  |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.090] |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:43.090] |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  {
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          "#                                                              "
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          repeat {
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :                  emptyenv())) 
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :                  break
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              penv <- env
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          {
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              {
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :                  })
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  }
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:43.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:43.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘future.apply’
[10:51:43.092] |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:43.092] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.092] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.092] |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.092] |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [1] ‘future.apply’
[10:51:43.092] |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:43.093] |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:43.093] |  :  .  |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:51:43.093] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.093] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.093] |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:51:43.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:51:43.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:43.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:51:43.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:43.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:43.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:51:43.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:51:43.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:43.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:51:43.097] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:51:43.175] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:51:43.176] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:51:43.176] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:43.176] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:51:43.176] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:51:43.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:51:43.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:51:43.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:43.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:51:43.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:51:43.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:43.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:43.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:43.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:43.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:51:43.178] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.178] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:43.178] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.178] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:43.178] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:43.178] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:51:43.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:43.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:51:43.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:43.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:43.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:51:43.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:51:43.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:51:43.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:51:43.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:43.180] |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:43.180] Created future:
[10:51:43.181] |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:43.181] |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:43.181] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:43.181] |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:43.192] |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:43.180] MultisessionFuture:
[10:51:43.180] Label: ‘future_vapply-1’
[10:51:43.180] Expression:
[10:51:43.180] {
[10:51:43.180]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.180]     "# expression in do.call(), because function called uses '...'  "
[10:51:43.180]     "# as a global variable                                         "
[10:51:43.180]     do.call(function(...) {
[10:51:43.180]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.180]         "# without having an '...' argument. This means '...' is treated"
[10:51:43.180]         "# as a global variable. This may happen when FUN() is an       "
[10:51:43.180]         "# anonymous function.                                          "
[10:51:43.180]         "#                                                              "
[10:51:43.180]         "# If an anonymous function, we will make sure to restore the   "
[10:51:43.180]         "# function environment of FUN() to the calling environment.    "
[10:51:43.180]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.180]         "# global environment, which is where globals are written.      "
[10:51:43.180]         penv <- env <- environment(...future.FUN)
[10:51:43.180]         repeat {
[10:51:43.180]             if (identical(env, globalenv()) || identical(env, 
[10:51:43.180]                 emptyenv())) 
[10:51:43.180]                 break
[10:51:43.180]             penv <- env
[10:51:43.180]             env <- parent.env(env)
[10:51:43.180]         }
[10:51:43.180]         if (identical(penv, globalenv())) {
[10:51:43.180]             environment(...future.FUN) <- environment()
[10:51:43.180]         }
[10:51:43.180]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.180]             !isNamespace(penv)) {
[10:51:43.180]             parent.env(penv) <- environment()
[10:51:43.180]         }
[10:51:43.180]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.180]         {
[10:51:43.180]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.180]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.180]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.180]                 on.exit(options(oopts), add = TRUE)
[10:51:43.180]             }
[10:51:43.180]             {
[10:51:43.180]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.180]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.180]                   ...future.FUN(...future.X_jj, ...)
[10:51:43.180]                 })
[10:51:43.180]             }
[10:51:43.180]         }
[10:51:43.180]     }, args = future.call.arguments)
[10:51:43.180] }
[10:51:43.180] Lazy evaluation: FALSE
[10:51:43.180] Asynchronous evaluation: TRUE
[10:51:43.180] Local evaluation: TRUE
[10:51:43.180] Environment: R_GlobalEnv
[10:51:43.180] Capture standard output: TRUE
[10:51:43.180] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:43.180] Immediate condition classes: ‘immediateCondition’
[10:51:43.180] Globals: 11 objects totaling 13.57 KiB (function ‘...future.FUN’ of 4.88 KiB, function ‘x_FUN’ of 483 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:43.180] Packages: 1 packages (‘future.apply’)
[10:51:43.180] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:43.180] Resolved: FALSE
[10:51:43.180] Value: <not collected>
[10:51:43.180] Conditions captured: <none>
[10:51:43.180] Early signaling: FALSE
[10:51:43.180] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:43.180] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.192] Chunk #1 of 2 ... DONE
[10:51:43.192] Chunk #2 of 2 ...
[10:51:43.192]  - Finding globals in 'X' for chunk #2 ...
[10:51:43.193] |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:43.193] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:43.193] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:51:43.193] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:43.193] |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [0] <none>
[10:51:43.193] |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [0] <none>
[10:51:43.193] |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:43.193]    + additional globals found: [n=0] 
[10:51:43.193]    + additional namespaces needed: [n=0] 
[10:51:43.194]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:43.194]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:43.194]  - seeds: <none>
[10:51:43.194]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  {
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "#                                                              "
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          repeat {
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  break
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              penv <- env
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          {
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              {
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  })
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:43.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  }
[10:51:43.195] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:43.195] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:43.195] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘future.apply’
[10:51:43.196] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘future.apply’
[10:51:43.196] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:43.196] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.196] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.196] |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.196] |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:43.196] |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:43.197] |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:51:43.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:51:43.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:43.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:51:43.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:43.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:43.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:43.199] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:43.199] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:43.199] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:43.199] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:51:43.199] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:51:43.199] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.199] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:43.200] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:43.200] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.200] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:51:43.200] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:51:43.200] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.200] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:43.200] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:43.200] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.200] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 2
[10:51:43.200] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:43.278] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:51:43.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:51:43.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:43.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:43.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:43.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:43.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:43.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:43.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:51:43.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:43.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:43.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:43.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:43.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:43.281] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:43.281] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.281] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:43.281] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.281] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:43.281] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:43.281] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:51:43.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:43.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:51:43.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:51:43.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:43.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:43.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:43.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:43.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:51:43.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.283] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:43.283] |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:43.283] Created future:
[10:51:43.284] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:43.284] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:43.284] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:43.284] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:43.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:43.283] MultisessionFuture:
[10:51:43.283] Label: ‘future_vapply-2’
[10:51:43.283] Expression:
[10:51:43.283] {
[10:51:43.283]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.283]     "# expression in do.call(), because function called uses '...'  "
[10:51:43.283]     "# as a global variable                                         "
[10:51:43.283]     do.call(function(...) {
[10:51:43.283]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.283]         "# without having an '...' argument. This means '...' is treated"
[10:51:43.283]         "# as a global variable. This may happen when FUN() is an       "
[10:51:43.283]         "# anonymous function.                                          "
[10:51:43.283]         "#                                                              "
[10:51:43.283]         "# If an anonymous function, we will make sure to restore the   "
[10:51:43.283]         "# function environment of FUN() to the calling environment.    "
[10:51:43.283]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.283]         "# global environment, which is where globals are written.      "
[10:51:43.283]         penv <- env <- environment(...future.FUN)
[10:51:43.283]         repeat {
[10:51:43.283]             if (identical(env, globalenv()) || identical(env, 
[10:51:43.283]                 emptyenv())) 
[10:51:43.283]                 break
[10:51:43.283]             penv <- env
[10:51:43.283]             env <- parent.env(env)
[10:51:43.283]         }
[10:51:43.283]         if (identical(penv, globalenv())) {
[10:51:43.283]             environment(...future.FUN) <- environment()
[10:51:43.283]         }
[10:51:43.283]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.283]             !isNamespace(penv)) {
[10:51:43.283]             parent.env(penv) <- environment()
[10:51:43.283]         }
[10:51:43.283]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.283]         {
[10:51:43.283]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.283]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.283]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.283]                 on.exit(options(oopts), add = TRUE)
[10:51:43.283]             }
[10:51:43.283]             {
[10:51:43.283]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.283]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.283]                   ...future.FUN(...future.X_jj, ...)
[10:51:43.283]                 })
[10:51:43.283]             }
[10:51:43.283]         }
[10:51:43.283]     }, args = future.call.arguments)
[10:51:43.283] }
[10:51:43.283] Lazy evaluation: FALSE
[10:51:43.283] Asynchronous evaluation: TRUE
[10:51:43.283] Local evaluation: TRUE
[10:51:43.283] Environment: R_GlobalEnv
[10:51:43.283] Capture standard output: TRUE
[10:51:43.283] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:43.283] Immediate condition classes: ‘immediateCondition’
[10:51:43.283] Globals: 11 objects totaling 13.57 KiB (function ‘...future.FUN’ of 4.88 KiB, function ‘x_FUN’ of 483 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:43.283] Packages: 1 packages (‘future.apply’)
[10:51:43.283] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:43.283] Resolved: FALSE
[10:51:43.283] Value: <not collected>
[10:51:43.283] Conditions captured: <none>
[10:51:43.283] Early signaling: FALSE
[10:51:43.283] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:43.283] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.295] Chunk #2 of 2 ... DONE
[10:51:43.295] Launching 2 futures (chunks) ... DONE
[10:51:43.295] Resolving 2 futures (chunks) ...
[10:51:43.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value() on list ...
[10:51:43.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  recursive: 0
[10:51:43.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 2
[10:51:43.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  
[10:51:43.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:51:43.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:51:43.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:43.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:43.297] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:43.297] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:43.297] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:43.297] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:43.297] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:43.297] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:51:43.297] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 5
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:2] 1 1
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:2] 2 4
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:2] 3 9
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:2] 4 16
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:2] 5 25
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 66393
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:43.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:51:43.309] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:51:43.309] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:43.309] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:51:43.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:43.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:43.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:51:43.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:43.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:43.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:51:43.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=1
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:51:43.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:43.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:43.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:43.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:51:43.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:43.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:43.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:43.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 1)
[10:51:43.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:51:43.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:51:43.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:43.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:43.316] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:43.316] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:43.316] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:43.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:43.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:51:43.337] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:51:43.337] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:51:43.337] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:43.337] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:43.337] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:43.338] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:43.338] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:43.338] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:43.338] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:43.338] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:51:43.338] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 5
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:2] 6 36
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:2] 7 49
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:2] 8 64
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:2] 9 81
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:2] 10 100
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 66394
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:43.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:51:43.352] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:51:43.352] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:51:43.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:43.356] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:43.356] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:43.356] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:43.356] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.356] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.356] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.356] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.356] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.356] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.356] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:43.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 2)
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:43.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:43.359] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:43.359] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:43.359] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:43.359] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:43.359] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:43.359] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:51:43.359] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value() on list ... done
[10:51:43.359]  - Number of value chunks collected: 2
[10:51:43.359] Resolving 2 futures (chunks) ... DONE
[10:51:43.359] Reducing values from 2 chunks ...
[10:51:43.359]  - Number of values collected after concatenation: 10
[10:51:43.360]  - Number of values expected: 10
[10:51:43.360] Reducing values from 2 chunks ... DONE
[10:51:43.360] future_lapply() ... DONE
 num [1:2, 1:10] 1 1 2 4 3 9 4 16 5 25 ...
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
[10:51:43.361] future_lapply() ...
[10:51:43.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:43.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.363] Number of chunks: 2
[10:51:43.363] getGlobalsAndPackagesXApply() ...
[10:51:43.363]  - future.globals: TRUE
[10:51:43.364] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:43.364] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:43.367] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘matrix’
[10:51:43.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:43.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:43.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:43.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:43.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [2] ‘base’, ‘future.apply’
[10:51:43.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:43.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  The total size of the 7 globals is 13.59 KiB (13914 bytes)
[10:51:43.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.59 KiB The three largest globals are ‘FUN’ (5.06 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:43.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:43.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [1] ‘future.apply’
[10:51:43.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:43.370]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:43.370]  - needed namespaces: [n=1] ‘future.apply’
[10:51:43.370] Finding globals ... DONE
[10:51:43.370]  - use_args: TRUE
[10:51:43.370]  - Getting '...' globals ...
[10:51:43.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:43.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  recursive: 0
[10:51:43.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 1
[10:51:43.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  elements: ‘...’
[10:51:43.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is DotDotDotList
[10:51:43.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve(obj, ...) ...
[10:51:43.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve(obj, ...) ... done
[10:51:43.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:51:43.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:43.372]    - '...' content: [n=0] 
[10:51:43.372] List of 1
[10:51:43.372]  $ ...: list()
[10:51:43.372]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:43.372]  - attr(*, "where")=List of 1
[10:51:43.372]   ..$ ...:<environment: 0x55d464e2af48> 
[10:51:43.372]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:43.372]  - attr(*, "resolved")= logi TRUE
[10:51:43.372]  - attr(*, "total_size")= num NA
[10:51:43.374]  - Getting '...' globals ... DONE
[10:51:43.374] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:43.374] List of 8
[10:51:43.374]  $ ...future.FUN:function (x, ...)  
[10:51:43.374]  $ x_FUN        :function (x)  
[10:51:43.374]  $ times        : int 4
[10:51:43.374]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:43.374]  $ stop_if_not  :function (...)  
[10:51:43.374]  $ dim          : int [1:2] 2 2
[10:51:43.374]  $ valid_types  : chr [1:2] "logical" "integer"
[10:51:43.374]  $ ...          : list()
[10:51:43.374]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:43.374]  - attr(*, "where")=List of 8
[10:51:43.374]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:43.374]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:43.374]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:43.374]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:43.374]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:43.374]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:43.374]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:43.374]   ..$ ...          :<environment: 0x55d464e2af48> 
[10:51:43.374]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:43.374]  - attr(*, "resolved")= logi FALSE
[10:51:43.374]  - attr(*, "total_size")= num 24886
[10:51:43.380] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:43.380] getGlobalsAndPackagesXApply() ... DONE
[10:51:43.380] Number of futures (= number of chunks): 2
[10:51:43.380] Launching 2 futures (chunks) ...
[10:51:43.381] Chunk #1 of 2 ...
[10:51:43.381]  - Finding globals in 'X' for chunk #1 ...
[10:51:43.381] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:43.381] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:43.381] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:51:43.381] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:43.381] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:51:43.381] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:51:43.381] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:43.382]    + additional globals found: [n=0] 
[10:51:43.382]    + additional namespaces needed: [n=0] 
[10:51:43.382]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:43.382]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:43.382]  - seeds: <none>
[10:51:43.382]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:43.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:43.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "#                                                              "
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          repeat {
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  emptyenv())) 
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  break
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              penv <- env
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              env <- parent.env(env)
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              {
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  })
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:43.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:43.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘future.apply’
[10:51:43.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:43.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [1] ‘future.apply’
[10:51:43.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:43.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:43.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:51:43.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:43.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:51:43.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:43.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:43.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:43.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:43.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:43.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:51:43.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:43.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:51:43.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:43.467] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:43.468] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:43.468] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:43.468] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:51:43.468] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:43.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:43.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:51:43.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:43.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:43.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:43.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:43.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:43.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:43.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:43.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:43.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:51:43.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:51:43.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:43.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:43.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:43.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:51:43.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:43.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:43.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:51:43.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:51:43.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:43.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:43.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:43.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:43.472] Created future:
[10:51:43.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:43.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:43.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:43.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:43.484] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:43.472] MultisessionFuture:
[10:51:43.472] Label: ‘future_vapply-1’
[10:51:43.472] Expression:
[10:51:43.472] {
[10:51:43.472]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.472]     "# expression in do.call(), because function called uses '...'  "
[10:51:43.472]     "# as a global variable                                         "
[10:51:43.472]     do.call(function(...) {
[10:51:43.472]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.472]         "# without having an '...' argument. This means '...' is treated"
[10:51:43.472]         "# as a global variable. This may happen when FUN() is an       "
[10:51:43.472]         "# anonymous function.                                          "
[10:51:43.472]         "#                                                              "
[10:51:43.472]         "# If an anonymous function, we will make sure to restore the   "
[10:51:43.472]         "# function environment of FUN() to the calling environment.    "
[10:51:43.472]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.472]         "# global environment, which is where globals are written.      "
[10:51:43.472]         penv <- env <- environment(...future.FUN)
[10:51:43.472]         repeat {
[10:51:43.472]             if (identical(env, globalenv()) || identical(env, 
[10:51:43.472]                 emptyenv())) 
[10:51:43.472]                 break
[10:51:43.472]             penv <- env
[10:51:43.472]             env <- parent.env(env)
[10:51:43.472]         }
[10:51:43.472]         if (identical(penv, globalenv())) {
[10:51:43.472]             environment(...future.FUN) <- environment()
[10:51:43.472]         }
[10:51:43.472]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.472]             !isNamespace(penv)) {
[10:51:43.472]             parent.env(penv) <- environment()
[10:51:43.472]         }
[10:51:43.472]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.472]         {
[10:51:43.472]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.472]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.472]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.472]                 on.exit(options(oopts), add = TRUE)
[10:51:43.472]             }
[10:51:43.472]             {
[10:51:43.472]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.472]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.472]                   ...future.FUN(...future.X_jj, ...)
[10:51:43.472]                 })
[10:51:43.472]             }
[10:51:43.472]         }
[10:51:43.472]     }, args = future.call.arguments)
[10:51:43.472] }
[10:51:43.472] Lazy evaluation: FALSE
[10:51:43.472] Asynchronous evaluation: TRUE
[10:51:43.472] Local evaluation: TRUE
[10:51:43.472] Environment: R_GlobalEnv
[10:51:43.472] Capture standard output: TRUE
[10:51:43.472] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:43.472] Immediate condition classes: ‘immediateCondition’
[10:51:43.472] Globals: 11 objects totaling 13.82 KiB (function ‘...future.FUN’ of 5.05 KiB, function ‘x_FUN’ of 567 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:43.472] Packages: 1 packages (‘future.apply’)
[10:51:43.472] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:43.472] Resolved: FALSE
[10:51:43.472] Value: <not collected>
[10:51:43.472] Conditions captured: <none>
[10:51:43.472] Early signaling: FALSE
[10:51:43.472] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:43.472] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.484] Chunk #1 of 2 ... DONE
[10:51:43.485] Chunk #2 of 2 ...
[10:51:43.485]  - Finding globals in 'X' for chunk #2 ...
[10:51:43.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:43.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:43.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [0] 
[10:51:43.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:43.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [0] <none>
[10:51:43.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] <none>
[10:51:43.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:43.486]    + additional globals found: [n=0] 
[10:51:43.486]    + additional namespaces needed: [n=0] 
[10:51:43.486]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:43.486]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:43.486]  - seeds: <none>
[10:51:43.486]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:43.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  {
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "#                                                              "
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          repeat {
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  emptyenv())) 
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  break
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              penv <- env
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          {
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              {
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  })
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  }
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:43.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:43.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:43.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘future.apply’
[10:51:43.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:43.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [1] ‘future.apply’
[10:51:43.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:43.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:43.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:51:43.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:51:43.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:51:43.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:43.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:51:43.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:43.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:51:43.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:43.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:43.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:51:43.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:51:43.572] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:51:43.572] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:51:43.572] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:43.572] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:51:43.572] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:51:43.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:51:43.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:51:43.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:43.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:51:43.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:51:43.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:43.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:43.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:43.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:43.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:51:43.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:43.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:43.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:43.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:51:43.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:43.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:51:43.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:51:43.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:43.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:51:43.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:51:43.576] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:51:43.576] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:51:43.576] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.576] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:43.576] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:43.576] Created future:
[10:51:43.577] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:43.578] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:43.578] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:43.578] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:43.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:43.576] MultisessionFuture:
[10:51:43.576] Label: ‘future_vapply-2’
[10:51:43.576] Expression:
[10:51:43.576] {
[10:51:43.576]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.576]     "# expression in do.call(), because function called uses '...'  "
[10:51:43.576]     "# as a global variable                                         "
[10:51:43.576]     do.call(function(...) {
[10:51:43.576]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.576]         "# without having an '...' argument. This means '...' is treated"
[10:51:43.576]         "# as a global variable. This may happen when FUN() is an       "
[10:51:43.576]         "# anonymous function.                                          "
[10:51:43.576]         "#                                                              "
[10:51:43.576]         "# If an anonymous function, we will make sure to restore the   "
[10:51:43.576]         "# function environment of FUN() to the calling environment.    "
[10:51:43.576]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.576]         "# global environment, which is where globals are written.      "
[10:51:43.576]         penv <- env <- environment(...future.FUN)
[10:51:43.576]         repeat {
[10:51:43.576]             if (identical(env, globalenv()) || identical(env, 
[10:51:43.576]                 emptyenv())) 
[10:51:43.576]                 break
[10:51:43.576]             penv <- env
[10:51:43.576]             env <- parent.env(env)
[10:51:43.576]         }
[10:51:43.576]         if (identical(penv, globalenv())) {
[10:51:43.576]             environment(...future.FUN) <- environment()
[10:51:43.576]         }
[10:51:43.576]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.576]             !isNamespace(penv)) {
[10:51:43.576]             parent.env(penv) <- environment()
[10:51:43.576]         }
[10:51:43.576]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.576]         {
[10:51:43.576]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.576]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.576]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.576]                 on.exit(options(oopts), add = TRUE)
[10:51:43.576]             }
[10:51:43.576]             {
[10:51:43.576]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.576]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.576]                   ...future.FUN(...future.X_jj, ...)
[10:51:43.576]                 })
[10:51:43.576]             }
[10:51:43.576]         }
[10:51:43.576]     }, args = future.call.arguments)
[10:51:43.576] }
[10:51:43.576] Lazy evaluation: FALSE
[10:51:43.576] Asynchronous evaluation: TRUE
[10:51:43.576] Local evaluation: TRUE
[10:51:43.576] Environment: R_GlobalEnv
[10:51:43.576] Capture standard output: TRUE
[10:51:43.576] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:43.576] Immediate condition classes: ‘immediateCondition’
[10:51:43.576] Globals: 11 objects totaling 13.82 KiB (function ‘...future.FUN’ of 5.05 KiB, function ‘x_FUN’ of 567 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:43.576] Packages: 1 packages (‘future.apply’)
[10:51:43.576] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:43.576] Resolved: FALSE
[10:51:43.576] Value: <not collected>
[10:51:43.576] Conditions captured: <none>
[10:51:43.576] Early signaling: FALSE
[10:51:43.576] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:43.576] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.589] Chunk #2 of 2 ... DONE
[10:51:43.589] Launching 2 futures (chunks) ... DONE
[10:51:43.589] Resolving 2 futures (chunks) ...
[10:51:43.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value() on list ...
[10:51:43.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:51:43.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 2
[10:51:43.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  
[10:51:43.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 2
[10:51:43.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:51:43.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:43.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:43.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:43.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:43.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:43.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:51:43.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:43.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 5
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:2] 1 1 1 1
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:2] 2 2 2 2
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:2] 3 3 3 3
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:2] 4 4 4 4
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:2] 5 5 5 5
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 66393
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:43.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:51:43.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:43.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #1
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=1
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #1
[10:51:43.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:43.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:43.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:43.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:51:43.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:43.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:43.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:51:43.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 1 (resolved future 1)
[10:51:43.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:51:43.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:51:43.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:43.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:43.612] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:43.612] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:43.612] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 5
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:2] 6 6 6 6
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:2] 7 7 7 7
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:2] 8 8 8 8
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:2] 9 9 9 9
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:2] 10 10 10 10
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 66394
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:43.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:51:43.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:51:43.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:43.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:51:43.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #2
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:43.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:43.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:43.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:43.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:43.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:43.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:43.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:43.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:43.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:51:43.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:43.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:43.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:43.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:43.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:43.636] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:43.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:43.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:43.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:43.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 2)
[10:51:43.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:51:43.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ...
[10:51:43.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:51:43.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:43.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:43.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:43.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:43.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:43.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:43.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:43.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:43.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:43.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:43.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:51:43.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ... done
[10:51:43.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value() on list ... done
[10:51:43.638]  - Number of value chunks collected: 2
[10:51:43.639] Resolving 2 futures (chunks) ... DONE
[10:51:43.639] Reducing values from 2 chunks ...
[10:51:43.639]  - Number of values collected after concatenation: 10
[10:51:43.639]  - Number of values expected: 10
[10:51:43.639] Reducing values from 2 chunks ... DONE
[10:51:43.639] future_lapply() ... DONE
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 num [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
[10:51:43.640] future_lapply() ...
[10:51:43.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:43.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.643] Number of chunks: 2
[10:51:43.643] getGlobalsAndPackagesXApply() ...
[10:51:43.643]  - future.globals: TRUE
[10:51:43.643] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:43.643] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:43.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘matrix’
[10:51:43.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:43.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:43.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:43.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:43.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [2] ‘base’, ‘future.apply’
[10:51:43.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:43.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  The total size of the 7 globals is 13.63 KiB (13957 bytes)
[10:51:43.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.63 KiB The three largest globals are ‘FUN’ (5.09 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:43.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:43.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:43.650] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:43.650]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:43.650]  - needed namespaces: [n=1] ‘future.apply’
[10:51:43.650] Finding globals ... DONE
[10:51:43.650]  - use_args: TRUE
[10:51:43.650]  - Getting '...' globals ...
[10:51:43.650] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:43.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:51:43.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1
[10:51:43.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  elements: ‘...’
[10:51:43.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is DotDotDotList
[10:51:43.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:51:43.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:51:43.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:51:43.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:43.651]    - '...' content: [n=0] 
[10:51:43.651] List of 1
[10:51:43.651]  $ ...: list()
[10:51:43.651]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:43.651]  - attr(*, "where")=List of 1
[10:51:43.651]   ..$ ...:<environment: 0x55d46642a680> 
[10:51:43.651]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:43.651]  - attr(*, "resolved")= logi TRUE
[10:51:43.651]  - attr(*, "total_size")= num NA
[10:51:43.654]  - Getting '...' globals ... DONE
[10:51:43.654] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:43.654] List of 8
[10:51:43.654]  $ ...future.FUN:function (x, ...)  
[10:51:43.654]  $ x_FUN        :function (x)  
[10:51:43.654]  $ times        : int 4
[10:51:43.654]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:43.654]  $ stop_if_not  :function (...)  
[10:51:43.654]  $ dim          : int [1:2] 2 2
[10:51:43.654]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:43.654]  $ ...          : list()
[10:51:43.654]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:43.654]  - attr(*, "where")=List of 8
[10:51:43.654]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:43.654]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:43.654]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:43.654]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:43.654]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:43.654]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:43.654]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:43.654]   ..$ ...          :<environment: 0x55d46642a680> 
[10:51:43.654]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:43.654]  - attr(*, "resolved")= logi FALSE
[10:51:43.654]  - attr(*, "total_size")= num 24958
[10:51:43.661] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:43.661] getGlobalsAndPackagesXApply() ... DONE
[10:51:43.661] Number of futures (= number of chunks): 2
[10:51:43.662] Launching 2 futures (chunks) ...
[10:51:43.662] Chunk #1 of 2 ...
[10:51:43.662]  - Finding globals in 'X' for chunk #1 ...
[10:51:43.662] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:43.662] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:43.663] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:51:43.663] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:43.663] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [0] <none>
[10:51:43.663] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [0] <none>
[10:51:43.663] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:43.663]    + additional globals found: [n=0] 
[10:51:43.663]    + additional namespaces needed: [n=0] 
[10:51:43.663]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:43.664]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:43.664]  - seeds: <none>
[10:51:43.664]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.664] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:43.664] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.664] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:43.664] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  {
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "#                                                              "
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          repeat {
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  break
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              penv <- env
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          {
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              {
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  })
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  }
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:43.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:43.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘future.apply’
[10:51:43.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘future.apply’
[10:51:43.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:43.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:43.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:43.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:51:43.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:51:43.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:43.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:51:43.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:43.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:43.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:43.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:43.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:43.674] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:43.674] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:51:43.674] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:51:43.674] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.674] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:43.674] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:43.674] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.674] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:51:43.674] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:51:43.675] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.675] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:43.675] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:43.675] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.675] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:51:43.675] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:43.754] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:51:43.754] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:51:43.754] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:43.754] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:43.754] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:43.755] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:43.755] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:43.755] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:43.755] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:51:43.755] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:43.755] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:43.755] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:43.755] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:43.755] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:43.756] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:43.756] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.756] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:43.756] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.756] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:43.756] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:43.756] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:51:43.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:43.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:51:43.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:43.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:43.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:43.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:43.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:43.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:51:43.758] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.758] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:43.758] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:43.758] Created future:
[10:51:43.759] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:43.759] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:43.759] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:43.760] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:43.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:43.758] MultisessionFuture:
[10:51:43.758] Label: ‘future_vapply-1’
[10:51:43.758] Expression:
[10:51:43.758] {
[10:51:43.758]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.758]     "# expression in do.call(), because function called uses '...'  "
[10:51:43.758]     "# as a global variable                                         "
[10:51:43.758]     do.call(function(...) {
[10:51:43.758]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.758]         "# without having an '...' argument. This means '...' is treated"
[10:51:43.758]         "# as a global variable. This may happen when FUN() is an       "
[10:51:43.758]         "# anonymous function.                                          "
[10:51:43.758]         "#                                                              "
[10:51:43.758]         "# If an anonymous function, we will make sure to restore the   "
[10:51:43.758]         "# function environment of FUN() to the calling environment.    "
[10:51:43.758]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.758]         "# global environment, which is where globals are written.      "
[10:51:43.758]         penv <- env <- environment(...future.FUN)
[10:51:43.758]         repeat {
[10:51:43.758]             if (identical(env, globalenv()) || identical(env, 
[10:51:43.758]                 emptyenv())) 
[10:51:43.758]                 break
[10:51:43.758]             penv <- env
[10:51:43.758]             env <- parent.env(env)
[10:51:43.758]         }
[10:51:43.758]         if (identical(penv, globalenv())) {
[10:51:43.758]             environment(...future.FUN) <- environment()
[10:51:43.758]         }
[10:51:43.758]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.758]             !isNamespace(penv)) {
[10:51:43.758]             parent.env(penv) <- environment()
[10:51:43.758]         }
[10:51:43.758]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.758]         {
[10:51:43.758]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.758]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.758]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.758]                 on.exit(options(oopts), add = TRUE)
[10:51:43.758]             }
[10:51:43.758]             {
[10:51:43.758]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.758]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.758]                   ...future.FUN(...future.X_jj, ...)
[10:51:43.758]                 })
[10:51:43.758]             }
[10:51:43.758]         }
[10:51:43.758]     }, args = future.call.arguments)
[10:51:43.758] }
[10:51:43.758] Lazy evaluation: FALSE
[10:51:43.758] Asynchronous evaluation: TRUE
[10:51:43.758] Local evaluation: TRUE
[10:51:43.758] Environment: R_GlobalEnv
[10:51:43.758] Capture standard output: TRUE
[10:51:43.758] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:43.758] Immediate condition classes: ‘immediateCondition’
[10:51:43.758] Globals: 11 objects totaling 13.86 KiB (function ‘...future.FUN’ of 5.08 KiB, function ‘x_FUN’ of 567 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:43.758] Packages: 1 packages (‘future.apply’)
[10:51:43.758] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:43.758] Resolved: FALSE
[10:51:43.758] Value: <not collected>
[10:51:43.758] Conditions captured: <none>
[10:51:43.758] Early signaling: FALSE
[10:51:43.758] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:43.758] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.771] Chunk #1 of 2 ... DONE
[10:51:43.771] Chunk #2 of 2 ...
[10:51:43.771]  - Finding globals in 'X' for chunk #2 ...
[10:51:43.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:43.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:43.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:51:43.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:43.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:51:43.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:51:43.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:43.772]    + additional globals found: [n=0] 
[10:51:43.772]    + additional namespaces needed: [n=0] 
[10:51:43.772]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:43.772]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:43.772]  - seeds: <none>
[10:51:43.772]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "#                                                              "
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          repeat {
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  emptyenv())) 
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  break
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              penv <- env
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              env <- parent.env(env)
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              {
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  })
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:43.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:51:43.774] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:43.774] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:43.774] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘future.apply’
[10:51:43.774] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘future.apply’
[10:51:43.774] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:43.775] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.775] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.775] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.775] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [1] ‘future.apply’
[10:51:43.775] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:43.775] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:43.775] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:51:43.775] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.776] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.776] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:43.776] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:51:43.776] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:43.776] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:43.776] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:43.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:43.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:43.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:51:43.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:43.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:43.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:43.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:43.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:43.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:43.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:43.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:43.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:51:43.779] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:43.860] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:43.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:43.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:43.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:51:43.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:43.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:43.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:51:43.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:43.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:43.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:43.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:43.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:43.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:43.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:43.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:43.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:51:43.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:51:43.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:43.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:51:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:51:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:51:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:51:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:43.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:43.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:43.865] Created future:
[10:51:43.866] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:43.866] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:43.866] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:43.867] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:43.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:43.865] MultisessionFuture:
[10:51:43.865] Label: ‘future_vapply-2’
[10:51:43.865] Expression:
[10:51:43.865] {
[10:51:43.865]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.865]     "# expression in do.call(), because function called uses '...'  "
[10:51:43.865]     "# as a global variable                                         "
[10:51:43.865]     do.call(function(...) {
[10:51:43.865]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.865]         "# without having an '...' argument. This means '...' is treated"
[10:51:43.865]         "# as a global variable. This may happen when FUN() is an       "
[10:51:43.865]         "# anonymous function.                                          "
[10:51:43.865]         "#                                                              "
[10:51:43.865]         "# If an anonymous function, we will make sure to restore the   "
[10:51:43.865]         "# function environment of FUN() to the calling environment.    "
[10:51:43.865]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.865]         "# global environment, which is where globals are written.      "
[10:51:43.865]         penv <- env <- environment(...future.FUN)
[10:51:43.865]         repeat {
[10:51:43.865]             if (identical(env, globalenv()) || identical(env, 
[10:51:43.865]                 emptyenv())) 
[10:51:43.865]                 break
[10:51:43.865]             penv <- env
[10:51:43.865]             env <- parent.env(env)
[10:51:43.865]         }
[10:51:43.865]         if (identical(penv, globalenv())) {
[10:51:43.865]             environment(...future.FUN) <- environment()
[10:51:43.865]         }
[10:51:43.865]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.865]             !isNamespace(penv)) {
[10:51:43.865]             parent.env(penv) <- environment()
[10:51:43.865]         }
[10:51:43.865]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.865]         {
[10:51:43.865]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.865]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.865]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.865]                 on.exit(options(oopts), add = TRUE)
[10:51:43.865]             }
[10:51:43.865]             {
[10:51:43.865]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.865]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.865]                   ...future.FUN(...future.X_jj, ...)
[10:51:43.865]                 })
[10:51:43.865]             }
[10:51:43.865]         }
[10:51:43.865]     }, args = future.call.arguments)
[10:51:43.865] }
[10:51:43.865] Lazy evaluation: FALSE
[10:51:43.865] Asynchronous evaluation: TRUE
[10:51:43.865] Local evaluation: TRUE
[10:51:43.865] Environment: R_GlobalEnv
[10:51:43.865] Capture standard output: TRUE
[10:51:43.865] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:43.865] Immediate condition classes: ‘immediateCondition’
[10:51:43.865] Globals: 11 objects totaling 13.86 KiB (function ‘...future.FUN’ of 5.08 KiB, function ‘x_FUN’ of 567 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:43.865] Packages: 1 packages (‘future.apply’)
[10:51:43.865] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:43.865] Resolved: FALSE
[10:51:43.865] Value: <not collected>
[10:51:43.865] Conditions captured: <none>
[10:51:43.865] Early signaling: FALSE
[10:51:43.865] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:43.865] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:43.878] Chunk #2 of 2 ... DONE
[10:51:43.878] Launching 2 futures (chunks) ... DONE
[10:51:43.878] Resolving 2 futures (chunks) ...
[10:51:43.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value() on list ...
[10:51:43.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:51:43.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 2
[10:51:43.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  
[10:51:43.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 2
[10:51:43.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:51:43.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:43.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:43.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:43.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 5
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2, 1:2] 1 1 1 1
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2, 1:2] 2 2 2 2
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2, 1:2] 3 3 3 3
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2, 1:2] 4 4 4 4
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2, 1:2] 5 5 5 5
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66393
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:43.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:43.892] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:43.892] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:51:43.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=1
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #1
[10:51:43.894] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:43.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:43.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:43.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:43.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:43.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:43.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:43.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:43.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:43.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:43.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:51:43.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:51:43.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:51:43.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:51:43.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:43.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:43.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:43.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:43.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 5
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2, 1:2] 6 6 6 6
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2, 1:2] 7 7 7 7
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2, 1:2] 8 8 8 8
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2, 1:2] 9 9 9 9
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2, 1:2] 10 10 10 10
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:43"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66394
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:43.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:43.920] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:43.920] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:51:43.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:43.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:43.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:43.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:43.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:43.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:43.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:43.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:43.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:43.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:43.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:43.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:43.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:43.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:51:43.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:51:43.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ...
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:43.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:43.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:43.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:51:43.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value() on list ... done
[10:51:43.930]  - Number of value chunks collected: 2
[10:51:43.930] Resolving 2 futures (chunks) ... DONE
[10:51:43.930] Reducing values from 2 chunks ...
[10:51:43.930]  - Number of values collected after concatenation: 10
[10:51:43.930]  - Number of values expected: 10
[10:51:43.930] Reducing values from 2 chunks ... DONE
[10:51:43.930] future_lapply() ... DONE
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 num [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:2] "A" "B"
  ..$ : NULL
[10:51:43.932] future_lapply() ...
[10:51:43.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:43.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.935] Number of chunks: 2
[10:51:43.935] getGlobalsAndPackagesXApply() ...
[10:51:43.935]  - future.globals: TRUE
[10:51:43.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:43.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:43.940] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [19] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘matrix’, ‘list’, ‘c’
[10:51:43.940] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:43.940] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:43.940] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:43.940] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:43.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [2] ‘base’, ‘future.apply’
[10:51:43.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:43.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  The total size of the 7 globals is 16.05 KiB (16436 bytes)
[10:51:43.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  The total size of the 7 globals exported for future expression (‘FUN()’) is 16.05 KiB The three largest globals are ‘FUN’ (6.71 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:43.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:43.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [1] ‘future.apply’
[10:51:43.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:43.942]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:43.943]  - needed namespaces: [n=1] ‘future.apply’
[10:51:43.943] Finding globals ... DONE
[10:51:43.943]  - use_args: TRUE
[10:51:43.943]  - Getting '...' globals ...
[10:51:43.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:43.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:51:43.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1
[10:51:43.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  elements: ‘...’
[10:51:43.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is DotDotDotList
[10:51:43.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:51:43.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:51:43.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:51:43.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:43.944]    - '...' content: [n=0] 
[10:51:43.944] List of 1
[10:51:43.944]  $ ...: list()
[10:51:43.944]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:43.944]  - attr(*, "where")=List of 1
[10:51:43.944]   ..$ ...:<environment: 0x55d4657c8e90> 
[10:51:43.944]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:43.944]  - attr(*, "resolved")= logi TRUE
[10:51:43.944]  - attr(*, "total_size")= num NA
[10:51:43.947]  - Getting '...' globals ... DONE
[10:51:43.947] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:43.947] List of 8
[10:51:43.947]  $ ...future.FUN:function (x, ...)  
[10:51:43.947]  $ x_FUN        :function (x)  
[10:51:43.947]  $ times        : int 4
[10:51:43.947]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:43.947]  $ stop_if_not  :function (...)  
[10:51:43.947]  $ dim          : int [1:2] 2 2
[10:51:43.947]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:43.947]  $ ...          : list()
[10:51:43.947]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:43.947]  - attr(*, "where")=List of 8
[10:51:43.947]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:43.947]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:43.947]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:43.947]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:43.947]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:43.947]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:43.947]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:43.947]   ..$ ...          :<environment: 0x55d4657c8e90> 
[10:51:43.947]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:43.947]  - attr(*, "resolved")= logi FALSE
[10:51:43.947]  - attr(*, "total_size")= num 29094
[10:51:43.953] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:43.953] getGlobalsAndPackagesXApply() ... DONE
[10:51:43.953] Number of futures (= number of chunks): 2
[10:51:43.953] Launching 2 futures (chunks) ...
[10:51:43.953] Chunk #1 of 2 ...
[10:51:43.953]  - Finding globals in 'X' for chunk #1 ...
[10:51:43.954] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:43.954] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:43.954] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [0] 
[10:51:43.954] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:43.954] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [0] <none>
[10:51:43.954] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] <none>
[10:51:43.954] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:43.954]    + additional globals found: [n=0] 
[10:51:43.955]    + additional namespaces needed: [n=0] 
[10:51:43.955]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:43.955]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:43.955]  - seeds: <none>
[10:51:43.955]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  {
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "#                                                              "
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          repeat {
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  emptyenv())) 
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  break
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              penv <- env
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          {
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              {
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  })
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:51:43.955] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  }
[10:51:43.956] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:43.956] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:43.956] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘future.apply’
[10:51:43.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘future.apply’
[10:51:43.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:43.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘future.apply’
[10:51:43.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:43.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:43.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [1] ‘future.apply’
[10:51:43.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:43.958] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:43.958] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:51:43.958] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:43.958] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:43.958] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:51:43.958] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:51:43.958] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:43.958] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:51:43.959] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:43.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:43.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:51:43.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:51:43.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:43.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:51:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:51:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:51:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:43.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:51:43.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:51:44.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:51:44.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:51:44.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:44.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:51:44.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:51:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:51:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:51:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:51:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:51:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:51:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:51:44.044] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:44.044] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:51:44.044] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:44.044] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:44.044] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:51:44.044] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:51:44.044] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:51:44.045] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:51:44.045] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.045] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:44.045] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:44.045] Created future:
[10:51:44.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:44.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:44.047] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:44.047] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:44.057] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:44.045] MultisessionFuture:
[10:51:44.045] Label: ‘future_vapply-1’
[10:51:44.045] Expression:
[10:51:44.045] {
[10:51:44.045]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.045]     "# expression in do.call(), because function called uses '...'  "
[10:51:44.045]     "# as a global variable                                         "
[10:51:44.045]     do.call(function(...) {
[10:51:44.045]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:44.045]         "# without having an '...' argument. This means '...' is treated"
[10:51:44.045]         "# as a global variable. This may happen when FUN() is an       "
[10:51:44.045]         "# anonymous function.                                          "
[10:51:44.045]         "#                                                              "
[10:51:44.045]         "# If an anonymous function, we will make sure to restore the   "
[10:51:44.045]         "# function environment of FUN() to the calling environment.    "
[10:51:44.045]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:44.045]         "# global environment, which is where globals are written.      "
[10:51:44.045]         penv <- env <- environment(...future.FUN)
[10:51:44.045]         repeat {
[10:51:44.045]             if (identical(env, globalenv()) || identical(env, 
[10:51:44.045]                 emptyenv())) 
[10:51:44.045]                 break
[10:51:44.045]             penv <- env
[10:51:44.045]             env <- parent.env(env)
[10:51:44.045]         }
[10:51:44.045]         if (identical(penv, globalenv())) {
[10:51:44.045]             environment(...future.FUN) <- environment()
[10:51:44.045]         }
[10:51:44.045]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:44.045]             !isNamespace(penv)) {
[10:51:44.045]             parent.env(penv) <- environment()
[10:51:44.045]         }
[10:51:44.045]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:44.045]         {
[10:51:44.045]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.045]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.045]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.045]                 on.exit(options(oopts), add = TRUE)
[10:51:44.045]             }
[10:51:44.045]             {
[10:51:44.045]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.045]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.045]                   ...future.FUN(...future.X_jj, ...)
[10:51:44.045]                 })
[10:51:44.045]             }
[10:51:44.045]         }
[10:51:44.045]     }, args = future.call.arguments)
[10:51:44.045] }
[10:51:44.045] Lazy evaluation: FALSE
[10:51:44.045] Asynchronous evaluation: TRUE
[10:51:44.045] Local evaluation: TRUE
[10:51:44.045] Environment: R_GlobalEnv
[10:51:44.045] Capture standard output: TRUE
[10:51:44.045] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:44.045] Immediate condition classes: ‘immediateCondition’
[10:51:44.045] Globals: 11 objects totaling 16.28 KiB (function ‘...future.FUN’ of 6.70 KiB, function ‘x_FUN’ of 1.36 KiB, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:44.045] Packages: 1 packages (‘future.apply’)
[10:51:44.045] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:44.045] Resolved: FALSE
[10:51:44.045] Value: <not collected>
[10:51:44.045] Conditions captured: <none>
[10:51:44.045] Early signaling: FALSE
[10:51:44.045] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:44.045] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.058] Chunk #1 of 2 ... DONE
[10:51:44.058] Chunk #2 of 2 ...
[10:51:44.058]  - Finding globals in 'X' for chunk #2 ...
[10:51:44.058] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:44.058] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:44.058] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:51:44.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:44.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [0] <none>
[10:51:44.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [0] <none>
[10:51:44.059] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:44.059]    + additional globals found: [n=0] 
[10:51:44.059]    + additional namespaces needed: [n=0] 
[10:51:44.059]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:44.059]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:44.059]  - seeds: <none>
[10:51:44.059]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  {
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "#                                                              "
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          repeat {
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  break
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              penv <- env
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          {
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              {
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  })
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:44.060] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  }
[10:51:44.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:44.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:44.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘future.apply’
[10:51:44.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘future.apply’
[10:51:44.061] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:44.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:44.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:44.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:44.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:44.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:51:44.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:51:44.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:44.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:51:44.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:44.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:44.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:51:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:51:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:44.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:51:44.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:51:44.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:44.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:44.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 2
[10:51:44.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:44.144] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:51:44.145] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:51:44.145] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:44.145] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:44.145] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:44.145] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:44.146] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:44.146] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:44.146] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:51:44.146] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:44.146] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:44.146] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:44.146] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:44.146] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:44.146] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:44.147] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.147] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:44.147] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.147] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:44.147] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:44.147] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:51:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:51:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:51:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:51:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.149] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:44.149] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:44.149] Created future:
[10:51:44.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:44.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:44.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:44.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:44.161] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:44.149] MultisessionFuture:
[10:51:44.149] Label: ‘future_vapply-2’
[10:51:44.149] Expression:
[10:51:44.149] {
[10:51:44.149]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.149]     "# expression in do.call(), because function called uses '...'  "
[10:51:44.149]     "# as a global variable                                         "
[10:51:44.149]     do.call(function(...) {
[10:51:44.149]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:44.149]         "# without having an '...' argument. This means '...' is treated"
[10:51:44.149]         "# as a global variable. This may happen when FUN() is an       "
[10:51:44.149]         "# anonymous function.                                          "
[10:51:44.149]         "#                                                              "
[10:51:44.149]         "# If an anonymous function, we will make sure to restore the   "
[10:51:44.149]         "# function environment of FUN() to the calling environment.    "
[10:51:44.149]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:44.149]         "# global environment, which is where globals are written.      "
[10:51:44.149]         penv <- env <- environment(...future.FUN)
[10:51:44.149]         repeat {
[10:51:44.149]             if (identical(env, globalenv()) || identical(env, 
[10:51:44.149]                 emptyenv())) 
[10:51:44.149]                 break
[10:51:44.149]             penv <- env
[10:51:44.149]             env <- parent.env(env)
[10:51:44.149]         }
[10:51:44.149]         if (identical(penv, globalenv())) {
[10:51:44.149]             environment(...future.FUN) <- environment()
[10:51:44.149]         }
[10:51:44.149]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:44.149]             !isNamespace(penv)) {
[10:51:44.149]             parent.env(penv) <- environment()
[10:51:44.149]         }
[10:51:44.149]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:44.149]         {
[10:51:44.149]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.149]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.149]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.149]                 on.exit(options(oopts), add = TRUE)
[10:51:44.149]             }
[10:51:44.149]             {
[10:51:44.149]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.149]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.149]                   ...future.FUN(...future.X_jj, ...)
[10:51:44.149]                 })
[10:51:44.149]             }
[10:51:44.149]         }
[10:51:44.149]     }, args = future.call.arguments)
[10:51:44.149] }
[10:51:44.149] Lazy evaluation: FALSE
[10:51:44.149] Asynchronous evaluation: TRUE
[10:51:44.149] Local evaluation: TRUE
[10:51:44.149] Environment: R_GlobalEnv
[10:51:44.149] Capture standard output: TRUE
[10:51:44.149] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:44.149] Immediate condition classes: ‘immediateCondition’
[10:51:44.149] Globals: 11 objects totaling 16.28 KiB (function ‘...future.FUN’ of 6.70 KiB, function ‘x_FUN’ of 1.36 KiB, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:44.149] Packages: 1 packages (‘future.apply’)
[10:51:44.149] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:44.149] Resolved: FALSE
[10:51:44.149] Value: <not collected>
[10:51:44.149] Conditions captured: <none>
[10:51:44.149] Early signaling: FALSE
[10:51:44.149] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:44.149] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.162] Chunk #2 of 2 ... DONE
[10:51:44.162] Launching 2 futures (chunks) ... DONE
[10:51:44.162] Resolving 2 futures (chunks) ...
[10:51:44.162] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value() on list ...
[10:51:44.162] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  recursive: 0
[10:51:44.162] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 2
[10:51:44.162] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  
[10:51:44.162] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:51:44.162] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:51:44.162] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:44.163] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:44.163] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:44.163] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:44.163] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:44.163] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 5
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2, 1:2] 1 1 1 1
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "a" "b"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "A" "B"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2, 1:2] 2 2 2 2
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "a" "b"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "A" "B"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2, 1:2] 3 3 3 3
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "a" "b"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "A" "B"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2, 1:2] 4 4 4 4
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "a" "b"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "A" "B"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2, 1:2] 5 5 5 5
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "a" "b"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "A" "B"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 66393
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:44.164] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:51:44.182] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:51:44.182] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:44.182] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:51:44.182] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:44.182] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:44.182] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:51:44.182] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:44.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=1
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:44.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:44.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:44.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:44.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:44.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 1)
[10:51:44.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:51:44.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:51:44.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:44.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:44.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:44.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:44.189] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:44.193] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:44.193] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:44.193] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 5
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2, 1:2] 6 6 6 6
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "a" "b"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "A" "B"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2, 1:2] 7 7 7 7
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "a" "b"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "A" "B"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2, 1:2] 8 8 8 8
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "a" "b"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "A" "B"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2, 1:2] 9 9 9 9
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "a" "b"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "A" "B"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2, 1:2] 10 10 10 10
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "a" "b"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "A" "B"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 66394
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:44.194] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:51:44.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:51:44.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:44.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:51:44.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:44.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:44.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 2)
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:44.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:44.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:44.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:44.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:44.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:44.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:44.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:44.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:44.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:51:44.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value() on list ... done
[10:51:44.216]  - Number of value chunks collected: 2
[10:51:44.217] Resolving 2 futures (chunks) ... DONE
[10:51:44.217] Reducing values from 2 chunks ...
[10:51:44.217]  - Number of values collected after concatenation: 10
[10:51:44.217]  - Number of values expected: 10
[10:51:44.217] Reducing values from 2 chunks ... DONE
[10:51:44.217] future_lapply() ... DONE
 int [1:2, 1:2, 1:10] 1 1 1 1 2 2 2 2 3 3 ...
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:2] "A" "B"
  ..$ : NULL
- From example(vapply) ...
[10:51:44.219] future_lapply() ...
[10:51:44.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:44.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.222] Number of chunks: 2
[10:51:44.222] getGlobalsAndPackagesXApply() ...
[10:51:44.222]  - future.globals: TRUE
[10:51:44.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:44.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:44.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [17] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘UseMethod’
[10:51:44.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:44.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:44.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:44.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:44.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:44.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:44.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  The total size of the 7 globals is 13.03 KiB (13339 bytes)
[10:51:44.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  The total size of the 7 globals exported for future expression (‘FUN()’) is 13.03 KiB The three largest globals are ‘FUN’ (4.75 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:44.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:44.229] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:44.229] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:44.229] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [2] ‘stats’, ‘future.apply’
[10:51:44.229] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:44.229]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:44.229]  - needed namespaces: [n=2] ‘stats’, ‘future.apply’
[10:51:44.229] Finding globals ... DONE
[10:51:44.229]  - use_args: TRUE
[10:51:44.229]  - Getting '...' globals ...
[10:51:44.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:44.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  recursive: 0
[10:51:44.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 1
[10:51:44.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  elements: ‘...’
[10:51:44.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is DotDotDotList
[10:51:44.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve(obj, ...) ...
[10:51:44.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve(obj, ...) ... done
[10:51:44.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:51:44.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:44.231]    - '...' content: [n=0] 
[10:51:44.231] List of 1
[10:51:44.231]  $ ...: list()
[10:51:44.231]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:44.231]  - attr(*, "where")=List of 1
[10:51:44.231]   ..$ ...:<environment: 0x55d466c1d3b0> 
[10:51:44.231]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:44.231]  - attr(*, "resolved")= logi TRUE
[10:51:44.231]  - attr(*, "total_size")= num NA
[10:51:44.233]  - Getting '...' globals ... DONE
[10:51:44.233] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:44.233] List of 8
[10:51:44.233]  $ ...future.FUN:function (x, ...)  
[10:51:44.233]  $ x_FUN        :function (x, ...)  
[10:51:44.233]  $ times        : int 5
[10:51:44.233]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:44.233]  $ stop_if_not  :function (...)  
[10:51:44.233]  $ dim          : NULL
[10:51:44.233]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:44.233]  $ ...          : list()
[10:51:44.233]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:44.233]  - attr(*, "where")=List of 8
[10:51:44.233]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:44.233]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:44.233]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:44.233]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:44.233]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:44.233]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:44.233]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:44.233]   ..$ ...          :<environment: 0x55d466c1d3b0> 
[10:51:44.233]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:44.233]  - attr(*, "resolved")= logi FALSE
[10:51:44.233]  - attr(*, "total_size")= num 24127
[10:51:44.239] Packages to be attached in all futures: [n=2] ‘stats’, ‘future.apply’
[10:51:44.239] getGlobalsAndPackagesXApply() ... DONE
[10:51:44.239] Number of futures (= number of chunks): 2
[10:51:44.239] Launching 2 futures (chunks) ...
[10:51:44.240] Chunk #1 of 2 ...
[10:51:44.240]  - Finding globals in 'X' for chunk #1 ...
[10:51:44.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:44.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:44.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:51:44.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:44.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:51:44.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:51:44.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:44.241]    + additional globals found: [n=0] 
[10:51:44.241]    + additional namespaces needed: [n=0] 
[10:51:44.241]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:44.241]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:44.241]  - seeds: <none>
[10:51:44.241]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:44.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:44.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "#                                                              "
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          repeat {
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  emptyenv())) 
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  break
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              penv <- env
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              env <- parent.env(env)
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              {
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  })
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:44.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:44.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [2] ‘stats’, ‘future.apply’
[10:51:44.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [2] ‘stats’, ‘future.apply’
[10:51:44.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:44.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:44.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:44.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [2] ‘stats’, ‘future.apply’
[10:51:44.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:44.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:44.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:51:44.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:44.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:51:44.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:44.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:44.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:44.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:44.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:44.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:51:44.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:44.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:44.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:44.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:44.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:44.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:44.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:44.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:44.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:51:44.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:44.330] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:44.330] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:44.330] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:44.330] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:51:44.330] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:44.331] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:44.331] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:51:44.331] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:44.331] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:44.331] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:44.331] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 2): ‘stats’, ‘future.apply’
[10:51:44.331] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:44.331] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:44.331] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:44.331] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:44.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:51:44.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:51:44.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:44.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:44.333] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:44.333] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:51:44.333] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:44.333] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:44.333] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:51:44.333] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:51:44.333] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:44.333] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:44.333] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.333] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:44.334] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:44.334] Created future:
[10:51:44.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:44.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:44.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:44.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:44.346] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:44.334] MultisessionFuture:
[10:51:44.334] Label: ‘future_vapply-1’
[10:51:44.334] Expression:
[10:51:44.334] {
[10:51:44.334]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.334]     "# expression in do.call(), because function called uses '...'  "
[10:51:44.334]     "# as a global variable                                         "
[10:51:44.334]     do.call(function(...) {
[10:51:44.334]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:44.334]         "# without having an '...' argument. This means '...' is treated"
[10:51:44.334]         "# as a global variable. This may happen when FUN() is an       "
[10:51:44.334]         "# anonymous function.                                          "
[10:51:44.334]         "#                                                              "
[10:51:44.334]         "# If an anonymous function, we will make sure to restore the   "
[10:51:44.334]         "# function environment of FUN() to the calling environment.    "
[10:51:44.334]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:44.334]         "# global environment, which is where globals are written.      "
[10:51:44.334]         penv <- env <- environment(...future.FUN)
[10:51:44.334]         repeat {
[10:51:44.334]             if (identical(env, globalenv()) || identical(env, 
[10:51:44.334]                 emptyenv())) 
[10:51:44.334]                 break
[10:51:44.334]             penv <- env
[10:51:44.334]             env <- parent.env(env)
[10:51:44.334]         }
[10:51:44.334]         if (identical(penv, globalenv())) {
[10:51:44.334]             environment(...future.FUN) <- environment()
[10:51:44.334]         }
[10:51:44.334]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:44.334]             !isNamespace(penv)) {
[10:51:44.334]             parent.env(penv) <- environment()
[10:51:44.334]         }
[10:51:44.334]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:44.334]         {
[10:51:44.334]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.334]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.334]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.334]                 on.exit(options(oopts), add = TRUE)
[10:51:44.334]             }
[10:51:44.334]             {
[10:51:44.334]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.334]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.334]                   ...future.FUN(...future.X_jj, ...)
[10:51:44.334]                 })
[10:51:44.334]             }
[10:51:44.334]         }
[10:51:44.334]     }, args = future.call.arguments)
[10:51:44.334] }
[10:51:44.334] Lazy evaluation: FALSE
[10:51:44.334] Asynchronous evaluation: TRUE
[10:51:44.334] Local evaluation: TRUE
[10:51:44.334] Environment: R_GlobalEnv
[10:51:44.334] Capture standard output: TRUE
[10:51:44.334] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:44.334] Immediate condition classes: ‘immediateCondition’
[10:51:44.334] Globals: 11 objects totaling 13.35 KiB (function ‘...future.FUN’ of 4.74 KiB, function ‘x_FUN’ of 311 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:44.334] Packages: 2 packages (‘stats’, ‘future.apply’)
[10:51:44.334] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:44.334] Resolved: FALSE
[10:51:44.334] Value: <not collected>
[10:51:44.334] Conditions captured: <none>
[10:51:44.334] Early signaling: FALSE
[10:51:44.334] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:44.334] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.346] Chunk #1 of 2 ... DONE
[10:51:44.346] Chunk #2 of 2 ...
[10:51:44.347]  - Finding globals in 'X' for chunk #2 ...
[10:51:44.347] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:44.347] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:44.347] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [0] 
[10:51:44.347] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:44.347] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [0] <none>
[10:51:44.347] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] <none>
[10:51:44.347] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:44.347]    + additional globals found: [n=0] 
[10:51:44.348]    + additional namespaces needed: [n=0] 
[10:51:44.348]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:44.348]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:44.348]  - seeds: <none>
[10:51:44.348]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  {
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "#                                                              "
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          repeat {
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  emptyenv())) 
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  break
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              penv <- env
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          {
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              {
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  })
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:51:44.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  }
[10:51:44.349] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:44.349] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:44.349] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [2] ‘stats’, ‘future.apply’
[10:51:44.350] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [2] ‘stats’, ‘future.apply’
[10:51:44.350] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:44.350] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:44.350] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:44.350] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.350] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [2] ‘stats’, ‘future.apply’
[10:51:44.350] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:44.351] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:44.351] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:51:44.351] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.351] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.351] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:51:44.351] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:51:44.351] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:44.351] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:51:44.352] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:44.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:44.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:51:44.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:51:44.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:44.353] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:51:44.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:44.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:44.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:51:44.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:51:44.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:44.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:44.354] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:51:44.355] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:51:44.438] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:51:44.439] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:51:44.439] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:44.439] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:51:44.439] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:51:44.440] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:51:44.440] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:51:44.440] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:44.440] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:51:44.440] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:51:44.440] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 2): ‘stats’, ‘future.apply’
[10:51:44.440] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:44.440] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:44.440] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:44.440] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:51:44.441] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.441] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:44.441] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.441] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:44.441] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:44.441] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:51:44.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:44.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:51:44.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:51:44.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:44.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:51:44.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:51:44.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:51:44.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:51:44.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:44.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:44.443] Created future:
[10:51:44.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:44.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:44.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:44.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:44.455] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:44.443] MultisessionFuture:
[10:51:44.443] Label: ‘future_vapply-2’
[10:51:44.443] Expression:
[10:51:44.443] {
[10:51:44.443]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.443]     "# expression in do.call(), because function called uses '...'  "
[10:51:44.443]     "# as a global variable                                         "
[10:51:44.443]     do.call(function(...) {
[10:51:44.443]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:44.443]         "# without having an '...' argument. This means '...' is treated"
[10:51:44.443]         "# as a global variable. This may happen when FUN() is an       "
[10:51:44.443]         "# anonymous function.                                          "
[10:51:44.443]         "#                                                              "
[10:51:44.443]         "# If an anonymous function, we will make sure to restore the   "
[10:51:44.443]         "# function environment of FUN() to the calling environment.    "
[10:51:44.443]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:44.443]         "# global environment, which is where globals are written.      "
[10:51:44.443]         penv <- env <- environment(...future.FUN)
[10:51:44.443]         repeat {
[10:51:44.443]             if (identical(env, globalenv()) || identical(env, 
[10:51:44.443]                 emptyenv())) 
[10:51:44.443]                 break
[10:51:44.443]             penv <- env
[10:51:44.443]             env <- parent.env(env)
[10:51:44.443]         }
[10:51:44.443]         if (identical(penv, globalenv())) {
[10:51:44.443]             environment(...future.FUN) <- environment()
[10:51:44.443]         }
[10:51:44.443]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:44.443]             !isNamespace(penv)) {
[10:51:44.443]             parent.env(penv) <- environment()
[10:51:44.443]         }
[10:51:44.443]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:44.443]         {
[10:51:44.443]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.443]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.443]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.443]                 on.exit(options(oopts), add = TRUE)
[10:51:44.443]             }
[10:51:44.443]             {
[10:51:44.443]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.443]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.443]                   ...future.FUN(...future.X_jj, ...)
[10:51:44.443]                 })
[10:51:44.443]             }
[10:51:44.443]         }
[10:51:44.443]     }, args = future.call.arguments)
[10:51:44.443] }
[10:51:44.443] Lazy evaluation: FALSE
[10:51:44.443] Asynchronous evaluation: TRUE
[10:51:44.443] Local evaluation: TRUE
[10:51:44.443] Environment: R_GlobalEnv
[10:51:44.443] Capture standard output: TRUE
[10:51:44.443] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:44.443] Immediate condition classes: ‘immediateCondition’
[10:51:44.443] Globals: 11 objects totaling 13.34 KiB (function ‘...future.FUN’ of 4.74 KiB, function ‘x_FUN’ of 311 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:44.443] Packages: 2 packages (‘stats’, ‘future.apply’)
[10:51:44.443] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:44.443] Resolved: FALSE
[10:51:44.443] Value: <not collected>
[10:51:44.443] Conditions captured: <none>
[10:51:44.443] Early signaling: FALSE
[10:51:44.443] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:44.443] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.455] Chunk #2 of 2 ... DONE
[10:51:44.455] Launching 2 futures (chunks) ... DONE
[10:51:44.456] Resolving 2 futures (chunks) ...
[10:51:44.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value() on list ...
[10:51:44.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:51:44.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 2
[10:51:44.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  
[10:51:44.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 2
[10:51:44.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:51:44.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:44.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:44.457] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:44.457] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:44.457] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:44.457] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:51:44.457] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:44.457] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : Named num [1:5] 1 3.25 5.5 7.75 10
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 66393
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:44.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:51:44.468] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:51:44.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:44.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:51:44.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:44.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:44.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:44.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:44.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #1
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:51:44.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=1
[10:51:44.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #1
[10:51:44.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:44.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:44.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:44.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:44.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:44.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:44.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:44.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:44.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:44.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:44.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:51:44.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:44.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:44.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:51:44.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 1 (resolved future 1)
[10:51:44.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:51:44.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:51:44.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:44.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:44.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:44.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:44.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:44.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:44.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:51:44.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:51:44.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:51:44.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:44.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:44.497] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:44.497] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:44.497] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:44.497] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:51:44.497] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 2
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : Named num [1:5] 0.0498 0.2516 1 5.0537 20.0855
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : Named num [1:5] 0 0 0.5 1 1
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 66394
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:44.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:51:44.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:51:44.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:44.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:51:44.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:44.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:44.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:44.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:44.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:44.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:44.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:44.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:44.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #2
[10:51:44.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:44.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.514] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.514] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.514] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.514] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:44.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:44.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:44.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:44.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:44.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 2)
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ...
[10:51:44.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:44.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:51:44.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ... done
[10:51:44.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value() on list ... done
[10:51:44.519]  - Number of value chunks collected: 2
[10:51:44.519] Resolving 2 futures (chunks) ... DONE
[10:51:44.519] Reducing values from 2 chunks ...
[10:51:44.519]  - Number of values collected after concatenation: 3
[10:51:44.519]  - Number of values expected: 3
[10:51:44.519] Reducing values from 2 chunks ... DONE
[10:51:44.519] future_lapply() ... DONE
 num [1:5, 1:3] 1 3.25 5.5 7.75 10 ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:5] "0%" "25%" "50%" "75%" ...
  ..$ : chr [1:3] "a" "beta" "logic"
[10:51:44.521] future_lapply() ...
[10:51:44.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:44.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.526] Number of chunks: 2
[10:51:44.526] getGlobalsAndPackagesXApply() ...
[10:51:44.526]  - future.globals: TRUE
[10:51:44.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:44.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:44.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals found: [21] ‘FUN’, ‘{’, ‘<-’, ‘is.na’, ‘if’, ‘any’, ‘[’, ‘!’, ‘return’, ‘rep.int’, ‘sort’, ‘length’, ‘==’, ‘/’, ‘floor’, ‘(’, ‘+’, ‘c’, ‘-’, ‘*’, ‘ceiling’
[10:51:44.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:44.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:44.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:44.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [2] ‘stats’, ‘base’
[10:51:44.533] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [2] ‘stats’, ‘base’
[10:51:44.533] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:44.533] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  The total size of the 1 globals is 4.67 KiB (4777 bytes)
[10:51:44.534] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  The total size of the 1 globals exported for future expression (‘FUN()’) is 4.67 KiB There is one global: ‘FUN’ (4.67 KiB of class ‘function’)
[10:51:44.534] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘stats’
[10:51:44.534] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘stats’
[10:51:44.534] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [1] ‘FUN’
[10:51:44.534] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [1] ‘stats’
[10:51:44.534] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:44.534]  - globals found/used: [n=1] ‘FUN’
[10:51:44.534]  - needed namespaces: [n=1] ‘stats’
[10:51:44.534] Finding globals ... DONE
[10:51:44.535]  - use_args: TRUE
[10:51:44.535]  - Getting '...' globals ...
[10:51:44.535] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:44.535] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:51:44.535] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1
[10:51:44.535] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  elements: ‘...’
[10:51:44.535] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is DotDotDotList
[10:51:44.535] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:51:44.536] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:51:44.536] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:51:44.536] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:44.536]    - '...' content: [n=0] 
[10:51:44.536] List of 1
[10:51:44.536]  $ ...: list()
[10:51:44.536]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:44.536]  - attr(*, "where")=List of 1
[10:51:44.536]   ..$ ...:<environment: 0x55d4655c2000> 
[10:51:44.536]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:44.536]  - attr(*, "resolved")= logi TRUE
[10:51:44.536]  - attr(*, "total_size")= num NA
[10:51:44.538]  - Getting '...' globals ... DONE
[10:51:44.539] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:44.539] List of 2
[10:51:44.539]  $ ...future.FUN:function (x, na.rm = TRUE)  
[10:51:44.539]  $ ...          : list()
[10:51:44.539]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:44.539]  - attr(*, "where")=List of 2
[10:51:44.539]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:44.539]   ..$ ...          :<environment: 0x55d4655c2000> 
[10:51:44.539]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:44.539]  - attr(*, "resolved")= logi FALSE
[10:51:44.539]  - attr(*, "total_size")= num 18895
[10:51:44.541] Packages to be attached in all futures: [n=1] ‘stats’
[10:51:44.542] getGlobalsAndPackagesXApply() ... DONE
[10:51:44.542] Number of futures (= number of chunks): 2
[10:51:44.542] Launching 2 futures (chunks) ...
[10:51:44.542] Chunk #1 of 2 ...
[10:51:44.542]  - Finding globals in 'X' for chunk #1 ...
[10:51:44.542] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:44.542] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:44.543] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:51:44.543] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:44.543] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [0] <none>
[10:51:44.543] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [0] <none>
[10:51:44.543] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:44.543]    + additional globals found: [n=0] 
[10:51:44.543]    + additional namespaces needed: [n=0] 
[10:51:44.543]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:44.543]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:44.543]  - seeds: <none>
[10:51:44.543]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  {
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              on.exit(options(oopts), add = TRUE)
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          {
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              })
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  }
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:44.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:44.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘stats’
[10:51:44.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘stats’
[10:51:44.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:44.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘stats’
[10:51:44.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘stats’
[10:51:44.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.546] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [1] ‘stats’
[10:51:44.546] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:44.546] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:51:44.546] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:51:44.546] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.546] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.546] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:44.546] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:51:44.547] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:44.547] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:44.547] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:44.548] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:44.548] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:44.548] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:44.549] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:51:44.549] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:51:44.549] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.549] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:44.549] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:44.549] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.549] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:51:44.549] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:51:44.549] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.549] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:44.550] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:44.550] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.550] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:51:44.550] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:44.629] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:51:44.630] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:51:44.630] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:44.630] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:44.630] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:44.630] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:44.630] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:44.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:44.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:51:44.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:44.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:51:44.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:44.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:44.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:44.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:44.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Getting stack without first strategy: [n=0] 
[10:51:44.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:44.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:44.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:51:44.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:44.632] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:51:44.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:44.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:44.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:44.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:44.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:44.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:51:44.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:44.633] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:44.633] Created future:
[10:51:44.634] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:44.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:44.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:44.635] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:44.645] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:44.634] MultisessionFuture:
[10:51:44.634] Label: ‘future_sapply-1’
[10:51:44.634] Expression:
[10:51:44.634] {
[10:51:44.634]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.634]     "# expression in do.call(), because function called uses '...'  "
[10:51:44.634]     "# as a global variable                                         "
[10:51:44.634]     do.call(function(...) {
[10:51:44.634]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.634]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.634]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.634]             on.exit(options(oopts), add = TRUE)
[10:51:44.634]         }
[10:51:44.634]         {
[10:51:44.634]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.634]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.634]                 ...future.FUN(...future.X_jj, ...)
[10:51:44.634]             })
[10:51:44.634]         }
[10:51:44.634]     }, args = future.call.arguments)
[10:51:44.634] }
[10:51:44.634] Lazy evaluation: FALSE
[10:51:44.634] Asynchronous evaluation: TRUE
[10:51:44.634] Local evaluation: TRUE
[10:51:44.634] Environment: R_GlobalEnv
[10:51:44.634] Capture standard output: TRUE
[10:51:44.634] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:44.634] Immediate condition classes: ‘immediateCondition’
[10:51:44.634] Globals: 5 objects totaling 5.17 KiB (function ‘...future.FUN’ of 4.67 KiB, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 369 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:44.634] Packages: 1 packages (‘stats’)
[10:51:44.634] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:44.634] Resolved: FALSE
[10:51:44.634] Value: <not collected>
[10:51:44.634] Conditions captured: <none>
[10:51:44.634] Early signaling: FALSE
[10:51:44.634] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:44.634] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.646] Chunk #1 of 2 ... DONE
[10:51:44.646] Chunk #2 of 2 ...
[10:51:44.646]  - Finding globals in 'X' for chunk #2 ...
[10:51:44.646] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:44.646] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:44.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:51:44.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:44.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:51:44.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:51:44.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:44.647]    + additional globals found: [n=0] 
[10:51:44.647]    + additional namespaces needed: [n=0] 
[10:51:44.647]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:44.647]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:44.647]  - seeds: <none>
[10:51:44.647]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              })
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:44.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:44.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘stats’
[10:51:44.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘stats’
[10:51:44.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:44.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [1] ‘stats’
[10:51:44.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘stats’
[10:51:44.649] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.650] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [1] ‘stats’
[10:51:44.650] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:44.650] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:44.650] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:51:44.650] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.650] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.650] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:44.650] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:51:44.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:44.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:44.651] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:44.652] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:44.652] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:44.652] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:51:44.653] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:44.653] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:44.653] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.653] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Listing all futures
[10:51:44.653] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Number of registered futures: 1
[10:51:44.653] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.653] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:44.653] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:44.653] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.653] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:44.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:44.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:51:44.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:44.733] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:44.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:44.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:44.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:51:44.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:44.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:44.735] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:51:44.735] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:44.735] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:44.735] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:44.735] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Packages needed by the future expression (n = 1): ‘stats’
[10:51:44.735] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:44.735] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:44.735] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:44.735] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:44.736] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.736] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:44.736] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.736] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Packages needed by future strategies (n = 0): <none>
[10:51:44.736] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:44.736] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:44.737] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:44.737] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:51:44.737] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:51:44.737] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:44.737] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:51:44.737] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:51:44.737] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:44.737] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:44.737] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.737] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:44.738] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:44.738] Created future:
[10:51:44.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:44.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:44.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:44.739] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:44.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:44.738] MultisessionFuture:
[10:51:44.738] Label: ‘future_sapply-2’
[10:51:44.738] Expression:
[10:51:44.738] {
[10:51:44.738]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.738]     "# expression in do.call(), because function called uses '...'  "
[10:51:44.738]     "# as a global variable                                         "
[10:51:44.738]     do.call(function(...) {
[10:51:44.738]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.738]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.738]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.738]             on.exit(options(oopts), add = TRUE)
[10:51:44.738]         }
[10:51:44.738]         {
[10:51:44.738]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.738]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.738]                 ...future.FUN(...future.X_jj, ...)
[10:51:44.738]             })
[10:51:44.738]         }
[10:51:44.738]     }, args = future.call.arguments)
[10:51:44.738] }
[10:51:44.738] Lazy evaluation: FALSE
[10:51:44.738] Asynchronous evaluation: TRUE
[10:51:44.738] Local evaluation: TRUE
[10:51:44.738] Environment: R_GlobalEnv
[10:51:44.738] Capture standard output: TRUE
[10:51:44.738] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:44.738] Immediate condition classes: ‘immediateCondition’
[10:51:44.738] Globals: 5 objects totaling 5.10 KiB (function ‘...future.FUN’ of 4.67 KiB, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 293 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:44.738] Packages: 1 packages (‘stats’)
[10:51:44.738] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:44.738] Resolved: FALSE
[10:51:44.738] Value: <not collected>
[10:51:44.738] Conditions captured: <none>
[10:51:44.738] Early signaling: FALSE
[10:51:44.738] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:44.738] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.750] Chunk #2 of 2 ... DONE
[10:51:44.750] Launching 2 futures (chunks) ... DONE
[10:51:44.750] Resolving 2 futures (chunks) ...
[10:51:44.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value() on list ...
[10:51:44.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:51:44.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 2
[10:51:44.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  
[10:51:44.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 2
[10:51:44.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:51:44.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:44.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:44.751] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 4
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:5] 1 1.5 2 2.5 3
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:5] 1 1.5 2.5 3.5 4
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:5] 1 2 3 4 5
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:5] 1 2 3.5 5 6
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66393
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:44.752] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:44.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:44.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:44.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:44.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:44.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:44.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:44.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:44.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=1
[10:51:44.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #1
[10:51:44.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:44.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:44.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:44.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:44.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:44.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:44.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:44.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:44.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:44.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:44.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:44.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:51:44.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:51:44.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:51:44.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:51:44.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:44.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:44.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:44.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:44.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 3
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:5] 1 2.5 4 5.5 7
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:5] 1 2.5 4.5 6.5 8
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:5] 1 3 5 7 9
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66394
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:44.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:44.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:44.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:44.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:44.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:44.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:44.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:44.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:44.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:44.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:44.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:44.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:44.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:44.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:44.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:44.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:44.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:44.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:44.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:44.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:44.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:51:44.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:44.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:44.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:44.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:44.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:44.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:51:44.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ...
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:44.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:44.800] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:44.800] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:51:44.800] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value() on list ... done
[10:51:44.800]  - Number of value chunks collected: 2
[10:51:44.800] Resolving 2 futures (chunks) ... DONE
[10:51:44.800] Reducing values from 2 chunks ...
[10:51:44.800]  - Number of values collected after concatenation: 7
[10:51:44.800]  - Number of values expected: 7
[10:51:44.800] Reducing values from 2 chunks ... DONE
[10:51:44.800] future_lapply() ... DONE
[10:51:44.801] future_lapply() ...
[10:51:44.803] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.803] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:44.803] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.804] Number of chunks: 2
[10:51:44.804] getGlobalsAndPackagesXApply() ...
[10:51:44.804]  - future.globals: TRUE
[10:51:44.804] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:44.804] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:44.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [31] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘is.na’, ‘any’, ‘[’, ‘!’, ‘return’, ‘rep.int’, ‘sort’, ‘/’, ‘floor’, ‘(’, ‘+’, ‘c’, ‘-’, ‘*’, ‘ceiling’
[10:51:44.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:44.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:44.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:44.813] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:44.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [3] ‘base’, ‘stats’, ‘future.apply’
[10:51:44.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:44.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  The total size of the 7 globals is 26.71 KiB (27354 bytes)
[10:51:44.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  The total size of the 7 globals exported for future expression (‘FUN()’) is 26.71 KiB The three largest globals are ‘FUN’ (14.07 KiB of class ‘function’), ‘x_FUN’ (4.67 KiB of class ‘function’) and ‘stop_if_not’ (4.51 KiB of class ‘function’)
[10:51:44.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:44.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:44.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:44.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [2] ‘stats’, ‘future.apply’
[10:51:44.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:44.815]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:44.815]  - needed namespaces: [n=2] ‘stats’, ‘future.apply’
[10:51:44.815] Finding globals ... DONE
[10:51:44.816]  - use_args: TRUE
[10:51:44.816]  - Getting '...' globals ...
[10:51:44.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:44.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:51:44.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1
[10:51:44.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  elements: ‘...’
[10:51:44.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is DotDotDotList
[10:51:44.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:51:44.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:51:44.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:51:44.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:44.817]    - '...' content: [n=0] 
[10:51:44.817] List of 1
[10:51:44.817]  $ ...: list()
[10:51:44.817]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:44.817]  - attr(*, "where")=List of 1
[10:51:44.817]   ..$ ...:<environment: 0x55d465fc3cb0> 
[10:51:44.817]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:44.817]  - attr(*, "resolved")= logi TRUE
[10:51:44.817]  - attr(*, "total_size")= num NA
[10:51:44.819]  - Getting '...' globals ... DONE
[10:51:44.820] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:44.820] List of 8
[10:51:44.820]  $ ...future.FUN:function (x, ...)  
[10:51:44.820]  $ x_FUN        :function (x, na.rm = TRUE)  
[10:51:44.820]  $ times        : int 5
[10:51:44.820]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:44.820]  $ stop_if_not  :function (...)  
[10:51:44.820]  $ dim          : NULL
[10:51:44.820]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:44.820]  $ ...          : list()
[10:51:44.820]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:44.820]  - attr(*, "where")=List of 8
[10:51:44.820]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:44.820]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:44.820]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:44.820]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:44.820]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:44.820]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:44.820]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:44.820]   ..$ ...          :<environment: 0x55d465fc3cb0> 
[10:51:44.820]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:44.820]  - attr(*, "resolved")= logi FALSE
[10:51:44.820]  - attr(*, "total_size")= num 48005
[10:51:44.825] Packages to be attached in all futures: [n=2] ‘stats’, ‘future.apply’
[10:51:44.825] getGlobalsAndPackagesXApply() ... DONE
[10:51:44.826] Number of futures (= number of chunks): 2
[10:51:44.826] Launching 2 futures (chunks) ...
[10:51:44.826] Chunk #1 of 2 ...
[10:51:44.826]  - Finding globals in 'X' for chunk #1 ...
[10:51:44.826] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:44.826] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:44.826] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [0] 
[10:51:44.827] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:44.827] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [0] <none>
[10:51:44.827] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] <none>
[10:51:44.827] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:44.827]    + additional globals found: [n=0] 
[10:51:44.827]    + additional namespaces needed: [n=0] 
[10:51:44.827]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:44.827]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:44.827]  - seeds: <none>
[10:51:44.827]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.827] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  {
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "#                                                              "
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          repeat {
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  emptyenv())) 
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  break
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              penv <- env
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          {
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              {
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  })
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  }
[10:51:44.828] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:44.829] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:44.829] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [2] ‘stats’, ‘future.apply’
[10:51:44.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [2] ‘stats’, ‘future.apply’
[10:51:44.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:44.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:44.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:44.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [2] ‘stats’, ‘future.apply’
[10:51:44.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:44.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:44.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:51:44.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:51:44.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:51:44.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:44.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:51:44.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:44.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:44.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Listing all futures
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Number of registered futures: 0
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Total time: 0
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Listing all futures
[10:51:44.841] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Number of registered futures: 0
[10:51:44.841] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.841] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:51:44.841] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:51:44.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Worker is functional
[10:51:44.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:51:44.922] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:44.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:51:44.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:51:44.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:51:44.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:51:44.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:44.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:51:44.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getFutureCore() ...
[10:51:44.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Packages needed by the future expression (n = 2): ‘stats’, ‘future.apply’
[10:51:44.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getFutureCore() ... done
[10:51:44.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getFutureCapture() ...
[10:51:44.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getFutureCapture() ... done
[10:51:44.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getFutureContext() ...
[10:51:44.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:44.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:44.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getFutureContext() ... done
[10:51:44.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:51:44.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:44.927] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Appended future to position #1
[10:51:44.927] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Number of registered futures: 1
[10:51:44.927] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:44.927] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:51:44.927] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:51:44.927] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:51:44.927] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:51:44.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:44.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:44.928] Created future:
[10:51:44.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:44.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:44.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:44.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:44.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:44.928] MultisessionFuture:
[10:51:44.928] Label: ‘future_vapply-1’
[10:51:44.928] Expression:
[10:51:44.928] {
[10:51:44.928]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.928]     "# expression in do.call(), because function called uses '...'  "
[10:51:44.928]     "# as a global variable                                         "
[10:51:44.928]     do.call(function(...) {
[10:51:44.928]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:44.928]         "# without having an '...' argument. This means '...' is treated"
[10:51:44.928]         "# as a global variable. This may happen when FUN() is an       "
[10:51:44.928]         "# anonymous function.                                          "
[10:51:44.928]         "#                                                              "
[10:51:44.928]         "# If an anonymous function, we will make sure to restore the   "
[10:51:44.928]         "# function environment of FUN() to the calling environment.    "
[10:51:44.928]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:44.928]         "# global environment, which is where globals are written.      "
[10:51:44.928]         penv <- env <- environment(...future.FUN)
[10:51:44.928]         repeat {
[10:51:44.928]             if (identical(env, globalenv()) || identical(env, 
[10:51:44.928]                 emptyenv())) 
[10:51:44.928]                 break
[10:51:44.928]             penv <- env
[10:51:44.928]             env <- parent.env(env)
[10:51:44.928]         }
[10:51:44.928]         if (identical(penv, globalenv())) {
[10:51:44.928]             environment(...future.FUN) <- environment()
[10:51:44.928]         }
[10:51:44.928]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:44.928]             !isNamespace(penv)) {
[10:51:44.928]             parent.env(penv) <- environment()
[10:51:44.928]         }
[10:51:44.928]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:44.928]         {
[10:51:44.928]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.928]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.928]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.928]                 on.exit(options(oopts), add = TRUE)
[10:51:44.928]             }
[10:51:44.928]             {
[10:51:44.928]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.928]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.928]                   ...future.FUN(...future.X_jj, ...)
[10:51:44.928]                 })
[10:51:44.928]             }
[10:51:44.928]         }
[10:51:44.928]     }, args = future.call.arguments)
[10:51:44.928] }
[10:51:44.928] Lazy evaluation: FALSE
[10:51:44.928] Asynchronous evaluation: TRUE
[10:51:44.928] Local evaluation: TRUE
[10:51:44.928] Environment: R_GlobalEnv
[10:51:44.928] Capture standard output: TRUE
[10:51:44.928] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:44.928] Immediate condition classes: ‘immediateCondition’
[10:51:44.928] Globals: 11 objects totaling 27.22 KiB (function ‘...future.FUN’ of 14.07 KiB, function ‘x_FUN’ of 4.67 KiB, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:44.928] Packages: 2 packages (‘stats’, ‘future.apply’)
[10:51:44.928] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:44.928] Resolved: FALSE
[10:51:44.928] Value: <not collected>
[10:51:44.928] Conditions captured: <none>
[10:51:44.928] Early signaling: FALSE
[10:51:44.928] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:44.928] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:44.941] Chunk #1 of 2 ... DONE
[10:51:44.941] Chunk #2 of 2 ...
[10:51:44.941]  - Finding globals in 'X' for chunk #2 ...
[10:51:44.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:44.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:44.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:51:44.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:44.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [0] <none>
[10:51:44.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [0] <none>
[10:51:44.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:44.942]    + additional globals found: [n=0] 
[10:51:44.942]    + additional namespaces needed: [n=0] 
[10:51:44.943]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:44.943]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:44.943]  - seeds: <none>
[10:51:44.943]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  {
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "#                                                              "
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          repeat {
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  break
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              penv <- env
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          {
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              {
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  })
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:44.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  }
[10:51:44.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:44.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:44.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [2] ‘stats’, ‘future.apply’
[10:51:44.945] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [2] ‘stats’, ‘future.apply’
[10:51:44.945] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:44.945] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [2] ‘stats’, ‘future.apply’
[10:51:44.945] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [2] ‘stats’, ‘future.apply’
[10:51:44.945] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:44.945] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [2] ‘stats’, ‘future.apply’
[10:51:44.945] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:44.946] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:51:44.946] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:51:44.946] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:44.946] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:44.946] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:44.946] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:51:44.946] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:44.946] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:44.946] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:44.948] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:44.948] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:44.948] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:44.948] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Number of workers: 2
[10:51:44.948] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Polling for a free worker ...
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Listing all futures
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Number of registered futures: 1
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Total time: 0
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Polling for a free worker ... done
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Listing all futures
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Number of registered futures: 1
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:44.949] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Index of first available worker: 2
[10:51:44.950] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Validate that the worker is functional ...
[10:51:45.031] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Worker is functional
[10:51:45.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  requestNode() ... done
[10:51:45.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  cluster node index: 2
[10:51:45.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:45.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:45.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:45.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:45.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  cluster node index: 2
[10:51:45.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getFutureData() ...
[10:51:45.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getFutureCore() ...
[10:51:45.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Packages needed by the future expression (n = 2): ‘stats’, ‘future.apply’
[10:51:45.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getFutureCore() ... done
[10:51:45.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getFutureCapture() ...
[10:51:45.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getFutureCapture() ... done
[10:51:45.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getFutureContext() ...
[10:51:45.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:45.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:45.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getFutureContext() ... done
[10:51:45.034] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getFutureData() ... done
[10:51:45.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:45.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Appended future to position #2
[10:51:45.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Number of registered futures: 2
[10:51:45.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:45.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:45.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:45.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:45.035] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:51:45.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:45.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:45.036] Created future:
[10:51:45.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:45.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:45.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:45.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:45.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:45.036] MultisessionFuture:
[10:51:45.036] Label: ‘future_vapply-2’
[10:51:45.036] Expression:
[10:51:45.036] {
[10:51:45.036]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.036]     "# expression in do.call(), because function called uses '...'  "
[10:51:45.036]     "# as a global variable                                         "
[10:51:45.036]     do.call(function(...) {
[10:51:45.036]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.036]         "# without having an '...' argument. This means '...' is treated"
[10:51:45.036]         "# as a global variable. This may happen when FUN() is an       "
[10:51:45.036]         "# anonymous function.                                          "
[10:51:45.036]         "#                                                              "
[10:51:45.036]         "# If an anonymous function, we will make sure to restore the   "
[10:51:45.036]         "# function environment of FUN() to the calling environment.    "
[10:51:45.036]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.036]         "# global environment, which is where globals are written.      "
[10:51:45.036]         penv <- env <- environment(...future.FUN)
[10:51:45.036]         repeat {
[10:51:45.036]             if (identical(env, globalenv()) || identical(env, 
[10:51:45.036]                 emptyenv())) 
[10:51:45.036]                 break
[10:51:45.036]             penv <- env
[10:51:45.036]             env <- parent.env(env)
[10:51:45.036]         }
[10:51:45.036]         if (identical(penv, globalenv())) {
[10:51:45.036]             environment(...future.FUN) <- environment()
[10:51:45.036]         }
[10:51:45.036]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.036]             !isNamespace(penv)) {
[10:51:45.036]             parent.env(penv) <- environment()
[10:51:45.036]         }
[10:51:45.036]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.036]         {
[10:51:45.036]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.036]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.036]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.036]                 on.exit(options(oopts), add = TRUE)
[10:51:45.036]             }
[10:51:45.036]             {
[10:51:45.036]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.036]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.036]                   ...future.FUN(...future.X_jj, ...)
[10:51:45.036]                 })
[10:51:45.036]             }
[10:51:45.036]         }
[10:51:45.036]     }, args = future.call.arguments)
[10:51:45.036] }
[10:51:45.036] Lazy evaluation: FALSE
[10:51:45.036] Asynchronous evaluation: TRUE
[10:51:45.036] Local evaluation: TRUE
[10:51:45.036] Environment: R_GlobalEnv
[10:51:45.036] Capture standard output: TRUE
[10:51:45.036] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:45.036] Immediate condition classes: ‘immediateCondition’
[10:51:45.036] Globals: 11 objects totaling 27.14 KiB (function ‘...future.FUN’ of 14.07 KiB, function ‘x_FUN’ of 4.67 KiB, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:45.036] Packages: 2 packages (‘stats’, ‘future.apply’)
[10:51:45.036] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:45.036] Resolved: FALSE
[10:51:45.036] Value: <not collected>
[10:51:45.036] Conditions captured: <none>
[10:51:45.036] Early signaling: FALSE
[10:51:45.036] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:45.036] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.049] Chunk #2 of 2 ... DONE
[10:51:45.049] Launching 2 futures (chunks) ... DONE
[10:51:45.049] Resolving 2 futures (chunks) ...
[10:51:45.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value() on list ...
[10:51:45.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  recursive: 0
[10:51:45.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 2
[10:51:45.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  
[10:51:45.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:51:45.050] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:51:45.050] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:45.050] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:45.050] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:45.050] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:45.050] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 4
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:5] 1 1.5 2 2.5 3
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:5] 1 1.5 2.5 3.5 4
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:5] 1 2 3 4 5
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:5] 1 2 3.5 5 6
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:44"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 66393
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.006 0 0
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:45.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:51:45.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:51:45.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:45.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Removed future from position #1
[10:51:45.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Number of registered futures: 1
[10:51:45.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:45.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:51:45.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:45.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result already collected: FutureResult
[10:51:45.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:45.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:45.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:45.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=1
[10:51:45.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:51:45.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:45.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:45.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:45.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:45.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:45.067] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:45.068] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:45.068] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:45.068] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:45.068] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:45.068] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:45.068] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:51:45.068] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:45.068] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:45.068] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:45.068] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 1)
[10:51:45.069] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:51:45.069] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:51:45.069] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:45.069] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:45.069] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:45.069] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:45.069] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:45.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:45.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:45.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 3
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:5] 1 2.5 4 5.5 7
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:5] 1 2.5 4.5 6.5 8
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:5] 1 3 5 7 9
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 66394
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:45.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:51:45.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:51:45.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:45.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Removed future from position #1
[10:51:45.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Number of registered futures: 0
[10:51:45.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:45.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:51:45.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:45.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result already collected: FutureResult
[10:51:45.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:45.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:45.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:45.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:51:45.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:45.092] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.093] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.094] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:45.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:45.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:45.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:45.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:45.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:45.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:45.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:51:45.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:45.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:45.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:45.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:45.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:45.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:45.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:45.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:45.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:45.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:45.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:45.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:45.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:45.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:45.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 2)
[10:51:45.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:51:45.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:51:45.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:45.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:45.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:45.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:45.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:45.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:45.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:45.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:45.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:45.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:45.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:45.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:45.102] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:51:45.102] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value() on list ... done
[10:51:45.102]  - Number of value chunks collected: 2
[10:51:45.102] Resolving 2 futures (chunks) ... DONE
[10:51:45.102] Reducing values from 2 chunks ...
[10:51:45.102]  - Number of values collected after concatenation: 7
[10:51:45.102]  - Number of values expected: 7
[10:51:45.102] Reducing values from 2 chunks ... DONE
[10:51:45.102] future_lapply() ... DONE
 num [1:5, 1:7] 1 1.5 2 2.5 3 1 1.5 2.5 3.5 4 ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:5] "Min." "1st Qu." "Median" "3rd Qu." ...
  ..$ : NULL
[10:51:45.104] future_lapply() ...
[10:51:45.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:45.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.105] Number of chunks: 2
[10:51:45.105] getGlobalsAndPackagesXApply() ...
[10:51:45.105]  - future.globals: TRUE
[10:51:45.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:45.106] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:45.107] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [3] ‘FUN’, ‘outer’, ‘rep’
[10:51:45.107] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:45.107] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:45.107] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:45.107] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:51:45.108] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:51:45.108] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:45.108] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  The total size of the 1 globals is 680 bytes (680 bytes)
[10:51:45.108] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  The total size of the 1 globals exported for future expression (‘FUN(y = c(2, 4, 6, 8, 10))’) is 680 bytes There is one global: ‘FUN’ (680 bytes of class ‘function’)
[10:51:45.108] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:51:45.108] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [1] ‘FUN’
[10:51:45.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] 
[10:51:45.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:45.109]  - globals found/used: [n=1] ‘FUN’
[10:51:45.109]  - needed namespaces: [n=0] 
[10:51:45.109] Finding globals ... DONE
[10:51:45.109]  - use_args: TRUE
[10:51:45.109]  - Getting '...' globals ...
[10:51:45.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:45.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  recursive: 0
[10:51:45.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 1
[10:51:45.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  elements: ‘...’
[10:51:45.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is DotDotDotList
[10:51:45.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve(obj, ...) ...
[10:51:45.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve(obj, ...) ... done
[10:51:45.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:51:45.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:45.110]    - '...' content: [n=1] ‘y’
[10:51:45.111] List of 1
[10:51:45.111]  $ ...:List of 1
[10:51:45.111]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:45.111]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:45.111]  - attr(*, "where")=List of 1
[10:51:45.111]   ..$ ...:<environment: 0x55d466f46008> 
[10:51:45.111]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:45.111]  - attr(*, "resolved")= logi TRUE
[10:51:45.111]  - attr(*, "total_size")= num NA
[10:51:45.113]  - Getting '...' globals ... DONE
[10:51:45.114] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:45.114] List of 2
[10:51:45.114]  $ ...future.FUN:function (x, y)  
[10:51:45.114]  $ ...          :List of 1
[10:51:45.114]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:45.114]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:45.114]  - attr(*, "where")=List of 2
[10:51:45.114]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:45.114]   ..$ ...          :<environment: 0x55d466f46008> 
[10:51:45.114]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:45.114]  - attr(*, "resolved")= logi FALSE
[10:51:45.114]  - attr(*, "total_size")= num 7318
[10:51:45.117] Packages to be attached in all futures: [n=0] 
[10:51:45.117] getGlobalsAndPackagesXApply() ... DONE
[10:51:45.117] Number of futures (= number of chunks): 2
[10:51:45.117] Launching 2 futures (chunks) ...
[10:51:45.117] Chunk #1 of 2 ...
[10:51:45.117]  - Finding globals in 'X' for chunk #1 ...
[10:51:45.117] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:45.118] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:45.118] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:51:45.118] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:45.118] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:51:45.118] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:51:45.118] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:45.118]    + additional globals found: [n=0] 
[10:51:45.118]    + additional namespaces needed: [n=0] 
[10:51:45.118]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:45.119]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:45.119]  - seeds: <none>
[10:51:45.119]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "#                                                              "
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          repeat {
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  emptyenv())) 
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  break
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              penv <- env
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              env <- parent.env(env)
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              {
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  })
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:45.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:51:45.120] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:45.120] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:45.120] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [0] 
[10:51:45.120] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [0] 
[10:51:45.120] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:45.121] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:51:45.121] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.121] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] 
[10:51:45.121] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:45.121] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:45.121] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:51:45.121] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.122] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.122] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:45.122] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:51:45.122] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:45.122] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:45.122] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:45.124] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:45.124] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:45.124] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  requestNode() ...
[10:51:45.124] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Number of workers: 2
[10:51:45.124] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Polling for a free worker ...
[10:51:45.124] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.124] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Listing all futures
[10:51:45.124] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Number of registered futures: 0
[10:51:45.124] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.125] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Total time: 0
[10:51:45.125] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Polling for a free worker ... done
[10:51:45.125] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.125] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Listing all futures
[10:51:45.125] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Number of registered futures: 0
[10:51:45.125] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.125] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Index of first available worker: 1
[10:51:45.125] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Validate that the worker is functional ...
[10:51:45.207] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Worker is functional
[10:51:45.207] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  requestNode() ... done
[10:51:45.208] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  cluster node index: 1
[10:51:45.208] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  requestWorker() ... done
[10:51:45.208] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  eraseGlobalEnvironment() ...
[10:51:45.208] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  eraseGlobalEnvironment() ... done
[10:51:45.208] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  launchFuture() ...
[10:51:45.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  cluster node index: 1
[10:51:45.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getFutureData() ...
[10:51:45.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getFutureCore() ...
[10:51:45.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Packages needed by the future expression (n = 0): <none>
[10:51:45.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getFutureCore() ... done
[10:51:45.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getFutureCapture() ...
[10:51:45.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getFutureCapture() ... done
[10:51:45.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getFutureContext() ...
[10:51:45.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:45.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:45.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getFutureContext() ... done
[10:51:45.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getFutureData() ... done
[10:51:45.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:45.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Appended future to position #1
[10:51:45.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Number of registered futures: 1
[10:51:45.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:45.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  launchFuture() ... done
[10:51:45.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  MultisessionFuture started
[10:51:45.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:45.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:45.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:45.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:45.211] Created future:
[10:51:45.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:45.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:45.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:45.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:45.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:45.211] MultisessionFuture:
[10:51:45.211] Label: ‘future_sapply-1’
[10:51:45.211] Expression:
[10:51:45.211] {
[10:51:45.211]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.211]     "# expression in do.call(), because function called uses '...'  "
[10:51:45.211]     "# as a global variable                                         "
[10:51:45.211]     do.call(function(...) {
[10:51:45.211]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.211]         "# without having an '...' argument. This means '...' is treated"
[10:51:45.211]         "# as a global variable. This may happen when FUN() is an       "
[10:51:45.211]         "# anonymous function.                                          "
[10:51:45.211]         "#                                                              "
[10:51:45.211]         "# If an anonymous function, we will make sure to restore the   "
[10:51:45.211]         "# function environment of FUN() to the calling environment.    "
[10:51:45.211]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.211]         "# global environment, which is where globals are written.      "
[10:51:45.211]         penv <- env <- environment(...future.FUN)
[10:51:45.211]         repeat {
[10:51:45.211]             if (identical(env, globalenv()) || identical(env, 
[10:51:45.211]                 emptyenv())) 
[10:51:45.211]                 break
[10:51:45.211]             penv <- env
[10:51:45.211]             env <- parent.env(env)
[10:51:45.211]         }
[10:51:45.211]         if (identical(penv, globalenv())) {
[10:51:45.211]             environment(...future.FUN) <- environment()
[10:51:45.211]         }
[10:51:45.211]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.211]             !isNamespace(penv)) {
[10:51:45.211]             parent.env(penv) <- environment()
[10:51:45.211]         }
[10:51:45.211]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.211]         {
[10:51:45.211]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.211]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.211]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.211]                 on.exit(options(oopts), add = TRUE)
[10:51:45.211]             }
[10:51:45.211]             {
[10:51:45.211]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.211]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.211]                   ...future.FUN(...future.X_jj, ...)
[10:51:45.211]                 })
[10:51:45.211]             }
[10:51:45.211]         }
[10:51:45.211]     }, args = future.call.arguments)
[10:51:45.211] }
[10:51:45.211] Lazy evaluation: FALSE
[10:51:45.211] Asynchronous evaluation: TRUE
[10:51:45.211] Local evaluation: TRUE
[10:51:45.211] Environment: R_GlobalEnv
[10:51:45.211] Capture standard output: TRUE
[10:51:45.211] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:45.211] Immediate condition classes: ‘immediateCondition’
[10:51:45.211] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 680 bytes, DotDotDotList ‘future.call.arguments’ of 183 bytes, list ‘...future.elements_ii’ of 114 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:45.211] Packages: <none>
[10:51:45.211] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:45.211] Resolved: FALSE
[10:51:45.211] Value: <not collected>
[10:51:45.211] Conditions captured: <none>
[10:51:45.211] Early signaling: FALSE
[10:51:45.211] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:45.211] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.224] Chunk #1 of 2 ... DONE
[10:51:45.224] Chunk #2 of 2 ...
[10:51:45.224]  - Finding globals in 'X' for chunk #2 ...
[10:51:45.224] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:45.224] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:45.225] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [0] 
[10:51:45.225] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:45.225] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [0] <none>
[10:51:45.225] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] <none>
[10:51:45.225] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:45.225]    + additional globals found: [n=0] 
[10:51:45.225]    + additional namespaces needed: [n=0] 
[10:51:45.225]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:45.225]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:45.225]  - seeds: <none>
[10:51:45.225]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  {
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "#                                                              "
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          repeat {
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  emptyenv())) 
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  break
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              penv <- env
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          {
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              {
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  })
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              }
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:51:45.226] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  }
[10:51:45.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:45.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:45.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [0] 
[10:51:45.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [0] 
[10:51:45.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:45.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:51:45.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:51:45.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:45.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:45.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:51:45.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:51:45.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:51:45.229] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:45.229] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Workers: [n=2]
[10:51:45.229] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:45.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:45.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  requestWorker() ...
[10:51:45.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  requestNode() ...
[10:51:45.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Number of workers: 2
[10:51:45.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Polling for a free worker ...
[10:51:45.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:45.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Total time: 0
[10:51:45.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Polling for a free worker ... done
[10:51:45.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Listing all futures
[10:51:45.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Number of registered futures: 1
[10:51:45.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Index of first available worker: 2
[10:51:45.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Validate that the worker is functional ...
[10:51:45.309] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Worker is functional
[10:51:45.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  requestNode() ... done
[10:51:45.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  cluster node index: 2
[10:51:45.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  requestWorker() ... done
[10:51:45.310] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  eraseGlobalEnvironment() ...
[10:51:45.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  eraseGlobalEnvironment() ... done
[10:51:45.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  launchFuture() ...
[10:51:45.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  cluster node index: 2
[10:51:45.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getFutureData() ...
[10:51:45.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getFutureCore() ...
[10:51:45.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Packages needed by the future expression (n = 0): <none>
[10:51:45.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getFutureCore() ... done
[10:51:45.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getFutureCapture() ...
[10:51:45.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getFutureCapture() ... done
[10:51:45.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getFutureContext() ...
[10:51:45.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:45.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:45.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getFutureContext() ... done
[10:51:45.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getFutureData() ... done
[10:51:45.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:45.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Appended future to position #2
[10:51:45.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Number of registered futures: 2
[10:51:45.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:45.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  launchFuture() ... done
[10:51:45.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  MultisessionFuture started
[10:51:45.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  launchFuture() for ClusterFutureBackend ... done
[10:51:45.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:51:45.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:45.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:45.314] Created future:
[10:51:45.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:45.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:45.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:45.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:45.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:45.314] MultisessionFuture:
[10:51:45.314] Label: ‘future_sapply-2’
[10:51:45.314] Expression:
[10:51:45.314] {
[10:51:45.314]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.314]     "# expression in do.call(), because function called uses '...'  "
[10:51:45.314]     "# as a global variable                                         "
[10:51:45.314]     do.call(function(...) {
[10:51:45.314]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.314]         "# without having an '...' argument. This means '...' is treated"
[10:51:45.314]         "# as a global variable. This may happen when FUN() is an       "
[10:51:45.314]         "# anonymous function.                                          "
[10:51:45.314]         "#                                                              "
[10:51:45.314]         "# If an anonymous function, we will make sure to restore the   "
[10:51:45.314]         "# function environment of FUN() to the calling environment.    "
[10:51:45.314]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.314]         "# global environment, which is where globals are written.      "
[10:51:45.314]         penv <- env <- environment(...future.FUN)
[10:51:45.314]         repeat {
[10:51:45.314]             if (identical(env, globalenv()) || identical(env, 
[10:51:45.314]                 emptyenv())) 
[10:51:45.314]                 break
[10:51:45.314]             penv <- env
[10:51:45.314]             env <- parent.env(env)
[10:51:45.314]         }
[10:51:45.314]         if (identical(penv, globalenv())) {
[10:51:45.314]             environment(...future.FUN) <- environment()
[10:51:45.314]         }
[10:51:45.314]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.314]             !isNamespace(penv)) {
[10:51:45.314]             parent.env(penv) <- environment()
[10:51:45.314]         }
[10:51:45.314]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.314]         {
[10:51:45.314]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.314]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.314]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.314]                 on.exit(options(oopts), add = TRUE)
[10:51:45.314]             }
[10:51:45.314]             {
[10:51:45.314]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.314]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.314]                   ...future.FUN(...future.X_jj, ...)
[10:51:45.314]                 })
[10:51:45.314]             }
[10:51:45.314]         }
[10:51:45.314]     }, args = future.call.arguments)
[10:51:45.314] }
[10:51:45.314] Lazy evaluation: FALSE
[10:51:45.314] Asynchronous evaluation: TRUE
[10:51:45.314] Local evaluation: TRUE
[10:51:45.314] Environment: R_GlobalEnv
[10:51:45.314] Capture standard output: TRUE
[10:51:45.314] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:45.314] Immediate condition classes: ‘immediateCondition’
[10:51:45.314] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 680 bytes, DotDotDotList ‘future.call.arguments’ of 183 bytes, list ‘...future.elements_ii’ of 114 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:45.314] Packages: <none>
[10:51:45.314] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:45.314] Resolved: FALSE
[10:51:45.314] Value: <not collected>
[10:51:45.314] Conditions captured: <none>
[10:51:45.314] Early signaling: FALSE
[10:51:45.314] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:45.314] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.326] Chunk #2 of 2 ... DONE
[10:51:45.326] Launching 2 futures (chunks) ... DONE
[10:51:45.327] Resolving 2 futures (chunks) ...
[10:51:45.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value() on list ...
[10:51:45.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:51:45.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 2
[10:51:45.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  
[10:51:45.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 2
[10:51:45.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:51:45.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:45.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:45.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  assertValidConnection() ...
[10:51:45.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  cluster node index: 1
[10:51:45.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  assertValidConnection() ... done
[10:51:45.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  receiveMessageFromWorker() for ClusterFuture ...
[10:51:45.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  cluster node index: 1
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  [1] TRUE
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  received data:
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  List of 5
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA   $ type   : chr "VALUE"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA   $ value  :List of 13
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ value            :List of 2
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ : num [1:3, 1:5] 100 100 100 200 200 200 300 300 300 400 ...
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ : num [1:3, 1:5] 120 120 120 240 240 240 360 360 360 480 ...
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ visible          : logi TRUE
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ stdout           : chr ""
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ conditions       : list()
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ rng              : logi FALSE
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ misuseGlobalEnv  : NULL
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ misuseConnections:List of 3
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ added   : NULL
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ removed : NULL
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ replaced: NULL
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ misuseDevices    : NULL
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..- attr(*, "source")=List of 5
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ pid   : int 66393
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ random: int 2147483647
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ r_info           :List of 4
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ : int [1:3] 4 5 0
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ os           : chr "unix"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ os_name      : chr "Linux"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ captures_utf8: logi TRUE
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ version          : chr "1.8"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..- attr(*, "class")= chr "FutureResult"
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA   $ success: logi TRUE
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA   $ time   : 'proc_time' Named num [1:5] 0.004 0.001 0.004 0 0
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:45.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA   $ tag    : NULL
[10:51:45.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Received FutureResult
[10:51:45.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:45.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Removed future from position #1
[10:51:45.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Number of registered futures: 1
[10:51:45.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:45.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Erased future from future backend
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result() for ClusterFuture ...
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result already collected: FutureResult
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result() for ClusterFuture ... done
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #1
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  nx: 2
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relay: TRUE
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  stdout: TRUE
[10:51:45.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  signal: TRUE
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  resignal: FALSE
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  force: TRUE
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relayed: [n=2] FALSE, FALSE
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  queued futures: [n=2] FALSE, FALSE
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  until=1
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relaying element #1
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:45.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:45.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  value: <list>
[10:51:45.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  nx: 2
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relay: TRUE
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  stdout: TRUE
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  signal: TRUE
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  resignal: FALSE
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  force: TRUE
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  until=2
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relaying element #2
[10:51:45.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.346] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:51:45.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 1 (resolved future 1)
[10:51:45.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:51:45.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:51:45.348] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:45.349] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:45.349] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  assertValidConnection() ...
[10:51:45.349] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  cluster node index: 2
[10:51:45.349] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  assertValidConnection() ... done
[10:51:45.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  receiveMessageFromWorker() for ClusterFuture ...
[10:51:45.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  cluster node index: 2
[10:51:45.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  [1] TRUE
[10:51:45.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  received data:
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  List of 5
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA   $ type   : chr "VALUE"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA   $ value  :List of 13
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ value            :List of 2
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ : num [1:3, 1:5] 140 140 140 280 280 280 420 420 420 560 ...
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ : num [1:3, 1:5] 160 160 160 320 320 320 480 480 480 640 ...
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ visible          : logi TRUE
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ stdout           : chr ""
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ conditions       : list()
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ rng              : logi FALSE
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ misuseGlobalEnv  : NULL
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ misuseConnections:List of 3
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ added   : NULL
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ removed : NULL
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ replaced: NULL
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ misuseDevices    : NULL
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..- attr(*, "source")=List of 5
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ pid   : int 66394
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ random: int 2147483647
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ r_info           :List of 4
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. .. ..$ : int [1:3] 4 5 0
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ os           : chr "unix"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ os_name      : chr "Linux"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    .. ..$ captures_utf8: logi TRUE
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..$ version          : chr "1.8"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..- attr(*, "class")= chr "FutureResult"
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA   $ success: logi TRUE
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:45.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA   $ tag    : NULL
[10:51:45.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Received FutureResult
[10:51:45.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:45.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Removed future from position #1
[10:51:45.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Number of registered futures: 0
[10:51:45.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:45.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Erased future from future backend
[10:51:45.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result() for ClusterFuture ...
[10:51:45.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result already collected: FutureResult
[10:51:45.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result() for ClusterFuture ... done
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #2
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  nx: 2
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relay: TRUE
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  stdout: TRUE
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  signal: TRUE
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  resignal: FALSE
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  force: TRUE
[10:51:45.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  until=2
[10:51:45.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relaying element #2
[10:51:45.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ...
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  result already collected: FutureResult
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  result() for ClusterFuture ... done
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  value: <list>
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  nx: 2
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relay: TRUE
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  stdout: TRUE
[10:51:45.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  signal: TRUE
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  resignal: FALSE
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  force: TRUE
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  until=2
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 2)
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:51:45.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ...
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  nx: 2
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relay: TRUE
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  stdout: TRUE
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  signal: TRUE
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  resignal: FALSE
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  force: TRUE
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.376] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:51:45.376] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ... done
[10:51:45.376] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value() on list ... done
[10:51:45.376]  - Number of value chunks collected: 2
[10:51:45.376] Resolving 2 futures (chunks) ... DONE
[10:51:45.376] Reducing values from 2 chunks ...
[10:51:45.376]  - Number of values collected after concatenation: 4
[10:51:45.376]  - Number of values expected: 4
[10:51:45.376] Reducing values from 2 chunks ... DONE
[10:51:45.376] future_lapply() ... DONE
[10:51:45.377] future_lapply() ...
[10:51:45.379] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.379] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:45.379] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.379] Number of chunks: 2
[10:51:45.380] getGlobalsAndPackagesXApply() ...
[10:51:45.380]  - future.globals: TRUE
[10:51:45.380] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:45.380] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:45.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals found: [18] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’, ‘outer’, ‘rep’
[10:51:45.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:45.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:45.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:45.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:45.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [2] ‘base’, ‘future.apply’
[10:51:45.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:45.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  The total size of the 7 globals is 14.32 KiB (14666 bytes)
[10:51:45.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  The total size of the 7 globals exported for future expression (‘FUN(y = c(2, 4, 6, 8, 10))’) is 14.32 KiB The three largest globals are ‘FUN’ (5.67 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:45.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:45.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:45.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:45.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:45.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:45.386]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:45.387]  - needed namespaces: [n=1] ‘future.apply’
[10:51:45.387] Finding globals ... DONE
[10:51:45.387]  - use_args: TRUE
[10:51:45.387]  - Getting '...' globals ...
[10:51:45.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:45.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:51:45.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1
[10:51:45.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  elements: ‘...’
[10:51:45.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is DotDotDotList
[10:51:45.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:51:45.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:51:45.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:51:45.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:45.388]    - '...' content: [n=1] ‘y’
[10:51:45.388] List of 1
[10:51:45.388]  $ ...:List of 1
[10:51:45.388]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:45.388]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:45.388]  - attr(*, "where")=List of 1
[10:51:45.388]   ..$ ...:<environment: 0x55d463486e90> 
[10:51:45.388]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:45.388]  - attr(*, "resolved")= logi TRUE
[10:51:45.388]  - attr(*, "total_size")= num NA
[10:51:45.391]  - Getting '...' globals ... DONE
[10:51:45.391] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:45.391] List of 8
[10:51:45.391]  $ ...future.FUN:function (x, ...)  
[10:51:45.391]  $ x_FUN        :function (x, y)  
[10:51:45.391]  $ times        : int 15
[10:51:45.391]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:45.391]  $ stop_if_not  :function (...)  
[10:51:45.391]  $ dim          : int [1:2] 3 5
[10:51:45.391]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:45.391]  $ ...          :List of 1
[10:51:45.391]   ..$ y: num [1:5] 2 4 6 8 10
[10:51:45.391]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:45.391]  - attr(*, "where")=List of 8
[10:51:45.391]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:45.391]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:45.391]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:45.391]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:45.391]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:45.391]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:45.391]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:45.391]   ..$ ...          :<environment: 0x55d463486e90> 
[10:51:45.391]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:45.391]  - attr(*, "resolved")= logi FALSE
[10:51:45.391]  - attr(*, "total_size")= num 26659
[10:51:45.397] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:45.398] getGlobalsAndPackagesXApply() ... DONE
[10:51:45.398] Number of futures (= number of chunks): 2
[10:51:45.398] Launching 2 futures (chunks) ...
[10:51:45.398] Chunk #1 of 2 ...
[10:51:45.398]  - Finding globals in 'X' for chunk #1 ...
[10:51:45.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:45.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:45.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:51:45.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:45.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [0] <none>
[10:51:45.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [0] <none>
[10:51:45.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:45.399]    + additional globals found: [n=0] 
[10:51:45.399]    + additional namespaces needed: [n=0] 
[10:51:45.399]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:45.399]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:45.399]  - seeds: <none>
[10:51:45.399]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  {
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "#                                                              "
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          repeat {
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  break
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              penv <- env
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          {
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              {
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  })
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:45.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  }
[10:51:45.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:45.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:45.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘future.apply’
[10:51:45.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘future.apply’
[10:51:45.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:45.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘future.apply’
[10:51:45.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:45.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [1] ‘future.apply’
[10:51:45.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:45.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:51:45.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:51:45.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:45.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:51:45.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  launchFuture() for ClusterFutureBackend ...
[10:51:45.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Workers: [n=2]
[10:51:45.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:45.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:45.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  requestWorker() ...
[10:51:45.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  requestNode() ...
[10:51:45.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Number of workers: 2
[10:51:45.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Polling for a free worker ...
[10:51:45.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:45.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Total time: 0
[10:51:45.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Polling for a free worker ... done
[10:51:45.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:45.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Index of first available worker: 1
[10:51:45.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Validate that the worker is functional ...
[10:51:45.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Worker is functional
[10:51:45.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  requestNode() ... done
[10:51:45.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  cluster node index: 1
[10:51:45.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  requestWorker() ... done
[10:51:45.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  eraseGlobalEnvironment() ...
[10:51:45.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  eraseGlobalEnvironment() ... done
[10:51:45.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  launchFuture() ...
[10:51:45.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  cluster node index: 1
[10:51:45.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getFutureData() ...
[10:51:45.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getFutureCore() ...
[10:51:45.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:45.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getFutureCore() ... done
[10:51:45.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getFutureCapture() ...
[10:51:45.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getFutureCapture() ... done
[10:51:45.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getFutureContext() ...
[10:51:45.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:45.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:45.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getFutureContext() ... done
[10:51:45.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getFutureData() ... done
[10:51:45.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:45.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Appended future to position #1
[10:51:45.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:45.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:45.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  launchFuture() ... done
[10:51:45.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  MultisessionFuture started
[10:51:45.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  launchFuture() for ClusterFutureBackend ... done
[10:51:45.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Launching futures ... done
[10:51:45.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:45.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:45.489] Created future:
[10:51:45.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:45.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:45.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  cluster node index: 1
[10:51:45.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:45.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:45.489] MultisessionFuture:
[10:51:45.489] Label: ‘future_vapply-1’
[10:51:45.489] Expression:
[10:51:45.489] {
[10:51:45.489]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.489]     "# expression in do.call(), because function called uses '...'  "
[10:51:45.489]     "# as a global variable                                         "
[10:51:45.489]     do.call(function(...) {
[10:51:45.489]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.489]         "# without having an '...' argument. This means '...' is treated"
[10:51:45.489]         "# as a global variable. This may happen when FUN() is an       "
[10:51:45.489]         "# anonymous function.                                          "
[10:51:45.489]         "#                                                              "
[10:51:45.489]         "# If an anonymous function, we will make sure to restore the   "
[10:51:45.489]         "# function environment of FUN() to the calling environment.    "
[10:51:45.489]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.489]         "# global environment, which is where globals are written.      "
[10:51:45.489]         penv <- env <- environment(...future.FUN)
[10:51:45.489]         repeat {
[10:51:45.489]             if (identical(env, globalenv()) || identical(env, 
[10:51:45.489]                 emptyenv())) 
[10:51:45.489]                 break
[10:51:45.489]             penv <- env
[10:51:45.489]             env <- parent.env(env)
[10:51:45.489]         }
[10:51:45.489]         if (identical(penv, globalenv())) {
[10:51:45.489]             environment(...future.FUN) <- environment()
[10:51:45.489]         }
[10:51:45.489]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.489]             !isNamespace(penv)) {
[10:51:45.489]             parent.env(penv) <- environment()
[10:51:45.489]         }
[10:51:45.489]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.489]         {
[10:51:45.489]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.489]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.489]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.489]                 on.exit(options(oopts), add = TRUE)
[10:51:45.489]             }
[10:51:45.489]             {
[10:51:45.489]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.489]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.489]                   ...future.FUN(...future.X_jj, ...)
[10:51:45.489]                 })
[10:51:45.489]             }
[10:51:45.489]         }
[10:51:45.489]     }, args = future.call.arguments)
[10:51:45.489] }
[10:51:45.489] Lazy evaluation: FALSE
[10:51:45.489] Asynchronous evaluation: TRUE
[10:51:45.489] Local evaluation: TRUE
[10:51:45.489] Environment: R_GlobalEnv
[10:51:45.489] Capture standard output: TRUE
[10:51:45.489] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:45.489] Immediate condition classes: ‘immediateCondition’
[10:51:45.489] Globals: 11 objects totaling 14.66 KiB (function ‘...future.FUN’ of 5.67 KiB, function ‘x_FUN’ of 680 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:45.489] Packages: 1 packages (‘future.apply’)
[10:51:45.489] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:45.489] Resolved: FALSE
[10:51:45.489] Value: <not collected>
[10:51:45.489] Conditions captured: <none>
[10:51:45.489] Early signaling: FALSE
[10:51:45.489] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:45.489] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.502] Chunk #1 of 2 ... DONE
[10:51:45.502] Chunk #2 of 2 ...
[10:51:45.502]  - Finding globals in 'X' for chunk #2 ...
[10:51:45.502] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:45.502] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:45.502] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  globals found: [0] 
[10:51:45.502] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:45.503] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:51:45.503] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:51:45.503] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:45.503]    + additional globals found: [n=0] 
[10:51:45.503]    + additional namespaces needed: [n=0] 
[10:51:45.503]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:45.503]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:45.503]  - seeds: <none>
[10:51:45.503]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.503] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:45.503] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  {
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA      "# expression in do.call(), because function called uses '...'  "
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA      "# as a global variable                                         "
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA      do.call(function(...) {
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          "# without having an '...' argument. This means '...' is treated"
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          "# as a global variable. This may happen when FUN() is an       "
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          "# anonymous function.                                          "
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          "#                                                              "
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          "# If an anonymous function, we will make sure to restore the   "
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          "# function environment of FUN() to the calling environment.    "
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          "# global environment, which is where globals are written.      "
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          penv <- env <- environment(...future.FUN)
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          repeat {
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              if (identical(env, globalenv()) || identical(env, 
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA                  emptyenv())) 
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA                  break
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              penv <- env
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              env <- parent.env(env)
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          }
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          if (identical(penv, globalenv())) {
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              environment(...future.FUN) <- environment()
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          }
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              !isNamespace(penv)) {
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              parent.env(penv) <- environment()
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          }
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          {
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA                  on.exit(options(oopts), add = TRUE)
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              }
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              {
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA                    ...future.FUN(...future.X_jj, ...)
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA                  })
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA              }
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA          }
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA      }, args = future.call.arguments)
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  }
[10:51:45.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:45.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:45.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Packages associated with globals: [1] ‘future.apply’
[10:51:45.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Packages: [1] ‘future.apply’
[10:51:45.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:45.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [1] ‘future.apply’
[10:51:45.506] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:45.506] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.506] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [1] ‘future.apply’
[10:51:45.506] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:45.506] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:45.506] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:51:45.506] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.507] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.507] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:45.507] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Launching futures ...
[10:51:45.507] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  launchFuture() for ClusterFutureBackend ...
[10:51:45.507] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Workers: [n=2]
[10:51:45.507] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:45.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:45.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  requestWorker() ...
[10:51:45.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  requestNode() ...
[10:51:45.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Number of workers: 2
[10:51:45.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Polling for a free worker ...
[10:51:45.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:45.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Total time: 0
[10:51:45.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Polling for a free worker ... done
[10:51:45.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:45.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Index of first available worker: 2
[10:51:45.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Validate that the worker is functional ...
[10:51:45.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Worker is functional
[10:51:45.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  requestNode() ... done
[10:51:45.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:45.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  requestWorker() ... done
[10:51:45.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  eraseGlobalEnvironment() ...
[10:51:45.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  eraseGlobalEnvironment() ... done
[10:51:45.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  launchFuture() ...
[10:51:45.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:45.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getFutureData() ...
[10:51:45.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  getFutureCore() ...
[10:51:45.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:45.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  getFutureCore() ... done
[10:51:45.608] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  getFutureCapture() ...
[10:51:45.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  getFutureCapture() ... done
[10:51:45.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  getFutureContext() ...
[10:51:45.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:45.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:45.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  getFutureContext() ... done
[10:51:45.609] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getFutureData() ... done
[10:51:45.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:45.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Appended future to position #2
[10:51:45.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Number of registered futures: 2
[10:51:45.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:45.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  launchFuture() ... done
[10:51:45.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  MultisessionFuture started
[10:51:45.610] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  launchFuture() for ClusterFutureBackend ... done
[10:51:45.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Launching futures ... done
[10:51:45.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Using MultisessionFutureBackend ... done
[10:51:45.611] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:45.611] Created future:
[10:51:45.612] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:45.612] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  assertValidConnection() ...
[10:51:45.612] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  cluster node index: 2
[10:51:45.613] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  assertValidConnection() ... done
[10:51:45.623] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:45.611] MultisessionFuture:
[10:51:45.611] Label: ‘future_vapply-2’
[10:51:45.611] Expression:
[10:51:45.611] {
[10:51:45.611]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.611]     "# expression in do.call(), because function called uses '...'  "
[10:51:45.611]     "# as a global variable                                         "
[10:51:45.611]     do.call(function(...) {
[10:51:45.611]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.611]         "# without having an '...' argument. This means '...' is treated"
[10:51:45.611]         "# as a global variable. This may happen when FUN() is an       "
[10:51:45.611]         "# anonymous function.                                          "
[10:51:45.611]         "#                                                              "
[10:51:45.611]         "# If an anonymous function, we will make sure to restore the   "
[10:51:45.611]         "# function environment of FUN() to the calling environment.    "
[10:51:45.611]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.611]         "# global environment, which is where globals are written.      "
[10:51:45.611]         penv <- env <- environment(...future.FUN)
[10:51:45.611]         repeat {
[10:51:45.611]             if (identical(env, globalenv()) || identical(env, 
[10:51:45.611]                 emptyenv())) 
[10:51:45.611]                 break
[10:51:45.611]             penv <- env
[10:51:45.611]             env <- parent.env(env)
[10:51:45.611]         }
[10:51:45.611]         if (identical(penv, globalenv())) {
[10:51:45.611]             environment(...future.FUN) <- environment()
[10:51:45.611]         }
[10:51:45.611]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.611]             !isNamespace(penv)) {
[10:51:45.611]             parent.env(penv) <- environment()
[10:51:45.611]         }
[10:51:45.611]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.611]         {
[10:51:45.611]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.611]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.611]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.611]                 on.exit(options(oopts), add = TRUE)
[10:51:45.611]             }
[10:51:45.611]             {
[10:51:45.611]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.611]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.611]                   ...future.FUN(...future.X_jj, ...)
[10:51:45.611]                 })
[10:51:45.611]             }
[10:51:45.611]         }
[10:51:45.611]     }, args = future.call.arguments)
[10:51:45.611] }
[10:51:45.611] Lazy evaluation: FALSE
[10:51:45.611] Asynchronous evaluation: TRUE
[10:51:45.611] Local evaluation: TRUE
[10:51:45.611] Environment: R_GlobalEnv
[10:51:45.611] Capture standard output: TRUE
[10:51:45.611] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:45.611] Immediate condition classes: ‘immediateCondition’
[10:51:45.611] Globals: 11 objects totaling 14.66 KiB (function ‘...future.FUN’ of 5.67 KiB, function ‘x_FUN’ of 680 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:45.611] Packages: 1 packages (‘future.apply’)
[10:51:45.611] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:45.611] Resolved: FALSE
[10:51:45.611] Value: <not collected>
[10:51:45.611] Conditions captured: <none>
[10:51:45.611] Early signaling: FALSE
[10:51:45.611] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:45.611] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.624] Chunk #2 of 2 ... DONE
[10:51:45.624] Launching 2 futures (chunks) ... DONE
[10:51:45.624] Resolving 2 futures (chunks) ...
[10:51:45.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value() on list ...
[10:51:45.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  recursive: 0
[10:51:45.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  length: 2
[10:51:45.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  
[10:51:45.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Number of remaining objects: 2
[10:51:45.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  checking value #1 ...
[10:51:45.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  'obj' is MultisessionFuture
[10:51:45.625] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  isFutureResolved() ...
[10:51:45.625] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  assertValidConnection() ...
[10:51:45.625] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  cluster node index: 1
[10:51:45.625] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  assertValidConnection() ... done
[10:51:45.625] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ...
[10:51:45.625] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  cluster node index: 1
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  [1] TRUE
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  received data:
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  List of 5
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA   $ type   : chr "VALUE"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA   $ value  :List of 13
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ value            :List of 2
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ : num [1:3, 1:5] 100 100 100 200 200 200 300 300 300 400 ...
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ : num [1:3, 1:5] 120 120 120 240 240 240 360 360 360 480 ...
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ visible          : logi TRUE
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ stdout           : chr ""
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ conditions       : list()
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ rng              : logi FALSE
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ misuseGlobalEnv  : NULL
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ misuseConnections:List of 3
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ added   : NULL
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ removed : NULL
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ replaced: NULL
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ misuseDevices    : NULL
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..- attr(*, "source")=List of 5
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ pid   : int 66393
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ random: int 2147483647
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ r_info           :List of 4
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ : int [1:3] 4 5 0
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ os           : chr "unix"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ os_name      : chr "Linux"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ captures_utf8: logi TRUE
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ version          : chr "1.8"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..- attr(*, "class")= chr "FutureResult"
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA   $ success: logi TRUE
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:45.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA   $ tag    : NULL
[10:51:45.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Received FutureResult
[10:51:45.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:45.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Removed future from position #1
[10:51:45.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:45.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:45.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Erased future from future backend
[10:51:45.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.637] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  isFutureResolved() ... done
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  MultisessionFuture #1
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  nx: 2
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relay: TRUE
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  stdout: TRUE
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  signal: TRUE
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  resignal: FALSE
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  force: TRUE
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relayed: [n=2] FALSE, FALSE
[10:51:45.638] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  queued futures: [n=2] FALSE, FALSE
[10:51:45.639] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  until=1
[10:51:45.639] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relaying element #1
[10:51:45.639] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.639] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.639] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.639] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.639] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.639] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.639] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:45.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  value(<MultisessionFuture>, ...) ...
[10:51:45.640] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  value: <list>
[10:51:45.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  value(<MultisessionFuture>, ...) ... done
[10:51:45.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:45.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  nx: 2
[10:51:45.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relay: TRUE
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  stdout: TRUE
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  signal: TRUE
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  resignal: FALSE
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  force: TRUE
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  until=2
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relaying element #2
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.642] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  signalConditionsASAP(NULL, pos=1) ... done
[10:51:45.643] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  length: 1 (resolved future 1)
[10:51:45.643] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  checking value #1 ... done
[10:51:45.643] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  checking value #2 ...
[10:51:45.643] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  'obj' is MultisessionFuture
[10:51:45.643] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  isFutureResolved() ...
[10:51:45.643] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  assertValidConnection() ...
[10:51:45.643] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  cluster node index: 2
[10:51:45.644] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  assertValidConnection() ... done
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ...
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  cluster node index: 2
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  [1] TRUE
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  received data:
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  List of 5
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA   $ type   : chr "VALUE"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA   $ value  :List of 13
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ value            :List of 2
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ : num [1:3, 1:5] 140 140 140 280 280 280 420 420 420 560 ...
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ : num [1:3, 1:5] 160 160 160 320 320 320 480 480 480 640 ...
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ visible          : logi TRUE
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ stdout           : chr ""
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ conditions       : list()
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ rng              : logi FALSE
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ misuseGlobalEnv  : NULL
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ misuseConnections:List of 3
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ added   : NULL
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ removed : NULL
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ replaced: NULL
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ misuseDevices    : NULL
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..- attr(*, "source")=List of 5
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ pid   : int 66394
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ random: int 2147483647
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ r_info           :List of 4
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. .. ..$ : int [1:3] 4 5 0
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ os           : chr "unix"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ os_name      : chr "Linux"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    .. ..$ captures_utf8: logi TRUE
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..$ version          : chr "1.8"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..- attr(*, "class")= chr "FutureResult"
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA   $ success: logi TRUE
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:45.654] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA   $ tag    : NULL
[10:51:45.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Received FutureResult
[10:51:45.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:45.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Removed future from position #1
[10:51:45.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:45.665] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Erased future from future backend
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  isFutureResolved() ... done
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  MultisessionFuture #2
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  nx: 2
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relay: TRUE
[10:51:45.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  stdout: TRUE
[10:51:45.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  signal: TRUE
[10:51:45.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  resignal: FALSE
[10:51:45.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  force: TRUE
[10:51:45.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  until=2
[10:51:45.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relaying element #2
[10:51:45.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:45.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  value(<MultisessionFuture>, ...) ...
[10:51:45.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.669] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  value: <list>
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  value(<MultisessionFuture>, ...) ... done
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  nx: 2
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relay: TRUE
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  stdout: TRUE
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  signal: TRUE
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  resignal: FALSE
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  force: TRUE
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  until=2
[10:51:45.670] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:45.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  length: 0 (resolved future 2)
[10:51:45.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  checking value #2 ... done
[10:51:45.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Relaying remaining futures ...
[10:51:45.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  signalConditionsASAP(NULL, pos=0) ...
[10:51:45.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  nx: 2
[10:51:45.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relay: TRUE
[10:51:45.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  stdout: TRUE
[10:51:45.671] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  signal: TRUE
[10:51:45.672] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  resignal: FALSE
[10:51:45.672] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  force: TRUE
[10:51:45.672] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.672] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:45.672] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.672] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.672] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  signalConditionsASAP(NULL, pos=0) ... done
[10:51:45.672] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Relaying remaining futures ... done
[10:51:45.672] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value() on list ... done
[10:51:45.672]  - Number of value chunks collected: 2
[10:51:45.673] Resolving 2 futures (chunks) ... DONE
[10:51:45.673] Reducing values from 2 chunks ...
[10:51:45.673]  - Number of values collected after concatenation: 4
[10:51:45.673]  - Number of values expected: 4
[10:51:45.673] Reducing values from 2 chunks ... DONE
[10:51:45.673] future_lapply() ... DONE
 num [1:3, 1:5, 1:4] 100 100 100 200 200 200 300 300 300 400 ...
 - attr(*, "dimnames")=List of 3
  ..$ : NULL
  ..$ : NULL
  ..$ : chr [1:4] "A" "B" "C" "D"
[10:51:45.675] future_lapply() ...
[10:51:45.677] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.677] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:45.677] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.677] Number of chunks: 2
[10:51:45.677] getGlobalsAndPackagesXApply() ...
[10:51:45.677]  - future.globals: TRUE
[10:51:45.678] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:45.678] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Searching for globals ...
[10:51:45.681] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:45.681] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Searching for globals ... DONE
[10:51:45.681] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Resolving globals: FALSE
[10:51:45.681] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Search for packages associated with the globals ...
[10:51:45.682] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:45.682] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Packages: [2] ‘base’, ‘future.apply’
[10:51:45.682] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Search for packages associated with the globals ... DONE
[10:51:45.682] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  The total size of the 7 globals is 14.73 KiB (15079 bytes)
[10:51:45.683] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  The total size of the 7 globals exported for future expression (‘FUN()’) is 14.73 KiB The three largest globals are ‘FUN’ (6.74 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:45.683] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Packages after dropping 'base': [1] ‘future.apply’
[10:51:45.683] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:45.683] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:45.683] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  packages: [1] ‘future.apply’
[10:51:45.684] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:45.684]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:45.684]  - needed namespaces: [n=1] ‘future.apply’
[10:51:45.684] Finding globals ... DONE
[10:51:45.684]  - use_args: TRUE
[10:51:45.684]  - Getting '...' globals ...
[10:51:45.684] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:45.684] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  recursive: 0
[10:51:45.685] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  length: 1
[10:51:45.685] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  elements: ‘...’
[10:51:45.685] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  'obj' is DotDotDotList
[10:51:45.685] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  resolve(obj, ...) ...
[10:51:45.685] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  resolve(obj, ...) ... done
[10:51:45.685] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  length: 0 (resolved future 1)
[10:51:45.685] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:45.685]    - '...' content: [n=0] 
[10:51:45.685] List of 1
[10:51:45.685]  $ ...: list()
[10:51:45.685]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:45.685]  - attr(*, "where")=List of 1
[10:51:45.685]   ..$ ...:<environment: 0x55d466a37e78> 
[10:51:45.685]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:45.685]  - attr(*, "resolved")= logi TRUE
[10:51:45.685]  - attr(*, "total_size")= num NA
[10:51:45.688]  - Getting '...' globals ... DONE
[10:51:45.688] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:45.688] List of 8
[10:51:45.688]  $ ...future.FUN:function (x, ...)  
[10:51:45.688]  $ x_FUN        :function (x)  
[10:51:45.688]  $ times        : int 1
[10:51:45.688]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:45.688]  $ stop_if_not  :function (...)  
[10:51:45.688]  $ dim          : NULL
[10:51:45.688]  $ valid_types  : chr "logical"
[10:51:45.688]  $ ...          : list()
[10:51:45.688]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:45.688]  - attr(*, "where")=List of 8
[10:51:45.688]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:45.688]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:45.688]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:45.688]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:45.688]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:45.688]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:45.688]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:45.688]   ..$ ...          :<environment: 0x55d466a37e78> 
[10:51:45.688]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:45.688]  - attr(*, "resolved")= logi FALSE
[10:51:45.688]  - attr(*, "total_size")= num 30734
[10:51:45.699] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:45.699] getGlobalsAndPackagesXApply() ... DONE
[10:51:45.700] Number of futures (= number of chunks): 2
[10:51:45.700] Launching 2 futures (chunks) ...
[10:51:45.700] Chunk #1 of 2 ...
[10:51:45.700]  - Finding globals in 'X' for chunk #1 ...
[10:51:45.700] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:45.700] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Searching for globals ...
[10:51:45.701] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  globals found: [0] 
[10:51:45.701] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Searching for globals ... DONE
[10:51:45.701] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  globals: [0] <none>
[10:51:45.701] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  packages: [0] <none>
[10:51:45.702] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:45.702]    + additional globals found: [n=0] 
[10:51:45.702]    + additional namespaces needed: [n=0] 
[10:51:45.702]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:45.702]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:45.702]  - seeds: <none>
[10:51:45.702]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Resolving globals: FALSE
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Tweak future expression to call with '...' arguments ...
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  {
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA      "# expression in do.call(), because function called uses '...'  "
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA      "# as a global variable                                         "
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA      do.call(function(...) {
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          "# without having an '...' argument. This means '...' is treated"
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          "# as a global variable. This may happen when FUN() is an       "
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          "# anonymous function.                                          "
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          "#                                                              "
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          "# If an anonymous function, we will make sure to restore the   "
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          "# function environment of FUN() to the calling environment.    "
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          "# global environment, which is where globals are written.      "
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          penv <- env <- environment(...future.FUN)
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          repeat {
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              if (identical(env, globalenv()) || identical(env, 
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA                  emptyenv())) 
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA                  break
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              penv <- env
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              env <- parent.env(env)
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          }
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          if (identical(penv, globalenv())) {
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              environment(...future.FUN) <- environment()
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          }
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              !isNamespace(penv)) {
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              parent.env(penv) <- environment()
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          }
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          {
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA                  on.exit(options(oopts), add = TRUE)
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              }
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              {
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA                    ...future.FUN(...future.X_jj, ...)
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA                  })
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA              }
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA          }
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA      }, args = future.call.arguments)
[10:51:45.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  }
[10:51:45.704] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Tweak future expression to call with '...' arguments ... DONE
[10:51:45.704] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Search for packages associated with the globals ...
[10:51:45.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Packages associated with globals: [1] ‘future.apply’
[10:51:45.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Packages: [1] ‘future.apply’
[10:51:45.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Search for packages associated with the globals ... DONE
[10:51:45.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Packages after dropping 'base': [1] ‘future.apply’
[10:51:45.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:45.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  packages: [1] ‘future.apply’
[10:51:45.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:45.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:45.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  state: ‘created’
[10:51:45.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  Using MultisessionFutureBackend ...
[10:51:45.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Launching futures ...
[10:51:45.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  launchFuture() for ClusterFutureBackend ...
[10:51:45.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Workers: [n=2]
[10:51:45.708] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:45.709] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:45.709] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  requestWorker() ...
[10:51:45.709] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  requestNode() ...
[10:51:45.709] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Number of workers: 2
[10:51:45.710] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Polling for a free worker ...
[10:51:45.710] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.710] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.710] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:45.710] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.710] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Total time: 0
[10:51:45.710] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Polling for a free worker ... done
[10:51:45.710] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.710] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.710] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:45.711] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.711] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Index of first available worker: 1
[10:51:45.711] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Validate that the worker is functional ...
[10:51:45.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Worker is functional
[10:51:45.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  requestNode() ... done
[10:51:45.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:45.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  requestWorker() ... done
[10:51:45.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ...
[10:51:45.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ... done
[10:51:45.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  launchFuture() ...
[10:51:45.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:45.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  getFutureData() ...
[10:51:45.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ...
[10:51:45.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:45.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ... done
[10:51:45.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ...
[10:51:45.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ... done
[10:51:45.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ...
[10:51:45.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:45.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:45.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ... done
[10:51:45.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  getFutureData() ... done
[10:51:45.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:45.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Appended future to position #1
[10:51:45.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:45.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:45.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  launchFuture() ... done
[10:51:45.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  MultisessionFuture started
[10:51:45.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ... done
[10:51:45.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Launching futures ... done
[10:51:45.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Using MultisessionFutureBackend ... done
[10:51:45.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  run() for Future (‘MultisessionFuture’) ... done
[10:51:45.795] Created future:
[10:51:45.796] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  isFutureResolved() ...
[10:51:45.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  assertValidConnection() ...
[10:51:45.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  cluster node index: 1
[10:51:45.797] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  assertValidConnection() ... done
[10:51:45.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  isFutureResolved() ... done
[10:51:45.795] MultisessionFuture:
[10:51:45.795] Label: ‘future_vapply-1’
[10:51:45.795] Expression:
[10:51:45.795] {
[10:51:45.795]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.795]     "# expression in do.call(), because function called uses '...'  "
[10:51:45.795]     "# as a global variable                                         "
[10:51:45.795]     do.call(function(...) {
[10:51:45.795]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.795]         "# without having an '...' argument. This means '...' is treated"
[10:51:45.795]         "# as a global variable. This may happen when FUN() is an       "
[10:51:45.795]         "# anonymous function.                                          "
[10:51:45.795]         "#                                                              "
[10:51:45.795]         "# If an anonymous function, we will make sure to restore the   "
[10:51:45.795]         "# function environment of FUN() to the calling environment.    "
[10:51:45.795]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.795]         "# global environment, which is where globals are written.      "
[10:51:45.795]         penv <- env <- environment(...future.FUN)
[10:51:45.795]         repeat {
[10:51:45.795]             if (identical(env, globalenv()) || identical(env, 
[10:51:45.795]                 emptyenv())) 
[10:51:45.795]                 break
[10:51:45.795]             penv <- env
[10:51:45.795]             env <- parent.env(env)
[10:51:45.795]         }
[10:51:45.795]         if (identical(penv, globalenv())) {
[10:51:45.795]             environment(...future.FUN) <- environment()
[10:51:45.795]         }
[10:51:45.795]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.795]             !isNamespace(penv)) {
[10:51:45.795]             parent.env(penv) <- environment()
[10:51:45.795]         }
[10:51:45.795]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.795]         {
[10:51:45.795]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.795]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.795]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.795]                 on.exit(options(oopts), add = TRUE)
[10:51:45.795]             }
[10:51:45.795]             {
[10:51:45.795]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.795]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.795]                   ...future.FUN(...future.X_jj, ...)
[10:51:45.795]                 })
[10:51:45.795]             }
[10:51:45.795]         }
[10:51:45.795]     }, args = future.call.arguments)
[10:51:45.795] }
[10:51:45.795] Lazy evaluation: FALSE
[10:51:45.795] Asynchronous evaluation: TRUE
[10:51:45.795] Local evaluation: TRUE
[10:51:45.795] Environment: R_GlobalEnv
[10:51:45.795] Capture standard output: TRUE
[10:51:45.795] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:45.795] Immediate condition classes: ‘immediateCondition’
[10:51:45.795] Globals: 11 objects totaling 16.54 KiB (function ‘...future.FUN’ of 6.73 KiB, function ‘x_FUN’ of 41 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:45.795] Packages: 1 packages (‘future.apply’)
[10:51:45.795] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:45.795] Resolved: FALSE
[10:51:45.795] Value: <not collected>
[10:51:45.795] Conditions captured: <none>
[10:51:45.795] Early signaling: FALSE
[10:51:45.795] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:45.795] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.808] Chunk #1 of 2 ... DONE
[10:51:45.808] Chunk #2 of 2 ...
[10:51:45.808]  - Finding globals in 'X' for chunk #2 ...
[10:51:45.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getGlobalsAndPackages() ...
[10:51:45.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Searching for globals ...
[10:51:45.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  globals found: [0] 
[10:51:45.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Searching for globals ... DONE
[10:51:45.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  globals: [0] <none>
[10:51:45.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  packages: [0] <none>
[10:51:45.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getGlobalsAndPackages() ... done
[10:51:45.809]    + additional globals found: [n=0] 
[10:51:45.809]    + additional namespaces needed: [n=0] 
[10:51:45.810]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:45.810]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:45.810]  - seeds: <none>
[10:51:45.810]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getGlobalsAndPackages() ...
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Resolving globals: FALSE
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Tweak future expression to call with '...' arguments ...
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  {
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA      "# expression in do.call(), because function called uses '...'  "
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA      "# as a global variable                                         "
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA      do.call(function(...) {
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          "# without having an '...' argument. This means '...' is treated"
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          "# as a global variable. This may happen when FUN() is an       "
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          "# anonymous function.                                          "
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          "#                                                              "
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          "# If an anonymous function, we will make sure to restore the   "
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          "# function environment of FUN() to the calling environment.    "
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          "# global environment, which is where globals are written.      "
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          penv <- env <- environment(...future.FUN)
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          repeat {
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              if (identical(env, globalenv()) || identical(env, 
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA                  emptyenv())) 
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA                  break
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              penv <- env
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              env <- parent.env(env)
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          }
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          if (identical(penv, globalenv())) {
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              environment(...future.FUN) <- environment()
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          }
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              !isNamespace(penv)) {
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              parent.env(penv) <- environment()
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          }
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          {
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA                  on.exit(options(oopts), add = TRUE)
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              }
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              {
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA                    ...future.FUN(...future.X_jj, ...)
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA                  })
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA              }
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA          }
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA      }, args = future.call.arguments)
[10:51:45.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  }
[10:51:45.811] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Tweak future expression to call with '...' arguments ... DONE
[10:51:45.811] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Search for packages associated with the globals ...
[10:51:45.811] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Packages associated with globals: [1] ‘future.apply’
[10:51:45.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Packages: [1] ‘future.apply’
[10:51:45.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Search for packages associated with the globals ... DONE
[10:51:45.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Packages after dropping 'base': [1] ‘future.apply’
[10:51:45.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:45.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  packages: [1] ‘future.apply’
[10:51:45.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  getGlobalsAndPackages() ... done
[10:51:45.813] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  run() for Future (‘Future’) ...
[10:51:45.813] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  state: ‘created’
[10:51:45.813] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.813] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.813] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  Using MultisessionFutureBackend ...
[10:51:45.813] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Launching futures ...
[10:51:45.813] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ...
[10:51:45.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Workers: [n=2]
[10:51:45.814] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:45.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:45.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  requestWorker() ...
[10:51:45.815] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  requestNode() ...
[10:51:45.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Number of workers: 2
[10:51:45.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Polling for a free worker ...
[10:51:45.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:45.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Total time: 0
[10:51:45.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Polling for a free worker ... done
[10:51:45.816] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:45.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Index of first available worker: 2
[10:51:45.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Validate that the worker is functional ...
[10:51:45.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Worker is functional
[10:51:45.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  requestNode() ... done
[10:51:45.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:45.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  requestWorker() ... done
[10:51:45.897] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ...
[10:51:45.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ... done
[10:51:45.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  launchFuture() ...
[10:51:45.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:45.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  getFutureData() ...
[10:51:45.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ...
[10:51:45.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:45.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ... done
[10:51:45.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ...
[10:51:45.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ... done
[10:51:45.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ...
[10:51:45.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:45.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:45.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ... done
[10:51:45.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  getFutureData() ... done
[10:51:45.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:45.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Appended future to position #2
[10:51:45.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 2
[10:51:45.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:45.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  launchFuture() ... done
[10:51:45.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  MultisessionFuture started
[10:51:45.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ... done
[10:51:45.901] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Launching futures ... done
[10:51:45.901] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.901] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Using MultisessionFutureBackend ... done
[10:51:45.901] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  run() for Future (‘MultisessionFuture’) ... done
[10:51:45.901] Created future:
[10:51:45.902] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  isFutureResolved() ...
[10:51:45.902] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  assertValidConnection() ...
[10:51:45.903] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  cluster node index: 2
[10:51:45.903] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  assertValidConnection() ... done
[10:51:45.913] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  isFutureResolved() ... done
[10:51:45.901] MultisessionFuture:
[10:51:45.901] Label: ‘future_vapply-2’
[10:51:45.901] Expression:
[10:51:45.901] {
[10:51:45.901]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.901]     "# expression in do.call(), because function called uses '...'  "
[10:51:45.901]     "# as a global variable                                         "
[10:51:45.901]     do.call(function(...) {
[10:51:45.901]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.901]         "# without having an '...' argument. This means '...' is treated"
[10:51:45.901]         "# as a global variable. This may happen when FUN() is an       "
[10:51:45.901]         "# anonymous function.                                          "
[10:51:45.901]         "#                                                              "
[10:51:45.901]         "# If an anonymous function, we will make sure to restore the   "
[10:51:45.901]         "# function environment of FUN() to the calling environment.    "
[10:51:45.901]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.901]         "# global environment, which is where globals are written.      "
[10:51:45.901]         penv <- env <- environment(...future.FUN)
[10:51:45.901]         repeat {
[10:51:45.901]             if (identical(env, globalenv()) || identical(env, 
[10:51:45.901]                 emptyenv())) 
[10:51:45.901]                 break
[10:51:45.901]             penv <- env
[10:51:45.901]             env <- parent.env(env)
[10:51:45.901]         }
[10:51:45.901]         if (identical(penv, globalenv())) {
[10:51:45.901]             environment(...future.FUN) <- environment()
[10:51:45.901]         }
[10:51:45.901]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.901]             !isNamespace(penv)) {
[10:51:45.901]             parent.env(penv) <- environment()
[10:51:45.901]         }
[10:51:45.901]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.901]         {
[10:51:45.901]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.901]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.901]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.901]                 on.exit(options(oopts), add = TRUE)
[10:51:45.901]             }
[10:51:45.901]             {
[10:51:45.901]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.901]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.901]                   ...future.FUN(...future.X_jj, ...)
[10:51:45.901]                 })
[10:51:45.901]             }
[10:51:45.901]         }
[10:51:45.901]     }, args = future.call.arguments)
[10:51:45.901] }
[10:51:45.901] Lazy evaluation: FALSE
[10:51:45.901] Asynchronous evaluation: TRUE
[10:51:45.901] Local evaluation: TRUE
[10:51:45.901] Environment: R_GlobalEnv
[10:51:45.901] Capture standard output: TRUE
[10:51:45.901] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:45.901] Immediate condition classes: ‘immediateCondition’
[10:51:45.901] Globals: 11 objects totaling 16.28 KiB (function ‘...future.FUN’ of 6.73 KiB, function ‘x_FUN’ of 41 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:45.901] Packages: 1 packages (‘future.apply’)
[10:51:45.901] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:45.901] Resolved: FALSE
[10:51:45.901] Value: <not collected>
[10:51:45.901] Conditions captured: <none>
[10:51:45.901] Early signaling: FALSE
[10:51:45.901] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:45.901] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:45.914] Chunk #2 of 2 ... DONE
[10:51:45.914] Launching 2 futures (chunks) ... DONE
[10:51:45.914] Resolving 2 futures (chunks) ...
[10:51:45.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  value() on list ...
[10:51:45.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  recursive: 0
[10:51:45.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  length: 2
[10:51:45.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  
[10:51:45.915] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Number of remaining objects: 2
[10:51:45.915] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  checking value #1 ...
[10:51:45.915] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  'obj' is MultisessionFuture
[10:51:45.915] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  isFutureResolved() ...
[10:51:45.915] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  assertValidConnection() ...
[10:51:45.915] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  assertValidConnection() ... done
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ...
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  [1] TRUE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  received data:
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  List of 5
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA   $ type   : chr "VALUE"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA   $ value  :List of 13
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ value            :List of 6
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ visible          : logi TRUE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ stdout           : chr ""
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ conditions       : list()
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ rng              : logi FALSE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ misuseGlobalEnv  : NULL
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ misuseConnections:List of 3
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ added   : NULL
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ removed : NULL
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ replaced: NULL
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ misuseDevices    : NULL
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "source")=List of 5
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ pid   : int 66393
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ random: int 2147483647
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ r_info           :List of 4
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ : int [1:3] 4 5 0
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ os           : chr "unix"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ os_name      : chr "Linux"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ captures_utf8: logi TRUE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ version          : chr "1.8"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr "FutureResult"
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA   $ success: logi TRUE
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA   $ time   : 'proc_time' Named num [1:5] 0.004 0.001 0.005 0 0
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:45.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA   $ tag    : NULL
[10:51:45.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Received FutureResult
[10:51:45.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:45.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Removed future from position #1
[10:51:45.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:45.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:45.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Erased future from future backend
[10:51:45.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  isFutureResolved() ... done
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  MultisessionFuture #1
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  nx: 2
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relay: TRUE
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  signal: TRUE
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  force: TRUE
[10:51:45.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relayed: [n=2] FALSE, FALSE
[10:51:45.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  queued futures: [n=2] FALSE, FALSE
[10:51:45.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  until=1
[10:51:45.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relaying element #1
[10:51:45.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.932] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.932] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.932] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.932] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.932] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.932] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.932] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.932] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.932] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:45.932] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  value(<MultisessionFuture>, ...) ...
[10:51:45.933] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.933] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.933] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.933] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.933] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.933] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.933] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  value: <list>
[10:51:45.933] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  value(<MultisessionFuture>, ...) ... done
[10:51:45.933] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:45.933] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  nx: 2
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relay: TRUE
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  signal: TRUE
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  force: TRUE
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  until=2
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relaying element #2
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.934] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  signalConditionsASAP(NULL, pos=1) ... done
[10:51:45.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  length: 1 (resolved future 1)
[10:51:45.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  checking value #1 ... done
[10:51:45.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  checking value #2 ...
[10:51:45.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  'obj' is MultisessionFuture
[10:51:45.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  isFutureResolved() ...
[10:51:45.935] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  assertValidConnection() ...
[10:51:45.936] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:45.936] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  assertValidConnection() ... done
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ...
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  [1] TRUE
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  received data:
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  List of 5
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA   $ type   : chr "VALUE"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA   $ value  :List of 13
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ value            :List of 5
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ : logi TRUE
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ visible          : logi TRUE
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ stdout           : chr ""
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ conditions       : list()
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ rng              : logi FALSE
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ misuseGlobalEnv  : NULL
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ misuseConnections:List of 3
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ added   : NULL
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ removed : NULL
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ replaced: NULL
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ misuseDevices    : NULL
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:45"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "source")=List of 5
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ pid   : int 66394
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ random: int 2147483647
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ r_info           :List of 4
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. .. ..$ : int [1:3] 4 5 0
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ os           : chr "unix"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ os_name      : chr "Linux"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    .. ..$ captures_utf8: logi TRUE
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..$ version          : chr "1.8"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr "FutureResult"
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA   $ success: logi TRUE
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:45.944] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA   $ tag    : NULL
[10:51:45.959] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Received FutureResult
[10:51:45.959] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:45.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Removed future from position #1
[10:51:45.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:45.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:45.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Erased future from future backend
[10:51:45.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.960] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  isFutureResolved() ... done
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  MultisessionFuture #2
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  nx: 2
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relay: TRUE
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  signal: TRUE
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  force: TRUE
[10:51:45.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:45.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:45.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  until=2
[10:51:45.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relaying element #2
[10:51:45.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.962] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:45.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  value(<MultisessionFuture>, ...) ...
[10:51:45.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:45.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:45.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:45.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  value: <list>
[10:51:45.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  value(<MultisessionFuture>, ...) ... done
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  nx: 2
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relay: TRUE
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  signal: TRUE
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  force: TRUE
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  until=2
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.965] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.966] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:45.966] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  length: 0 (resolved future 2)
[10:51:45.966] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  checking value #2 ... done
[10:51:45.966] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Relaying remaining futures ...
[10:51:45.966] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  signalConditionsASAP(NULL, pos=0) ...
[10:51:45.966] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  nx: 2
[10:51:45.966] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relay: TRUE
[10:51:45.966] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:45.966] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  signal: TRUE
[10:51:45.966] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:45.967] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  force: TRUE
[10:51:45.967] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.967] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:45.967] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:45.967] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:45.967] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  signalConditionsASAP(NULL, pos=0) ... done
[10:51:45.967] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Relaying remaining futures ... done
[10:51:45.967] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  value() on list ... done
[10:51:45.967]  - Number of value chunks collected: 2
[10:51:45.968] Resolving 2 futures (chunks) ... DONE
[10:51:45.968] Reducing values from 2 chunks ...
[10:51:45.968]  - Number of values collected after concatenation: 11
[10:51:45.968]  - Number of values expected: 11
[10:51:45.968] Reducing values from 2 chunks ... DONE
[10:51:45.968] future_lapply() ... DONE
 Named logi [1:11] TRUE TRUE TRUE TRUE TRUE TRUE ...
 - attr(*, "names")= chr [1:11] "mpg" "cyl" "disp" "hp" ...
- future_vapply(x, ...) where length(x) != length(as.list(x)) ...
[10:51:45.969] future_lapply() ...
[10:51:45.971] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.971] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:45.971] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.972] Number of chunks: 2
[10:51:45.972] getGlobalsAndPackagesXApply() ...
[10:51:45.972]  - future.globals: TRUE
[10:51:45.972] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getGlobalsAndPackages() ...
[10:51:45.972] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Searching for globals ...
[10:51:45.976] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:45.976] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Searching for globals ... DONE
[10:51:45.976] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Resolving globals: FALSE
[10:51:45.976] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Search for packages associated with the globals ...
[10:51:45.976] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:45.977] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Packages: [2] ‘base’, ‘future.apply’
[10:51:45.977] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Search for packages associated with the globals ... DONE
[10:51:45.977] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  The total size of the 7 globals is 11.92 KiB (12201 bytes)
[10:51:45.978] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  The total size of the 7 globals exported for future expression (‘FUN()’) is 11.92 KiB The three largest globals are ‘stop_if_not’ (4.51 KiB of class ‘function’), ‘FUN’ (3.92 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:45.978] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Packages after dropping 'base': [1] ‘future.apply’
[10:51:45.978] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:45.978] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:45.978] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  packages: [1] ‘future.apply’
[10:51:45.978] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getGlobalsAndPackages() ... done
[10:51:45.978]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:45.979]  - needed namespaces: [n=1] ‘future.apply’
[10:51:45.979] Finding globals ... DONE
[10:51:45.979]  - use_args: TRUE
[10:51:45.979]  - Getting '...' globals ...
[10:51:45.979] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:45.979] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  recursive: 0
[10:51:45.979] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  length: 1
[10:51:45.979] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  elements: ‘...’
[10:51:45.980] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  'obj' is DotDotDotList
[10:51:45.980] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  resolve(obj, ...) ...
[10:51:45.980] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  resolve(obj, ...) ... done
[10:51:45.980] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  length: 0 (resolved future 1)
[10:51:45.980] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:45.980]    - '...' content: [n=0] 
[10:51:45.980] List of 1
[10:51:45.980]  $ ...: list()
[10:51:45.980]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:45.980]  - attr(*, "where")=List of 1
[10:51:45.980]   ..$ ...:<environment: 0x55d46519e3e0> 
[10:51:45.980]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:45.980]  - attr(*, "resolved")= logi TRUE
[10:51:45.980]  - attr(*, "total_size")= num NA
[10:51:45.983]  - Getting '...' globals ... DONE
[10:51:45.983] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:45.983] List of 8
[10:51:45.983]  $ ...future.FUN:function (x, ...)  
[10:51:45.983]  $ x_FUN        :function (x)  
[10:51:45.983]  $ times        : int 1
[10:51:45.983]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:45.983]  $ stop_if_not  :function (...)  
[10:51:45.983]  $ dim          : NULL
[10:51:45.983]  $ valid_types  : chr [1:2] "logical" "integer"
[10:51:45.983]  $ ...          : list()
[10:51:45.983]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:45.983]  - attr(*, "where")=List of 8
[10:51:45.983]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:45.983]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:45.983]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:45.983]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:45.983]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:45.983]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:45.983]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:45.983]   ..$ ...          :<environment: 0x55d46519e3e0> 
[10:51:45.983]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:45.983]  - attr(*, "resolved")= logi FALSE
[10:51:45.983]  - attr(*, "total_size")= num 22016
[10:51:45.989] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:45.989] getGlobalsAndPackagesXApply() ... DONE
[10:51:45.989] Number of futures (= number of chunks): 2
[10:51:45.989] Launching 2 futures (chunks) ...
[10:51:45.989] Chunk #1 of 2 ...
[10:51:45.989]  - Finding globals in 'X' for chunk #1 ...
[10:51:45.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getGlobalsAndPackages() ...
[10:51:45.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Searching for globals ...
[10:51:45.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  globals found: [0] 
[10:51:45.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Searching for globals ... DONE
[10:51:45.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  globals: [0] <none>
[10:51:45.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  packages: [0] <none>
[10:51:45.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getGlobalsAndPackages() ... done
[10:51:45.990]    + additional globals found: [n=0] 
[10:51:45.991]    + additional namespaces needed: [n=0] 
[10:51:45.991]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:45.991]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:45.991]  - seeds: <none>
[10:51:45.991]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getGlobalsAndPackages() ...
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Resolving globals: FALSE
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Tweak future expression to call with '...' arguments ...
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  {
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA      "# expression in do.call(), because function called uses '...'  "
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA      "# as a global variable                                         "
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA      do.call(function(...) {
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          "# without having an '...' argument. This means '...' is treated"
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          "# as a global variable. This may happen when FUN() is an       "
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          "# anonymous function.                                          "
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          "#                                                              "
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          "# If an anonymous function, we will make sure to restore the   "
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          "# function environment of FUN() to the calling environment.    "
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          "# global environment, which is where globals are written.      "
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          penv <- env <- environment(...future.FUN)
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          repeat {
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              if (identical(env, globalenv()) || identical(env, 
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA                  emptyenv())) 
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA                  break
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              penv <- env
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              env <- parent.env(env)
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          }
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          if (identical(penv, globalenv())) {
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              environment(...future.FUN) <- environment()
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          }
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              !isNamespace(penv)) {
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              parent.env(penv) <- environment()
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          }
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          {
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA                  on.exit(options(oopts), add = TRUE)
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              }
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              {
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA                    ...future.FUN(...future.X_jj, ...)
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA                  })
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA              }
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA          }
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA      }, args = future.call.arguments)
[10:51:45.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  }
[10:51:45.992] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Tweak future expression to call with '...' arguments ... DONE
[10:51:45.992] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Search for packages associated with the globals ...
[10:51:45.992] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Packages associated with globals: [1] ‘future.apply’
[10:51:45.993] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Packages: [1] ‘future.apply’
[10:51:45.993] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Search for packages associated with the globals ... DONE
[10:51:45.993] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Packages after dropping 'base': [1] ‘future.apply’
[10:51:45.993] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:45.993] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:45.993] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  packages: [1] ‘future.apply’
[10:51:45.994] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  getGlobalsAndPackages() ... done
[10:51:45.994] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  run() for Future (‘Future’) ...
[10:51:45.994] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  state: ‘created’
[10:51:45.994] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:45.994] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:45.994] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  Using MultisessionFutureBackend ...
[10:51:45.994] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Launching futures ...
[10:51:45.994] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ...
[10:51:45.995] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Workers: [n=2]
[10:51:45.995] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:45.996] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:45.996] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  requestWorker() ...
[10:51:45.997] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  requestNode() ...
[10:51:45.997] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Number of workers: 2
[10:51:45.997] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Polling for a free worker ...
[10:51:45.997] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.997] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.997] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:45.997] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.997] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Total time: 0
[10:51:45.997] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Polling for a free worker ... done
[10:51:45.997] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:45.998] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:45.998] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:45.998] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:45.998] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Index of first available worker: 1
[10:51:45.998] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Validate that the worker is functional ...
[10:51:46.078] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Worker is functional
[10:51:46.078] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  requestNode() ... done
[10:51:46.078] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:46.078] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  requestWorker() ... done
[10:51:46.078] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ...
[10:51:46.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ... done
[10:51:46.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  launchFuture() ...
[10:51:46.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:46.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  getFutureData() ...
[10:51:46.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ...
[10:51:46.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:46.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ... done
[10:51:46.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ...
[10:51:46.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ... done
[10:51:46.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ...
[10:51:46.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:46.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:46.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ... done
[10:51:46.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  getFutureData() ... done
[10:51:46.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:46.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Appended future to position #1
[10:51:46.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:46.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:46.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  launchFuture() ... done
[10:51:46.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  MultisessionFuture started
[10:51:46.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ... done
[10:51:46.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Launching futures ... done
[10:51:46.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:46.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Using MultisessionFutureBackend ... done
[10:51:46.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  run() for Future (‘MultisessionFuture’) ... done
[10:51:46.082] Created future:
[10:51:46.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  isFutureResolved() ...
[10:51:46.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  assertValidConnection() ...
[10:51:46.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:46.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  assertValidConnection() ... done
[10:51:46.095] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  isFutureResolved() ... done
[10:51:46.083] MultisessionFuture:
[10:51:46.083] Label: ‘future_vapply-1’
[10:51:46.083] Expression:
[10:51:46.083] {
[10:51:46.083]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:46.083]     "# expression in do.call(), because function called uses '...'  "
[10:51:46.083]     "# as a global variable                                         "
[10:51:46.083]     do.call(function(...) {
[10:51:46.083]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:46.083]         "# without having an '...' argument. This means '...' is treated"
[10:51:46.083]         "# as a global variable. This may happen when FUN() is an       "
[10:51:46.083]         "# anonymous function.                                          "
[10:51:46.083]         "#                                                              "
[10:51:46.083]         "# If an anonymous function, we will make sure to restore the   "
[10:51:46.083]         "# function environment of FUN() to the calling environment.    "
[10:51:46.083]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:46.083]         "# global environment, which is where globals are written.      "
[10:51:46.083]         penv <- env <- environment(...future.FUN)
[10:51:46.083]         repeat {
[10:51:46.083]             if (identical(env, globalenv()) || identical(env, 
[10:51:46.083]                 emptyenv())) 
[10:51:46.083]                 break
[10:51:46.083]             penv <- env
[10:51:46.083]             env <- parent.env(env)
[10:51:46.083]         }
[10:51:46.083]         if (identical(penv, globalenv())) {
[10:51:46.083]             environment(...future.FUN) <- environment()
[10:51:46.083]         }
[10:51:46.083]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:46.083]             !isNamespace(penv)) {
[10:51:46.083]             parent.env(penv) <- environment()
[10:51:46.083]         }
[10:51:46.083]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:46.083]         {
[10:51:46.083]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:46.083]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:46.083]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:46.083]                 on.exit(options(oopts), add = TRUE)
[10:51:46.083]             }
[10:51:46.083]             {
[10:51:46.083]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:46.083]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:46.083]                   ...future.FUN(...future.X_jj, ...)
[10:51:46.083]                 })
[10:51:46.083]             }
[10:51:46.083]         }
[10:51:46.083]     }, args = future.call.arguments)
[10:51:46.083] }
[10:51:46.083] Lazy evaluation: FALSE
[10:51:46.083] Asynchronous evaluation: TRUE
[10:51:46.083] Local evaluation: TRUE
[10:51:46.083] Environment: R_GlobalEnv
[10:51:46.083] Capture standard output: TRUE
[10:51:46.083] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:46.083] Immediate condition classes: ‘immediateCondition’
[10:51:46.083] Globals: 11 objects totaling 12.15 KiB (function ‘...future.FUN’ of 3.91 KiB, function ‘x_FUN’ of 37 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:46.083] Packages: 1 packages (‘future.apply’)
[10:51:46.083] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:46.083] Resolved: FALSE
[10:51:46.083] Value: <not collected>
[10:51:46.083] Conditions captured: <none>
[10:51:46.083] Early signaling: FALSE
[10:51:46.083] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:46.083] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:46.095] Chunk #1 of 2 ... DONE
[10:51:46.096] Chunk #2 of 2 ...
[10:51:46.096]  - Finding globals in 'X' for chunk #2 ...
[10:51:46.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getGlobalsAndPackages() ...
[10:51:46.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Searching for globals ...
[10:51:46.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  globals found: [0] 
[10:51:46.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Searching for globals ... DONE
[10:51:46.096] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  globals: [0] <none>
[10:51:46.097] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  packages: [0] <none>
[10:51:46.097] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getGlobalsAndPackages() ... done
[10:51:46.097]    + additional globals found: [n=0] 
[10:51:46.097]    + additional namespaces needed: [n=0] 
[10:51:46.097]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:46.097]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:46.097]  - seeds: <none>
[10:51:46.097]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:46.097] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getGlobalsAndPackages() ...
[10:51:46.097] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Resolving globals: FALSE
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Tweak future expression to call with '...' arguments ...
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  {
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA      "# expression in do.call(), because function called uses '...'  "
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA      "# as a global variable                                         "
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA      do.call(function(...) {
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          "# without having an '...' argument. This means '...' is treated"
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          "# as a global variable. This may happen when FUN() is an       "
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          "# anonymous function.                                          "
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          "#                                                              "
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          "# If an anonymous function, we will make sure to restore the   "
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          "# function environment of FUN() to the calling environment.    "
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          "# global environment, which is where globals are written.      "
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          penv <- env <- environment(...future.FUN)
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          repeat {
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              if (identical(env, globalenv()) || identical(env, 
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA                  emptyenv())) 
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA                  break
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              penv <- env
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              env <- parent.env(env)
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          }
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          if (identical(penv, globalenv())) {
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              environment(...future.FUN) <- environment()
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          }
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              !isNamespace(penv)) {
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              parent.env(penv) <- environment()
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          }
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          {
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA                  on.exit(options(oopts), add = TRUE)
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              }
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              {
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA                    ...future.FUN(...future.X_jj, ...)
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA                  })
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA              }
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA          }
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA      }, args = future.call.arguments)
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  }
[10:51:46.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Tweak future expression to call with '...' arguments ... DONE
[10:51:46.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Search for packages associated with the globals ...
[10:51:46.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Packages associated with globals: [1] ‘future.apply’
[10:51:46.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Packages: [1] ‘future.apply’
[10:51:46.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Search for packages associated with the globals ... DONE
[10:51:46.099] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Packages after dropping 'base': [1] ‘future.apply’
[10:51:46.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:46.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:46.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  packages: [1] ‘future.apply’
[10:51:46.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  getGlobalsAndPackages() ... done
[10:51:46.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  run() for Future (‘Future’) ...
[10:51:46.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  state: ‘created’
[10:51:46.100] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  Using MultisessionFutureBackend ...
[10:51:46.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Launching futures ...
[10:51:46.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ...
[10:51:46.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Workers: [n=2]
[10:51:46.101] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:46.103] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:46.103] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  requestWorker() ...
[10:51:46.103] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  requestNode() ...
[10:51:46.103] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of workers: 2
[10:51:46.103] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Polling for a free worker ...
[10:51:46.103] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Total time: 0
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Polling for a free worker ... done
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Index of first available worker: 2
[10:51:46.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Validate that the worker is functional ...
[10:51:46.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Worker is functional
[10:51:46.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  requestNode() ... done
[10:51:46.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:46.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  requestWorker() ... done
[10:51:46.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ...
[10:51:46.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ... done
[10:51:46.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  launchFuture() ...
[10:51:46.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:46.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureData() ...
[10:51:46.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ...
[10:51:46.185] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:46.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ... done
[10:51:46.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ...
[10:51:46.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ... done
[10:51:46.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ...
[10:51:46.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:46.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:46.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ... done
[10:51:46.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureData() ... done
[10:51:46.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:46.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Appended future to position #2
[10:51:46.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 2
[10:51:46.187] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:46.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  launchFuture() ... done
[10:51:46.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  MultisessionFuture started
[10:51:46.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ... done
[10:51:46.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Launching futures ... done
[10:51:46.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:46.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Using MultisessionFutureBackend ... done
[10:51:46.188] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  run() for Future (‘MultisessionFuture’) ... done
[10:51:46.188] Created future:
[10:51:46.190] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  isFutureResolved() ...
[10:51:46.190] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  assertValidConnection() ...
[10:51:46.190] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:46.190] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  assertValidConnection() ... done
[10:51:46.201] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  isFutureResolved() ... done
[10:51:46.188] MultisessionFuture:
[10:51:46.188] Label: ‘future_vapply-2’
[10:51:46.188] Expression:
[10:51:46.188] {
[10:51:46.188]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:46.188]     "# expression in do.call(), because function called uses '...'  "
[10:51:46.188]     "# as a global variable                                         "
[10:51:46.188]     do.call(function(...) {
[10:51:46.188]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:46.188]         "# without having an '...' argument. This means '...' is treated"
[10:51:46.188]         "# as a global variable. This may happen when FUN() is an       "
[10:51:46.188]         "# anonymous function.                                          "
[10:51:46.188]         "#                                                              "
[10:51:46.188]         "# If an anonymous function, we will make sure to restore the   "
[10:51:46.188]         "# function environment of FUN() to the calling environment.    "
[10:51:46.188]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:46.188]         "# global environment, which is where globals are written.      "
[10:51:46.188]         penv <- env <- environment(...future.FUN)
[10:51:46.188]         repeat {
[10:51:46.188]             if (identical(env, globalenv()) || identical(env, 
[10:51:46.188]                 emptyenv())) 
[10:51:46.188]                 break
[10:51:46.188]             penv <- env
[10:51:46.188]             env <- parent.env(env)
[10:51:46.188]         }
[10:51:46.188]         if (identical(penv, globalenv())) {
[10:51:46.188]             environment(...future.FUN) <- environment()
[10:51:46.188]         }
[10:51:46.188]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:46.188]             !isNamespace(penv)) {
[10:51:46.188]             parent.env(penv) <- environment()
[10:51:46.188]         }
[10:51:46.188]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:46.188]         {
[10:51:46.188]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:46.188]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:46.188]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:46.188]                 on.exit(options(oopts), add = TRUE)
[10:51:46.188]             }
[10:51:46.188]             {
[10:51:46.188]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:46.188]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:46.188]                   ...future.FUN(...future.X_jj, ...)
[10:51:46.188]                 })
[10:51:46.188]             }
[10:51:46.188]         }
[10:51:46.188]     }, args = future.call.arguments)
[10:51:46.188] }
[10:51:46.188] Lazy evaluation: FALSE
[10:51:46.188] Asynchronous evaluation: TRUE
[10:51:46.188] Local evaluation: TRUE
[10:51:46.188] Environment: R_GlobalEnv
[10:51:46.188] Capture standard output: TRUE
[10:51:46.188] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:46.188] Immediate condition classes: ‘immediateCondition’
[10:51:46.188] Globals: 11 objects totaling 12.17 KiB (function ‘...future.FUN’ of 3.91 KiB, function ‘x_FUN’ of 37 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:46.188] Packages: 1 packages (‘future.apply’)
[10:51:46.188] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:46.188] Resolved: FALSE
[10:51:46.188] Value: <not collected>
[10:51:46.188] Conditions captured: <none>
[10:51:46.188] Early signaling: FALSE
[10:51:46.188] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:46.188] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:46.201] Chunk #2 of 2 ... DONE
[10:51:46.201] Launching 2 futures (chunks) ... DONE
[10:51:46.202] Resolving 2 futures (chunks) ...
[10:51:46.202] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  value() on list ...
[10:51:46.202] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  recursive: 0
[10:51:46.202] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  length: 2
[10:51:46.202] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  
[10:51:46.202] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Number of remaining objects: 2
[10:51:46.202] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  checking value #1 ...
[10:51:46.202] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  'obj' is MultisessionFuture
[10:51:46.202] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  isFutureResolved() ...
[10:51:46.203] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  assertValidConnection() ...
[10:51:46.203] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:46.203] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  assertValidConnection() ... done
[10:51:46.203] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ...
[10:51:46.203] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  [1] TRUE
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  received data:
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  List of 5
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA   $ type   : chr "VALUE"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA   $ value  :List of 13
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ value            :List of 1
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ : int 1
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ visible          : logi TRUE
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ stdout           : chr ""
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ conditions       : list()
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ rng              : logi FALSE
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseGlobalEnv  : NULL
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseConnections:List of 3
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ added   : NULL
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ removed : NULL
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ replaced: NULL
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseDevices    : NULL
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:46"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:46"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "source")=List of 5
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ pid   : int 66393
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ random: int 2147483647
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ r_info           :List of 4
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ : int [1:3] 4 5 0
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ os           : chr "unix"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ os_name      : chr "Linux"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ captures_utf8: logi TRUE
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ version          : chr "1.8"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr "FutureResult"
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA   $ success: logi TRUE
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA   $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.004 0 0
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:46.204] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA   $ tag    : NULL
[10:51:46.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Received FutureResult
[10:51:46.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:46.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Removed future from position #1
[10:51:46.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:46.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:46.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Erased future from future backend
[10:51:46.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  isFutureResolved() ... done
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  MultisessionFuture #1
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  nx: 2
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relay: TRUE
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  signal: TRUE
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:46.219] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  force: TRUE
[10:51:46.220] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] FALSE, FALSE
[10:51:46.220] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] FALSE, FALSE
[10:51:46.220] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  until=1
[10:51:46.220] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relaying element #1
[10:51:46.220] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.220] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.220] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.220] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.220] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.220] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:46.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:46.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:46.221] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  value(<MultisessionFuture>, ...) ...
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  value: <list>
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  value(<MultisessionFuture>, ...) ... done
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  nx: 2
[10:51:46.222] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relay: TRUE
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  signal: TRUE
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  force: TRUE
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  until=2
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relaying element #2
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:46.223] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  signalConditionsASAP(NULL, pos=1) ... done
[10:51:46.224] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  length: 1 (resolved future 1)
[10:51:46.224] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  checking value #1 ... done
[10:51:46.224] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  checking value #2 ...
[10:51:46.224] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  'obj' is MultisessionFuture
[10:51:46.224] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  isFutureResolved() ...
[10:51:46.224] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  assertValidConnection() ...
[10:51:46.224] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:46.225] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  assertValidConnection() ... done
[10:51:46.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ...
[10:51:46.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:46.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  [1] TRUE
[10:51:46.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  received data:
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  List of 5
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA   $ type   : chr "VALUE"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA   $ value  :List of 13
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ value            :List of 2
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ : int 1
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ : int 1
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ visible          : logi TRUE
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ stdout           : chr ""
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ conditions       : list()
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ rng              : logi FALSE
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseGlobalEnv  : NULL
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseConnections:List of 3
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ added   : NULL
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ removed : NULL
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ replaced: NULL
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseDevices    : NULL
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:46"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:46"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "source")=List of 5
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ pid   : int 66394
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ random: int 2147483647
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ r_info           :List of 4
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ : int [1:3] 4 5 0
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ os           : chr "unix"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ os_name      : chr "Linux"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ captures_utf8: logi TRUE
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..$ version          : chr "1.8"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr "FutureResult"
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA   $ success: logi TRUE
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:46.232] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA   $ tag    : NULL
[10:51:46.242] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Received FutureResult
[10:51:46.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:46.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Removed future from position #1
[10:51:46.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:46.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:46.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Erased future from future backend
[10:51:46.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:46.243] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  isFutureResolved() ... done
[10:51:46.244] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  MultisessionFuture #2
[10:51:46.244] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:46.244] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  nx: 2
[10:51:46.244] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relay: TRUE
[10:51:46.244] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:46.244] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  signal: TRUE
[10:51:46.244] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:46.244] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  force: TRUE
[10:51:46.244] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:46.244] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:46.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  until=2
[10:51:46.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relaying element #2
[10:51:46.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:46.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:46.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:46.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  value(<MultisessionFuture>, ...) ...
[10:51:46.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  value: <list>
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  value(<MultisessionFuture>, ...) ... done
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  nx: 2
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relay: TRUE
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:46.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  signal: TRUE
[10:51:46.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:46.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  force: TRUE
[10:51:46.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:46.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:46.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  until=2
[10:51:46.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:46.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:46.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:46.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  length: 0 (resolved future 2)
[10:51:46.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  checking value #2 ... done
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Relaying remaining futures ...
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  signalConditionsASAP(NULL, pos=0) ...
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  nx: 2
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relay: TRUE
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  signal: TRUE
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  force: TRUE
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:46.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, TRUE
[10:51:46.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, TRUE
[10:51:46.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  signalConditionsASAP(NULL, pos=0) ... done
[10:51:46.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Relaying remaining futures ... done
[10:51:46.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  value() on list ... done
[10:51:46.250]  - Number of value chunks collected: 2
[10:51:46.250] Resolving 2 futures (chunks) ... DONE
[10:51:46.250] Reducing values from 2 chunks ...
[10:51:46.250]  - Number of values collected after concatenation: 3
[10:51:46.250]  - Number of values expected: 3
[10:51:46.250] Reducing values from 2 chunks ... DONE
[10:51:46.251] future_lapply() ... DONE
- exceptions ...
[10:51:46.251] future_lapply() ...
[10:51:46.253] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.253] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:46.253] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.254] Number of chunks: 2
[10:51:46.254] getGlobalsAndPackagesXApply() ...
[10:51:46.254]  - future.globals: TRUE
[10:51:46.254] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getGlobalsAndPackages() ...
[10:51:46.254] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Searching for globals ...
[10:51:46.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  globals found: [16] ‘FUN’, ‘{’, ‘<-’, ‘x_FUN’, ‘if’, ‘!=’, ‘length’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘all’, ‘==’, ‘dim’, ‘%in%’, ‘typeof’, ‘valid_types’
[10:51:46.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Searching for globals ... DONE
[10:51:46.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Resolving globals: FALSE
[10:51:46.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Search for packages associated with the globals ...
[10:51:46.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:46.259] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Packages: [2] ‘base’, ‘future.apply’
[10:51:46.259] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Search for packages associated with the globals ... DONE
[10:51:46.259] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  The total size of the 7 globals is 12.81 KiB (13119 bytes)
[10:51:46.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  The total size of the 7 globals exported for future expression (‘FUN()’) is 12.81 KiB The three largest globals are ‘FUN’ (4.65 KiB of class ‘function’), ‘stop_if_not’ (4.51 KiB of class ‘function’) and ‘stopf’ (3.33 KiB of class ‘function’)
[10:51:46.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Packages after dropping 'base': [1] ‘future.apply’
[10:51:46.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:46.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  globals: [7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:46.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  packages: [1] ‘future.apply’
[10:51:46.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getGlobalsAndPackages() ... done
[10:51:46.261]  - globals found/used: [n=7] ‘FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’
[10:51:46.261]  - needed namespaces: [n=1] ‘future.apply’
[10:51:46.261] Finding globals ... DONE
[10:51:46.261]  - use_args: TRUE
[10:51:46.261]  - Getting '...' globals ...
[10:51:46.261] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:46.261] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  recursive: 0
[10:51:46.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  length: 1
[10:51:46.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  elements: ‘...’
[10:51:46.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  'obj' is DotDotDotList
[10:51:46.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  resolve(obj, ...) ...
[10:51:46.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  resolve(obj, ...) ... done
[10:51:46.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  length: 0 (resolved future 1)
[10:51:46.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:46.262]    - '...' content: [n=0] 
[10:51:46.262] List of 1
[10:51:46.262]  $ ...: list()
[10:51:46.262]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:46.262]  - attr(*, "where")=List of 1
[10:51:46.262]   ..$ ...:<environment: 0x55d465f17858> 
[10:51:46.262]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:46.262]  - attr(*, "resolved")= logi TRUE
[10:51:46.262]  - attr(*, "total_size")= num NA
[10:51:46.265]  - Getting '...' globals ... DONE
[10:51:46.265] Globals to be used in all futures (chunks): [n=8] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’
[10:51:46.265] List of 8
[10:51:46.265]  $ ...future.FUN:function (x, ...)  
[10:51:46.265]  $ x_FUN        :function (x)  
[10:51:46.265]  $ times        : int 2
[10:51:46.265]  $ stopf        :function (fmt, ..., call. = TRUE, domain = NULL)  
[10:51:46.265]  $ stop_if_not  :function (...)  
[10:51:46.265]  $ dim          : NULL
[10:51:46.265]  $ valid_types  : chr [1:3] "logical" "integer" "double"
[10:51:46.265]  $ ...          : list()
[10:51:46.265]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:46.265]  - attr(*, "where")=List of 8
[10:51:46.265]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:46.265]   ..$ x_FUN        :<environment: R_EmptyEnv> 
[10:51:46.265]   ..$ times        :<environment: R_EmptyEnv> 
[10:51:46.265]   ..$ stopf        :<environment: R_EmptyEnv> 
[10:51:46.265]   ..$ stop_if_not  :<environment: R_EmptyEnv> 
[10:51:46.265]   ..$ dim          :<environment: R_EmptyEnv> 
[10:51:46.265]   ..$ valid_types  :<environment: R_EmptyEnv> 
[10:51:46.265]   ..$ ...          :<environment: 0x55d465f17858> 
[10:51:46.265]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:46.265]  - attr(*, "resolved")= logi FALSE
[10:51:46.265]  - attr(*, "total_size")= num 23676
[10:51:46.271] Packages to be attached in all futures: [n=1] ‘future.apply’
[10:51:46.271] getGlobalsAndPackagesXApply() ... DONE
[10:51:46.271] Number of futures (= number of chunks): 2
[10:51:46.271] Launching 2 futures (chunks) ...
[10:51:46.272] Chunk #1 of 2 ...
[10:51:46.272]  - Finding globals in 'X' for chunk #1 ...
[10:51:46.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getGlobalsAndPackages() ...
[10:51:46.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Searching for globals ...
[10:51:46.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  globals found: [0] 
[10:51:46.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Searching for globals ... DONE
[10:51:46.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  globals: [0] <none>
[10:51:46.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  packages: [0] <none>
[10:51:46.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getGlobalsAndPackages() ... done
[10:51:46.273]    + additional globals found: [n=0] 
[10:51:46.273]    + additional namespaces needed: [n=0] 
[10:51:46.273]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:46.273]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:46.273]  - seeds: <none>
[10:51:46.273]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:46.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getGlobalsAndPackages() ...
[10:51:46.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Resolving globals: FALSE
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Tweak future expression to call with '...' arguments ...
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  {
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA      "# expression in do.call(), because function called uses '...'  "
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA      "# as a global variable                                         "
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA      do.call(function(...) {
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          "# without having an '...' argument. This means '...' is treated"
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          "# as a global variable. This may happen when FUN() is an       "
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          "# anonymous function.                                          "
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          "#                                                              "
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          "# If an anonymous function, we will make sure to restore the   "
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          "# function environment of FUN() to the calling environment.    "
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          "# global environment, which is where globals are written.      "
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          penv <- env <- environment(...future.FUN)
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          repeat {
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              if (identical(env, globalenv()) || identical(env, 
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA                  emptyenv())) 
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA                  break
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              penv <- env
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              env <- parent.env(env)
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          }
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          if (identical(penv, globalenv())) {
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              environment(...future.FUN) <- environment()
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          }
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              !isNamespace(penv)) {
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              parent.env(penv) <- environment()
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          }
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          {
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA                  on.exit(options(oopts), add = TRUE)
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              }
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              {
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA                    ...future.FUN(...future.X_jj, ...)
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA                  })
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA              }
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA          }
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA      }, args = future.call.arguments)
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  }
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Tweak future expression to call with '...' arguments ... DONE
[10:51:46.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Search for packages associated with the globals ...
[10:51:46.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:46.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Packages: [2] ‘base’, ‘future.apply’
[10:51:46.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Search for packages associated with the globals ... DONE
[10:51:46.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Packages after dropping 'base': [1] ‘future.apply’
[10:51:46.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:46.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:46.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  packages: [1] ‘future.apply’
[10:51:46.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  getGlobalsAndPackages() ... done
[10:51:46.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  run() for Future (‘Future’) ...
[10:51:46.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  state: ‘created’
[10:51:46.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  Using MultisessionFutureBackend ...
[10:51:46.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Launching futures ...
[10:51:46.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ...
[10:51:46.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Workers: [n=2]
[10:51:46.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:46.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:46.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  requestWorker() ...
[10:51:46.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  requestNode() ...
[10:51:46.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of workers: 2
[10:51:46.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Polling for a free worker ...
[10:51:46.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Total time: 0
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Polling for a free worker ... done
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Index of first available worker: 1
[10:51:46.280] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Validate that the worker is functional ...
[10:51:46.366] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Worker is functional
[10:51:46.366] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  requestNode() ... done
[10:51:46.366] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:46.366] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  requestWorker() ... done
[10:51:46.367] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ...
[10:51:46.367] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ... done
[10:51:46.367] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  launchFuture() ...
[10:51:46.367] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:46.367] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureData() ...
[10:51:46.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ...
[10:51:46.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:46.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ... done
[10:51:46.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ...
[10:51:46.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ... done
[10:51:46.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ...
[10:51:46.368] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:46.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:46.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ... done
[10:51:46.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureData() ... done
[10:51:46.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:46.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Appended future to position #1
[10:51:46.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:46.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:46.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  launchFuture() ... done
[10:51:46.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  MultisessionFuture started
[10:51:46.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ... done
[10:51:46.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Launching futures ... done
[10:51:46.370] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:46.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Using MultisessionFutureBackend ... done
[10:51:46.371] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  run() for Future (‘MultisessionFuture’) ... done
[10:51:46.371] Created future:
[10:51:46.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  isFutureResolved() ...
[10:51:46.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  assertValidConnection() ...
[10:51:46.372] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:46.373] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  assertValidConnection() ... done
[10:51:46.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  isFutureResolved() ... done
[10:51:46.371] MultisessionFuture:
[10:51:46.371] Label: ‘future_vapply-1’
[10:51:46.371] Expression:
[10:51:46.371] {
[10:51:46.371]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:46.371]     "# expression in do.call(), because function called uses '...'  "
[10:51:46.371]     "# as a global variable                                         "
[10:51:46.371]     do.call(function(...) {
[10:51:46.371]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:46.371]         "# without having an '...' argument. This means '...' is treated"
[10:51:46.371]         "# as a global variable. This may happen when FUN() is an       "
[10:51:46.371]         "# anonymous function.                                          "
[10:51:46.371]         "#                                                              "
[10:51:46.371]         "# If an anonymous function, we will make sure to restore the   "
[10:51:46.371]         "# function environment of FUN() to the calling environment.    "
[10:51:46.371]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:46.371]         "# global environment, which is where globals are written.      "
[10:51:46.371]         penv <- env <- environment(...future.FUN)
[10:51:46.371]         repeat {
[10:51:46.371]             if (identical(env, globalenv()) || identical(env, 
[10:51:46.371]                 emptyenv())) 
[10:51:46.371]                 break
[10:51:46.371]             penv <- env
[10:51:46.371]             env <- parent.env(env)
[10:51:46.371]         }
[10:51:46.371]         if (identical(penv, globalenv())) {
[10:51:46.371]             environment(...future.FUN) <- environment()
[10:51:46.371]         }
[10:51:46.371]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:46.371]             !isNamespace(penv)) {
[10:51:46.371]             parent.env(penv) <- environment()
[10:51:46.371]         }
[10:51:46.371]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:46.371]         {
[10:51:46.371]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:46.371]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:46.371]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:46.371]                 on.exit(options(oopts), add = TRUE)
[10:51:46.371]             }
[10:51:46.371]             {
[10:51:46.371]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:46.371]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:46.371]                   ...future.FUN(...future.X_jj, ...)
[10:51:46.371]                 })
[10:51:46.371]             }
[10:51:46.371]         }
[10:51:46.371]     }, args = future.call.arguments)
[10:51:46.371] }
[10:51:46.371] Lazy evaluation: FALSE
[10:51:46.371] Asynchronous evaluation: TRUE
[10:51:46.371] Local evaluation: TRUE
[10:51:46.371] Environment: R_GlobalEnv
[10:51:46.371] Capture standard output: TRUE
[10:51:46.371] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:46.371] Immediate condition classes: ‘immediateCondition’
[10:51:46.371] Globals: 11 objects totaling 13.00 KiB (function ‘...future.FUN’ of 4.65 KiB, function ‘x_FUN’ of 185 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:46.371] Packages: 1 packages (‘future.apply’)
[10:51:46.371] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:46.371] Resolved: FALSE
[10:51:46.371] Value: <not collected>
[10:51:46.371] Conditions captured: <none>
[10:51:46.371] Early signaling: FALSE
[10:51:46.371] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:46.371] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:46.384] Chunk #1 of 2 ... DONE
[10:51:46.384] Chunk #2 of 2 ...
[10:51:46.384]  - Finding globals in 'X' for chunk #2 ...
[10:51:46.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getGlobalsAndPackages() ...
[10:51:46.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Searching for globals ...
[10:51:46.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  globals found: [0] 
[10:51:46.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Searching for globals ... DONE
[10:51:46.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  globals: [0] <none>
[10:51:46.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  packages: [0] <none>
[10:51:46.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getGlobalsAndPackages() ... done
[10:51:46.385]    + additional globals found: [n=0] 
[10:51:46.385]    + additional namespaces needed: [n=0] 
[10:51:46.385]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:46.385]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:46.385]  - seeds: <none>
[10:51:46.385]  - All globals exported: [n=11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getGlobalsAndPackages() ...
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  globals passed as-is: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Resolving globals: FALSE
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Tweak future expression to call with '...' arguments ...
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  {
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA      "# expression in do.call(), because function called uses '...'  "
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA      "# as a global variable                                         "
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA      do.call(function(...) {
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          "# without having an '...' argument. This means '...' is treated"
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          "# as a global variable. This may happen when FUN() is an       "
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          "# anonymous function.                                          "
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          "#                                                              "
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          "# If an anonymous function, we will make sure to restore the   "
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          "# function environment of FUN() to the calling environment.    "
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          "# global environment, which is where globals are written.      "
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          penv <- env <- environment(...future.FUN)
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          repeat {
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              if (identical(env, globalenv()) || identical(env, 
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA                  emptyenv())) 
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA                  break
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              penv <- env
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              env <- parent.env(env)
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          }
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          if (identical(penv, globalenv())) {
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              environment(...future.FUN) <- environment()
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          }
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              !isNamespace(penv)) {
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              parent.env(penv) <- environment()
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          }
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          {
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA                  on.exit(options(oopts), add = TRUE)
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              }
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              {
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA                    ...future.FUN(...future.X_jj, ...)
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA                  })
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA              }
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA          }
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA      }, args = future.call.arguments)
[10:51:46.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  }
[10:51:46.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Tweak future expression to call with '...' arguments ... DONE
[10:51:46.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Search for packages associated with the globals ...
[10:51:46.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Packages associated with globals: [2] ‘base’, ‘future.apply’
[10:51:46.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Packages: [2] ‘base’, ‘future.apply’
[10:51:46.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Search for packages associated with the globals ... DONE
[10:51:46.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Packages after dropping 'base': [1] ‘future.apply’
[10:51:46.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Packages after dropping non-attached packages: [1] ‘future.apply’
[10:51:46.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  globals: [11] ‘...future.FUN’, ‘x_FUN’, ‘times’, ‘stopf’, ‘stop_if_not’, ‘dim’, ‘valid_types’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:46.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  packages: [1] ‘future.apply’
[10:51:46.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  getGlobalsAndPackages() ... done
[10:51:46.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  run() for Future (‘Future’) ...
[10:51:46.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  state: ‘created’
[10:51:46.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  Using MultisessionFutureBackend ...
[10:51:46.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Launching futures ...
[10:51:46.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ...
[10:51:46.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Workers: [n=2]
[10:51:46.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:46.391] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry: ‘workers-7147b5da8f92e80f5ef9ace2ec84f2cc’
[10:51:46.391] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  requestWorker() ...
[10:51:46.391] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  requestNode() ...
[10:51:46.391] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of workers: 2
[10:51:46.391] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Polling for a free worker ...
[10:51:46.391] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:46.392] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:46.392] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:46.392] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:46.392] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Total time: 0
[10:51:46.392] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Polling for a free worker ... done
[10:51:46.392] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ...
[10:51:46.392] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Listing all futures
[10:51:46.392] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:46.392] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'list', earlySignal = 0) ... done
[10:51:46.392] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Index of first available worker: 2
[10:51:46.393] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Validate that the worker is functional ...
[10:51:46.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Worker is functional
[10:51:46.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  requestNode() ... done
[10:51:46.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:46.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  requestWorker() ... done
[10:51:46.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ...
[10:51:46.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  eraseGlobalEnvironment() ... done
[10:51:46.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  launchFuture() ...
[10:51:46.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:46.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureData() ...
[10:51:46.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ...
[10:51:46.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by the future expression (n = 1): ‘future.apply’
[10:51:46.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCore() ... done
[10:51:46.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ...
[10:51:46.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureCapture() ... done
[10:51:46.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ...
[10:51:46.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Getting stack without first strategy: [n=0] 
[10:51:46.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Packages needed by future strategies (n = 0): <none>
[10:51:46.476] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureContext() ... done
[10:51:46.476] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  getFutureData() ... done
[10:51:46.476] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ...
[10:51:46.476] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Appended future to position #2
[10:51:46.476] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 2
[10:51:46.476] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'add', earlySignal = 0) ... done
[10:51:46.477] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  launchFuture() ... done
[10:51:46.477] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  MultisessionFuture started
[10:51:46.477] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  launchFuture() for ClusterFutureBackend ... done
[10:51:46.477] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Launching futures ... done
[10:51:46.477] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:46.477] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Using MultisessionFutureBackend ... done
[10:51:46.477] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  run() for Future (‘MultisessionFuture’) ... done
[10:51:46.477] Created future:
[10:51:46.478] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  isFutureResolved() ...
[10:51:46.479] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  assertValidConnection() ...
[10:51:46.479] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:46.479] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  assertValidConnection() ... done
[10:51:46.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  isFutureResolved() ... done
[10:51:46.477] MultisessionFuture:
[10:51:46.477] Label: ‘future_vapply-2’
[10:51:46.477] Expression:
[10:51:46.477] {
[10:51:46.477]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:46.477]     "# expression in do.call(), because function called uses '...'  "
[10:51:46.477]     "# as a global variable                                         "
[10:51:46.477]     do.call(function(...) {
[10:51:46.477]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:46.477]         "# without having an '...' argument. This means '...' is treated"
[10:51:46.477]         "# as a global variable. This may happen when FUN() is an       "
[10:51:46.477]         "# anonymous function.                                          "
[10:51:46.477]         "#                                                              "
[10:51:46.477]         "# If an anonymous function, we will make sure to restore the   "
[10:51:46.477]         "# function environment of FUN() to the calling environment.    "
[10:51:46.477]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:46.477]         "# global environment, which is where globals are written.      "
[10:51:46.477]         penv <- env <- environment(...future.FUN)
[10:51:46.477]         repeat {
[10:51:46.477]             if (identical(env, globalenv()) || identical(env, 
[10:51:46.477]                 emptyenv())) 
[10:51:46.477]                 break
[10:51:46.477]             penv <- env
[10:51:46.477]             env <- parent.env(env)
[10:51:46.477]         }
[10:51:46.477]         if (identical(penv, globalenv())) {
[10:51:46.477]             environment(...future.FUN) <- environment()
[10:51:46.477]         }
[10:51:46.477]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:46.477]             !isNamespace(penv)) {
[10:51:46.477]             parent.env(penv) <- environment()
[10:51:46.477]         }
[10:51:46.477]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:46.477]         {
[10:51:46.477]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:46.477]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:46.477]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:46.477]                 on.exit(options(oopts), add = TRUE)
[10:51:46.477]             }
[10:51:46.477]             {
[10:51:46.477]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:46.477]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:46.477]                   ...future.FUN(...future.X_jj, ...)
[10:51:46.477]                 })
[10:51:46.477]             }
[10:51:46.477]         }
[10:51:46.477]     }, args = future.call.arguments)
[10:51:46.477] }
[10:51:46.477] Lazy evaluation: FALSE
[10:51:46.477] Asynchronous evaluation: TRUE
[10:51:46.477] Local evaluation: TRUE
[10:51:46.477] Environment: R_GlobalEnv
[10:51:46.477] Capture standard output: TRUE
[10:51:46.477] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:46.477] Immediate condition classes: ‘immediateCondition’
[10:51:46.477] Globals: 11 objects totaling 13.01 KiB (function ‘...future.FUN’ of 4.65 KiB, function ‘x_FUN’ of 185 bytes, integer ‘times’ of 35 bytes, function ‘stopf’ of 3.33 KiB, function ‘stop_if_not’ of 4.51 KiB, ...)
[10:51:46.477] Packages: 1 packages (‘future.apply’)
[10:51:46.477] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:46.477] Resolved: FALSE
[10:51:46.477] Value: <not collected>
[10:51:46.477] Conditions captured: <none>
[10:51:46.477] Early signaling: FALSE
[10:51:46.477] Owner process: 754703d95d959885e1d12431c94f4118
[10:51:46.477] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:46.490] Chunk #2 of 2 ... DONE
[10:51:46.490] Launching 2 futures (chunks) ... DONE
[10:51:46.490] Resolving 2 futures (chunks) ...
[10:51:46.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  value() on list ...
[10:51:46.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  recursive: 0
[10:51:46.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  length: 2
[10:51:46.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  
[10:51:46.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  Number of remaining objects: 2
[10:51:46.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  checking value #1 ...
[10:51:46.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  'obj' is MultisessionFuture
[10:51:46.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  isFutureResolved() ...
[10:51:46.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  assertValidConnection() ...
[10:51:46.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:46.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  assertValidConnection() ... done
[10:51:46.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ...
[10:51:46.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 1
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  [1] TRUE
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  received data:
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of 5
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ type   : chr "VALUE"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ value  :List of 13
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ value            : NULL
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ visible          : logi TRUE
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ stdout           : chr ""
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ conditions       :List of 1
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ :List of 5
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ condition:List of 2
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ message: chr "values must be length 2, but FUN(X[[ii]]) result is length 1"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ call   : NULL
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ calls    :List of 14
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(expr, envir = globalenv())
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(expr, envir = globalenv())
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language local({     { ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval.parent(substitute(eval(quote(expr), envir)))
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(expr, p)
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(expr, p)
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(quote({     { ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(quote({     { ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language do.call(function(...) {     "# future::getGlobalsAndPackages(): FUN() uses '...' internally " ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language (function (...)  { ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language lapply(seq_along(...future.elements_ii), FUN = function(jj) {     ...future.X_jj <- ...future.elements_ii[[jj]] ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language FUN(X[[i]], ...)
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language ...future.FUN(...future.X_jj, ...)
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language stopf("values must be length %d, but FUN(X[[ii]]) result is length %d",      times, length(value))
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ session  :List of 6
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ r         :List of 14
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ platform      : chr "x86_64-pc-linux-gnu"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ arch          : chr "x86_64"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ os            : chr "linux-gnu"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ system        : chr "x86_64, linux-gnu"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ status        : chr ""
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ major         : chr "4"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ minor         : chr "5.0"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ year          : chr "2025"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ month         : chr "04"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ day           : chr "11"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ svn rev       : chr "88135"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ language      : chr "R"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ version.string: chr "R version 4.5.0 (2025-04-11)"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ nickname      : chr "How About a Twenty-Six"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ locale    : chr "LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGE"| __truncated__
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ rngkind   : chr [1:3] "Mersenne-Twister" "Inversion" "Rejection"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ namespaces: chr [1:17] "compiler" "parallelly" "graphics" "tools" ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ search    : chr [1:11] ".GlobalEnv" "package:future.apply" "package:future" "package:stats" ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ system    : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ timestamp: POSIXct[1:1], format: "2025-05-06 10:51:46"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ signaled : int 0
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ rng              : logi FALSE
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseGlobalEnv  : NULL
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseConnections:List of 3
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ added   : NULL
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ removed : NULL
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ replaced: NULL
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseDevices    : NULL
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:46"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:46"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ session_uuid     : chr "a8ba0dc7def9ca4e6fec0309a14775ed"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "source")=List of 5
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ pid   : int 66393
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ random: int 2147483647
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ r_info           :List of 4
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ : int [1:3] 4 5 0
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ os           : chr "unix"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ os_name      : chr "Linux"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ captures_utf8: logi TRUE
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ version          : chr "1.8"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr "FutureResult"
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ success: logi TRUE
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:46.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ tag    : NULL
[10:51:46.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Received FutureResult
[10:51:46.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:46.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Removed future from position #1
[10:51:46.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 1
[10:51:46.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:46.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Erased future from future backend
[10:51:46.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘immediateCondition’
[10:51:46.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = 
[10:51:46.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = FALSE
[10:51:46.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:46.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  isFutureResolved() ... done
[10:51:46.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  MultisessionFuture #1
[10:51:46.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:46.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  nx: 2
[10:51:46.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  relay: TRUE
[10:51:46.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  stdout: TRUE
[10:51:46.517] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  signal: TRUE
[10:51:46.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal: FALSE
[10:51:46.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  force: TRUE
[10:51:46.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] FALSE, FALSE
[10:51:46.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] FALSE, FALSE
[10:51:46.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  until=1
[10:51:46.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  relaying element #1
[10:51:46.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.518] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘immediateCondition’
[10:51:46.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = 
[10:51:46.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = FALSE
[10:51:46.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.519] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.520] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.520] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.520] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘immediateCondition’
[10:51:46.520] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = 
[10:51:46.520] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = FALSE
[10:51:46.520] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.520] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.520] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.520] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.520] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘condition’
[10:51:46.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = ‘error’, ‘immediateCondition’
[10:51:46.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = TRUE
[10:51:46.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  relayed: [n=2] TRUE, FALSE
[10:51:46.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  queued futures: [n=2] TRUE, FALSE
[10:51:46.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:46.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  value(<MultisessionFuture>, ...) ...
[10:51:46.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘immediateCondition’
[10:51:46.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = 
[10:51:46.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = FALSE
[10:51:46.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  value: <simpleError>
[10:51:46.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  value(<MultisessionFuture>, ...) ... done
[10:51:46.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  signal simpleError ...
[10:51:46.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  futures(x) ...
[10:51:46.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  futures(x) ... done
[10:51:46.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  interrupt(y) ...
[10:51:46.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  interrupt(y) ... done
[10:51:46.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  resolve(y, ...) ...
[10:51:46.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘immediateCondition’
[10:51:46.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = 
[10:51:46.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = FALSE
[10:51:46.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘immediateCondition’
[10:51:46.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = 
[10:51:46.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = FALSE
[10:51:46.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘condition’
[10:51:46.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = ‘immediateCondition’
[10:51:46.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = TRUE
[10:51:46.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:51:46.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  isFutureResolved() ...
[10:51:46.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  assertValidConnection() ...
[10:51:46.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:46.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  assertValidConnection() ... done
[10:51:46.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ...
[10:51:46.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  cluster node index: 2
[10:51:46.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  [1] TRUE
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  received data:
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of 5
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ type   : chr "VALUE"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ value  :List of 13
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ value            : NULL
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ visible          : logi TRUE
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ stdout           : chr ""
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ conditions       :List of 1
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ :List of 5
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ condition:List of 2
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ message: chr "values must be length 2, but FUN(X[[ii]]) result is length 1"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ call   : NULL
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ calls    :List of 14
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(expr, envir = globalenv())
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(expr, envir = globalenv())
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language local({     { ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval.parent(substitute(eval(quote(expr), envir)))
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(expr, p)
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(expr, p)
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(quote({     { ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language eval(quote({     { ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language do.call(function(...) {     "# future::getGlobalsAndPackages(): FUN() uses '...' internally " ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language (function (...)  { ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language lapply(seq_along(...future.elements_ii), FUN = function(jj) {     ...future.X_jj <- ...future.elements_ii[[jj]] ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language FUN(X[[i]], ...)
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language ...future.FUN(...future.X_jj, ...)
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ : language stopf("values must be length %d, but FUN(X[[ii]]) result is length %d",      times, length(value))
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ session  :List of 6
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ r         :List of 14
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ platform      : chr "x86_64-pc-linux-gnu"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ arch          : chr "x86_64"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ os            : chr "linux-gnu"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ system        : chr "x86_64, linux-gnu"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ status        : chr ""
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ major         : chr "4"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ minor         : chr "5.0"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ year          : chr "2025"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ month         : chr "04"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ day           : chr "11"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ svn rev       : chr "88135"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ language      : chr "R"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ version.string: chr "R version 4.5.0 (2025-04-11)"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..$ nickname      : chr "How About a Twenty-Six"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ locale    : chr "LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGE"| __truncated__
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ rngkind   : chr [1:3] "Mersenne-Twister" "Inversion" "Rejection"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ namespaces: chr [1:17] "compiler" "parallelly" "graphics" "tools" ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ search    : chr [1:11] ".GlobalEnv" "package:future.apply" "package:future" "package:stats" ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..$ system    : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ timestamp: POSIXct[1:1], format: "2025-05-06 10:51:46"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ signaled : int 0
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ rng              : logi FALSE
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseGlobalEnv  : NULL
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseConnections:List of 3
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ added   : NULL
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ removed : NULL
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ replaced: NULL
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ misuseDevices    : NULL
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:46"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:46"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ session_uuid     : chr "33a3f6aeb26ba7e737c824b79c078503"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "source")=List of 5
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ pid   : int 66394
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:42"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ random: int 2147483647
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ r_info           :List of 4
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..$ : int [1:3] 4 5 0
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ os           : chr "unix"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ os_name      : chr "Linux"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..$ captures_utf8: logi TRUE
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..$ version          : chr "1.8"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr "FutureResult"
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ success: logi TRUE
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ time   : 'proc_time' Named num [1:5] 0.005 0.001 0.006 0 0
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:46.530] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ tag    : NULL
[10:51:46.556] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Received FutureResult
[10:51:46.556] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ...
[10:51:46.556] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Removed future from position #1
[10:51:46.556] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of registered futures: 0
[10:51:46.556] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  FutureRegistry('workers-7147b5da8f92e80f5ef9ace2ec84f2cc', action = 'remove', earlySignal = 0) ... done
[10:51:46.556] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Erased future from future backend
[10:51:46.557] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.557] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.557] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.557] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.557] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘immediateCondition’
[10:51:46.557] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = 
[10:51:46.557] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = FALSE
[10:51:46.557] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.557] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.557] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:46.558] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  isFutureResolved() ... done
[10:51:46.558] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.558] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.558] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.558] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.558] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.558] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.558] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.558] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘immediateCondition’
[10:51:46.558] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = 
[10:51:46.559] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = FALSE
[10:51:46.559] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.559] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.559] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.559] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.559] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.559] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.559] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘immediateCondition’
[10:51:46.559] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = 
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = FALSE
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ...
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result already collected: FutureResult
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  result() for ClusterFuture ... done
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ...
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  include = ‘condition’
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  exclude = ‘immediateCondition’
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  resignal = TRUE
[10:51:46.560] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of conditions: 1
[10:51:46.561] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:51:46.561] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  signalConditions() ... done
[10:51:46.561] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  resolve(y, ...) ... done
[10:51:46.561] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  stop(value) in 3, 2, 1 ...
[10:51:46.561] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  value() on list ... done
[10:51:46.561] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.561] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:46.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  all.equal() for FutureStrategyList ...
[10:51:46.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  New stack:
[10:51:46.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of 1
[10:51:46.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:46.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "call")= language plan(sequential)
[10:51:46.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Old stack:
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of 1
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "init")= chr "done"
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "untweakable")= chr "persistent"
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "call")= language plan(strategy)
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46504ae20> 
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:46.564] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Not identical
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  all.equal() for future ...
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of 2
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "call")= language plan(sequential)
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "init")= chr "done"
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "untweakable")= chr "persistent"
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "call")= language plan(strategy)
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d46504ae20> 
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:46.568] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:46.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Formals differ
[10:51:46.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  all.equal() for future ... done
[10:51:46.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Future strategies differ at level 1
[10:51:46.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  all.equal() for FutureStrategyList ... done
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): Setting new future strategy stack:
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of future strategies:
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  1. sequential:
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA     - tweaked: FALSE
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA     - call: plan(sequential)
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of 1
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "call")= language plan(sequential)
[10:51:46.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:46.576] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:51:46.576] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.577] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:46.577] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.577] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  stopWorkers() for MultisessionFutureBackend ...
[10:51:46.577] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Interrupt active futures ...
[10:51:46.578] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Number of futures: 0
[10:51:46.578] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Interrupt active futures ... done
[10:51:46.578] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Clear future registry ...
[10:51:46.578] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Clear future registry ... done
[10:51:46.578] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Stop cluster workers ...
[10:51:46.578] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Stopping existing cluster ...
[10:51:46.579] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Cluster to shut down:
[10:51:46.579] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:46.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Stopped cluster: ‘NULL’
[10:51:46.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Stopping existing cluster ... done
[10:51:46.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Stop cluster workers ... done
[10:51:46.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  stopWorkers() for MultisessionFutureBackend ... done
[10:51:46.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Legacy shutdown of cluster workers ...
[10:51:46.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Stopping existing cluster ...
[10:51:46.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  No pre-existing cluster. Skipping
[10:51:46.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Stopping existing cluster ... done
[10:51:46.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Legacy shutdown of cluster workers ... done
[10:51:46.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:51:46.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:51:46.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:46.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   - attr(*, "call")= language plan(sequential)
[10:51:46.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  init: NULL
[10:51:46.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:51:46.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:46.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Backend function: <‘NULL’>
[10:51:46.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:46.595] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): nbrOfWorkers() = 1
[10:51:46.595] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:46.595] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘multisession’ ... done
> 
> 
> message("*** future_vapply() ... DONE")
*** future_vapply() ... DONE
> 
> source("incl/end.R")
[10:51:46.595] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  all.equal() for FutureStrategyList ...
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  New stack:
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of 1
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "call")= language plan(sequential)
[10:51:46.596] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:46.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Old stack:
[10:51:46.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of 1
[10:51:46.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:46.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "call")= language plan(sequential)
[10:51:46.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  Not identical
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  all.equal() for future ...
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of 2
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "call")= language plan(sequential)
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA    ..- attr(*, "call")= language plan(sequential)
[10:51:46.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  all.equal() for future ... done
[10:51:46.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  all.equal() for FutureStrategyList ... done
[10:51:46.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:46.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  List of future strategies:
[10:51:46.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  1. sequential:
[10:51:46.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:46.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA     - tweaked: FALSE
[10:51:46.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA     - call: plan(sequential)
[10:51:46.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  NA  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:46.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  NA  NA  NA  NA  NA  NA  NA  NA  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
