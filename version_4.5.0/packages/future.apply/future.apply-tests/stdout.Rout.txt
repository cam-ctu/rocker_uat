
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:51:50.903] plan(<NULL>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:50.903] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:50.904] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:50.904] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:50.944] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:50.944] |  :  all.equal() for FutureStrategyList ...
[10:51:50.944] |  :  .  New stack:
[10:51:50.944] |  :  .  List of 1
[10:51:50.944] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.944] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.944] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.944] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.944] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.944] |  :  .    ..- attr(*, "call")= language future::plan("sequential")
[10:51:50.944] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:50.948] |  :  .  Old stack:
[10:51:50.948] |  :  .  List of 1
[10:51:50.948] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.948] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.948] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.948] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.948] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.948] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:50.948] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:50.950] |  :  .  Not identical
[10:51:50.950] |  :  .  all.equal() for future ...
[10:51:50.950] |  :  .  |  List of 2
[10:51:50.950] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.950] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.950] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.950] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.950] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.950] |  :  .  |    ..- attr(*, "call")= language future::plan("sequential")
[10:51:50.950] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.950] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.950] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.950] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.950] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.950] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:50.954] |  :  .  all.equal() for future ... done
[10:51:50.954] |  :  all.equal() for FutureStrategyList ... done
[10:51:50.955] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:50.955] |  :  List of future strategies:
[10:51:50.955] |  :  1. sequential:
[10:51:50.955] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:50.955] |  :     - tweaked: FALSE
[10:51:50.955] |  :     - call: plan(sequential)
[10:51:50.955] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:50.955] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
> message("*** future_*apply() and 'future.stdout' ...")
*** future_*apply() and 'future.stdout' ...
> 
> options(future.debug = TRUE)
> 
> truth <- list()
> 
> out <- utils::capture.output({
+   y <- lapply(1:0, FUN = function(x) {
+     print(x)
+   })
+ })
> truth[["lapply"]] <- list(value = y, stdout = out)
> 
> out <- utils::capture.output({
+   y <- mapply(1:0, 0:1, FUN = function(x, y) {
+     print(list(x = x, y = y))
+   })
+ })
> truth[["mapply"]] <- list(value = y, stdout = out)
> 
> for (cores in 1:availCores) {
+   message(sprintf("  - Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+   
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("* plan('%s') ...", strategy))
+     plan(strategy)
+ 
+     for (fun in names(truth)) {
+       for (stdout in c(FALSE, TRUE, NA)) {
+         message(sprintf("* future_%s(x, ..., future.stdout = %s) ...", fun, stdout))
+   
+         out <- utils::capture.output({
+           if (fun == "lapply") {
+             y <- future_lapply(1:0, FUN = function(x) {
+               Sys.sleep(x / 2)  ## make futures resolve out of order
+ 	      print(x)
+             }, future.stdout = stdout)
+ 	  } else if (fun == "mapply") {
+             y <- future_mapply(1:0, 0:1, FUN = function(x, y) {
+               Sys.sleep(x / 2)  ## make futures resolve out of order
+               print(list(x = x, y = y))
+             }, future.stdout = stdout)
+ 	  }
+         })
+         stopifnot(identical(y, truth[[fun]]$value))
+   
+         if (isTRUE(stdout)) {
+           stopifnot(identical(out, truth[[fun]]$stdout))
+         } else if (is.na(stdout)) {
+         } else {
+           stopifnot(nchar(out) == 0)
+         }
+       
+         message(sprintf("* future_%s(x, ..., future.stdout = %s) ... DONE", fun, stdout))
+       } ## for (stdout ...)
+     } ## for (fun ...)
+     
+     message(sprintf("* plan('%s') ... DONE", strategy))
+   }
+   
+   message(sprintf("  - Testing with %d cores ... DONE", cores))
+ }
  - Testing with 1 cores ...
* plan('sequential') ...
[10:51:50.996] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:50.997] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:50.997] |  :  all.equal() for FutureStrategyList ...
[10:51:50.997] |  :  .  New stack:
[10:51:50.997] |  :  .  List of 1
[10:51:50.997] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.997] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.997] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.997] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.997] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.997] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:50.997] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:51.000] |  :  .  Old stack:
[10:51:51.000] |  :  .  List of 1
[10:51:51.000] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.000] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.000] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.000] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.000] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.000] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:51.000] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:51.004] |  :  .  Not identical
[10:51:51.004] |  :  .  all.equal() for future ...
[10:51:51.004] |  :  .  |  List of 2
[10:51:51.004] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.004] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.004] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.004] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.004] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.004] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:51.004] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.004] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.004] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.004] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.004] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.004] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:51.008] |  :  .  all.equal() for future ... done
[10:51:51.008] |  :  all.equal() for FutureStrategyList ... done
[10:51:51.009] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:51.009] |  :  List of future strategies:
[10:51:51.009] |  :  1. sequential:
[10:51:51.009] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:51.009] |  :     - tweaked: FALSE
[10:51:51.009] |  :     - call: plan(sequential)
[10:51:51.009] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:51.009] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
* future_lapply(x, ..., future.stdout = FALSE) ...
[10:51:51.009] future_lapply() ...
[10:51:51.016] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:51.016] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:51.016] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:51.017] Backend function: <‘NULL’>
[10:51:51.017] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:51.017] Number of chunks: 1
[10:51:51.017] getGlobalsAndPackagesXApply() ...
[10:51:51.018]  - future.globals: TRUE
[10:51:51.018] getGlobalsAndPackages() ...
[10:51:51.018] |  Searching for globals ...
[10:51:51.021] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:51:51.021] |  Searching for globals ... DONE
[10:51:51.021] |  Resolving globals: FALSE
[10:51:51.021] |  Search for packages associated with the globals ...
[10:51:51.021] |  :  Packages associated with globals: [1] ‘base’
[10:51:51.022] |  :  Packages: [1] ‘base’
[10:51:51.022] |  Search for packages associated with the globals ... DONE
[10:51:51.022] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:51:51.023] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:51:51.023] |  Packages after dropping 'base': [0] 
[10:51:51.023] |  globals: [1] ‘FUN’
[10:51:51.023] |  packages: [0] 
[10:51:51.023] getGlobalsAndPackages() ... done
[10:51:51.023]  - globals found/used: [n=1] ‘FUN’
[10:51:51.023]  - needed namespaces: [n=0] 
[10:51:51.024] Finding globals ... DONE
[10:51:51.024]  - use_args: TRUE
[10:51:51.024]  - Getting '...' globals ...
[10:51:51.025] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:51.025] |  recursive: 0
[10:51:51.025] |  length: 1
[10:51:51.025] |  elements: ‘...’
[10:51:51.025] |  'obj' is DotDotDotList
[10:51:51.025] |  resolve(obj, ...) ...
[10:51:51.025] |  resolve(obj, ...) ... done
[10:51:51.026] |  length: 0 (resolved future 1)
[10:51:51.026] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:51.026]    - '...' content: [n=0] 
[10:51:51.026] List of 1
[10:51:51.026]  $ ...: list()
[10:51:51.026]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:51.026]  - attr(*, "where")=List of 1
[10:51:51.026]   ..$ ...:<environment: 0x5625806cb2f8> 
[10:51:51.026]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:51.026]  - attr(*, "resolved")= logi TRUE
[10:51:51.026]  - attr(*, "total_size")= num NA
[10:51:51.029]  - Getting '...' globals ... DONE
[10:51:51.029] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:51.029] List of 2
[10:51:51.029]  $ ...future.FUN:function (x)  
[10:51:51.029]  $ ...          : list()
[10:51:51.029]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:51.029]  - attr(*, "where")=List of 2
[10:51:51.029]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:51.029]   ..$ ...          :<environment: 0x5625806cb2f8> 
[10:51:51.029]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:51.029]  - attr(*, "resolved")= logi FALSE
[10:51:51.029]  - attr(*, "total_size")= num 5632
[10:51:51.032] Packages to be attached in all futures: [n=0] 
[10:51:51.032] getGlobalsAndPackagesXApply() ... DONE
[10:51:51.032] Number of futures (= number of chunks): 1
[10:51:51.033] Launching 1 futures (chunks) ...
[10:51:51.033] Chunk #1 of 1 ...
[10:51:51.035]  - Finding globals in 'X' for chunk #1 ...
[10:51:51.035] getGlobalsAndPackages() ...
[10:51:51.035] |  Searching for globals ...
[10:51:51.036] |  :  globals found: [0] 
[10:51:51.036] |  Searching for globals ... DONE
[10:51:51.036] |  globals: [0] <none>
[10:51:51.036] |  packages: [0] <none>
[10:51:51.036] getGlobalsAndPackages() ... done
[10:51:51.036]    + additional globals found: [n=0] 
[10:51:51.036]    + additional namespaces needed: [n=0] 
[10:51:51.036]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:51.036]  - seeds: <none>
[10:51:51.036]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:51.037] getGlobalsAndPackages() ...
[10:51:51.037] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:51.037] |  Resolving globals: FALSE
[10:51:51.037] |  Tweak future expression to call with '...' arguments ...
[10:51:51.037] |  :  {
[10:51:51.037] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:51.037] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:51.037] |  :      "# as a global variable                                         "
[10:51:51.037] |  :      do.call(function(...) {
[10:51:51.037] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:51.037] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:51.037] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:51.037] |  :          "# anonymous function.                                          "
[10:51:51.037] |  :          "#                                                              "
[10:51:51.037] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:51.037] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:51.037] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:51.037] |  :          "# global environment, which is where globals are written.      "
[10:51:51.037] |  :          penv <- env <- environment(...future.FUN)
[10:51:51.037] |  :          repeat {
[10:51:51.037] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:51.037] |  :                  emptyenv())) 
[10:51:51.037] |  :                  break
[10:51:51.037] |  :              penv <- env
[10:51:51.037] |  :              env <- parent.env(env)
[10:51:51.037] |  :          }
[10:51:51.037] |  :          if (identical(penv, globalenv())) {
[10:51:51.037] |  :              environment(...future.FUN) <- environment()
[10:51:51.037] |  :          }
[10:51:51.037] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:51.037] |  :              !isNamespace(penv)) {
[10:51:51.037] |  :              parent.env(penv) <- environment()
[10:51:51.037] |  :          }
[10:51:51.037] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:51.037] |  :          {
[10:51:51.037] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:51.037] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:51.037] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:51.037] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:51.037] |  :              }
[10:51:51.037] |  :              {
[10:51:51.037] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:51.037] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:51.037] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:51.037] |  :                  })
[10:51:51.037] |  :              }
[10:51:51.037] |  :          }
[10:51:51.037] |  :      }, args = future.call.arguments)
[10:51:51.037] |  :  }
[10:51:51.037] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:51.038] |  Search for packages associated with the globals ...
[10:51:51.038] |  :  Packages associated with globals: [0] 
[10:51:51.038] |  :  Packages: [0] 
[10:51:51.038] |  Search for packages associated with the globals ... DONE
[10:51:51.038] |  Packages after dropping 'base': [0] 
[10:51:51.038] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:51.038] |  packages: [0] 
[10:51:51.039] getGlobalsAndPackages() ... done
[10:51:51.039] run() for Future (‘Future’) ...
[10:51:51.039] |  state: ‘created’
[10:51:51.039] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:51.040] |  :  makeFutureBackend(<sequential>) ...
[10:51:51.040] |  :  .  Backend function: <‘NULL’>
[10:51:51.040] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:51.040] |  :  makeFutureBackend(<sequential>) ... done
[10:51:51.040] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:51.040] |  Using SequentialFutureBackend ...
[10:51:51.040] |  :  Launching futures ...
[10:51:51.041] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:51.041] |  :  .  |  getFutureData() ...
[10:51:51.041] |  :  .  |  :  getFutureCore() ...
[10:51:51.041] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:51.041] |  :  .  |  :  getFutureCore() ... done
[10:51:51.041] |  :  .  |  :  getFutureCapture() ...
[10:51:51.041] |  :  .  |  :  getFutureCapture() ... done
[10:51:51.041] |  :  .  |  :  getFutureContext() ...
[10:51:51.042] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:51.042] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:51.042] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:51.042] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:51.042] |  :  .  |  :  getFutureContext() ... done
[10:51:51.042] |  :  .  |  getFutureData() ... done
[10:51:51.044] |  :  .  |  attachPackages() ...
[10:51:51.044] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:51.044] |  :  .  |  attachPackages() ... DONE
[10:51:51.044] |  :  .  |  attachPackages() ...
[10:51:51.045] |  :  .  |  :  packages: [n=0] 
[10:51:51.045] |  :  .  |  attachPackages() ... DONE
[10:51:51.045] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:51.045] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:51.046] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:51.046] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:51.046] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:51.047] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:51.047] |  :  .  |  :  .  |  New stack:
[10:51:51.047] |  :  .  |  :  .  |  List of 1
[10:51:51.047] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.047] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.047] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.047] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.047] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.047] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:51.047] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:51.049] |  :  .  |  :  .  |  Old stack:
[10:51:51.049] |  :  .  |  :  .  |  List of 1
[10:51:51.049] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.049] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.049] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.049] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.049] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.049] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:51.049] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:51.049] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.049] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.049] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:51.052] |  :  .  |  :  .  |  Not identical
[10:51:51.052] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:51.052] |  :  .  |  :  .  |  :  List of 2
[10:51:51.052] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.052] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.052] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.052] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.052] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.052] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:51.052] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.052] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.052] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.052] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.052] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.052] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:51.052] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:51.052] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.052] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.057] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:51.057] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:51.057] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:51.057] |  :  .  |  :  .  List of future strategies:
[10:51:51.057] |  :  .  |  :  .  1. sequential:
[10:51:51.057] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:51.057] |  :  .  |  :  .     - tweaked: FALSE
[10:51:51.057] |  :  .  |  :  .     - call: plan(sequential)
[10:51:51.058] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:51.058] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:51.058] |  :  .  |  assign_globals() ...
[10:51:51.058] |  :  .  |  List of 5
[10:51:51.058] |  :  .  |   $ ...future.FUN            :function (x)  
[10:51:51.058] |  :  .  |   $ future.call.arguments    : list()
[10:51:51.058] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:51.058] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:51.058] |  :  .  |    ..$ : int 1
[10:51:51.058] |  :  .  |    ..$ : int 0
[10:51:51.058] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:51.058] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:51.058] |  :  .  |   - attr(*, "where")=List of 5
[10:51:51.058] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:51.058] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:51.058] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:51.058] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:51.058] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:51.058] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:51.058] |  :  .  |   - attr(*, "total_size")= num 5632
[10:51:51.058] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:51.058] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:51.066] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:51.066] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:51.066] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:51.066] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:51.066] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:51.066] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:51.066] |  :  .  |  assign_globals() ... done
[10:51:51.571] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:51.571] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:51.571] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:51.571] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:51.571] |  :  .  |  :  .  |  :  New stack:
[10:51:51.571] |  :  .  |  :  .  |  :  List of 1
[10:51:51.571] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.571] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.571] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.571] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.571] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.571] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:51.571] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:51.571] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.571] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.571] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:51.574] |  :  .  |  :  .  |  :  Old stack:
[10:51:51.575] |  :  .  |  :  .  |  :  List of 1
[10:51:51.575] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.575] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.575] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.575] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.575] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.575] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:51.575] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:51.575] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.575] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.575] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:51.577] |  :  .  |  :  .  |  :  Identical
[10:51:51.578] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:51.578] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:51.578] |  :  .  |  :  .  |  List of future strategies:
[10:51:51.578] |  :  .  |  :  .  |  1. sequential:
[10:51:51.578] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:51.578] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:51.578] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:51.578] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:51.578] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:51.578] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:51.579] |  :  .  |  SequentialFuture started (and completed)
[10:51:51.579] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:51.579] |  :  Launching futures ... done
[10:51:51.579] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:51.580] |  Using SequentialFutureBackend ... done
[10:51:51.580] run() for Future (‘SequentialFuture’) ... done
[10:51:51.580] Created future:
[10:51:51.580] SequentialFuture:
[10:51:51.580] Label: ‘future_lapply-1’
[10:51:51.580] Expression:
[10:51:51.580] {
[10:51:51.580]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:51.580]     "# expression in do.call(), because function called uses '...'  "
[10:51:51.580]     "# as a global variable                                         "
[10:51:51.580]     do.call(function(...) {
[10:51:51.580]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:51.580]         "# without having an '...' argument. This means '...' is treated"
[10:51:51.580]         "# as a global variable. This may happen when FUN() is an       "
[10:51:51.580]         "# anonymous function.                                          "
[10:51:51.580]         "#                                                              "
[10:51:51.580]         "# If an anonymous function, we will make sure to restore the   "
[10:51:51.580]         "# function environment of FUN() to the calling environment.    "
[10:51:51.580]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:51.580]         "# global environment, which is where globals are written.      "
[10:51:51.580]         penv <- env <- environment(...future.FUN)
[10:51:51.580]         repeat {
[10:51:51.580]             if (identical(env, globalenv()) || identical(env, 
[10:51:51.580]                 emptyenv())) 
[10:51:51.580]                 break
[10:51:51.580]             penv <- env
[10:51:51.580]             env <- parent.env(env)
[10:51:51.580]         }
[10:51:51.580]         if (identical(penv, globalenv())) {
[10:51:51.580]             environment(...future.FUN) <- environment()
[10:51:51.580]         }
[10:51:51.580]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:51.580]             !isNamespace(penv)) {
[10:51:51.580]             parent.env(penv) <- environment()
[10:51:51.580]         }
[10:51:51.580]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:51.580]         {
[10:51:51.580]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:51.580]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:51.580]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:51.580]                 on.exit(options(oopts), add = TRUE)
[10:51:51.580]             }
[10:51:51.580]             {
[10:51:51.580]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:51.580]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:51.580]                   ...future.FUN(...future.X_jj, ...)
[10:51:51.580]                 })
[10:51:51.580]             }
[10:51:51.580]         }
[10:51:51.580]     }, args = future.call.arguments)
[10:51:51.580] }
[10:51:51.580] Lazy evaluation: FALSE
[10:51:51.580] Asynchronous evaluation: TRUE
[10:51:51.580] Local evaluation: TRUE
[10:51:51.580] Environment: R_GlobalEnv
[10:51:51.580] Capture standard output: FALSE
[10:51:51.580] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:51.580] Immediate condition classes: ‘immediateCondition’
[10:51:51.580] Globals: 5 objects totaling 1.02 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:51.580] Packages: <none>
[10:51:51.580] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:51.580] Resolved: TRUE
[10:51:51.580] Value: 55 bytes of class ‘list’
[10:51:51.580] Early signaling: FALSE
[10:51:51.580] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:51.580] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:51.581] Chunk #1 of 1 ... DONE
[10:51:51.581] Launching 1 futures (chunks) ... DONE
[10:51:51.582] Resolving 1 futures (chunks) ...
[10:51:51.582] value() on list ...
[10:51:51.582] |  recursive: 0
[10:51:51.582] |  length: 1
[10:51:51.583] |  
[10:51:51.583] |  Number of remaining objects: 1
[10:51:51.583] |  checking value #1 ...
[10:51:51.583] |  :  'obj' is SequentialFuture
[10:51:51.583] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:51.583] |  :  .  state: ‘finished’
[10:51:51.583] |  :  .  run: TRUE
[10:51:51.583] |  :  .  result: ‘FutureResult’
[10:51:51.583] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:51.583] |  :  SequentialFuture #1
[10:51:51.584] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:51.584] |  :  .  nx: 1
[10:51:51.584] |  :  .  relay: TRUE
[10:51:51.584] |  :  .  stdout: TRUE
[10:51:51.584] |  :  .  signal: TRUE
[10:51:51.584] |  :  .  resignal: FALSE
[10:51:51.584] |  :  .  force: TRUE
[10:51:51.584] |  :  .  relayed: [n=1] FALSE
[10:51:51.584] |  :  .  queued futures: [n=1] FALSE
[10:51:51.584] |  :  .  until=1
[10:51:51.584] |  :  .  relaying element #1
[10:51:51.585] |  :  .  relayed: [n=1] TRUE
[10:51:51.585] |  :  .  queued futures: [n=1] TRUE
[10:51:51.585] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:51.585] |  :  value(<SequentialFuture>, ...) ...
[10:51:51.585] |  :  .  value: <list>
[10:51:51.585] |  :  value(<SequentialFuture>, ...) ... done
[10:51:51.586] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:51.586] |  :  .  nx: 1
[10:51:51.586] |  :  .  relay: TRUE
[10:51:51.586] |  :  .  stdout: TRUE
[10:51:51.586] |  :  .  signal: TRUE
[10:51:51.586] |  :  .  resignal: FALSE
[10:51:51.586] |  :  .  force: TRUE
[10:51:51.586] |  :  .  relayed: [n=1] TRUE
[10:51:51.586] |  :  .  queued futures: [n=1] TRUE
[10:51:51.586] |  :  .  until=1
[10:51:51.586] |  :  .  relayed: [n=1] TRUE
[10:51:51.586] |  :  .  queued futures: [n=1] TRUE
[10:51:51.587] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:51.587] |  :  length: 0 (resolved future 1)
[10:51:51.587] |  checking value #1 ... done
[10:51:51.587] |  Relaying remaining futures ...
[10:51:51.587] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:51.587] |  :  .  nx: 1
[10:51:51.587] |  :  .  relay: TRUE
[10:51:51.587] |  :  .  stdout: TRUE
[10:51:51.587] |  :  .  signal: TRUE
[10:51:51.587] |  :  .  resignal: FALSE
[10:51:51.588] |  :  .  force: TRUE
[10:51:51.588] |  :  .  relayed: [n=1] TRUE
[10:51:51.588] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:51.588] |  :  .  relayed: [n=1] TRUE
[10:51:51.588] |  :  .  queued futures: [n=1] TRUE
[10:51:51.590] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:51.590] |  Relaying remaining futures ... done
[10:51:51.590] value() on list ... done
[10:51:51.590]  - Number of value chunks collected: 1
[10:51:51.590] Resolving 1 futures (chunks) ... DONE
[10:51:51.590] Reducing values from 1 chunks ...
[10:51:51.590]  - Number of values collected after concatenation: 2
[10:51:51.590]  - Number of values expected: 2
[10:51:51.590] Reducing values from 1 chunks ... DONE
[10:51:51.591] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = FALSE) ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ...
[10:51:51.591] future_lapply() ...
[10:51:51.592] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:51.592] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:51.592] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:51.592] Number of chunks: 1
[10:51:51.592] getGlobalsAndPackagesXApply() ...
[10:51:51.592]  - future.globals: TRUE
[10:51:51.592] getGlobalsAndPackages() ...
[10:51:51.592] |  Searching for globals ...
[10:51:51.594] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:51:51.594] |  Searching for globals ... DONE
[10:51:51.594] |  Resolving globals: FALSE
[10:51:51.594] |  Search for packages associated with the globals ...
[10:51:51.594] |  :  Packages associated with globals: [1] ‘base’
[10:51:51.595] |  :  Packages: [1] ‘base’
[10:51:51.595] |  Search for packages associated with the globals ... DONE
[10:51:51.595] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:51:51.595] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:51:51.595] |  Packages after dropping 'base': [0] 
[10:51:51.596] |  globals: [1] ‘FUN’
[10:51:51.596] |  packages: [0] 
[10:51:51.596] getGlobalsAndPackages() ... done
[10:51:51.596]  - globals found/used: [n=1] ‘FUN’
[10:51:51.596]  - needed namespaces: [n=0] 
[10:51:51.596] Finding globals ... DONE
[10:51:51.596]  - use_args: TRUE
[10:51:51.596]  - Getting '...' globals ...
[10:51:51.596] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:51.597] |  recursive: 0
[10:51:51.597] |  length: 1
[10:51:51.597] |  elements: ‘...’
[10:51:51.597] |  'obj' is DotDotDotList
[10:51:51.597] |  resolve(obj, ...) ...
[10:51:51.597] |  resolve(obj, ...) ... done
[10:51:51.597] |  length: 0 (resolved future 1)
[10:51:51.597] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:51.597]    - '...' content: [n=0] 
[10:51:51.597] List of 1
[10:51:51.597]  $ ...: list()
[10:51:51.597]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:51.597]  - attr(*, "where")=List of 1
[10:51:51.597]   ..$ ...:<environment: 0x562581096f08> 
[10:51:51.597]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:51.597]  - attr(*, "resolved")= logi TRUE
[10:51:51.597]  - attr(*, "total_size")= num NA
[10:51:51.600]  - Getting '...' globals ... DONE
[10:51:51.600] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:51.600] List of 2
[10:51:51.600]  $ ...future.FUN:function (x)  
[10:51:51.600]  $ ...          : list()
[10:51:51.600]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:51.600]  - attr(*, "where")=List of 2
[10:51:51.600]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:51.600]   ..$ ...          :<environment: 0x562581096f08> 
[10:51:51.600]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:51.600]  - attr(*, "resolved")= logi FALSE
[10:51:51.600]  - attr(*, "total_size")= num 5632
[10:51:51.603] Packages to be attached in all futures: [n=0] 
[10:51:51.603] getGlobalsAndPackagesXApply() ... DONE
[10:51:51.603] Number of futures (= number of chunks): 1
[10:51:51.603] Launching 1 futures (chunks) ...
[10:51:51.603] Chunk #1 of 1 ...
[10:51:51.603]  - Finding globals in 'X' for chunk #1 ...
[10:51:51.603] getGlobalsAndPackages() ...
[10:51:51.603] |  Searching for globals ...
[10:51:51.604] |  :  globals found: [0] 
[10:51:51.604] |  Searching for globals ... DONE
[10:51:51.604] |  globals: [0] <none>
[10:51:51.604] |  packages: [0] <none>
[10:51:51.604] getGlobalsAndPackages() ... done
[10:51:51.604]    + additional globals found: [n=0] 
[10:51:51.604]    + additional namespaces needed: [n=0] 
[10:51:51.604]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:51.604]  - seeds: <none>
[10:51:51.604]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:51.605] getGlobalsAndPackages() ...
[10:51:51.605] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:51.605] |  Resolving globals: FALSE
[10:51:51.605] |  Tweak future expression to call with '...' arguments ...
[10:51:51.605] |  :  {
[10:51:51.605] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:51.605] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:51.605] |  :      "# as a global variable                                         "
[10:51:51.605] |  :      do.call(function(...) {
[10:51:51.605] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:51.605] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:51.605] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:51.605] |  :          "# anonymous function.                                          "
[10:51:51.605] |  :          "#                                                              "
[10:51:51.605] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:51.605] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:51.605] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:51.605] |  :          "# global environment, which is where globals are written.      "
[10:51:51.605] |  :          penv <- env <- environment(...future.FUN)
[10:51:51.605] |  :          repeat {
[10:51:51.605] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:51.605] |  :                  emptyenv())) 
[10:51:51.605] |  :                  break
[10:51:51.605] |  :              penv <- env
[10:51:51.605] |  :              env <- parent.env(env)
[10:51:51.605] |  :          }
[10:51:51.605] |  :          if (identical(penv, globalenv())) {
[10:51:51.605] |  :              environment(...future.FUN) <- environment()
[10:51:51.605] |  :          }
[10:51:51.605] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:51.605] |  :              !isNamespace(penv)) {
[10:51:51.605] |  :              parent.env(penv) <- environment()
[10:51:51.605] |  :          }
[10:51:51.605] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:51.605] |  :          {
[10:51:51.605] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:51.605] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:51.605] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:51.605] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:51.605] |  :              }
[10:51:51.605] |  :              {
[10:51:51.605] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:51.605] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:51.605] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:51.605] |  :                  })
[10:51:51.605] |  :              }
[10:51:51.605] |  :          }
[10:51:51.605] |  :      }, args = future.call.arguments)
[10:51:51.605] |  :  }
[10:51:51.605] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:51.606] |  Search for packages associated with the globals ...
[10:51:51.606] |  :  Packages associated with globals: [0] 
[10:51:51.606] |  :  Packages: [0] 
[10:51:51.606] |  Search for packages associated with the globals ... DONE
[10:51:51.606] |  Packages after dropping 'base': [0] 
[10:51:51.606] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:51.606] |  packages: [0] 
[10:51:51.606] getGlobalsAndPackages() ... done
[10:51:51.607] run() for Future (‘Future’) ...
[10:51:51.607] |  state: ‘created’
[10:51:51.607] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:51.607] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:51.607] |  Using SequentialFutureBackend ...
[10:51:51.607] |  :  Launching futures ...
[10:51:51.607] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:51.607] |  :  .  |  getFutureData() ...
[10:51:51.607] |  :  .  |  :  getFutureCore() ...
[10:51:51.608] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:51.608] |  :  .  |  :  getFutureCore() ... done
[10:51:51.608] |  :  .  |  :  getFutureCapture() ...
[10:51:51.608] |  :  .  |  :  getFutureCapture() ... done
[10:51:51.608] |  :  .  |  :  getFutureContext() ...
[10:51:51.608] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:51.608] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:51.608] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:51.608] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:51.608] |  :  .  |  :  getFutureContext() ... done
[10:51:51.609] |  :  .  |  getFutureData() ... done
[10:51:51.609] |  :  .  |  attachPackages() ...
[10:51:51.609] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:51.609] |  :  .  |  attachPackages() ... DONE
[10:51:51.609] |  :  .  |  attachPackages() ...
[10:51:51.609] |  :  .  |  :  packages: [n=0] 
[10:51:51.609] |  :  .  |  attachPackages() ... DONE
[10:51:51.610] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:51.611] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:51.611] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:51.611] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:51.611] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:51.611] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:51.611] |  :  .  |  :  .  |  New stack:
[10:51:51.611] |  :  .  |  :  .  |  List of 1
[10:51:51.611] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.611] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.611] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.611] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.611] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.611] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:51.611] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:51.614] |  :  .  |  :  .  |  Old stack:
[10:51:51.614] |  :  .  |  :  .  |  List of 1
[10:51:51.614] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.614] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.614] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.614] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.614] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.614] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:51.614] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:51.614] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.614] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.614] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:51.616] |  :  .  |  :  .  |  Not identical
[10:51:51.617] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:51.617] |  :  .  |  :  .  |  :  List of 2
[10:51:51.617] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.617] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.617] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.617] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.617] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.617] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:51.617] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:51.617] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:51.617] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.617] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.617] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.617] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:51.617] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:51.617] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:51.617] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:51.621] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:51.621] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:51.621] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:51.621] |  :  .  |  :  .  List of future strategies:
[10:51:51.621] |  :  .  |  :  .  1. sequential:
[10:51:51.621] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:51.621] |  :  .  |  :  .     - tweaked: FALSE
[10:51:51.621] |  :  .  |  :  .     - call: plan(sequential)
[10:51:51.622] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:51.622] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:51.622] |  :  .  |  assign_globals() ...
[10:51:51.622] |  :  .  |  List of 5
[10:51:51.622] |  :  .  |   $ ...future.FUN            :function (x)  
[10:51:51.622] |  :  .  |   $ future.call.arguments    : list()
[10:51:51.622] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:51.622] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:51.622] |  :  .  |    ..$ : int 1
[10:51:51.622] |  :  .  |    ..$ : int 0
[10:51:51.622] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:51.622] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:51.622] |  :  .  |   - attr(*, "where")=List of 5
[10:51:51.622] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:51.622] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:51.622] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:51.622] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:51.622] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:51.622] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:51.622] |  :  .  |   - attr(*, "total_size")= num 5632
[10:51:51.622] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:51.622] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:51.627] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:51.627] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:51.627] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:51.627] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:51.627] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:51.627] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:51.627] |  :  .  |  assign_globals() ... done
[10:51:52.132] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:52.132] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:52.132] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:52.132] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:52.132] |  :  .  |  :  .  |  :  New stack:
[10:51:52.132] |  :  .  |  :  .  |  :  List of 1
[10:51:52.132] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.132] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.132] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.132] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.132] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.132] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:52.132] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:52.132] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.132] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.132] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:52.135] |  :  .  |  :  .  |  :  Old stack:
[10:51:52.135] |  :  .  |  :  .  |  :  List of 1
[10:51:52.135] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.135] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.135] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.135] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.135] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.135] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:52.135] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:52.135] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.135] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.135] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:52.138] |  :  .  |  :  .  |  :  Identical
[10:51:52.138] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:52.139] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:52.139] |  :  .  |  :  .  |  List of future strategies:
[10:51:52.139] |  :  .  |  :  .  |  1. sequential:
[10:51:52.139] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:52.139] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:52.139] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:52.139] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:52.139] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:52.139] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:52.140] |  :  .  |  SequentialFuture started (and completed)
[10:51:52.140] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:52.140] |  :  Launching futures ... done
[10:51:52.140] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:52.140] |  Using SequentialFutureBackend ... done
[10:51:52.140] run() for Future (‘SequentialFuture’) ... done
[10:51:52.140] Created future:
[10:51:52.140] SequentialFuture:
[10:51:52.140] Label: ‘future_lapply-1’
[10:51:52.140] Expression:
[10:51:52.140] {
[10:51:52.140]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:52.140]     "# expression in do.call(), because function called uses '...'  "
[10:51:52.140]     "# as a global variable                                         "
[10:51:52.140]     do.call(function(...) {
[10:51:52.140]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:52.140]         "# without having an '...' argument. This means '...' is treated"
[10:51:52.140]         "# as a global variable. This may happen when FUN() is an       "
[10:51:52.140]         "# anonymous function.                                          "
[10:51:52.140]         "#                                                              "
[10:51:52.140]         "# If an anonymous function, we will make sure to restore the   "
[10:51:52.140]         "# function environment of FUN() to the calling environment.    "
[10:51:52.140]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:52.140]         "# global environment, which is where globals are written.      "
[10:51:52.140]         penv <- env <- environment(...future.FUN)
[10:51:52.140]         repeat {
[10:51:52.140]             if (identical(env, globalenv()) || identical(env, 
[10:51:52.140]                 emptyenv())) 
[10:51:52.140]                 break
[10:51:52.140]             penv <- env
[10:51:52.140]             env <- parent.env(env)
[10:51:52.140]         }
[10:51:52.140]         if (identical(penv, globalenv())) {
[10:51:52.140]             environment(...future.FUN) <- environment()
[10:51:52.140]         }
[10:51:52.140]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:52.140]             !isNamespace(penv)) {
[10:51:52.140]             parent.env(penv) <- environment()
[10:51:52.140]         }
[10:51:52.140]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:52.140]         {
[10:51:52.140]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:52.140]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:52.140]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:52.140]                 on.exit(options(oopts), add = TRUE)
[10:51:52.140]             }
[10:51:52.140]             {
[10:51:52.140]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:52.140]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:52.140]                   ...future.FUN(...future.X_jj, ...)
[10:51:52.140]                 })
[10:51:52.140]             }
[10:51:52.140]         }
[10:51:52.140]     }, args = future.call.arguments)
[10:51:52.140] }
[10:51:52.140] Lazy evaluation: FALSE
[10:51:52.140] Asynchronous evaluation: TRUE
[10:51:52.140] Local evaluation: TRUE
[10:51:52.140] Environment: R_GlobalEnv
[10:51:52.140] Capture standard output: TRUE
[10:51:52.140] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:52.140] Immediate condition classes: ‘immediateCondition’
[10:51:52.140] Globals: 5 objects totaling 1.02 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:52.140] Packages: <none>
[10:51:52.140] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:52.140] Resolved: TRUE
[10:51:52.140] Value: 55 bytes of class ‘list’
[10:51:52.140] Early signaling: FALSE
[10:51:52.140] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:52.140] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:52.142] Chunk #1 of 1 ... DONE
[10:51:52.142] Launching 1 futures (chunks) ... DONE
[10:51:52.142] Resolving 1 futures (chunks) ...
[10:51:52.142] value() on list ...
[10:51:52.142] |  recursive: 0
[10:51:52.142] |  length: 1
[10:51:52.142] |  
[10:51:52.142] |  Number of remaining objects: 1
[10:51:52.142] |  checking value #1 ...
[10:51:52.142] |  :  'obj' is SequentialFuture
[10:51:52.142] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:52.143] |  :  .  state: ‘finished’
[10:51:52.143] |  :  .  run: TRUE
[10:51:52.143] |  :  .  result: ‘FutureResult’
[10:51:52.143] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:52.143] |  :  SequentialFuture #1
[10:51:52.143] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:52.143] |  :  .  nx: 1
[10:51:52.143] |  :  .  relay: TRUE
[10:51:52.143] |  :  .  stdout: TRUE
[10:51:52.143] |  :  .  signal: TRUE
[10:51:52.143] |  :  .  resignal: FALSE
[10:51:52.144] |  :  .  force: TRUE
[10:51:52.144] |  :  .  relayed: [n=1] FALSE
[10:51:52.144] |  :  .  queued futures: [n=1] FALSE
[10:51:52.144] |  :  .  until=1
[10:51:52.144] |  :  .  relaying element #1
[10:51:52.144] |  :  .  relayed: [n=1] TRUE
[10:51:52.144] |  :  .  queued futures: [n=1] TRUE
[10:51:52.144] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:52.144] |  :  value(<SequentialFuture>, ...) ...
[10:51:52.145] |  :  .  value: <list>
[10:51:52.145] |  :  value(<SequentialFuture>, ...) ... done
[10:51:52.145] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:52.145] |  :  .  nx: 1
[10:51:52.145] |  :  .  relay: TRUE
[10:51:52.145] |  :  .  stdout: TRUE
[10:51:52.145] |  :  .  signal: TRUE
[10:51:52.145] |  :  .  resignal: FALSE
[10:51:52.145] |  :  .  force: TRUE
[10:51:52.145] |  :  .  relayed: [n=1] TRUE
[10:51:52.145] |  :  .  queued futures: [n=1] TRUE
[10:51:52.145] |  :  .  until=1
[10:51:52.146] |  :  .  relayed: [n=1] TRUE
[10:51:52.146] |  :  .  queued futures: [n=1] TRUE
[10:51:52.146] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:52.146] |  :  length: 0 (resolved future 1)
[10:51:52.146] |  checking value #1 ... done
[10:51:52.146] |  Relaying remaining futures ...
[10:51:52.146] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:52.146] |  :  .  nx: 1
[10:51:52.146] |  :  .  relay: TRUE
[10:51:52.146] |  :  .  stdout: TRUE
[10:51:52.146] |  :  .  signal: TRUE
[10:51:52.147] |  :  .  resignal: FALSE
[10:51:52.147] |  :  .  force: TRUE
[10:51:52.147] |  :  .  relayed: [n=1] TRUE
[10:51:52.147] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:52.147] |  :  .  relayed: [n=1] TRUE
[10:51:52.147] |  :  .  queued futures: [n=1] TRUE
[10:51:52.147] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:52.147] |  Relaying remaining futures ... done
[10:51:52.147] value() on list ... done
[10:51:52.147]  - Number of value chunks collected: 1
[10:51:52.148] Resolving 1 futures (chunks) ... DONE
[10:51:52.148] Reducing values from 1 chunks ...
[10:51:52.148]  - Number of values collected after concatenation: 2
[10:51:52.148]  - Number of values expected: 2
[10:51:52.148] Reducing values from 1 chunks ... DONE
[10:51:52.148] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ... DONE
* future_lapply(x, ..., future.stdout = NA) ...
[10:51:52.148] future_lapply() ...
[10:51:52.149] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:52.149] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:52.149] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:52.150] Number of chunks: 1
[10:51:52.150] getGlobalsAndPackagesXApply() ...
[10:51:52.150]  - future.globals: TRUE
[10:51:52.150] getGlobalsAndPackages() ...
[10:51:52.150] |  Searching for globals ...
[10:51:52.151] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:51:52.153] |  Searching for globals ... DONE
[10:51:52.153] |  Resolving globals: FALSE
[10:51:52.153] |  Search for packages associated with the globals ...
[10:51:52.153] |  :  Packages associated with globals: [1] ‘base’
[10:51:52.153] |  :  Packages: [1] ‘base’
[10:51:52.153] |  Search for packages associated with the globals ... DONE
[10:51:52.154] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:51:52.154] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:51:52.154] |  Packages after dropping 'base': [0] 
[10:51:52.154] |  globals: [1] ‘FUN’
[10:51:52.154] |  packages: [0] 
[10:51:52.154] getGlobalsAndPackages() ... done
[10:51:52.154]  - globals found/used: [n=1] ‘FUN’
[10:51:52.154]  - needed namespaces: [n=0] 
[10:51:52.154] Finding globals ... DONE
[10:51:52.155]  - use_args: TRUE
[10:51:52.155]  - Getting '...' globals ...
[10:51:52.155] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:52.155] |  recursive: 0
[10:51:52.155] |  length: 1
[10:51:52.155] |  elements: ‘...’
[10:51:52.155] |  'obj' is DotDotDotList
[10:51:52.155] |  resolve(obj, ...) ...
[10:51:52.156] |  resolve(obj, ...) ... done
[10:51:52.156] |  length: 0 (resolved future 1)
[10:51:52.156] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:52.156]    - '...' content: [n=0] 
[10:51:52.156] List of 1
[10:51:52.156]  $ ...: list()
[10:51:52.156]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:52.156]  - attr(*, "where")=List of 1
[10:51:52.156]   ..$ ...:<environment: 0x5625828515c0> 
[10:51:52.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:52.156]  - attr(*, "resolved")= logi TRUE
[10:51:52.156]  - attr(*, "total_size")= num NA
[10:51:52.158]  - Getting '...' globals ... DONE
[10:51:52.159] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:52.159] List of 2
[10:51:52.159]  $ ...future.FUN:function (x)  
[10:51:52.159]  $ ...          : list()
[10:51:52.159]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:52.159]  - attr(*, "where")=List of 2
[10:51:52.159]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:52.159]   ..$ ...          :<environment: 0x5625828515c0> 
[10:51:52.159]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:52.159]  - attr(*, "resolved")= logi FALSE
[10:51:52.159]  - attr(*, "total_size")= num 5632
[10:51:52.161] Packages to be attached in all futures: [n=0] 
[10:51:52.162] getGlobalsAndPackagesXApply() ... DONE
[10:51:52.162] Number of futures (= number of chunks): 1
[10:51:52.162] Launching 1 futures (chunks) ...
[10:51:52.162] Chunk #1 of 1 ...
[10:51:52.162]  - Finding globals in 'X' for chunk #1 ...
[10:51:52.162] getGlobalsAndPackages() ...
[10:51:52.162] |  Searching for globals ...
[10:51:52.163] |  :  globals found: [0] 
[10:51:52.163] |  Searching for globals ... DONE
[10:51:52.163] |  globals: [0] <none>
[10:51:52.163] |  packages: [0] <none>
[10:51:52.163] getGlobalsAndPackages() ... done
[10:51:52.163]    + additional globals found: [n=0] 
[10:51:52.163]    + additional namespaces needed: [n=0] 
[10:51:52.163]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:52.163]  - seeds: <none>
[10:51:52.163]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:52.163] getGlobalsAndPackages() ...
[10:51:52.164] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:52.164] |  Resolving globals: FALSE
[10:51:52.164] |  Tweak future expression to call with '...' arguments ...
[10:51:52.164] |  :  {
[10:51:52.164] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:52.164] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:52.164] |  :      "# as a global variable                                         "
[10:51:52.164] |  :      do.call(function(...) {
[10:51:52.164] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:52.164] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:52.164] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:52.164] |  :          "# anonymous function.                                          "
[10:51:52.164] |  :          "#                                                              "
[10:51:52.164] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:52.164] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:52.164] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:52.164] |  :          "# global environment, which is where globals are written.      "
[10:51:52.164] |  :          penv <- env <- environment(...future.FUN)
[10:51:52.164] |  :          repeat {
[10:51:52.164] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:52.164] |  :                  emptyenv())) 
[10:51:52.164] |  :                  break
[10:51:52.164] |  :              penv <- env
[10:51:52.164] |  :              env <- parent.env(env)
[10:51:52.164] |  :          }
[10:51:52.164] |  :          if (identical(penv, globalenv())) {
[10:51:52.164] |  :              environment(...future.FUN) <- environment()
[10:51:52.164] |  :          }
[10:51:52.164] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:52.164] |  :              !isNamespace(penv)) {
[10:51:52.164] |  :              parent.env(penv) <- environment()
[10:51:52.164] |  :          }
[10:51:52.164] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:52.164] |  :          {
[10:51:52.164] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:52.164] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:52.164] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:52.164] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:52.164] |  :              }
[10:51:52.164] |  :              {
[10:51:52.164] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:52.164] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:52.164] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:52.164] |  :                  })
[10:51:52.164] |  :              }
[10:51:52.164] |  :          }
[10:51:52.164] |  :      }, args = future.call.arguments)
[10:51:52.164] |  :  }
[10:51:52.164] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:52.164] |  Search for packages associated with the globals ...
[10:51:52.165] |  :  Packages associated with globals: [0] 
[10:51:52.165] |  :  Packages: [0] 
[10:51:52.165] |  Search for packages associated with the globals ... DONE
[10:51:52.165] |  Packages after dropping 'base': [0] 
[10:51:52.165] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:52.165] |  packages: [0] 
[10:51:52.165] getGlobalsAndPackages() ... done
[10:51:52.166] run() for Future (‘Future’) ...
[10:51:52.166] |  state: ‘created’
[10:51:52.166] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:52.166] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:52.166] |  Using SequentialFutureBackend ...
[10:51:52.166] |  :  Launching futures ...
[10:51:52.166] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:52.166] |  :  .  |  getFutureData() ...
[10:51:52.167] |  :  .  |  :  getFutureCore() ...
[10:51:52.167] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:52.167] |  :  .  |  :  getFutureCore() ... done
[10:51:52.167] |  :  .  |  :  getFutureCapture() ...
[10:51:52.167] |  :  .  |  :  getFutureCapture() ... done
[10:51:52.167] |  :  .  |  :  getFutureContext() ...
[10:51:52.167] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:52.167] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:52.167] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:52.167] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:52.168] |  :  .  |  :  getFutureContext() ... done
[10:51:52.168] |  :  .  |  getFutureData() ... done
[10:51:52.168] |  :  .  |  attachPackages() ...
[10:51:52.168] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:52.168] |  :  .  |  attachPackages() ... DONE
[10:51:52.168] |  :  .  |  attachPackages() ...
[10:51:52.168] |  :  .  |  :  packages: [n=0] 
[10:51:52.168] |  :  .  |  attachPackages() ... DONE
[10:51:52.169] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:52.169] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:52.169] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:52.169] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:52.169] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:52.169] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:52.170] |  :  .  |  :  .  |  New stack:
[10:51:52.170] |  :  .  |  :  .  |  List of 1
[10:51:52.170] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.170] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.170] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.170] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.170] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.170] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:52.170] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:52.172] |  :  .  |  :  .  |  Old stack:
[10:51:52.172] |  :  .  |  :  .  |  List of 1
[10:51:52.172] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.172] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.172] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.172] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.172] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.172] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:52.172] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:52.172] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.172] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.172] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:52.177] |  :  .  |  :  .  |  Not identical
[10:51:52.177] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:52.177] |  :  .  |  :  .  |  :  List of 2
[10:51:52.177] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.177] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.177] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.177] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.177] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.177] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:52.177] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.177] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.177] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.177] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.177] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.177] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:52.177] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:52.177] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.177] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.181] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:52.182] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:52.182] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:52.182] |  :  .  |  :  .  List of future strategies:
[10:51:52.182] |  :  .  |  :  .  1. sequential:
[10:51:52.182] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:52.182] |  :  .  |  :  .     - tweaked: FALSE
[10:51:52.182] |  :  .  |  :  .     - call: plan(sequential)
[10:51:52.182] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:52.182] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:52.183] |  :  .  |  assign_globals() ...
[10:51:52.183] |  :  .  |  List of 5
[10:51:52.183] |  :  .  |   $ ...future.FUN            :function (x)  
[10:51:52.183] |  :  .  |   $ future.call.arguments    : list()
[10:51:52.183] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:52.183] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:52.183] |  :  .  |    ..$ : int 1
[10:51:52.183] |  :  .  |    ..$ : int 0
[10:51:52.183] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:52.183] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:52.183] |  :  .  |   - attr(*, "where")=List of 5
[10:51:52.183] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:52.183] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:52.183] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:52.183] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:52.183] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:52.183] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:52.183] |  :  .  |   - attr(*, "total_size")= num 5632
[10:51:52.183] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:52.183] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:52.188] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:52.188] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:52.188] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:52.188] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:52.188] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:52.189] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:52.189] |  :  .  |  assign_globals() ... done
[10:51:52.691] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:52.691] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:52.692] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:52.692] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:52.692] |  :  .  |  :  .  |  :  New stack:
[10:51:52.692] |  :  .  |  :  .  |  :  List of 1
[10:51:52.692] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.692] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.692] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.692] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.692] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.692] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:52.692] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:52.692] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.692] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.692] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:52.697] |  :  .  |  :  .  |  :  Old stack:
[10:51:52.697] |  :  .  |  :  .  |  :  List of 1
[10:51:52.697] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.697] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.697] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.697] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.697] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.697] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:52.697] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:52.697] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.697] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.697] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:52.700] |  :  .  |  :  .  |  :  Identical
[10:51:52.700] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:52.700] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:52.700] |  :  .  |  :  .  |  List of future strategies:
[10:51:52.700] |  :  .  |  :  .  |  1. sequential:
[10:51:52.700] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:52.700] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:52.700] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:52.700] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:52.700] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:52.701] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:52.701] |  :  .  |  SequentialFuture started (and completed)
[10:51:52.701] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:52.701] |  :  Launching futures ... done
[10:51:52.701] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:52.701] |  Using SequentialFutureBackend ... done
[10:51:52.701] run() for Future (‘SequentialFuture’) ... done
[10:51:52.701] Created future:
[10:51:52.702] SequentialFuture:
[10:51:52.702] Label: ‘future_lapply-1’
[10:51:52.702] Expression:
[10:51:52.702] {
[10:51:52.702]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:52.702]     "# expression in do.call(), because function called uses '...'  "
[10:51:52.702]     "# as a global variable                                         "
[10:51:52.702]     do.call(function(...) {
[10:51:52.702]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:52.702]         "# without having an '...' argument. This means '...' is treated"
[10:51:52.702]         "# as a global variable. This may happen when FUN() is an       "
[10:51:52.702]         "# anonymous function.                                          "
[10:51:52.702]         "#                                                              "
[10:51:52.702]         "# If an anonymous function, we will make sure to restore the   "
[10:51:52.702]         "# function environment of FUN() to the calling environment.    "
[10:51:52.702]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:52.702]         "# global environment, which is where globals are written.      "
[10:51:52.702]         penv <- env <- environment(...future.FUN)
[10:51:52.702]         repeat {
[10:51:52.702]             if (identical(env, globalenv()) || identical(env, 
[10:51:52.702]                 emptyenv())) 
[10:51:52.702]                 break
[10:51:52.702]             penv <- env
[10:51:52.702]             env <- parent.env(env)
[10:51:52.702]         }
[10:51:52.702]         if (identical(penv, globalenv())) {
[10:51:52.702]             environment(...future.FUN) <- environment()
[10:51:52.702]         }
[10:51:52.702]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:52.702]             !isNamespace(penv)) {
[10:51:52.702]             parent.env(penv) <- environment()
[10:51:52.702]         }
[10:51:52.702]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:52.702]         {
[10:51:52.702]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:52.702]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:52.702]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:52.702]                 on.exit(options(oopts), add = TRUE)
[10:51:52.702]             }
[10:51:52.702]             {
[10:51:52.702]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:52.702]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:52.702]                   ...future.FUN(...future.X_jj, ...)
[10:51:52.702]                 })
[10:51:52.702]             }
[10:51:52.702]         }
[10:51:52.702]     }, args = future.call.arguments)
[10:51:52.702] }
[10:51:52.702] Lazy evaluation: FALSE
[10:51:52.702] Asynchronous evaluation: TRUE
[10:51:52.702] Local evaluation: TRUE
[10:51:52.702] Environment: R_GlobalEnv
[10:51:52.702] Capture standard output: NA
[10:51:52.702] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:52.702] Immediate condition classes: ‘immediateCondition’
[10:51:52.702] Globals: 5 objects totaling 1.02 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:52.702] Packages: <none>
[10:51:52.702] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:52.702] Resolved: TRUE
[10:51:52.702] Value: 55 bytes of class ‘list’
[10:51:52.702] Early signaling: FALSE
[10:51:52.702] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:52.702] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:52.703] Chunk #1 of 1 ... DONE
[10:51:52.703] Launching 1 futures (chunks) ... DONE
[10:51:52.703] Resolving 1 futures (chunks) ...
[10:51:52.703] value() on list ...
[10:51:52.703] |  recursive: 0
[10:51:52.703] |  length: 1
[10:51:52.703] |  
[10:51:52.703] |  Number of remaining objects: 1
[10:51:52.703] |  checking value #1 ...
[10:51:52.703] |  :  'obj' is SequentialFuture
[10:51:52.704] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:52.704] |  :  .  state: ‘finished’
[10:51:52.704] |  :  .  run: TRUE
[10:51:52.704] |  :  .  result: ‘FutureResult’
[10:51:52.704] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:52.704] |  :  SequentialFuture #1
[10:51:52.704] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:52.704] |  :  .  nx: 1
[10:51:52.704] |  :  .  relay: TRUE
[10:51:52.704] |  :  .  stdout: TRUE
[10:51:52.704] |  :  .  signal: TRUE
[10:51:52.705] |  :  .  resignal: FALSE
[10:51:52.705] |  :  .  force: TRUE
[10:51:52.705] |  :  .  relayed: [n=1] FALSE
[10:51:52.705] |  :  .  queued futures: [n=1] FALSE
[10:51:52.705] |  :  .  until=1
[10:51:52.705] |  :  .  relaying element #1
[10:51:52.705] |  :  .  relayed: [n=1] TRUE
[10:51:52.705] |  :  .  queued futures: [n=1] TRUE
[10:51:52.705] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:52.705] |  :  value(<SequentialFuture>, ...) ...
[10:51:52.706] |  :  .  value: <list>
[10:51:52.706] |  :  value(<SequentialFuture>, ...) ... done
[10:51:52.706] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:52.706] |  :  .  nx: 1
[10:51:52.706] |  :  .  relay: TRUE
[10:51:52.706] |  :  .  stdout: TRUE
[10:51:52.706] |  :  .  signal: TRUE
[10:51:52.706] |  :  .  resignal: FALSE
[10:51:52.706] |  :  .  force: TRUE
[10:51:52.706] |  :  .  relayed: [n=1] TRUE
[10:51:52.706] |  :  .  queued futures: [n=1] TRUE
[10:51:52.707] |  :  .  until=1
[10:51:52.707] |  :  .  relayed: [n=1] TRUE
[10:51:52.707] |  :  .  queued futures: [n=1] TRUE
[10:51:52.707] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:52.707] |  :  length: 0 (resolved future 1)
[10:51:52.707] |  checking value #1 ... done
[10:51:52.707] |  Relaying remaining futures ...
[10:51:52.707] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:52.707] |  :  .  nx: 1
[10:51:52.707] |  :  .  relay: TRUE
[10:51:52.707] |  :  .  stdout: TRUE
[10:51:52.708] |  :  .  signal: TRUE
[10:51:52.708] |  :  .  resignal: FALSE
[10:51:52.708] |  :  .  force: TRUE
[10:51:52.708] |  :  .  relayed: [n=1] TRUE
[10:51:52.708] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:52.708] |  :  .  relayed: [n=1] TRUE
[10:51:52.708] |  :  .  queued futures: [n=1] TRUE
[10:51:52.708] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:52.708] |  Relaying remaining futures ... done
[10:51:52.708] value() on list ... done
[10:51:52.708]  - Number of value chunks collected: 1
[10:51:52.709] Resolving 1 futures (chunks) ... DONE
[10:51:52.709] Reducing values from 1 chunks ...
[10:51:52.709]  - Number of values collected after concatenation: 2
[10:51:52.709]  - Number of values expected: 2
[10:51:52.709] Reducing values from 1 chunks ... DONE
[10:51:52.709] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = NA) ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ...
[10:51:52.709] future_mapply() ...
[10:51:52.709] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:52.710] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:52.710] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:52.710] Number of chunks: 1
[10:51:52.710] getGlobalsAndPackagesXApply() ...
[10:51:52.710]  - future.globals: TRUE
[10:51:52.710] getGlobalsAndPackages() ...
[10:51:52.710] |  Searching for globals ...
[10:51:52.712] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:51:52.712] |  Searching for globals ... DONE
[10:51:52.712] |  Resolving globals: FALSE
[10:51:52.712] |  Search for packages associated with the globals ...
[10:51:52.712] |  :  Packages associated with globals: [1] ‘base’
[10:51:52.713] |  :  Packages: [1] ‘base’
[10:51:52.713] |  Search for packages associated with the globals ... DONE
[10:51:52.713] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:51:52.713] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:51:52.713] |  Packages after dropping 'base': [0] 
[10:51:52.713] |  globals: [1] ‘FUN’
[10:51:52.714] |  packages: [0] 
[10:51:52.714] getGlobalsAndPackages() ... done
[10:51:52.714]  - globals found/used: [n=1] ‘FUN’
[10:51:52.714]  - needed namespaces: [n=0] 
[10:51:52.714] Finding globals ... DONE
[10:51:52.714] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:51:52.714] List of 2
[10:51:52.714]  $ ...future.FUN:function (x, y)  
[10:51:52.714]  $ MoreArgs     : NULL
[10:51:52.714]  - attr(*, "where")=List of 2
[10:51:52.714]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:52.714]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:51:52.714]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:52.714]  - attr(*, "resolved")= logi FALSE
[10:51:52.714]  - attr(*, "total_size")= num NA
[10:51:52.718] Packages to be attached in all futures: [n=0] 
[10:51:52.718] getGlobalsAndPackagesXApply() ... DONE
[10:51:52.718] Number of futures (= number of chunks): 1
[10:51:52.718] Launching 1 futures (chunks) ...
[10:51:52.718] Chunk #1 of 1 ...
[10:51:52.719]  - Finding globals in '...' for chunk #1 ...
[10:51:52.719] getGlobalsAndPackages() ...
[10:51:52.719] |  Searching for globals ...
[10:51:52.719] |  :  globals found: [0] 
[10:51:52.719] |  Searching for globals ... DONE
[10:51:52.719] |  globals: [0] <none>
[10:51:52.719] |  packages: [0] <none>
[10:51:52.720] getGlobalsAndPackages() ... done
[10:51:52.720]    + additional globals found: [n=0] 
[10:51:52.720]    + additional namespaces needed: [n=0] 
[10:51:52.720]  - Finding globals in '...' for chunk #1 ... DONE
[10:51:52.720]  - seeds: <none>
[10:51:52.720]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:52.720] getGlobalsAndPackages() ...
[10:51:52.720] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:52.720] |  Resolving globals: FALSE
[10:51:52.720] |  Search for packages associated with the globals ...
[10:51:52.721] |  :  Packages associated with globals: [0] 
[10:51:52.721] |  :  Packages: [0] 
[10:51:52.721] |  Search for packages associated with the globals ... DONE
[10:51:52.721] |  Packages after dropping 'base': [0] 
[10:51:52.721] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:52.721] |  packages: [0] 
[10:51:52.721] getGlobalsAndPackages() ... done
[10:51:52.722] run() for Future (‘Future’) ...
[10:51:52.722] |  state: ‘created’
[10:51:52.722] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:52.722] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:52.722] |  Using SequentialFutureBackend ...
[10:51:52.722] |  :  Launching futures ...
[10:51:52.722] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:52.722] |  :  .  |  getFutureData() ...
[10:51:52.722] |  :  .  |  :  getFutureCore() ...
[10:51:52.723] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:52.723] |  :  .  |  :  getFutureCore() ... done
[10:51:52.723] |  :  .  |  :  getFutureCapture() ...
[10:51:52.723] |  :  .  |  :  getFutureCapture() ... done
[10:51:52.723] |  :  .  |  :  getFutureContext() ...
[10:51:52.723] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:52.723] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:52.723] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:52.723] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:52.724] |  :  .  |  :  getFutureContext() ... done
[10:51:52.724] |  :  .  |  getFutureData() ... done
[10:51:52.724] |  :  .  |  attachPackages() ...
[10:51:52.724] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:52.724] |  :  .  |  attachPackages() ... DONE
[10:51:52.724] |  :  .  |  attachPackages() ...
[10:51:52.724] |  :  .  |  :  packages: [n=0] 
[10:51:52.724] |  :  .  |  attachPackages() ... DONE
[10:51:52.725] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:52.725] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:52.725] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:52.725] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:52.725] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:52.725] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:52.726] |  :  .  |  :  .  |  New stack:
[10:51:52.726] |  :  .  |  :  .  |  List of 1
[10:51:52.726] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.726] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.726] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.726] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.726] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.726] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:52.726] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:52.728] |  :  .  |  :  .  |  Old stack:
[10:51:52.728] |  :  .  |  :  .  |  List of 1
[10:51:52.728] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.728] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.728] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.728] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.728] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.728] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:52.728] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:52.728] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.728] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.728] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:52.731] |  :  .  |  :  .  |  Not identical
[10:51:52.731] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:52.731] |  :  .  |  :  .  |  :  List of 2
[10:51:52.731] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.731] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.731] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.731] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.731] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.731] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:52.731] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:52.731] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:52.731] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.731] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.731] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.731] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:52.731] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:52.731] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:52.731] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:52.736] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:52.736] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:52.736] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:52.736] |  :  .  |  :  .  List of future strategies:
[10:51:52.736] |  :  .  |  :  .  1. sequential:
[10:51:52.736] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:52.736] |  :  .  |  :  .     - tweaked: FALSE
[10:51:52.736] |  :  .  |  :  .     - call: plan(sequential)
[10:51:52.738] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:52.738] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:52.738] |  :  .  |  assign_globals() ...
[10:51:52.738] |  :  .  |  List of 5
[10:51:52.738] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:51:52.738] |  :  .  |   $ MoreArgs                 : NULL
[10:51:52.738] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:52.738] |  :  .  |    ..$ :List of 2
[10:51:52.738] |  :  .  |    .. ..$ : int 1
[10:51:52.738] |  :  .  |    .. ..$ : int 0
[10:51:52.738] |  :  .  |    ..$ :List of 2
[10:51:52.738] |  :  .  |    .. ..$ : int 0
[10:51:52.738] |  :  .  |    .. ..$ : int 1
[10:51:52.738] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:52.738] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:52.738] |  :  .  |   - attr(*, "where")=List of 5
[10:51:52.738] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:52.738] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:51:52.738] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:52.738] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:52.738] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:52.738] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:52.738] |  :  .  |   - attr(*, "total_size")= num NA
[10:51:52.738] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:52.738] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:52.744] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:52.744] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:52.744] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:51:52.744] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:52.744] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:52.745] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:52.745] |  :  .  |  assign_globals() ... done
[10:51:53.249] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:53.249] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:53.249] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:53.250] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:53.250] |  :  .  |  :  .  |  :  New stack:
[10:51:53.250] |  :  .  |  :  .  |  :  List of 1
[10:51:53.250] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.250] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.250] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.250] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.250] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.250] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:53.250] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:53.250] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.250] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.250] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:53.253] |  :  .  |  :  .  |  :  Old stack:
[10:51:53.253] |  :  .  |  :  .  |  :  List of 1
[10:51:53.253] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.253] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.253] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.253] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.253] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.253] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:53.253] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:53.253] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.253] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.253] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:53.256] |  :  .  |  :  .  |  :  Identical
[10:51:53.256] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:53.256] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:53.256] |  :  .  |  :  .  |  List of future strategies:
[10:51:53.256] |  :  .  |  :  .  |  1. sequential:
[10:51:53.256] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:53.256] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:53.256] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:53.257] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:53.257] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:53.257] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:53.257] |  :  .  |  SequentialFuture started (and completed)
[10:51:53.257] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:53.259] |  :  Launching futures ... done
[10:51:53.259] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:53.259] |  Using SequentialFutureBackend ... done
[10:51:53.259] run() for Future (‘SequentialFuture’) ... done
[10:51:53.259] Created future:
[10:51:53.259] SequentialFuture:
[10:51:53.259] Label: ‘future_mapply-1’
[10:51:53.259] Expression:
[10:51:53.259] {
[10:51:53.259]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:53.259]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:53.259]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:53.259]         on.exit(options(oopts), add = TRUE)
[10:51:53.259]     }
[10:51:53.259]     {
[10:51:53.259]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:51:53.259]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:51:53.259]         do.call(mapply, args = args)
[10:51:53.259]     }
[10:51:53.259] }
[10:51:53.259] Lazy evaluation: FALSE
[10:51:53.259] Asynchronous evaluation: TRUE
[10:51:53.259] Local evaluation: TRUE
[10:51:53.259] Environment: R_GlobalEnv
[10:51:53.259] Capture standard output: FALSE
[10:51:53.259] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:53.259] Immediate condition classes: ‘immediateCondition’
[10:51:53.259] Globals: 5 objects totaling 1.21 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 95 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:53.259] Packages: <none>
[10:51:53.259] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:53.259] Resolved: TRUE
[10:51:53.259] Value: 184 bytes of class ‘list’
[10:51:53.259] Early signaling: FALSE
[10:51:53.259] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:53.259] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:53.260] Chunk #1 of 1 ... DONE
[10:51:53.260] Launching 1 futures (chunks) ... DONE
[10:51:53.261] Resolving 1 futures (chunks) ...
[10:51:53.261] value() on list ...
[10:51:53.261] |  recursive: 0
[10:51:53.261] |  length: 1
[10:51:53.261] |  
[10:51:53.261] |  Number of remaining objects: 1
[10:51:53.261] |  checking value #1 ...
[10:51:53.261] |  :  'obj' is SequentialFuture
[10:51:53.261] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:53.261] |  :  .  state: ‘finished’
[10:51:53.261] |  :  .  run: TRUE
[10:51:53.262] |  :  .  result: ‘FutureResult’
[10:51:53.262] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:53.262] |  :  SequentialFuture #1
[10:51:53.262] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:53.262] |  :  .  nx: 1
[10:51:53.262] |  :  .  relay: TRUE
[10:51:53.262] |  :  .  stdout: TRUE
[10:51:53.262] |  :  .  signal: TRUE
[10:51:53.262] |  :  .  resignal: FALSE
[10:51:53.262] |  :  .  force: TRUE
[10:51:53.262] |  :  .  relayed: [n=1] FALSE
[10:51:53.263] |  :  .  queued futures: [n=1] FALSE
[10:51:53.263] |  :  .  until=1
[10:51:53.263] |  :  .  relaying element #1
[10:51:53.263] |  :  .  relayed: [n=1] TRUE
[10:51:53.263] |  :  .  queued futures: [n=1] TRUE
[10:51:53.263] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:53.263] |  :  value(<SequentialFuture>, ...) ...
[10:51:53.263] |  :  .  value: <list>
[10:51:53.263] |  :  value(<SequentialFuture>, ...) ... done
[10:51:53.264] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:53.264] |  :  .  nx: 1
[10:51:53.264] |  :  .  relay: TRUE
[10:51:53.264] |  :  .  stdout: TRUE
[10:51:53.264] |  :  .  signal: TRUE
[10:51:53.264] |  :  .  resignal: FALSE
[10:51:53.264] |  :  .  force: TRUE
[10:51:53.264] |  :  .  relayed: [n=1] TRUE
[10:51:53.264] |  :  .  queued futures: [n=1] TRUE
[10:51:53.264] |  :  .  until=1
[10:51:53.264] |  :  .  relayed: [n=1] TRUE
[10:51:53.264] |  :  .  queued futures: [n=1] TRUE
[10:51:53.265] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:53.265] |  :  length: 0 (resolved future 1)
[10:51:53.265] |  checking value #1 ... done
[10:51:53.265] |  Relaying remaining futures ...
[10:51:53.265] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:53.265] |  :  .  nx: 1
[10:51:53.265] |  :  .  relay: TRUE
[10:51:53.265] |  :  .  stdout: TRUE
[10:51:53.265] |  :  .  signal: TRUE
[10:51:53.265] |  :  .  resignal: FALSE
[10:51:53.265] |  :  .  force: TRUE
[10:51:53.266] |  :  .  relayed: [n=1] TRUE
[10:51:53.266] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:53.266] |  :  .  relayed: [n=1] TRUE
[10:51:53.266] |  :  .  queued futures: [n=1] TRUE
[10:51:53.266] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:53.266] |  Relaying remaining futures ... done
[10:51:53.266] value() on list ... done
[10:51:53.266]  - Number of value chunks collected: 1
[10:51:53.266] Resolving 1 futures (chunks) ... DONE
[10:51:53.266] Reducing values from 1 chunks ...
[10:51:53.266]  - Number of values collected after concatenation: 2
[10:51:53.267]  - Number of values expected: 2
[10:51:53.267] Reducing values from 1 chunks ... DONE
[10:51:53.267] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ...
[10:51:53.267] future_mapply() ...
[10:51:53.267] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:53.267] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:53.267] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:53.268] Number of chunks: 1
[10:51:53.268] getGlobalsAndPackagesXApply() ...
[10:51:53.268]  - future.globals: TRUE
[10:51:53.268] getGlobalsAndPackages() ...
[10:51:53.268] |  Searching for globals ...
[10:51:53.270] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:51:53.270] |  Searching for globals ... DONE
[10:51:53.270] |  Resolving globals: FALSE
[10:51:53.270] |  Search for packages associated with the globals ...
[10:51:53.270] |  :  Packages associated with globals: [1] ‘base’
[10:51:53.270] |  :  Packages: [1] ‘base’
[10:51:53.271] |  Search for packages associated with the globals ... DONE
[10:51:53.271] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:51:53.271] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:51:53.271] |  Packages after dropping 'base': [0] 
[10:51:53.271] |  globals: [1] ‘FUN’
[10:51:53.271] |  packages: [0] 
[10:51:53.271] getGlobalsAndPackages() ... done
[10:51:53.271]  - globals found/used: [n=1] ‘FUN’
[10:51:53.272]  - needed namespaces: [n=0] 
[10:51:53.272] Finding globals ... DONE
[10:51:53.272] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:51:53.272] List of 2
[10:51:53.272]  $ ...future.FUN:function (x, y)  
[10:51:53.272]  $ MoreArgs     : NULL
[10:51:53.272]  - attr(*, "where")=List of 2
[10:51:53.272]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:53.272]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:51:53.272]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:53.272]  - attr(*, "resolved")= logi FALSE
[10:51:53.272]  - attr(*, "total_size")= num NA
[10:51:53.274] Packages to be attached in all futures: [n=0] 
[10:51:53.275] getGlobalsAndPackagesXApply() ... DONE
[10:51:53.275] Number of futures (= number of chunks): 1
[10:51:53.275] Launching 1 futures (chunks) ...
[10:51:53.275] Chunk #1 of 1 ...
[10:51:53.275]  - Finding globals in '...' for chunk #1 ...
[10:51:53.275] getGlobalsAndPackages() ...
[10:51:53.275] |  Searching for globals ...
[10:51:53.276] |  :  globals found: [0] 
[10:51:53.276] |  Searching for globals ... DONE
[10:51:53.276] |  globals: [0] <none>
[10:51:53.276] |  packages: [0] <none>
[10:51:53.276] getGlobalsAndPackages() ... done
[10:51:53.276]    + additional globals found: [n=0] 
[10:51:53.276]    + additional namespaces needed: [n=0] 
[10:51:53.276]  - Finding globals in '...' for chunk #1 ... DONE
[10:51:53.276]  - seeds: <none>
[10:51:53.276]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:53.276] getGlobalsAndPackages() ...
[10:51:53.277] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:53.277] |  Resolving globals: FALSE
[10:51:53.277] |  Search for packages associated with the globals ...
[10:51:53.277] |  :  Packages associated with globals: [0] 
[10:51:53.277] |  :  Packages: [0] 
[10:51:53.277] |  Search for packages associated with the globals ... DONE
[10:51:53.277] |  Packages after dropping 'base': [0] 
[10:51:53.278] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:53.278] |  packages: [0] 
[10:51:53.278] getGlobalsAndPackages() ... done
[10:51:53.278] run() for Future (‘Future’) ...
[10:51:53.279] |  state: ‘created’
[10:51:53.279] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:53.279] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:53.279] |  Using SequentialFutureBackend ...
[10:51:53.280] |  :  Launching futures ...
[10:51:53.280] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:53.280] |  :  .  |  getFutureData() ...
[10:51:53.280] |  :  .  |  :  getFutureCore() ...
[10:51:53.280] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:53.280] |  :  .  |  :  getFutureCore() ... done
[10:51:53.280] |  :  .  |  :  getFutureCapture() ...
[10:51:53.280] |  :  .  |  :  getFutureCapture() ... done
[10:51:53.280] |  :  .  |  :  getFutureContext() ...
[10:51:53.280] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:53.281] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:53.281] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:53.281] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:53.281] |  :  .  |  :  getFutureContext() ... done
[10:51:53.281] |  :  .  |  getFutureData() ... done
[10:51:53.281] |  :  .  |  attachPackages() ...
[10:51:53.281] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:53.281] |  :  .  |  attachPackages() ... DONE
[10:51:53.282] |  :  .  |  attachPackages() ...
[10:51:53.282] |  :  .  |  :  packages: [n=0] 
[10:51:53.282] |  :  .  |  attachPackages() ... DONE
[10:51:53.282] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:53.282] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:53.282] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:53.283] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:53.283] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:53.283] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:53.283] |  :  .  |  :  .  |  New stack:
[10:51:53.283] |  :  .  |  :  .  |  List of 1
[10:51:53.283] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.283] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.283] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.283] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.283] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.283] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:53.283] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:53.285] |  :  .  |  :  .  |  Old stack:
[10:51:53.285] |  :  .  |  :  .  |  List of 1
[10:51:53.285] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.285] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.285] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.285] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.285] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.285] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:53.285] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:53.285] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.285] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.285] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:53.288] |  :  .  |  :  .  |  Not identical
[10:51:53.288] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:53.288] |  :  .  |  :  .  |  :  List of 2
[10:51:53.288] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.288] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.288] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.288] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.288] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.288] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:53.288] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.288] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.288] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.288] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.288] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.288] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:53.288] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:53.288] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.288] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.293] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:53.293] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:53.293] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:53.293] |  :  .  |  :  .  List of future strategies:
[10:51:53.293] |  :  .  |  :  .  1. sequential:
[10:51:53.293] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:53.293] |  :  .  |  :  .     - tweaked: FALSE
[10:51:53.293] |  :  .  |  :  .     - call: plan(sequential)
[10:51:53.294] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:53.294] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:53.294] |  :  .  |  assign_globals() ...
[10:51:53.294] |  :  .  |  List of 5
[10:51:53.294] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:51:53.294] |  :  .  |   $ MoreArgs                 : NULL
[10:51:53.294] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:53.294] |  :  .  |    ..$ :List of 2
[10:51:53.294] |  :  .  |    .. ..$ : int 1
[10:51:53.294] |  :  .  |    .. ..$ : int 0
[10:51:53.294] |  :  .  |    ..$ :List of 2
[10:51:53.294] |  :  .  |    .. ..$ : int 0
[10:51:53.294] |  :  .  |    .. ..$ : int 1
[10:51:53.294] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:53.294] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:53.294] |  :  .  |   - attr(*, "where")=List of 5
[10:51:53.294] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:53.294] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:51:53.294] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:53.294] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:53.294] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:53.294] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:53.294] |  :  .  |   - attr(*, "total_size")= num NA
[10:51:53.294] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:53.294] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:53.301] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:53.301] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:53.301] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:51:53.301] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:53.301] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:53.302] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:53.302] |  :  .  |  assign_globals() ... done
[10:51:53.804] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:53.804] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:53.805] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:53.805] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:53.805] |  :  .  |  :  .  |  :  New stack:
[10:51:53.805] |  :  .  |  :  .  |  :  List of 1
[10:51:53.805] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.805] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.805] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.805] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.805] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.805] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:53.805] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:53.805] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.805] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.805] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:53.808] |  :  .  |  :  .  |  :  Old stack:
[10:51:53.808] |  :  .  |  :  .  |  :  List of 1
[10:51:53.808] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.808] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.808] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.808] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.808] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.808] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:53.808] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:53.808] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.808] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.808] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:53.811] |  :  .  |  :  .  |  :  Identical
[10:51:53.811] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:53.811] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:53.811] |  :  .  |  :  .  |  List of future strategies:
[10:51:53.811] |  :  .  |  :  .  |  1. sequential:
[10:51:53.811] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:53.811] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:53.811] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:53.812] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:53.812] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:53.812] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:53.812] |  :  .  |  SequentialFuture started (and completed)
[10:51:53.812] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:53.813] |  :  Launching futures ... done
[10:51:53.813] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:53.813] |  Using SequentialFutureBackend ... done
[10:51:53.813] run() for Future (‘SequentialFuture’) ... done
[10:51:53.813] Created future:
[10:51:53.813] SequentialFuture:
[10:51:53.813] Label: ‘future_mapply-1’
[10:51:53.813] Expression:
[10:51:53.813] {
[10:51:53.813]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:53.813]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:53.813]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:53.813]         on.exit(options(oopts), add = TRUE)
[10:51:53.813]     }
[10:51:53.813]     {
[10:51:53.813]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:51:53.813]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:51:53.813]         do.call(mapply, args = args)
[10:51:53.813]     }
[10:51:53.813] }
[10:51:53.813] Lazy evaluation: FALSE
[10:51:53.813] Asynchronous evaluation: TRUE
[10:51:53.813] Local evaluation: TRUE
[10:51:53.813] Environment: R_GlobalEnv
[10:51:53.813] Capture standard output: TRUE
[10:51:53.813] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:53.813] Immediate condition classes: ‘immediateCondition’
[10:51:53.813] Globals: 5 objects totaling 1.21 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 95 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:53.813] Packages: <none>
[10:51:53.813] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:53.813] Resolved: TRUE
[10:51:53.813] Value: 184 bytes of class ‘list’
[10:51:53.813] Early signaling: FALSE
[10:51:53.813] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:53.813] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:53.814] Chunk #1 of 1 ... DONE
[10:51:53.814] Launching 1 futures (chunks) ... DONE
[10:51:53.814] Resolving 1 futures (chunks) ...
[10:51:53.814] value() on list ...
[10:51:53.814] |  recursive: 0
[10:51:53.814] |  length: 1
[10:51:53.814] |  
[10:51:53.815] |  Number of remaining objects: 1
[10:51:53.815] |  checking value #1 ...
[10:51:53.815] |  :  'obj' is SequentialFuture
[10:51:53.815] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:53.815] |  :  .  state: ‘finished’
[10:51:53.815] |  :  .  run: TRUE
[10:51:53.815] |  :  .  result: ‘FutureResult’
[10:51:53.815] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:53.815] |  :  SequentialFuture #1
[10:51:53.815] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:53.816] |  :  .  nx: 1
[10:51:53.816] |  :  .  relay: TRUE
[10:51:53.816] |  :  .  stdout: TRUE
[10:51:53.816] |  :  .  signal: TRUE
[10:51:53.816] |  :  .  resignal: FALSE
[10:51:53.816] |  :  .  force: TRUE
[10:51:53.816] |  :  .  relayed: [n=1] FALSE
[10:51:53.816] |  :  .  queued futures: [n=1] FALSE
[10:51:53.816] |  :  .  until=1
[10:51:53.816] |  :  .  relaying element #1
[10:51:53.817] |  :  .  relayed: [n=1] TRUE
[10:51:53.817] |  :  .  queued futures: [n=1] TRUE
[10:51:53.817] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:53.817] |  :  value(<SequentialFuture>, ...) ...
[10:51:53.817] |  :  .  value: <list>
[10:51:53.817] |  :  value(<SequentialFuture>, ...) ... done
[10:51:53.817] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:53.817] |  :  .  nx: 1
[10:51:53.817] |  :  .  relay: TRUE
[10:51:53.817] |  :  .  stdout: TRUE
[10:51:53.817] |  :  .  signal: TRUE
[10:51:53.818] |  :  .  resignal: FALSE
[10:51:53.818] |  :  .  force: TRUE
[10:51:53.818] |  :  .  relayed: [n=1] TRUE
[10:51:53.818] |  :  .  queued futures: [n=1] TRUE
[10:51:53.818] |  :  .  until=1
[10:51:53.818] |  :  .  relayed: [n=1] TRUE
[10:51:53.818] |  :  .  queued futures: [n=1] TRUE
[10:51:53.818] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:53.818] |  :  length: 0 (resolved future 1)
[10:51:53.818] |  checking value #1 ... done
[10:51:53.819] |  Relaying remaining futures ...
[10:51:53.819] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:53.821] |  :  .  nx: 1
[10:51:53.821] |  :  .  relay: TRUE
[10:51:53.821] |  :  .  stdout: TRUE
[10:51:53.821] |  :  .  signal: TRUE
[10:51:53.821] |  :  .  resignal: FALSE
[10:51:53.821] |  :  .  force: TRUE
[10:51:53.821] |  :  .  relayed: [n=1] TRUE
[10:51:53.822] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:53.822] |  :  .  relayed: [n=1] TRUE
[10:51:53.822] |  :  .  queued futures: [n=1] TRUE
[10:51:53.822] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:53.822] |  Relaying remaining futures ... done
[10:51:53.822] value() on list ... done
[10:51:53.823]  - Number of value chunks collected: 1
[10:51:53.823] Resolving 1 futures (chunks) ... DONE
[10:51:53.823] Reducing values from 1 chunks ...
[10:51:53.823]  - Number of values collected after concatenation: 2
[10:51:53.823]  - Number of values expected: 2
[10:51:53.823] Reducing values from 1 chunks ... DONE
[10:51:53.823] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ... DONE
* future_mapply(x, ..., future.stdout = NA) ...
[10:51:53.824] future_mapply() ...
[10:51:53.824] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:53.824] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:53.824] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:53.825] Number of chunks: 1
[10:51:53.825] getGlobalsAndPackagesXApply() ...
[10:51:53.825]  - future.globals: TRUE
[10:51:53.825] getGlobalsAndPackages() ...
[10:51:53.825] |  Searching for globals ...
[10:51:53.828] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:51:53.828] |  Searching for globals ... DONE
[10:51:53.828] |  Resolving globals: FALSE
[10:51:53.828] |  Search for packages associated with the globals ...
[10:51:53.829] |  :  Packages associated with globals: [1] ‘base’
[10:51:53.829] |  :  Packages: [1] ‘base’
[10:51:53.829] |  Search for packages associated with the globals ... DONE
[10:51:53.829] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:51:53.830] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:51:53.830] |  Packages after dropping 'base': [0] 
[10:51:53.830] |  globals: [1] ‘FUN’
[10:51:53.830] |  packages: [0] 
[10:51:53.830] getGlobalsAndPackages() ... done
[10:51:53.831]  - globals found/used: [n=1] ‘FUN’
[10:51:53.831]  - needed namespaces: [n=0] 
[10:51:53.831] Finding globals ... DONE
[10:51:53.831] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:51:53.831] List of 2
[10:51:53.831]  $ ...future.FUN:function (x, y)  
[10:51:53.831]  $ MoreArgs     : NULL
[10:51:53.831]  - attr(*, "where")=List of 2
[10:51:53.831]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:53.831]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:51:53.831]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:53.831]  - attr(*, "resolved")= logi FALSE
[10:51:53.831]  - attr(*, "total_size")= num NA
[10:51:53.835] Packages to be attached in all futures: [n=0] 
[10:51:53.835] getGlobalsAndPackagesXApply() ... DONE
[10:51:53.835] Number of futures (= number of chunks): 1
[10:51:53.835] Launching 1 futures (chunks) ...
[10:51:53.835] Chunk #1 of 1 ...
[10:51:53.836]  - Finding globals in '...' for chunk #1 ...
[10:51:53.836] getGlobalsAndPackages() ...
[10:51:53.836] |  Searching for globals ...
[10:51:53.836] |  :  globals found: [0] 
[10:51:53.836] |  Searching for globals ... DONE
[10:51:53.836] |  globals: [0] <none>
[10:51:53.836] |  packages: [0] <none>
[10:51:53.837] getGlobalsAndPackages() ... done
[10:51:53.837]    + additional globals found: [n=0] 
[10:51:53.837]    + additional namespaces needed: [n=0] 
[10:51:53.837]  - Finding globals in '...' for chunk #1 ... DONE
[10:51:53.837]  - seeds: <none>
[10:51:53.837]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:53.837] getGlobalsAndPackages() ...
[10:51:53.837] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:53.837] |  Resolving globals: FALSE
[10:51:53.837] |  Search for packages associated with the globals ...
[10:51:53.838] |  :  Packages associated with globals: [0] 
[10:51:53.838] |  :  Packages: [0] 
[10:51:53.838] |  Search for packages associated with the globals ... DONE
[10:51:53.838] |  Packages after dropping 'base': [0] 
[10:51:53.838] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:53.838] |  packages: [0] 
[10:51:53.838] getGlobalsAndPackages() ... done
[10:51:53.839] run() for Future (‘Future’) ...
[10:51:53.839] |  state: ‘created’
[10:51:53.839] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:53.839] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:53.839] |  Using SequentialFutureBackend ...
[10:51:53.839] |  :  Launching futures ...
[10:51:53.839] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:53.839] |  :  .  |  getFutureData() ...
[10:51:53.840] |  :  .  |  :  getFutureCore() ...
[10:51:53.840] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:53.840] |  :  .  |  :  getFutureCore() ... done
[10:51:53.840] |  :  .  |  :  getFutureCapture() ...
[10:51:53.840] |  :  .  |  :  getFutureCapture() ... done
[10:51:53.840] |  :  .  |  :  getFutureContext() ...
[10:51:53.840] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:53.840] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:53.840] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:53.840] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:53.841] |  :  .  |  :  getFutureContext() ... done
[10:51:53.841] |  :  .  |  getFutureData() ... done
[10:51:53.841] |  :  .  |  attachPackages() ...
[10:51:53.841] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:53.841] |  :  .  |  attachPackages() ... DONE
[10:51:53.841] |  :  .  |  attachPackages() ...
[10:51:53.841] |  :  .  |  :  packages: [n=0] 
[10:51:53.841] |  :  .  |  attachPackages() ... DONE
[10:51:53.842] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:53.842] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:53.842] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:53.842] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:53.842] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:53.842] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:53.842] |  :  .  |  :  .  |  New stack:
[10:51:53.843] |  :  .  |  :  .  |  List of 1
[10:51:53.843] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.843] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.843] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.843] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.843] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.843] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:53.843] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:53.846] |  :  .  |  :  .  |  Old stack:
[10:51:53.846] |  :  .  |  :  .  |  List of 1
[10:51:53.846] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.846] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.846] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.846] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.846] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.846] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:53.846] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:53.846] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.846] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.846] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:53.849] |  :  .  |  :  .  |  Not identical
[10:51:53.850] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:53.850] |  :  .  |  :  .  |  :  List of 2
[10:51:53.850] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.850] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.850] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.850] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.850] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.850] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:53.850] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:53.850] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:53.850] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.850] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.850] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.850] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:53.850] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:53.850] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:53.850] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:53.854] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:53.854] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:53.855] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:53.855] |  :  .  |  :  .  List of future strategies:
[10:51:53.855] |  :  .  |  :  .  1. sequential:
[10:51:53.855] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:53.855] |  :  .  |  :  .     - tweaked: FALSE
[10:51:53.855] |  :  .  |  :  .     - call: plan(sequential)
[10:51:53.855] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:53.855] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:53.855] |  :  .  |  assign_globals() ...
[10:51:53.855] |  :  .  |  List of 5
[10:51:53.855] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:51:53.855] |  :  .  |   $ MoreArgs                 : NULL
[10:51:53.855] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:53.855] |  :  .  |    ..$ :List of 2
[10:51:53.855] |  :  .  |    .. ..$ : int 1
[10:51:53.855] |  :  .  |    .. ..$ : int 0
[10:51:53.855] |  :  .  |    ..$ :List of 2
[10:51:53.855] |  :  .  |    .. ..$ : int 0
[10:51:53.855] |  :  .  |    .. ..$ : int 1
[10:51:53.855] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:53.855] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:53.855] |  :  .  |   - attr(*, "where")=List of 5
[10:51:53.855] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:53.855] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:51:53.855] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:53.855] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:53.855] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:53.855] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:53.855] |  :  .  |   - attr(*, "total_size")= num NA
[10:51:53.855] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:53.855] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:53.861] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:53.861] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:53.862] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:51:53.862] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:53.862] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:53.862] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:53.862] |  :  .  |  assign_globals() ... done
[10:51:54.364] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:54.365] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:54.365] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:54.365] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:54.367] |  :  .  |  :  .  |  :  New stack:
[10:51:54.367] |  :  .  |  :  .  |  :  List of 1
[10:51:54.367] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:54.367] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:54.367] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.367] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.367] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.367] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:54.367] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:54.367] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.367] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.367] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:54.370] |  :  .  |  :  .  |  :  Old stack:
[10:51:54.370] |  :  .  |  :  .  |  :  List of 1
[10:51:54.370] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:54.370] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:54.370] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.370] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.370] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.370] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:54.370] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:54.370] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.370] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.370] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:54.373] |  :  .  |  :  .  |  :  Identical
[10:51:54.373] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:54.373] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:54.373] |  :  .  |  :  .  |  List of future strategies:
[10:51:54.373] |  :  .  |  :  .  |  1. sequential:
[10:51:54.373] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:54.373] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:54.373] |  :  .  |  :  .  |     - call: plan(sequential)
[10:51:54.374] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:54.374] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:54.374] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:54.374] |  :  .  |  SequentialFuture started (and completed)
[10:51:54.375] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:54.375] |  :  Launching futures ... done
[10:51:54.375] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:54.375] |  Using SequentialFutureBackend ... done
[10:51:54.375] run() for Future (‘SequentialFuture’) ... done
[10:51:54.375] Created future:
[10:51:54.375] SequentialFuture:
[10:51:54.375] Label: ‘future_mapply-1’
[10:51:54.375] Expression:
[10:51:54.375] {
[10:51:54.375]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:54.375]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:54.375]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:54.375]         on.exit(options(oopts), add = TRUE)
[10:51:54.375]     }
[10:51:54.375]     {
[10:51:54.375]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:51:54.375]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:51:54.375]         do.call(mapply, args = args)
[10:51:54.375]     }
[10:51:54.375] }
[10:51:54.375] Lazy evaluation: FALSE
[10:51:54.375] Asynchronous evaluation: TRUE
[10:51:54.375] Local evaluation: TRUE
[10:51:54.375] Environment: R_GlobalEnv
[10:51:54.375] Capture standard output: NA
[10:51:54.375] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:54.375] Immediate condition classes: ‘immediateCondition’
[10:51:54.375] Globals: 5 objects totaling 1.21 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 95 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:54.375] Packages: <none>
[10:51:54.375] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:54.375] Resolved: TRUE
[10:51:54.375] Value: 184 bytes of class ‘list’
[10:51:54.375] Early signaling: FALSE
[10:51:54.375] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:54.375] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:54.376] Chunk #1 of 1 ... DONE
[10:51:54.376] Launching 1 futures (chunks) ... DONE
[10:51:54.376] Resolving 1 futures (chunks) ...
[10:51:54.376] value() on list ...
[10:51:54.376] |  recursive: 0
[10:51:54.376] |  length: 1
[10:51:54.377] |  
[10:51:54.377] |  Number of remaining objects: 1
[10:51:54.377] |  checking value #1 ...
[10:51:54.377] |  :  'obj' is SequentialFuture
[10:51:54.377] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:54.377] |  :  .  state: ‘finished’
[10:51:54.377] |  :  .  run: TRUE
[10:51:54.377] |  :  .  result: ‘FutureResult’
[10:51:54.377] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:54.377] |  :  SequentialFuture #1
[10:51:54.377] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:54.378] |  :  .  nx: 1
[10:51:54.378] |  :  .  relay: TRUE
[10:51:54.378] |  :  .  stdout: TRUE
[10:51:54.378] |  :  .  signal: TRUE
[10:51:54.378] |  :  .  resignal: FALSE
[10:51:54.378] |  :  .  force: TRUE
[10:51:54.378] |  :  .  relayed: [n=1] FALSE
[10:51:54.378] |  :  .  queued futures: [n=1] FALSE
[10:51:54.378] |  :  .  until=1
[10:51:54.378] |  :  .  relaying element #1
[10:51:54.379] |  :  .  relayed: [n=1] TRUE
[10:51:54.379] |  :  .  queued futures: [n=1] TRUE
[10:51:54.379] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:54.379] |  :  value(<SequentialFuture>, ...) ...
[10:51:54.379] |  :  .  value: <list>
[10:51:54.379] |  :  value(<SequentialFuture>, ...) ... done
[10:51:54.379] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:54.379] |  :  .  nx: 1
[10:51:54.379] |  :  .  relay: TRUE
[10:51:54.379] |  :  .  stdout: TRUE
[10:51:54.379] |  :  .  signal: TRUE
[10:51:54.380] |  :  .  resignal: FALSE
[10:51:54.380] |  :  .  force: TRUE
[10:51:54.380] |  :  .  relayed: [n=1] TRUE
[10:51:54.380] |  :  .  queued futures: [n=1] TRUE
[10:51:54.380] |  :  .  until=1
[10:51:54.380] |  :  .  relayed: [n=1] TRUE
[10:51:54.380] |  :  .  queued futures: [n=1] TRUE
[10:51:54.380] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:54.380] |  :  length: 0 (resolved future 1)
[10:51:54.380] |  checking value #1 ... done
[10:51:54.380] |  Relaying remaining futures ...
[10:51:54.381] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:54.381] |  :  .  nx: 1
[10:51:54.381] |  :  .  relay: TRUE
[10:51:54.381] |  :  .  stdout: TRUE
[10:51:54.381] |  :  .  signal: TRUE
[10:51:54.381] |  :  .  resignal: FALSE
[10:51:54.381] |  :  .  force: TRUE
[10:51:54.381] |  :  .  relayed: [n=1] TRUE
[10:51:54.381] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:54.381] |  :  .  relayed: [n=1] TRUE
[10:51:54.381] |  :  .  queued futures: [n=1] TRUE
[10:51:54.382] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:54.382] |  Relaying remaining futures ... done
[10:51:54.382] value() on list ... done
[10:51:54.382]  - Number of value chunks collected: 1
[10:51:54.382] Resolving 1 futures (chunks) ... DONE
[10:51:54.382] Reducing values from 1 chunks ...
[10:51:54.382]  - Number of values collected after concatenation: 2
[10:51:54.382]  - Number of values expected: 2
[10:51:54.382] Reducing values from 1 chunks ... DONE
[10:51:54.382] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = NA) ... DONE
* plan('sequential') ... DONE
* plan('multicore') ...
[10:51:54.383] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:54.383] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:54.383] |  :  all.equal() for FutureStrategyList ...
[10:51:54.383] |  :  .  New stack:
[10:51:54.383] |  :  .  List of 1
[10:51:54.383] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:54.383] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:54.383] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:54.383] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.383] |  :  .      ...)  
[10:51:54.383] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.383] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.383] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:54.383] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:54.385] |  :  .  Old stack:
[10:51:54.386] |  :  .  List of 1
[10:51:54.386] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:54.386] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:54.386] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.386] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.386] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.386] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:54.386] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:54.386] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.386] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.386] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:54.414] |  :  .  Not identical
[10:51:54.414] |  :  .  all.equal() for future ...
[10:51:54.414] |  :  .  |  List of 2
[10:51:54.414] |  :  .  |   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:54.414] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:54.414] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:54.414] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.414] |  :  .  |      ...)  
[10:51:54.414] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.414] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.414] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:54.414] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:54.414] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:54.414] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.414] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.414] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.414] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:54.414] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625806b2430> 
[10:51:54.414] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.414] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.418] |  :  .  |  Formals differ
[10:51:54.418] |  :  .  all.equal() for future ... done
[10:51:54.418] |  :  .  Future strategies differ at level 1
[10:51:54.418] |  :  all.equal() for FutureStrategyList ... done
[10:51:54.418] |  :  plan(): Setting new future strategy stack:
[10:51:54.419] |  :  List of future strategies:
[10:51:54.419] |  :  1. multicore:
[10:51:54.419] |  :     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:54.419] |  :     - tweaked: FALSE
[10:51:54.419] |  :     - call: plan(strategy)
[10:51:54.419] |  :  List of 1
[10:51:54.419] |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:54.419] |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:54.419] |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:54.419] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.419] |  :      ...)  
[10:51:54.419] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.419] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.419] |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:54.419] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:54.421] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:51:54.421] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:54.421] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:54.422] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:54.422] |  :  .  Legacy shutdown of cluster workers ...
[10:51:54.422] |  :  .  |  Stopping existing cluster ...
[10:51:54.422] |  :  .  |  :  No pre-existing cluster. Skipping
[10:51:54.422] |  :  .  |  Stopping existing cluster ... done
[10:51:54.422] |  :  .  Legacy shutdown of cluster workers ... done
[10:51:54.422] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:51:54.422] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:51:54.422] |  :  .  function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:54.422] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:54.422] |  :  .   - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:54.422] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.422] |  :  .      ...)  
[10:51:54.422] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.422] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.422] |  :  .   - attr(*, "call")= language plan(strategy)
[10:51:54.424] |  :  .  init: NULL
[10:51:54.424] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:51:54.424] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:54.424] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:54.425] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:54.425] |  :  Backend function: <‘NULL’>
[10:51:54.426] |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:54.426] |  :  plan(): nbrOfWorkers() = 1
[10:51:54.426] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:54.427] plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
* future_lapply(x, ..., future.stdout = FALSE) ...
[10:51:54.427] future_lapply() ...
[10:51:54.428] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:54.428] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:54.428] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:54.428] Backend function: <‘NULL’>
[10:51:54.439] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:54.439] Number of chunks: 1
[10:51:54.439] getGlobalsAndPackagesXApply() ...
[10:51:54.439]  - future.globals: TRUE
[10:51:54.439] getGlobalsAndPackages() ...
[10:51:54.439] |  Searching for globals ...
[10:51:54.441] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:51:54.441] |  Searching for globals ... DONE
[10:51:54.441] |  Resolving globals: FALSE
[10:51:54.441] |  Search for packages associated with the globals ...
[10:51:54.441] |  :  Packages associated with globals: [1] ‘base’
[10:51:54.442] |  :  Packages: [1] ‘base’
[10:51:54.442] |  Search for packages associated with the globals ... DONE
[10:51:54.442] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:51:54.442] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:51:54.442] |  Packages after dropping 'base': [0] 
[10:51:54.442] |  globals: [1] ‘FUN’
[10:51:54.443] |  packages: [0] 
[10:51:54.443] getGlobalsAndPackages() ... done
[10:51:54.443]  - globals found/used: [n=1] ‘FUN’
[10:51:54.443]  - needed namespaces: [n=0] 
[10:51:54.443] Finding globals ... DONE
[10:51:54.443]  - use_args: TRUE
[10:51:54.443]  - Getting '...' globals ...
[10:51:54.443] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:54.443] |  recursive: 0
[10:51:54.444] |  length: 1
[10:51:54.444] |  elements: ‘...’
[10:51:54.444] |  'obj' is DotDotDotList
[10:51:54.444] |  resolve(obj, ...) ...
[10:51:54.444] |  resolve(obj, ...) ... done
[10:51:54.444] |  length: 0 (resolved future 1)
[10:51:54.444] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:54.444]    - '...' content: [n=0] 
[10:51:54.444] List of 1
[10:51:54.444]  $ ...: list()
[10:51:54.444]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:54.444]  - attr(*, "where")=List of 1
[10:51:54.444]   ..$ ...:<environment: 0x5625826f3c28> 
[10:51:54.444]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:54.444]  - attr(*, "resolved")= logi TRUE
[10:51:54.444]  - attr(*, "total_size")= num NA
[10:51:54.447]  - Getting '...' globals ... DONE
[10:51:54.447] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:54.447] List of 2
[10:51:54.447]  $ ...future.FUN:function (x)  
[10:51:54.447]  $ ...          : list()
[10:51:54.447]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:54.447]  - attr(*, "where")=List of 2
[10:51:54.447]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:54.447]   ..$ ...          :<environment: 0x5625826f3c28> 
[10:51:54.447]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:54.447]  - attr(*, "resolved")= logi FALSE
[10:51:54.447]  - attr(*, "total_size")= num 5632
[10:51:54.450] Packages to be attached in all futures: [n=0] 
[10:51:54.450] getGlobalsAndPackagesXApply() ... DONE
[10:51:54.450] Number of futures (= number of chunks): 1
[10:51:54.450] Launching 1 futures (chunks) ...
[10:51:54.450] Chunk #1 of 1 ...
[10:51:54.450]  - Finding globals in 'X' for chunk #1 ...
[10:51:54.450] getGlobalsAndPackages() ...
[10:51:54.451] |  Searching for globals ...
[10:51:54.451] |  :  globals found: [0] 
[10:51:54.451] |  Searching for globals ... DONE
[10:51:54.451] |  globals: [0] <none>
[10:51:54.451] |  packages: [0] <none>
[10:51:54.451] getGlobalsAndPackages() ... done
[10:51:54.451]    + additional globals found: [n=0] 
[10:51:54.451]    + additional namespaces needed: [n=0] 
[10:51:54.452]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:54.452]  - seeds: <none>
[10:51:54.452]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:54.453] getGlobalsAndPackages() ...
[10:51:54.453] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:54.453] |  Resolving globals: FALSE
[10:51:54.453] |  Tweak future expression to call with '...' arguments ...
[10:51:54.453] |  :  {
[10:51:54.453] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:54.453] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:54.453] |  :      "# as a global variable                                         "
[10:51:54.453] |  :      do.call(function(...) {
[10:51:54.453] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:54.453] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:54.453] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:54.453] |  :          "# anonymous function.                                          "
[10:51:54.453] |  :          "#                                                              "
[10:51:54.453] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:54.453] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:54.453] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:54.453] |  :          "# global environment, which is where globals are written.      "
[10:51:54.453] |  :          penv <- env <- environment(...future.FUN)
[10:51:54.453] |  :          repeat {
[10:51:54.453] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:54.453] |  :                  emptyenv())) 
[10:51:54.453] |  :                  break
[10:51:54.453] |  :              penv <- env
[10:51:54.453] |  :              env <- parent.env(env)
[10:51:54.453] |  :          }
[10:51:54.453] |  :          if (identical(penv, globalenv())) {
[10:51:54.453] |  :              environment(...future.FUN) <- environment()
[10:51:54.453] |  :          }
[10:51:54.453] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:54.453] |  :              !isNamespace(penv)) {
[10:51:54.453] |  :              parent.env(penv) <- environment()
[10:51:54.453] |  :          }
[10:51:54.453] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:54.453] |  :          {
[10:51:54.453] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:54.453] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:54.453] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:54.453] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:54.453] |  :              }
[10:51:54.453] |  :              {
[10:51:54.453] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:54.453] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:54.453] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:54.453] |  :                  })
[10:51:54.453] |  :              }
[10:51:54.453] |  :          }
[10:51:54.453] |  :      }, args = future.call.arguments)
[10:51:54.453] |  :  }
[10:51:54.453] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:54.454] |  Search for packages associated with the globals ...
[10:51:54.454] |  :  Packages associated with globals: [0] 
[10:51:54.454] |  :  Packages: [0] 
[10:51:54.454] |  Search for packages associated with the globals ... DONE
[10:51:54.454] |  Packages after dropping 'base': [0] 
[10:51:54.454] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:54.454] |  packages: [0] 
[10:51:54.455] getGlobalsAndPackages() ... done
[10:51:54.455] run() for Future (‘Future’) ...
[10:51:54.455] |  state: ‘created’
[10:51:54.455] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:54.455] |  :  makeFutureBackend(<multicore>) ...
[10:51:54.455] |  :  .  Backend function: <‘NULL’>
[10:51:54.457] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:54.457] |  :  makeFutureBackend(<multicore>) ... done
[10:51:54.457] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:54.457] |  Using SequentialFutureBackend ...
[10:51:54.457] |  :  Launching futures ...
[10:51:54.457] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:54.457] |  :  .  |  getFutureData() ...
[10:51:54.457] |  :  .  |  :  getFutureCore() ...
[10:51:54.457] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:54.458] |  :  .  |  :  getFutureCore() ... done
[10:51:54.458] |  :  .  |  :  getFutureCapture() ...
[10:51:54.458] |  :  .  |  :  getFutureCapture() ... done
[10:51:54.458] |  :  .  |  :  getFutureContext() ...
[10:51:54.458] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:54.458] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:54.458] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:54.458] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:54.458] |  :  .  |  :  getFutureContext() ... done
[10:51:54.458] |  :  .  |  getFutureData() ... done
[10:51:54.459] |  :  .  |  attachPackages() ...
[10:51:54.459] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:54.459] |  :  .  |  attachPackages() ... DONE
[10:51:54.459] |  :  .  |  attachPackages() ...
[10:51:54.459] |  :  .  |  :  packages: [n=0] 
[10:51:54.459] |  :  .  |  attachPackages() ... DONE
[10:51:54.459] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:54.460] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:54.460] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:54.460] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:54.460] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:54.460] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:54.460] |  :  .  |  :  .  |  New stack:
[10:51:54.460] |  :  .  |  :  .  |  List of 1
[10:51:54.460] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:54.460] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:54.460] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.460] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.460] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.460] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:54.460] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:54.463] |  :  .  |  :  .  |  Old stack:
[10:51:54.463] |  :  .  |  :  .  |  List of 1
[10:51:54.463] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:54.463] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:54.463] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:54.463] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.463] |  :  .  |  :  .  |      ...)  
[10:51:54.463] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.463] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.463] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:54.463] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:54.463] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.463] |  :  .  |  :  .  |      ...)  
[10:51:54.463] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.463] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:54.466] |  :  .  |  :  .  |  Not identical
[10:51:54.466] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:54.466] |  :  .  |  :  .  |  :  List of 2
[10:51:54.466] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:54.466] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:54.466] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.466] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.466] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.466] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:54.466] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:54.466] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:54.466] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:54.466] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.466] |  :  .  |  :  .  |  :      ...)  
[10:51:54.466] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.466] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.466] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:54.466] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:54.466] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.466] |  :  .  |  :  .  |  :      ...)  
[10:51:54.466] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.470] |  :  .  |  :  .  |  :  Formals differ
[10:51:54.470] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:54.471] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:54.471] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:54.471] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:54.471] |  :  .  |  :  .  List of future strategies:
[10:51:54.471] |  :  .  |  :  .  1. sequential:
[10:51:54.471] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:54.471] |  :  .  |  :  .     - tweaked: FALSE
[10:51:54.471] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:54.471] |  :  .  |  :  .  List of 1
[10:51:54.471] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:54.471] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:54.471] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.471] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.471] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.471] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:54.471] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:54.474] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:54.474] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:54.474] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:54.475] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:54.475] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:54.475] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:54.475] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:54.475] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:54.475] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:54.475] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:54.475] |  :  .  |  assign_globals() ...
[10:51:54.476] |  :  .  |  List of 5
[10:51:54.476] |  :  .  |   $ ...future.FUN            :function (x)  
[10:51:54.476] |  :  .  |   $ future.call.arguments    : list()
[10:51:54.476] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:54.476] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:54.476] |  :  .  |    ..$ : int 1
[10:51:54.476] |  :  .  |    ..$ : int 0
[10:51:54.476] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:54.476] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:54.476] |  :  .  |   - attr(*, "where")=List of 5
[10:51:54.476] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:54.476] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:54.476] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:54.476] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:54.476] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:54.476] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:54.476] |  :  .  |   - attr(*, "total_size")= num 5632
[10:51:54.476] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:54.476] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:54.481] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:54.481] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:54.481] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:54.481] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:54.481] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:54.481] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:54.481] |  :  .  |  assign_globals() ... done
[10:51:54.984] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:54.984] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:54.984] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:54.984] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:54.984] |  :  .  |  :  .  |  :  New stack:
[10:51:54.985] |  :  .  |  :  .  |  :  List of 1
[10:51:54.985] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:54.985] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:54.985] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:54.985] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.985] |  :  .  |  :  .  |  :      ...)  
[10:51:54.985] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.985] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.985] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:54.985] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:54.985] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.985] |  :  .  |  :  .  |  :      ...)  
[10:51:54.985] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.985] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:54.988] |  :  .  |  :  .  |  :  Old stack:
[10:51:54.988] |  :  .  |  :  .  |  :  List of 1
[10:51:54.988] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:54.988] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:54.988] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.988] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.988] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.988] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:54.988] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:54.990] |  :  .  |  :  .  |  :  Not identical
[10:51:54.990] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:51:54.991] |  :  .  |  :  .  |  :  .  List of 2
[10:51:54.991] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:54.991] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:54.991] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:54.991] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.991] |  :  .  |  :  .  |  :  .      ...)  
[10:51:54.991] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.991] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.991] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:54.991] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:54.991] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.991] |  :  .  |  :  .  |  :  .      ...)  
[10:51:54.991] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.991] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:54.991] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:54.991] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:54.991] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.991] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:54.991] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:54.995] |  :  .  |  :  .  |  :  .  Formals differ
[10:51:54.995] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:51:54.996] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:51:54.996] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:54.997] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:51:54.998] |  :  .  |  :  .  |  List of future strategies:
[10:51:54.998] |  :  .  |  :  .  |  1. multicore:
[10:51:54.998] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:54.998] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:54.998] |  :  .  |  :  .  |     - call: plan(strategy)
[10:51:54.998] |  :  .  |  :  .  |  List of 1
[10:51:54.998] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:54.998] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:54.998] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:54.998] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.998] |  :  .  |  :  .  |      ...)  
[10:51:54.998] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.998] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.998] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:54.998] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:54.998] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:54.998] |  :  .  |  :  .  |      ...)  
[10:51:54.998] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:54.998] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:55.001] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:55.002] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:55.002] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.002] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:55.002] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.002] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:51:55.002] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:55.002] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:55.002] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:55.003] |  :  .  |  SequentialFuture started (and completed)
[10:51:55.003] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:55.003] |  :  Launching futures ... done
[10:51:55.003] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:55.003] |  Using SequentialFutureBackend ... done
[10:51:55.003] run() for Future (‘SequentialFuture’) ... done
[10:51:55.003] Created future:
[10:51:55.003] SequentialFuture:
[10:51:55.003] Label: ‘future_lapply-1’
[10:51:55.003] Expression:
[10:51:55.003] {
[10:51:55.003]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:55.003]     "# expression in do.call(), because function called uses '...'  "
[10:51:55.003]     "# as a global variable                                         "
[10:51:55.003]     do.call(function(...) {
[10:51:55.003]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:55.003]         "# without having an '...' argument. This means '...' is treated"
[10:51:55.003]         "# as a global variable. This may happen when FUN() is an       "
[10:51:55.003]         "# anonymous function.                                          "
[10:51:55.003]         "#                                                              "
[10:51:55.003]         "# If an anonymous function, we will make sure to restore the   "
[10:51:55.003]         "# function environment of FUN() to the calling environment.    "
[10:51:55.003]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:55.003]         "# global environment, which is where globals are written.      "
[10:51:55.003]         penv <- env <- environment(...future.FUN)
[10:51:55.003]         repeat {
[10:51:55.003]             if (identical(env, globalenv()) || identical(env, 
[10:51:55.003]                 emptyenv())) 
[10:51:55.003]                 break
[10:51:55.003]             penv <- env
[10:51:55.003]             env <- parent.env(env)
[10:51:55.003]         }
[10:51:55.003]         if (identical(penv, globalenv())) {
[10:51:55.003]             environment(...future.FUN) <- environment()
[10:51:55.003]         }
[10:51:55.003]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:55.003]             !isNamespace(penv)) {
[10:51:55.003]             parent.env(penv) <- environment()
[10:51:55.003]         }
[10:51:55.003]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:55.003]         {
[10:51:55.003]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:55.003]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:55.003]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:55.003]                 on.exit(options(oopts), add = TRUE)
[10:51:55.003]             }
[10:51:55.003]             {
[10:51:55.003]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:55.003]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:55.003]                   ...future.FUN(...future.X_jj, ...)
[10:51:55.003]                 })
[10:51:55.003]             }
[10:51:55.003]         }
[10:51:55.003]     }, args = future.call.arguments)
[10:51:55.003] }
[10:51:55.003] Lazy evaluation: FALSE
[10:51:55.003] Asynchronous evaluation: TRUE
[10:51:55.003] Local evaluation: TRUE
[10:51:55.003] Environment: R_GlobalEnv
[10:51:55.003] Capture standard output: FALSE
[10:51:55.003] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:55.003] Immediate condition classes: ‘immediateCondition’
[10:51:55.003] Globals: 5 objects totaling 1.02 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:55.003] Packages: <none>
[10:51:55.003] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:55.003] Resolved: TRUE
[10:51:55.003] Value: 55 bytes of class ‘list’
[10:51:55.003] Early signaling: FALSE
[10:51:55.003] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:55.003] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:55.005] Chunk #1 of 1 ... DONE
[10:51:55.005] Launching 1 futures (chunks) ... DONE
[10:51:55.005] Resolving 1 futures (chunks) ...
[10:51:55.005] value() on list ...
[10:51:55.005] |  recursive: 0
[10:51:55.005] |  length: 1
[10:51:55.005] |  
[10:51:55.005] |  Number of remaining objects: 1
[10:51:55.005] |  checking value #1 ...
[10:51:55.005] |  :  'obj' is SequentialFuture
[10:51:55.005] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:55.006] |  :  .  state: ‘finished’
[10:51:55.006] |  :  .  run: TRUE
[10:51:55.006] |  :  .  result: ‘FutureResult’
[10:51:55.006] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:55.006] |  :  SequentialFuture #1
[10:51:55.006] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:55.006] |  :  .  nx: 1
[10:51:55.006] |  :  .  relay: TRUE
[10:51:55.006] |  :  .  stdout: TRUE
[10:51:55.006] |  :  .  signal: TRUE
[10:51:55.006] |  :  .  resignal: FALSE
[10:51:55.007] |  :  .  force: TRUE
[10:51:55.007] |  :  .  relayed: [n=1] FALSE
[10:51:55.007] |  :  .  queued futures: [n=1] FALSE
[10:51:55.007] |  :  .  until=1
[10:51:55.007] |  :  .  relaying element #1
[10:51:55.007] |  :  .  relayed: [n=1] TRUE
[10:51:55.007] |  :  .  queued futures: [n=1] TRUE
[10:51:55.007] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:55.007] |  :  value(<SequentialFuture>, ...) ...
[10:51:55.008] |  :  .  value: <list>
[10:51:55.008] |  :  value(<SequentialFuture>, ...) ... done
[10:51:55.008] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:55.008] |  :  .  nx: 1
[10:51:55.008] |  :  .  relay: TRUE
[10:51:55.008] |  :  .  stdout: TRUE
[10:51:55.008] |  :  .  signal: TRUE
[10:51:55.008] |  :  .  resignal: FALSE
[10:51:55.008] |  :  .  force: TRUE
[10:51:55.008] |  :  .  relayed: [n=1] TRUE
[10:51:55.008] |  :  .  queued futures: [n=1] TRUE
[10:51:55.008] |  :  .  until=1
[10:51:55.009] |  :  .  relayed: [n=1] TRUE
[10:51:55.009] |  :  .  queued futures: [n=1] TRUE
[10:51:55.009] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:55.009] |  :  length: 0 (resolved future 1)
[10:51:55.009] |  checking value #1 ... done
[10:51:55.009] |  Relaying remaining futures ...
[10:51:55.009] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:55.009] |  :  .  nx: 1
[10:51:55.009] |  :  .  relay: TRUE
[10:51:55.009] |  :  .  stdout: TRUE
[10:51:55.009] |  :  .  signal: TRUE
[10:51:55.010] |  :  .  resignal: FALSE
[10:51:55.010] |  :  .  force: TRUE
[10:51:55.010] |  :  .  relayed: [n=1] TRUE
[10:51:55.010] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:55.010] |  :  .  relayed: [n=1] TRUE
[10:51:55.010] |  :  .  queued futures: [n=1] TRUE
[10:51:55.010] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:55.010] |  Relaying remaining futures ... done
[10:51:55.010] value() on list ... done
[10:51:55.010]  - Number of value chunks collected: 1
[10:51:55.010] Resolving 1 futures (chunks) ... DONE
[10:51:55.011] Reducing values from 1 chunks ...
[10:51:55.011]  - Number of values collected after concatenation: 2
[10:51:55.011]  - Number of values expected: 2
[10:51:55.011] Reducing values from 1 chunks ... DONE
[10:51:55.011] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = FALSE) ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ...
[10:51:55.011] future_lapply() ...
[10:51:55.012] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.012] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:55.012] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.012] Number of chunks: 1
[10:51:55.012] getGlobalsAndPackagesXApply() ...
[10:51:55.013]  - future.globals: TRUE
[10:51:55.013] getGlobalsAndPackages() ...
[10:51:55.013] |  Searching for globals ...
[10:51:55.014] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:51:55.014] |  Searching for globals ... DONE
[10:51:55.014] |  Resolving globals: FALSE
[10:51:55.015] |  Search for packages associated with the globals ...
[10:51:55.015] |  :  Packages associated with globals: [1] ‘base’
[10:51:55.015] |  :  Packages: [1] ‘base’
[10:51:55.015] |  Search for packages associated with the globals ... DONE
[10:51:55.015] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:51:55.016] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:51:55.016] |  Packages after dropping 'base': [0] 
[10:51:55.016] |  globals: [1] ‘FUN’
[10:51:55.016] |  packages: [0] 
[10:51:55.016] getGlobalsAndPackages() ... done
[10:51:55.016]  - globals found/used: [n=1] ‘FUN’
[10:51:55.016]  - needed namespaces: [n=0] 
[10:51:55.016] Finding globals ... DONE
[10:51:55.016]  - use_args: TRUE
[10:51:55.017]  - Getting '...' globals ...
[10:51:55.017] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:55.017] |  recursive: 0
[10:51:55.017] |  length: 1
[10:51:55.017] |  elements: ‘...’
[10:51:55.017] |  'obj' is DotDotDotList
[10:51:55.017] |  resolve(obj, ...) ...
[10:51:55.017] |  resolve(obj, ...) ... done
[10:51:55.018] |  length: 0 (resolved future 1)
[10:51:55.018] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:55.018]    - '...' content: [n=0] 
[10:51:55.018] List of 1
[10:51:55.018]  $ ...: list()
[10:51:55.018]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:55.018]  - attr(*, "where")=List of 1
[10:51:55.018]   ..$ ...:<environment: 0x562581fb66c0> 
[10:51:55.018]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:55.018]  - attr(*, "resolved")= logi TRUE
[10:51:55.018]  - attr(*, "total_size")= num NA
[10:51:55.022]  - Getting '...' globals ... DONE
[10:51:55.022] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:55.022] List of 2
[10:51:55.022]  $ ...future.FUN:function (x)  
[10:51:55.022]  $ ...          : list()
[10:51:55.022]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:55.022]  - attr(*, "where")=List of 2
[10:51:55.022]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:55.022]   ..$ ...          :<environment: 0x562581fb66c0> 
[10:51:55.022]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:55.022]  - attr(*, "resolved")= logi FALSE
[10:51:55.022]  - attr(*, "total_size")= num 5632
[10:51:55.025] Packages to be attached in all futures: [n=0] 
[10:51:55.025] getGlobalsAndPackagesXApply() ... DONE
[10:51:55.025] Number of futures (= number of chunks): 1
[10:51:55.025] Launching 1 futures (chunks) ...
[10:51:55.025] Chunk #1 of 1 ...
[10:51:55.025]  - Finding globals in 'X' for chunk #1 ...
[10:51:55.025] getGlobalsAndPackages() ...
[10:51:55.026] |  Searching for globals ...
[10:51:55.026] |  :  globals found: [0] 
[10:51:55.026] |  Searching for globals ... DONE
[10:51:55.026] |  globals: [0] <none>
[10:51:55.026] |  packages: [0] <none>
[10:51:55.026] getGlobalsAndPackages() ... done
[10:51:55.026]    + additional globals found: [n=0] 
[10:51:55.026]    + additional namespaces needed: [n=0] 
[10:51:55.026]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:55.027]  - seeds: <none>
[10:51:55.027]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:55.027] getGlobalsAndPackages() ...
[10:51:55.027] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:55.027] |  Resolving globals: FALSE
[10:51:55.027] |  Tweak future expression to call with '...' arguments ...
[10:51:55.027] |  :  {
[10:51:55.027] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:55.027] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:55.027] |  :      "# as a global variable                                         "
[10:51:55.027] |  :      do.call(function(...) {
[10:51:55.027] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:55.027] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:55.027] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:55.027] |  :          "# anonymous function.                                          "
[10:51:55.027] |  :          "#                                                              "
[10:51:55.027] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:55.027] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:55.027] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:55.027] |  :          "# global environment, which is where globals are written.      "
[10:51:55.027] |  :          penv <- env <- environment(...future.FUN)
[10:51:55.027] |  :          repeat {
[10:51:55.027] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:55.027] |  :                  emptyenv())) 
[10:51:55.027] |  :                  break
[10:51:55.027] |  :              penv <- env
[10:51:55.027] |  :              env <- parent.env(env)
[10:51:55.027] |  :          }
[10:51:55.027] |  :          if (identical(penv, globalenv())) {
[10:51:55.027] |  :              environment(...future.FUN) <- environment()
[10:51:55.027] |  :          }
[10:51:55.027] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:55.027] |  :              !isNamespace(penv)) {
[10:51:55.027] |  :              parent.env(penv) <- environment()
[10:51:55.027] |  :          }
[10:51:55.027] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:55.027] |  :          {
[10:51:55.027] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:55.027] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:55.027] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:55.027] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:55.027] |  :              }
[10:51:55.027] |  :              {
[10:51:55.027] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:55.027] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:55.027] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:55.027] |  :                  })
[10:51:55.027] |  :              }
[10:51:55.027] |  :          }
[10:51:55.027] |  :      }, args = future.call.arguments)
[10:51:55.027] |  :  }
[10:51:55.028] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:55.028] |  Search for packages associated with the globals ...
[10:51:55.028] |  :  Packages associated with globals: [0] 
[10:51:55.028] |  :  Packages: [0] 
[10:51:55.028] |  Search for packages associated with the globals ... DONE
[10:51:55.028] |  Packages after dropping 'base': [0] 
[10:51:55.028] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:55.029] |  packages: [0] 
[10:51:55.029] getGlobalsAndPackages() ... done
[10:51:55.029] run() for Future (‘Future’) ...
[10:51:55.029] |  state: ‘created’
[10:51:55.029] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.029] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.029] |  Using SequentialFutureBackend ...
[10:51:55.029] |  :  Launching futures ...
[10:51:55.030] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:55.030] |  :  .  |  getFutureData() ...
[10:51:55.030] |  :  .  |  :  getFutureCore() ...
[10:51:55.030] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:55.030] |  :  .  |  :  getFutureCore() ... done
[10:51:55.030] |  :  .  |  :  getFutureCapture() ...
[10:51:55.030] |  :  .  |  :  getFutureCapture() ... done
[10:51:55.030] |  :  .  |  :  getFutureContext() ...
[10:51:55.030] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.030] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:55.030] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.031] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:55.031] |  :  .  |  :  getFutureContext() ... done
[10:51:55.031] |  :  .  |  getFutureData() ... done
[10:51:55.031] |  :  .  |  attachPackages() ...
[10:51:55.031] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:55.031] |  :  .  |  attachPackages() ... DONE
[10:51:55.031] |  :  .  |  attachPackages() ...
[10:51:55.031] |  :  .  |  :  packages: [n=0] 
[10:51:55.031] |  :  .  |  attachPackages() ... DONE
[10:51:55.032] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.032] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:55.032] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.032] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:55.032] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:55.033] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:55.033] |  :  .  |  :  .  |  New stack:
[10:51:55.033] |  :  .  |  :  .  |  List of 1
[10:51:55.033] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:55.033] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:55.033] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:55.033] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.033] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.033] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:55.033] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:55.035] |  :  .  |  :  .  |  Old stack:
[10:51:55.035] |  :  .  |  :  .  |  List of 1
[10:51:55.035] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:55.035] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:55.035] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:55.035] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.035] |  :  .  |  :  .  |      ...)  
[10:51:55.035] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.035] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.035] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:55.035] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:55.035] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.035] |  :  .  |  :  .  |      ...)  
[10:51:55.035] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.035] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:55.038] |  :  .  |  :  .  |  Not identical
[10:51:55.038] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:55.038] |  :  .  |  :  .  |  :  List of 2
[10:51:55.038] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:55.038] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:55.038] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:55.038] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.038] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.038] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:55.038] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:55.038] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:55.038] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:55.038] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.038] |  :  .  |  :  .  |  :      ...)  
[10:51:55.038] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.038] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.038] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:55.038] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:55.038] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.038] |  :  .  |  :  .  |  :      ...)  
[10:51:55.038] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.043] |  :  .  |  :  .  |  :  Formals differ
[10:51:55.043] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:55.044] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:55.044] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:55.044] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:55.044] |  :  .  |  :  .  List of future strategies:
[10:51:55.044] |  :  .  |  :  .  1. sequential:
[10:51:55.044] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:55.044] |  :  .  |  :  .     - tweaked: FALSE
[10:51:55.044] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:55.044] |  :  .  |  :  .  List of 1
[10:51:55.044] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:55.044] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:55.044] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:55.044] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.044] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.044] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:55.044] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:55.046] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:55.046] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:55.047] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.047] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:55.047] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.047] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:55.047] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:55.047] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:55.047] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:55.047] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:55.048] |  :  .  |  assign_globals() ...
[10:51:55.048] |  :  .  |  List of 5
[10:51:55.048] |  :  .  |   $ ...future.FUN            :function (x)  
[10:51:55.048] |  :  .  |   $ future.call.arguments    : list()
[10:51:55.048] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:55.048] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:55.048] |  :  .  |    ..$ : int 1
[10:51:55.048] |  :  .  |    ..$ : int 0
[10:51:55.048] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:55.048] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:55.048] |  :  .  |   - attr(*, "where")=List of 5
[10:51:55.048] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:55.048] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:55.048] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:55.048] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:55.048] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:55.048] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:55.048] |  :  .  |   - attr(*, "total_size")= num 5632
[10:51:55.048] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:55.048] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:55.053] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:55.053] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:55.053] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:55.053] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:55.053] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:55.053] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:55.053] |  :  .  |  assign_globals() ... done
[10:51:55.556] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:55.556] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:55.556] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:55.556] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:55.556] |  :  .  |  :  .  |  :  New stack:
[10:51:55.556] |  :  .  |  :  .  |  :  List of 1
[10:51:55.556] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:55.556] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:55.556] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:55.556] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.556] |  :  .  |  :  .  |  :      ...)  
[10:51:55.556] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.556] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.556] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:55.556] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:55.556] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.556] |  :  .  |  :  .  |  :      ...)  
[10:51:55.556] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.556] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:55.560] |  :  .  |  :  .  |  :  Old stack:
[10:51:55.560] |  :  .  |  :  .  |  :  List of 1
[10:51:55.560] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:55.560] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:55.560] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:55.560] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.560] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.560] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:55.560] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:55.563] |  :  .  |  :  .  |  :  Not identical
[10:51:55.564] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:51:55.564] |  :  .  |  :  .  |  :  .  List of 2
[10:51:55.564] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:55.564] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:55.564] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:55.564] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.564] |  :  .  |  :  .  |  :  .      ...)  
[10:51:55.564] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.564] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.564] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:55.564] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:55.564] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.564] |  :  .  |  :  .  |  :  .      ...)  
[10:51:55.564] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.564] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:55.564] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:55.564] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:55.564] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.564] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.564] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:55.569] |  :  .  |  :  .  |  :  .  Formals differ
[10:51:55.569] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:51:55.569] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:51:55.569] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:55.569] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:51:55.569] |  :  .  |  :  .  |  List of future strategies:
[10:51:55.569] |  :  .  |  :  .  |  1. multicore:
[10:51:55.569] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:55.569] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:55.569] |  :  .  |  :  .  |     - call: plan(strategy)
[10:51:55.569] |  :  .  |  :  .  |  List of 1
[10:51:55.569] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:55.569] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:55.569] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:55.569] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.569] |  :  .  |  :  .  |      ...)  
[10:51:55.569] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.569] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.569] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:55.569] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:55.569] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.569] |  :  .  |  :  .  |      ...)  
[10:51:55.569] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.569] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:55.572] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:55.573] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:55.573] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.573] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:55.573] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.573] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:51:55.573] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:55.573] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:55.573] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:55.574] |  :  .  |  SequentialFuture started (and completed)
[10:51:55.574] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:55.574] |  :  Launching futures ... done
[10:51:55.574] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:55.574] |  Using SequentialFutureBackend ... done
[10:51:55.574] run() for Future (‘SequentialFuture’) ... done
[10:51:55.574] Created future:
[10:51:55.574] SequentialFuture:
[10:51:55.574] Label: ‘future_lapply-1’
[10:51:55.574] Expression:
[10:51:55.574] {
[10:51:55.574]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:55.574]     "# expression in do.call(), because function called uses '...'  "
[10:51:55.574]     "# as a global variable                                         "
[10:51:55.574]     do.call(function(...) {
[10:51:55.574]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:55.574]         "# without having an '...' argument. This means '...' is treated"
[10:51:55.574]         "# as a global variable. This may happen when FUN() is an       "
[10:51:55.574]         "# anonymous function.                                          "
[10:51:55.574]         "#                                                              "
[10:51:55.574]         "# If an anonymous function, we will make sure to restore the   "
[10:51:55.574]         "# function environment of FUN() to the calling environment.    "
[10:51:55.574]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:55.574]         "# global environment, which is where globals are written.      "
[10:51:55.574]         penv <- env <- environment(...future.FUN)
[10:51:55.574]         repeat {
[10:51:55.574]             if (identical(env, globalenv()) || identical(env, 
[10:51:55.574]                 emptyenv())) 
[10:51:55.574]                 break
[10:51:55.574]             penv <- env
[10:51:55.574]             env <- parent.env(env)
[10:51:55.574]         }
[10:51:55.574]         if (identical(penv, globalenv())) {
[10:51:55.574]             environment(...future.FUN) <- environment()
[10:51:55.574]         }
[10:51:55.574]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:55.574]             !isNamespace(penv)) {
[10:51:55.574]             parent.env(penv) <- environment()
[10:51:55.574]         }
[10:51:55.574]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:55.574]         {
[10:51:55.574]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:55.574]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:55.574]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:55.574]                 on.exit(options(oopts), add = TRUE)
[10:51:55.574]             }
[10:51:55.574]             {
[10:51:55.574]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:55.574]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:55.574]                   ...future.FUN(...future.X_jj, ...)
[10:51:55.574]                 })
[10:51:55.574]             }
[10:51:55.574]         }
[10:51:55.574]     }, args = future.call.arguments)
[10:51:55.574] }
[10:51:55.574] Lazy evaluation: FALSE
[10:51:55.574] Asynchronous evaluation: TRUE
[10:51:55.574] Local evaluation: TRUE
[10:51:55.574] Environment: R_GlobalEnv
[10:51:55.574] Capture standard output: TRUE
[10:51:55.574] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:55.574] Immediate condition classes: ‘immediateCondition’
[10:51:55.574] Globals: 5 objects totaling 1.02 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:55.574] Packages: <none>
[10:51:55.574] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:55.574] Resolved: TRUE
[10:51:55.574] Value: 55 bytes of class ‘list’
[10:51:55.574] Early signaling: FALSE
[10:51:55.574] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:55.574] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:55.575] Chunk #1 of 1 ... DONE
[10:51:55.575] Launching 1 futures (chunks) ... DONE
[10:51:55.575] Resolving 1 futures (chunks) ...
[10:51:55.576] value() on list ...
[10:51:55.576] |  recursive: 0
[10:51:55.576] |  length: 1
[10:51:55.576] |  
[10:51:55.576] |  Number of remaining objects: 1
[10:51:55.576] |  checking value #1 ...
[10:51:55.576] |  :  'obj' is SequentialFuture
[10:51:55.576] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:55.576] |  :  .  state: ‘finished’
[10:51:55.576] |  :  .  run: TRUE
[10:51:55.577] |  :  .  result: ‘FutureResult’
[10:51:55.577] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:55.577] |  :  SequentialFuture #1
[10:51:55.577] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:55.577] |  :  .  nx: 1
[10:51:55.577] |  :  .  relay: TRUE
[10:51:55.577] |  :  .  stdout: TRUE
[10:51:55.577] |  :  .  signal: TRUE
[10:51:55.577] |  :  .  resignal: FALSE
[10:51:55.577] |  :  .  force: TRUE
[10:51:55.577] |  :  .  relayed: [n=1] FALSE
[10:51:55.577] |  :  .  queued futures: [n=1] FALSE
[10:51:55.578] |  :  .  until=1
[10:51:55.578] |  :  .  relaying element #1
[10:51:55.578] |  :  .  relayed: [n=1] TRUE
[10:51:55.578] |  :  .  queued futures: [n=1] TRUE
[10:51:55.578] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:55.578] |  :  value(<SequentialFuture>, ...) ...
[10:51:55.578] |  :  .  value: <list>
[10:51:55.578] |  :  value(<SequentialFuture>, ...) ... done
[10:51:55.578] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:55.579] |  :  .  nx: 1
[10:51:55.579] |  :  .  relay: TRUE
[10:51:55.579] |  :  .  stdout: TRUE
[10:51:55.579] |  :  .  signal: TRUE
[10:51:55.579] |  :  .  resignal: FALSE
[10:51:55.579] |  :  .  force: TRUE
[10:51:55.579] |  :  .  relayed: [n=1] TRUE
[10:51:55.579] |  :  .  queued futures: [n=1] TRUE
[10:51:55.579] |  :  .  until=1
[10:51:55.579] |  :  .  relayed: [n=1] TRUE
[10:51:55.579] |  :  .  queued futures: [n=1] TRUE
[10:51:55.579] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:55.580] |  :  length: 0 (resolved future 1)
[10:51:55.580] |  checking value #1 ... done
[10:51:55.580] |  Relaying remaining futures ...
[10:51:55.580] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:55.580] |  :  .  nx: 1
[10:51:55.580] |  :  .  relay: TRUE
[10:51:55.580] |  :  .  stdout: TRUE
[10:51:55.580] |  :  .  signal: TRUE
[10:51:55.580] |  :  .  resignal: FALSE
[10:51:55.580] |  :  .  force: TRUE
[10:51:55.580] |  :  .  relayed: [n=1] TRUE
[10:51:55.580] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:55.581] |  :  .  relayed: [n=1] TRUE
[10:51:55.581] |  :  .  queued futures: [n=1] TRUE
[10:51:55.581] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:55.581] |  Relaying remaining futures ... done
[10:51:55.581] value() on list ... done
[10:51:55.581]  - Number of value chunks collected: 1
[10:51:55.581] Resolving 1 futures (chunks) ... DONE
[10:51:55.581] Reducing values from 1 chunks ...
[10:51:55.581]  - Number of values collected after concatenation: 2
[10:51:55.581]  - Number of values expected: 2
[10:51:55.581] Reducing values from 1 chunks ... DONE
[10:51:55.582] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ... DONE
* future_lapply(x, ..., future.stdout = NA) ...
[10:51:55.582] future_lapply() ...
[10:51:55.583] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.583] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:55.583] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.583] Number of chunks: 1
[10:51:55.583] getGlobalsAndPackagesXApply() ...
[10:51:55.583]  - future.globals: TRUE
[10:51:55.583] getGlobalsAndPackages() ...
[10:51:55.585] |  Searching for globals ...
[10:51:55.586] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:51:55.586] |  Searching for globals ... DONE
[10:51:55.586] |  Resolving globals: FALSE
[10:51:55.587] |  Search for packages associated with the globals ...
[10:51:55.587] |  :  Packages associated with globals: [1] ‘base’
[10:51:55.587] |  :  Packages: [1] ‘base’
[10:51:55.587] |  Search for packages associated with the globals ... DONE
[10:51:55.587] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:51:55.588] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:51:55.588] |  Packages after dropping 'base': [0] 
[10:51:55.588] |  globals: [1] ‘FUN’
[10:51:55.588] |  packages: [0] 
[10:51:55.588] getGlobalsAndPackages() ... done
[10:51:55.588]  - globals found/used: [n=1] ‘FUN’
[10:51:55.588]  - needed namespaces: [n=0] 
[10:51:55.588] Finding globals ... DONE
[10:51:55.588]  - use_args: TRUE
[10:51:55.588]  - Getting '...' globals ...
[10:51:55.589] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:55.589] |  recursive: 0
[10:51:55.589] |  length: 1
[10:51:55.589] |  elements: ‘...’
[10:51:55.589] |  'obj' is DotDotDotList
[10:51:55.589] |  resolve(obj, ...) ...
[10:51:55.589] |  resolve(obj, ...) ... done
[10:51:55.589] |  length: 0 (resolved future 1)
[10:51:55.590] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:55.590]    - '...' content: [n=0] 
[10:51:55.590] List of 1
[10:51:55.590]  $ ...: list()
[10:51:55.590]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:55.590]  - attr(*, "where")=List of 1
[10:51:55.590]   ..$ ...:<environment: 0x5625829a3218> 
[10:51:55.590]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:55.590]  - attr(*, "resolved")= logi TRUE
[10:51:55.590]  - attr(*, "total_size")= num NA
[10:51:55.592]  - Getting '...' globals ... DONE
[10:51:55.592] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:55.592] List of 2
[10:51:55.592]  $ ...future.FUN:function (x)  
[10:51:55.592]  $ ...          : list()
[10:51:55.592]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:55.592]  - attr(*, "where")=List of 2
[10:51:55.592]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:55.592]   ..$ ...          :<environment: 0x5625829a3218> 
[10:51:55.592]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:55.592]  - attr(*, "resolved")= logi FALSE
[10:51:55.592]  - attr(*, "total_size")= num 5632
[10:51:55.595] Packages to be attached in all futures: [n=0] 
[10:51:55.595] getGlobalsAndPackagesXApply() ... DONE
[10:51:55.595] Number of futures (= number of chunks): 1
[10:51:55.595] Launching 1 futures (chunks) ...
[10:51:55.596] Chunk #1 of 1 ...
[10:51:55.596]  - Finding globals in 'X' for chunk #1 ...
[10:51:55.596] getGlobalsAndPackages() ...
[10:51:55.596] |  Searching for globals ...
[10:51:55.596] |  :  globals found: [0] 
[10:51:55.596] |  Searching for globals ... DONE
[10:51:55.596] |  globals: [0] <none>
[10:51:55.596] |  packages: [0] <none>
[10:51:55.596] getGlobalsAndPackages() ... done
[10:51:55.597]    + additional globals found: [n=0] 
[10:51:55.597]    + additional namespaces needed: [n=0] 
[10:51:55.597]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:55.597]  - seeds: <none>
[10:51:55.597]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:55.597] getGlobalsAndPackages() ...
[10:51:55.597] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:55.597] |  Resolving globals: FALSE
[10:51:55.597] |  Tweak future expression to call with '...' arguments ...
[10:51:55.597] |  :  {
[10:51:55.597] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:55.597] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:55.597] |  :      "# as a global variable                                         "
[10:51:55.597] |  :      do.call(function(...) {
[10:51:55.597] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:55.597] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:55.597] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:55.597] |  :          "# anonymous function.                                          "
[10:51:55.597] |  :          "#                                                              "
[10:51:55.597] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:55.597] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:55.597] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:55.597] |  :          "# global environment, which is where globals are written.      "
[10:51:55.597] |  :          penv <- env <- environment(...future.FUN)
[10:51:55.597] |  :          repeat {
[10:51:55.597] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:55.597] |  :                  emptyenv())) 
[10:51:55.597] |  :                  break
[10:51:55.597] |  :              penv <- env
[10:51:55.597] |  :              env <- parent.env(env)
[10:51:55.597] |  :          }
[10:51:55.597] |  :          if (identical(penv, globalenv())) {
[10:51:55.597] |  :              environment(...future.FUN) <- environment()
[10:51:55.597] |  :          }
[10:51:55.597] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:55.597] |  :              !isNamespace(penv)) {
[10:51:55.597] |  :              parent.env(penv) <- environment()
[10:51:55.597] |  :          }
[10:51:55.597] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:55.597] |  :          {
[10:51:55.597] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:55.597] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:55.597] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:55.597] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:55.597] |  :              }
[10:51:55.597] |  :              {
[10:51:55.597] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:55.597] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:55.597] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:55.597] |  :                  })
[10:51:55.597] |  :              }
[10:51:55.597] |  :          }
[10:51:55.597] |  :      }, args = future.call.arguments)
[10:51:55.597] |  :  }
[10:51:55.598] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:55.598] |  Search for packages associated with the globals ...
[10:51:55.598] |  :  Packages associated with globals: [0] 
[10:51:55.598] |  :  Packages: [0] 
[10:51:55.598] |  Search for packages associated with the globals ... DONE
[10:51:55.599] |  Packages after dropping 'base': [0] 
[10:51:55.599] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:55.599] |  packages: [0] 
[10:51:55.599] getGlobalsAndPackages() ... done
[10:51:55.599] run() for Future (‘Future’) ...
[10:51:55.599] |  state: ‘created’
[10:51:55.599] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.599] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.599] |  Using SequentialFutureBackend ...
[10:51:55.600] |  :  Launching futures ...
[10:51:55.600] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:55.600] |  :  .  |  getFutureData() ...
[10:51:55.600] |  :  .  |  :  getFutureCore() ...
[10:51:55.600] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:55.600] |  :  .  |  :  getFutureCore() ... done
[10:51:55.600] |  :  .  |  :  getFutureCapture() ...
[10:51:55.600] |  :  .  |  :  getFutureCapture() ... done
[10:51:55.600] |  :  .  |  :  getFutureContext() ...
[10:51:55.600] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.601] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:55.601] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.601] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:55.601] |  :  .  |  :  getFutureContext() ... done
[10:51:55.601] |  :  .  |  getFutureData() ... done
[10:51:55.601] |  :  .  |  attachPackages() ...
[10:51:55.601] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:55.601] |  :  .  |  attachPackages() ... DONE
[10:51:55.601] |  :  .  |  attachPackages() ...
[10:51:55.602] |  :  .  |  :  packages: [n=0] 
[10:51:55.602] |  :  .  |  attachPackages() ... DONE
[10:51:55.602] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.602] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:55.602] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.602] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:55.603] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:55.603] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:55.603] |  :  .  |  :  .  |  New stack:
[10:51:55.603] |  :  .  |  :  .  |  List of 1
[10:51:55.603] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:55.603] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:55.603] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:55.603] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.603] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.603] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:55.603] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:55.606] |  :  .  |  :  .  |  Old stack:
[10:51:55.606] |  :  .  |  :  .  |  List of 1
[10:51:55.606] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:55.606] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:55.606] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:55.606] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.606] |  :  .  |  :  .  |      ...)  
[10:51:55.606] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.606] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.606] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:55.606] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:55.606] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.606] |  :  .  |  :  .  |      ...)  
[10:51:55.606] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.606] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:55.609] |  :  .  |  :  .  |  Not identical
[10:51:55.609] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:55.609] |  :  .  |  :  .  |  :  List of 2
[10:51:55.609] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:55.609] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:55.609] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:55.609] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.609] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.609] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:55.609] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:55.609] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:55.609] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:55.609] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.609] |  :  .  |  :  .  |  :      ...)  
[10:51:55.609] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.609] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.609] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:55.609] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:55.609] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:55.609] |  :  .  |  :  .  |  :      ...)  
[10:51:55.609] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:55.614] |  :  .  |  :  .  |  :  Formals differ
[10:51:55.614] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:55.614] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:55.614] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:55.614] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:55.614] |  :  .  |  :  .  List of future strategies:
[10:51:55.614] |  :  .  |  :  .  1. sequential:
[10:51:55.614] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:55.614] |  :  .  |  :  .     - tweaked: FALSE
[10:51:55.614] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:55.614] |  :  .  |  :  .  List of 1
[10:51:55.614] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:55.614] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:55.614] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:55.614] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.614] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:55.614] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:55.614] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:55.617] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:55.617] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:55.617] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:55.617] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:55.617] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:55.617] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:55.617] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:55.617] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:55.618] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:55.618] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:55.618] |  :  .  |  assign_globals() ...
[10:51:55.618] |  :  .  |  List of 5
[10:51:55.618] |  :  .  |   $ ...future.FUN            :function (x)  
[10:51:55.618] |  :  .  |   $ future.call.arguments    : list()
[10:51:55.618] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:55.618] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:55.618] |  :  .  |    ..$ : int 1
[10:51:55.618] |  :  .  |    ..$ : int 0
[10:51:55.618] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:55.618] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:55.618] |  :  .  |   - attr(*, "where")=List of 5
[10:51:55.618] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:55.618] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:55.618] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:55.618] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:55.618] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:55.618] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:55.618] |  :  .  |   - attr(*, "total_size")= num 5632
[10:51:55.618] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:55.618] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:55.623] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:55.623] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:55.623] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:55.623] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:55.623] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:55.623] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:55.623] |  :  .  |  assign_globals() ... done
[10:51:56.128] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:56.128] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:56.128] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:56.128] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:56.128] |  :  .  |  :  .  |  :  New stack:
[10:51:56.129] |  :  .  |  :  .  |  :  List of 1
[10:51:56.129] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:56.129] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:56.129] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:56.129] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.129] |  :  .  |  :  .  |  :      ...)  
[10:51:56.129] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.129] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.129] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:56.129] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:56.129] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.129] |  :  .  |  :  .  |  :      ...)  
[10:51:56.129] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.129] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.132] |  :  .  |  :  .  |  :  Old stack:
[10:51:56.132] |  :  .  |  :  .  |  :  List of 1
[10:51:56.132] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:56.132] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:56.132] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:56.132] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.132] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.132] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.132] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.134] |  :  .  |  :  .  |  :  Not identical
[10:51:56.134] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:51:56.134] |  :  .  |  :  .  |  :  .  List of 2
[10:51:56.134] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:56.134] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:56.134] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:56.134] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.134] |  :  .  |  :  .  |  :  .      ...)  
[10:51:56.134] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.134] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.134] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:56.134] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:56.134] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.134] |  :  .  |  :  .  |  :  .      ...)  
[10:51:56.134] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.134] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:56.134] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:56.134] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:56.134] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.134] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.134] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.139] |  :  .  |  :  .  |  :  .  Formals differ
[10:51:56.139] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:51:56.139] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:51:56.139] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:56.139] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:51:56.139] |  :  .  |  :  .  |  List of future strategies:
[10:51:56.139] |  :  .  |  :  .  |  1. multicore:
[10:51:56.139] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:56.139] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:56.139] |  :  .  |  :  .  |     - call: plan(strategy)
[10:51:56.140] |  :  .  |  :  .  |  List of 1
[10:51:56.140] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:56.140] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:56.140] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:56.140] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.140] |  :  .  |  :  .  |      ...)  
[10:51:56.140] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.140] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.140] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:56.140] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:56.140] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.140] |  :  .  |  :  .  |      ...)  
[10:51:56.140] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.140] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.143] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:56.143] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:56.143] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.143] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:56.143] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.143] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:51:56.143] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:56.143] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:56.143] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:56.144] |  :  .  |  SequentialFuture started (and completed)
[10:51:56.144] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:56.144] |  :  Launching futures ... done
[10:51:56.144] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:56.144] |  Using SequentialFutureBackend ... done
[10:51:56.144] run() for Future (‘SequentialFuture’) ... done
[10:51:56.144] Created future:
[10:51:56.144] SequentialFuture:
[10:51:56.144] Label: ‘future_lapply-1’
[10:51:56.144] Expression:
[10:51:56.144] {
[10:51:56.144]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:56.144]     "# expression in do.call(), because function called uses '...'  "
[10:51:56.144]     "# as a global variable                                         "
[10:51:56.144]     do.call(function(...) {
[10:51:56.144]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:56.144]         "# without having an '...' argument. This means '...' is treated"
[10:51:56.144]         "# as a global variable. This may happen when FUN() is an       "
[10:51:56.144]         "# anonymous function.                                          "
[10:51:56.144]         "#                                                              "
[10:51:56.144]         "# If an anonymous function, we will make sure to restore the   "
[10:51:56.144]         "# function environment of FUN() to the calling environment.    "
[10:51:56.144]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:56.144]         "# global environment, which is where globals are written.      "
[10:51:56.144]         penv <- env <- environment(...future.FUN)
[10:51:56.144]         repeat {
[10:51:56.144]             if (identical(env, globalenv()) || identical(env, 
[10:51:56.144]                 emptyenv())) 
[10:51:56.144]                 break
[10:51:56.144]             penv <- env
[10:51:56.144]             env <- parent.env(env)
[10:51:56.144]         }
[10:51:56.144]         if (identical(penv, globalenv())) {
[10:51:56.144]             environment(...future.FUN) <- environment()
[10:51:56.144]         }
[10:51:56.144]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:56.144]             !isNamespace(penv)) {
[10:51:56.144]             parent.env(penv) <- environment()
[10:51:56.144]         }
[10:51:56.144]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:56.144]         {
[10:51:56.144]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:56.144]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:56.144]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:56.144]                 on.exit(options(oopts), add = TRUE)
[10:51:56.144]             }
[10:51:56.144]             {
[10:51:56.144]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:56.144]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:56.144]                   ...future.FUN(...future.X_jj, ...)
[10:51:56.144]                 })
[10:51:56.144]             }
[10:51:56.144]         }
[10:51:56.144]     }, args = future.call.arguments)
[10:51:56.144] }
[10:51:56.144] Lazy evaluation: FALSE
[10:51:56.144] Asynchronous evaluation: TRUE
[10:51:56.144] Local evaluation: TRUE
[10:51:56.144] Environment: R_GlobalEnv
[10:51:56.144] Capture standard output: NA
[10:51:56.144] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:56.144] Immediate condition classes: ‘immediateCondition’
[10:51:56.144] Globals: 5 objects totaling 1.02 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:56.144] Packages: <none>
[10:51:56.144] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:56.144] Resolved: TRUE
[10:51:56.144] Value: 55 bytes of class ‘list’
[10:51:56.144] Early signaling: FALSE
[10:51:56.144] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:56.144] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:56.145] Chunk #1 of 1 ... DONE
[10:51:56.146] Launching 1 futures (chunks) ... DONE
[10:51:56.146] Resolving 1 futures (chunks) ...
[10:51:56.146] value() on list ...
[10:51:56.146] |  recursive: 0
[10:51:56.146] |  length: 1
[10:51:56.146] |  
[10:51:56.146] |  Number of remaining objects: 1
[10:51:56.146] |  checking value #1 ...
[10:51:56.146] |  :  'obj' is SequentialFuture
[10:51:56.146] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:56.147] |  :  .  state: ‘finished’
[10:51:56.147] |  :  .  run: TRUE
[10:51:56.148] |  :  .  result: ‘FutureResult’
[10:51:56.148] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:56.148] |  :  SequentialFuture #1
[10:51:56.148] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:56.148] |  :  .  nx: 1
[10:51:56.148] |  :  .  relay: TRUE
[10:51:56.149] |  :  .  stdout: TRUE
[10:51:56.149] |  :  .  signal: TRUE
[10:51:56.149] |  :  .  resignal: FALSE
[10:51:56.149] |  :  .  force: TRUE
[10:51:56.149] |  :  .  relayed: [n=1] FALSE
[10:51:56.149] |  :  .  queued futures: [n=1] FALSE
[10:51:56.149] |  :  .  until=1
[10:51:56.149] |  :  .  relaying element #1
[10:51:56.149] |  :  .  relayed: [n=1] TRUE
[10:51:56.150] |  :  .  queued futures: [n=1] TRUE
[10:51:56.150] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:56.150] |  :  value(<SequentialFuture>, ...) ...
[10:51:56.150] |  :  .  value: <list>
[10:51:56.150] |  :  value(<SequentialFuture>, ...) ... done
[10:51:56.150] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:56.150] |  :  .  nx: 1
[10:51:56.150] |  :  .  relay: TRUE
[10:51:56.150] |  :  .  stdout: TRUE
[10:51:56.150] |  :  .  signal: TRUE
[10:51:56.150] |  :  .  resignal: FALSE
[10:51:56.151] |  :  .  force: TRUE
[10:51:56.151] |  :  .  relayed: [n=1] TRUE
[10:51:56.151] |  :  .  queued futures: [n=1] TRUE
[10:51:56.151] |  :  .  until=1
[10:51:56.151] |  :  .  relayed: [n=1] TRUE
[10:51:56.151] |  :  .  queued futures: [n=1] TRUE
[10:51:56.151] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:56.151] |  :  length: 0 (resolved future 1)
[10:51:56.151] |  checking value #1 ... done
[10:51:56.151] |  Relaying remaining futures ...
[10:51:56.152] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:56.152] |  :  .  nx: 1
[10:51:56.152] |  :  .  relay: TRUE
[10:51:56.152] |  :  .  stdout: TRUE
[10:51:56.152] |  :  .  signal: TRUE
[10:51:56.152] |  :  .  resignal: FALSE
[10:51:56.152] |  :  .  force: TRUE
[10:51:56.152] |  :  .  relayed: [n=1] TRUE
[10:51:56.152] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:56.152] |  :  .  relayed: [n=1] TRUE
[10:51:56.152] |  :  .  queued futures: [n=1] TRUE
[10:51:56.152] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:56.153] |  Relaying remaining futures ... done
[10:51:56.153] value() on list ... done
[10:51:56.153]  - Number of value chunks collected: 1
[10:51:56.153] Resolving 1 futures (chunks) ... DONE
[10:51:56.153] Reducing values from 1 chunks ...
[10:51:56.153]  - Number of values collected after concatenation: 2
[10:51:56.153]  - Number of values expected: 2
[10:51:56.153] Reducing values from 1 chunks ... DONE
[10:51:56.153] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = NA) ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ...
[10:51:56.154] future_mapply() ...
[10:51:56.154] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.154] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:56.154] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.154] Number of chunks: 1
[10:51:56.154] getGlobalsAndPackagesXApply() ...
[10:51:56.154]  - future.globals: TRUE
[10:51:56.154] getGlobalsAndPackages() ...
[10:51:56.155] |  Searching for globals ...
[10:51:56.156] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:51:56.156] |  Searching for globals ... DONE
[10:51:56.156] |  Resolving globals: FALSE
[10:51:56.157] |  Search for packages associated with the globals ...
[10:51:56.157] |  :  Packages associated with globals: [1] ‘base’
[10:51:56.157] |  :  Packages: [1] ‘base’
[10:51:56.157] |  Search for packages associated with the globals ... DONE
[10:51:56.157] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:51:56.158] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:51:56.158] |  Packages after dropping 'base': [0] 
[10:51:56.158] |  globals: [1] ‘FUN’
[10:51:56.158] |  packages: [0] 
[10:51:56.158] getGlobalsAndPackages() ... done
[10:51:56.158]  - globals found/used: [n=1] ‘FUN’
[10:51:56.158]  - needed namespaces: [n=0] 
[10:51:56.158] Finding globals ... DONE
[10:51:56.159] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:51:56.159] List of 2
[10:51:56.159]  $ ...future.FUN:function (x, y)  
[10:51:56.159]  $ MoreArgs     : NULL
[10:51:56.159]  - attr(*, "where")=List of 2
[10:51:56.159]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:56.159]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:51:56.159]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:56.159]  - attr(*, "resolved")= logi FALSE
[10:51:56.159]  - attr(*, "total_size")= num NA
[10:51:56.161] Packages to be attached in all futures: [n=0] 
[10:51:56.161] getGlobalsAndPackagesXApply() ... DONE
[10:51:56.161] Number of futures (= number of chunks): 1
[10:51:56.162] Launching 1 futures (chunks) ...
[10:51:56.162] Chunk #1 of 1 ...
[10:51:56.162]  - Finding globals in '...' for chunk #1 ...
[10:51:56.162] getGlobalsAndPackages() ...
[10:51:56.162] |  Searching for globals ...
[10:51:56.162] |  :  globals found: [0] 
[10:51:56.162] |  Searching for globals ... DONE
[10:51:56.163] |  globals: [0] <none>
[10:51:56.163] |  packages: [0] <none>
[10:51:56.163] getGlobalsAndPackages() ... done
[10:51:56.163]    + additional globals found: [n=0] 
[10:51:56.163]    + additional namespaces needed: [n=0] 
[10:51:56.163]  - Finding globals in '...' for chunk #1 ... DONE
[10:51:56.163]  - seeds: <none>
[10:51:56.163]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:56.163] getGlobalsAndPackages() ...
[10:51:56.163] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:56.163] |  Resolving globals: FALSE
[10:51:56.164] |  Search for packages associated with the globals ...
[10:51:56.164] |  :  Packages associated with globals: [0] 
[10:51:56.164] |  :  Packages: [0] 
[10:51:56.164] |  Search for packages associated with the globals ... DONE
[10:51:56.164] |  Packages after dropping 'base': [0] 
[10:51:56.164] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:56.164] |  packages: [0] 
[10:51:56.165] getGlobalsAndPackages() ... done
[10:51:56.165] run() for Future (‘Future’) ...
[10:51:56.165] |  state: ‘created’
[10:51:56.165] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.165] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.165] |  Using SequentialFutureBackend ...
[10:51:56.165] |  :  Launching futures ...
[10:51:56.165] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:56.165] |  :  .  |  getFutureData() ...
[10:51:56.166] |  :  .  |  :  getFutureCore() ...
[10:51:56.166] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:56.166] |  :  .  |  :  getFutureCore() ... done
[10:51:56.166] |  :  .  |  :  getFutureCapture() ...
[10:51:56.166] |  :  .  |  :  getFutureCapture() ... done
[10:51:56.166] |  :  .  |  :  getFutureContext() ...
[10:51:56.166] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.166] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:56.166] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.166] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:56.167] |  :  .  |  :  getFutureContext() ... done
[10:51:56.167] |  :  .  |  getFutureData() ... done
[10:51:56.167] |  :  .  |  attachPackages() ...
[10:51:56.167] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:56.167] |  :  .  |  attachPackages() ... DONE
[10:51:56.167] |  :  .  |  attachPackages() ...
[10:51:56.167] |  :  .  |  :  packages: [n=0] 
[10:51:56.167] |  :  .  |  attachPackages() ... DONE
[10:51:56.168] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.169] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:56.169] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.169] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:56.169] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:56.170] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:56.170] |  :  .  |  :  .  |  New stack:
[10:51:56.170] |  :  .  |  :  .  |  List of 1
[10:51:56.170] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:56.170] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:56.170] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:56.170] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.170] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.170] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.170] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.172] |  :  .  |  :  .  |  Old stack:
[10:51:56.172] |  :  .  |  :  .  |  List of 1
[10:51:56.172] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:56.172] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:56.172] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:56.172] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.172] |  :  .  |  :  .  |      ...)  
[10:51:56.172] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.172] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.172] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:56.172] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:56.172] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.172] |  :  .  |  :  .  |      ...)  
[10:51:56.172] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.172] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.175] |  :  .  |  :  .  |  Not identical
[10:51:56.175] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:56.175] |  :  .  |  :  .  |  :  List of 2
[10:51:56.175] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:56.175] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:56.175] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:56.175] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.175] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.175] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.175] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:56.175] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:56.175] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:56.175] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.175] |  :  .  |  :  .  |  :      ...)  
[10:51:56.175] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.175] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.175] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:56.175] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:56.175] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.175] |  :  .  |  :  .  |  :      ...)  
[10:51:56.175] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.180] |  :  .  |  :  .  |  :  Formals differ
[10:51:56.180] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:56.180] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:56.180] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:56.180] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:56.180] |  :  .  |  :  .  List of future strategies:
[10:51:56.180] |  :  .  |  :  .  1. sequential:
[10:51:56.180] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:56.180] |  :  .  |  :  .     - tweaked: FALSE
[10:51:56.180] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.181] |  :  .  |  :  .  List of 1
[10:51:56.181] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:56.181] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:56.181] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:56.181] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.181] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.181] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.181] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.183] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:56.183] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:56.183] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.183] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:56.183] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.183] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:56.184] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:56.184] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:56.184] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:56.184] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:56.184] |  :  .  |  assign_globals() ...
[10:51:56.184] |  :  .  |  List of 5
[10:51:56.184] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:51:56.184] |  :  .  |   $ MoreArgs                 : NULL
[10:51:56.184] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:56.184] |  :  .  |    ..$ :List of 2
[10:51:56.184] |  :  .  |    .. ..$ : int 1
[10:51:56.184] |  :  .  |    .. ..$ : int 0
[10:51:56.184] |  :  .  |    ..$ :List of 2
[10:51:56.184] |  :  .  |    .. ..$ : int 0
[10:51:56.184] |  :  .  |    .. ..$ : int 1
[10:51:56.184] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:56.184] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:56.184] |  :  .  |   - attr(*, "where")=List of 5
[10:51:56.184] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:56.184] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:51:56.184] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:56.184] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:56.184] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:56.184] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:56.184] |  :  .  |   - attr(*, "total_size")= num NA
[10:51:56.184] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:56.184] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:56.191] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:56.191] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:56.191] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:51:56.191] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:56.191] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:56.191] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:56.191] |  :  .  |  assign_globals() ... done
[10:51:56.694] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:56.694] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:56.695] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:56.695] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:56.695] |  :  .  |  :  .  |  :  New stack:
[10:51:56.695] |  :  .  |  :  .  |  :  List of 1
[10:51:56.695] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:56.695] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:56.695] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:56.695] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.695] |  :  .  |  :  .  |  :      ...)  
[10:51:56.695] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.695] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.695] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:56.695] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:56.695] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.695] |  :  .  |  :  .  |  :      ...)  
[10:51:56.695] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.695] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.698] |  :  .  |  :  .  |  :  Old stack:
[10:51:56.698] |  :  .  |  :  .  |  :  List of 1
[10:51:56.698] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:56.698] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:56.698] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:56.698] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.698] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.698] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.698] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.700] |  :  .  |  :  .  |  :  Not identical
[10:51:56.701] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:51:56.701] |  :  .  |  :  .  |  :  .  List of 2
[10:51:56.701] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:56.701] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:56.701] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:56.701] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.701] |  :  .  |  :  .  |  :  .      ...)  
[10:51:56.701] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.701] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.701] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:56.701] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:56.701] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.701] |  :  .  |  :  .  |  :  .      ...)  
[10:51:56.701] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.701] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:56.701] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:56.701] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:56.701] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.701] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.701] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.705] |  :  .  |  :  .  |  :  .  Formals differ
[10:51:56.705] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:51:56.705] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:51:56.706] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:56.706] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:51:56.706] |  :  .  |  :  .  |  List of future strategies:
[10:51:56.706] |  :  .  |  :  .  |  1. multicore:
[10:51:56.706] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:56.706] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:56.706] |  :  .  |  :  .  |     - call: plan(strategy)
[10:51:56.706] |  :  .  |  :  .  |  List of 1
[10:51:56.706] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:56.706] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:56.706] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:56.706] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.706] |  :  .  |  :  .  |      ...)  
[10:51:56.706] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.706] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.706] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:56.706] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:56.706] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.706] |  :  .  |  :  .  |      ...)  
[10:51:56.706] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.706] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.711] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:56.711] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:56.711] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.711] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:56.711] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.711] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:51:56.712] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:56.712] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:56.712] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:56.712] |  :  .  |  SequentialFuture started (and completed)
[10:51:56.712] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:56.712] |  :  Launching futures ... done
[10:51:56.712] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:56.712] |  Using SequentialFutureBackend ... done
[10:51:56.713] run() for Future (‘SequentialFuture’) ... done
[10:51:56.713] Created future:
[10:51:56.713] SequentialFuture:
[10:51:56.713] Label: ‘future_mapply-1’
[10:51:56.713] Expression:
[10:51:56.713] {
[10:51:56.713]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:56.713]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:56.713]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:56.713]         on.exit(options(oopts), add = TRUE)
[10:51:56.713]     }
[10:51:56.713]     {
[10:51:56.713]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:51:56.713]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:51:56.713]         do.call(mapply, args = args)
[10:51:56.713]     }
[10:51:56.713] }
[10:51:56.713] Lazy evaluation: FALSE
[10:51:56.713] Asynchronous evaluation: TRUE
[10:51:56.713] Local evaluation: TRUE
[10:51:56.713] Environment: R_GlobalEnv
[10:51:56.713] Capture standard output: FALSE
[10:51:56.713] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:56.713] Immediate condition classes: ‘immediateCondition’
[10:51:56.713] Globals: 5 objects totaling 1.21 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 95 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:56.713] Packages: <none>
[10:51:56.713] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:56.713] Resolved: TRUE
[10:51:56.713] Value: 184 bytes of class ‘list’
[10:51:56.713] Early signaling: FALSE
[10:51:56.713] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:56.713] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:56.714] Chunk #1 of 1 ... DONE
[10:51:56.714] Launching 1 futures (chunks) ... DONE
[10:51:56.714] Resolving 1 futures (chunks) ...
[10:51:56.714] value() on list ...
[10:51:56.714] |  recursive: 0
[10:51:56.714] |  length: 1
[10:51:56.714] |  
[10:51:56.714] |  Number of remaining objects: 1
[10:51:56.714] |  checking value #1 ...
[10:51:56.714] |  :  'obj' is SequentialFuture
[10:51:56.715] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:56.715] |  :  .  state: ‘finished’
[10:51:56.715] |  :  .  run: TRUE
[10:51:56.715] |  :  .  result: ‘FutureResult’
[10:51:56.715] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:56.715] |  :  SequentialFuture #1
[10:51:56.715] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:56.715] |  :  .  nx: 1
[10:51:56.715] |  :  .  relay: TRUE
[10:51:56.715] |  :  .  stdout: TRUE
[10:51:56.715] |  :  .  signal: TRUE
[10:51:56.716] |  :  .  resignal: FALSE
[10:51:56.716] |  :  .  force: TRUE
[10:51:56.716] |  :  .  relayed: [n=1] FALSE
[10:51:56.716] |  :  .  queued futures: [n=1] FALSE
[10:51:56.716] |  :  .  until=1
[10:51:56.716] |  :  .  relaying element #1
[10:51:56.716] |  :  .  relayed: [n=1] TRUE
[10:51:56.716] |  :  .  queued futures: [n=1] TRUE
[10:51:56.716] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:56.717] |  :  value(<SequentialFuture>, ...) ...
[10:51:56.717] |  :  .  value: <list>
[10:51:56.717] |  :  value(<SequentialFuture>, ...) ... done
[10:51:56.717] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:56.717] |  :  .  nx: 1
[10:51:56.717] |  :  .  relay: TRUE
[10:51:56.717] |  :  .  stdout: TRUE
[10:51:56.717] |  :  .  signal: TRUE
[10:51:56.717] |  :  .  resignal: FALSE
[10:51:56.717] |  :  .  force: TRUE
[10:51:56.717] |  :  .  relayed: [n=1] TRUE
[10:51:56.717] |  :  .  queued futures: [n=1] TRUE
[10:51:56.718] |  :  .  until=1
[10:51:56.718] |  :  .  relayed: [n=1] TRUE
[10:51:56.718] |  :  .  queued futures: [n=1] TRUE
[10:51:56.718] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:56.718] |  :  length: 0 (resolved future 1)
[10:51:56.718] |  checking value #1 ... done
[10:51:56.718] |  Relaying remaining futures ...
[10:51:56.718] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:56.718] |  :  .  nx: 1
[10:51:56.718] |  :  .  relay: TRUE
[10:51:56.719] |  :  .  stdout: TRUE
[10:51:56.719] |  :  .  signal: TRUE
[10:51:56.719] |  :  .  resignal: FALSE
[10:51:56.719] |  :  .  force: TRUE
[10:51:56.719] |  :  .  relayed: [n=1] TRUE
[10:51:56.719] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:56.719] |  :  .  relayed: [n=1] TRUE
[10:51:56.719] |  :  .  queued futures: [n=1] TRUE
[10:51:56.719] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:56.719] |  Relaying remaining futures ... done
[10:51:56.719] value() on list ... done
[10:51:56.720]  - Number of value chunks collected: 1
[10:51:56.720] Resolving 1 futures (chunks) ... DONE
[10:51:56.720] Reducing values from 1 chunks ...
[10:51:56.720]  - Number of values collected after concatenation: 2
[10:51:56.720]  - Number of values expected: 2
[10:51:56.720] Reducing values from 1 chunks ... DONE
[10:51:56.720] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ...
[10:51:56.720] future_mapply() ...
[10:51:56.721] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.721] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:56.721] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.721] Number of chunks: 1
[10:51:56.721] getGlobalsAndPackagesXApply() ...
[10:51:56.721]  - future.globals: TRUE
[10:51:56.721] getGlobalsAndPackages() ...
[10:51:56.721] |  Searching for globals ...
[10:51:56.723] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:51:56.723] |  Searching for globals ... DONE
[10:51:56.723] |  Resolving globals: FALSE
[10:51:56.723] |  Search for packages associated with the globals ...
[10:51:56.724] |  :  Packages associated with globals: [1] ‘base’
[10:51:56.724] |  :  Packages: [1] ‘base’
[10:51:56.724] |  Search for packages associated with the globals ... DONE
[10:51:56.724] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:51:56.724] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:51:56.725] |  Packages after dropping 'base': [0] 
[10:51:56.725] |  globals: [1] ‘FUN’
[10:51:56.725] |  packages: [0] 
[10:51:56.725] getGlobalsAndPackages() ... done
[10:51:56.725]  - globals found/used: [n=1] ‘FUN’
[10:51:56.725]  - needed namespaces: [n=0] 
[10:51:56.725] Finding globals ... DONE
[10:51:56.725] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:51:56.725] List of 2
[10:51:56.725]  $ ...future.FUN:function (x, y)  
[10:51:56.725]  $ MoreArgs     : NULL
[10:51:56.725]  - attr(*, "where")=List of 2
[10:51:56.725]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:56.725]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:51:56.725]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:56.725]  - attr(*, "resolved")= logi FALSE
[10:51:56.725]  - attr(*, "total_size")= num NA
[10:51:56.728] Packages to be attached in all futures: [n=0] 
[10:51:56.728] getGlobalsAndPackagesXApply() ... DONE
[10:51:56.728] Number of futures (= number of chunks): 1
[10:51:56.728] Launching 1 futures (chunks) ...
[10:51:56.728] Chunk #1 of 1 ...
[10:51:56.729]  - Finding globals in '...' for chunk #1 ...
[10:51:56.729] getGlobalsAndPackages() ...
[10:51:56.729] |  Searching for globals ...
[10:51:56.729] |  :  globals found: [0] 
[10:51:56.729] |  Searching for globals ... DONE
[10:51:56.729] |  globals: [0] <none>
[10:51:56.729] |  packages: [0] <none>
[10:51:56.729] getGlobalsAndPackages() ... done
[10:51:56.730]    + additional globals found: [n=0] 
[10:51:56.730]    + additional namespaces needed: [n=0] 
[10:51:56.731]  - Finding globals in '...' for chunk #1 ... DONE
[10:51:56.731]  - seeds: <none>
[10:51:56.731]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:56.731] getGlobalsAndPackages() ...
[10:51:56.731] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:56.731] |  Resolving globals: FALSE
[10:51:56.732] |  Search for packages associated with the globals ...
[10:51:56.732] |  :  Packages associated with globals: [0] 
[10:51:56.732] |  :  Packages: [0] 
[10:51:56.732] |  Search for packages associated with the globals ... DONE
[10:51:56.732] |  Packages after dropping 'base': [0] 
[10:51:56.732] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:56.732] |  packages: [0] 
[10:51:56.733] getGlobalsAndPackages() ... done
[10:51:56.733] run() for Future (‘Future’) ...
[10:51:56.733] |  state: ‘created’
[10:51:56.733] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.733] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.733] |  Using SequentialFutureBackend ...
[10:51:56.733] |  :  Launching futures ...
[10:51:56.733] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:56.734] |  :  .  |  getFutureData() ...
[10:51:56.734] |  :  .  |  :  getFutureCore() ...
[10:51:56.734] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:56.734] |  :  .  |  :  getFutureCore() ... done
[10:51:56.734] |  :  .  |  :  getFutureCapture() ...
[10:51:56.734] |  :  .  |  :  getFutureCapture() ... done
[10:51:56.734] |  :  .  |  :  getFutureContext() ...
[10:51:56.734] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.734] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:56.734] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.735] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:56.735] |  :  .  |  :  getFutureContext() ... done
[10:51:56.735] |  :  .  |  getFutureData() ... done
[10:51:56.735] |  :  .  |  attachPackages() ...
[10:51:56.735] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:56.735] |  :  .  |  attachPackages() ... DONE
[10:51:56.735] |  :  .  |  attachPackages() ...
[10:51:56.735] |  :  .  |  :  packages: [n=0] 
[10:51:56.735] |  :  .  |  attachPackages() ... DONE
[10:51:56.736] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.736] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:56.736] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.736] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:56.736] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:56.737] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:56.737] |  :  .  |  :  .  |  New stack:
[10:51:56.737] |  :  .  |  :  .  |  List of 1
[10:51:56.737] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:56.737] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:56.737] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:56.737] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.737] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.737] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.737] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.739] |  :  .  |  :  .  |  Old stack:
[10:51:56.739] |  :  .  |  :  .  |  List of 1
[10:51:56.739] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:56.739] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:56.739] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:56.739] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.739] |  :  .  |  :  .  |      ...)  
[10:51:56.739] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.739] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.739] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:56.739] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:56.739] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.739] |  :  .  |  :  .  |      ...)  
[10:51:56.739] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.739] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.742] |  :  .  |  :  .  |  Not identical
[10:51:56.742] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:56.742] |  :  .  |  :  .  |  :  List of 2
[10:51:56.742] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:56.742] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:56.742] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:56.742] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.742] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.742] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.742] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:56.742] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:56.742] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:56.742] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.742] |  :  .  |  :  .  |  :      ...)  
[10:51:56.742] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.742] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.742] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:56.742] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:56.742] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:56.742] |  :  .  |  :  .  |  :      ...)  
[10:51:56.742] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:56.746] |  :  .  |  :  .  |  :  Formals differ
[10:51:56.746] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:56.746] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:56.747] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:56.747] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:56.747] |  :  .  |  :  .  List of future strategies:
[10:51:56.747] |  :  .  |  :  .  1. sequential:
[10:51:56.747] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:56.747] |  :  .  |  :  .     - tweaked: FALSE
[10:51:56.747] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.747] |  :  .  |  :  .  List of 1
[10:51:56.747] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:56.747] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:56.747] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:56.747] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.747] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:56.747] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:56.747] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:56.750] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:56.750] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:56.750] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:56.751] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:56.751] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:56.751] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:56.751] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:56.751] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:56.751] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:56.751] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:56.751] |  :  .  |  assign_globals() ...
[10:51:56.752] |  :  .  |  List of 5
[10:51:56.752] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:51:56.752] |  :  .  |   $ MoreArgs                 : NULL
[10:51:56.752] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:56.752] |  :  .  |    ..$ :List of 2
[10:51:56.752] |  :  .  |    .. ..$ : int 1
[10:51:56.752] |  :  .  |    .. ..$ : int 0
[10:51:56.752] |  :  .  |    ..$ :List of 2
[10:51:56.752] |  :  .  |    .. ..$ : int 0
[10:51:56.752] |  :  .  |    .. ..$ : int 1
[10:51:56.752] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:56.752] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:56.752] |  :  .  |   - attr(*, "where")=List of 5
[10:51:56.752] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:56.752] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:51:56.752] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:56.752] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:56.752] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:56.752] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:56.752] |  :  .  |   - attr(*, "total_size")= num NA
[10:51:56.752] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:56.752] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:56.757] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:56.757] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:56.757] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:51:56.757] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:56.758] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:56.758] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:56.758] |  :  .  |  assign_globals() ... done
[10:51:57.260] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:57.261] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:57.261] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:57.261] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:57.261] |  :  .  |  :  .  |  :  New stack:
[10:51:57.261] |  :  .  |  :  .  |  :  List of 1
[10:51:57.261] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:57.261] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:57.261] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:57.261] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.261] |  :  .  |  :  .  |  :      ...)  
[10:51:57.261] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.261] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.261] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:57.261] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:57.261] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.261] |  :  .  |  :  .  |  :      ...)  
[10:51:57.261] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.261] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.264] |  :  .  |  :  .  |  :  Old stack:
[10:51:57.264] |  :  .  |  :  .  |  :  List of 1
[10:51:57.264] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.264] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:57.264] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:57.264] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.264] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.264] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.264] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.267] |  :  .  |  :  .  |  :  Not identical
[10:51:57.267] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:51:57.267] |  :  .  |  :  .  |  :  .  List of 2
[10:51:57.267] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:57.267] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:57.267] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:57.267] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.267] |  :  .  |  :  .  |  :  .      ...)  
[10:51:57.267] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.267] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.267] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:57.267] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:57.267] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.267] |  :  .  |  :  .  |  :  .      ...)  
[10:51:57.267] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.267] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.267] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:57.267] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:57.267] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.267] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.267] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.273] |  :  .  |  :  .  |  :  .  Formals differ
[10:51:57.273] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:51:57.274] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:51:57.274] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:57.274] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:51:57.274] |  :  .  |  :  .  |  List of future strategies:
[10:51:57.274] |  :  .  |  :  .  |  1. multicore:
[10:51:57.274] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:57.274] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:57.274] |  :  .  |  :  .  |     - call: plan(strategy)
[10:51:57.274] |  :  .  |  :  .  |  List of 1
[10:51:57.274] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:57.274] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:57.274] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:57.274] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.274] |  :  .  |  :  .  |      ...)  
[10:51:57.274] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.274] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.274] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:57.274] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:57.274] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.274] |  :  .  |  :  .  |      ...)  
[10:51:57.274] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.274] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.277] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:57.277] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:57.277] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.278] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:57.278] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.278] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:51:57.278] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:57.278] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:57.278] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:57.278] |  :  .  |  SequentialFuture started (and completed)
[10:51:57.278] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:57.279] |  :  Launching futures ... done
[10:51:57.279] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:57.279] |  Using SequentialFutureBackend ... done
[10:51:57.279] run() for Future (‘SequentialFuture’) ... done
[10:51:57.279] Created future:
[10:51:57.279] SequentialFuture:
[10:51:57.279] Label: ‘future_mapply-1’
[10:51:57.279] Expression:
[10:51:57.279] {
[10:51:57.279]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:57.279]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:57.279]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:57.279]         on.exit(options(oopts), add = TRUE)
[10:51:57.279]     }
[10:51:57.279]     {
[10:51:57.279]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:51:57.279]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:51:57.279]         do.call(mapply, args = args)
[10:51:57.279]     }
[10:51:57.279] }
[10:51:57.279] Lazy evaluation: FALSE
[10:51:57.279] Asynchronous evaluation: TRUE
[10:51:57.279] Local evaluation: TRUE
[10:51:57.279] Environment: R_GlobalEnv
[10:51:57.279] Capture standard output: TRUE
[10:51:57.279] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:57.279] Immediate condition classes: ‘immediateCondition’
[10:51:57.279] Globals: 5 objects totaling 1.21 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 95 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:57.279] Packages: <none>
[10:51:57.279] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:57.279] Resolved: TRUE
[10:51:57.279] Value: 184 bytes of class ‘list’
[10:51:57.279] Early signaling: FALSE
[10:51:57.279] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:57.279] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:57.280] Chunk #1 of 1 ... DONE
[10:51:57.280] Launching 1 futures (chunks) ... DONE
[10:51:57.280] Resolving 1 futures (chunks) ...
[10:51:57.280] value() on list ...
[10:51:57.280] |  recursive: 0
[10:51:57.280] |  length: 1
[10:51:57.280] |  
[10:51:57.281] |  Number of remaining objects: 1
[10:51:57.281] |  checking value #1 ...
[10:51:57.281] |  :  'obj' is SequentialFuture
[10:51:57.281] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:57.281] |  :  .  state: ‘finished’
[10:51:57.281] |  :  .  run: TRUE
[10:51:57.281] |  :  .  result: ‘FutureResult’
[10:51:57.281] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:57.281] |  :  SequentialFuture #1
[10:51:57.281] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:57.281] |  :  .  nx: 1
[10:51:57.282] |  :  .  relay: TRUE
[10:51:57.282] |  :  .  stdout: TRUE
[10:51:57.282] |  :  .  signal: TRUE
[10:51:57.282] |  :  .  resignal: FALSE
[10:51:57.282] |  :  .  force: TRUE
[10:51:57.282] |  :  .  relayed: [n=1] FALSE
[10:51:57.282] |  :  .  queued futures: [n=1] FALSE
[10:51:57.282] |  :  .  until=1
[10:51:57.282] |  :  .  relaying element #1
[10:51:57.282] |  :  .  relayed: [n=1] TRUE
[10:51:57.283] |  :  .  queued futures: [n=1] TRUE
[10:51:57.283] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:57.283] |  :  value(<SequentialFuture>, ...) ...
[10:51:57.283] |  :  .  value: <list>
[10:51:57.283] |  :  value(<SequentialFuture>, ...) ... done
[10:51:57.283] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:57.283] |  :  .  nx: 1
[10:51:57.283] |  :  .  relay: TRUE
[10:51:57.283] |  :  .  stdout: TRUE
[10:51:57.283] |  :  .  signal: TRUE
[10:51:57.283] |  :  .  resignal: FALSE
[10:51:57.284] |  :  .  force: TRUE
[10:51:57.284] |  :  .  relayed: [n=1] TRUE
[10:51:57.284] |  :  .  queued futures: [n=1] TRUE
[10:51:57.284] |  :  .  until=1
[10:51:57.284] |  :  .  relayed: [n=1] TRUE
[10:51:57.284] |  :  .  queued futures: [n=1] TRUE
[10:51:57.284] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:57.284] |  :  length: 0 (resolved future 1)
[10:51:57.284] |  checking value #1 ... done
[10:51:57.284] |  Relaying remaining futures ...
[10:51:57.284] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:57.285] |  :  .  nx: 1
[10:51:57.285] |  :  .  relay: TRUE
[10:51:57.285] |  :  .  stdout: TRUE
[10:51:57.285] |  :  .  signal: TRUE
[10:51:57.285] |  :  .  resignal: FALSE
[10:51:57.285] |  :  .  force: TRUE
[10:51:57.285] |  :  .  relayed: [n=1] TRUE
[10:51:57.285] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:57.285] |  :  .  relayed: [n=1] TRUE
[10:51:57.285] |  :  .  queued futures: [n=1] TRUE
[10:51:57.285] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:57.285] |  Relaying remaining futures ... done
[10:51:57.286] value() on list ... done
[10:51:57.286]  - Number of value chunks collected: 1
[10:51:57.286] Resolving 1 futures (chunks) ... DONE
[10:51:57.286] Reducing values from 1 chunks ...
[10:51:57.286]  - Number of values collected after concatenation: 2
[10:51:57.286]  - Number of values expected: 2
[10:51:57.286] Reducing values from 1 chunks ... DONE
[10:51:57.286] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ... DONE
* future_mapply(x, ..., future.stdout = NA) ...
[10:51:57.287] future_mapply() ...
[10:51:57.287] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.287] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:57.287] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.287] Number of chunks: 1
[10:51:57.287] getGlobalsAndPackagesXApply() ...
[10:51:57.287]  - future.globals: TRUE
[10:51:57.287] getGlobalsAndPackages() ...
[10:51:57.287] |  Searching for globals ...
[10:51:57.289] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:51:57.289] |  Searching for globals ... DONE
[10:51:57.289] |  Resolving globals: FALSE
[10:51:57.289] |  Search for packages associated with the globals ...
[10:51:57.290] |  :  Packages associated with globals: [1] ‘base’
[10:51:57.290] |  :  Packages: [1] ‘base’
[10:51:57.290] |  Search for packages associated with the globals ... DONE
[10:51:57.290] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:51:57.291] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:51:57.292] |  Packages after dropping 'base': [0] 
[10:51:57.292] |  globals: [1] ‘FUN’
[10:51:57.292] |  packages: [0] 
[10:51:57.292] getGlobalsAndPackages() ... done
[10:51:57.292]  - globals found/used: [n=1] ‘FUN’
[10:51:57.292]  - needed namespaces: [n=0] 
[10:51:57.292] Finding globals ... DONE
[10:51:57.292] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:51:57.293] List of 2
[10:51:57.293]  $ ...future.FUN:function (x, y)  
[10:51:57.293]  $ MoreArgs     : NULL
[10:51:57.293]  - attr(*, "where")=List of 2
[10:51:57.293]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:57.293]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:51:57.293]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:57.293]  - attr(*, "resolved")= logi FALSE
[10:51:57.293]  - attr(*, "total_size")= num NA
[10:51:57.295] Packages to be attached in all futures: [n=0] 
[10:51:57.295] getGlobalsAndPackagesXApply() ... DONE
[10:51:57.295] Number of futures (= number of chunks): 1
[10:51:57.295] Launching 1 futures (chunks) ...
[10:51:57.296] Chunk #1 of 1 ...
[10:51:57.296]  - Finding globals in '...' for chunk #1 ...
[10:51:57.296] getGlobalsAndPackages() ...
[10:51:57.296] |  Searching for globals ...
[10:51:57.296] |  :  globals found: [0] 
[10:51:57.296] |  Searching for globals ... DONE
[10:51:57.296] |  globals: [0] <none>
[10:51:57.296] |  packages: [0] <none>
[10:51:57.297] getGlobalsAndPackages() ... done
[10:51:57.297]    + additional globals found: [n=0] 
[10:51:57.297]    + additional namespaces needed: [n=0] 
[10:51:57.297]  - Finding globals in '...' for chunk #1 ... DONE
[10:51:57.297]  - seeds: <none>
[10:51:57.297]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:57.297] getGlobalsAndPackages() ...
[10:51:57.297] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:57.297] |  Resolving globals: FALSE
[10:51:57.297] |  Search for packages associated with the globals ...
[10:51:57.298] |  :  Packages associated with globals: [0] 
[10:51:57.298] |  :  Packages: [0] 
[10:51:57.298] |  Search for packages associated with the globals ... DONE
[10:51:57.298] |  Packages after dropping 'base': [0] 
[10:51:57.298] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:57.298] |  packages: [0] 
[10:51:57.298] getGlobalsAndPackages() ... done
[10:51:57.299] run() for Future (‘Future’) ...
[10:51:57.299] |  state: ‘created’
[10:51:57.299] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.299] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.299] |  Using SequentialFutureBackend ...
[10:51:57.299] |  :  Launching futures ...
[10:51:57.299] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:57.299] |  :  .  |  getFutureData() ...
[10:51:57.299] |  :  .  |  :  getFutureCore() ...
[10:51:57.299] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:57.300] |  :  .  |  :  getFutureCore() ... done
[10:51:57.300] |  :  .  |  :  getFutureCapture() ...
[10:51:57.300] |  :  .  |  :  getFutureCapture() ... done
[10:51:57.300] |  :  .  |  :  getFutureContext() ...
[10:51:57.300] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.300] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:57.300] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.300] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:57.300] |  :  .  |  :  getFutureContext() ... done
[10:51:57.300] |  :  .  |  getFutureData() ... done
[10:51:57.301] |  :  .  |  attachPackages() ...
[10:51:57.301] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:57.301] |  :  .  |  attachPackages() ... DONE
[10:51:57.301] |  :  .  |  attachPackages() ...
[10:51:57.301] |  :  .  |  :  packages: [n=0] 
[10:51:57.301] |  :  .  |  attachPackages() ... DONE
[10:51:57.301] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.302] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:57.302] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.302] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:57.302] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:57.302] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:57.302] |  :  .  |  :  .  |  New stack:
[10:51:57.302] |  :  .  |  :  .  |  List of 1
[10:51:57.302] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.302] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:57.302] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:57.302] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.302] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.302] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.302] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.304] |  :  .  |  :  .  |  Old stack:
[10:51:57.305] |  :  .  |  :  .  |  List of 1
[10:51:57.305] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:57.305] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:57.305] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:57.305] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.305] |  :  .  |  :  .  |      ...)  
[10:51:57.305] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.305] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.305] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:57.305] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:57.305] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.305] |  :  .  |  :  .  |      ...)  
[10:51:57.305] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.305] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.307] |  :  .  |  :  .  |  Not identical
[10:51:57.308] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:57.308] |  :  .  |  :  .  |  :  List of 2
[10:51:57.308] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.308] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:57.308] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:57.308] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.308] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.308] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.308] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:57.308] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:57.308] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:57.308] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.308] |  :  .  |  :  .  |  :      ...)  
[10:51:57.308] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.308] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.308] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:57.308] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:57.308] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.308] |  :  .  |  :  .  |  :      ...)  
[10:51:57.308] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.313] |  :  .  |  :  .  |  :  Formals differ
[10:51:57.313] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:57.313] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:57.313] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:57.314] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:57.314] |  :  .  |  :  .  List of future strategies:
[10:51:57.314] |  :  .  |  :  .  1. sequential:
[10:51:57.314] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:57.314] |  :  .  |  :  .     - tweaked: FALSE
[10:51:57.314] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.314] |  :  .  |  :  .  List of 1
[10:51:57.314] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.314] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:57.314] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:57.314] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.314] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.314] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.314] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.316] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:57.316] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:57.316] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.317] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:57.317] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.317] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:57.317] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:57.317] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:57.317] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:57.317] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:57.317] |  :  .  |  assign_globals() ...
[10:51:57.318] |  :  .  |  List of 5
[10:51:57.318] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:51:57.318] |  :  .  |   $ MoreArgs                 : NULL
[10:51:57.318] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:57.318] |  :  .  |    ..$ :List of 2
[10:51:57.318] |  :  .  |    .. ..$ : int 1
[10:51:57.318] |  :  .  |    .. ..$ : int 0
[10:51:57.318] |  :  .  |    ..$ :List of 2
[10:51:57.318] |  :  .  |    .. ..$ : int 0
[10:51:57.318] |  :  .  |    .. ..$ : int 1
[10:51:57.318] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:57.318] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:57.318] |  :  .  |   - attr(*, "where")=List of 5
[10:51:57.318] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:57.318] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:51:57.318] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:57.318] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:57.318] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:57.318] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:57.318] |  :  .  |   - attr(*, "total_size")= num NA
[10:51:57.318] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:57.318] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:57.323] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:57.323] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:57.323] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:51:57.324] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:57.324] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:57.324] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:57.324] |  :  .  |  assign_globals() ... done
[10:51:57.827] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:57.827] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:57.827] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:57.827] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:57.827] |  :  .  |  :  .  |  :  New stack:
[10:51:57.827] |  :  .  |  :  .  |  :  List of 1
[10:51:57.827] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:57.827] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:51:57.827] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:57.827] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.827] |  :  .  |  :  .  |  :      ...)  
[10:51:57.827] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.827] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.827] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:57.827] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:57.827] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.827] |  :  .  |  :  .  |  :      ...)  
[10:51:57.827] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.827] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.832] |  :  .  |  :  .  |  :  Old stack:
[10:51:57.832] |  :  .  |  :  .  |  :  List of 1
[10:51:57.832] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.832] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:57.832] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:57.832] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.832] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.832] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.832] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.835] |  :  .  |  :  .  |  :  Not identical
[10:51:57.835] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:51:57.835] |  :  .  |  :  .  |  :  .  List of 2
[10:51:57.835] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:57.835] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:57.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:57.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.835] |  :  .  |  :  .  |  :  .      ...)  
[10:51:57.835] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:57.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:57.835] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.835] |  :  .  |  :  .  |  :  .      ...)  
[10:51:57.835] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.835] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:57.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:57.835] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.835] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.840] |  :  .  |  :  .  |  :  .  Formals differ
[10:51:57.840] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:51:57.840] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:51:57.840] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:57.840] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:51:57.840] |  :  .  |  :  .  |  List of future strategies:
[10:51:57.840] |  :  .  |  :  .  |  1. multicore:
[10:51:57.840] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:57.840] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:57.840] |  :  .  |  :  .  |     - call: plan(strategy)
[10:51:57.840] |  :  .  |  :  .  |  List of 1
[10:51:57.840] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:57.840] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:57.840] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:57.840] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.840] |  :  .  |  :  .  |      ...)  
[10:51:57.840] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.840] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.840] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:57.840] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:57.840] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.840] |  :  .  |  :  .  |      ...)  
[10:51:57.840] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.840] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.843] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:57.844] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:57.844] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.844] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:57.844] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.844] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:51:57.844] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:57.844] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:57.844] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:57.845] |  :  .  |  SequentialFuture started (and completed)
[10:51:57.845] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:57.845] |  :  Launching futures ... done
[10:51:57.845] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:57.845] |  Using SequentialFutureBackend ... done
[10:51:57.845] run() for Future (‘SequentialFuture’) ... done
[10:51:57.845] Created future:
[10:51:57.845] SequentialFuture:
[10:51:57.845] Label: ‘future_mapply-1’
[10:51:57.845] Expression:
[10:51:57.845] {
[10:51:57.845]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:57.845]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:57.845]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:57.845]         on.exit(options(oopts), add = TRUE)
[10:51:57.845]     }
[10:51:57.845]     {
[10:51:57.845]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:51:57.845]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:51:57.845]         do.call(mapply, args = args)
[10:51:57.845]     }
[10:51:57.845] }
[10:51:57.845] Lazy evaluation: FALSE
[10:51:57.845] Asynchronous evaluation: TRUE
[10:51:57.845] Local evaluation: TRUE
[10:51:57.845] Environment: R_GlobalEnv
[10:51:57.845] Capture standard output: NA
[10:51:57.845] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:57.845] Immediate condition classes: ‘immediateCondition’
[10:51:57.845] Globals: 5 objects totaling 1.21 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 95 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:57.845] Packages: <none>
[10:51:57.845] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:57.845] Resolved: TRUE
[10:51:57.845] Value: 184 bytes of class ‘list’
[10:51:57.845] Early signaling: FALSE
[10:51:57.845] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:57.845] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:57.846] Chunk #1 of 1 ... DONE
[10:51:57.846] Launching 1 futures (chunks) ... DONE
[10:51:57.846] Resolving 1 futures (chunks) ...
[10:51:57.846] value() on list ...
[10:51:57.847] |  recursive: 0
[10:51:57.847] |  length: 1
[10:51:57.847] |  
[10:51:57.847] |  Number of remaining objects: 1
[10:51:57.847] |  checking value #1 ...
[10:51:57.847] |  :  'obj' is SequentialFuture
[10:51:57.847] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:57.847] |  :  .  state: ‘finished’
[10:51:57.847] |  :  .  run: TRUE
[10:51:57.847] |  :  .  result: ‘FutureResult’
[10:51:57.847] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:57.848] |  :  SequentialFuture #1
[10:51:57.848] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:57.848] |  :  .  nx: 1
[10:51:57.848] |  :  .  relay: TRUE
[10:51:57.848] |  :  .  stdout: TRUE
[10:51:57.848] |  :  .  signal: TRUE
[10:51:57.848] |  :  .  resignal: FALSE
[10:51:57.848] |  :  .  force: TRUE
[10:51:57.848] |  :  .  relayed: [n=1] FALSE
[10:51:57.848] |  :  .  queued futures: [n=1] FALSE
[10:51:57.848] |  :  .  until=1
[10:51:57.849] |  :  .  relaying element #1
[10:51:57.849] |  :  .  relayed: [n=1] TRUE
[10:51:57.849] |  :  .  queued futures: [n=1] TRUE
[10:51:57.849] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:57.849] |  :  value(<SequentialFuture>, ...) ...
[10:51:57.849] |  :  .  value: <list>
[10:51:57.849] |  :  value(<SequentialFuture>, ...) ... done
[10:51:57.849] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:57.849] |  :  .  nx: 1
[10:51:57.849] |  :  .  relay: TRUE
[10:51:57.850] |  :  .  stdout: TRUE
[10:51:57.850] |  :  .  signal: TRUE
[10:51:57.850] |  :  .  resignal: FALSE
[10:51:57.850] |  :  .  force: TRUE
[10:51:57.850] |  :  .  relayed: [n=1] TRUE
[10:51:57.850] |  :  .  queued futures: [n=1] TRUE
[10:51:57.850] |  :  .  until=1
[10:51:57.850] |  :  .  relayed: [n=1] TRUE
[10:51:57.850] |  :  .  queued futures: [n=1] TRUE
[10:51:57.850] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:57.852] |  :  length: 0 (resolved future 1)
[10:51:57.852] |  checking value #1 ... done
[10:51:57.852] |  Relaying remaining futures ...
[10:51:57.853] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:57.853] |  :  .  nx: 1
[10:51:57.853] |  :  .  relay: TRUE
[10:51:57.853] |  :  .  stdout: TRUE
[10:51:57.853] |  :  .  signal: TRUE
[10:51:57.853] |  :  .  resignal: FALSE
[10:51:57.853] |  :  .  force: TRUE
[10:51:57.853] |  :  .  relayed: [n=1] TRUE
[10:51:57.853] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:57.853] |  :  .  relayed: [n=1] TRUE
[10:51:57.853] |  :  .  queued futures: [n=1] TRUE
[10:51:57.854] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:57.854] |  Relaying remaining futures ... done
[10:51:57.854] value() on list ... done
[10:51:57.854]  - Number of value chunks collected: 1
[10:51:57.854] Resolving 1 futures (chunks) ... DONE
[10:51:57.854] Reducing values from 1 chunks ...
[10:51:57.854]  - Number of values collected after concatenation: 2
[10:51:57.854]  - Number of values expected: 2
[10:51:57.854] Reducing values from 1 chunks ... DONE
[10:51:57.854] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = NA) ... DONE
* plan('multicore') ... DONE
* plan('multisession') ...
[10:51:57.855] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.855] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:57.855] |  :  all.equal() for FutureStrategyList ...
[10:51:57.855] |  :  .  New stack:
[10:51:57.855] |  :  .  List of 1
[10:51:57.855] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:57.855] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.855] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:57.855] |  :  .    ..- attr(*, "init")= logi TRUE
[10:51:57.855] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:57.855] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.855] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.855] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:51:57.855] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:57.855] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.858] |  :  .  Old stack:
[10:51:57.858] |  :  .  List of 1
[10:51:57.858] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:57.858] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:51:57.858] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:57.858] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.858] |  :  .      ...)  
[10:51:57.858] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.858] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.858] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:57.858] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:57.858] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.858] |  :  .      ...)  
[10:51:57.858] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.858] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.861] |  :  .  Not identical
[10:51:57.861] |  :  .  all.equal() for future ...
[10:51:57.861] |  :  .  |  List of 2
[10:51:57.861] |  :  .  |   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:57.861] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.861] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:57.861] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:51:57.861] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:57.861] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.861] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.861] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:51:57.861] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:57.861] |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:51:57.861] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:51:57.861] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:51:57.861] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.861] |  :  .  |      ...)  
[10:51:57.861] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.861] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.861] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:57.861] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562580f2e3e8> 
[10:51:57.861] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:51:57.861] |  :  .  |      ...)  
[10:51:57.861] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:51:57.866] |  :  .  |  Formals differ
[10:51:57.866] |  :  .  all.equal() for future ... done
[10:51:57.866] |  :  .  Future strategies differ at level 1
[10:51:57.866] |  :  all.equal() for FutureStrategyList ... done
[10:51:57.867] |  :  plan(): Setting new future strategy stack:
[10:51:57.867] |  :  List of future strategies:
[10:51:57.867] |  :  1. multisession:
[10:51:57.867] |  :     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:57.867] |  :     - tweaked: FALSE
[10:51:57.867] |  :     - call: plan(strategy)
[10:51:57.867] |  :  List of 1
[10:51:57.867] |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:57.867] |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.867] |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:57.867] |  :    ..- attr(*, "init")= logi TRUE
[10:51:57.867] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:57.867] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.867] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.867] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:51:57.867] |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:57.867] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.870] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:51:57.870] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.870] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:51:57.870] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.870] |  :  .  Legacy shutdown of cluster workers ...
[10:51:57.870] |  :  .  |  Stopping existing cluster ...
[10:51:57.870] |  :  .  |  :  No pre-existing cluster. Skipping
[10:51:57.870] |  :  .  |  Stopping existing cluster ... done
[10:51:57.870] |  :  .  Legacy shutdown of cluster workers ... done
[10:51:57.871] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:51:57.871] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:51:57.871] |  :  .  function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:57.871] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.871] |  :  .   - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:57.871] |  :  .   - attr(*, "init")= logi TRUE
[10:51:57.871] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:57.871] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.871] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.871] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:51:57.871] |  :  .   - attr(*, "call")= language plan(strategy)
[10:51:57.874] |  :  .  init: TRUE
[10:51:57.874] |  :  .  makeFutureBackend(<multisession>) ...
[10:51:57.874] |  :  .  |  Backend function: <‘NULL’>
[10:51:57.876] |  :  .  |  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:57.876] |  :  .  makeFutureBackend(<multisession>) ... done
[10:51:57.876] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:51:57.876] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.876] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:57.876] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.877] |  :  plan(): nbrOfWorkers() = 1
[10:51:57.877] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:57.877] plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
* future_lapply(x, ..., future.stdout = FALSE) ...
[10:51:57.877] future_lapply() ...
[10:51:57.878] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.878] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:57.878] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.878] Number of chunks: 1
[10:51:57.878] getGlobalsAndPackagesXApply() ...
[10:51:57.878]  - future.globals: TRUE
[10:51:57.878] getGlobalsAndPackages() ...
[10:51:57.879] |  Searching for globals ...
[10:51:57.880] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:51:57.880] |  Searching for globals ... DONE
[10:51:57.880] |  Resolving globals: FALSE
[10:51:57.880] |  Search for packages associated with the globals ...
[10:51:57.881] |  :  Packages associated with globals: [1] ‘base’
[10:51:57.881] |  :  Packages: [1] ‘base’
[10:51:57.881] |  Search for packages associated with the globals ... DONE
[10:51:57.881] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:51:57.882] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:51:57.882] |  Packages after dropping 'base': [0] 
[10:51:57.882] |  globals: [1] ‘FUN’
[10:51:57.882] |  packages: [0] 
[10:51:57.882] getGlobalsAndPackages() ... done
[10:51:57.882]  - globals found/used: [n=1] ‘FUN’
[10:51:57.882]  - needed namespaces: [n=0] 
[10:51:57.882] Finding globals ... DONE
[10:51:57.882]  - use_args: TRUE
[10:51:57.882]  - Getting '...' globals ...
[10:51:57.883] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:57.883] |  recursive: 0
[10:51:57.883] |  length: 1
[10:51:57.883] |  elements: ‘...’
[10:51:57.883] |  'obj' is DotDotDotList
[10:51:57.883] |  resolve(obj, ...) ...
[10:51:57.883] |  resolve(obj, ...) ... done
[10:51:57.884] |  length: 0 (resolved future 1)
[10:51:57.884] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:57.884]    - '...' content: [n=0] 
[10:51:57.884] List of 1
[10:51:57.884]  $ ...: list()
[10:51:57.884]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:57.884]  - attr(*, "where")=List of 1
[10:51:57.884]   ..$ ...:<environment: 0x5625813435b8> 
[10:51:57.884]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:57.884]  - attr(*, "resolved")= logi TRUE
[10:51:57.884]  - attr(*, "total_size")= num NA
[10:51:57.886]  - Getting '...' globals ... DONE
[10:51:57.886] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:57.887] List of 2
[10:51:57.887]  $ ...future.FUN:function (x)  
[10:51:57.887]  $ ...          : list()
[10:51:57.887]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:57.887]  - attr(*, "where")=List of 2
[10:51:57.887]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:57.887]   ..$ ...          :<environment: 0x5625813435b8> 
[10:51:57.887]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:57.887]  - attr(*, "resolved")= logi FALSE
[10:51:57.887]  - attr(*, "total_size")= num 5632
[10:51:57.889] Packages to be attached in all futures: [n=0] 
[10:51:57.889] getGlobalsAndPackagesXApply() ... DONE
[10:51:57.890] Number of futures (= number of chunks): 1
[10:51:57.890] Launching 1 futures (chunks) ...
[10:51:57.890] Chunk #1 of 1 ...
[10:51:57.890]  - Finding globals in 'X' for chunk #1 ...
[10:51:57.890] getGlobalsAndPackages() ...
[10:51:57.890] |  Searching for globals ...
[10:51:57.890] |  :  globals found: [0] 
[10:51:57.890] |  Searching for globals ... DONE
[10:51:57.890] |  globals: [0] <none>
[10:51:57.891] |  packages: [0] <none>
[10:51:57.891] getGlobalsAndPackages() ... done
[10:51:57.891]    + additional globals found: [n=0] 
[10:51:57.891]    + additional namespaces needed: [n=0] 
[10:51:57.891]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:57.891]  - seeds: <none>
[10:51:57.891]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:57.891] getGlobalsAndPackages() ...
[10:51:57.891] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:57.891] |  Resolving globals: FALSE
[10:51:57.892] |  Tweak future expression to call with '...' arguments ...
[10:51:57.892] |  :  {
[10:51:57.892] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:57.892] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:57.892] |  :      "# as a global variable                                         "
[10:51:57.892] |  :      do.call(function(...) {
[10:51:57.892] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:57.892] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:57.892] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:57.892] |  :          "# anonymous function.                                          "
[10:51:57.892] |  :          "#                                                              "
[10:51:57.892] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:57.892] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:57.892] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:57.892] |  :          "# global environment, which is where globals are written.      "
[10:51:57.892] |  :          penv <- env <- environment(...future.FUN)
[10:51:57.892] |  :          repeat {
[10:51:57.892] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:57.892] |  :                  emptyenv())) 
[10:51:57.892] |  :                  break
[10:51:57.892] |  :              penv <- env
[10:51:57.892] |  :              env <- parent.env(env)
[10:51:57.892] |  :          }
[10:51:57.892] |  :          if (identical(penv, globalenv())) {
[10:51:57.892] |  :              environment(...future.FUN) <- environment()
[10:51:57.892] |  :          }
[10:51:57.892] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:57.892] |  :              !isNamespace(penv)) {
[10:51:57.892] |  :              parent.env(penv) <- environment()
[10:51:57.892] |  :          }
[10:51:57.892] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:57.892] |  :          {
[10:51:57.892] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:57.892] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:57.892] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:57.892] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:57.892] |  :              }
[10:51:57.892] |  :              {
[10:51:57.892] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:57.892] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:57.892] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:57.892] |  :                  })
[10:51:57.892] |  :              }
[10:51:57.892] |  :          }
[10:51:57.892] |  :      }, args = future.call.arguments)
[10:51:57.892] |  :  }
[10:51:57.892] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:57.892] |  Search for packages associated with the globals ...
[10:51:57.892] |  :  Packages associated with globals: [0] 
[10:51:57.893] |  :  Packages: [0] 
[10:51:57.893] |  Search for packages associated with the globals ... DONE
[10:51:57.893] |  Packages after dropping 'base': [0] 
[10:51:57.893] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:57.893] |  packages: [0] 
[10:51:57.893] getGlobalsAndPackages() ... done
[10:51:57.895] run() for Future (‘Future’) ...
[10:51:57.895] |  state: ‘created’
[10:51:57.895] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.895] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.895] |  Using SequentialFutureBackend ...
[10:51:57.895] |  :  Launching futures ...
[10:51:57.895] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:57.895] |  :  .  |  getFutureData() ...
[10:51:57.895] |  :  .  |  :  getFutureCore() ...
[10:51:57.896] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:57.896] |  :  .  |  :  getFutureCore() ... done
[10:51:57.896] |  :  .  |  :  getFutureCapture() ...
[10:51:57.896] |  :  .  |  :  getFutureCapture() ... done
[10:51:57.896] |  :  .  |  :  getFutureContext() ...
[10:51:57.896] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.896] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:57.896] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.896] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:57.897] |  :  .  |  :  getFutureContext() ... done
[10:51:57.897] |  :  .  |  getFutureData() ... done
[10:51:57.897] |  :  .  |  attachPackages() ...
[10:51:57.897] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:57.897] |  :  .  |  attachPackages() ... DONE
[10:51:57.897] |  :  .  |  attachPackages() ...
[10:51:57.897] |  :  .  |  :  packages: [n=0] 
[10:51:57.897] |  :  .  |  attachPackages() ... DONE
[10:51:57.898] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.898] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:57.898] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.898] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:57.898] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:57.899] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:57.899] |  :  .  |  :  .  |  New stack:
[10:51:57.899] |  :  .  |  :  .  |  List of 1
[10:51:57.899] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.899] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:57.899] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:57.899] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.899] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.899] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.899] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.901] |  :  .  |  :  .  |  Old stack:
[10:51:57.901] |  :  .  |  :  .  |  List of 1
[10:51:57.901] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:57.901] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.901] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:57.901] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:51:57.901] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:57.901] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.901] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.901] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:51:57.901] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:57.901] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:57.901] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:57.901] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.901] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.904] |  :  .  |  :  .  |  Not identical
[10:51:57.904] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:57.905] |  :  .  |  :  .  |  :  List of 2
[10:51:57.905] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:57.905] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.905] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:57.905] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:57.905] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:57.905] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:57.905] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:57.905] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:57.909] |  :  .  |  :  .  |  :  Formals differ
[10:51:57.909] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:57.910] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:57.910] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:57.910] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:57.910] |  :  .  |  :  .  List of future strategies:
[10:51:57.910] |  :  .  |  :  .  1. sequential:
[10:51:57.910] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:57.910] |  :  .  |  :  .     - tweaked: FALSE
[10:51:57.910] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.910] |  :  .  |  :  .  List of 1
[10:51:57.910] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:57.910] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:57.910] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:57.910] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.910] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:57.910] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:57.910] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:57.912] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:57.913] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:57.913] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:57.913] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:57.913] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:57.913] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:57.913] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:57.913] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:57.913] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:57.913] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:57.914] |  :  .  |  assign_globals() ...
[10:51:57.915] |  :  .  |  List of 5
[10:51:57.915] |  :  .  |   $ ...future.FUN            :function (x)  
[10:51:57.915] |  :  .  |   $ future.call.arguments    : list()
[10:51:57.915] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:57.915] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:57.915] |  :  .  |    ..$ : int 1
[10:51:57.915] |  :  .  |    ..$ : int 0
[10:51:57.915] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:57.915] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:57.915] |  :  .  |   - attr(*, "where")=List of 5
[10:51:57.915] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:57.915] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:57.915] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:57.915] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:57.915] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:57.915] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:57.915] |  :  .  |   - attr(*, "total_size")= num 5632
[10:51:57.915] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:57.915] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:57.920] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:57.920] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:57.920] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:57.920] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:57.920] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:57.920] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:57.920] |  :  .  |  assign_globals() ... done
[10:51:58.423] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:58.423] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:58.423] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:58.424] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:58.424] |  :  .  |  :  .  |  :  New stack:
[10:51:58.424] |  :  .  |  :  .  |  :  List of 1
[10:51:58.424] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:58.424] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.424] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:58.424] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:51:58.424] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.424] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.424] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.424] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:51:58.424] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:58.424] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:58.424] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.424] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.424] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:58.428] |  :  .  |  :  .  |  :  Old stack:
[10:51:58.428] |  :  .  |  :  .  |  :  List of 1
[10:51:58.428] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.428] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:58.428] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:58.428] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:58.428] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:58.428] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:58.428] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:58.430] |  :  .  |  :  .  |  :  Not identical
[10:51:58.430] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:51:58.430] |  :  .  |  :  .  |  :  .  List of 2
[10:51:58.430] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:58.430] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.430] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:58.430] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.430] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.430] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:58.430] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:58.430] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:58.437] |  :  .  |  :  .  |  :  .  Formals differ
[10:51:58.437] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:51:58.437] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:51:58.437] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:58.437] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:51:58.437] |  :  .  |  :  .  |  List of future strategies:
[10:51:58.437] |  :  .  |  :  .  |  1. multisession:
[10:51:58.437] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:58.437] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:58.437] |  :  .  |  :  .  |     - call: plan(strategy)
[10:51:58.438] |  :  .  |  :  .  |  List of 1
[10:51:58.438] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:58.438] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.438] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:58.438] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:51:58.438] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.438] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.438] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.438] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:51:58.438] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:58.438] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:58.438] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.438] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.438] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:58.442] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:58.442] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:58.442] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:58.442] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:58.442] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:58.442] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:51:58.442] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:58.442] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:58.443] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:58.443] |  :  .  |  SequentialFuture started (and completed)
[10:51:58.443] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:58.443] |  :  Launching futures ... done
[10:51:58.443] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:58.443] |  Using SequentialFutureBackend ... done
[10:51:58.443] run() for Future (‘SequentialFuture’) ... done
[10:51:58.443] Created future:
[10:51:58.444] SequentialFuture:
[10:51:58.444] Label: ‘future_lapply-1’
[10:51:58.444] Expression:
[10:51:58.444] {
[10:51:58.444]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:58.444]     "# expression in do.call(), because function called uses '...'  "
[10:51:58.444]     "# as a global variable                                         "
[10:51:58.444]     do.call(function(...) {
[10:51:58.444]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:58.444]         "# without having an '...' argument. This means '...' is treated"
[10:51:58.444]         "# as a global variable. This may happen when FUN() is an       "
[10:51:58.444]         "# anonymous function.                                          "
[10:51:58.444]         "#                                                              "
[10:51:58.444]         "# If an anonymous function, we will make sure to restore the   "
[10:51:58.444]         "# function environment of FUN() to the calling environment.    "
[10:51:58.444]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:58.444]         "# global environment, which is where globals are written.      "
[10:51:58.444]         penv <- env <- environment(...future.FUN)
[10:51:58.444]         repeat {
[10:51:58.444]             if (identical(env, globalenv()) || identical(env, 
[10:51:58.444]                 emptyenv())) 
[10:51:58.444]                 break
[10:51:58.444]             penv <- env
[10:51:58.444]             env <- parent.env(env)
[10:51:58.444]         }
[10:51:58.444]         if (identical(penv, globalenv())) {
[10:51:58.444]             environment(...future.FUN) <- environment()
[10:51:58.444]         }
[10:51:58.444]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:58.444]             !isNamespace(penv)) {
[10:51:58.444]             parent.env(penv) <- environment()
[10:51:58.444]         }
[10:51:58.444]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:58.444]         {
[10:51:58.444]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:58.444]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:58.444]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:58.444]                 on.exit(options(oopts), add = TRUE)
[10:51:58.444]             }
[10:51:58.444]             {
[10:51:58.444]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:58.444]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:58.444]                   ...future.FUN(...future.X_jj, ...)
[10:51:58.444]                 })
[10:51:58.444]             }
[10:51:58.444]         }
[10:51:58.444]     }, args = future.call.arguments)
[10:51:58.444] }
[10:51:58.444] Lazy evaluation: FALSE
[10:51:58.444] Asynchronous evaluation: TRUE
[10:51:58.444] Local evaluation: TRUE
[10:51:58.444] Environment: R_GlobalEnv
[10:51:58.444] Capture standard output: FALSE
[10:51:58.444] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:58.444] Immediate condition classes: ‘immediateCondition’
[10:51:58.444] Globals: 5 objects totaling 1.02 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:58.444] Packages: <none>
[10:51:58.444] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:58.444] Resolved: TRUE
[10:51:58.444] Value: 55 bytes of class ‘list’
[10:51:58.444] Early signaling: FALSE
[10:51:58.444] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:58.444] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:58.445] Chunk #1 of 1 ... DONE
[10:51:58.445] Launching 1 futures (chunks) ... DONE
[10:51:58.445] Resolving 1 futures (chunks) ...
[10:51:58.445] value() on list ...
[10:51:58.445] |  recursive: 0
[10:51:58.445] |  length: 1
[10:51:58.445] |  
[10:51:58.445] |  Number of remaining objects: 1
[10:51:58.445] |  checking value #1 ...
[10:51:58.445] |  :  'obj' is SequentialFuture
[10:51:58.446] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:58.446] |  :  .  state: ‘finished’
[10:51:58.446] |  :  .  run: TRUE
[10:51:58.446] |  :  .  result: ‘FutureResult’
[10:51:58.446] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:58.446] |  :  SequentialFuture #1
[10:51:58.446] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:58.446] |  :  .  nx: 1
[10:51:58.446] |  :  .  relay: TRUE
[10:51:58.446] |  :  .  stdout: TRUE
[10:51:58.446] |  :  .  signal: TRUE
[10:51:58.447] |  :  .  resignal: FALSE
[10:51:58.447] |  :  .  force: TRUE
[10:51:58.447] |  :  .  relayed: [n=1] FALSE
[10:51:58.447] |  :  .  queued futures: [n=1] FALSE
[10:51:58.447] |  :  .  until=1
[10:51:58.447] |  :  .  relaying element #1
[10:51:58.447] |  :  .  relayed: [n=1] TRUE
[10:51:58.447] |  :  .  queued futures: [n=1] TRUE
[10:51:58.447] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:58.447] |  :  value(<SequentialFuture>, ...) ...
[10:51:58.448] |  :  .  value: <list>
[10:51:58.448] |  :  value(<SequentialFuture>, ...) ... done
[10:51:58.448] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:58.448] |  :  .  nx: 1
[10:51:58.448] |  :  .  relay: TRUE
[10:51:58.448] |  :  .  stdout: TRUE
[10:51:58.448] |  :  .  signal: TRUE
[10:51:58.448] |  :  .  resignal: FALSE
[10:51:58.448] |  :  .  force: TRUE
[10:51:58.448] |  :  .  relayed: [n=1] TRUE
[10:51:58.448] |  :  .  queued futures: [n=1] TRUE
[10:51:58.449] |  :  .  until=1
[10:51:58.449] |  :  .  relayed: [n=1] TRUE
[10:51:58.449] |  :  .  queued futures: [n=1] TRUE
[10:51:58.449] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:58.449] |  :  length: 0 (resolved future 1)
[10:51:58.449] |  checking value #1 ... done
[10:51:58.449] |  Relaying remaining futures ...
[10:51:58.449] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:58.449] |  :  .  nx: 1
[10:51:58.449] |  :  .  relay: TRUE
[10:51:58.450] |  :  .  stdout: TRUE
[10:51:58.450] |  :  .  signal: TRUE
[10:51:58.450] |  :  .  resignal: FALSE
[10:51:58.450] |  :  .  force: TRUE
[10:51:58.450] |  :  .  relayed: [n=1] TRUE
[10:51:58.450] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:58.450] |  :  .  relayed: [n=1] TRUE
[10:51:58.450] |  :  .  queued futures: [n=1] TRUE
[10:51:58.450] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:58.450] |  Relaying remaining futures ... done
[10:51:58.450] value() on list ... done
[10:51:58.451]  - Number of value chunks collected: 1
[10:51:58.451] Resolving 1 futures (chunks) ... DONE
[10:51:58.451] Reducing values from 1 chunks ...
[10:51:58.451]  - Number of values collected after concatenation: 2
[10:51:58.451]  - Number of values expected: 2
[10:51:58.451] Reducing values from 1 chunks ... DONE
[10:51:58.451] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = FALSE) ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ...
[10:51:58.451] future_lapply() ...
[10:51:58.452] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:58.452] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:58.452] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:58.453] Number of chunks: 1
[10:51:58.453] getGlobalsAndPackagesXApply() ...
[10:51:58.453]  - future.globals: TRUE
[10:51:58.453] getGlobalsAndPackages() ...
[10:51:58.453] |  Searching for globals ...
[10:51:58.454] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:51:58.455] |  Searching for globals ... DONE
[10:51:58.455] |  Resolving globals: FALSE
[10:51:58.455] |  Search for packages associated with the globals ...
[10:51:58.455] |  :  Packages associated with globals: [1] ‘base’
[10:51:58.455] |  :  Packages: [1] ‘base’
[10:51:58.455] |  Search for packages associated with the globals ... DONE
[10:51:58.456] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:51:58.456] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:51:58.456] |  Packages after dropping 'base': [0] 
[10:51:58.456] |  globals: [1] ‘FUN’
[10:51:58.456] |  packages: [0] 
[10:51:58.456] getGlobalsAndPackages() ... done
[10:51:58.456]  - globals found/used: [n=1] ‘FUN’
[10:51:58.456]  - needed namespaces: [n=0] 
[10:51:58.457] Finding globals ... DONE
[10:51:58.457]  - use_args: TRUE
[10:51:58.457]  - Getting '...' globals ...
[10:51:58.457] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:58.457] |  recursive: 0
[10:51:58.457] |  length: 1
[10:51:58.457] |  elements: ‘...’
[10:51:58.457] |  'obj' is DotDotDotList
[10:51:58.458] |  resolve(obj, ...) ...
[10:51:58.459] |  resolve(obj, ...) ... done
[10:51:58.459] |  length: 0 (resolved future 1)
[10:51:58.459] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:58.459]    - '...' content: [n=0] 
[10:51:58.460] List of 1
[10:51:58.460]  $ ...: list()
[10:51:58.460]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:58.460]  - attr(*, "where")=List of 1
[10:51:58.460]   ..$ ...:<environment: 0x562581fa0058> 
[10:51:58.460]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:58.460]  - attr(*, "resolved")= logi TRUE
[10:51:58.460]  - attr(*, "total_size")= num NA
[10:51:58.462]  - Getting '...' globals ... DONE
[10:51:58.462] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:58.463] List of 2
[10:51:58.463]  $ ...future.FUN:function (x)  
[10:51:58.463]  $ ...          : list()
[10:51:58.463]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:58.463]  - attr(*, "where")=List of 2
[10:51:58.463]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:58.463]   ..$ ...          :<environment: 0x562581fa0058> 
[10:51:58.463]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:58.463]  - attr(*, "resolved")= logi FALSE
[10:51:58.463]  - attr(*, "total_size")= num 5632
[10:51:58.465] Packages to be attached in all futures: [n=0] 
[10:51:58.466] getGlobalsAndPackagesXApply() ... DONE
[10:51:58.466] Number of futures (= number of chunks): 1
[10:51:58.466] Launching 1 futures (chunks) ...
[10:51:58.466] Chunk #1 of 1 ...
[10:51:58.466]  - Finding globals in 'X' for chunk #1 ...
[10:51:58.466] getGlobalsAndPackages() ...
[10:51:58.466] |  Searching for globals ...
[10:51:58.467] |  :  globals found: [0] 
[10:51:58.467] |  Searching for globals ... DONE
[10:51:58.467] |  globals: [0] <none>
[10:51:58.467] |  packages: [0] <none>
[10:51:58.467] getGlobalsAndPackages() ... done
[10:51:58.467]    + additional globals found: [n=0] 
[10:51:58.467]    + additional namespaces needed: [n=0] 
[10:51:58.467]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:58.467]  - seeds: <none>
[10:51:58.467]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:58.467] getGlobalsAndPackages() ...
[10:51:58.468] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:58.468] |  Resolving globals: FALSE
[10:51:58.468] |  Tweak future expression to call with '...' arguments ...
[10:51:58.468] |  :  {
[10:51:58.468] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:58.468] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:58.468] |  :      "# as a global variable                                         "
[10:51:58.468] |  :      do.call(function(...) {
[10:51:58.468] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:58.468] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:58.468] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:58.468] |  :          "# anonymous function.                                          "
[10:51:58.468] |  :          "#                                                              "
[10:51:58.468] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:58.468] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:58.468] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:58.468] |  :          "# global environment, which is where globals are written.      "
[10:51:58.468] |  :          penv <- env <- environment(...future.FUN)
[10:51:58.468] |  :          repeat {
[10:51:58.468] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:58.468] |  :                  emptyenv())) 
[10:51:58.468] |  :                  break
[10:51:58.468] |  :              penv <- env
[10:51:58.468] |  :              env <- parent.env(env)
[10:51:58.468] |  :          }
[10:51:58.468] |  :          if (identical(penv, globalenv())) {
[10:51:58.468] |  :              environment(...future.FUN) <- environment()
[10:51:58.468] |  :          }
[10:51:58.468] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:58.468] |  :              !isNamespace(penv)) {
[10:51:58.468] |  :              parent.env(penv) <- environment()
[10:51:58.468] |  :          }
[10:51:58.468] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:58.468] |  :          {
[10:51:58.468] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:58.468] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:58.468] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:58.468] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:58.468] |  :              }
[10:51:58.468] |  :              {
[10:51:58.468] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:58.468] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:58.468] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:58.468] |  :                  })
[10:51:58.468] |  :              }
[10:51:58.468] |  :          }
[10:51:58.468] |  :      }, args = future.call.arguments)
[10:51:58.468] |  :  }
[10:51:58.468] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:58.468] |  Search for packages associated with the globals ...
[10:51:58.469] |  :  Packages associated with globals: [0] 
[10:51:58.469] |  :  Packages: [0] 
[10:51:58.469] |  Search for packages associated with the globals ... DONE
[10:51:58.469] |  Packages after dropping 'base': [0] 
[10:51:58.469] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:58.469] |  packages: [0] 
[10:51:58.469] getGlobalsAndPackages() ... done
[10:51:58.470] run() for Future (‘Future’) ...
[10:51:58.470] |  state: ‘created’
[10:51:58.470] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:58.470] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:58.470] |  Using SequentialFutureBackend ...
[10:51:58.470] |  :  Launching futures ...
[10:51:58.470] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:58.470] |  :  .  |  getFutureData() ...
[10:51:58.470] |  :  .  |  :  getFutureCore() ...
[10:51:58.471] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:58.471] |  :  .  |  :  getFutureCore() ... done
[10:51:58.471] |  :  .  |  :  getFutureCapture() ...
[10:51:58.471] |  :  .  |  :  getFutureCapture() ... done
[10:51:58.471] |  :  .  |  :  getFutureContext() ...
[10:51:58.471] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:58.471] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:58.471] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:58.471] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:58.471] |  :  .  |  :  getFutureContext() ... done
[10:51:58.472] |  :  .  |  getFutureData() ... done
[10:51:58.472] |  :  .  |  attachPackages() ...
[10:51:58.472] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:58.472] |  :  .  |  attachPackages() ... DONE
[10:51:58.472] |  :  .  |  attachPackages() ...
[10:51:58.472] |  :  .  |  :  packages: [n=0] 
[10:51:58.472] |  :  .  |  attachPackages() ... DONE
[10:51:58.473] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:58.473] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:58.473] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:58.473] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:58.473] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:58.473] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:58.474] |  :  .  |  :  .  |  New stack:
[10:51:58.474] |  :  .  |  :  .  |  List of 1
[10:51:58.474] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.474] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:58.474] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:58.474] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:58.474] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:58.474] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:58.474] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:58.476] |  :  .  |  :  .  |  Old stack:
[10:51:58.476] |  :  .  |  :  .  |  List of 1
[10:51:58.476] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:58.476] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.476] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:58.476] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:51:58.476] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.476] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.476] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.476] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:51:58.476] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:58.476] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:58.476] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.476] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.476] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:58.479] |  :  .  |  :  .  |  Not identical
[10:51:58.481] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:58.481] |  :  .  |  :  .  |  :  List of 2
[10:51:58.481] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:58.481] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:58.481] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:58.481] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.481] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:58.481] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:58.481] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.481] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.486] |  :  .  |  :  .  |  :  Formals differ
[10:51:58.486] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:58.486] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:58.486] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:58.486] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:58.486] |  :  .  |  :  .  List of future strategies:
[10:51:58.486] |  :  .  |  :  .  1. sequential:
[10:51:58.486] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:58.486] |  :  .  |  :  .     - tweaked: FALSE
[10:51:58.486] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:58.487] |  :  .  |  :  .  List of 1
[10:51:58.487] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.487] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:58.487] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:58.487] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:58.487] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:58.487] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:58.487] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:58.489] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:58.489] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:58.489] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:58.489] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:58.489] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:58.489] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:58.490] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:58.490] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:58.490] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:58.490] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:58.490] |  :  .  |  assign_globals() ...
[10:51:58.490] |  :  .  |  List of 5
[10:51:58.490] |  :  .  |   $ ...future.FUN            :function (x)  
[10:51:58.490] |  :  .  |   $ future.call.arguments    : list()
[10:51:58.490] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:58.490] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:58.490] |  :  .  |    ..$ : int 1
[10:51:58.490] |  :  .  |    ..$ : int 0
[10:51:58.490] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:58.490] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:58.490] |  :  .  |   - attr(*, "where")=List of 5
[10:51:58.490] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:58.490] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:58.490] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:58.490] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:58.490] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:58.490] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:58.490] |  :  .  |   - attr(*, "total_size")= num 5632
[10:51:58.490] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:58.490] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:58.495] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:58.495] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:58.495] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:58.495] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:58.495] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:58.495] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:58.495] |  :  .  |  assign_globals() ... done
[10:51:58.998] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:58.998] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:58.998] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:58.999] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:58.999] |  :  .  |  :  .  |  :  New stack:
[10:51:58.999] |  :  .  |  :  .  |  :  List of 1
[10:51:58.999] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:58.999] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:58.999] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:58.999] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:51:58.999] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.999] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.999] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.999] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:51:58.999] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:58.999] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:58.999] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:58.999] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:58.999] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.005] |  :  .  |  :  .  |  :  Old stack:
[10:51:59.005] |  :  .  |  :  .  |  :  List of 1
[10:51:59.005] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.005] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:59.005] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:59.005] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.005] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.005] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.005] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.007] |  :  .  |  :  .  |  :  Not identical
[10:51:59.007] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:51:59.008] |  :  .  |  :  .  |  :  .  List of 2
[10:51:59.008] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:59.008] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.008] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:59.008] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.008] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.008] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:59.008] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.008] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.013] |  :  .  |  :  .  |  :  .  Formals differ
[10:51:59.013] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:51:59.013] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:51:59.013] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:59.013] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:51:59.013] |  :  .  |  :  .  |  List of future strategies:
[10:51:59.013] |  :  .  |  :  .  |  1. multisession:
[10:51:59.013] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:59.013] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:59.013] |  :  .  |  :  .  |     - call: plan(strategy)
[10:51:59.013] |  :  .  |  :  .  |  List of 1
[10:51:59.013] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:59.013] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.013] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:59.013] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:51:59.013] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.013] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.013] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.013] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:51:59.013] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:59.013] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:59.013] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.013] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.013] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.017] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:59.017] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:59.017] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.017] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:59.017] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.018] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:51:59.018] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:59.018] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:59.018] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:59.018] |  :  .  |  SequentialFuture started (and completed)
[10:51:59.018] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:59.018] |  :  Launching futures ... done
[10:51:59.018] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:59.019] |  Using SequentialFutureBackend ... done
[10:51:59.019] run() for Future (‘SequentialFuture’) ... done
[10:51:59.019] Created future:
[10:51:59.019] SequentialFuture:
[10:51:59.019] Label: ‘future_lapply-1’
[10:51:59.019] Expression:
[10:51:59.019] {
[10:51:59.019]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:59.019]     "# expression in do.call(), because function called uses '...'  "
[10:51:59.019]     "# as a global variable                                         "
[10:51:59.019]     do.call(function(...) {
[10:51:59.019]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:59.019]         "# without having an '...' argument. This means '...' is treated"
[10:51:59.019]         "# as a global variable. This may happen when FUN() is an       "
[10:51:59.019]         "# anonymous function.                                          "
[10:51:59.019]         "#                                                              "
[10:51:59.019]         "# If an anonymous function, we will make sure to restore the   "
[10:51:59.019]         "# function environment of FUN() to the calling environment.    "
[10:51:59.019]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:59.019]         "# global environment, which is where globals are written.      "
[10:51:59.019]         penv <- env <- environment(...future.FUN)
[10:51:59.019]         repeat {
[10:51:59.019]             if (identical(env, globalenv()) || identical(env, 
[10:51:59.019]                 emptyenv())) 
[10:51:59.019]                 break
[10:51:59.019]             penv <- env
[10:51:59.019]             env <- parent.env(env)
[10:51:59.019]         }
[10:51:59.019]         if (identical(penv, globalenv())) {
[10:51:59.019]             environment(...future.FUN) <- environment()
[10:51:59.019]         }
[10:51:59.019]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:59.019]             !isNamespace(penv)) {
[10:51:59.019]             parent.env(penv) <- environment()
[10:51:59.019]         }
[10:51:59.019]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:59.019]         {
[10:51:59.019]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:59.019]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:59.019]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:59.019]                 on.exit(options(oopts), add = TRUE)
[10:51:59.019]             }
[10:51:59.019]             {
[10:51:59.019]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:59.019]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:59.019]                   ...future.FUN(...future.X_jj, ...)
[10:51:59.019]                 })
[10:51:59.019]             }
[10:51:59.019]         }
[10:51:59.019]     }, args = future.call.arguments)
[10:51:59.019] }
[10:51:59.019] Lazy evaluation: FALSE
[10:51:59.019] Asynchronous evaluation: TRUE
[10:51:59.019] Local evaluation: TRUE
[10:51:59.019] Environment: R_GlobalEnv
[10:51:59.019] Capture standard output: TRUE
[10:51:59.019] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:59.019] Immediate condition classes: ‘immediateCondition’
[10:51:59.019] Globals: 5 objects totaling 1.02 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:59.019] Packages: <none>
[10:51:59.019] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:59.019] Resolved: TRUE
[10:51:59.019] Value: 55 bytes of class ‘list’
[10:51:59.019] Early signaling: FALSE
[10:51:59.019] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:59.019] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:59.020] Chunk #1 of 1 ... DONE
[10:51:59.020] Launching 1 futures (chunks) ... DONE
[10:51:59.020] Resolving 1 futures (chunks) ...
[10:51:59.020] value() on list ...
[10:51:59.020] |  recursive: 0
[10:51:59.020] |  length: 1
[10:51:59.020] |  
[10:51:59.021] |  Number of remaining objects: 1
[10:51:59.021] |  checking value #1 ...
[10:51:59.021] |  :  'obj' is SequentialFuture
[10:51:59.021] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:59.021] |  :  .  state: ‘finished’
[10:51:59.021] |  :  .  run: TRUE
[10:51:59.021] |  :  .  result: ‘FutureResult’
[10:51:59.021] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:59.021] |  :  SequentialFuture #1
[10:51:59.021] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:59.021] |  :  .  nx: 1
[10:51:59.022] |  :  .  relay: TRUE
[10:51:59.022] |  :  .  stdout: TRUE
[10:51:59.022] |  :  .  signal: TRUE
[10:51:59.022] |  :  .  resignal: FALSE
[10:51:59.022] |  :  .  force: TRUE
[10:51:59.022] |  :  .  relayed: [n=1] FALSE
[10:51:59.022] |  :  .  queued futures: [n=1] FALSE
[10:51:59.023] |  :  .  until=1
[10:51:59.023] |  :  .  relaying element #1
[10:51:59.024] |  :  .  relayed: [n=1] TRUE
[10:51:59.024] |  :  .  queued futures: [n=1] TRUE
[10:51:59.024] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:59.024] |  :  value(<SequentialFuture>, ...) ...
[10:51:59.024] |  :  .  value: <list>
[10:51:59.024] |  :  value(<SequentialFuture>, ...) ... done
[10:51:59.024] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:59.024] |  :  .  nx: 1
[10:51:59.025] |  :  .  relay: TRUE
[10:51:59.025] |  :  .  stdout: TRUE
[10:51:59.025] |  :  .  signal: TRUE
[10:51:59.025] |  :  .  resignal: FALSE
[10:51:59.025] |  :  .  force: TRUE
[10:51:59.025] |  :  .  relayed: [n=1] TRUE
[10:51:59.025] |  :  .  queued futures: [n=1] TRUE
[10:51:59.025] |  :  .  until=1
[10:51:59.025] |  :  .  relayed: [n=1] TRUE
[10:51:59.025] |  :  .  queued futures: [n=1] TRUE
[10:51:59.025] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:59.026] |  :  length: 0 (resolved future 1)
[10:51:59.026] |  checking value #1 ... done
[10:51:59.026] |  Relaying remaining futures ...
[10:51:59.026] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:59.026] |  :  .  nx: 1
[10:51:59.026] |  :  .  relay: TRUE
[10:51:59.026] |  :  .  stdout: TRUE
[10:51:59.026] |  :  .  signal: TRUE
[10:51:59.026] |  :  .  resignal: FALSE
[10:51:59.026] |  :  .  force: TRUE
[10:51:59.026] |  :  .  relayed: [n=1] TRUE
[10:51:59.027] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:59.027] |  :  .  relayed: [n=1] TRUE
[10:51:59.027] |  :  .  queued futures: [n=1] TRUE
[10:51:59.027] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:59.027] |  Relaying remaining futures ... done
[10:51:59.027] value() on list ... done
[10:51:59.027]  - Number of value chunks collected: 1
[10:51:59.027] Resolving 1 futures (chunks) ... DONE
[10:51:59.027] Reducing values from 1 chunks ...
[10:51:59.027]  - Number of values collected after concatenation: 2
[10:51:59.027]  - Number of values expected: 2
[10:51:59.028] Reducing values from 1 chunks ... DONE
[10:51:59.028] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ... DONE
* future_lapply(x, ..., future.stdout = NA) ...
[10:51:59.028] future_lapply() ...
[10:51:59.029] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.029] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:59.029] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.029] Number of chunks: 1
[10:51:59.029] getGlobalsAndPackagesXApply() ...
[10:51:59.029]  - future.globals: TRUE
[10:51:59.029] getGlobalsAndPackages() ...
[10:51:59.030] |  Searching for globals ...
[10:51:59.031] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:51:59.031] |  Searching for globals ... DONE
[10:51:59.031] |  Resolving globals: FALSE
[10:51:59.031] |  Search for packages associated with the globals ...
[10:51:59.032] |  :  Packages associated with globals: [1] ‘base’
[10:51:59.032] |  :  Packages: [1] ‘base’
[10:51:59.032] |  Search for packages associated with the globals ... DONE
[10:51:59.032] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:51:59.032] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:51:59.033] |  Packages after dropping 'base': [0] 
[10:51:59.033] |  globals: [1] ‘FUN’
[10:51:59.033] |  packages: [0] 
[10:51:59.033] getGlobalsAndPackages() ... done
[10:51:59.033]  - globals found/used: [n=1] ‘FUN’
[10:51:59.033]  - needed namespaces: [n=0] 
[10:51:59.033] Finding globals ... DONE
[10:51:59.033]  - use_args: TRUE
[10:51:59.033]  - Getting '...' globals ...
[10:51:59.034] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:59.034] |  recursive: 0
[10:51:59.034] |  length: 1
[10:51:59.034] |  elements: ‘...’
[10:51:59.034] |  'obj' is DotDotDotList
[10:51:59.034] |  resolve(obj, ...) ...
[10:51:59.034] |  resolve(obj, ...) ... done
[10:51:59.034] |  length: 0 (resolved future 1)
[10:51:59.034] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:59.035]    - '...' content: [n=0] 
[10:51:59.035] List of 1
[10:51:59.035]  $ ...: list()
[10:51:59.035]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:59.035]  - attr(*, "where")=List of 1
[10:51:59.035]   ..$ ...:<environment: 0x562580f764d8> 
[10:51:59.035]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:59.035]  - attr(*, "resolved")= logi TRUE
[10:51:59.035]  - attr(*, "total_size")= num NA
[10:51:59.037]  - Getting '...' globals ... DONE
[10:51:59.037] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:59.037] List of 2
[10:51:59.037]  $ ...future.FUN:function (x)  
[10:51:59.037]  $ ...          : list()
[10:51:59.037]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:59.037]  - attr(*, "where")=List of 2
[10:51:59.037]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:59.037]   ..$ ...          :<environment: 0x562580f764d8> 
[10:51:59.037]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:59.037]  - attr(*, "resolved")= logi FALSE
[10:51:59.037]  - attr(*, "total_size")= num 5632
[10:51:59.040] Packages to be attached in all futures: [n=0] 
[10:51:59.040] getGlobalsAndPackagesXApply() ... DONE
[10:51:59.040] Number of futures (= number of chunks): 1
[10:51:59.040] Launching 1 futures (chunks) ...
[10:51:59.040] Chunk #1 of 1 ...
[10:51:59.041]  - Finding globals in 'X' for chunk #1 ...
[10:51:59.041] getGlobalsAndPackages() ...
[10:51:59.041] |  Searching for globals ...
[10:51:59.041] |  :  globals found: [0] 
[10:51:59.041] |  Searching for globals ... DONE
[10:51:59.041] |  globals: [0] <none>
[10:51:59.041] |  packages: [0] <none>
[10:51:59.041] getGlobalsAndPackages() ... done
[10:51:59.041]    + additional globals found: [n=0] 
[10:51:59.042]    + additional namespaces needed: [n=0] 
[10:51:59.042]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:59.042]  - seeds: <none>
[10:51:59.042]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:59.042] getGlobalsAndPackages() ...
[10:51:59.042] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:59.042] |  Resolving globals: FALSE
[10:51:59.042] |  Tweak future expression to call with '...' arguments ...
[10:51:59.042] |  :  {
[10:51:59.042] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:59.042] |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:59.042] |  :      "# as a global variable                                         "
[10:51:59.042] |  :      do.call(function(...) {
[10:51:59.042] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:59.042] |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:59.042] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:59.042] |  :          "# anonymous function.                                          "
[10:51:59.042] |  :          "#                                                              "
[10:51:59.042] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:59.042] |  :          "# function environment of FUN() to the calling environment.    "
[10:51:59.042] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:59.042] |  :          "# global environment, which is where globals are written.      "
[10:51:59.042] |  :          penv <- env <- environment(...future.FUN)
[10:51:59.042] |  :          repeat {
[10:51:59.042] |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:59.042] |  :                  emptyenv())) 
[10:51:59.042] |  :                  break
[10:51:59.042] |  :              penv <- env
[10:51:59.042] |  :              env <- parent.env(env)
[10:51:59.042] |  :          }
[10:51:59.042] |  :          if (identical(penv, globalenv())) {
[10:51:59.042] |  :              environment(...future.FUN) <- environment()
[10:51:59.042] |  :          }
[10:51:59.042] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:59.042] |  :              !isNamespace(penv)) {
[10:51:59.042] |  :              parent.env(penv) <- environment()
[10:51:59.042] |  :          }
[10:51:59.042] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:59.042] |  :          {
[10:51:59.042] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:59.042] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:59.042] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:59.042] |  :                  on.exit(options(oopts), add = TRUE)
[10:51:59.042] |  :              }
[10:51:59.042] |  :              {
[10:51:59.042] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:59.042] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:59.042] |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:59.042] |  :                  })
[10:51:59.042] |  :              }
[10:51:59.042] |  :          }
[10:51:59.042] |  :      }, args = future.call.arguments)
[10:51:59.042] |  :  }
[10:51:59.044] |  Tweak future expression to call with '...' arguments ... DONE
[10:51:59.044] |  Search for packages associated with the globals ...
[10:51:59.044] |  :  Packages associated with globals: [0] 
[10:51:59.044] |  :  Packages: [0] 
[10:51:59.045] |  Search for packages associated with the globals ... DONE
[10:51:59.045] |  Packages after dropping 'base': [0] 
[10:51:59.045] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:59.045] |  packages: [0] 
[10:51:59.045] getGlobalsAndPackages() ... done
[10:51:59.045] run() for Future (‘Future’) ...
[10:51:59.045] |  state: ‘created’
[10:51:59.046] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.046] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.046] |  Using SequentialFutureBackend ...
[10:51:59.046] |  :  Launching futures ...
[10:51:59.046] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:59.046] |  :  .  |  getFutureData() ...
[10:51:59.046] |  :  .  |  :  getFutureCore() ...
[10:51:59.046] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:59.046] |  :  .  |  :  getFutureCore() ... done
[10:51:59.047] |  :  .  |  :  getFutureCapture() ...
[10:51:59.047] |  :  .  |  :  getFutureCapture() ... done
[10:51:59.047] |  :  .  |  :  getFutureContext() ...
[10:51:59.047] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.047] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:59.047] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.047] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:59.047] |  :  .  |  :  getFutureContext() ... done
[10:51:59.047] |  :  .  |  getFutureData() ... done
[10:51:59.048] |  :  .  |  attachPackages() ...
[10:51:59.048] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:59.048] |  :  .  |  attachPackages() ... DONE
[10:51:59.048] |  :  .  |  attachPackages() ...
[10:51:59.048] |  :  .  |  :  packages: [n=0] 
[10:51:59.048] |  :  .  |  attachPackages() ... DONE
[10:51:59.048] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.048] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:59.049] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.049] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:59.049] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:59.049] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:59.049] |  :  .  |  :  .  |  New stack:
[10:51:59.049] |  :  .  |  :  .  |  List of 1
[10:51:59.049] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.049] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:59.049] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:59.049] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.049] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.049] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.049] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.052] |  :  .  |  :  .  |  Old stack:
[10:51:59.052] |  :  .  |  :  .  |  List of 1
[10:51:59.052] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:59.052] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.052] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:59.052] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:51:59.052] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.052] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.052] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.052] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:51:59.052] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:59.052] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:59.052] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.052] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.052] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.055] |  :  .  |  :  .  |  Not identical
[10:51:59.055] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:59.055] |  :  .  |  :  .  |  :  List of 2
[10:51:59.055] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:59.055] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.055] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:59.055] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.055] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:59.055] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:59.055] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.055] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.060] |  :  .  |  :  .  |  :  Formals differ
[10:51:59.060] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:59.060] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:59.060] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:59.061] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:59.061] |  :  .  |  :  .  List of future strategies:
[10:51:59.061] |  :  .  |  :  .  1. sequential:
[10:51:59.061] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:59.061] |  :  .  |  :  .     - tweaked: FALSE
[10:51:59.061] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.061] |  :  .  |  :  .  List of 1
[10:51:59.061] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.061] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:59.061] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:59.061] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.061] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.061] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.061] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.065] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:59.065] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:59.065] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.065] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:59.065] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.065] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:59.065] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:59.066] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:59.066] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:59.066] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:59.066] |  :  .  |  assign_globals() ...
[10:51:59.066] |  :  .  |  List of 5
[10:51:59.066] |  :  .  |   $ ...future.FUN            :function (x)  
[10:51:59.066] |  :  .  |   $ future.call.arguments    : list()
[10:51:59.066] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:59.066] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:59.066] |  :  .  |    ..$ : int 1
[10:51:59.066] |  :  .  |    ..$ : int 0
[10:51:59.066] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:59.066] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:59.066] |  :  .  |   - attr(*, "where")=List of 5
[10:51:59.066] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:59.066] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:51:59.066] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:59.066] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:59.066] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:59.066] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:59.066] |  :  .  |   - attr(*, "total_size")= num 5632
[10:51:59.066] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:59.066] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:59.071] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:59.071] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:59.072] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:51:59.072] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:59.072] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:59.072] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:59.072] |  :  .  |  assign_globals() ... done
[10:51:59.575] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:59.575] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:59.575] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:59.575] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:51:59.575] |  :  .  |  :  .  |  :  New stack:
[10:51:59.575] |  :  .  |  :  .  |  :  List of 1
[10:51:59.575] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:59.575] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.575] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:59.575] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:51:59.575] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.575] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.575] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.575] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:51:59.575] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:59.575] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:59.575] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.575] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.575] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.579] |  :  .  |  :  .  |  :  Old stack:
[10:51:59.579] |  :  .  |  :  .  |  :  List of 1
[10:51:59.579] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.579] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:59.579] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:59.579] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.579] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.579] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.579] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.581] |  :  .  |  :  .  |  :  Not identical
[10:51:59.581] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:51:59.582] |  :  .  |  :  .  |  :  .  List of 2
[10:51:59.582] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:59.582] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.582] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:59.582] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.582] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.582] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:59.582] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.589] |  :  .  |  :  .  |  :  .  Formals differ
[10:51:59.589] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:51:59.589] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:51:59.589] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:51:59.590] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:51:59.590] |  :  .  |  :  .  |  List of future strategies:
[10:51:59.590] |  :  .  |  :  .  |  1. multisession:
[10:51:59.590] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:51:59.590] |  :  .  |  :  .  |     - tweaked: FALSE
[10:51:59.590] |  :  .  |  :  .  |     - call: plan(strategy)
[10:51:59.590] |  :  .  |  :  .  |  List of 1
[10:51:59.590] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:59.590] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.590] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:59.590] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:51:59.590] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.590] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.590] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.590] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:51:59.590] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:59.590] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:59.590] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.590] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.590] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.594] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:59.594] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:59.594] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.594] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:59.594] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.594] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:51:59.594] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:59.594] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:59.595] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:59.595] |  :  .  |  SequentialFuture started (and completed)
[10:51:59.595] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:51:59.595] |  :  Launching futures ... done
[10:51:59.595] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:59.595] |  Using SequentialFutureBackend ... done
[10:51:59.595] run() for Future (‘SequentialFuture’) ... done
[10:51:59.595] Created future:
[10:51:59.596] SequentialFuture:
[10:51:59.596] Label: ‘future_lapply-1’
[10:51:59.596] Expression:
[10:51:59.596] {
[10:51:59.596]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:59.596]     "# expression in do.call(), because function called uses '...'  "
[10:51:59.596]     "# as a global variable                                         "
[10:51:59.596]     do.call(function(...) {
[10:51:59.596]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:59.596]         "# without having an '...' argument. This means '...' is treated"
[10:51:59.596]         "# as a global variable. This may happen when FUN() is an       "
[10:51:59.596]         "# anonymous function.                                          "
[10:51:59.596]         "#                                                              "
[10:51:59.596]         "# If an anonymous function, we will make sure to restore the   "
[10:51:59.596]         "# function environment of FUN() to the calling environment.    "
[10:51:59.596]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:59.596]         "# global environment, which is where globals are written.      "
[10:51:59.596]         penv <- env <- environment(...future.FUN)
[10:51:59.596]         repeat {
[10:51:59.596]             if (identical(env, globalenv()) || identical(env, 
[10:51:59.596]                 emptyenv())) 
[10:51:59.596]                 break
[10:51:59.596]             penv <- env
[10:51:59.596]             env <- parent.env(env)
[10:51:59.596]         }
[10:51:59.596]         if (identical(penv, globalenv())) {
[10:51:59.596]             environment(...future.FUN) <- environment()
[10:51:59.596]         }
[10:51:59.596]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:59.596]             !isNamespace(penv)) {
[10:51:59.596]             parent.env(penv) <- environment()
[10:51:59.596]         }
[10:51:59.596]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:59.596]         {
[10:51:59.596]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:59.596]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:59.596]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:59.596]                 on.exit(options(oopts), add = TRUE)
[10:51:59.596]             }
[10:51:59.596]             {
[10:51:59.596]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:59.596]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:59.596]                   ...future.FUN(...future.X_jj, ...)
[10:51:59.596]                 })
[10:51:59.596]             }
[10:51:59.596]         }
[10:51:59.596]     }, args = future.call.arguments)
[10:51:59.596] }
[10:51:59.596] Lazy evaluation: FALSE
[10:51:59.596] Asynchronous evaluation: TRUE
[10:51:59.596] Local evaluation: TRUE
[10:51:59.596] Environment: R_GlobalEnv
[10:51:59.596] Capture standard output: NA
[10:51:59.596] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:59.596] Immediate condition classes: ‘immediateCondition’
[10:51:59.596] Globals: 5 objects totaling 1.02 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:59.596] Packages: <none>
[10:51:59.596] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:51:59.596] Resolved: TRUE
[10:51:59.596] Value: 55 bytes of class ‘list’
[10:51:59.596] Early signaling: FALSE
[10:51:59.596] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:51:59.596] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:51:59.597] Chunk #1 of 1 ... DONE
[10:51:59.597] Launching 1 futures (chunks) ... DONE
[10:51:59.597] Resolving 1 futures (chunks) ...
[10:51:59.597] value() on list ...
[10:51:59.597] |  recursive: 0
[10:51:59.597] |  length: 1
[10:51:59.597] |  
[10:51:59.597] |  Number of remaining objects: 1
[10:51:59.597] |  checking value #1 ...
[10:51:59.597] |  :  'obj' is SequentialFuture
[10:51:59.598] |  :  resolved() for ‘SequentialFuture’ ...
[10:51:59.598] |  :  .  state: ‘finished’
[10:51:59.598] |  :  .  run: TRUE
[10:51:59.598] |  :  .  result: ‘FutureResult’
[10:51:59.598] |  :  resolved() for ‘SequentialFuture’ ... done
[10:51:59.598] |  :  SequentialFuture #1
[10:51:59.598] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:59.598] |  :  .  nx: 1
[10:51:59.598] |  :  .  relay: TRUE
[10:51:59.598] |  :  .  stdout: TRUE
[10:51:59.598] |  :  .  signal: TRUE
[10:51:59.599] |  :  .  resignal: FALSE
[10:51:59.599] |  :  .  force: TRUE
[10:51:59.599] |  :  .  relayed: [n=1] FALSE
[10:51:59.599] |  :  .  queued futures: [n=1] FALSE
[10:51:59.599] |  :  .  until=1
[10:51:59.599] |  :  .  relaying element #1
[10:51:59.599] |  :  .  relayed: [n=1] TRUE
[10:51:59.599] |  :  .  queued futures: [n=1] TRUE
[10:51:59.599] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:59.599] |  :  value(<SequentialFuture>, ...) ...
[10:51:59.600] |  :  .  value: <list>
[10:51:59.600] |  :  value(<SequentialFuture>, ...) ... done
[10:51:59.600] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:51:59.600] |  :  .  nx: 1
[10:51:59.600] |  :  .  relay: TRUE
[10:51:59.600] |  :  .  stdout: TRUE
[10:51:59.600] |  :  .  signal: TRUE
[10:51:59.600] |  :  .  resignal: FALSE
[10:51:59.600] |  :  .  force: TRUE
[10:51:59.600] |  :  .  relayed: [n=1] TRUE
[10:51:59.600] |  :  .  queued futures: [n=1] TRUE
[10:51:59.601] |  :  .  until=1
[10:51:59.601] |  :  .  relayed: [n=1] TRUE
[10:51:59.601] |  :  .  queued futures: [n=1] TRUE
[10:51:59.601] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:51:59.601] |  :  length: 0 (resolved future 1)
[10:51:59.601] |  checking value #1 ... done
[10:51:59.601] |  Relaying remaining futures ...
[10:51:59.601] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:59.601] |  :  .  nx: 1
[10:51:59.601] |  :  .  relay: TRUE
[10:51:59.601] |  :  .  stdout: TRUE
[10:51:59.602] |  :  .  signal: TRUE
[10:51:59.602] |  :  .  resignal: FALSE
[10:51:59.602] |  :  .  force: TRUE
[10:51:59.602] |  :  .  relayed: [n=1] TRUE
[10:51:59.602] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:51:59.602] |  :  .  relayed: [n=1] TRUE
[10:51:59.602] |  :  .  queued futures: [n=1] TRUE
[10:51:59.602] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:59.602] |  Relaying remaining futures ... done
[10:51:59.602] value() on list ... done
[10:51:59.602]  - Number of value chunks collected: 1
[10:51:59.603] Resolving 1 futures (chunks) ... DONE
[10:51:59.603] Reducing values from 1 chunks ...
[10:51:59.603]  - Number of values collected after concatenation: 2
[10:51:59.603]  - Number of values expected: 2
[10:51:59.603] Reducing values from 1 chunks ... DONE
[10:51:59.603] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = NA) ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ...
[10:51:59.603] future_mapply() ...
[10:51:59.603] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.604] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:59.604] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.604] Number of chunks: 1
[10:51:59.604] getGlobalsAndPackagesXApply() ...
[10:51:59.604]  - future.globals: TRUE
[10:51:59.604] getGlobalsAndPackages() ...
[10:51:59.604] |  Searching for globals ...
[10:51:59.606] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:51:59.607] |  Searching for globals ... DONE
[10:51:59.607] |  Resolving globals: FALSE
[10:51:59.608] |  Search for packages associated with the globals ...
[10:51:59.608] |  :  Packages associated with globals: [1] ‘base’
[10:51:59.608] |  :  Packages: [1] ‘base’
[10:51:59.608] |  Search for packages associated with the globals ... DONE
[10:51:59.608] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:51:59.609] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:51:59.609] |  Packages after dropping 'base': [0] 
[10:51:59.609] |  globals: [1] ‘FUN’
[10:51:59.609] |  packages: [0] 
[10:51:59.609] getGlobalsAndPackages() ... done
[10:51:59.609]  - globals found/used: [n=1] ‘FUN’
[10:51:59.609]  - needed namespaces: [n=0] 
[10:51:59.610] Finding globals ... DONE
[10:51:59.610] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:51:59.610] List of 2
[10:51:59.610]  $ ...future.FUN:function (x, y)  
[10:51:59.610]  $ MoreArgs     : NULL
[10:51:59.610]  - attr(*, "where")=List of 2
[10:51:59.610]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:59.610]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:51:59.610]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:59.610]  - attr(*, "resolved")= logi FALSE
[10:51:59.610]  - attr(*, "total_size")= num NA
[10:51:59.613] Packages to be attached in all futures: [n=0] 
[10:51:59.613] getGlobalsAndPackagesXApply() ... DONE
[10:51:59.613] Number of futures (= number of chunks): 1
[10:51:59.613] Launching 1 futures (chunks) ...
[10:51:59.613] Chunk #1 of 1 ...
[10:51:59.613]  - Finding globals in '...' for chunk #1 ...
[10:51:59.613] getGlobalsAndPackages() ...
[10:51:59.613] |  Searching for globals ...
[10:51:59.614] |  :  globals found: [0] 
[10:51:59.614] |  Searching for globals ... DONE
[10:51:59.614] |  globals: [0] <none>
[10:51:59.614] |  packages: [0] <none>
[10:51:59.614] getGlobalsAndPackages() ... done
[10:51:59.614]    + additional globals found: [n=0] 
[10:51:59.614]    + additional namespaces needed: [n=0] 
[10:51:59.614]  - Finding globals in '...' for chunk #1 ... DONE
[10:51:59.614]  - seeds: <none>
[10:51:59.615]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:59.615] getGlobalsAndPackages() ...
[10:51:59.615] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:59.615] |  Resolving globals: FALSE
[10:51:59.615] |  Search for packages associated with the globals ...
[10:51:59.615] |  :  Packages associated with globals: [0] 
[10:51:59.615] |  :  Packages: [0] 
[10:51:59.615] |  Search for packages associated with the globals ... DONE
[10:51:59.616] |  Packages after dropping 'base': [0] 
[10:51:59.616] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:59.616] |  packages: [0] 
[10:51:59.616] getGlobalsAndPackages() ... done
[10:51:59.616] run() for Future (‘Future’) ...
[10:51:59.616] |  state: ‘created’
[10:51:59.616] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.616] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.617] |  Using SequentialFutureBackend ...
[10:51:59.617] |  :  Launching futures ...
[10:51:59.617] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:51:59.617] |  :  .  |  getFutureData() ...
[10:51:59.617] |  :  .  |  :  getFutureCore() ...
[10:51:59.617] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:59.617] |  :  .  |  :  getFutureCore() ... done
[10:51:59.617] |  :  .  |  :  getFutureCapture() ...
[10:51:59.617] |  :  .  |  :  getFutureCapture() ... done
[10:51:59.617] |  :  .  |  :  getFutureContext() ...
[10:51:59.618] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.618] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:59.618] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.618] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:59.618] |  :  .  |  :  getFutureContext() ... done
[10:51:59.618] |  :  .  |  getFutureData() ... done
[10:51:59.618] |  :  .  |  attachPackages() ...
[10:51:59.618] |  :  .  |  :  packages: [n=1] ‘future’
[10:51:59.618] |  :  .  |  attachPackages() ... DONE
[10:51:59.619] |  :  .  |  attachPackages() ...
[10:51:59.619] |  :  .  |  :  packages: [n=0] 
[10:51:59.619] |  :  .  |  attachPackages() ... DONE
[10:51:59.619] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.619] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:59.619] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.620] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:51:59.620] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:51:59.620] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:51:59.620] |  :  .  |  :  .  |  New stack:
[10:51:59.620] |  :  .  |  :  .  |  List of 1
[10:51:59.620] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.620] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:59.620] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:59.620] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.620] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.620] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.620] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.622] |  :  .  |  :  .  |  Old stack:
[10:51:59.622] |  :  .  |  :  .  |  List of 1
[10:51:59.622] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:59.622] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.622] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:59.622] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:51:59.622] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.622] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.622] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.622] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:51:59.622] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:59.622] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:59.622] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.622] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.622] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.626] |  :  .  |  :  .  |  Not identical
[10:51:59.626] |  :  .  |  :  .  |  all.equal() for future ...
[10:51:59.626] |  :  .  |  :  .  |  :  List of 2
[10:51:59.626] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:59.626] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.626] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:59.626] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.626] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:51:59.626] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:51:59.626] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:59.626] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:59.632] |  :  .  |  :  .  |  :  Formals differ
[10:51:59.632] |  :  .  |  :  .  |  all.equal() for future ... done
[10:51:59.632] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:51:59.632] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:51:59.633] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:51:59.633] |  :  .  |  :  .  List of future strategies:
[10:51:59.633] |  :  .  |  :  .  1. sequential:
[10:51:59.633] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:59.633] |  :  .  |  :  .     - tweaked: FALSE
[10:51:59.633] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.633] |  :  .  |  :  .  List of 1
[10:51:59.633] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:59.633] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:59.633] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:59.633] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.633] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:59.633] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:51:59.633] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:59.635] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:51:59.635] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:51:59.636] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:59.636] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:59.636] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:59.636] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:51:59.636] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:59.636] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:51:59.636] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:51:59.636] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:51:59.637] |  :  .  |  assign_globals() ...
[10:51:59.637] |  :  .  |  List of 5
[10:51:59.637] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:51:59.637] |  :  .  |   $ MoreArgs                 : NULL
[10:51:59.637] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:51:59.637] |  :  .  |    ..$ :List of 2
[10:51:59.637] |  :  .  |    .. ..$ : int 1
[10:51:59.637] |  :  .  |    .. ..$ : int 0
[10:51:59.637] |  :  .  |    ..$ :List of 2
[10:51:59.637] |  :  .  |    .. ..$ : int 0
[10:51:59.637] |  :  .  |    .. ..$ : int 1
[10:51:59.637] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:51:59.637] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:51:59.637] |  :  .  |   - attr(*, "where")=List of 5
[10:51:59.637] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:51:59.637] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:51:59.637] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:51:59.637] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:51:59.637] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:51:59.637] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:51:59.637] |  :  .  |   - attr(*, "total_size")= num NA
[10:51:59.637] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:59.637] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:51:59.642] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:51:59.642] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:51:59.643] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:51:59.643] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:51:59.643] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:51:59.643] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:51:59.643] |  :  .  |  assign_globals() ... done
[10:52:00.146] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:00.146] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:00.146] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:00.146] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:00.146] |  :  .  |  :  .  |  :  New stack:
[10:52:00.147] |  :  .  |  :  .  |  :  List of 1
[10:52:00.147] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:00.147] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.147] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:00.147] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:52:00.147] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.147] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.147] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.147] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:52:00.147] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:00.147] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:00.147] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.147] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.147] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.153] |  :  .  |  :  .  |  :  Old stack:
[10:52:00.153] |  :  .  |  :  .  |  :  List of 1
[10:52:00.153] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.153] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:00.153] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:00.153] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.153] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.153] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.153] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.155] |  :  .  |  :  .  |  :  Not identical
[10:52:00.155] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:00.155] |  :  .  |  :  .  |  :  .  List of 2
[10:52:00.155] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:00.155] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.155] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:00.155] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.155] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.155] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:00.155] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.155] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.160] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:00.161] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:00.161] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:00.161] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:00.161] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:00.161] |  :  .  |  :  .  |  List of future strategies:
[10:52:00.161] |  :  .  |  :  .  |  1. multisession:
[10:52:00.161] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:00.161] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:00.161] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:00.161] |  :  .  |  :  .  |  List of 1
[10:52:00.161] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:00.161] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.161] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:00.161] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:52:00.161] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.161] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.161] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.161] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:52:00.161] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:00.161] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:00.161] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.161] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.161] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.165] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:00.165] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:00.165] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.165] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:00.165] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.165] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:52:00.166] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:00.166] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:00.166] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:00.166] |  :  .  |  SequentialFuture started (and completed)
[10:52:00.166] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:00.166] |  :  Launching futures ... done
[10:52:00.166] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:00.166] |  Using SequentialFutureBackend ... done
[10:52:00.166] run() for Future (‘SequentialFuture’) ... done
[10:52:00.167] Created future:
[10:52:00.167] SequentialFuture:
[10:52:00.167] Label: ‘future_mapply-1’
[10:52:00.167] Expression:
[10:52:00.167] {
[10:52:00.167]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:00.167]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:00.167]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:00.167]         on.exit(options(oopts), add = TRUE)
[10:52:00.167]     }
[10:52:00.167]     {
[10:52:00.167]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:00.167]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:00.167]         do.call(mapply, args = args)
[10:52:00.167]     }
[10:52:00.167] }
[10:52:00.167] Lazy evaluation: FALSE
[10:52:00.167] Asynchronous evaluation: TRUE
[10:52:00.167] Local evaluation: TRUE
[10:52:00.167] Environment: R_GlobalEnv
[10:52:00.167] Capture standard output: FALSE
[10:52:00.167] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:00.167] Immediate condition classes: ‘immediateCondition’
[10:52:00.167] Globals: 5 objects totaling 1.21 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 95 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:00.167] Packages: <none>
[10:52:00.167] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:00.167] Resolved: TRUE
[10:52:00.167] Value: 184 bytes of class ‘list’
[10:52:00.167] Early signaling: FALSE
[10:52:00.167] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:00.167] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:00.168] Chunk #1 of 1 ... DONE
[10:52:00.168] Launching 1 futures (chunks) ... DONE
[10:52:00.168] Resolving 1 futures (chunks) ...
[10:52:00.168] value() on list ...
[10:52:00.168] |  recursive: 0
[10:52:00.170] |  length: 1
[10:52:00.170] |  
[10:52:00.170] |  Number of remaining objects: 1
[10:52:00.170] |  checking value #1 ...
[10:52:00.170] |  :  'obj' is SequentialFuture
[10:52:00.170] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:00.170] |  :  .  state: ‘finished’
[10:52:00.170] |  :  .  run: TRUE
[10:52:00.171] |  :  .  result: ‘FutureResult’
[10:52:00.171] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:00.171] |  :  SequentialFuture #1
[10:52:00.171] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:52:00.171] |  :  .  nx: 1
[10:52:00.171] |  :  .  relay: TRUE
[10:52:00.171] |  :  .  stdout: TRUE
[10:52:00.171] |  :  .  signal: TRUE
[10:52:00.171] |  :  .  resignal: FALSE
[10:52:00.171] |  :  .  force: TRUE
[10:52:00.172] |  :  .  relayed: [n=1] FALSE
[10:52:00.172] |  :  .  queued futures: [n=1] FALSE
[10:52:00.172] |  :  .  until=1
[10:52:00.172] |  :  .  relaying element #1
[10:52:00.172] |  :  .  relayed: [n=1] TRUE
[10:52:00.172] |  :  .  queued futures: [n=1] TRUE
[10:52:00.172] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:52:00.172] |  :  value(<SequentialFuture>, ...) ...
[10:52:00.173] |  :  .  value: <list>
[10:52:00.173] |  :  value(<SequentialFuture>, ...) ... done
[10:52:00.173] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:52:00.173] |  :  .  nx: 1
[10:52:00.173] |  :  .  relay: TRUE
[10:52:00.173] |  :  .  stdout: TRUE
[10:52:00.173] |  :  .  signal: TRUE
[10:52:00.173] |  :  .  resignal: FALSE
[10:52:00.173] |  :  .  force: TRUE
[10:52:00.174] |  :  .  relayed: [n=1] TRUE
[10:52:00.174] |  :  .  queued futures: [n=1] TRUE
[10:52:00.174] |  :  .  until=1
[10:52:00.174] |  :  .  relayed: [n=1] TRUE
[10:52:00.174] |  :  .  queued futures: [n=1] TRUE
[10:52:00.174] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:52:00.174] |  :  length: 0 (resolved future 1)
[10:52:00.174] |  checking value #1 ... done
[10:52:00.174] |  Relaying remaining futures ...
[10:52:00.174] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:00.175] |  :  .  nx: 1
[10:52:00.175] |  :  .  relay: TRUE
[10:52:00.175] |  :  .  stdout: TRUE
[10:52:00.175] |  :  .  signal: TRUE
[10:52:00.175] |  :  .  resignal: FALSE
[10:52:00.175] |  :  .  force: TRUE
[10:52:00.175] |  :  .  relayed: [n=1] TRUE
[10:52:00.175] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:52:00.175] |  :  .  relayed: [n=1] TRUE
[10:52:00.175] |  :  .  queued futures: [n=1] TRUE
[10:52:00.175] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:00.176] |  Relaying remaining futures ... done
[10:52:00.176] value() on list ... done
[10:52:00.176]  - Number of value chunks collected: 1
[10:52:00.176] Resolving 1 futures (chunks) ... DONE
[10:52:00.176] Reducing values from 1 chunks ...
[10:52:00.176]  - Number of values collected after concatenation: 2
[10:52:00.176]  - Number of values expected: 2
[10:52:00.176] Reducing values from 1 chunks ... DONE
[10:52:00.176] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ...
[10:52:00.177] future_mapply() ...
[10:52:00.177] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.177] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:00.177] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.177] Number of chunks: 1
[10:52:00.177] getGlobalsAndPackagesXApply() ...
[10:52:00.177]  - future.globals: TRUE
[10:52:00.177] getGlobalsAndPackages() ...
[10:52:00.178] |  Searching for globals ...
[10:52:00.179] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:52:00.179] |  Searching for globals ... DONE
[10:52:00.180] |  Resolving globals: FALSE
[10:52:00.180] |  Search for packages associated with the globals ...
[10:52:00.180] |  :  Packages associated with globals: [1] ‘base’
[10:52:00.180] |  :  Packages: [1] ‘base’
[10:52:00.180] |  Search for packages associated with the globals ... DONE
[10:52:00.180] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:52:00.181] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:52:00.181] |  Packages after dropping 'base': [0] 
[10:52:00.181] |  globals: [1] ‘FUN’
[10:52:00.181] |  packages: [0] 
[10:52:00.181] getGlobalsAndPackages() ... done
[10:52:00.181]  - globals found/used: [n=1] ‘FUN’
[10:52:00.181]  - needed namespaces: [n=0] 
[10:52:00.181] Finding globals ... DONE
[10:52:00.182] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:52:00.182] List of 2
[10:52:00.182]  $ ...future.FUN:function (x, y)  
[10:52:00.182]  $ MoreArgs     : NULL
[10:52:00.182]  - attr(*, "where")=List of 2
[10:52:00.182]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:00.182]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:52:00.182]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:00.182]  - attr(*, "resolved")= logi FALSE
[10:52:00.182]  - attr(*, "total_size")= num NA
[10:52:00.185] Packages to be attached in all futures: [n=0] 
[10:52:00.185] getGlobalsAndPackagesXApply() ... DONE
[10:52:00.185] Number of futures (= number of chunks): 1
[10:52:00.185] Launching 1 futures (chunks) ...
[10:52:00.185] Chunk #1 of 1 ...
[10:52:00.185]  - Finding globals in '...' for chunk #1 ...
[10:52:00.185] getGlobalsAndPackages() ...
[10:52:00.186] |  Searching for globals ...
[10:52:00.186] |  :  globals found: [0] 
[10:52:00.186] |  Searching for globals ... DONE
[10:52:00.186] |  globals: [0] <none>
[10:52:00.186] |  packages: [0] <none>
[10:52:00.186] getGlobalsAndPackages() ... done
[10:52:00.186]    + additional globals found: [n=0] 
[10:52:00.186]    + additional namespaces needed: [n=0] 
[10:52:00.187]  - Finding globals in '...' for chunk #1 ... DONE
[10:52:00.187]  - seeds: <none>
[10:52:00.187]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:00.187] getGlobalsAndPackages() ...
[10:52:00.187] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:00.187] |  Resolving globals: FALSE
[10:52:00.187] |  Search for packages associated with the globals ...
[10:52:00.187] |  :  Packages associated with globals: [0] 
[10:52:00.188] |  :  Packages: [0] 
[10:52:00.188] |  Search for packages associated with the globals ... DONE
[10:52:00.188] |  Packages after dropping 'base': [0] 
[10:52:00.188] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:00.188] |  packages: [0] 
[10:52:00.188] getGlobalsAndPackages() ... done
[10:52:00.188] run() for Future (‘Future’) ...
[10:52:00.188] |  state: ‘created’
[10:52:00.189] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.189] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.189] |  Using SequentialFutureBackend ...
[10:52:00.189] |  :  Launching futures ...
[10:52:00.189] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:00.189] |  :  .  |  getFutureData() ...
[10:52:00.189] |  :  .  |  :  getFutureCore() ...
[10:52:00.189] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:00.189] |  :  .  |  :  getFutureCore() ... done
[10:52:00.191] |  :  .  |  :  getFutureCapture() ...
[10:52:00.191] |  :  .  |  :  getFutureCapture() ... done
[10:52:00.191] |  :  .  |  :  getFutureContext() ...
[10:52:00.192] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.192] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:00.192] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.192] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:00.192] |  :  .  |  :  getFutureContext() ... done
[10:52:00.192] |  :  .  |  getFutureData() ... done
[10:52:00.192] |  :  .  |  attachPackages() ...
[10:52:00.193] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:00.193] |  :  .  |  attachPackages() ... DONE
[10:52:00.193] |  :  .  |  attachPackages() ...
[10:52:00.193] |  :  .  |  :  packages: [n=0] 
[10:52:00.193] |  :  .  |  attachPackages() ... DONE
[10:52:00.193] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.194] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:00.194] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.194] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:00.194] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:00.194] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:00.195] |  :  .  |  :  .  |  New stack:
[10:52:00.195] |  :  .  |  :  .  |  List of 1
[10:52:00.195] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.195] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:00.195] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:00.195] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.195] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.195] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.195] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.197] |  :  .  |  :  .  |  Old stack:
[10:52:00.197] |  :  .  |  :  .  |  List of 1
[10:52:00.197] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:00.197] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.197] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:00.197] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:52:00.197] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.197] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.197] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.197] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:52:00.197] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:00.197] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:00.197] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.197] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.197] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.201] |  :  .  |  :  .  |  Not identical
[10:52:00.201] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:00.201] |  :  .  |  :  .  |  :  List of 2
[10:52:00.201] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:00.201] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.201] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:00.201] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.201] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:00.201] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:00.201] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.201] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.206] |  :  .  |  :  .  |  :  Formals differ
[10:52:00.206] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:00.207] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:00.207] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:00.207] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:00.207] |  :  .  |  :  .  List of future strategies:
[10:52:00.207] |  :  .  |  :  .  1. sequential:
[10:52:00.207] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:00.207] |  :  .  |  :  .     - tweaked: FALSE
[10:52:00.207] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.207] |  :  .  |  :  .  List of 1
[10:52:00.207] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.207] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:00.207] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:00.207] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.207] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.207] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.207] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.210] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:00.210] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:00.210] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.210] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:00.210] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.210] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:00.210] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:00.211] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:00.212] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:00.213] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:00.213] |  :  .  |  assign_globals() ...
[10:52:00.213] |  :  .  |  List of 5
[10:52:00.213] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:52:00.213] |  :  .  |   $ MoreArgs                 : NULL
[10:52:00.213] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:52:00.213] |  :  .  |    ..$ :List of 2
[10:52:00.213] |  :  .  |    .. ..$ : int 1
[10:52:00.213] |  :  .  |    .. ..$ : int 0
[10:52:00.213] |  :  .  |    ..$ :List of 2
[10:52:00.213] |  :  .  |    .. ..$ : int 0
[10:52:00.213] |  :  .  |    .. ..$ : int 1
[10:52:00.213] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:00.213] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:00.213] |  :  .  |   - attr(*, "where")=List of 5
[10:52:00.213] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:00.213] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:52:00.213] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:00.213] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:00.213] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:00.213] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:00.213] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:00.213] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:00.213] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:00.220] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:00.220] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:00.220] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:52:00.220] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:00.220] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:00.220] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:00.220] |  :  .  |  assign_globals() ... done
[10:52:00.723] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:00.723] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:00.723] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:00.723] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:00.724] |  :  .  |  :  .  |  :  New stack:
[10:52:00.724] |  :  .  |  :  .  |  :  List of 1
[10:52:00.724] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:00.724] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.724] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:00.724] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:52:00.724] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.724] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.724] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.724] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:52:00.724] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:00.724] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:00.724] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.724] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.724] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.727] |  :  .  |  :  .  |  :  Old stack:
[10:52:00.727] |  :  .  |  :  .  |  :  List of 1
[10:52:00.727] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.727] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:00.727] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:00.727] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.727] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.727] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.727] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.730] |  :  .  |  :  .  |  :  Not identical
[10:52:00.730] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:00.730] |  :  .  |  :  .  |  :  .  List of 2
[10:52:00.730] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:00.730] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.730] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:00.730] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.730] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.730] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:00.730] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.730] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.737] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:00.738] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:00.738] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:00.738] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:00.738] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:00.738] |  :  .  |  :  .  |  List of future strategies:
[10:52:00.738] |  :  .  |  :  .  |  1. multisession:
[10:52:00.738] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:00.738] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:00.738] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:00.738] |  :  .  |  :  .  |  List of 1
[10:52:00.738] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:00.738] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.738] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:00.738] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:52:00.738] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.738] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.738] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.738] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:52:00.738] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:00.738] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:00.738] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.738] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.738] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.742] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:00.742] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:00.742] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.742] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:00.742] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.742] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:52:00.743] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:00.743] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:00.743] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:00.743] |  :  .  |  SequentialFuture started (and completed)
[10:52:00.743] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:00.743] |  :  Launching futures ... done
[10:52:00.743] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:00.743] |  Using SequentialFutureBackend ... done
[10:52:00.744] run() for Future (‘SequentialFuture’) ... done
[10:52:00.744] Created future:
[10:52:00.744] SequentialFuture:
[10:52:00.744] Label: ‘future_mapply-1’
[10:52:00.744] Expression:
[10:52:00.744] {
[10:52:00.744]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:00.744]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:00.744]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:00.744]         on.exit(options(oopts), add = TRUE)
[10:52:00.744]     }
[10:52:00.744]     {
[10:52:00.744]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:00.744]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:00.744]         do.call(mapply, args = args)
[10:52:00.744]     }
[10:52:00.744] }
[10:52:00.744] Lazy evaluation: FALSE
[10:52:00.744] Asynchronous evaluation: TRUE
[10:52:00.744] Local evaluation: TRUE
[10:52:00.744] Environment: R_GlobalEnv
[10:52:00.744] Capture standard output: TRUE
[10:52:00.744] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:00.744] Immediate condition classes: ‘immediateCondition’
[10:52:00.744] Globals: 5 objects totaling 1.21 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 95 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:00.744] Packages: <none>
[10:52:00.744] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:00.744] Resolved: TRUE
[10:52:00.744] Value: 184 bytes of class ‘list’
[10:52:00.744] Early signaling: FALSE
[10:52:00.744] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:00.744] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:00.745] Chunk #1 of 1 ... DONE
[10:52:00.745] Launching 1 futures (chunks) ... DONE
[10:52:00.745] Resolving 1 futures (chunks) ...
[10:52:00.745] value() on list ...
[10:52:00.745] |  recursive: 0
[10:52:00.745] |  length: 1
[10:52:00.745] |  
[10:52:00.745] |  Number of remaining objects: 1
[10:52:00.745] |  checking value #1 ...
[10:52:00.745] |  :  'obj' is SequentialFuture
[10:52:00.745] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:00.746] |  :  .  state: ‘finished’
[10:52:00.746] |  :  .  run: TRUE
[10:52:00.746] |  :  .  result: ‘FutureResult’
[10:52:00.746] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:00.746] |  :  SequentialFuture #1
[10:52:00.746] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:52:00.746] |  :  .  nx: 1
[10:52:00.746] |  :  .  relay: TRUE
[10:52:00.746] |  :  .  stdout: TRUE
[10:52:00.746] |  :  .  signal: TRUE
[10:52:00.746] |  :  .  resignal: FALSE
[10:52:00.747] |  :  .  force: TRUE
[10:52:00.747] |  :  .  relayed: [n=1] FALSE
[10:52:00.747] |  :  .  queued futures: [n=1] FALSE
[10:52:00.747] |  :  .  until=1
[10:52:00.747] |  :  .  relaying element #1
[10:52:00.747] |  :  .  relayed: [n=1] TRUE
[10:52:00.747] |  :  .  queued futures: [n=1] TRUE
[10:52:00.747] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:52:00.747] |  :  value(<SequentialFuture>, ...) ...
[10:52:00.748] |  :  .  value: <list>
[10:52:00.748] |  :  value(<SequentialFuture>, ...) ... done
[10:52:00.748] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:52:00.748] |  :  .  nx: 1
[10:52:00.748] |  :  .  relay: TRUE
[10:52:00.748] |  :  .  stdout: TRUE
[10:52:00.748] |  :  .  signal: TRUE
[10:52:00.748] |  :  .  resignal: FALSE
[10:52:00.748] |  :  .  force: TRUE
[10:52:00.748] |  :  .  relayed: [n=1] TRUE
[10:52:00.748] |  :  .  queued futures: [n=1] TRUE
[10:52:00.748] |  :  .  until=1
[10:52:00.749] |  :  .  relayed: [n=1] TRUE
[10:52:00.749] |  :  .  queued futures: [n=1] TRUE
[10:52:00.749] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:52:00.749] |  :  length: 0 (resolved future 1)
[10:52:00.749] |  checking value #1 ... done
[10:52:00.749] |  Relaying remaining futures ...
[10:52:00.749] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:00.749] |  :  .  nx: 1
[10:52:00.749] |  :  .  relay: TRUE
[10:52:00.749] |  :  .  stdout: TRUE
[10:52:00.749] |  :  .  signal: TRUE
[10:52:00.750] |  :  .  resignal: FALSE
[10:52:00.750] |  :  .  force: TRUE
[10:52:00.750] |  :  .  relayed: [n=1] TRUE
[10:52:00.750] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:52:00.750] |  :  .  relayed: [n=1] TRUE
[10:52:00.750] |  :  .  queued futures: [n=1] TRUE
[10:52:00.750] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:00.750] |  Relaying remaining futures ... done
[10:52:00.750] value() on list ... done
[10:52:00.750]  - Number of value chunks collected: 1
[10:52:00.750] Resolving 1 futures (chunks) ... DONE
[10:52:00.751] Reducing values from 1 chunks ...
[10:52:00.751]  - Number of values collected after concatenation: 2
[10:52:00.751]  - Number of values expected: 2
[10:52:00.751] Reducing values from 1 chunks ... DONE
[10:52:00.751] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ... DONE
* future_mapply(x, ..., future.stdout = NA) ...
[10:52:00.751] future_mapply() ...
[10:52:00.751] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.751] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:00.752] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.752] Number of chunks: 1
[10:52:00.752] getGlobalsAndPackagesXApply() ...
[10:52:00.752]  - future.globals: TRUE
[10:52:00.752] getGlobalsAndPackages() ...
[10:52:00.752] |  Searching for globals ...
[10:52:00.755] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:52:00.755] |  Searching for globals ... DONE
[10:52:00.755] |  Resolving globals: FALSE
[10:52:00.755] |  Search for packages associated with the globals ...
[10:52:00.756] |  :  Packages associated with globals: [1] ‘base’
[10:52:00.756] |  :  Packages: [1] ‘base’
[10:52:00.756] |  Search for packages associated with the globals ... DONE
[10:52:00.756] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:52:00.756] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:52:00.757] |  Packages after dropping 'base': [0] 
[10:52:00.757] |  globals: [1] ‘FUN’
[10:52:00.757] |  packages: [0] 
[10:52:00.757] getGlobalsAndPackages() ... done
[10:52:00.757]  - globals found/used: [n=1] ‘FUN’
[10:52:00.757]  - needed namespaces: [n=0] 
[10:52:00.757] Finding globals ... DONE
[10:52:00.757] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:52:00.758] List of 2
[10:52:00.758]  $ ...future.FUN:function (x, y)  
[10:52:00.758]  $ MoreArgs     : NULL
[10:52:00.758]  - attr(*, "where")=List of 2
[10:52:00.758]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:00.758]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:52:00.758]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:00.758]  - attr(*, "resolved")= logi FALSE
[10:52:00.758]  - attr(*, "total_size")= num NA
[10:52:00.760] Packages to be attached in all futures: [n=0] 
[10:52:00.760] getGlobalsAndPackagesXApply() ... DONE
[10:52:00.760] Number of futures (= number of chunks): 1
[10:52:00.760] Launching 1 futures (chunks) ...
[10:52:00.760] Chunk #1 of 1 ...
[10:52:00.761]  - Finding globals in '...' for chunk #1 ...
[10:52:00.761] getGlobalsAndPackages() ...
[10:52:00.761] |  Searching for globals ...
[10:52:00.761] |  :  globals found: [0] 
[10:52:00.761] |  Searching for globals ... DONE
[10:52:00.761] |  globals: [0] <none>
[10:52:00.761] |  packages: [0] <none>
[10:52:00.761] getGlobalsAndPackages() ... done
[10:52:00.762]    + additional globals found: [n=0] 
[10:52:00.762]    + additional namespaces needed: [n=0] 
[10:52:00.762]  - Finding globals in '...' for chunk #1 ... DONE
[10:52:00.762]  - seeds: <none>
[10:52:00.762]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:00.762] getGlobalsAndPackages() ...
[10:52:00.762] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:00.762] |  Resolving globals: FALSE
[10:52:00.762] |  Search for packages associated with the globals ...
[10:52:00.763] |  :  Packages associated with globals: [0] 
[10:52:00.763] |  :  Packages: [0] 
[10:52:00.763] |  Search for packages associated with the globals ... DONE
[10:52:00.763] |  Packages after dropping 'base': [0] 
[10:52:00.763] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:00.763] |  packages: [0] 
[10:52:00.763] getGlobalsAndPackages() ... done
[10:52:00.763] run() for Future (‘Future’) ...
[10:52:00.764] |  state: ‘created’
[10:52:00.764] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.764] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.764] |  Using SequentialFutureBackend ...
[10:52:00.764] |  :  Launching futures ...
[10:52:00.764] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:00.764] |  :  .  |  getFutureData() ...
[10:52:00.764] |  :  .  |  :  getFutureCore() ...
[10:52:00.764] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:00.765] |  :  .  |  :  getFutureCore() ... done
[10:52:00.765] |  :  .  |  :  getFutureCapture() ...
[10:52:00.765] |  :  .  |  :  getFutureCapture() ... done
[10:52:00.765] |  :  .  |  :  getFutureContext() ...
[10:52:00.765] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.765] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:00.765] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.765] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:00.765] |  :  .  |  :  getFutureContext() ... done
[10:52:00.765] |  :  .  |  getFutureData() ... done
[10:52:00.766] |  :  .  |  attachPackages() ...
[10:52:00.766] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:00.766] |  :  .  |  attachPackages() ... DONE
[10:52:00.766] |  :  .  |  attachPackages() ...
[10:52:00.766] |  :  .  |  :  packages: [n=0] 
[10:52:00.766] |  :  .  |  attachPackages() ... DONE
[10:52:00.766] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.767] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:00.767] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.767] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:00.767] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:00.767] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:00.767] |  :  .  |  :  .  |  New stack:
[10:52:00.767] |  :  .  |  :  .  |  List of 1
[10:52:00.767] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.767] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:00.767] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:00.767] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.767] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.767] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.767] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.770] |  :  .  |  :  .  |  Old stack:
[10:52:00.770] |  :  .  |  :  .  |  List of 1
[10:52:00.770] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:00.770] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.770] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:00.770] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:52:00.770] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.770] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.770] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.770] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:52:00.770] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:00.770] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:00.770] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.770] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.770] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.775] |  :  .  |  :  .  |  Not identical
[10:52:00.775] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:00.775] |  :  .  |  :  .  |  :  List of 2
[10:52:00.775] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:00.775] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.775] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:00.775] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.775] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:00.775] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:00.775] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:00.775] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:00.780] |  :  .  |  :  .  |  :  Formals differ
[10:52:00.780] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:00.780] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:00.780] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:00.781] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:00.781] |  :  .  |  :  .  List of future strategies:
[10:52:00.781] |  :  .  |  :  .  1. sequential:
[10:52:00.781] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:00.781] |  :  .  |  :  .     - tweaked: FALSE
[10:52:00.781] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.781] |  :  .  |  :  .  List of 1
[10:52:00.781] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:00.781] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:00.781] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:00.781] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.781] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:00.781] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:00.781] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:00.783] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:00.783] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:00.784] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:00.784] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:00.784] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:00.784] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:00.784] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:00.784] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:00.784] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:00.784] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:00.785] |  :  .  |  assign_globals() ...
[10:52:00.785] |  :  .  |  List of 5
[10:52:00.785] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:52:00.785] |  :  .  |   $ MoreArgs                 : NULL
[10:52:00.785] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:52:00.785] |  :  .  |    ..$ :List of 2
[10:52:00.785] |  :  .  |    .. ..$ : int 1
[10:52:00.785] |  :  .  |    .. ..$ : int 0
[10:52:00.785] |  :  .  |    ..$ :List of 2
[10:52:00.785] |  :  .  |    .. ..$ : int 0
[10:52:00.785] |  :  .  |    .. ..$ : int 1
[10:52:00.785] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:00.785] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:00.785] |  :  .  |   - attr(*, "where")=List of 5
[10:52:00.785] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:00.785] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:52:00.785] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:00.785] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:00.785] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:00.785] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:00.785] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:00.785] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:00.785] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:00.791] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:00.791] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:00.791] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:52:00.791] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:00.791] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:00.791] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:00.793] |  :  .  |  assign_globals() ... done
[10:52:01.296] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:01.297] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:01.297] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:01.297] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:01.297] |  :  .  |  :  .  |  :  New stack:
[10:52:01.297] |  :  .  |  :  .  |  :  List of 1
[10:52:01.297] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:01.297] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.297] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:01.297] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:52:01.297] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:01.297] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.297] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.297] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:52:01.297] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:01.297] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:01.297] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:01.297] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.297] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.302] |  :  .  |  :  .  |  :  Old stack:
[10:52:01.302] |  :  .  |  :  .  |  :  List of 1
[10:52:01.302] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.302] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.302] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.302] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.302] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.302] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.302] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.304] |  :  .  |  :  .  |  :  Not identical
[10:52:01.304] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:01.304] |  :  .  |  :  .  |  :  .  List of 2
[10:52:01.304] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:01.304] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:01.304] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:01.304] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:01.304] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.304] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.304] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.304] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.310] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:01.310] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:01.310] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:01.310] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:01.310] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:01.310] |  :  .  |  :  .  |  List of future strategies:
[10:52:01.310] |  :  .  |  :  .  |  1. multisession:
[10:52:01.310] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:01.310] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:01.310] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:01.311] |  :  .  |  :  .  |  List of 1
[10:52:01.311] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:01.311] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.311] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:01.311] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:52:01.311] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:01.311] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.311] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.311] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:52:01.311] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:01.311] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:01.311] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:01.311] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.311] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.314] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:01.314] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:01.315] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.315] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:01.315] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.315] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:52:01.315] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:01.315] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:01.315] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:01.316] |  :  .  |  SequentialFuture started (and completed)
[10:52:01.316] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:01.318] |  :  Launching futures ... done
[10:52:01.318] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:01.318] |  Using SequentialFutureBackend ... done
[10:52:01.318] run() for Future (‘SequentialFuture’) ... done
[10:52:01.318] Created future:
[10:52:01.318] SequentialFuture:
[10:52:01.318] Label: ‘future_mapply-1’
[10:52:01.318] Expression:
[10:52:01.318] {
[10:52:01.318]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:01.318]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:01.318]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:01.318]         on.exit(options(oopts), add = TRUE)
[10:52:01.318]     }
[10:52:01.318]     {
[10:52:01.318]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:01.318]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:01.318]         do.call(mapply, args = args)
[10:52:01.318]     }
[10:52:01.318] }
[10:52:01.318] Lazy evaluation: FALSE
[10:52:01.318] Asynchronous evaluation: TRUE
[10:52:01.318] Local evaluation: TRUE
[10:52:01.318] Environment: R_GlobalEnv
[10:52:01.318] Capture standard output: NA
[10:52:01.318] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:01.318] Immediate condition classes: ‘immediateCondition’
[10:52:01.318] Globals: 5 objects totaling 1.21 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 95 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:01.318] Packages: <none>
[10:52:01.318] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:01.318] Resolved: TRUE
[10:52:01.318] Value: 184 bytes of class ‘list’
[10:52:01.318] Early signaling: FALSE
[10:52:01.318] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:01.318] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:01.319] Chunk #1 of 1 ... DONE
[10:52:01.319] Launching 1 futures (chunks) ... DONE
[10:52:01.319] Resolving 1 futures (chunks) ...
[10:52:01.320] value() on list ...
[10:52:01.320] |  recursive: 0
[10:52:01.320] |  length: 1
[10:52:01.320] |  
[10:52:01.320] |  Number of remaining objects: 1
[10:52:01.320] |  checking value #1 ...
[10:52:01.320] |  :  'obj' is SequentialFuture
[10:52:01.320] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:01.321] |  :  .  state: ‘finished’
[10:52:01.321] |  :  .  run: TRUE
[10:52:01.321] |  :  .  result: ‘FutureResult’
[10:52:01.321] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:01.321] |  :  SequentialFuture #1
[10:52:01.321] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:52:01.321] |  :  .  nx: 1
[10:52:01.321] |  :  .  relay: TRUE
[10:52:01.321] |  :  .  stdout: TRUE
[10:52:01.322] |  :  .  signal: TRUE
[10:52:01.322] |  :  .  resignal: FALSE
[10:52:01.322] |  :  .  force: TRUE
[10:52:01.322] |  :  .  relayed: [n=1] FALSE
[10:52:01.322] |  :  .  queued futures: [n=1] FALSE
[10:52:01.322] |  :  .  until=1
[10:52:01.322] |  :  .  relaying element #1
[10:52:01.323] |  :  .  relayed: [n=1] TRUE
[10:52:01.323] |  :  .  queued futures: [n=1] TRUE
[10:52:01.323] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:52:01.323] |  :  value(<SequentialFuture>, ...) ...
[10:52:01.323] |  :  .  value: <list>
[10:52:01.323] |  :  value(<SequentialFuture>, ...) ... done
[10:52:01.323] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:52:01.323] |  :  .  nx: 1
[10:52:01.324] |  :  .  relay: TRUE
[10:52:01.324] |  :  .  stdout: TRUE
[10:52:01.324] |  :  .  signal: TRUE
[10:52:01.324] |  :  .  resignal: FALSE
[10:52:01.324] |  :  .  force: TRUE
[10:52:01.324] |  :  .  relayed: [n=1] TRUE
[10:52:01.324] |  :  .  queued futures: [n=1] TRUE
[10:52:01.324] |  :  .  until=1
[10:52:01.324] |  :  .  relayed: [n=1] TRUE
[10:52:01.324] |  :  .  queued futures: [n=1] TRUE
[10:52:01.324] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:52:01.325] |  :  length: 0 (resolved future 1)
[10:52:01.325] |  checking value #1 ... done
[10:52:01.325] |  Relaying remaining futures ...
[10:52:01.325] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:01.325] |  :  .  nx: 1
[10:52:01.325] |  :  .  relay: TRUE
[10:52:01.325] |  :  .  stdout: TRUE
[10:52:01.325] |  :  .  signal: TRUE
[10:52:01.325] |  :  .  resignal: FALSE
[10:52:01.325] |  :  .  force: TRUE
[10:52:01.326] |  :  .  relayed: [n=1] TRUE
[10:52:01.326] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:52:01.326] |  :  .  relayed: [n=1] TRUE
[10:52:01.326] |  :  .  queued futures: [n=1] TRUE
[10:52:01.326] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:01.326] |  Relaying remaining futures ... done
[10:52:01.326] value() on list ... done
[10:52:01.326]  - Number of value chunks collected: 1
[10:52:01.326] Resolving 1 futures (chunks) ... DONE
[10:52:01.326] Reducing values from 1 chunks ...
[10:52:01.327]  - Number of values collected after concatenation: 2
[10:52:01.327]  - Number of values expected: 2
[10:52:01.327] Reducing values from 1 chunks ... DONE
[10:52:01.327] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = NA) ... DONE
* plan('multisession') ... DONE
  - Testing with 1 cores ... DONE
  - Testing with 2 cores ...
* plan('multicore') ...
[10:52:01.331] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.331] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:52:01.331] |  :  all.equal() for FutureStrategyList ...
[10:52:01.331] |  :  .  New stack:
[10:52:01.331] |  :  .  List of 1
[10:52:01.331] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.331] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.331] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.331] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.331] |  :  .      ...)  
[10:52:01.331] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.331] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.331] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:01.331] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.334] |  :  .  Old stack:
[10:52:01.334] |  :  .  List of 1
[10:52:01.334] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:01.334] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.334] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:01.334] |  :  .    ..- attr(*, "init")= chr "done"
[10:52:01.334] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:01.334] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.334] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.334] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:52:01.334] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:01.334] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:01.334] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:01.334] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.334] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.338] |  :  .  Not identical
[10:52:01.338] |  :  .  all.equal() for future ...
[10:52:01.338] |  :  .  |  List of 2
[10:52:01.338] |  :  .  |   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.338] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.338] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.338] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.338] |  :  .  |      ...)  
[10:52:01.338] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.338] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.338] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:01.338] |  :  .  |   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:01.338] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.338] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:01.338] |  :  .  |    ..- attr(*, "init")= chr "done"
[10:52:01.338] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:01.338] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.338] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.338] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:52:01.338] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:01.338] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581f3cd68> 
[10:52:01.338] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:01.338] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:01.346] |  :  .  |  Formals differ
[10:52:01.346] |  :  .  all.equal() for future ... done
[10:52:01.346] |  :  .  Future strategies differ at level 1
[10:52:01.347] |  :  all.equal() for FutureStrategyList ... done
[10:52:01.347] |  :  plan(): Setting new future strategy stack:
[10:52:01.347] |  :  List of future strategies:
[10:52:01.347] |  :  1. multicore:
[10:52:01.347] |  :     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:01.347] |  :     - tweaked: FALSE
[10:52:01.347] |  :     - call: plan(strategy)
[10:52:01.347] |  :  List of 1
[10:52:01.347] |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.347] |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.347] |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.347] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.347] |  :      ...)  
[10:52:01.347] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.347] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.347] |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:01.347] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.350] |  :  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:52:01.350] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.350] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:01.350] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.350] |  :  .  Legacy shutdown of cluster workers ...
[10:52:01.350] |  :  .  |  Stopping existing cluster ...
[10:52:01.350] |  :  .  |  :  No pre-existing cluster. Skipping
[10:52:01.350] |  :  .  |  Stopping existing cluster ... done
[10:52:01.351] |  :  .  Legacy shutdown of cluster workers ... done
[10:52:01.351] |  :  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:52:01.351] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:52:01.351] |  :  .  function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.351] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.351] |  :  .   - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.351] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.351] |  :  .      ...)  
[10:52:01.351] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.351] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.351] |  :  .   - attr(*, "call")= language plan(strategy)
[10:52:01.353] |  :  .  init: NULL
[10:52:01.353] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:52:01.353] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.353] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:01.353] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.353] |  :  Backend function: <‘NULL’>
[10:52:01.355] |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:01.355] |  :  plan(): nbrOfWorkers() = 2
[10:52:01.355] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:52:01.356] plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
* future_lapply(x, ..., future.stdout = FALSE) ...
[10:52:01.356] future_lapply() ...
[10:52:01.357] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.357] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:01.357] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.357] Backend function: <‘NULL’>
[10:52:01.359] Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:01.360] Number of chunks: 2
[10:52:01.361] getGlobalsAndPackagesXApply() ...
[10:52:01.361]  - future.globals: TRUE
[10:52:01.361] getGlobalsAndPackages() ...
[10:52:01.361] |  Searching for globals ...
[10:52:01.363] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:52:01.363] |  Searching for globals ... DONE
[10:52:01.363] |  Resolving globals: FALSE
[10:52:01.363] |  Search for packages associated with the globals ...
[10:52:01.363] |  :  Packages associated with globals: [1] ‘base’
[10:52:01.364] |  :  Packages: [1] ‘base’
[10:52:01.364] |  Search for packages associated with the globals ... DONE
[10:52:01.364] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:52:01.364] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:52:01.364] |  Packages after dropping 'base': [0] 
[10:52:01.364] |  globals: [1] ‘FUN’
[10:52:01.367] |  packages: [0] 
[10:52:01.367] getGlobalsAndPackages() ... done
[10:52:01.367]  - globals found/used: [n=1] ‘FUN’
[10:52:01.367]  - needed namespaces: [n=0] 
[10:52:01.367] Finding globals ... DONE
[10:52:01.367]  - use_args: TRUE
[10:52:01.368]  - Getting '...' globals ...
[10:52:01.368] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:52:01.368] |  recursive: 0
[10:52:01.368] |  length: 1
[10:52:01.368] |  elements: ‘...’
[10:52:01.369] |  'obj' is DotDotDotList
[10:52:01.369] |  resolve(obj, ...) ...
[10:52:01.369] |  resolve(obj, ...) ... done
[10:52:01.369] |  length: 0 (resolved future 1)
[10:52:01.369] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:52:01.369]    - '...' content: [n=0] 
[10:52:01.369] List of 1
[10:52:01.369]  $ ...: list()
[10:52:01.369]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:01.369]  - attr(*, "where")=List of 1
[10:52:01.369]   ..$ ...:<environment: 0x562581d904e8> 
[10:52:01.369]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:01.369]  - attr(*, "resolved")= logi TRUE
[10:52:01.369]  - attr(*, "total_size")= num NA
[10:52:01.373]  - Getting '...' globals ... DONE
[10:52:01.373] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:52:01.373] List of 2
[10:52:01.373]  $ ...future.FUN:function (x)  
[10:52:01.373]  $ ...          : list()
[10:52:01.373]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:01.373]  - attr(*, "where")=List of 2
[10:52:01.373]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:01.373]   ..$ ...          :<environment: 0x562581d904e8> 
[10:52:01.373]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:01.373]  - attr(*, "resolved")= logi FALSE
[10:52:01.373]  - attr(*, "total_size")= num 5632
[10:52:01.376] Packages to be attached in all futures: [n=0] 
[10:52:01.376] getGlobalsAndPackagesXApply() ... DONE
[10:52:01.376] Number of futures (= number of chunks): 2
[10:52:01.377] Launching 2 futures (chunks) ...
[10:52:01.377] Chunk #1 of 2 ...
[10:52:01.377]  - Finding globals in 'X' for chunk #1 ...
[10:52:01.377] getGlobalsAndPackages() ...
[10:52:01.377] |  Searching for globals ...
[10:52:01.377] |  :  globals found: [0] 
[10:52:01.377] |  Searching for globals ... DONE
[10:52:01.377] |  globals: [0] <none>
[10:52:01.378] |  packages: [0] <none>
[10:52:01.378] getGlobalsAndPackages() ... done
[10:52:01.378]    + additional globals found: [n=0] 
[10:52:01.378]    + additional namespaces needed: [n=0] 
[10:52:01.378]  - Finding globals in 'X' for chunk #1 ... DONE
[10:52:01.378]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:01.378]  - seeds: <none>
[10:52:01.378]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:01.378] getGlobalsAndPackages() ...
[10:52:01.378] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:01.379] |  Resolving globals: FALSE
[10:52:01.379] |  Tweak future expression to call with '...' arguments ...
[10:52:01.379] |  :  {
[10:52:01.379] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:01.379] |  :      "# expression in do.call(), because function called uses '...'  "
[10:52:01.379] |  :      "# as a global variable                                         "
[10:52:01.379] |  :      do.call(function(...) {
[10:52:01.379] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:01.379] |  :          "# without having an '...' argument. This means '...' is treated"
[10:52:01.379] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:52:01.379] |  :          "# anonymous function.                                          "
[10:52:01.379] |  :          "#                                                              "
[10:52:01.379] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:52:01.379] |  :          "# function environment of FUN() to the calling environment.    "
[10:52:01.379] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:01.379] |  :          "# global environment, which is where globals are written.      "
[10:52:01.379] |  :          penv <- env <- environment(...future.FUN)
[10:52:01.379] |  :          repeat {
[10:52:01.379] |  :              if (identical(env, globalenv()) || identical(env, 
[10:52:01.379] |  :                  emptyenv())) 
[10:52:01.379] |  :                  break
[10:52:01.379] |  :              penv <- env
[10:52:01.379] |  :              env <- parent.env(env)
[10:52:01.379] |  :          }
[10:52:01.379] |  :          if (identical(penv, globalenv())) {
[10:52:01.379] |  :              environment(...future.FUN) <- environment()
[10:52:01.379] |  :          }
[10:52:01.379] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:01.379] |  :              !isNamespace(penv)) {
[10:52:01.379] |  :              parent.env(penv) <- environment()
[10:52:01.379] |  :          }
[10:52:01.379] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:01.379] |  :          {
[10:52:01.379] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:01.379] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:01.379] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:01.379] |  :                  on.exit(options(oopts), add = TRUE)
[10:52:01.379] |  :              }
[10:52:01.379] |  :              {
[10:52:01.379] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:01.379] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:01.379] |  :                    ...future.FUN(...future.X_jj, ...)
[10:52:01.379] |  :                  })
[10:52:01.379] |  :              }
[10:52:01.379] |  :          }
[10:52:01.379] |  :      }, args = future.call.arguments)
[10:52:01.379] |  :  }
[10:52:01.379] |  Tweak future expression to call with '...' arguments ... DONE
[10:52:01.379] |  Search for packages associated with the globals ...
[10:52:01.380] |  :  Packages associated with globals: [0] 
[10:52:01.380] |  :  Packages: [0] 
[10:52:01.380] |  Search for packages associated with the globals ... DONE
[10:52:01.380] |  Packages after dropping 'base': [0] 
[10:52:01.380] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:01.380] |  packages: [0] 
[10:52:01.380] getGlobalsAndPackages() ... done
[10:52:01.381] run() for Future (‘Future’) ...
[10:52:01.381] |  state: ‘created’
[10:52:01.381] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.381] |  :  makeFutureBackend(<multicore>) ...
[10:52:01.381] |  :  .  Backend function: <‘NULL’>
[10:52:01.383] |  :  .  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:01.383] |  :  makeFutureBackend(<multicore>) ... done
[10:52:01.383] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.383] |  Using MulticoreFutureBackend ...
[10:52:01.383] |  :  Launching futures ...
[10:52:01.384] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:01.384] |  :  .  |  getFutureData() ...
[10:52:01.384] |  :  .  |  :  getFutureCore() ...
[10:52:01.384] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:01.384] |  :  .  |  :  getFutureCore() ... done
[10:52:01.384] |  :  .  |  :  getFutureCapture() ...
[10:52:01.384] |  :  .  |  :  getFutureCapture() ... done
[10:52:01.384] |  :  .  |  :  getFutureContext() ...
[10:52:01.385] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.385] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:01.385] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.385] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:01.385] |  :  .  |  :  getFutureContext() ... done
[10:52:01.386] |  :  .  |  getFutureData() ... done
[10:52:01.386] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:01.386] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:01.389] |  :  .  |  MulticoreFuture started
[10:52:01.389] |  :  .  |  attachPackages() ...
[10:52:01.389] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:01.389] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:01.390] |  :  Launching futures ... done
[10:52:01.390] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:01.390] |  :  .  |  attachPackages() ... DONE
[10:52:01.390] |  Using MulticoreFutureBackend ... done
[10:52:01.390] |  :  .  |  attachPackages() ...
[10:52:01.390] run() for Future (‘MulticoreFuture’) ... done
[10:52:01.390] |  :  .  |  :  packages: [n=0] 
[10:52:01.391] Created future:
[10:52:01.390] |  :  .  |  attachPackages() ... DONE
[10:52:01.391] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.392] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:01.392] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.393] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:01.393] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:01.393] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:01.393] |  :  .  |  :  .  |  New stack:
[10:52:01.394] |  :  .  |  :  .  |  List of 1
[10:52:01.394] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.394] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.394] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.394] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.394] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.394] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.394] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.403] |  :  .  |  :  .  |  Old stack:
[10:52:01.404] readImmediateCondition() ...
[10:52:01.405]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.405]  - Number of RDS files: 0
[10:52:01.405] readImmediateCondition() ... DONE
[10:52:01.391] MulticoreFuture:
[10:52:01.391] Label: ‘future_lapply-1’
[10:52:01.391] Expression:
[10:52:01.391] {
[10:52:01.391]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:01.391]     "# expression in do.call(), because function called uses '...'  "
[10:52:01.391]     "# as a global variable                                         "
[10:52:01.391]     do.call(function(...) {
[10:52:01.391]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:01.391]         "# without having an '...' argument. This means '...' is treated"
[10:52:01.391]         "# as a global variable. This may happen when FUN() is an       "
[10:52:01.391]         "# anonymous function.                                          "
[10:52:01.391]         "#                                                              "
[10:52:01.391]         "# If an anonymous function, we will make sure to restore the   "
[10:52:01.391]         "# function environment of FUN() to the calling environment.    "
[10:52:01.391]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:01.391]         "# global environment, which is where globals are written.      "
[10:52:01.391]         penv <- env <- environment(...future.FUN)
[10:52:01.391]         repeat {
[10:52:01.391]             if (identical(env, globalenv()) || identical(env, 
[10:52:01.391]                 emptyenv())) 
[10:52:01.391]                 break
[10:52:01.391]             penv <- env
[10:52:01.391]             env <- parent.env(env)
[10:52:01.391]         }
[10:52:01.391]         if (identical(penv, globalenv())) {
[10:52:01.391]             environment(...future.FUN) <- environment()
[10:52:01.391]         }
[10:52:01.391]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:01.391]             !isNamespace(penv)) {
[10:52:01.391]             parent.env(penv) <- environment()
[10:52:01.391]         }
[10:52:01.391]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:01.391]         {
[10:52:01.391]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:01.391]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:01.391]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:01.391]                 on.exit(options(oopts), add = TRUE)
[10:52:01.391]             }
[10:52:01.391]             {
[10:52:01.391]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:01.391]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:01.391]                   ...future.FUN(...future.X_jj, ...)
[10:52:01.391]                 })
[10:52:01.391]             }
[10:52:01.391]         }
[10:52:01.391]     }, args = future.call.arguments)
[10:52:01.391] }
[10:52:01.391] Lazy evaluation: FALSE
[10:52:01.391] Asynchronous evaluation: TRUE
[10:52:01.391] Local evaluation: TRUE
[10:52:01.391] Environment: R_GlobalEnv
[10:52:01.391] Capture standard output: FALSE
[10:52:01.391] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:01.391] Immediate condition classes: ‘immediateCondition’
[10:52:01.391] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:01.391] Packages: <none>
[10:52:01.391] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:01.391] Resolved: FALSE
[10:52:01.391] Value: <not collected>
[10:52:01.391] Conditions captured: <none>
[10:52:01.391] Early signaling: FALSE
[10:52:01.391] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:01.391] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:01.406] Chunk #1 of 2 ... DONE
[10:52:01.406] Chunk #2 of 2 ...
[10:52:01.406]  - Finding globals in 'X' for chunk #2 ...
[10:52:01.406] getGlobalsAndPackages() ...
[10:52:01.406] |  Searching for globals ...
[10:52:01.407] |  :  globals found: [0] 
[10:52:01.407] |  Searching for globals ... DONE
[10:52:01.407] |  globals: [0] <none>
[10:52:01.408] |  packages: [0] <none>
[10:52:01.408] getGlobalsAndPackages() ... done
[10:52:01.403] |  :  .  |  :  .  |  List of 1
[10:52:01.403] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.403] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.403] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.403] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.403] |  :  .  |  :  .  |      ...)  
[10:52:01.403] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.403] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.403] |  :  .  |  :  .  |    ..- attr(*,[10:52:01.410]    + additional globals found: [n=0] 
 "call")= language plan(strategy)
[10:52:01.403] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:01.403] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.403] |  :  .  |  :  .  |      ...)  
[10:52:01.403] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.403] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.410] |  :  .  |  :  .  |  Not identical
[10:52:01.410]    + additional namespaces needed: [n=0] 
[10:52:01.410] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:01.411]  - Finding globals in 'X' for chunk #2 ... DONE
[10:52:01.411]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:01.411]  - seeds: <none>
[10:52:01.411]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:01.412] getGlobalsAndPackages() ...
[10:52:01.412] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:01.412] |  Resolving globals: FALSE
[10:52:01.412] |  Tweak future expression to call with '...' arguments ...
[10:52:01.413] |  :  {
[10:52:01.413] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:01.413] |  :      "# expression in do.call(), because function called uses '...'  "
[10:52:01.413] |  :      "# as a global variable                                         "
[10:52:01.413] |  :      do.call(function(...) {
[10:52:01.413] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:01.413] |  :          "# without having an '...' argument. This means '...' is treated"
[10:52:01.413] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:52:01.413] |  :          "# anonymous function.                                          "
[10:52:01.413] |  :          "#                                                              "
[10:52:01.413] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:52:01.413] |  :          "# function environment of FUN() to the calling environment.    "
[10:52:01.413] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:01.413] |  :          "# global environment, which is where globals are written.      "
[10:52:01.413] |  :          penv <- env <- environment(...future.FUN)
[10:52:01.413] |  :          repeat {
[10:52:01.413] |  :              if (identical(env, globalenv()) || identical(env, 
[10:52:01.413] |  :                  emptyenv())) 
[10:52:01.413] |  :                  break
[10:52:01.413] |  :              penv <- env
[10:52:01.413] |  :              env <- parent.env(env)
[10:52:01.413] |  :          }
[10:52:01.413] |  :          if (identical(penv, globalenv())) {
[10:52:01.413] |  :              environment(...future.FUN) <- environment()
[10:52:01.413] |  :          }
[10:52:01.413] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:01.413] |  :              !isNamespace(penv)) {
[10:52:01.413] |  :              parent.env(penv) <- environment()
[10:52:01.413] |  :          }
[10:52:01.413] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:01.413] |  :          {
[10:52:01.413] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:01.413] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:01.413] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:01.413] |  :                  on.exit(options(oopts), add = TRUE)
[10:52:01.413] |  :              }
[10:52:01.413] |  :              {
[10:52:01.413] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:01.413] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:01.413] |  :                    ...future.FUN(...future.X_jj, ...)
[10:52:01.413] |  :                  })
[10:52:01.413] |  :              }
[10:52:01.413] |  :          }
[10:52:01.413] |  :      }, args = future.call.arguments)
[10:52:01.413] |  :  }
[10:52:01.413] |  Tweak future expression to call with '...' arguments ... DONE
[10:52:01.413] |  Search for packages associated with the globals ...
[10:52:01.414] |  :  Packages associated with globals: [0] 
[10:52:01.414] |  :  Packages: [0] 
[10:52:01.415] |  Search for packages associated with the globals ... DONE
[10:52:01.415] |  Packages after dropping 'base': [0] 
[10:52:01.415] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:01.415] |  packages: [0] 
[10:52:01.416] getGlobalsAndPackages() ... done
[10:52:01.416] run() for Future (‘Future’) ...
[10:52:01.416] |  state: ‘created’
[10:52:01.416] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.417] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.417] |  Using MulticoreFutureBackend ...
[10:52:01.417] |  :  Launching futures ...
[10:52:01.417] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:01.411] |  :  .  |  :  .  |  :  List of 2
[10:52:01.411] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.411] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.411] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.411] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.411] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.411] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.411] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.411] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.411] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.411] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.411] |  :  .  |  :  .  |  :      ...)  
[10:52:01.411] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.411] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.411] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:01.411] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:01.411] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.411] |  :  .  |  :  .  |  :      ...)  
[10:52:01.411] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.417] |  :  .  |  getFutureData() ...
[10:52:01.417] |  :  .  |  :  getFutureCore() ...
[10:52:01.418] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:01.418] |  :  .  |  :  getFutureCore() ... done
[10:52:01.418] |  :  .  |  :  .  |  :  Formals differ
[10:52:01.418] |  :  .  |  :  getFutureCapture() ...
[10:52:01.418] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:01.418] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:01.418] |  :  .  |  :  getFutureCapture() ... done
[10:52:01.418] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:01.418] |  :  .  |  :  getFutureContext() ...
[10:52:01.418] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:01.419] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.419] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:01.419] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.419] |  :  .  |  :  .  List of future strategies:
[10:52:01.419] |  :  .  |  :  .  1. sequential:
[10:52:01.419] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:01.419] |  :  .  |  :  .     - tweaked: FALSE
[10:52:01.419] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.419] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:01.419] |  :  .  |  :  getFutureContext() ... done
[10:52:01.420] |  :  .  |  getFutureData() ... done
[10:52:01.420] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:01.420] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:01.419] |  :  .  |  :  .  List of 1
[10:52:01.419] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.419] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.419] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.419] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.419] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.419] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.419] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.422] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:01.422] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:01.422] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.422] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:01.423] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.423] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:01.423] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:01.423] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:01.423] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:01.423] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:01.424] |  :  .  |  assign_globals() ...
[10:52:01.427] |  :  .  |  MulticoreFuture started
[10:52:01.427] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:01.427] |  :  .  |  attachPackages() ...
[10:52:01.428] |  :  Launching futures ... done
[10:52:01.428] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:01.428] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:01.428] |  :  .  |  attachPackages() ... DONE
[10:52:01.429] |  Using MulticoreFutureBackend ... done
[10:52:01.429] |  :  .  |  attachPackages() ...
[10:52:01.429] run() for Future (‘MulticoreFuture’) ... done
[10:52:01.429] |  :  .  |  :  packages: [n=0] 
[10:52:01.429] Created future:
[10:52:01.429] |  :  .  |  attachPackages() ... DONE
[10:52:01.431] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.424] |  :  .  |  List of 5
[10:52:01.424] |  :  .  |   $ ...future.FUN            :function (x)  
[10:52:01.424] |  :  .  |   $ future.call.arguments    : list()
[10:52:01.424] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:01.424] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:52:01.424] |  :  .  |    ..$ : int 1
[10:52:01.424] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:01.424] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:01.424] |  :  .  |   - attr(*, "where")=List of 5
[10:52:01.424] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:01.424] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:52:01.424] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:01.424] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:01.424] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:01.424] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:01.424] |  :  .  |   - attr(*, "total_size")= num 5632
[10:52:01.424] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:01.424] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:01.432] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:01.431] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:01.432] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:01.432] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:52:01.432] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:01.432] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.432] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:01.432] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:01.432] |  :  .  |  assign_globals() ... done
[10:52:01.433] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:01.433] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:01.434] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:01.434] |  :  .  |  :  .  |  New stack:
[10:52:01.434] |  :  .  |  :  .  |  List of 1
[10:52:01.434] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.434] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.434] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.434] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.434] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.434] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.434] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.438] |  :  .  |  :  .  |  Old stack:
[10:52:01.443] readImmediateCondition() ...
[10:52:01.439] |  :  .  |  :  .  |  List of 1
[10:52:01.439] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.439] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.439] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.439] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.439] |  :  .  |  :  .  |      ...)  
[10:52:01.439] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.439] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.439] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:01.439] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:01.439] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.439] |  :  .  |  :  .  |      ...)  
[10:52:01.439] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.439] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.444]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.444] |  :  .  |  :  .  |  Not identical
[10:52:01.444]  - Number of RDS files: 0
[10:52:01.444] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:01.444] readImmediateCondition() ... DONE
[10:52:01.430] MulticoreFuture:
[10:52:01.430] Label: ‘future_lapply-2’
[10:52:01.430] Expression:
[10:52:01.430] {
[10:52:01.430]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:01.430]     "# expression in do.call(), because function called uses '...'  "
[10:52:01.430]     "# as a global variable                                         "
[10:52:01.430]     do.call(function(...) {
[10:52:01.430]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:01.430]         "# without having an '...' argument. This means '...' is treated"
[10:52:01.430]         "# as a global variable. This may happen when FUN() is an       "
[10:52:01.430]         "# anonymous function.                                          "
[10:52:01.430]         "#                                                              "
[10:52:01.430]         "# If an anonymous function, we will make sure to restore the   "
[10:52:01.430]         "# function environment of FUN() to the calling environment.    "
[10:52:01.430]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:01.430]         "# global environment, which is where globals are written.      "
[10:52:01.430]         penv <- env <- environment(...future.FUN)
[10:52:01.430]         repeat {
[10:52:01.430]             if (identical(env, globalenv()) || identical(env, 
[10:52:01.430]                 emptyenv())) 
[10:52:01.430]                 break
[10:52:01.430]             penv <- env
[10:52:01.430]             env <- parent.env(env)
[10:52:01.430]         }
[10:52:01.430]         if (identical(penv, globalenv())) {
[10:52:01.430]             environment(...future.FUN) <- environment()
[10:52:01.430]         }
[10:52:01.430]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:01.430]             !isNamespace(penv)) {
[10:52:01.430]             parent.env(penv) <- environment()
[10:52:01.430]         }
[10:52:01.430]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:01.430]         {
[10:52:01.430]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:01.430]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:01.430]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:01.430]                 on.exit(options(oopts), add = TRUE)
[10:52:01.430]             }
[10:52:01.430]             {
[10:52:01.430]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:01.430]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:01.430]                   ...future.FUN(...future.X_jj, ...)
[10:52:01.430]                 })
[10:52:01.430]             }
[10:52:01.430]         }
[10:52:01.430]     }, args = future.call.arguments)
[10:52:01.430] }
[10:52:01.430] Lazy evaluation: FALSE
[10:52:01.430] Asynchronous evaluation: TRUE
[10:52:01.430] Local evaluation: TRUE
[10:52:01.430] Environment: R_GlobalEnv
[10:52:01.430] Capture standard output: FALSE
[10:52:01.430] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:01.430] Immediate condition classes: ‘immediateCondition’
[10:52:01.430] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:01.430] Packages: <none>
[10:52:01.430] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:01.430] Resolved: FALSE
[10:52:01.430] Value: <not collected>
[10:52:01.430] Conditions captured: <none>
[10:52:01.430] Early signaling: FALSE
[10:52:01.430] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:01.430] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:01.445] Chunk #2 of 2 ... DONE
[10:52:01.446] Launching 2 futures (chunks) ... DONE
[10:52:01.446] Resolving 2 futures (chunks) ...
[10:52:01.446] value() on list ...
[10:52:01.446] |  recursive: 0
[10:52:01.447] |  length: 2
[10:52:01.447] |  
[10:52:01.447] |  Number of remaining objects: 2
[10:52:01.447] |  checking value #1 ...
[10:52:01.447] |  :  'obj' is MulticoreFuture
[10:52:01.444] |  :  .  |  :  .  |  :  List of 2
[10:52:01.444] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.444] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.444] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.444] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.444] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.444] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.444] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.444] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.444] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.444] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.444] |  :  .  |  :  .  |  :      ...)  
[10:52:01.444] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.444] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.444] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:01.444] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:01.444] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.444] |  :  .  |  :  .  |  :      ...)  
[10:52:01.444] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.458] |  :  readImmediateCondition() ...
[10:52:01.458] |  :  .  |  :  .  |  :  Formals differ
[10:52:01.458] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.458] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:01.459] |  :   - Number of RDS files: 0
[10:52:01.459] |  :  readImmediateCondition() ... DONE
[10:52:01.459] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:01.459] |  checking value #1 ... done
[10:52:01.459] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:01.459] |  checking value #2 ...
[10:52:01.459] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:01.459] |  :  'obj' is MulticoreFuture
[10:52:01.459] |  :  .  |  :  .  List of future strategies:
[10:52:01.459] |  :  .  |  :  .  1. sequential:
[10:52:01.459] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:01.459] |  :  .  |  :  .     - tweaked: FALSE
[10:52:01.459] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.460] |  :  .  |  :  .  List of 1
[10:52:01.460] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.460] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.460] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.460] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.460] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.460] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.460] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.465] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:01.465] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:01.465] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.465] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:01.465] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.465] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:01.466] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:01.466] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:01.466] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:01.466] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:01.467] |  :  .  |  assign_globals() ...
[10:52:01.470] |  :  readImmediateCondition() ...
[10:52:01.470] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.470] |  :   - Number of RDS files: 0
[10:52:01.471] |  :  readImmediateCondition() ... DONE
[10:52:01.471] |  checking value #2 ... done
[10:52:01.467] |  :  .  |  List of 5
[10:52:01.467] |  :  .  |   $ ...future.FUN            :function (x)  
[10:52:01.467] |  :  .  |   $ future.call.arguments    : list()
[10:52:01.467] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:01.467] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:52:01.467] |  :  .  |    ..$ : int 0
[10:52:01.467] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:01.467] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:01.467] |  :  .  |   - attr(*, "where")=List of 5
[10:52:01.467] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:01.467] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:52:01.467] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:01.467] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:01.467] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:01.467] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:01.467] |  :  .  |   - attr(*, "total_size")= num 5632
[10:52:01.467] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:01.467] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:01.474] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:01.474] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:01.474] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:52:01.474] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:01.474] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:01.474] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:01.475] |  :  .  |  assign_globals() ... done
[10:52:01.477] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:01.477] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:01.477] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:01.477] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:01.477] |  :  .  |  :  .  |  :  New stack:
[10:52:01.477] |  :  .  |  :  .  |  :  List of 1
[10:52:01.477] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.477] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.477] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.477] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.477] |  :  .  |  :  .  |  :      ...)  
[10:52:01.477] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.477] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.477] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:01.477] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:01.477] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.477] |  :  .  |  :  .  |  :      ...)  
[10:52:01.477] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.477] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.481] |  :  .  |  :  .  |  :  Old stack:
[10:52:01.481] |  Number of remaining objects: 2
[10:52:01.481] |  checking value #1 ...
[10:52:01.482] |  :  'obj' is MulticoreFuture
[10:52:01.481] |  :  .  |  :  .  |  :  List of 1
[10:52:01.481] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.481] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.481] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.481] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.481] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.481] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.481] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.486] |  :  .  |  :  .  |  :  Not identical
[10:52:01.486] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:01.486] |  :  .  |  :  .  |  :  .  List of 2
[10:52:01.486] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.486] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.486] |  :  .  |  :  .  |  :  .      ...)  
[10:52:01.486] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:01.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:01.486] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.486] |  :  .  |  :  .  |  :  .      ...)  
[10:52:01.486] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.486] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.486] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.491] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:01.491] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:01.491] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:01.492] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:01.492] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:01.492] |  :  readImmediateCondition() ...
[10:52:01.492] |  :  .  |  :  .  |  List of future strategies:
[10:52:01.492] |  :  .  |  :  .  |  1. multicore:
[10:52:01.492] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:01.492] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:01.492] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:01.492] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.493] |  :   - Number of RDS files: 0
[10:52:01.493] |  :  readImmediateCondition() ... DONE
[10:52:01.493] |  checking value #1 ... done
[10:52:01.493] |  checking value #2 ...
[10:52:01.493] |  :  'obj' is MulticoreFuture
[10:52:01.492] |  :  .  |  :  .  |  List of 1
[10:52:01.492] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.492] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.492] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.492] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.492] |  :  .  |  :  .  |      ...)  
[10:52:01.492] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.492] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.492] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:01.492] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:01.492] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.492] |  :  .  |  :  .  |      ...)  
[10:52:01.492] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.492] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.496] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:01.496] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:01.496] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.496] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:01.496] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.497] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:01.497] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:01.497] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:01.497] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:01.497] |  :  readImmediateCondition() ...
[10:52:01.497] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.498] |  :   - Number of RDS files: 0
[10:52:01.498] |  :  readImmediateCondition() ... DONE
[10:52:01.498] |  :  MulticoreFuture #2
[10:52:01.498] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:01.498] |  :  .  nx: 2
[10:52:01.498] |  :  .  relay: TRUE
[10:52:01.498] |  :  .  stdout: TRUE
[10:52:01.499] |  :  .  signal: TRUE
[10:52:01.499] |  :  .  resignal: FALSE
[10:52:01.499] |  :  .  force: TRUE
[10:52:01.499] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:01.499] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:52:01.499] |  :  .  until=1
[10:52:01.499] |  :  .  relaying element #1
[10:52:01.499] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:01.500] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:01.500] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:01.500] |  :  value(<MulticoreFuture>, ...) ...
[10:52:01.501] |  :  .  result() for MulticoreFuture ...
[10:52:01.502] |  :  .  |  readImmediateCondition() ...
[10:52:01.502] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.503] |  :  .  |   - Number of RDS files: 0
[10:52:01.503] |  :  .  |  readImmediateCondition() ... DONE
[10:52:01.503] |  :  .  |  result() for MulticoreFuture ...
[10:52:01.503] |  :  .  |  result() for MulticoreFuture ... done
[10:52:01.503] |  :  .  result() for MulticoreFuture ... done
[10:52:01.504] |  :  .  result() for MulticoreFuture ...
[10:52:01.504] |  :  .  result() for MulticoreFuture ... done
[10:52:01.504] |  :  .  value: <list>
[10:52:01.504] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:01.504] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:01.505] |  :  .  nx: 2
[10:52:01.505] |  :  .  relay: TRUE
[10:52:01.505] |  :  .  stdout: TRUE
[10:52:01.505] |  :  .  signal: TRUE
[10:52:01.505] |  :  .  resignal: FALSE
[10:52:01.505] |  :  .  force: TRUE
[10:52:01.505] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:01.506] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:01.506] |  :  .  until=1
[10:52:01.506] |  :  .  relaying element #1
[10:52:01.506] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:01.506] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:01.506] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:01.507] |  :  length: 1 (resolved future 2)
[10:52:01.507] |  checking value #2 ... done
[10:52:01.517] |  Number of remaining objects: 1
[10:52:01.517] |  checking value #1 ...
[10:52:01.518] |  :  'obj' is MulticoreFuture
[10:52:01.528] |  :  readImmediateCondition() ...
[10:52:01.528] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.528] |  :   - Number of RDS files: 0
[10:52:01.528] |  :  readImmediateCondition() ... DONE
[10:52:01.528] |  checking value #1 ... done
[10:52:01.541] |  Number of remaining objects: 1
[10:52:01.541] |  checking value #1 ...
[10:52:01.541] |  :  'obj' is MulticoreFuture
[10:52:01.552] |  :  readImmediateCondition() ...
[10:52:01.552] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.552] |  :   - Number of RDS files: 0
[10:52:01.553] |  :  readImmediateCondition() ... DONE
[10:52:01.553] |  checking value #1 ... done
[10:52:01.563] |  Number of remaining objects: 1
[10:52:01.563] |  checking value #1 ...
[10:52:01.563] |  :  'obj' is MulticoreFuture
[10:52:01.574] |  :  readImmediateCondition() ...
[10:52:01.574] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.574] |  :   - Number of RDS files: 0
[10:52:01.574] |  :  readImmediateCondition() ... DONE
[10:52:01.575] |  checking value #1 ... done
[10:52:01.585] |  Number of remaining objects: 1
[10:52:01.585] |  checking value #1 ...
[10:52:01.585] |  :  'obj' is MulticoreFuture
[10:52:01.596] |  :  readImmediateCondition() ...
[10:52:01.596] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.596] |  :   - Number of RDS files: 0
[10:52:01.596] |  :  readImmediateCondition() ... DONE
[10:52:01.596] |  checking value #1 ... done
[10:52:01.607] |  Number of remaining objects: 1
[10:52:01.607] |  checking value #1 ...
[10:52:01.607] |  :  'obj' is MulticoreFuture
[10:52:01.617] |  :  readImmediateCondition() ...
[10:52:01.618] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.618] |  :   - Number of RDS files: 0
[10:52:01.618] |  :  readImmediateCondition() ... DONE
[10:52:01.618] |  checking value #1 ... done
[10:52:01.628] |  Number of remaining objects: 1
[10:52:01.629] |  checking value #1 ...
[10:52:01.629] |  :  'obj' is MulticoreFuture
[10:52:01.639] |  :  readImmediateCondition() ...
[10:52:01.639] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.640] |  :   - Number of RDS files: 0
[10:52:01.640] |  :  readImmediateCondition() ... DONE
[10:52:01.640] |  checking value #1 ... done
[10:52:01.650] |  Number of remaining objects: 1
[10:52:01.651] |  checking value #1 ...
[10:52:01.651] |  :  'obj' is MulticoreFuture
[10:52:01.661] |  :  readImmediateCondition() ...
[10:52:01.661] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.661] |  :   - Number of RDS files: 0
[10:52:01.662] |  :  readImmediateCondition() ... DONE
[10:52:01.662] |  checking value #1 ... done
[10:52:01.672] |  Number of remaining objects: 1
[10:52:01.672] |  checking value #1 ...
[10:52:01.672] |  :  'obj' is MulticoreFuture
[10:52:01.683] |  :  readImmediateCondition() ...
[10:52:01.683] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.683] |  :   - Number of RDS files: 0
[10:52:01.683] |  :  readImmediateCondition() ... DONE
[10:52:01.683] |  checking value #1 ... done
[10:52:01.694] |  Number of remaining objects: 1
[10:52:01.694] |  checking value #1 ...
[10:52:01.694] |  :  'obj' is MulticoreFuture
[10:52:01.704] |  :  readImmediateCondition() ...
[10:52:01.705] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.705] |  :   - Number of RDS files: 0
[10:52:01.705] |  :  readImmediateCondition() ... DONE
[10:52:01.705] |  checking value #1 ... done
[10:52:01.715] |  Number of remaining objects: 1
[10:52:01.715] |  checking value #1 ...
[10:52:01.715] |  :  'obj' is MulticoreFuture
[10:52:01.726] |  :  readImmediateCondition() ...
[10:52:01.726] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.726] |  :   - Number of RDS files: 0
[10:52:01.726] |  :  readImmediateCondition() ... DONE
[10:52:01.726] |  checking value #1 ... done
[10:52:01.737] |  Number of remaining objects: 1
[10:52:01.737] |  checking value #1 ...
[10:52:01.737] |  :  'obj' is MulticoreFuture
[10:52:01.747] |  :  readImmediateCondition() ...
[10:52:01.747] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.748] |  :   - Number of RDS files: 0
[10:52:01.748] |  :  readImmediateCondition() ... DONE
[10:52:01.748] |  checking value #1 ... done
[10:52:01.758] |  Number of remaining objects: 1
[10:52:01.758] |  checking value #1 ...
[10:52:01.758] |  :  'obj' is MulticoreFuture
[10:52:01.768] |  :  readImmediateCondition() ...
[10:52:01.769] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.769] |  :   - Number of RDS files: 0
[10:52:01.769] |  :  readImmediateCondition() ... DONE
[10:52:01.770] |  checking value #1 ... done
[10:52:01.780] |  Number of remaining objects: 1
[10:52:01.780] |  checking value #1 ...
[10:52:01.780] |  :  'obj' is MulticoreFuture
[10:52:01.790] |  :  readImmediateCondition() ...
[10:52:01.790] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.791] |  :   - Number of RDS files: 0
[10:52:01.791] |  :  readImmediateCondition() ... DONE
[10:52:01.791] |  checking value #1 ... done
[10:52:01.801] |  Number of remaining objects: 1
[10:52:01.801] |  checking value #1 ...
[10:52:01.801] |  :  'obj' is MulticoreFuture
[10:52:01.812] |  :  readImmediateCondition() ...
[10:52:01.812] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.812] |  :   - Number of RDS files: 0
[10:52:01.812] |  :  readImmediateCondition() ... DONE
[10:52:01.812] |  checking value #1 ... done
[10:52:01.822] |  Number of remaining objects: 1
[10:52:01.823] |  checking value #1 ...
[10:52:01.823] |  :  'obj' is MulticoreFuture
[10:52:01.833] |  :  readImmediateCondition() ...
[10:52:01.833] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.833] |  :   - Number of RDS files: 0
[10:52:01.833] |  :  readImmediateCondition() ... DONE
[10:52:01.833] |  checking value #1 ... done
[10:52:01.844] |  Number of remaining objects: 1
[10:52:01.844] |  checking value #1 ...
[10:52:01.844] |  :  'obj' is MulticoreFuture
[10:52:01.854] |  :  readImmediateCondition() ...
[10:52:01.854] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.855] |  :   - Number of RDS files: 0
[10:52:01.855] |  :  readImmediateCondition() ... DONE
[10:52:01.855] |  checking value #1 ... done
[10:52:01.865] |  Number of remaining objects: 1
[10:52:01.865] |  checking value #1 ...
[10:52:01.865] |  :  'obj' is MulticoreFuture
[10:52:01.876] |  :  readImmediateCondition() ...
[10:52:01.876] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.876] |  :   - Number of RDS files: 0
[10:52:01.876] |  :  readImmediateCondition() ... DONE
[10:52:01.876] |  checking value #1 ... done
[10:52:01.886] |  Number of remaining objects: 1
[10:52:01.887] |  checking value #1 ...
[10:52:01.887] |  :  'obj' is MulticoreFuture
[10:52:01.897] |  :  readImmediateCondition() ...
[10:52:01.897] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.897] |  :   - Number of RDS files: 0
[10:52:01.898] |  :  readImmediateCondition() ... DONE
[10:52:01.898] |  checking value #1 ... done
[10:52:01.908] |  Number of remaining objects: 1
[10:52:01.908] |  checking value #1 ...
[10:52:01.908] |  :  'obj' is MulticoreFuture
[10:52:01.919] |  :  readImmediateCondition() ...
[10:52:01.919] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.919] |  :   - Number of RDS files: 0
[10:52:01.919] |  :  readImmediateCondition() ... DONE
[10:52:01.919] |  checking value #1 ... done
[10:52:01.929] |  Number of remaining objects: 1
[10:52:01.930] |  checking value #1 ...
[10:52:01.930] |  :  'obj' is MulticoreFuture
[10:52:01.936] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:01.936] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:01.936] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:01.937] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:01.937] |  :  .  |  :  .  |  :  New stack:
[10:52:01.940] |  :  readImmediateCondition() ...
[10:52:01.937] |  :  .  |  :  .  |  :  List of 1
[10:52:01.937] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.937] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.937] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.937] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.937] |  :  .  |  :  .  |  :      ...)  
[10:52:01.937] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.937] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.937] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:01.937] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:01.937] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.937] |  :  .  |  :  .  |  :      ...)  
[10:52:01.937] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.937] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.940] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.940] |  :  .  |  :  .  |  :  Old stack:
[10:52:01.941] |  :   - Number of RDS files: 0
[10:52:01.941] |  :  readImmediateCondition() ... DONE
[10:52:01.941] |  checking value #1 ... done
[10:52:01.940] |  :  .  |  :  .  |  :  List of 1
[10:52:01.940] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.940] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.940] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.940] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.940] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.940] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.940] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.943] |  :  .  |  :  .  |  :  Not identical
[10:52:01.943] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:01.943] |  :  .  |  :  .  |  :  .  List of 2
[10:52:01.943] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.943] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.943] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.943] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.943] |  :  .  |  :  .  |  :  .      ...)  
[10:52:01.943] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.943] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.943] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:01.943] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:01.943] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.943] |  :  .  |  :  .  |  :  .      ...)  
[10:52:01.943] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.943] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.943] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.943] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.943] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.943] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.943] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.947] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:01.948] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:01.948] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:01.948] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:01.948] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:01.948] |  :  .  |  :  .  |  List of future strategies:
[10:52:01.948] |  :  .  |  :  .  |  1. multicore:
[10:52:01.948] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:01.948] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:01.948] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:01.951] |  Number of remaining objects: 1
[10:52:01.951] |  checking value #1 ...
[10:52:01.951] |  :  'obj' is MulticoreFuture
[10:52:01.948] |  :  .  |  :  .  |  List of 1
[10:52:01.948] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:01.948] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:01.948] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:01.948] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.948] |  :  .  |  :  .  |      ...)  
[10:52:01.948] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.948] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.948] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:01.948] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:01.948] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:01.948] |  :  .  |  :  .  |      ...)  
[10:52:01.948] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:01.948] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:01.953] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:01.953] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:01.953] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.954] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:01.954] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.954] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:01.954] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:01.954] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:01.954] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:01.955] |  :  readImmediateCondition() ...
[10:52:01.955] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.955] |  :   - Number of RDS files: 0
[10:52:01.955] |  :  readImmediateCondition() ... DONE
[10:52:01.955] |  :  MulticoreFuture #1
[10:52:01.955] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:01.955] |  :  .  nx: 2
[10:52:01.956] |  :  .  relay: TRUE
[10:52:01.956] |  :  .  stdout: TRUE
[10:52:01.956] |  :  .  signal: TRUE
[10:52:01.956] |  :  .  resignal: FALSE
[10:52:01.956] |  :  .  force: TRUE
[10:52:01.956] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:01.956] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:01.956] |  :  .  until=1
[10:52:01.956] |  :  .  relaying element #1
[10:52:01.956] |  :  .  result() for MulticoreFuture ...
[10:52:01.957] |  :  .  |  readImmediateCondition() ...
[10:52:01.957] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:01.957] |  :  .  |   - Number of RDS files: 0
[10:52:01.957] |  :  .  |  readImmediateCondition() ... DONE
[10:52:01.957] |  :  .  |  result() for MulticoreFuture ...
[10:52:01.958] |  :  .  |  result() for MulticoreFuture ... done
[10:52:01.958] |  :  .  result() for MulticoreFuture ... done
[10:52:01.958] |  :  .  result() for MulticoreFuture ...
[10:52:01.960] |  :  .  result() for MulticoreFuture ... done
[10:52:01.960] |  :  .  result() for MulticoreFuture ...
[10:52:01.960] |  :  .  result() for MulticoreFuture ... done
[10:52:01.960] |  :  .  result() for MulticoreFuture ...
[10:52:01.960] |  :  .  result() for MulticoreFuture ... done
[10:52:01.960] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:01.961] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:01.961] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:01.961] |  :  value(<MulticoreFuture>, ...) ...
[10:52:01.961] |  :  .  result() for MulticoreFuture ...
[10:52:01.961] |  :  .  result() for MulticoreFuture ... done
[10:52:01.961] |  :  .  result() for MulticoreFuture ...
[10:52:01.961] |  :  .  result() for MulticoreFuture ... done
[10:52:01.962] |  :  .  value: <list>
[10:52:01.962] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:01.962] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:01.962] |  :  .  nx: 2
[10:52:01.962] |  :  .  relay: TRUE
[10:52:01.962] |  :  .  stdout: TRUE
[10:52:01.962] |  :  .  signal: TRUE
[10:52:01.962] |  :  .  resignal: FALSE
[10:52:01.962] |  :  .  force: TRUE
[10:52:01.963] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:01.963] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:01.963] |  :  .  until=2
[10:52:01.963] |  :  .  relaying element #2
[10:52:01.963] |  :  .  result() for MulticoreFuture ...
[10:52:01.963] |  :  .  result() for MulticoreFuture ... done
[10:52:01.963] |  :  .  result() for MulticoreFuture ...
[10:52:01.963] |  :  .  result() for MulticoreFuture ... done
[10:52:01.964] |  :  .  result() for MulticoreFuture ...
[10:52:01.964] |  :  .  result() for MulticoreFuture ... done
[10:52:01.964] |  :  .  result() for MulticoreFuture ...
[10:52:01.964] |  :  .  result() for MulticoreFuture ... done
[10:52:01.964] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:01.964] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:01.964] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:01.964] |  :  length: 0 (resolved future 1)
[10:52:01.965] |  checking value #1 ... done
[10:52:01.965] |  Relaying remaining futures ...
[10:52:01.965] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:01.965] |  :  .  nx: 2
[10:52:01.965] |  :  .  relay: TRUE
[10:52:01.965] |  :  .  stdout: TRUE
[10:52:01.965] |  :  .  signal: TRUE
[10:52:01.965] |  :  .  resignal: FALSE
[10:52:01.965] |  :  .  force: TRUE
[10:52:01.966] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:01.966] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:01.966] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:01.966] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:01.966] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:01.966] |  Relaying remaining futures ... done
[10:52:01.966] value() on list ... done
[10:52:01.966]  - Number of value chunks collected: 2
[10:52:01.966] Resolving 2 futures (chunks) ... DONE
[10:52:01.966] Reducing values from 2 chunks ...
[10:52:01.967]  - Number of values collected after concatenation: 2
[10:52:01.967]  - Number of values expected: 2
[10:52:01.967] Reducing values from 2 chunks ... DONE
[10:52:01.967] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = FALSE) ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ...
[10:52:01.967] future_lapply() ...
[10:52:01.968] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.968] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:01.968] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.969] Number of chunks: 2
[10:52:01.969] getGlobalsAndPackagesXApply() ...
[10:52:01.969]  - future.globals: TRUE
[10:52:01.969] getGlobalsAndPackages() ...
[10:52:01.969] |  Searching for globals ...
[10:52:01.971] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:52:01.971] |  Searching for globals ... DONE
[10:52:01.971] |  Resolving globals: FALSE
[10:52:01.971] |  Search for packages associated with the globals ...
[10:52:01.972] |  :  Packages associated with globals: [1] ‘base’
[10:52:01.972] |  :  Packages: [1] ‘base’
[10:52:01.972] |  Search for packages associated with the globals ... DONE
[10:52:01.972] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:52:01.973] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:52:01.973] |  Packages after dropping 'base': [0] 
[10:52:01.973] |  globals: [1] ‘FUN’
[10:52:01.973] |  packages: [0] 
[10:52:01.973] getGlobalsAndPackages() ... done
[10:52:01.973]  - globals found/used: [n=1] ‘FUN’
[10:52:01.973]  - needed namespaces: [n=0] 
[10:52:01.973] Finding globals ... DONE
[10:52:01.973]  - use_args: TRUE
[10:52:01.974]  - Getting '...' globals ...
[10:52:01.974] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:52:01.974] |  recursive: 0
[10:52:01.974] |  length: 1
[10:52:01.974] |  elements: ‘...’
[10:52:01.974] |  'obj' is DotDotDotList
[10:52:01.974] |  resolve(obj, ...) ...
[10:52:01.975] |  resolve(obj, ...) ... done
[10:52:01.975] |  length: 0 (resolved future 1)
[10:52:01.975] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:52:01.975]    - '...' content: [n=0] 
[10:52:01.975] List of 1
[10:52:01.975]  $ ...: list()
[10:52:01.975]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:01.975]  - attr(*, "where")=List of 1
[10:52:01.975]   ..$ ...:<environment: 0x562580f47ef0> 
[10:52:01.975]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:01.975]  - attr(*, "resolved")= logi TRUE
[10:52:01.975]  - attr(*, "total_size")= num NA
[10:52:01.978]  - Getting '...' globals ... DONE
[10:52:01.978] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:52:01.978] List of 2
[10:52:01.978]  $ ...future.FUN:function (x)  
[10:52:01.978]  $ ...          : list()
[10:52:01.978]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:01.978]  - attr(*, "where")=List of 2
[10:52:01.978]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:01.978]   ..$ ...          :<environment: 0x562580f47ef0> 
[10:52:01.978]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:01.978]  - attr(*, "resolved")= logi FALSE
[10:52:01.978]  - attr(*, "total_size")= num 5632
[10:52:01.983] Packages to be attached in all futures: [n=0] 
[10:52:01.983] getGlobalsAndPackagesXApply() ... DONE
[10:52:01.983] Number of futures (= number of chunks): 2
[10:52:01.984] Launching 2 futures (chunks) ...
[10:52:01.984] Chunk #1 of 2 ...
[10:52:01.984]  - Finding globals in 'X' for chunk #1 ...
[10:52:01.984] getGlobalsAndPackages() ...
[10:52:01.984] |  Searching for globals ...
[10:52:01.984] |  :  globals found: [0] 
[10:52:01.985] |  Searching for globals ... DONE
[10:52:01.985] |  globals: [0] <none>
[10:52:01.985] |  packages: [0] <none>
[10:52:01.985] getGlobalsAndPackages() ... done
[10:52:01.985]    + additional globals found: [n=0] 
[10:52:01.985]    + additional namespaces needed: [n=0] 
[10:52:01.985]  - Finding globals in 'X' for chunk #1 ... DONE
[10:52:01.985]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:01.985]  - seeds: <none>
[10:52:01.985]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:01.986] getGlobalsAndPackages() ...
[10:52:01.986] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:01.986] |  Resolving globals: FALSE
[10:52:01.986] |  Tweak future expression to call with '...' arguments ...
[10:52:01.986] |  :  {
[10:52:01.986] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:01.986] |  :      "# expression in do.call(), because function called uses '...'  "
[10:52:01.986] |  :      "# as a global variable                                         "
[10:52:01.986] |  :      do.call(function(...) {
[10:52:01.986] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:01.986] |  :          "# without having an '...' argument. This means '...' is treated"
[10:52:01.986] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:52:01.986] |  :          "# anonymous function.                                          "
[10:52:01.986] |  :          "#                                                              "
[10:52:01.986] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:52:01.986] |  :          "# function environment of FUN() to the calling environment.    "
[10:52:01.986] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:01.986] |  :          "# global environment, which is where globals are written.      "
[10:52:01.986] |  :          penv <- env <- environment(...future.FUN)
[10:52:01.986] |  :          repeat {
[10:52:01.986] |  :              if (identical(env, globalenv()) || identical(env, 
[10:52:01.986] |  :                  emptyenv())) 
[10:52:01.986] |  :                  break
[10:52:01.986] |  :              penv <- env
[10:52:01.986] |  :              env <- parent.env(env)
[10:52:01.986] |  :          }
[10:52:01.986] |  :          if (identical(penv, globalenv())) {
[10:52:01.986] |  :              environment(...future.FUN) <- environment()
[10:52:01.986] |  :          }
[10:52:01.986] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:01.986] |  :              !isNamespace(penv)) {
[10:52:01.986] |  :              parent.env(penv) <- environment()
[10:52:01.986] |  :          }
[10:52:01.986] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:01.986] |  :          {
[10:52:01.986] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:01.986] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:01.986] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:01.986] |  :                  on.exit(options(oopts), add = TRUE)
[10:52:01.986] |  :              }
[10:52:01.986] |  :              {
[10:52:01.986] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:01.986] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:01.986] |  :                    ...future.FUN(...future.X_jj, ...)
[10:52:01.986] |  :                  })
[10:52:01.986] |  :              }
[10:52:01.986] |  :          }
[10:52:01.986] |  :      }, args = future.call.arguments)
[10:52:01.986] |  :  }
[10:52:01.987] |  Tweak future expression to call with '...' arguments ... DONE
[10:52:01.987] |  Search for packages associated with the globals ...
[10:52:01.987] |  :  Packages associated with globals: [0] 
[10:52:01.987] |  :  Packages: [0] 
[10:52:01.987] |  Search for packages associated with the globals ... DONE
[10:52:01.988] |  Packages after dropping 'base': [0] 
[10:52:01.988] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:01.988] |  packages: [0] 
[10:52:01.988] getGlobalsAndPackages() ... done
[10:52:01.988] run() for Future (‘Future’) ...
[10:52:01.988] |  state: ‘created’
[10:52:01.988] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.989] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.989] |  Using MulticoreFutureBackend ...
[10:52:01.989] |  :  Launching futures ...
[10:52:01.989] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:01.989] |  :  .  |  getFutureData() ...
[10:52:01.989] |  :  .  |  :  getFutureCore() ...
[10:52:01.989] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:01.989] |  :  .  |  :  getFutureCore() ... done
[10:52:01.989] |  :  .  |  :  getFutureCapture() ...
[10:52:01.990] |  :  .  |  :  getFutureCapture() ... done
[10:52:01.990] |  :  .  |  :  getFutureContext() ...
[10:52:01.990] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.990] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:01.990] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.990] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:01.990] |  :  .  |  :  getFutureContext() ... done
[10:52:01.990] |  :  .  |  getFutureData() ... done
[10:52:01.990] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:01.991] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:01.993] |  :  .  |  MulticoreFuture started
[10:52:01.993] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:01.993] |  :  Launching futures ... done
[10:52:01.994] |  :  .  |  attachPackages() ...
[10:52:01.994] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:01.994] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:01.994] |  Using MulticoreFutureBackend ... done
[10:52:01.994] run() for Future (‘MulticoreFuture’) ... done
[10:52:01.994] |  :  .  |  attachPackages() ... DONE
[10:52:01.994] Created future:
[10:52:01.995] |  :  .  |  attachPackages() ...
[10:52:01.995] |  :  .  |  :  packages: [n=0] 
[10:52:01.995] |  :  .  |  attachPackages() ... DONE
[10:52:01.996] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:01.996] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:01.996] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:01.997] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:01.997] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:01.997] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:01.998] |  :  .  |  :  .  |  New stack:
[10:52:01.998] |  :  .  |  :  .  |  List of 1
[10:52:01.998] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:01.998] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:01.998] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:01.998] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.998] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:01.998] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:01.998] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.002] |  :  .  |  :  .  |  Old stack:
[10:52:02.007] readImmediateCondition() ...
[10:52:02.002] |  :  .  |  :  .  |  List of 1
[10:52:02.002] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.002] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.002] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.002] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.002] |  :  .  |  :  .  |      ...)  
[10:52:02.002] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.002] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.002] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:02.002] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.002] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.002] |  :  .  |  :  .  |      ...)  
[10:52:02.002] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.002] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.007]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.007] |  :  .  |  :  .  |  Not identical
[10:52:02.007]  - Number of RDS files: 0
[10:52:02.007] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:02.008] readImmediateCondition() ... DONE
[10:52:01.995] MulticoreFuture:
[10:52:01.995] Label: ‘future_lapply-1’
[10:52:01.995] Expression:
[10:52:01.995] {
[10:52:01.995]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:01.995]     "# expression in do.call(), because function called uses '...'  "
[10:52:01.995]     "# as a global variable                                         "
[10:52:01.995]     do.call(function(...) {
[10:52:01.995]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:01.995]         "# without having an '...' argument. This means '...' is treated"
[10:52:01.995]         "# as a global variable. This may happen when FUN() is an       "
[10:52:01.995]         "# anonymous function.                                          "
[10:52:01.995]         "#                                                              "
[10:52:01.995]         "# If an anonymous function, we will make sure to restore the   "
[10:52:01.995]         "# function environment of FUN() to the calling environment.    "
[10:52:01.995]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:01.995]         "# global environment, which is where globals are written.      "
[10:52:01.995]         penv <- env <- environment(...future.FUN)
[10:52:01.995]         repeat {
[10:52:01.995]             if (identical(env, globalenv()) || identical(env, 
[10:52:01.995]                 emptyenv())) 
[10:52:01.995]                 break
[10:52:01.995]             penv <- env
[10:52:01.995]             env <- parent.env(env)
[10:52:01.995]         }
[10:52:01.995]         if (identical(penv, globalenv())) {
[10:52:01.995]             environment(...future.FUN) <- environment()
[10:52:01.995]         }
[10:52:01.995]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:01.995]             !isNamespace(penv)) {
[10:52:01.995]             parent.env(penv) <- environment()
[10:52:01.995]         }
[10:52:01.995]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:01.995]         {
[10:52:01.995]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:01.995]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:01.995]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:01.995]                 on.exit(options(oopts), add = TRUE)
[10:52:01.995]             }
[10:52:01.995]             {
[10:52:01.995]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:01.995]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:01.995]                   ...future.FUN(...future.X_jj, ...)
[10:52:01.995]                 })
[10:52:01.995]             }
[10:52:01.995]         }
[10:52:01.995]     }, args = future.call.arguments)
[10:52:01.995] }
[10:52:01.995] Lazy evaluation: FALSE
[10:52:01.995] Asynchronous evaluation: TRUE
[10:52:01.995] Local evaluation: TRUE
[10:52:01.995] Environment: R_GlobalEnv
[10:52:01.995] Capture standard output: TRUE
[10:52:01.995] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:01.995] Immediate condition classes: ‘immediateCondition’
[10:52:01.995] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:01.995] Packages: <none>
[10:52:01.995] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:01.995] Resolved: FALSE
[10:52:01.995] Value: <not collected>
[10:52:01.995] Conditions captured: <none>
[10:52:01.995] Early signaling: FALSE
[10:52:01.995] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:01.995] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:02.008] Chunk #1 of 2 ... DONE
[10:52:02.008] Chunk #2 of 2 ...
[10:52:02.009]  - Finding globals in 'X' for chunk #2 ...
[10:52:02.009] getGlobalsAndPackages() ...
[10:52:02.009] |  Searching for globals ...
[10:52:02.009] |  :  globals found: [0] 
[10:52:02.010] |  Searching for globals ... DONE
[10:52:02.010] |  globals: [0] <none>
[10:52:02.010] |  packages: [0] <none>
[10:52:02.010] getGlobalsAndPackages() ... done
[10:52:02.010]    + additional globals found: [n=0] 
[10:52:02.010]    + additional namespaces needed: [n=0] 
[10:52:02.010]  - Finding globals in 'X' for chunk #2 ... DONE
[10:52:02.011]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:02.011]  - seeds: <none>
[10:52:02.011]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:02.011] getGlobalsAndPackages() ...
[10:52:02.011] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:02.011] |  Resolving globals: FALSE
[10:52:02.011] |  Tweak future expression to call with '...' arguments ...
[10:52:02.012] |  :  {
[10:52:02.012] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:02.012] |  :      "# expression in do.call(), because function called uses '...'  "
[10:52:02.012] |  :      "# as a global variable                                         "
[10:52:02.012] |  :      do.call(function(...) {
[10:52:02.012] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:02.012] |  :          "# without having an '...' argument. This means '...' is treated"
[10:52:02.012] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:52:02.012] |  :          "# anonymous function.                                          "
[10:52:02.012] |  :          "#                                                              "
[10:52:02.012] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:52:02.012] |  :          "# function environment of FUN() to the calling environment.    "
[10:52:02.012] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:02.012] |  :          "# global environment, which is where globals are written.      "
[10:52:02.012] |  :          penv <- env <- environment(...future.FUN)
[10:52:02.012] |  :          repeat {
[10:52:02.012] |  :              if (identical(env, globalenv()) || identical(env, 
[10:52:02.012] |  :                  emptyenv())) 
[10:52:02.012] |  :                  break
[10:52:02.012] |  :              penv <- env
[10:52:02.012] |  :              env <- parent.env(env)
[10:52:02.012] |  :          }
[10:52:02.012] |  :          if (identical(penv, globalenv())) {
[10:52:02.012] |  :              environment(...future.FUN) <- environment()
[10:52:02.012] |  :          }
[10:52:02.012] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:02.012] |  :              !isNamespace(penv)) {
[10:52:02.012] |  :              parent.env(penv) <- environment()
[10:52:02.012] |  :          }
[10:52:02.012] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:02.012] |  :          {
[10:52:02.012] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:02.012] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:02.012] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:02.012] |  :                  on.exit(options(oopts), add = TRUE)
[10:52:02.012] |  :              }
[10:52:02.012] |  :              {
[10:52:02.012] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:02.012] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:02.012] |  :                    ...future.FUN(...future.X_jj, ...)
[10:52:02.012] |  :                  })
[10:52:02.012] |  :              }
[10:52:02.012] |  :          }
[10:52:02.012] |  :      }, args = future.call.arguments)
[10:52:02.012] |  :  }
[10:52:02.012] |  Tweak future expression to call with '...' arguments ... DONE
[10:52:02.012] |  Search for packages associated with the globals ...
[10:52:02.013] |  :  Packages associated with globals: [0] 
[10:52:02.013] |  :  Packages: [0] 
[10:52:02.013] |  Search for packages associated with the globals ... DONE
[10:52:02.014] |  Packages after dropping 'base': [0] 
[10:52:02.014] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:02.014] |  packages: [0] 
[10:52:02.014] getGlobalsAndPackages() ... done
[10:52:02.014] run() for Future (‘Future’) ...
[10:52:02.015] |  state: ‘created’
[10:52:02.015] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.015] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.015] |  Using MulticoreFutureBackend ...
[10:52:02.015] |  :  Launching futures ...
[10:52:02.015] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:02.015] |  :  .  |  getFutureData() ...
[10:52:02.016] |  :  .  |  :  getFutureCore() ...
[10:52:02.016] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:02.016] |  :  .  |  :  getFutureCore() ... done
[10:52:02.016] |  :  .  |  :  getFutureCapture() ...
[10:52:02.016] |  :  .  |  :  getFutureCapture() ... done
[10:52:02.016] |  :  .  |  :  getFutureContext() ...
[10:52:02.016] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.017] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:02.017] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.017] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:02.017] |  :  .  |  :  getFutureContext() ... done
[10:52:02.017] |  :  .  |  getFutureData() ... done
[10:52:02.017] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:02.018] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:02.008] |  :  .  |  :  .  |  :  List of 2
[10:52:02.008] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.008] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.008] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.008] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.008] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.008] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.008] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.008] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.008] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.008] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.008] |  :  .  |  :  .  |  :      ...)  
[10:52:02.008] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.008] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.008] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:02.008] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.008] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.008] |  :  .  |  :  .  |  :      ...)  
[10:52:02.008] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.020] |  :  .  |  :  .  |  :  Formals differ
[10:52:02.020] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:02.020] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:02.020] |  :  .  |  MulticoreFuture started
[10:52:02.020] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:02.021] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:02.021] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:02.021] |  :  Launching futures ... done
[10:52:02.021] |  :  .  |  attachPackages() ...
[10:52:02.021] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:02.021] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:02.021] |  :  .  |  :  .  List of future strategies:
[10:52:02.021] |  :  .  |  :  .  1. sequential:
[10:52:02.021] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:02.021] |  :  .  |  :  .     - tweaked: FALSE
[10:52:02.021] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.022] |  Using MulticoreFutureBackend ... done
[10:52:02.022] run() for Future (‘MulticoreFuture’) ... done
[10:52:02.022] |  :  .  |  attachPackages() ... DONE
[10:52:02.022] |  :  .  |  attachPackages() ...
[10:52:02.022] Created future:
[10:52:02.022] |  :  .  |  :  packages: [n=0] 
[10:52:02.023] |  :  .  |  attachPackages() ... DONE
[10:52:02.024] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.024] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:02.025] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.022] |  :  .  |  :  .  List of 1
[10:52:02.022] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.022] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.022] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.022] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.022] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.022] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.022] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.025] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:02.025] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:02.025] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:02.026] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.026] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:02.026] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:02.026] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:02.026] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.026] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:02.026] |  :  .  |  :  .  |  New stack:
[10:52:02.026] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:02.027] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:02.027] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:02.027] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:02.028] |  :  .  |  assign_globals() ...
[10:52:02.028] |  :  .  |  List of 5
[10:52:02.028] |  :  .  |   $ ...future.FUN            :function (x)  
[10:52:02.028] |  :  .  |   $ future.call.arguments    : list()
[10:52:02.028] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:02.028] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:52:02.028] |  :  .  |    ..$ : int 1
[10:52:02.028] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:02.028] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:02.028] |  :  .  |   - attr(*, "where")=List of 5
[10:52:02.028] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:02.028] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:52:02.028] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:02.028] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:02.028] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:02.028] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:02.028] |  :  .  |   - attr(*, "total_size")= num 5632
[10:52:02.028] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:02.028] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:02.033] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:02.033] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:02.033] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:52:02.033] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:02.033] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:02.034] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:02.034] |  :  .  |  assign_globals() ... done
[10:52:02.035] readImmediateCondition() ...
[10:52:02.035]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.036]  - Number of RDS files: 0
[10:52:02.036] readImmediateCondition() ... DONE
[10:52:02.022] MulticoreFuture:
[10:52:02.022] Label: ‘future_lapply-2’
[10:52:02.022] Expression:
[10:52:02.022] {
[10:52:02.022]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:02.022]     "# expression in do.call(), because function called uses '...'  "
[10:52:02.022]     "# as a global variable                                         "
[10:52:02.022]     do.call(function(...) {
[10:52:02.022]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:02.022]         "# without having an '...' argument. This means '...' is treated"
[10:52:02.022]         "# as a global variable. This may happen when FUN() is an       "
[10:52:02.022]         "# anonymous function.                                          "
[10:52:02.022]         "#                                                              "
[10:52:02.022]         "# If an anonymous function, we will make sure to restore the   "
[10:52:02.022]         "# function environment of FUN() to the calling environment.    "
[10:52:02.022]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:02.022]         "# global environment, which is where globals are written.      "
[10:52:02.022]         penv <- env <- environment(...future.FUN)
[10:52:02.022]         repeat {
[10:52:02.022]             if (identical(env, globalenv()) || identical(env, 
[10:52:02.022]                 emptyenv())) 
[10:52:02.022]                 break
[10:52:02.022]             penv <- env
[10:52:02.022]             env <- parent.env(env)
[10:52:02.022]         }
[10:52:02.022]         if (identical(penv, globalenv())) {
[10:52:02.022]             environment(...future.FUN) <- environment()
[10:52:02.022]         }
[10:52:02.022]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:02.022]             !isNamespace(penv)) {
[10:52:02.022]             parent.env(penv) <- environment()
[10:52:02.022]         }
[10:52:02.022]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:02.022]         {
[10:52:02.022]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:02.022]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:02.022]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:02.022]                 on.exit(options(oopts), add = TRUE)
[10:52:02.022]             }
[10:52:02.022]             {
[10:52:02.022]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:02.022]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:02.022]                   ...future.FUN(...future.X_jj, ...)
[10:52:02.022]                 })
[10:52:02.022]             }
[10:52:02.022]         }
[10:52:02.022]     }, args = future.call.arguments)
[10:52:02.022] }
[10:52:02.022] Lazy evaluation: FALSE
[10:52:02.022] Asynchronous evaluation: TRUE
[10:52:02.022] Local evaluation: TRUE
[10:52:02.022] Environment: R_GlobalEnv
[10:52:02.022] Capture standard output: TRUE
[10:52:02.022] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:02.022] Immediate condition classes: ‘immediateCondition’
[10:52:02.022] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:02.022] Packages: <none>
[10:52:02.022] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:02.022] Resolved: FALSE
[10:52:02.022] Value: <not collected>
[10:52:02.022] Conditions captured: <none>
[10:52:02.022] Early signaling: FALSE
[10:52:02.022] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:02.022] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:02.037] Chunk #2 of 2 ... DONE
[10:52:02.037] Launching 2 futures (chunks) ... DONE
[10:52:02.037] Resolving 2 futures (chunks) ...
[10:52:02.026] |  :  .  |  :  .  |  List of 1
[10:52:02.026] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.026] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.026] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.026] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.026] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.026] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.026] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.038] value() on list ...
[10:52:02.038] |  :  .  |  :  .  |  Old stack:
[10:52:02.038] |  recursive: 0
[10:52:02.041] |  length: 2
[10:52:02.042] |  
[10:52:02.042] |  Number of remaining objects: 2
[10:52:02.042] |  checking value #1 ...
[10:52:02.043] |  :  'obj' is MulticoreFuture
[10:52:02.038] |  :  .  |  :  .  |  List of 1
[10:52:02.038] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.038] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.038] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.038] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.038] |  :  .  |  :  .  |      ...)  
[10:52:02.038] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.038] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.038] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:02.038] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.038] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.038] |  :  .  |  :  .  |      ...)  
[10:52:02.038] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.038] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.046] |  :  .  |  :  .  |  Not identical
[10:52:02.046] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:02.046] |  :  .  |  :  .  |  :  List of 2
[10:52:02.046] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.046] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.046] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.046] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.046] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.046] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.046] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.046] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.046] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.046] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.046] |  :  .  |  :  .  |  :      ...)  
[10:52:02.046] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.046] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.046] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:02.046] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.046] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.046] |  :  .  |  :  .  |  :      ...)  
[10:52:02.046] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.053] |  :  readImmediateCondition() ...
[10:52:02.054] |  :  .  |  :  .  |  :  Formals differ
[10:52:02.054] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:02.054] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.054] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:02.054] |  :   - Number of RDS files: 0
[10:52:02.054] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:02.054] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:02.054] |  :  readImmediateCondition() ... DONE
[10:52:02.055] |  checking value #1 ... done
[10:52:02.055] |  checking value #2 ...
[10:52:02.054] |  :  .  |  :  .  List of future strategies:
[10:52:02.054] |  :  .  |  :  .  1. sequential:
[10:52:02.054] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:02.054] |  :  .  |  :  .     - tweaked: FALSE
[10:52:02.054] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.055] |  :  'obj' is MulticoreFuture
[10:52:02.055] |  :  .  |  :  .  List of 1
[10:52:02.055] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.055] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.055] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.055] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.055] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.055] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.055] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.058] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:02.058] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:02.059] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.059] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:02.059] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.059] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:02.059] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:02.059] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:02.060] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:02.060] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:02.060] |  :  .  |  assign_globals() ...
[10:52:02.066] |  :  readImmediateCondition() ...
[10:52:02.066] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.066] |  :   - Number of RDS files: 0
[10:52:02.067] |  :  readImmediateCondition() ... DONE
[10:52:02.067] |  checking value #2 ... done
[10:52:02.060] |  :  .  |  List of 5
[10:52:02.060] |  :  .  |   $ ...future.FUN            :function (x)  
[10:52:02.060] |  :  .  |   $ future.call.arguments    : list()
[10:52:02.060] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:02.060] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:52:02.060] |  :  .  |    ..$ : int 0
[10:52:02.060] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:02.060] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:02.060] |  :  .  |   - attr(*, "where")=List of 5
[10:52:02.060] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:02.060] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:52:02.060] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:02.060] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:02.060] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:02.060] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:02.060] |  :  .  |   - attr(*, "total_size")= num 5632
[10:52:02.060] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:02.060] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:02.068] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:02.068] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:02.068] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:52:02.068] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:02.068] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:02.069] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:02.069] |  :  .  |  assign_globals() ... done
[10:52:02.071] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:02.071] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:02.071] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:02.072] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:02.072] |  :  .  |  :  .  |  :  New stack:
[10:52:02.072] |  :  .  |  :  .  |  :  List of 1
[10:52:02.072] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.072] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.072] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.072] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.072] |  :  .  |  :  .  |  :      ...)  
[10:52:02.072] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.072] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.072] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:02.072] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.072] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.072] |  :  .  |  :  .  |  :      ...)  
[10:52:02.072] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.072] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.075] |  :  .  |  :  .  |  :  Old stack:
[10:52:02.075] |  :  .  |  :  .  |  :  List of 1
[10:52:02.075] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.075] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.075] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.075] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.075] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.075] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.075] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.077] |  :  .  |  :  .  |  :  Not identical
[10:52:02.077] |  Number of remaining objects: 2
[10:52:02.077] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:02.077] |  checking value #1 ...
[10:52:02.077] |  :  'obj' is MulticoreFuture
[10:52:02.077] |  :  .  |  :  .  |  :  .  List of 2
[10:52:02.077] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.077] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.077] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.077] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.077] |  :  .  |  :  .  |  :  .      ...)  
[10:52:02.077] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.077] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.077] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:02.077] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.077] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.077] |  :  .  |  :  .  |  :  .      ...)  
[10:52:02.077] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.077] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.077] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.077] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.077] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.077] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.077] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.082] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:02.082] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:02.082] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:02.082] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:02.082] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:02.082] |  :  .  |  :  .  |  List of future strategies:
[10:52:02.082] |  :  .  |  :  .  |  1. multicore:
[10:52:02.082] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:02.082] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:02.082] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:02.084] |  :  .  |  :  .  |  List of 1
[10:52:02.084] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.084] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.084] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.084] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.084] |  :  .  |  :  .  |      ...)  
[10:52:02.084] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.084] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.084] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:02.084] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.084] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.084] |  :  .  |  :  .  |      ...)  
[10:52:02.084] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.084] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.088] |  :  readImmediateCondition() ...
[10:52:02.088] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:02.088] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:02.088] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.088] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.088] |  :   - Number of RDS files: 0
[10:52:02.088] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:02.089] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.089] |  :  readImmediateCondition() ... DONE
[10:52:02.089] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:02.089] |  checking value #1 ... done
[10:52:02.089] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:02.089] |  checking value #2 ...
[10:52:02.089] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:02.089] |  :  'obj' is MulticoreFuture
[10:52:02.089] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:02.089] |  :  readImmediateCondition() ...
[10:52:02.090] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.090] |  :   - Number of RDS files: 0
[10:52:02.090] |  :  readImmediateCondition() ... DONE
[10:52:02.090] |  :  MulticoreFuture #2
[10:52:02.090] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:02.091] |  :  .  nx: 2
[10:52:02.091] |  :  .  relay: TRUE
[10:52:02.091] |  :  .  stdout: TRUE
[10:52:02.091] |  :  .  signal: TRUE
[10:52:02.091] |  :  .  resignal: FALSE
[10:52:02.091] |  :  .  force: TRUE
[10:52:02.092] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:02.092] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:52:02.092] |  :  .  until=1
[10:52:02.092] |  :  .  relaying element #1
[10:52:02.092] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:02.092] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:02.092] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:02.093] |  :  value(<MulticoreFuture>, ...) ...
[10:52:02.093] |  :  .  result() for MulticoreFuture ...
[10:52:02.093] |  :  .  |  readImmediateCondition() ...
[10:52:02.094] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.094] |  :  .  |   - Number of RDS files: 0
[10:52:02.094] |  :  .  |  readImmediateCondition() ... DONE
[10:52:02.094] |  :  .  |  result() for MulticoreFuture ...
[10:52:02.094] |  :  .  |  result() for MulticoreFuture ... done
[10:52:02.094] |  :  .  result() for MulticoreFuture ... done
[10:52:02.095] |  :  .  result() for MulticoreFuture ...
[10:52:02.095] |  :  .  result() for MulticoreFuture ... done
[10:52:02.095] |  :  .  value: <list>
[10:52:02.095] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:02.095] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:02.095] |  :  .  nx: 2
[10:52:02.095] |  :  .  relay: TRUE
[10:52:02.096] |  :  .  stdout: TRUE
[10:52:02.096] |  :  .  signal: TRUE
[10:52:02.096] |  :  .  resignal: FALSE
[10:52:02.096] |  :  .  force: TRUE
[10:52:02.096] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:02.096] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:02.096] |  :  .  until=1
[10:52:02.096] |  :  .  relaying element #1
[10:52:02.096] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:02.097] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:02.097] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:02.097] |  :  length: 1 (resolved future 2)
[10:52:02.097] |  checking value #2 ... done
[10:52:02.107] |  Number of remaining objects: 1
[10:52:02.107] |  checking value #1 ...
[10:52:02.107] |  :  'obj' is MulticoreFuture
[10:52:02.118] |  :  readImmediateCondition() ...
[10:52:02.118] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.118] |  :   - Number of RDS files: 0
[10:52:02.118] |  :  readImmediateCondition() ... DONE
[10:52:02.118] |  checking value #1 ... done
[10:52:02.128] |  Number of remaining objects: 1
[10:52:02.129] |  checking value #1 ...
[10:52:02.129] |  :  'obj' is MulticoreFuture
[10:52:02.139] |  :  readImmediateCondition() ...
[10:52:02.139] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.139] |  :   - Number of RDS files: 0
[10:52:02.139] |  :  readImmediateCondition() ... DONE
[10:52:02.140] |  checking value #1 ... done
[10:52:02.150] |  Number of remaining objects: 1
[10:52:02.150] |  checking value #1 ...
[10:52:02.150] |  :  'obj' is MulticoreFuture
[10:52:02.160] |  :  readImmediateCondition() ...
[10:52:02.161] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.161] |  :   - Number of RDS files: 0
[10:52:02.161] |  :  readImmediateCondition() ... DONE
[10:52:02.161] |  checking value #1 ... done
[10:52:02.171] |  Number of remaining objects: 1
[10:52:02.171] |  checking value #1 ...
[10:52:02.172] |  :  'obj' is MulticoreFuture
[10:52:02.182] |  :  readImmediateCondition() ...
[10:52:02.182] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.182] |  :   - Number of RDS files: 0
[10:52:02.182] |  :  readImmediateCondition() ... DONE
[10:52:02.183] |  checking value #1 ... done
[10:52:02.193] |  Number of remaining objects: 1
[10:52:02.193] |  checking value #1 ...
[10:52:02.193] |  :  'obj' is MulticoreFuture
[10:52:02.203] |  :  readImmediateCondition() ...
[10:52:02.203] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.204] |  :   - Number of RDS files: 0
[10:52:02.204] |  :  readImmediateCondition() ... DONE
[10:52:02.204] |  checking value #1 ... done
[10:52:02.214] |  Number of remaining objects: 1
[10:52:02.214] |  checking value #1 ...
[10:52:02.214] |  :  'obj' is MulticoreFuture
[10:52:02.225] |  :  readImmediateCondition() ...
[10:52:02.225] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.225] |  :   - Number of RDS files: 0
[10:52:02.225] |  :  readImmediateCondition() ... DONE
[10:52:02.225] |  checking value #1 ... done
[10:52:02.235] |  Number of remaining objects: 1
[10:52:02.236] |  checking value #1 ...
[10:52:02.236] |  :  'obj' is MulticoreFuture
[10:52:02.246] |  :  readImmediateCondition() ...
[10:52:02.246] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.246] |  :   - Number of RDS files: 0
[10:52:02.246] |  :  readImmediateCondition() ... DONE
[10:52:02.247] |  checking value #1 ... done
[10:52:02.257] |  Number of remaining objects: 1
[10:52:02.257] |  checking value #1 ...
[10:52:02.257] |  :  'obj' is MulticoreFuture
[10:52:02.267] |  :  readImmediateCondition() ...
[10:52:02.267] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.268] |  :   - Number of RDS files: 0
[10:52:02.268] |  :  readImmediateCondition() ... DONE
[10:52:02.268] |  checking value #1 ... done
[10:52:02.278] |  Number of remaining objects: 1
[10:52:02.278] |  checking value #1 ...
[10:52:02.278] |  :  'obj' is MulticoreFuture
[10:52:02.289] |  :  readImmediateCondition() ...
[10:52:02.289] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.289] |  :   - Number of RDS files: 0
[10:52:02.289] |  :  readImmediateCondition() ... DONE
[10:52:02.289] |  checking value #1 ... done
[10:52:02.299] |  Number of remaining objects: 1
[10:52:02.300] |  checking value #1 ...
[10:52:02.300] |  :  'obj' is MulticoreFuture
[10:52:02.310] |  :  readImmediateCondition() ...
[10:52:02.310] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.310] |  :   - Number of RDS files: 0
[10:52:02.310] |  :  readImmediateCondition() ... DONE
[10:52:02.311] |  checking value #1 ... done
[10:52:02.321] |  Number of remaining objects: 1
[10:52:02.321] |  checking value #1 ...
[10:52:02.321] |  :  'obj' is MulticoreFuture
[10:52:02.331] |  :  readImmediateCondition() ...
[10:52:02.331] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.332] |  :   - Number of RDS files: 0
[10:52:02.332] |  :  readImmediateCondition() ... DONE
[10:52:02.332] |  checking value #1 ... done
[10:52:02.342] |  Number of remaining objects: 1
[10:52:02.342] |  checking value #1 ...
[10:52:02.342] |  :  'obj' is MulticoreFuture
[10:52:02.353] |  :  readImmediateCondition() ...
[10:52:02.353] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.353] |  :   - Number of RDS files: 0
[10:52:02.353] |  :  readImmediateCondition() ... DONE
[10:52:02.353] |  checking value #1 ... done
[10:52:02.364] |  Number of remaining objects: 1
[10:52:02.364] |  checking value #1 ...
[10:52:02.364] |  :  'obj' is MulticoreFuture
[10:52:02.374] |  :  readImmediateCondition() ...
[10:52:02.376] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.377] |  :   - Number of RDS files: 0
[10:52:02.377] |  :  readImmediateCondition() ... DONE
[10:52:02.377] |  checking value #1 ... done
[10:52:02.387] |  Number of remaining objects: 1
[10:52:02.387] |  checking value #1 ...
[10:52:02.388] |  :  'obj' is MulticoreFuture
[10:52:02.398] |  :  readImmediateCondition() ...
[10:52:02.398] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.398] |  :   - Number of RDS files: 0
[10:52:02.399] |  :  readImmediateCondition() ... DONE
[10:52:02.399] |  checking value #1 ... done
[10:52:02.409] |  Number of remaining objects: 1
[10:52:02.409] |  checking value #1 ...
[10:52:02.409] |  :  'obj' is MulticoreFuture
[10:52:02.420] |  :  readImmediateCondition() ...
[10:52:02.420] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.420] |  :   - Number of RDS files: 0
[10:52:02.420] |  :  readImmediateCondition() ... DONE
[10:52:02.421] |  checking value #1 ... done
[10:52:02.431] |  Number of remaining objects: 1
[10:52:02.431] |  checking value #1 ...
[10:52:02.431] |  :  'obj' is MulticoreFuture
[10:52:02.442] |  :  readImmediateCondition() ...
[10:52:02.442] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.442] |  :   - Number of RDS files: 0
[10:52:02.442] |  :  readImmediateCondition() ... DONE
[10:52:02.442] |  checking value #1 ... done
[10:52:02.453] |  Number of remaining objects: 1
[10:52:02.453] |  checking value #1 ...
[10:52:02.453] |  :  'obj' is MulticoreFuture
[10:52:02.463] |  :  readImmediateCondition() ...
[10:52:02.463] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.464] |  :   - Number of RDS files: 0
[10:52:02.464] |  :  readImmediateCondition() ... DONE
[10:52:02.464] |  checking value #1 ... done
[10:52:02.474] |  Number of remaining objects: 1
[10:52:02.475] |  checking value #1 ...
[10:52:02.475] |  :  'obj' is MulticoreFuture
[10:52:02.485] |  :  readImmediateCondition() ...
[10:52:02.485] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.485] |  :   - Number of RDS files: 0
[10:52:02.486] |  :  readImmediateCondition() ... DONE
[10:52:02.486] |  checking value #1 ... done
[10:52:02.496] |  Number of remaining objects: 1
[10:52:02.496] |  checking value #1 ...
[10:52:02.496] |  :  'obj' is MulticoreFuture
[10:52:02.507] |  :  readImmediateCondition() ...
[10:52:02.507] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.507] |  :   - Number of RDS files: 0
[10:52:02.507] |  :  readImmediateCondition() ... DONE
[10:52:02.507] |  checking value #1 ... done
[10:52:02.518] |  Number of remaining objects: 1
[10:52:02.518] |  checking value #1 ...
[10:52:02.518] |  :  'obj' is MulticoreFuture
[10:52:02.528] |  :  readImmediateCondition() ...
[10:52:02.528] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.529] |  :   - Number of RDS files: 0
[10:52:02.529] |  :  readImmediateCondition() ... DONE
[10:52:02.529] |  checking value #1 ... done
[10:52:02.537] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:02.537] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:02.537] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:02.537] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:02.537] |  :  .  |  :  .  |  :  New stack:
[10:52:02.539] |  Number of remaining objects: 1
[10:52:02.539] |  checking value #1 ...
[10:52:02.540] |  :  'obj' is MulticoreFuture
[10:52:02.537] |  :  .  |  :  .  |  :  List of 1
[10:52:02.537] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.537] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.537] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.537] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.537] |  :  .  |  :  .  |  :      ...)  
[10:52:02.537] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.537] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.537] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:02.537] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.537] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.537] |  :  .  |  :  .  |  :      ...)  
[10:52:02.537] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.537] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.543] |  :  .  |  :  .  |  :  Old stack:
[10:52:02.543] |  :  .  |  :  .  |  :  List of 1
[10:52:02.543] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.543] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.543] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.543] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.543] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.543] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.543] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.546] |  :  .  |  :  .  |  :  Not identical
[10:52:02.546] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:02.550] |  :  readImmediateCondition() ...
[10:52:02.550] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.550] |  :   - Number of RDS files: 0
[10:52:02.546] |  :  .  |  :  .  |  :  .  List of 2
[10:52:02.546] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.546] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.546] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.546] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.546] |  :  .  |  :  .  |  :  .      ...)  
[10:52:02.546] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.546] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.546] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:02.546] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.546] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.546] |  :  .  |  :  .  |  :  .      ...)  
[10:52:02.546] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.546] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.546] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.546] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.546] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.546] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.546] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.550] |  :  readImmediateCondition() ... DONE
[10:52:02.551] |  checking value #1 ... done
[10:52:02.551] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:02.551] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:02.551] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:02.551] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:02.551] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:02.551] |  :  .  |  :  .  |  List of future strategies:
[10:52:02.551] |  :  .  |  :  .  |  1. multicore:
[10:52:02.551] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:02.551] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:02.551] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:02.552] |  :  .  |  :  .  |  List of 1
[10:52:02.552] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.552] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.552] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.552] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.552] |  :  .  |  :  .  |      ...)  
[10:52:02.552] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.552] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.552] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:02.552] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.552] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.552] |  :  .  |  :  .  |      ...)  
[10:52:02.552] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.552] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.555] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:02.555] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:02.555] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.555] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:02.555] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.555] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:02.556] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:02.556] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:02.556] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:02.561] |  Number of remaining objects: 1
[10:52:02.561] |  checking value #1 ...
[10:52:02.561] |  :  'obj' is MulticoreFuture
[10:52:02.561] |  :  readImmediateCondition() ...
[10:52:02.561] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.562] |  :   - Number of RDS files: 0
[10:52:02.562] |  :  readImmediateCondition() ... DONE
[10:52:02.562] |  :  MulticoreFuture #1
[10:52:02.562] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:02.562] |  :  .  nx: 2
[10:52:02.562] |  :  .  relay: TRUE
[10:52:02.562] |  :  .  stdout: TRUE
[10:52:02.562] |  :  .  signal: TRUE
[10:52:02.562] |  :  .  resignal: FALSE
[10:52:02.563] |  :  .  force: TRUE
[10:52:02.563] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:02.563] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:02.563] |  :  .  until=1
[10:52:02.563] |  :  .  relaying element #1
[10:52:02.563] |  :  .  result() for MulticoreFuture ...
[10:52:02.564] |  :  .  |  readImmediateCondition() ...
[10:52:02.564] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.564] |  :  .  |   - Number of RDS files: 0
[10:52:02.564] |  :  .  |  readImmediateCondition() ... DONE
[10:52:02.564] |  :  .  |  result() for MulticoreFuture ...
[10:52:02.564] |  :  .  |  result() for MulticoreFuture ... done
[10:52:02.564] |  :  .  result() for MulticoreFuture ... done
[10:52:02.565] |  :  .  result() for MulticoreFuture ...
[10:52:02.565] |  :  .  result() for MulticoreFuture ... done
[10:52:02.565] |  :  .  result() for MulticoreFuture ...
[10:52:02.565] |  :  .  result() for MulticoreFuture ... done
[10:52:02.565] |  :  .  result() for MulticoreFuture ...
[10:52:02.565] |  :  .  result() for MulticoreFuture ... done
[10:52:02.565] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:02.565] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:02.565] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:02.566] |  :  value(<MulticoreFuture>, ...) ...
[10:52:02.566] |  :  .  result() for MulticoreFuture ...
[10:52:02.566] |  :  .  result() for MulticoreFuture ... done
[10:52:02.566] |  :  .  result() for MulticoreFuture ...
[10:52:02.566] |  :  .  result() for MulticoreFuture ... done
[10:52:02.566] |  :  .  value: <list>
[10:52:02.566] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:02.566] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:02.566] |  :  .  nx: 2
[10:52:02.566] |  :  .  relay: TRUE
[10:52:02.567] |  :  .  stdout: TRUE
[10:52:02.567] |  :  .  signal: TRUE
[10:52:02.567] |  :  .  resignal: FALSE
[10:52:02.567] |  :  .  force: TRUE
[10:52:02.567] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:02.567] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:02.567] |  :  .  until=2
[10:52:02.567] |  :  .  relaying element #2
[10:52:02.567] |  :  .  result() for MulticoreFuture ...
[10:52:02.567] |  :  .  result() for MulticoreFuture ... done
[10:52:02.567] |  :  .  result() for MulticoreFuture ...
[10:52:02.568] |  :  .  result() for MulticoreFuture ... done
[10:52:02.568] |  :  .  result() for MulticoreFuture ...
[10:52:02.568] |  :  .  result() for MulticoreFuture ... done
[10:52:02.568] |  :  .  result() for MulticoreFuture ...
[10:52:02.568] |  :  .  result() for MulticoreFuture ... done
[10:52:02.568] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:02.568] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:02.568] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:02.569] |  :  length: 0 (resolved future 1)
[10:52:02.569] |  checking value #1 ... done
[10:52:02.569] |  Relaying remaining futures ...
[10:52:02.569] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:02.569] |  :  .  nx: 2
[10:52:02.569] |  :  .  relay: TRUE
[10:52:02.569] |  :  .  stdout: TRUE
[10:52:02.569] |  :  .  signal: TRUE
[10:52:02.569] |  :  .  resignal: FALSE
[10:52:02.569] |  :  .  force: TRUE
[10:52:02.569] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:02.570] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:02.570] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:02.570] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:02.570] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:02.570] |  Relaying remaining futures ... done
[10:52:02.570] value() on list ... done
[10:52:02.570]  - Number of value chunks collected: 2
[10:52:02.570] Resolving 2 futures (chunks) ... DONE
[10:52:02.570] Reducing values from 2 chunks ...
[10:52:02.571]  - Number of values collected after concatenation: 2
[10:52:02.571]  - Number of values expected: 2
[10:52:02.571] Reducing values from 2 chunks ... DONE
[10:52:02.571] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ... DONE
* future_lapply(x, ..., future.stdout = NA) ...
[10:52:02.571] future_lapply() ...
[10:52:02.572] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.572] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:02.572] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.573] Number of chunks: 2
[10:52:02.575] getGlobalsAndPackagesXApply() ...
[10:52:02.575]  - future.globals: TRUE
[10:52:02.575] getGlobalsAndPackages() ...
[10:52:02.575] |  Searching for globals ...
[10:52:02.577] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:52:02.577] |  Searching for globals ... DONE
[10:52:02.578] |  Resolving globals: FALSE
[10:52:02.578] |  Search for packages associated with the globals ...
[10:52:02.578] |  :  Packages associated with globals: [1] ‘base’
[10:52:02.578] |  :  Packages: [1] ‘base’
[10:52:02.579] |  Search for packages associated with the globals ... DONE
[10:52:02.579] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:52:02.579] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:52:02.579] |  Packages after dropping 'base': [0] 
[10:52:02.579] |  globals: [1] ‘FUN’
[10:52:02.580] |  packages: [0] 
[10:52:02.580] getGlobalsAndPackages() ... done
[10:52:02.580]  - globals found/used: [n=1] ‘FUN’
[10:52:02.580]  - needed namespaces: [n=0] 
[10:52:02.580] Finding globals ... DONE
[10:52:02.580]  - use_args: TRUE
[10:52:02.580]  - Getting '...' globals ...
[10:52:02.581] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:52:02.581] |  recursive: 0
[10:52:02.581] |  length: 1
[10:52:02.581] |  elements: ‘...’
[10:52:02.581] |  'obj' is DotDotDotList
[10:52:02.581] |  resolve(obj, ...) ...
[10:52:02.581] |  resolve(obj, ...) ... done
[10:52:02.582] |  length: 0 (resolved future 1)
[10:52:02.582] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:52:02.582]    - '...' content: [n=0] 
[10:52:02.582] List of 1
[10:52:02.582]  $ ...: list()
[10:52:02.582]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:02.582]  - attr(*, "where")=List of 1
[10:52:02.582]   ..$ ...:<environment: 0x56258257c930> 
[10:52:02.582]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:02.582]  - attr(*, "resolved")= logi TRUE
[10:52:02.582]  - attr(*, "total_size")= num NA
[10:52:02.585]  - Getting '...' globals ... DONE
[10:52:02.585] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:52:02.585] List of 2
[10:52:02.585]  $ ...future.FUN:function (x)  
[10:52:02.585]  $ ...          : list()
[10:52:02.585]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:02.585]  - attr(*, "where")=List of 2
[10:52:02.585]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:02.585]   ..$ ...          :<environment: 0x56258257c930> 
[10:52:02.585]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:02.585]  - attr(*, "resolved")= logi FALSE
[10:52:02.585]  - attr(*, "total_size")= num 5632
[10:52:02.588] Packages to be attached in all futures: [n=0] 
[10:52:02.588] getGlobalsAndPackagesXApply() ... DONE
[10:52:02.588] Number of futures (= number of chunks): 2
[10:52:02.588] Launching 2 futures (chunks) ...
[10:52:02.588] Chunk #1 of 2 ...
[10:52:02.588]  - Finding globals in 'X' for chunk #1 ...
[10:52:02.588] getGlobalsAndPackages() ...
[10:52:02.589] |  Searching for globals ...
[10:52:02.589] |  :  globals found: [0] 
[10:52:02.589] |  Searching for globals ... DONE
[10:52:02.589] |  globals: [0] <none>
[10:52:02.589] |  packages: [0] <none>
[10:52:02.589] getGlobalsAndPackages() ... done
[10:52:02.589]    + additional globals found: [n=0] 
[10:52:02.589]    + additional namespaces needed: [n=0] 
[10:52:02.589]  - Finding globals in 'X' for chunk #1 ... DONE
[10:52:02.590]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:02.590]  - seeds: <none>
[10:52:02.590]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:02.590] getGlobalsAndPackages() ...
[10:52:02.590] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:02.590] |  Resolving globals: FALSE
[10:52:02.590] |  Tweak future expression to call with '...' arguments ...
[10:52:02.590] |  :  {
[10:52:02.590] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:02.590] |  :      "# expression in do.call(), because function called uses '...'  "
[10:52:02.590] |  :      "# as a global variable                                         "
[10:52:02.590] |  :      do.call(function(...) {
[10:52:02.590] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:02.590] |  :          "# without having an '...' argument. This means '...' is treated"
[10:52:02.590] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:52:02.590] |  :          "# anonymous function.                                          "
[10:52:02.590] |  :          "#                                                              "
[10:52:02.590] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:52:02.590] |  :          "# function environment of FUN() to the calling environment.    "
[10:52:02.590] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:02.590] |  :          "# global environment, which is where globals are written.      "
[10:52:02.590] |  :          penv <- env <- environment(...future.FUN)
[10:52:02.590] |  :          repeat {
[10:52:02.590] |  :              if (identical(env, globalenv()) || identical(env, 
[10:52:02.590] |  :                  emptyenv())) 
[10:52:02.590] |  :                  break
[10:52:02.590] |  :              penv <- env
[10:52:02.590] |  :              env <- parent.env(env)
[10:52:02.590] |  :          }
[10:52:02.590] |  :          if (identical(penv, globalenv())) {
[10:52:02.590] |  :              environment(...future.FUN) <- environment()
[10:52:02.590] |  :          }
[10:52:02.590] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:02.590] |  :              !isNamespace(penv)) {
[10:52:02.590] |  :              parent.env(penv) <- environment()
[10:52:02.590] |  :          }
[10:52:02.590] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:02.590] |  :          {
[10:52:02.590] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:02.590] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:02.590] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:02.590] |  :                  on.exit(options(oopts), add = TRUE)
[10:52:02.590] |  :              }
[10:52:02.590] |  :              {
[10:52:02.590] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:02.590] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:02.590] |  :                    ...future.FUN(...future.X_jj, ...)
[10:52:02.590] |  :                  })
[10:52:02.590] |  :              }
[10:52:02.590] |  :          }
[10:52:02.590] |  :      }, args = future.call.arguments)
[10:52:02.590] |  :  }
[10:52:02.591] |  Tweak future expression to call with '...' arguments ... DONE
[10:52:02.591] |  Search for packages associated with the globals ...
[10:52:02.591] |  :  Packages associated with globals: [0] 
[10:52:02.591] |  :  Packages: [0] 
[10:52:02.591] |  Search for packages associated with the globals ... DONE
[10:52:02.592] |  Packages after dropping 'base': [0] 
[10:52:02.592] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:02.592] |  packages: [0] 
[10:52:02.592] getGlobalsAndPackages() ... done
[10:52:02.592] run() for Future (‘Future’) ...
[10:52:02.592] |  state: ‘created’
[10:52:02.592] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.593] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.593] |  Using MulticoreFutureBackend ...
[10:52:02.593] |  :  Launching futures ...
[10:52:02.593] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:02.593] |  :  .  |  getFutureData() ...
[10:52:02.593] |  :  .  |  :  getFutureCore() ...
[10:52:02.593] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:02.593] |  :  .  |  :  getFutureCore() ... done
[10:52:02.593] |  :  .  |  :  getFutureCapture() ...
[10:52:02.593] |  :  .  |  :  getFutureCapture() ... done
[10:52:02.594] |  :  .  |  :  getFutureContext() ...
[10:52:02.594] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.594] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:02.594] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.594] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:02.594] |  :  .  |  :  getFutureContext() ... done
[10:52:02.596] |  :  .  |  getFutureData() ... done
[10:52:02.596] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:02.596] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:02.598] |  :  .  |  MulticoreFuture started
[10:52:02.599] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:02.599] |  :  .  |  attachPackages() ...
[10:52:02.600] |  :  Launching futures ... done
[10:52:02.600] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:02.600] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:02.601] |  :  .  |  attachPackages() ... DONE
[10:52:02.601] |  Using MulticoreFutureBackend ... done
[10:52:02.601] |  :  .  |  attachPackages() ...
[10:52:02.601] run() for Future (‘MulticoreFuture’) ... done
[10:52:02.601] |  :  .  |  :  packages: [n=0] 
[10:52:02.602] Created future:
[10:52:02.602] |  :  .  |  attachPackages() ... DONE
[10:52:02.603] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.603] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:02.604] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.605] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:02.605] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:02.606] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:02.606] |  :  .  |  :  .  |  New stack:
[10:52:02.606] |  :  .  |  :  .  |  List of 1
[10:52:02.606] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.606] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.606] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.606] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.606] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.606] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.606] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.613] |  :  .  |  :  .  |  Old stack:
[10:52:02.614] readImmediateCondition() ...
[10:52:02.615]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.615]  - Number of RDS files: 0
[10:52:02.616] readImmediateCondition() ... DONE
[10:52:02.602] MulticoreFuture:
[10:52:02.602] Label: ‘future_lapply-1’
[10:52:02.602] Expression:
[10:52:02.602] {
[10:52:02.602]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:02.602]     "# expression in do.call(), because function called uses '...'  "
[10:52:02.602]     "# as a global variable                                         "
[10:52:02.602]     do.call(function(...) {
[10:52:02.602]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:02.602]         "# without having an '...' argument. This means '...' is treated"
[10:52:02.602]         "# as a global variable. This may happen when FUN() is an       "
[10:52:02.602]         "# anonymous function.                                          "
[10:52:02.602]         "#                                                              "
[10:52:02.602]         "# If an anonymous function, we will make sure to restore the   "
[10:52:02.602]         "# function environment of FUN() to the calling environment.    "
[10:52:02.602]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:02.602]         "# global environment, which is where globals are written.      "
[10:52:02.602]         penv <- env <- environment(...future.FUN)
[10:52:02.602]         repeat {
[10:52:02.602]             if (identical(env, globalenv()) || identical(env, 
[10:52:02.602]                 emptyenv())) 
[10:52:02.602]                 break
[10:52:02.602]             penv <- env
[10:52:02.602]             env <- parent.env(env)
[10:52:02.602]         }
[10:52:02.602]         if (identical(penv, globalenv())) {
[10:52:02.602]             environment(...future.FUN) <- environment()
[10:52:02.602]         }
[10:52:02.602]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:02.602]             !isNamespace(penv)) {
[10:52:02.602]             parent.env(penv) <- environment()
[10:52:02.602]         }
[10:52:02.602]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:02.602]         {
[10:52:02.602]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:02.602]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:02.602]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:02.602]                 on.exit(options(oopts), add = TRUE)
[10:52:02.602]             }
[10:52:02.602]             {
[10:52:02.602]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:02.602]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:02.602]                   ...future.FUN(...future.X_jj, ...)
[10:52:02.602]                 })
[10:52:02.602]             }
[10:52:02.602]         }
[10:52:02.602]     }, args = future.call.arguments)
[10:52:02.602] }
[10:52:02.602] Lazy evaluation: FALSE
[10:52:02.602] Asynchronous evaluation: TRUE
[10:52:02.602] Local evaluation: TRUE
[10:52:02.602] Environment: R_GlobalEnv
[10:52:02.602] Capture standard output: NA
[10:52:02.602] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:02.602] Immediate condition classes: ‘immediateCondition’
[10:52:02.602] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:02.602] Packages: <none>
[10:52:02.602] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:02.602] Resolved: FALSE
[10:52:02.602] Value: <not collected>
[10:52:02.602] Conditions captured: <none>
[10:52:02.602] Early signaling: FALSE
[10:52:02.602] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:02.602] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:02.616] Chunk #1 of 2 ... DONE
[10:52:02.617] Chunk #2 of 2 ...
[10:52:02.617]  - Finding globals in 'X' for chunk #2 ...
[10:52:02.617] getGlobalsAndPackages() ...
[10:52:02.617] |  Searching for globals ...
[10:52:02.618] |  :  globals found: [0] 
[10:52:02.613] |  :  .  |  :  .  |  List of 1
[10:52:02.613] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.613] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.613] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.613] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.613] |  :  .  |  :  .  |      ...)  
[10:52:02.613] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.613] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.613] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:02.613] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.613] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.613] |  :  .  |  :  .  |      ...)  
[10:52:02.613] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.613] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.618] |  Searching for globals ... DONE
[10:52:02.618] |  :  .  |  :  .  |  Not identical
[10:52:02.618] |  globals: [0] <none>
[10:52:02.618] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:02.618] |  packages: [0] <none>
[10:52:02.619] getGlobalsAndPackages() ... done
[10:52:02.619]    + additional globals found: [n=0] 
[10:52:02.619]    + additional namespaces needed: [n=0] 
[10:52:02.619]  - Finding globals in 'X' for chunk #2 ... DONE
[10:52:02.619]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:02.620]  - seeds: <none>
[10:52:02.620]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:02.620] getGlobalsAndPackages() ...
[10:52:02.620] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:02.620] |  Resolving globals: FALSE
[10:52:02.621] |  Tweak future expression to call with '...' arguments ...
[10:52:02.621] |  :  {
[10:52:02.621] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:02.621] |  :      "# expression in do.call(), because function called uses '...'  "
[10:52:02.621] |  :      "# as a global variable                                         "
[10:52:02.621] |  :      do.call(function(...) {
[10:52:02.621] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:02.621] |  :          "# without having an '...' argument. This means '...' is treated"
[10:52:02.621] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:52:02.621] |  :          "# anonymous function.                                          "
[10:52:02.621] |  :          "#                                                              "
[10:52:02.621] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:52:02.621] |  :          "# function environment of FUN() to the calling environment.    "
[10:52:02.621] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:02.621] |  :          "# global environment, which is where globals are written.      "
[10:52:02.621] |  :          penv <- env <- environment(...future.FUN)
[10:52:02.621] |  :          repeat {
[10:52:02.621] |  :              if (identical(env, globalenv()) || identical(env, 
[10:52:02.621] |  :                  emptyenv())) 
[10:52:02.621] |  :                  break
[10:52:02.621] |  :              penv <- env
[10:52:02.621] |  :              env <- parent.env(env)
[10:52:02.621] |  :          }
[10:52:02.621] |  :          if (identical(penv, globalenv())) {
[10:52:02.621] |  :              environment(...future.FUN) <- environment()
[10:52:02.621] |  :          }
[10:52:02.621] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:02.621] |  :              !isNamespace(penv)) {
[10:52:02.621] |  :              parent.env(penv) <- environment()
[10:52:02.621] |  :          }
[10:52:02.621] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:02.621] |  :          {
[10:52:02.621] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:02.621] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:02.621] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:02.621] |  :                  on.exit(options(oopts), add = TRUE)
[10:52:02.621] |  :              }
[10:52:02.621] |  :              {
[10:52:02.621] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:02.621] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:02.621] |  :                    ...future.FUN(...future.X_jj, ...)
[10:52:02.621] |  :                  })
[10:52:02.621] |  :              }
[10:52:02.621] |  :          }
[10:52:02.621] |  :      }, args = future.call.arguments)
[10:52:02.621] |  :  }
[10:52:02.622] |  Tweak future expression to call with '...' arguments ... DONE
[10:52:02.622] |  Search for packages associated with the globals ...
[10:52:02.622] |  :  Packages associated with globals: [0] 
[10:52:02.622] |  :  Packages: [0] 
[10:52:02.623] |  Search for packages associated with the globals ... DONE
[10:52:02.623] |  Packages after dropping 'base': [0] 
[10:52:02.623] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:02.623] |  packages: [0] 
[10:52:02.623] getGlobalsAndPackages() ... done
[10:52:02.624] run() for Future (‘Future’) ...
[10:52:02.624] |  state: ‘created’
[10:52:02.619] |  :  .  |  :  .  |  :  List of 2
[10:52:02.619] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.619] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.619] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.619] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.619] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.619] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.619] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.619] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.619] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.619] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.619] |  :  .  |  :  .  |  :      ...)  
[10:52:02.619] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.619] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.619] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:02.619] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.619] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.619] |  :  .  |  :  .  |  :      ...)  
[10:52:02.619] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.624] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.624] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.624] |  Using MulticoreFutureBackend ...
[10:52:02.624] |  :  Launching futures ...
[10:52:02.625] |  :  .  |  :  .  |  :  Formals differ
[10:52:02.625] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:02.625] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:02.625] |  :  .  |  getFutureData() ...
[10:52:02.625] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:02.625] |  :  .  |  :  getFutureCore() ...
[10:52:02.625] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:02.625] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:02.625] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:02.625] |  :  .  |  :  getFutureCore() ... done
[10:52:02.625] |  :  .  |  :  getFutureCapture() ...
[10:52:02.625] |  :  .  |  :  getFutureCapture() ... done
[10:52:02.626] |  :  .  |  :  getFutureContext() ...
[10:52:02.626] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.625] |  :  .  |  :  .  List of future strategies:
[10:52:02.625] |  :  .  |  :  .  1. sequential:
[10:52:02.625] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:02.62[10:52:02.626] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
5] |  :  .  |  :  .     - tweaked: FALSE
[10:52:02.625] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.626] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.626] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:02.626] |  :  .  |  :  getFutureContext() ... done
[10:52:02.626] |  :  .  |  getFutureData() ... done
[10:52:02.627] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:02.627] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:02.626] |  :  .  |  :  .  List of 1
[10:52:02.626] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.626] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.626] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.626] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.626] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.626] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.626] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.629] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:02.629] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:02.629] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.629] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:02.629] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.629] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:02.629] |  :  .  |  MulticoreFuture started
[10:52:02.630] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:02.630] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:02.630] |  :  Launching futures ... done
[10:52:02.630] |  :  .  |  attachPackages() ...
[10:52:02.630] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:02.630] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:02.631] |  Using MulticoreFutureBackend ... done
[10:52:02.631] |  :  .  |  attachPackages() ... DONE
[10:52:02.631] run() for Future (‘MulticoreFuture’) ... done
[10:52:02.631] |  :  .  |  attachPackages() ...
[10:52:02.631] Created future:
[10:52:02.632] |  :  .  |  :  packages: [n=0] 
[10:52:02.632] |  :  .  |  attachPackages() ... DONE
[10:52:02.632] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:02.632] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:02.632] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:02.633] |  :  .  |  assign_globals() ...
[10:52:02.633] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.633] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:02.634] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.634] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:02.635] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:02.635] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:02.635] |  :  .  |  :  .  |  New stack:
[10:52:02.633] |  :  .  |  List of 5
[10:52:02.633] |  :  .  |   $ ...future.FUN            :function (x)  
[10:52:02.633] |  :  .  |   $ future.call.arguments    : list()
[10:52:02.633] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:02.633] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:52:02.633] |  :  .  |    ..$ : int 1
[10:52:02.633] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:02.633] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:02.633] |  :  .  |   - attr(*, "where")=List of 5
[10:52:02.633] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:02.633] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:52:02.633] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:02.633] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:02.633] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:02.633] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:02.633] |  :  .  |   - attr(*, "total_size")= num 5632
[10:52:02.633] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:02.633] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:02.639] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:02.639] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:02.639] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:52:02.639] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:02.639] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:02.639] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:02.636] |  :  .  |  :  .  |  List of 1
[10:52:02.636] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.636] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.636] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.636] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.636] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.636] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.636] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.640] |  :  .  |  assign_globals() ... done
[10:52:02.640] |  :  .  |  :  .  |  Old stack:
[10:52:02.644] readImmediateCondition() ...
[10:52:02.645]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.640] |  :  .  |  :  .  |  List of 1
[10:52:02.640] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.640] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.640] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.640] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.640] |  :  .  |  :  .  |      ...)  
[10:52:02.640] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.640] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.640] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:02.640] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.640] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.640] |  :  .  |  :  .  |      ...)  
[10:52:02.640] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.640] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.645]  - Number of RDS files: 0
[10:52:02.645] |  :  .  |  :  .  |  Not identical
[10:52:02.645] readImmediateCondition() ... DONE
[10:52:02.645] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:02.632] MulticoreFuture:
[10:52:02.632] Label: ‘future_lapply-2’
[10:52:02.632] Expression:
[10:52:02.632] {
[10:52:02.632]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:02.632]     "# expression in do.call(), because function called uses '...'  "
[10:52:02.632]     "# as a global variable                                         "
[10:52:02.632]     do.call(function(...) {
[10:52:02.632]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:02.632]         "# without having an '...' argument. This means '...' is treated"
[10:52:02.632]         "# as a global variable. This may happen when FUN() is an       "
[10:52:02.632]         "# anonymous function.                                          "
[10:52:02.632]         "#                                                              "
[10:52:02.632]         "# If an anonymous function, we will make sure to restore the   "
[10:52:02.632]         "# function environment of FUN() to the calling environment.    "
[10:52:02.632]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:02.632]         "# global environment, which is where globals are written.      "
[10:52:02.632]         penv <- env <- environment(...future.FUN)
[10:52:02.632]         repeat {
[10:52:02.632]             if (identical(env, globalenv()) || identical(env, 
[10:52:02.632]                 emptyenv())) 
[10:52:02.632]                 break
[10:52:02.632]             penv <- env
[10:52:02.632]             env <- parent.env(env)
[10:52:02.632]         }
[10:52:02.632]         if (identical(penv, globalenv())) {
[10:52:02.632]             environment(...future.FUN) <- environment()
[10:52:02.632]         }
[10:52:02.632]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:02.632]             !isNamespace(penv)) {
[10:52:02.632]             parent.env(penv) <- environment()
[10:52:02.632]         }
[10:52:02.632]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:02.632]         {
[10:52:02.632]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:02.632]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:02.632]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:02.632]                 on.exit(options(oopts), add = TRUE)
[10:52:02.632]             }
[10:52:02.632]             {
[10:52:02.632]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:02.632]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:02.632]                   ...future.FUN(...future.X_jj, ...)
[10:52:02.632]                 })
[10:52:02.632]             }
[10:52:02.632]         }
[10:52:02.632]     }, args = future.call.arguments)
[10:52:02.632] }
[10:52:02.632] Lazy evaluation: FALSE
[10:52:02.632] Asynchronous evaluation: TRUE
[10:52:02.632] Local evaluation: TRUE
[10:52:02.632] Environment: R_GlobalEnv
[10:52:02.632] Capture standard output: NA
[10:52:02.632] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:02.632] Immediate condition classes: ‘immediateCondition’
[10:52:02.632] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:02.632] Packages: <none>
[10:52:02.632] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:02.632] Resolved: FALSE
[10:52:02.632] Value: <not collected>
[10:52:02.632] Conditions captured: <none>
[10:52:02.632] Early signaling: FALSE
[10:52:02.632] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:02.632] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:02.646] Chunk #2 of 2 ... DONE
[10:52:02.646] Launching 2 futures (chunks) ... DONE
[10:52:02.647] Resolving 2 futures (chunks) ...
[10:52:02.647] value() on list ...
[10:52:02.647] |  recursive: 0
[10:52:02.647] |  length: 2
[10:52:02.648] |  
[10:52:02.648] |  Number of remaining objects: 2
[10:52:02.648] |  checking value #1 ...
[10:52:02.648] |  :  'obj' is MulticoreFuture
[10:52:02.659] |  :  readImmediateCondition() ...
[10:52:02.659] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.659] |  :   - Number of RDS files: 0
[10:52:02.646] |  :  .  |  :  .  |  :  List of 2
[10:52:02.646] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.646] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.646] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.646] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.646] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.646] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.646] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.646] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.646] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.646] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.646] |  :  .  |  :  .  |  :      ...)  
[10:52:02.646] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.646] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.646] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:02.646] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.646] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.646] |  :  .  |  :  .  |  :      ...)  
[10:52:02.646] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.659] |  :  readImmediateCondition() ... DONE
[10:52:02.660] |  checking value #1 ... done
[10:52:02.660] |  checking value #2 ...
[10:52:02.660] |  :  'obj' is MulticoreFuture
[10:52:02.660] |  :  .  |  :  .  |  :  Formals differ
[10:52:02.661] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:02.661] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:02.661] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:02.661] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:02.661] |  :  .  |  :  .  List of future strategies:
[10:52:02.661] |  :  .  |  :  .  1. sequential:
[10:52:02.661] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:02.661] |  :  .  |  :  .     - tweaked: FALSE
[10:52:02.661] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.662] |  :  .  |  :  .  List of 1
[10:52:02.662] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.662] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.662] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.662] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.662] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.662] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.662] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.666] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:02.666] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:02.666] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.666] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:02.667] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.667] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:02.667] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:02.667] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:02.668] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:02.668] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:02.668] |  :  .  |  assign_globals() ...
[10:52:02.670] |  :  readImmediateCondition() ...
[10:52:02.671] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.671] |  :   - Number of RDS files: 0
[10:52:02.671] |  :  readImmediateCondition() ... DONE
[10:52:02.671] |  checking value #2 ... done
[10:52:02.668] |  :  .  |  List of 5
[10:52:02.668] |  :  .  |   $ ...future.FUN            :function (x)  
[10:52:02.668] |  :  .  |   $ future.call.arguments    : list()
[10:52:02.668] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:02.668] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:52:02.668] |  :  .  |    ..$ : int 0
[10:52:02.668] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:02.668] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:02.668] |  :  .  |   - attr(*, "where")=List of 5
[10:52:02.668] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:02.668] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:52:02.668] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:02.668] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:02.668] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:02.668] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:02.668] |  :  .  |   - attr(*, "total_size")= num 5632
[10:52:02.668] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:02.668] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:02.674] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:02.674] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:02.674] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:52:02.674] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:02.674] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:02.674] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:02.674] |  :  .  |  assign_globals() ... done
[10:52:02.677] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:02.677] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:02.677] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:02.677] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:02.677] |  :  .  |  :  .  |  :  New stack:
[10:52:02.682] |  Number of remaining objects: 2
[10:52:02.682] |  checking value #1 ...
[10:52:02.682] |  :  'obj' is MulticoreFuture
[10:52:02.677] |  :  .  |  :  .  |  :  List of 1
[10:52:02.677] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.677] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.677] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.677] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.677] |  :  .  |  :  .  |  :      ...)  
[10:52:02.677] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.677] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.677] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:02.677] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.677] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.677] |  :  .  |  :  .  |  :      ...)  
[10:52:02.677] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.677] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.683] |  :  .  |  :  .  |  :  Old stack:
[10:52:02.683] |  :  .  |  :  .  |  :  List of 1
[10:52:02.683] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.683] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.683] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.683] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.683] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.683] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.683] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.685] |  :  .  |  :  .  |  :  Not identical
[10:52:02.685] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:02.685] |  :  .  |  :  .  |  :  .  List of 2
[10:52:02.685] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.685] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.685] |  :  .  |  :  .  |  :  .      ...)  
[10:52:02.685] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:02.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.685] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.685] |  :  .  |  :  .  |  :  .      ...)  
[10:52:02.685] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.685] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:02.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:02.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:02.685] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:02.685] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:02.690] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:02.690] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:02.690] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:02.690] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:02.690] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:02.690] |  :  .  |  :  .  |  List of future strategies:
[10:52:02.690] |  :  .  |  :  .  |  1. multicore:
[10:52:02.690] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:02.690] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:02.690] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:02.692] |  :  readImmediateCondition() ...
[10:52:02.692] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.693] |  :   - Number of RDS files: 0
[10:52:02.693] |  :  readImmediateCondition() ... DONE
[10:52:02.693] |  checking value #1 ... done
[10:52:02.693] |  checking value #2 ...
[10:52:02.693] |  :  'obj' is MulticoreFuture
[10:52:02.691] |  :  .  |  :  .  |  List of 1
[10:52:02.691] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:02.691] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:02.691] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:02.691] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.691] |  :  .  |  :  .  |      ...)  
[10:52:02.691] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.691] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.691] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:02.691] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:02.691] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:02.691] |  :  .  |  :  .  |      ...)  
[10:52:02.691] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:02.691] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:02.694] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:02.694] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:02.694] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:02.694] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:02.694] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:02.694] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:02.694] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:02.695] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:02.695] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:02.695] |  :  readImmediateCondition() ...
[10:52:02.695] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.695] |  :   - Number of RDS files: 0
[10:52:02.695] |  :  readImmediateCondition() ... DONE
[10:52:02.696] |  :  MulticoreFuture #2
[10:52:02.696] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:02.696] |  :  .  nx: 2
[10:52:02.696] |  :  .  relay: TRUE
[10:52:02.696] |  :  .  stdout: TRUE
[10:52:02.696] |  :  .  signal: TRUE
[10:52:02.696] |  :  .  resignal: FALSE
[10:52:02.696] |  :  .  force: TRUE
[10:52:02.697] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:02.697] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:52:02.697] |  :  .  until=1
[10:52:02.697] |  :  .  relaying element #1
[10:52:02.697] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:02.697] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:02.697] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:02.697] |  :  value(<MulticoreFuture>, ...) ...
[10:52:02.698] |  :  .  result() for MulticoreFuture ...
[10:52:02.698] |  :  .  |  readImmediateCondition() ...
[10:52:02.698] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.699] |  :  .  |   - Number of RDS files: 0
[10:52:02.699] |  :  .  |  readImmediateCondition() ... DONE
[10:52:02.699] |  :  .  |  result() for MulticoreFuture ...
[10:52:02.699] |  :  .  |  result() for MulticoreFuture ... done
[10:52:02.699] |  :  .  result() for MulticoreFuture ... done
[10:52:02.699] |  :  .  result() for MulticoreFuture ...
[10:52:02.700] |  :  .  result() for MulticoreFuture ... done
[10:52:02.700] |  :  .  value: <list>
[10:52:02.700] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:02.700] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:02.700] |  :  .  nx: 2
[10:52:02.700] |  :  .  relay: TRUE
[10:52:02.700] |  :  .  stdout: TRUE
[10:52:02.701] |  :  .  signal: TRUE
[10:52:02.701] |  :  .  resignal: FALSE
[10:52:02.701] |  :  .  force: TRUE
[10:52:02.701] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:02.701] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:02.703] |  :  .  until=1
[10:52:02.704] |  :  .  relaying element #1
[10:52:02.704] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:02.704] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:02.704] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:02.705] |  :  length: 1 (resolved future 2)
[10:52:02.705] |  checking value #2 ... done
[10:52:02.715] |  Number of remaining objects: 1
[10:52:02.715] |  checking value #1 ...
[10:52:02.715] |  :  'obj' is MulticoreFuture
[10:52:02.726] |  :  readImmediateCondition() ...
[10:52:02.726] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.726] |  :   - Number of RDS files: 0
[10:52:02.726] |  :  readImmediateCondition() ... DONE
[10:52:02.727] |  checking value #1 ... done
[10:52:02.737] |  Number of remaining objects: 1
[10:52:02.737] |  checking value #1 ...
[10:52:02.737] |  :  'obj' is MulticoreFuture
[10:52:02.748] |  :  readImmediateCondition() ...
[10:52:02.748] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.748] |  :   - Number of RDS files: 0
[10:52:02.748] |  :  readImmediateCondition() ... DONE
[10:52:02.748] |  checking value #1 ... done
[10:52:02.759] |  Number of remaining objects: 1
[10:52:02.759] |  checking value #1 ...
[10:52:02.759] |  :  'obj' is MulticoreFuture
[10:52:02.769] |  :  readImmediateCondition() ...
[10:52:02.769] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.770] |  :   - Number of RDS files: 0
[10:52:02.770] |  :  readImmediateCondition() ... DONE
[10:52:02.770] |  checking value #1 ... done
[10:52:02.780] |  Number of remaining objects: 1
[10:52:02.780] |  checking value #1 ...
[10:52:02.781] |  :  'obj' is MulticoreFuture
[10:52:02.791] |  :  readImmediateCondition() ...
[10:52:02.791] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.792] |  :   - Number of RDS files: 0
[10:52:02.792] |  :  readImmediateCondition() ... DONE
[10:52:02.792] |  checking value #1 ... done
[10:52:02.802] |  Number of remaining objects: 1
[10:52:02.802] |  checking value #1 ...
[10:52:02.802] |  :  'obj' is MulticoreFuture
[10:52:02.813] |  :  readImmediateCondition() ...
[10:52:02.813] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.813] |  :   - Number of RDS files: 0
[10:52:02.813] |  :  readImmediateCondition() ... DONE
[10:52:02.814] |  checking value #1 ... done
[10:52:02.824] |  Number of remaining objects: 1
[10:52:02.824] |  checking value #1 ...
[10:52:02.824] |  :  'obj' is MulticoreFuture
[10:52:02.834] |  :  readImmediateCondition() ...
[10:52:02.835] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.835] |  :   - Number of RDS files: 0
[10:52:02.835] |  :  readImmediateCondition() ... DONE
[10:52:02.835] |  checking value #1 ... done
[10:52:02.845] |  Number of remaining objects: 1
[10:52:02.845] |  checking value #1 ...
[10:52:02.846] |  :  'obj' is MulticoreFuture
[10:52:02.856] |  :  readImmediateCondition() ...
[10:52:02.856] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.856] |  :   - Number of RDS files: 0
[10:52:02.857] |  :  readImmediateCondition() ... DONE
[10:52:02.857] |  checking value #1 ... done
[10:52:02.867] |  Number of remaining objects: 1
[10:52:02.867] |  checking value #1 ...
[10:52:02.867] |  :  'obj' is MulticoreFuture
[10:52:02.877] |  :  readImmediateCondition() ...
[10:52:02.878] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.878] |  :   - Number of RDS files: 0
[10:52:02.878] |  :  readImmediateCondition() ... DONE
[10:52:02.878] |  checking value #1 ... done
[10:52:02.888] |  Number of remaining objects: 1
[10:52:02.888] |  checking value #1 ...
[10:52:02.889] |  :  'obj' is MulticoreFuture
[10:52:02.899] |  :  readImmediateCondition() ...
[10:52:02.899] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.899] |  :   - Number of RDS files: 0
[10:52:02.899] |  :  readImmediateCondition() ... DONE
[10:52:02.900] |  checking value #1 ... done
[10:52:02.910] |  Number of remaining objects: 1
[10:52:02.910] |  checking value #1 ...
[10:52:02.910] |  :  'obj' is MulticoreFuture
[10:52:02.920] |  :  readImmediateCondition() ...
[10:52:02.920] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.921] |  :   - Number of RDS files: 0
[10:52:02.921] |  :  readImmediateCondition() ... DONE
[10:52:02.921] |  checking value #1 ... done
[10:52:02.931] |  Number of remaining objects: 1
[10:52:02.931] |  checking value #1 ...
[10:52:02.931] |  :  'obj' is MulticoreFuture
[10:52:02.942] |  :  readImmediateCondition() ...
[10:52:02.942] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.942] |  :   - Number of RDS files: 0
[10:52:02.942] |  :  readImmediateCondition() ... DONE
[10:52:02.942] |  checking value #1 ... done
[10:52:02.952] |  Number of remaining objects: 1
[10:52:02.953] |  checking value #1 ...
[10:52:02.953] |  :  'obj' is MulticoreFuture
[10:52:02.963] |  :  readImmediateCondition() ...
[10:52:02.963] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.963] |  :   - Number of RDS files: 0
[10:52:02.963] |  :  readImmediateCondition() ... DONE
[10:52:02.964] |  checking value #1 ... done
[10:52:02.974] |  Number of remaining objects: 1
[10:52:02.974] |  checking value #1 ...
[10:52:02.974] |  :  'obj' is MulticoreFuture
[10:52:02.984] |  :  readImmediateCondition() ...
[10:52:02.984] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:02.985] |  :   - Number of RDS files: 0
[10:52:02.985] |  :  readImmediateCondition() ... DONE
[10:52:02.985] |  checking value #1 ... done
[10:52:02.995] |  Number of remaining objects: 1
[10:52:02.995] |  checking value #1 ...
[10:52:02.995] |  :  'obj' is MulticoreFuture
[10:52:03.006] |  :  readImmediateCondition() ...
[10:52:03.006] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.006] |  :   - Number of RDS files: 0
[10:52:03.006] |  :  readImmediateCondition() ... DONE
[10:52:03.006] |  checking value #1 ... done
[10:52:03.016] |  Number of remaining objects: 1
[10:52:03.016] |  checking value #1 ...
[10:52:03.017] |  :  'obj' is MulticoreFuture
[10:52:03.027] |  :  readImmediateCondition() ...
[10:52:03.027] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.027] |  :   - Number of RDS files: 0
[10:52:03.027] |  :  readImmediateCondition() ... DONE
[10:52:03.027] |  checking value #1 ... done
[10:52:03.038] |  Number of remaining objects: 1
[10:52:03.038] |  checking value #1 ...
[10:52:03.038] |  :  'obj' is MulticoreFuture
[10:52:03.048] |  :  readImmediateCondition() ...
[10:52:03.048] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.049] |  :   - Number of RDS files: 0
[10:52:03.049] |  :  readImmediateCondition() ... DONE
[10:52:03.049] |  checking value #1 ... done
[10:52:03.059] |  Number of remaining objects: 1
[10:52:03.059] |  checking value #1 ...
[10:52:03.060] |  :  'obj' is MulticoreFuture
[10:52:03.070] |  :  readImmediateCondition() ...
[10:52:03.070] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.070] |  :   - Number of RDS files: 0
[10:52:03.070] |  :  readImmediateCondition() ... DONE
[10:52:03.071] |  checking value #1 ... done
[10:52:03.081] |  Number of remaining objects: 1
[10:52:03.081] |  checking value #1 ...
[10:52:03.081] |  :  'obj' is MulticoreFuture
[10:52:03.091] |  :  readImmediateCondition() ...
[10:52:03.092] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.092] |  :   - Number of RDS files: 0
[10:52:03.092] |  :  readImmediateCondition() ... DONE
[10:52:03.092] |  checking value #1 ... done
[10:52:03.102] |  Number of remaining objects: 1
[10:52:03.102] |  checking value #1 ...
[10:52:03.103] |  :  'obj' is MulticoreFuture
[10:52:03.113] |  :  readImmediateCondition() ...
[10:52:03.113] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.113] |  :   - Number of RDS files: 0
[10:52:03.113] |  :  readImmediateCondition() ... DONE
[10:52:03.114] |  checking value #1 ... done
[10:52:03.124] |  Number of remaining objects: 1
[10:52:03.124] |  checking value #1 ...
[10:52:03.124] |  :  'obj' is MulticoreFuture
[10:52:03.134] |  :  readImmediateCondition() ...
[10:52:03.135] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.135] |  :   - Number of RDS files: 0
[10:52:03.135] |  :  readImmediateCondition() ... DONE
[10:52:03.135] |  checking value #1 ... done
[10:52:03.143] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.143] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.143] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:03.143] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:03.143] |  :  .  |  :  .  |  :  New stack:
[10:52:03.145] |  Number of remaining objects: 1
[10:52:03.146] |  checking value #1 ...
[10:52:03.146] |  :  'obj' is MulticoreFuture
[10:52:03.143] |  :  .  |  :  .  |  :  List of 1
[10:52:03.143] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.143] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.143] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.143] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.143] |  :  .  |  :  .  |  :      ...)  
[10:52:03.143] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.143] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.143] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:03.143] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.143] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.143] |  :  .  |  :  .  |  :      ...)  
[10:52:03.143] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.143] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.147] |  :  .  |  :  .  |  :  Old stack:
[10:52:03.147] |  :  .  |  :  .  |  :  List of 1
[10:52:03.147] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.147] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.147] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.147] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.147] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.147] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.147] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.149] |  :  .  |  :  .  |  :  Not identical
[10:52:03.149] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:03.149] |  :  .  |  :  .  |  :  .  List of 2
[10:52:03.149] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.149] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.149] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.149] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.149] |  :  .  |  :  .  |  :  .      ...)  
[10:52:03.149] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.149] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.149] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:03.149] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.149] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.149] |  :  .  |  :  .  |  :  .      ...)  
[10:52:03.149] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.149] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.149] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.149] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.149] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.149] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.149] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.156] |  :  readImmediateCondition() ...
[10:52:03.156] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:03.156] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.156] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:03.156] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:03.156] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:03.157] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:03.157] |  :  .  |  :  .  |  List of future strategies:
[10:52:03.157] |  :  .  |  :  .  |  1. multicore:
[10:52:03.157] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:03.157] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:03.157] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:03.156] |  :   - Number of RDS files: 0
[10:52:03.158] |  :  readImmediateCondition() ... DONE
[10:52:03.158] |  checking value #1 ... done
[10:52:03.157] |  :  .  |  :  .  |  List of 1
[10:52:03.157] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.157] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.157] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.157] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.157] |  :  .  |  :  .  |      ...)  
[10:52:03.157] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.157] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.157] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:03.157] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.157] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.157] |  :  .  |  :  .  |      ...)  
[10:52:03.157] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.157] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.161] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:03.161] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:03.161] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.161] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:03.161] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.161] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:03.161] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:03.161] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.162] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.169] |  Number of remaining objects: 1
[10:52:03.169] |  checking value #1 ...
[10:52:03.169] |  :  'obj' is MulticoreFuture
[10:52:03.169] |  :  readImmediateCondition() ...
[10:52:03.169] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.170] |  :   - Number of RDS files: 0
[10:52:03.170] |  :  readImmediateCondition() ... DONE
[10:52:03.170] |  :  MulticoreFuture #1
[10:52:03.170] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:03.170] |  :  .  nx: 2
[10:52:03.170] |  :  .  relay: TRUE
[10:52:03.170] |  :  .  stdout: TRUE
[10:52:03.171] |  :  .  signal: TRUE
[10:52:03.171] |  :  .  resignal: FALSE
[10:52:03.171] |  :  .  force: TRUE
[10:52:03.171] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:03.171] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:03.171] |  :  .  until=1
[10:52:03.171] |  :  .  relaying element #1
[10:52:03.171] |  :  .  result() for MulticoreFuture ...
[10:52:03.172] |  :  .  |  readImmediateCondition() ...
[10:52:03.172] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.172] |  :  .  |   - Number of RDS files: 0
[10:52:03.172] |  :  .  |  readImmediateCondition() ... DONE
[10:52:03.173] |  :  .  |  result() for MulticoreFuture ...
[10:52:03.173] |  :  .  |  result() for MulticoreFuture ... done
[10:52:03.173] |  :  .  result() for MulticoreFuture ... done
[10:52:03.173] |  :  .  result() for MulticoreFuture ...
[10:52:03.173] |  :  .  result() for MulticoreFuture ... done
[10:52:03.173] |  :  .  result() for MulticoreFuture ...
[10:52:03.173] |  :  .  result() for MulticoreFuture ... done
[10:52:03.174] |  :  .  result() for MulticoreFuture ...
[10:52:03.174] |  :  .  result() for MulticoreFuture ... done
[10:52:03.174] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:03.174] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:03.174] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:03.174] |  :  value(<MulticoreFuture>, ...) ...
[10:52:03.174] |  :  .  result() for MulticoreFuture ...
[10:52:03.174] |  :  .  result() for MulticoreFuture ... done
[10:52:03.175] |  :  .  result() for MulticoreFuture ...
[10:52:03.175] |  :  .  result() for MulticoreFuture ... done
[10:52:03.175] |  :  .  value: <list>
[10:52:03.175] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:03.175] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:03.175] |  :  .  nx: 2
[10:52:03.175] |  :  .  relay: TRUE
[10:52:03.175] |  :  .  stdout: TRUE
[10:52:03.175] |  :  .  signal: TRUE
[10:52:03.176] |  :  .  resignal: FALSE
[10:52:03.176] |  :  .  force: TRUE
[10:52:03.176] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:03.176] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:03.176] |  :  .  until=2
[10:52:03.176] |  :  .  relaying element #2
[10:52:03.176] |  :  .  result() for MulticoreFuture ...
[10:52:03.176] |  :  .  result() for MulticoreFuture ... done
[10:52:03.176] |  :  .  result() for MulticoreFuture ...
[10:52:03.176] |  :  .  result() for MulticoreFuture ... done
[10:52:03.177] |  :  .  result() for MulticoreFuture ...
[10:52:03.177] |  :  .  result() for MulticoreFuture ... done
[10:52:03.177] |  :  .  result() for MulticoreFuture ...
[10:52:03.177] |  :  .  result() for MulticoreFuture ... done
[10:52:03.177] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:03.177] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:03.177] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:03.177] |  :  length: 0 (resolved future 1)
[10:52:03.177] |  checking value #1 ... done
[10:52:03.178] |  Relaying remaining futures ...
[10:52:03.178] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:03.178] |  :  .  nx: 2
[10:52:03.178] |  :  .  relay: TRUE
[10:52:03.178] |  :  .  stdout: TRUE
[10:52:03.178] |  :  .  signal: TRUE
[10:52:03.178] |  :  .  resignal: FALSE
[10:52:03.178] |  :  .  force: TRUE
[10:52:03.178] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:03.178] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:03.178] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:03.179] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:03.179] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:03.179] |  Relaying remaining futures ... done
[10:52:03.179] value() on list ... done
[10:52:03.179]  - Number of value chunks collected: 2
[10:52:03.179] Resolving 2 futures (chunks) ... DONE
[10:52:03.179] Reducing values from 2 chunks ...
[10:52:03.179]  - Number of values collected after concatenation: 2
[10:52:03.179]  - Number of values expected: 2
[10:52:03.179] Reducing values from 2 chunks ... DONE
[10:52:03.180] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = NA) ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ...
[10:52:03.180] future_mapply() ...
[10:52:03.180] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.180] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:03.180] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.181] Number of chunks: 2
[10:52:03.181] getGlobalsAndPackagesXApply() ...
[10:52:03.181]  - future.globals: TRUE
[10:52:03.181] getGlobalsAndPackages() ...
[10:52:03.181] |  Searching for globals ...
[10:52:03.183] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:52:03.183] |  Searching for globals ... DONE
[10:52:03.183] |  Resolving globals: FALSE
[10:52:03.184] |  Search for packages associated with the globals ...
[10:52:03.184] |  :  Packages associated with globals: [1] ‘base’
[10:52:03.184] |  :  Packages: [1] ‘base’
[10:52:03.184] |  Search for packages associated with the globals ... DONE
[10:52:03.184] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:52:03.185] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:52:03.185] |  Packages after dropping 'base': [0] 
[10:52:03.185] |  globals: [1] ‘FUN’
[10:52:03.185] |  packages: [0] 
[10:52:03.185] getGlobalsAndPackages() ... done
[10:52:03.185]  - globals found/used: [n=1] ‘FUN’
[10:52:03.185]  - needed namespaces: [n=0] 
[10:52:03.186] Finding globals ... DONE
[10:52:03.186] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:52:03.186] List of 2
[10:52:03.186]  $ ...future.FUN:function (x, y)  
[10:52:03.186]  $ MoreArgs     : NULL
[10:52:03.186]  - attr(*, "where")=List of 2
[10:52:03.186]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:03.186]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:52:03.186]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:03.186]  - attr(*, "resolved")= logi FALSE
[10:52:03.186]  - attr(*, "total_size")= num NA
[10:52:03.190] Packages to be attached in all futures: [n=0] 
[10:52:03.191] getGlobalsAndPackagesXApply() ... DONE
[10:52:03.191] Number of futures (= number of chunks): 2
[10:52:03.191] Launching 2 futures (chunks) ...
[10:52:03.191] Chunk #1 of 2 ...
[10:52:03.191]  - Finding globals in '...' for chunk #1 ...
[10:52:03.191] getGlobalsAndPackages() ...
[10:52:03.191] |  Searching for globals ...
[10:52:03.192] |  :  globals found: [0] 
[10:52:03.192] |  Searching for globals ... DONE
[10:52:03.192] |  globals: [0] <none>
[10:52:03.192] |  packages: [0] <none>
[10:52:03.192] getGlobalsAndPackages() ... done
[10:52:03.192]    + additional globals found: [n=0] 
[10:52:03.193]    + additional namespaces needed: [n=0] 
[10:52:03.193]  - Finding globals in '...' for chunk #1 ... DONE
[10:52:03.193]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:03.193]  - seeds: <none>
[10:52:03.193]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.193] getGlobalsAndPackages() ...
[10:52:03.193] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.193] |  Resolving globals: FALSE
[10:52:03.193] |  Search for packages associated with the globals ...
[10:52:03.194] |  :  Packages associated with globals: [0] 
[10:52:03.194] |  :  Packages: [0] 
[10:52:03.194] |  Search for packages associated with the globals ... DONE
[10:52:03.194] |  Packages after dropping 'base': [0] 
[10:52:03.194] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.194] |  packages: [0] 
[10:52:03.195] getGlobalsAndPackages() ... done
[10:52:03.195] run() for Future (‘Future’) ...
[10:52:03.195] |  state: ‘created’
[10:52:03.195] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.195] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.195] |  Using MulticoreFutureBackend ...
[10:52:03.195] |  :  Launching futures ...
[10:52:03.195] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:03.196] |  :  .  |  getFutureData() ...
[10:52:03.196] |  :  .  |  :  getFutureCore() ...
[10:52:03.196] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:03.196] |  :  .  |  :  getFutureCore() ... done
[10:52:03.196] |  :  .  |  :  getFutureCapture() ...
[10:52:03.196] |  :  .  |  :  getFutureCapture() ... done
[10:52:03.196] |  :  .  |  :  getFutureContext() ...
[10:52:03.196] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.196] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:03.197] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.197] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:03.197] |  :  .  |  :  getFutureContext() ... done
[10:52:03.197] |  :  .  |  getFutureData() ... done
[10:52:03.197] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:03.197] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:03.199] |  :  .  |  MulticoreFuture started
[10:52:03.200] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:03.200] |  :  Launching futures ... done
[10:52:03.200] |  :  .  |  attachPackages() ...
[10:52:03.200] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:03.200] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:03.200] |  Using MulticoreFutureBackend ... done
[10:52:03.201] run() for Future (‘MulticoreFuture’) ... done
[10:52:03.201] |  :  .  |  attachPackages() ... DONE
[10:52:03.201] |  :  .  |  attachPackages() ...
[10:52:03.201] Created future:
[10:52:03.201] |  :  .  |  :  packages: [n=0] 
[10:52:03.201] |  :  .  |  attachPackages() ... DONE
[10:52:03.202] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.202] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:03.203] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.203] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.203] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:03.204] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:03.204] |  :  .  |  :  .  |  New stack:
[10:52:03.204] |  :  .  |  :  .  |  List of 1
[10:52:03.204] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.204] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.204] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.204] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.204] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.204] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.204] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.208] |  :  .  |  :  .  |  Old stack:
[10:52:03.213] readImmediateCondition() ...
[10:52:03.209] |  :  .  |  :  .  |  List of 1
[10:52:03.209] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.209] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.209] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.209] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.209] |  :  .  |  :  .  |      ...)  
[10:52:03.209] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.209] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.209] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:03.209] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.209] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.209] |  :  .  |  :  .  |      ...)  
[10:52:03.209] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.209] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.213]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.213] |  :  .  |  :  .  |  Not identical
[10:52:03.213] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:03.213]  - Number of RDS files: 0
[10:52:03.214] readImmediateCondition() ... DONE
[10:52:03.201] MulticoreFuture:
[10:52:03.201] Label: ‘future_mapply-1’
[10:52:03.201] Expression:
[10:52:03.201] {
[10:52:03.201]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:03.201]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:03.201]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:03.201]         on.exit(options(oopts), add = TRUE)
[10:52:03.201]     }
[10:52:03.201]     {
[10:52:03.201]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:03.201]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:03.201]         do.call(mapply, args = args)
[10:52:03.201]     }
[10:52:03.201] }
[10:52:03.201] Lazy evaluation: FALSE
[10:52:03.201] Asynchronous evaluation: TRUE
[10:52:03.201] Local evaluation: TRUE
[10:52:03.201] Environment: R_GlobalEnv
[10:52:03.201] Capture standard output: FALSE
[10:52:03.201] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:03.201] Immediate condition classes: ‘immediateCondition’
[10:52:03.201] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:03.201] Packages: <none>
[10:52:03.201] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:03.201] Resolved: FALSE
[10:52:03.201] Value: <not collected>
[10:52:03.201] Conditions captured: <none>
[10:52:03.201] Early signaling: FALSE
[10:52:03.201] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:03.201] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:03.214] Chunk #1 of 2 ... DONE
[10:52:03.214] Chunk #2 of 2 ...
[10:52:03.215]  - Finding globals in '...' for chunk #2 ...
[10:52:03.215] getGlobalsAndPackages() ...
[10:52:03.215] |  Searching for globals ...
[10:52:03.215] |  :  globals found: [0] 
[10:52:03.216] |  Searching for globals ... DONE
[10:52:03.216] |  globals: [0] <none>
[10:52:03.216] |  packages: [0] <none>
[10:52:03.216] getGlobalsAndPackages() ... done
[10:52:03.216]    + additional globals found: [n=0] 
[10:52:03.216]    + additional namespaces needed: [n=0] 
[10:52:03.216]  - Finding globals in '...' for chunk #2 ... DONE
[10:52:03.217]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:03.217]  - seeds: <none>
[10:52:03.217]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.217] getGlobalsAndPackages() ...
[10:52:03.217] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.217] |  Resolving globals: FALSE
[10:52:03.217] |  Search for packages associated with the globals ...
[10:52:03.218] |  :  Packages associated with globals: [0] 
[10:52:03.218] |  :  Packages: [0] 
[10:52:03.218] |  Search for packages associated with the globals ... DONE
[10:52:03.219] |  Packages after dropping 'base': [0] 
[10:52:03.219] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.219] |  packages: [0] 
[10:52:03.219] getGlobalsAndPackages() ... done
[10:52:03.219] run() for Future (‘Future’) ...
[10:52:03.220] |  state: ‘created’
[10:52:03.220] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.220] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.220] |  Using MulticoreFutureBackend ...
[10:52:03.220] |  :  Launching futures ...
[10:52:03.220] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:03.220] |  :  .  |  getFutureData() ...
[10:52:03.221] |  :  .  |  :  getFutureCore() ...
[10:52:03.221] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:03.221] |  :  .  |  :  getFutureCore() ... done
[10:52:03.221] |  :  .  |  :  getFutureCapture() ...
[10:52:03.221] |  :  .  |  :  getFutureCapture() ... done
[10:52:03.221] |  :  .  |  :  getFutureContext() ...
[10:52:03.221] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.222] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:03.222] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.222] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:03.222] |  :  .  |  :  getFutureContext() ... done
[10:52:03.222] |  :  .  |  getFutureData() ... done
[10:52:03.222] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:03.223] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:03.214] |  :  .  |  :  .  |  :  List of 2
[10:52:03.214] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.214] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.214] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.214] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.214] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.214] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.214] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.214] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.214] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.214] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.214] |  :  .  |  :  .  |  :      ...)  
[10:52:03.214] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.214] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.214] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:03.214] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.214] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.214] |  :  .  |  :  .  |  :      ...)  
[10:52:03.214] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.225] |  :  .  |  MulticoreFuture started
[10:52:03.225] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:03.226] |  :  .  |  :  .  |  :  Formals differ
[10:52:03.226] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:03.226] |  :  Launching futures ... done
[10:52:03.226] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:03.226] |  :  .  |  attachPackages() ...
[10:52:03.226] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:03.226] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:03.226] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:03.226] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:03.226] |  Using MulticoreFutureBackend ... done
[10:52:03.227] run() for Future (‘MulticoreFuture’) ... done
[10:52:03.227] |  :  .  |  attachPackages() ... DONE
[10:52:03.227] Created future:
[10:52:03.227] |  :  .  |  attachPackages() ...
[10:52:03.226] |  :  .  |  :  .  List of future strategies:
[10:52:03.226] |  :  .  |  :  .  1. sequential:
[10:52:03.226] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:03.226] |  :  .  |  :  .     - tweaked: FALSE
[10:52:03.226] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.227] |  :  .  |  :  packages: [n=0] 
[10:52:03.227] |  :  .  |  attachPackages() ... DONE
[10:52:03.229] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.229] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:03.229] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.230] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.230] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:03.231] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:03.231] |  :  .  |  :  .  |  New stack:
[10:52:03.227] |  :  .  |  :  .  List of 1
[10:52:03.227] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.227] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.227] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.227] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.227] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.227] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.227] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.231] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:03.231] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:03.231] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.232] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:03.232] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.232] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:03.232] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:03.232] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:03.232] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:03.232] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.233] |  :  .  |  assign_globals() ...
[10:52:03.233] |  :  .  |  List of 5
[10:52:03.233] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:52:03.233] |  :  .  |   $ MoreArgs                 : NULL
[10:52:03.233] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:52:03.233] |  :  .  |    ..$ :List of 1
[10:52:03.233] |  :  .  |    .. ..$ : int 1
[10:52:03.233] |  :  .  |    ..$ :List of 1
[10:52:03.233] |  :  .  |    .. ..$ : int 0
[10:52:03.233] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:03.233] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:03.233] |  :  .  |   - attr(*, "where")=List of 5
[10:52:03.233] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:03.233] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:52:03.233] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:03.233] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:03.233] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:03.233] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:03.233] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:03.233] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:03.233] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:03.239] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:03.239] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:03.239] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:52:03.239] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:03.239] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:03.239] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:03.240] |  :  .  |  assign_globals() ... done
[10:52:03.239] readImmediateCondition() ...
[10:52:03.240]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.240]  - Number of RDS files: 0
[10:52:03.240] readImmediateCondition() ... DONE
[10:52:03.227] MulticoreFuture:
[10:52:03.227] Label: ‘future_mapply-2’
[10:52:03.227] Expression:
[10:52:03.227] {
[10:52:03.227]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:03.227]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:03.227]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:03.227]         on.exit(options(oopts), add = TRUE)
[10:52:03.227]     }
[10:52:03.227]     {
[10:52:03.227]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:03.227]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:03.227]         do.call(mapply, args = args)
[10:52:03.227]     }
[10:52:03.227] }
[10:52:03.227] Lazy evaluation: FALSE
[10:52:03.227] Asynchronous evaluation: TRUE
[10:52:03.227] Local evaluation: TRUE
[10:52:03.227] Environment: R_GlobalEnv
[10:52:03.227] Capture standard output: FALSE
[10:52:03.227] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:03.227] Immediate condition classes: ‘immediateCondition’
[10:52:03.227] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:03.227] Packages: <none>
[10:52:03.227] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:03.227] Resolved: FALSE
[10:52:03.227] Value: <not collected>
[10:52:03.227] Conditions captured: <none>
[10:52:03.227] Early signaling: FALSE
[10:52:03.227] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:03.227] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:03.241] Chunk #2 of 2 ... DONE
[10:52:03.231] |  :  .  |  :  .  |  List of 1
[10:52:03.231] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.231] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.231] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.231] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.231] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.231] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.231] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.241] Launching 2 futures (chunks) ... DONE
[10:52:03.241] Resolving 2 futures (chunks) ...
[10:52:03.241] |  :  .  |  :  .  |  Old stack:
[10:52:03.242] value() on list ...
[10:52:03.242] |  recursive: 0
[10:52:03.242] |  length: 2
[10:52:03.242] |  
[10:52:03.243] |  Number of remaining objects: 2
[10:52:03.243] |  checking value #1 ...
[10:52:03.243] |  :  'obj' is MulticoreFuture
[10:52:03.242] |  :  .  |  :  .  |  List of 1
[10:52:03.242] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.242] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.242] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.242] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.242] |  :  .  |  :  .  |      ...)  
[10:52:03.242] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.242] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.242] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:03.242] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.242] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.242] |  :  .  |  :  .  |      ...)  
[10:52:03.242] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.242] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.249] |  :  .  |  :  .  |  Not identical
[10:52:03.250] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:03.253] |  :  readImmediateCondition() ...
[10:52:03.254] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.254] |  :   - Number of RDS files: 0
[10:52:03.257] |  :  readImmediateCondition() ... DONE
[10:52:03.250] |  :  .  |  :  .  |  :  List of 2
[10:52:03.250] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.250] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.250] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.250] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.250] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.250] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.250] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.250] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.250] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.250] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.250] |  :  .  |  :  .  |  :      ...)  
[10:52:03.250] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.250] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.250] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:03.250] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.250] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.250] |  :  .  |  :  .  |  :      ...)  
[10:52:03.250] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.258] |  checking value #1 ... done
[10:52:03.258] |  checking value #2 ...
[10:52:03.258] |  :  'obj' is MulticoreFuture
[10:52:03.259] |  :  .  |  :  .  |  :  Formals differ
[10:52:03.259] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:03.259] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:03.259] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:03.259] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:03.259] |  :  .  |  :  .  List of future strategies:
[10:52:03.259] |  :  .  |  :  .  1. sequential:
[10:52:03.259] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:03.259] |  :  .  |  :  .     - tweaked: FALSE
[10:52:03.259] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.260] |  :  .  |  :  .  List of 1
[10:52:03.260] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.260] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.260] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.260] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.260] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.260] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.260] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.263] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:03.263] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:03.263] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.263] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:03.263] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.264] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:03.264] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:03.264] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:03.264] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:03.264] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.264] |  :  .  |  assign_globals() ...
[10:52:03.269] |  :  readImmediateCondition() ...
[10:52:03.269] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.270] |  :   - Number of RDS files: 0
[10:52:03.270] |  :  readImmediateCondition() ... DONE
[10:52:03.270] |  checking value #2 ... done
[10:52:03.264] |  :  .  |  List of 5
[10:52:03.264] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:52:03.264] |  :  .  |   $ MoreArgs                 : NULL
[10:52:03.264] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:52:03.264] |  :  .  |    ..$ :List of 1
[10:52:03.264] |  :  .  |    .. ..$ : int 0
[10:52:03.264] |  :  .  |    ..$ :List of 1
[10:52:03.264] |  :  .  |    .. ..$ : int 1
[10:52:03.264] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:03.264] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:03.264] |  :  .  |   - attr(*, "where")=List of 5
[10:52:03.264] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:03.264] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:52:03.264] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:03.264] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:03.264] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:03.264] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:03.264] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:03.264] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:03.264] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:03.276] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:03.276] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:03.276] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:52:03.277] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:03.277] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:03.277] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:03.277] |  :  .  |  assign_globals() ... done
[10:52:03.280] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.280] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.280] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:03.280] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:03.280] |  :  .  |  :  .  |  :  New stack:
[10:52:03.281] |  Number of remaining objects: 2
[10:52:03.281] |  checking value #1 ...
[10:52:03.281] |  :  'obj' is MulticoreFuture
[10:52:03.280] |  :  .  |  :  .  |  :  List of 1
[10:52:03.280] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.280] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.280] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.280] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.280] |  :  .  |  :  .  |  :      ...)  
[10:52:03.280] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.280] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.280] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:03.280] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.280] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.280] |  :  .  |  :  .  |  :      ...)  
[10:52:03.280] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.280] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.283] |  :  .  |  :  .  |  :  Old stack:
[10:52:03.284] |  :  .  |  :  .  |  :  List of 1
[10:52:03.284] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.284] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.284] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.284] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.284] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.284] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.284] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.286] |  :  .  |  :  .  |  :  Not identical
[10:52:03.286] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:03.286] |  :  .  |  :  .  |  :  .  List of 2
[10:52:03.286] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.286] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.286] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.286] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.286] |  :  .  |  :  .  |  :  .      ...)  
[10:52:03.286] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.286] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.286] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:03.286] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.286] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.286] |  :  .  |  :  .  |  :  .      ...)  
[10:52:03.286] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.286] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.286] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.286] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.286] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.286] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.286] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.291] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:03.291] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:03.291] |  :  readImmediateCondition() ...
[10:52:03.292] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.292] |  :   - Number of RDS files: 0
[10:52:03.292] |  :  readImmediateCondition() ... DONE
[10:52:03.291] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:03.292] |  checking value #1 ... done
[10:52:03.293] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:03.293] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:03.293] |  checking value #2 ...
[10:52:03.293] |  :  'obj' is MulticoreFuture
[10:52:03.293] |  :  .  |  :  .  |  List of future strategies:
[10:52:03.293] |  :  .  |  :  .  |  1. multicore:
[10:52:03.293] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:03.293] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:03.293] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:03.293] |  :  .  |  :  .  |  List of 1
[10:52:03.293] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.293] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.293] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.293] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.293] |  :  .  |  :  .  |      ...)  
[10:52:03.293] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.293] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.293] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:03.293] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.293] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.293] |  :  .  |  :  .  |      ...)  
[10:52:03.293] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.293] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.297] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:03.297] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:03.297] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.297] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:03.298] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.298] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:03.298] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:03.298] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.298] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.298] |  :  readImmediateCondition() ...
[10:52:03.299] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.299] |  :   - Number of RDS files: 0
[10:52:03.299] |  :  readImmediateCondition() ... DONE
[10:52:03.299] |  :  MulticoreFuture #2
[10:52:03.300] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:03.300] |  :  .  nx: 2
[10:52:03.300] |  :  .  relay: TRUE
[10:52:03.300] |  :  .  stdout: TRUE
[10:52:03.300] |  :  .  signal: TRUE
[10:52:03.300] |  :  .  resignal: FALSE
[10:52:03.300] |  :  .  force: TRUE
[10:52:03.301] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:03.301] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:52:03.301] |  :  .  until=1
[10:52:03.301] |  :  .  relaying element #1
[10:52:03.301] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:03.301] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:03.302] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:03.302] |  :  value(<MulticoreFuture>, ...) ...
[10:52:03.302] |  :  .  result() for MulticoreFuture ...
[10:52:03.303] |  :  .  |  readImmediateCondition() ...
[10:52:03.303] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.303] |  :  .  |   - Number of RDS files: 0
[10:52:03.303] |  :  .  |  readImmediateCondition() ... DONE
[10:52:03.304] |  :  .  |  result() for MulticoreFuture ...
[10:52:03.304] |  :  .  |  result() for MulticoreFuture ... done
[10:52:03.304] |  :  .  result() for MulticoreFuture ... done
[10:52:03.304] |  :  .  result() for MulticoreFuture ...
[10:52:03.304] |  :  .  result() for MulticoreFuture ... done
[10:52:03.304] |  :  .  value: <list>
[10:52:03.304] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:03.305] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:03.305] |  :  .  nx: 2
[10:52:03.305] |  :  .  relay: TRUE
[10:52:03.305] |  :  .  stdout: TRUE
[10:52:03.305] |  :  .  signal: TRUE
[10:52:03.305] |  :  .  resignal: FALSE
[10:52:03.305] |  :  .  force: TRUE
[10:52:03.306] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:03.306] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:03.306] |  :  .  until=1
[10:52:03.306] |  :  .  relaying element #1
[10:52:03.306] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:03.306] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:03.306] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:03.306] |  :  length: 1 (resolved future 2)
[10:52:03.307] |  checking value #2 ... done
[10:52:03.317] |  Number of remaining objects: 1
[10:52:03.317] |  checking value #1 ...
[10:52:03.317] |  :  'obj' is MulticoreFuture
[10:52:03.327] |  :  readImmediateCondition() ...
[10:52:03.327] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.328] |  :   - Number of RDS files: 0
[10:52:03.328] |  :  readImmediateCondition() ... DONE
[10:52:03.328] |  checking value #1 ... done
[10:52:03.338] |  Number of remaining objects: 1
[10:52:03.338] |  checking value #1 ...
[10:52:03.338] |  :  'obj' is MulticoreFuture
[10:52:03.349] |  :  readImmediateCondition() ...
[10:52:03.349] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.349] |  :   - Number of RDS files: 0
[10:52:03.349] |  :  readImmediateCondition() ... DONE
[10:52:03.349] |  checking value #1 ... done
[10:52:03.359] |  Number of remaining objects: 1
[10:52:03.359] |  checking value #1 ...
[10:52:03.360] |  :  'obj' is MulticoreFuture
[10:52:03.370] |  :  readImmediateCondition() ...
[10:52:03.370] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.370] |  :   - Number of RDS files: 0
[10:52:03.370] |  :  readImmediateCondition() ... DONE
[10:52:03.371] |  checking value #1 ... done
[10:52:03.381] |  Number of remaining objects: 1
[10:52:03.381] |  checking value #1 ...
[10:52:03.381] |  :  'obj' is MulticoreFuture
[10:52:03.391] |  :  readImmediateCondition() ...
[10:52:03.391] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.392] |  :   - Number of RDS files: 0
[10:52:03.392] |  :  readImmediateCondition() ... DONE
[10:52:03.392] |  checking value #1 ... done
[10:52:03.402] |  Number of remaining objects: 1
[10:52:03.402] |  checking value #1 ...
[10:52:03.402] |  :  'obj' is MulticoreFuture
[10:52:03.413] |  :  readImmediateCondition() ...
[10:52:03.413] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.413] |  :   - Number of RDS files: 0
[10:52:03.413] |  :  readImmediateCondition() ... DONE
[10:52:03.413] |  checking value #1 ... done
[10:52:03.423] |  Number of remaining objects: 1
[10:52:03.424] |  checking value #1 ...
[10:52:03.424] |  :  'obj' is MulticoreFuture
[10:52:03.434] |  :  readImmediateCondition() ...
[10:52:03.434] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.435] |  :   - Number of RDS files: 0
[10:52:03.435] |  :  readImmediateCondition() ... DONE
[10:52:03.435] |  checking value #1 ... done
[10:52:03.445] |  Number of remaining objects: 1
[10:52:03.445] |  checking value #1 ...
[10:52:03.445] |  :  'obj' is MulticoreFuture
[10:52:03.456] |  :  readImmediateCondition() ...
[10:52:03.456] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.456] |  :   - Number of RDS files: 0
[10:52:03.456] |  :  readImmediateCondition() ... DONE
[10:52:03.457] |  checking value #1 ... done
[10:52:03.467] |  Number of remaining objects: 1
[10:52:03.467] |  checking value #1 ...
[10:52:03.467] |  :  'obj' is MulticoreFuture
[10:52:03.477] |  :  readImmediateCondition() ...
[10:52:03.478] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.478] |  :   - Number of RDS files: 0
[10:52:03.478] |  :  readImmediateCondition() ... DONE
[10:52:03.478] |  checking value #1 ... done
[10:52:03.488] |  Number of remaining objects: 1
[10:52:03.488] |  checking value #1 ...
[10:52:03.489] |  :  'obj' is MulticoreFuture
[10:52:03.499] |  :  readImmediateCondition() ...
[10:52:03.499] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.499] |  :   - Number of RDS files: 0
[10:52:03.499] |  :  readImmediateCondition() ... DONE
[10:52:03.499] |  checking value #1 ... done
[10:52:03.510] |  Number of remaining objects: 1
[10:52:03.510] |  checking value #1 ...
[10:52:03.510] |  :  'obj' is MulticoreFuture
[10:52:03.520] |  :  readImmediateCondition() ...
[10:52:03.520] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.520] |  :   - Number of RDS files: 0
[10:52:03.520] |  :  readImmediateCondition() ... DONE
[10:52:03.521] |  checking value #1 ... done
[10:52:03.531] |  Number of remaining objects: 1
[10:52:03.531] |  checking value #1 ...
[10:52:03.531] |  :  'obj' is MulticoreFuture
[10:52:03.541] |  :  readImmediateCondition() ...
[10:52:03.541] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.542] |  :   - Number of RDS files: 0
[10:52:03.542] |  :  readImmediateCondition() ... DONE
[10:52:03.542] |  checking value #1 ... done
[10:52:03.552] |  Number of remaining objects: 1
[10:52:03.552] |  checking value #1 ...
[10:52:03.552] |  :  'obj' is MulticoreFuture
[10:52:03.563] |  :  readImmediateCondition() ...
[10:52:03.563] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.563] |  :   - Number of RDS files: 0
[10:52:03.563] |  :  readImmediateCondition() ... DONE
[10:52:03.563] |  checking value #1 ... done
[10:52:03.573] |  Number of remaining objects: 1
[10:52:03.574] |  checking value #1 ...
[10:52:03.574] |  :  'obj' is MulticoreFuture
[10:52:03.584] |  :  readImmediateCondition() ...
[10:52:03.584] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.586] |  :   - Number of RDS files: 0
[10:52:03.587] |  :  readImmediateCondition() ... DONE
[10:52:03.587] |  checking value #1 ... done
[10:52:03.597] |  Number of remaining objects: 1
[10:52:03.597] |  checking value #1 ...
[10:52:03.597] |  :  'obj' is MulticoreFuture
[10:52:03.607] |  :  readImmediateCondition() ...
[10:52:03.608] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.608] |  :   - Number of RDS files: 0
[10:52:03.608] |  :  readImmediateCondition() ... DONE
[10:52:03.608] |  checking value #1 ... done
[10:52:03.618] |  Number of remaining objects: 1
[10:52:03.619] |  checking value #1 ...
[10:52:03.619] |  :  'obj' is MulticoreFuture
[10:52:03.629] |  :  readImmediateCondition() ...
[10:52:03.629] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.629] |  :   - Number of RDS files: 0
[10:52:03.630] |  :  readImmediateCondition() ... DONE
[10:52:03.630] |  checking value #1 ... done
[10:52:03.640] |  Number of remaining objects: 1
[10:52:03.640] |  checking value #1 ...
[10:52:03.640] |  :  'obj' is MulticoreFuture
[10:52:03.650] |  :  readImmediateCondition() ...
[10:52:03.651] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.651] |  :   - Number of RDS files: 0
[10:52:03.651] |  :  readImmediateCondition() ... DONE
[10:52:03.651] |  checking value #1 ... done
[10:52:03.662] |  Number of remaining objects: 1
[10:52:03.662] |  checking value #1 ...
[10:52:03.662] |  :  'obj' is MulticoreFuture
[10:52:03.672] |  :  readImmediateCondition() ...
[10:52:03.672] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.673] |  :   - Number of RDS files: 0
[10:52:03.673] |  :  readImmediateCondition() ... DONE
[10:52:03.673] |  checking value #1 ... done
[10:52:03.683] |  Number of remaining objects: 1
[10:52:03.683] |  checking value #1 ...
[10:52:03.684] |  :  'obj' is MulticoreFuture
[10:52:03.694] |  :  readImmediateCondition() ...
[10:52:03.694] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.694] |  :   - Number of RDS files: 0
[10:52:03.694] |  :  readImmediateCondition() ... DONE
[10:52:03.695] |  checking value #1 ... done
[10:52:03.705] |  Number of remaining objects: 1
[10:52:03.705] |  checking value #1 ...
[10:52:03.705] |  :  'obj' is MulticoreFuture
[10:52:03.716] |  :  readImmediateCondition() ...
[10:52:03.716] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.716] |  :   - Number of RDS files: 0
[10:52:03.716] |  :  readImmediateCondition() ... DONE
[10:52:03.716] |  checking value #1 ... done
[10:52:03.727] |  Number of remaining objects: 1
[10:52:03.727] |  checking value #1 ...
[10:52:03.727] |  :  'obj' is MulticoreFuture
[10:52:03.737] |  :  readImmediateCondition() ...
[10:52:03.737] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.738] |  :   - Number of RDS files: 0
[10:52:03.738] |  :  readImmediateCondition() ... DONE
[10:52:03.738] |  checking value #1 ... done
[10:52:03.743] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.743] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.743] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:03.743] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:03.743] |  :  .  |  :  .  |  :  New stack:
[10:52:03.748] |  Number of remaining objects: 1
[10:52:03.748] |  checking value #1 ...
[10:52:03.748] |  :  'obj' is MulticoreFuture
[10:52:03.744] |  :  .  |  :  .  |  :  List of 1
[10:52:03.744] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.744] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.744] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.744] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.744] |  :  .  |  :  .  |  :      ...)  
[10:52:03.744] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.744] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.744] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:03.744] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.744] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.744] |  :  .  |  :  .  |  :      ...)  
[10:52:03.744] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.744] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.749] |  :  .  |  :  .  |  :  Old stack:
[10:52:03.750] |  :  .  |  :  .  |  :  List of 1
[10:52:03.750] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.750] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.750] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.750] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.750] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.750] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.750] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.752] |  :  .  |  :  .  |  :  Not identical
[10:52:03.752] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:03.752] |  :  .  |  :  .  |  :  .  List of 2
[10:52:03.752] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.752] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.752] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.752] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.752] |  :  .  |  :  .  |  :  .      ...)  
[10:52:03.752] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.752] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.752] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:03.752] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.752] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.752] |  :  .  |  :  .  |  :  .      ...)  
[10:52:03.752] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.752] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.752] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.752] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.752] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.752] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.752] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.757] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:03.757] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:03.757] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:03.757] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:03.757] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:03.758] |  :  .  |  :  .  |  List of future strategies:
[10:52:03.758] |  :  .  |  :  .  |  1. multicore:
[10:52:03.758] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:03.758] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:03.758] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:03.759] |  :  readImmediateCondition() ...
[10:52:03.759] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.759] |  :   - Number of RDS files: 0
[10:52:03.759] |  :  readImmediateCondition() ... DONE
[10:52:03.760] |  checking value #1 ... done
[10:52:03.758] |  :  .  |  :  .  |  List of 1
[10:52:03.758] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.758] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.758] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.758] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.758] |  :  .  |  :  .  |      ...)  
[10:52:03.758] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.758] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.758] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:03.758] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.758] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.758] |  :  .  |  :  .  |      ...)  
[10:52:03.758] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.758] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.761] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:03.761] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:03.761] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.761] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:03.762] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.762] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:03.762] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:03.762] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.762] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.770] |  Number of remaining objects: 1
[10:52:03.770] |  checking value #1 ...
[10:52:03.770] |  :  'obj' is MulticoreFuture
[10:52:03.770] |  :  readImmediateCondition() ...
[10:52:03.770] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.771] |  :   - Number of RDS files: 0
[10:52:03.771] |  :  readImmediateCondition() ... DONE
[10:52:03.771] |  :  MulticoreFuture #1
[10:52:03.771] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:03.771] |  :  .  nx: 2
[10:52:03.771] |  :  .  relay: TRUE
[10:52:03.771] |  :  .  stdout: TRUE
[10:52:03.771] |  :  .  signal: TRUE
[10:52:03.771] |  :  .  resignal: FALSE
[10:52:03.772] |  :  .  force: TRUE
[10:52:03.772] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:03.772] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:03.772] |  :  .  until=1
[10:52:03.772] |  :  .  relaying element #1
[10:52:03.772] |  :  .  result() for MulticoreFuture ...
[10:52:03.773] |  :  .  |  readImmediateCondition() ...
[10:52:03.773] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.773] |  :  .  |   - Number of RDS files: 0
[10:52:03.773] |  :  .  |  readImmediateCondition() ... DONE
[10:52:03.773] |  :  .  |  result() for MulticoreFuture ...
[10:52:03.773] |  :  .  |  result() for MulticoreFuture ... done
[10:52:03.773] |  :  .  result() for MulticoreFuture ... done
[10:52:03.773] |  :  .  result() for MulticoreFuture ...
[10:52:03.774] |  :  .  result() for MulticoreFuture ... done
[10:52:03.774] |  :  .  result() for MulticoreFuture ...
[10:52:03.774] |  :  .  result() for MulticoreFuture ... done
[10:52:03.774] |  :  .  result() for MulticoreFuture ...
[10:52:03.774] |  :  .  result() for MulticoreFuture ... done
[10:52:03.774] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:03.774] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:03.774] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:03.774] |  :  value(<MulticoreFuture>, ...) ...
[10:52:03.775] |  :  .  result() for MulticoreFuture ...
[10:52:03.775] |  :  .  result() for MulticoreFuture ... done
[10:52:03.775] |  :  .  result() for MulticoreFuture ...
[10:52:03.775] |  :  .  result() for MulticoreFuture ... done
[10:52:03.775] |  :  .  value: <list>
[10:52:03.775] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:03.775] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:03.775] |  :  .  nx: 2
[10:52:03.775] |  :  .  relay: TRUE
[10:52:03.775] |  :  .  stdout: TRUE
[10:52:03.776] |  :  .  signal: TRUE
[10:52:03.776] |  :  .  resignal: FALSE
[10:52:03.776] |  :  .  force: TRUE
[10:52:03.776] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:03.776] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:03.776] |  :  .  until=2
[10:52:03.776] |  :  .  relaying element #2
[10:52:03.776] |  :  .  result() for MulticoreFuture ...
[10:52:03.776] |  :  .  result() for MulticoreFuture ... done
[10:52:03.776] |  :  .  result() for MulticoreFuture ...
[10:52:03.776] |  :  .  result() for MulticoreFuture ... done
[10:52:03.777] |  :  .  result() for MulticoreFuture ...
[10:52:03.777] |  :  .  result() for MulticoreFuture ... done
[10:52:03.777] |  :  .  result() for MulticoreFuture ...
[10:52:03.777] |  :  .  result() for MulticoreFuture ... done
[10:52:03.777] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:03.777] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:03.777] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:03.777] |  :  length: 0 (resolved future 1)
[10:52:03.778] |  checking value #1 ... done
[10:52:03.778] |  Relaying remaining futures ...
[10:52:03.778] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:03.778] |  :  .  nx: 2
[10:52:03.778] |  :  .  relay: TRUE
[10:52:03.778] |  :  .  stdout: TRUE
[10:52:03.778] |  :  .  signal: TRUE
[10:52:03.778] |  :  .  resignal: FALSE
[10:52:03.778] |  :  .  force: TRUE
[10:52:03.778] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:03.778] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:03.779] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:03.779] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:03.779] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:03.779] |  Relaying remaining futures ... done
[10:52:03.779] value() on list ... done
[10:52:03.779]  - Number of value chunks collected: 2
[10:52:03.779] Resolving 2 futures (chunks) ... DONE
[10:52:03.779] Reducing values from 2 chunks ...
[10:52:03.779]  - Number of values collected after concatenation: 2
[10:52:03.779]  - Number of values expected: 2
[10:52:03.779] Reducing values from 2 chunks ... DONE
[10:52:03.780] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ...
[10:52:03.780] future_mapply() ...
[10:52:03.780] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.780] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:03.780] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.781] Number of chunks: 2
[10:52:03.783] getGlobalsAndPackagesXApply() ...
[10:52:03.783]  - future.globals: TRUE
[10:52:03.783] getGlobalsAndPackages() ...
[10:52:03.783] |  Searching for globals ...
[10:52:03.786] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:52:03.786] |  Searching for globals ... DONE
[10:52:03.786] |  Resolving globals: FALSE
[10:52:03.786] |  Search for packages associated with the globals ...
[10:52:03.786] |  :  Packages associated with globals: [1] ‘base’
[10:52:03.787] |  :  Packages: [1] ‘base’
[10:52:03.787] |  Search for packages associated with the globals ... DONE
[10:52:03.787] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:52:03.787] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:52:03.788] |  Packages after dropping 'base': [0] 
[10:52:03.788] |  globals: [1] ‘FUN’
[10:52:03.788] |  packages: [0] 
[10:52:03.788] getGlobalsAndPackages() ... done
[10:52:03.788]  - globals found/used: [n=1] ‘FUN’
[10:52:03.788]  - needed namespaces: [n=0] 
[10:52:03.788] Finding globals ... DONE
[10:52:03.789] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:52:03.789] List of 2
[10:52:03.789]  $ ...future.FUN:function (x, y)  
[10:52:03.789]  $ MoreArgs     : NULL
[10:52:03.789]  - attr(*, "where")=List of 2
[10:52:03.789]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:03.789]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:52:03.789]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:03.789]  - attr(*, "resolved")= logi FALSE
[10:52:03.789]  - attr(*, "total_size")= num NA
[10:52:03.792] Packages to be attached in all futures: [n=0] 
[10:52:03.792] getGlobalsAndPackagesXApply() ... DONE
[10:52:03.792] Number of futures (= number of chunks): 2
[10:52:03.792] Launching 2 futures (chunks) ...
[10:52:03.792] Chunk #1 of 2 ...
[10:52:03.792]  - Finding globals in '...' for chunk #1 ...
[10:52:03.792] getGlobalsAndPackages() ...
[10:52:03.793] |  Searching for globals ...
[10:52:03.793] |  :  globals found: [0] 
[10:52:03.793] |  Searching for globals ... DONE
[10:52:03.793] |  globals: [0] <none>
[10:52:03.793] |  packages: [0] <none>
[10:52:03.793] getGlobalsAndPackages() ... done
[10:52:03.793]    + additional globals found: [n=0] 
[10:52:03.793]    + additional namespaces needed: [n=0] 
[10:52:03.794]  - Finding globals in '...' for chunk #1 ... DONE
[10:52:03.794]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:03.794]  - seeds: <none>
[10:52:03.794]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.794] getGlobalsAndPackages() ...
[10:52:03.794] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.794] |  Resolving globals: FALSE
[10:52:03.794] |  Search for packages associated with the globals ...
[10:52:03.794] |  :  Packages associated with globals: [0] 
[10:52:03.795] |  :  Packages: [0] 
[10:52:03.795] |  Search for packages associated with the globals ... DONE
[10:52:03.795] |  Packages after dropping 'base': [0] 
[10:52:03.795] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.795] |  packages: [0] 
[10:52:03.795] getGlobalsAndPackages() ... done
[10:52:03.796] run() for Future (‘Future’) ...
[10:52:03.796] |  state: ‘created’
[10:52:03.796] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.796] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.796] |  Using MulticoreFutureBackend ...
[10:52:03.796] |  :  Launching futures ...
[10:52:03.796] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:03.796] |  :  .  |  getFutureData() ...
[10:52:03.796] |  :  .  |  :  getFutureCore() ...
[10:52:03.796] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:03.797] |  :  .  |  :  getFutureCore() ... done
[10:52:03.797] |  :  .  |  :  getFutureCapture() ...
[10:52:03.797] |  :  .  |  :  getFutureCapture() ... done
[10:52:03.797] |  :  .  |  :  getFutureContext() ...
[10:52:03.797] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.797] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:03.797] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.797] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:03.797] |  :  .  |  :  getFutureContext() ... done
[10:52:03.798] |  :  .  |  getFutureData() ... done
[10:52:03.798] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:03.798] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:03.800] |  :  .  |  MulticoreFuture started
[10:52:03.800] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:03.800] |  :  Launching futures ... done
[10:52:03.801] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:03.801] |  :  .  |  attachPackages() ...
[10:52:03.801] |  Using MulticoreFutureBackend ... done
[10:52:03.801] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:03.801] run() for Future (‘MulticoreFuture’) ... done
[10:52:03.801] Created future:
[10:52:03.801] |  :  .  |  attachPackages() ... DONE
[10:52:03.802] |  :  .  |  attachPackages() ...
[10:52:03.802] |  :  .  |  :  packages: [n=0] 
[10:52:03.802] |  :  .  |  attachPackages() ... DONE
[10:52:03.803] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.803] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:03.803] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.804] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.804] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:03.804] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:03.804] |  :  .  |  :  .  |  New stack:
[10:52:03.813] readImmediateCondition() ...
[10:52:03.813]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.814]  - Number of RDS files: 0
[10:52:03.814] readImmediateCondition() ... DONE
[10:52:03.801] MulticoreFuture:
[10:52:03.801] Label: ‘future_mapply-1’
[10:52:03.801] Expression:
[10:52:03.801] {
[10:52:03.801]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:03.801]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:03.801]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:03.801]         on.exit(options(oopts), add = TRUE)
[10:52:03.801]     }
[10:52:03.801]     {
[10:52:03.801]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:03.801]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:03.801]         do.call(mapply, args = args)
[10:52:03.801]     }
[10:52:03.801] }
[10:52:03.801] Lazy evaluation: FALSE
[10:52:03.801] Asynchronous evaluation: TRUE
[10:52:03.801] Local evaluation: TRUE
[10:52:03.801] Environment: R_GlobalEnv
[10:52:03.801] Capture standard output: TRUE
[10:52:03.801] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:03.801] Immediate condition classes: ‘immediateCondition’
[10:52:03.801] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:03.801] Packages: <none>
[10:52:03.801] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:03.801] Resolved: FALSE
[10:52:03.801] Value: <not collected>
[10:52:03.801] Conditions captured: <none>
[10:52:03.801] Early signaling: FALSE
[10:52:03.801] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:03.801] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:03.814] Chunk #1 of 2 ... DONE
[10:52:03.815] Chunk #2 of 2 ...
[10:52:03.815]  - Finding globals in '...' for chunk #2 ...
[10:52:03.815] getGlobalsAndPackages() ...
[10:52:03.815] |  Searching for globals ...
[10:52:03.816] |  :  globals found: [0] 
[10:52:03.805] |  :  .  |  :  .  |  List of 1
[10:52:03.805] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.805] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.805] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.805] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.805] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.805] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.805] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.816] |  Searching for globals ... DONE
[10:52:03.816] |  :  .  |  :  .  |  Old stack:
[10:52:03.816] |  globals: [0] <none>
[10:52:03.816] |  packages: [0] <none>
[10:52:03.816] getGlobalsAndPackages() ... done
[10:52:03.816]    + additional globals found: [n=0] 
[10:52:03.816]    + additional namespaces needed: [n=0] 
[10:52:03.817]  - Finding globals in '...' for chunk #2 ... DONE
[10:52:03.817]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:03.822]  - seeds: <none>
[10:52:03.822]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.823] getGlobalsAndPackages() ...
[10:52:03.816] |  :  .  |  :  .  |  List of 1
[10:52:03.816] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.816] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.816] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.816] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.816] |  :  .  |  :  .  |      ...)  
[10:52:03.816] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.816] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.816] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:03.816] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.816] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.816] |  :  .  |  :  .  |      ...)  
[10:52:03.816] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.816] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.823] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.823] |  :  .  |  :  .  |  Not identical
[10:52:03.823] |  Resolving globals: FALSE
[10:52:03.823] |  Search for packages associated with the globals ...
[10:52:03.823] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:03.823] |  :  Packages associated with globals: [0] 
[10:52:03.824] |  :  Packages: [0] 
[10:52:03.824] |  Search for packages associated with the globals ... DONE
[10:52:03.824] |  Packages after dropping 'base': [0] 
[10:52:03.824] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:03.825] |  packages: [0] 
[10:52:03.825] getGlobalsAndPackages() ... done
[10:52:03.825] run() for Future (‘Future’) ...
[10:52:03.825] |  state: ‘created’
[10:52:03.826] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.826] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.826] |  Using MulticoreFutureBackend ...
[10:52:03.826] |  :  Launching futures ...
[10:52:03.826] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:03.827] |  :  .  |  getFutureData() ...
[10:52:03.827] |  :  .  |  :  getFutureCore() ...
[10:52:03.827] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:03.827] |  :  .  |  :  getFutureCore() ... done
[10:52:03.827] |  :  .  |  :  getFutureCapture() ...
[10:52:03.827] |  :  .  |  :  getFutureCapture() ... done
[10:52:03.828] |  :  .  |  :  getFutureContext() ...
[10:52:03.828] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.828] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:03.828] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.828] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:03.828] |  :  .  |  :  getFutureContext() ... done
[10:52:03.829] |  :  .  |  getFutureData() ... done
[10:52:03.829] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:03.829] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:03.823] |  :  .  |  :  .  |  :  List of 2
[10:52:03.823] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.823] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.823] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.823] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.823] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.823] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.823] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.823] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.823] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.823] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.823] |  :  .  |  :  .  |  :      ...)  
[10:52:03.823] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.823] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.823] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:03.823] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.823] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.823] |  :  .  |  :  .  |  :      ...)  
[10:52:03.823] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.831] |  :  .  |  :  .  |  :  Formals differ
[10:52:03.831] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:03.831] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:03.831] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:03.831] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:03.831] |  :  .  |  :  .  List of future strategies:
[10:52:03.831] |  :  .  |  :  .  1. sequential:
[10:52:03.831] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:03.831] |  :  .  |  :  .     - tweaked: FALSE
[10:52:03.831] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.832] |  :  .  |  MulticoreFuture started
[10:52:03.833] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:03.833] |  :  .  |  attachPackages() ...
[10:52:03.834] |  :  Launching futures ... done
[10:52:03.834] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:03.832] |  :  .  |  :  .  List of 1
[10:52:03.832] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.832] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.832] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.832] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.832] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.832] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.832] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.834] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:03.835] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:03.835] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:03.835] |  :  .  |  attachPackages() ... DONE
[10:52:03.835] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.835] |  Using MulticoreFutureBackend ... done
[10:52:03.835] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:03.835] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.835] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:03.835] |  :  .  |  attachPackages() ...
[10:52:03.835] run() for Future (‘MulticoreFuture’) ... done
[10:52:03.836] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:03.836] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:03.836] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:03.836] |  :  .  |  :  packages: [n=0] 
[10:52:03.836] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.836] Created future:
[10:52:03.836] |  :  .  |  assign_globals() ...
[10:52:03.836] |  :  .  |  attachPackages() ... DONE
[10:52:03.838] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.838] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:03.839] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.840] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.840] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:03.841] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:03.841] |  :  .  |  :  .  |  New stack:
[10:52:03.836] |  :  .  |  List of 5
[10:52:03.836] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:52:03.836] |  :  .  |   $ MoreArgs                 : NULL
[10:52:03.836] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:52:03.836] |  :  .  |    ..$ :List of 1
[10:52:03.836] |  :  .  |    .. ..$ : int 1
[10:52:03.836] |  :  .  |    ..$ :List of 1
[10:52:03.836] |  :  .  |    .. ..$ : int 0
[10:52:03.836] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:03.836] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:03.836] |  :  .  |   - attr(*, "where")=List of 5
[10:52:03.836] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:03.836] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:52:03.836] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:03.836] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:03.836] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:03.836] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:03.836] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:03.836] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:03.836] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:03.845] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:03.845] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:03.846] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:52:03.846] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:03.846] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:03.846] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:03.846] |  :  .  |  assign_globals() ... done
[10:52:03.841] |  :  .  |  :  .  |  List of 1
[10:52:03.841] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.841] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.841] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.841] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.841] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.841] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.841] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.846] |  :  .  |  :  .  |  Old stack:
[10:52:03.850] readImmediateCondition() ...
[10:52:03.850]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.850]  - Number of RDS files: 0
[10:52:03.851] readImmediateCondition() ... DONE
[10:52:03.836] MulticoreFuture:
[10:52:03.836] Label: ‘future_mapply-2’
[10:52:03.836] Expression:
[10:52:03.836] {
[10:52:03.836]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:03.836]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:03.836]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:03.836]         on.exit(options(oopts), add = TRUE)
[10:52:03.836]     }
[10:52:03.836]     {
[10:52:03.836]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:03.836]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:03.836]         do.call(mapply, args = args)
[10:52:03.836]     }
[10:52:03.836] }
[10:52:03.836] Lazy evaluation: FALSE
[10:52:03.836] Asynchronous evaluation: TRUE
[10:52:03.836] Local evaluation: TRUE
[10:52:03.836] Environment: R_GlobalEnv
[10:52:03.836] Capture standard output: TRUE
[10:52:03.836] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:03.836] Immediate condition classes: ‘immediateCondition’
[10:52:03.836] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:03.836] Packages: <none>
[10:52:03.836] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:03.836] Resolved: FALSE
[10:52:03.836] Value: <not collected>
[10:52:03.836] Conditions captured: <none>
[10:52:03.836] Early signaling: FALSE
[10:52:03.836] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:03.836] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:03.852] Chunk #2 of 2 ... DONE
[10:52:03.852] Launching 2 futures (chunks) ... DONE
[10:52:03.852] Resolving 2 futures (chunks) ...
[10:52:03.846] |  :  .  |  :  .  |  List of 1
[10:52:03.846] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.846] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.846] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.846] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.846] |  :  .  |  :  .  |      ...)  
[10:52:03.846] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.846] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.846] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:03.846] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.846] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.846] |  :  .  |  :  .  |      ...)  
[10:52:03.846] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.846] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.852] value() on list ...
[10:52:03.852] |  :  .  |  :  .  |  Not identical
[10:52:03.852] |  recursive: 0
[10:52:03.853] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:03.853] |  length: 2
[10:52:03.853] |  
[10:52:03.853] |  Number of remaining objects: 2
[10:52:03.853] |  checking value #1 ...
[10:52:03.854] |  :  'obj' is MulticoreFuture
[10:52:03.853] |  :  .  |  :  .  |  :  List of 2
[10:52:03.853] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.853] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.853] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.853] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.853] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.853] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.853] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.853] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.853] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.853] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.853] |  :  .  |  :  .  |  :      ...)  
[10:52:03.853] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.853] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.853] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:03.853] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.853] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.853] |  :  .  |  :  .  |  :      ...)  
[10:52:03.853] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.860] |  :  .  |  :  .  |  :  Formals differ
[10:52:03.861] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:03.861] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:03.861] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:03.861] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:03.861] |  :  .  |  :  .  List of future strategies:
[10:52:03.861] |  :  .  |  :  .  1. sequential:
[10:52:03.861] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:03.861] |  :  .  |  :  .     - tweaked: FALSE
[10:52:03.861] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.864] |  :  readImmediateCondition() ...
[10:52:03.864] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.865] |  :   - Number of RDS files: 0
[10:52:03.865] |  :  readImmediateCondition() ... DONE
[10:52:03.865] |  checking value #1 ... done
[10:52:03.865] |  checking value #2 ...
[10:52:03.866] |  :  'obj' is MulticoreFuture
[10:52:03.864] |  :  .  |  :  .  List of 1
[10:52:03.864] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.864] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.864] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.864] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.864] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.864] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.864] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.869] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:03.869] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:03.869] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.869] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:03.869] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.870] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:03.870] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:03.870] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:03.870] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:03.870] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.871] |  :  .  |  assign_globals() ...
[10:52:03.876] |  :  readImmediateCondition() ...
[10:52:03.876] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.877] |  :   - Number of RDS files: 0
[10:52:03.877] |  :  readImmediateCondition() ... DONE
[10:52:03.877] |  checking value #2 ... done
[10:52:03.871] |  :  .  |  List of 5
[10:52:03.871] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:52:03.871] |  :  .  |   $ MoreArgs                 : NULL
[10:52:03.871] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:52:03.871] |  :  .  |    ..$ :List of 1
[10:52:03.871] |  :  .  |    .. ..$ : int 0
[10:52:03.871] |  :  .  |    ..$ :List of 1
[10:52:03.871] |  :  .  |    .. ..$ : int 1
[10:52:03.871] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:03.871] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:03.871] |  :  .  |   - attr(*, "where")=List of 5
[10:52:03.871] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:03.871] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:52:03.871] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:03.871] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:03.871] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:03.871] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:03.871] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:03.871] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:03.871] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:03.877] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:03.877] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:03.878] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:52:03.878] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:03.878] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:03.878] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:03.878] |  :  .  |  assign_globals() ... done
[10:52:03.880] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.880] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:03.881] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:03.881] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:03.881] |  :  .  |  :  .  |  :  New stack:
[10:52:03.881] |  :  .  |  :  .  |  :  List of 1
[10:52:03.881] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.881] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.881] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.881] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.881] |  :  .  |  :  .  |  :      ...)  
[10:52:03.881] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.881] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.881] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:03.881] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.881] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.881] |  :  .  |  :  .  |  :      ...)  
[10:52:03.881] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.881] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.884] |  :  .  |  :  .  |  :  Old stack:
[10:52:03.887] |  Number of remaining objects: 2
[10:52:03.887] |  checking value #1 ...
[10:52:03.888] |  :  'obj' is MulticoreFuture
[10:52:03.884] |  :  .  |  :  .  |  :  List of 1
[10:52:03.884] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.884] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.884] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.884] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.884] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.884] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.884] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.889] |  :  .  |  :  .  |  :  Not identical
[10:52:03.889] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:03.889] |  :  .  |  :  .  |  :  .  List of 2
[10:52:03.889] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.889] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.889] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.889] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.889] |  :  .  |  :  .  |  :  .      ...)  
[10:52:03.889] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.889] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.889] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:03.889] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.889] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.889] |  :  .  |  :  .  |  :  .      ...)  
[10:52:03.889] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.889] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:03.889] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:03.889] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:03.889] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.889] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:03.889] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:03.895] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:03.895] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:03.895] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:03.895] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:03.895] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:03.895] |  :  .  |  :  .  |  List of future strategies:
[10:52:03.895] |  :  .  |  :  .  |  1. multicore:
[10:52:03.895] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:03.895] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:03.895] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:03.898] |  :  readImmediateCondition() ...
[10:52:03.898] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.899] |  :   - Number of RDS files: 0
[10:52:03.899] |  :  readImmediateCondition() ... DONE
[10:52:03.899] |  checking value #1 ... done
[10:52:03.896] |  :  .  |  :  .  |  List of 1
[10:52:03.896] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:03.896] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:03.896] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:03.896] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.896] |  :  .  |  :  .  |      ...)  
[10:52:03.896] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.896] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.896] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:03.896] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:03.896] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:03.896] |  :  .  |  :  .  |      ...)  
[10:52:03.896] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:03.896] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:03.899] |  checking value #2 ...
[10:52:03.899] |  :  'obj' is MulticoreFuture
[10:52:03.899] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:03.899] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:03.900] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:03.900] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:03.900] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:03.900] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:03.900] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:03.900] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.901] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:03.901] |  :  readImmediateCondition() ...
[10:52:03.901] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.901] |  :   - Number of RDS files: 0
[10:52:03.901] |  :  readImmediateCondition() ... DONE
[10:52:03.901] |  :  MulticoreFuture #2
[10:52:03.902] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:03.902] |  :  .  nx: 2
[10:52:03.902] |  :  .  relay: TRUE
[10:52:03.902] |  :  .  stdout: TRUE
[10:52:03.902] |  :  .  signal: TRUE
[10:52:03.902] |  :  .  resignal: FALSE
[10:52:03.902] |  :  .  force: TRUE
[10:52:03.902] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:03.902] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:52:03.903] |  :  .  until=1
[10:52:03.903] |  :  .  relaying element #1
[10:52:03.903] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:03.903] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:03.903] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:03.903] |  :  value(<MulticoreFuture>, ...) ...
[10:52:03.903] |  :  .  result() for MulticoreFuture ...
[10:52:03.904] |  :  .  |  readImmediateCondition() ...
[10:52:03.904] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.904] |  :  .  |   - Number of RDS files: 0
[10:52:03.905] |  :  .  |  readImmediateCondition() ... DONE
[10:52:03.905] |  :  .  |  result() for MulticoreFuture ...
[10:52:03.905] |  :  .  |  result() for MulticoreFuture ... done
[10:52:03.905] |  :  .  result() for MulticoreFuture ... done
[10:52:03.905] |  :  .  result() for MulticoreFuture ...
[10:52:03.905] |  :  .  result() for MulticoreFuture ... done
[10:52:03.906] |  :  .  value: <list>
[10:52:03.906] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:03.906] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:03.906] |  :  .  nx: 2
[10:52:03.906] |  :  .  relay: TRUE
[10:52:03.906] |  :  .  stdout: TRUE
[10:52:03.906] |  :  .  signal: TRUE
[10:52:03.906] |  :  .  resignal: FALSE
[10:52:03.906] |  :  .  force: TRUE
[10:52:03.906] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:03.907] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:03.907] |  :  .  until=1
[10:52:03.907] |  :  .  relaying element #1
[10:52:03.907] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:03.907] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:03.907] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:03.907] |  :  length: 1 (resolved future 2)
[10:52:03.908] |  checking value #2 ... done
[10:52:03.918] |  Number of remaining objects: 1
[10:52:03.918] |  checking value #1 ...
[10:52:03.918] |  :  'obj' is MulticoreFuture
[10:52:03.928] |  :  readImmediateCondition() ...
[10:52:03.928] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.929] |  :   - Number of RDS files: 0
[10:52:03.929] |  :  readImmediateCondition() ... DONE
[10:52:03.929] |  checking value #1 ... done
[10:52:03.939] |  Number of remaining objects: 1
[10:52:03.939] |  checking value #1 ...
[10:52:03.940] |  :  'obj' is MulticoreFuture
[10:52:03.950] |  :  readImmediateCondition() ...
[10:52:03.950] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.951] |  :   - Number of RDS files: 0
[10:52:03.951] |  :  readImmediateCondition() ... DONE
[10:52:03.951] |  checking value #1 ... done
[10:52:03.961] |  Number of remaining objects: 1
[10:52:03.961] |  checking value #1 ...
[10:52:03.961] |  :  'obj' is MulticoreFuture
[10:52:03.972] |  :  readImmediateCondition() ...
[10:52:03.972] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.972] |  :   - Number of RDS files: 0
[10:52:03.972] |  :  readImmediateCondition() ... DONE
[10:52:03.972] |  checking value #1 ... done
[10:52:03.982] |  Number of remaining objects: 1
[10:52:03.983] |  checking value #1 ...
[10:52:03.983] |  :  'obj' is MulticoreFuture
[10:52:03.993] |  :  readImmediateCondition() ...
[10:52:03.993] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:03.993] |  :   - Number of RDS files: 0
[10:52:03.993] |  :  readImmediateCondition() ... DONE
[10:52:03.994] |  checking value #1 ... done
[10:52:04.004] |  Number of remaining objects: 1
[10:52:04.004] |  checking value #1 ...
[10:52:04.004] |  :  'obj' is MulticoreFuture
[10:52:04.014] |  :  readImmediateCondition() ...
[10:52:04.015] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.017] |  :   - Number of RDS files: 0
[10:52:04.017] |  :  readImmediateCondition() ... DONE
[10:52:04.017] |  checking value #1 ... done
[10:52:04.027] |  Number of remaining objects: 1
[10:52:04.028] |  checking value #1 ...
[10:52:04.028] |  :  'obj' is MulticoreFuture
[10:52:04.038] |  :  readImmediateCondition() ...
[10:52:04.038] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.039] |  :   - Number of RDS files: 0
[10:52:04.039] |  :  readImmediateCondition() ... DONE
[10:52:04.039] |  checking value #1 ... done
[10:52:04.049] |  Number of remaining objects: 1
[10:52:04.049] |  checking value #1 ...
[10:52:04.050] |  :  'obj' is MulticoreFuture
[10:52:04.060] |  :  readImmediateCondition() ...
[10:52:04.060] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.060] |  :   - Number of RDS files: 0
[10:52:04.060] |  :  readImmediateCondition() ... DONE
[10:52:04.061] |  checking value #1 ... done
[10:52:04.071] |  Number of remaining objects: 1
[10:52:04.071] |  checking value #1 ...
[10:52:04.071] |  :  'obj' is MulticoreFuture
[10:52:04.081] |  :  readImmediateCondition() ...
[10:52:04.082] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.082] |  :   - Number of RDS files: 0
[10:52:04.082] |  :  readImmediateCondition() ... DONE
[10:52:04.082] |  checking value #1 ... done
[10:52:04.092] |  Number of remaining objects: 1
[10:52:04.093] |  checking value #1 ...
[10:52:04.093] |  :  'obj' is MulticoreFuture
[10:52:04.103] |  :  readImmediateCondition() ...
[10:52:04.103] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.104] |  :   - Number of RDS files: 0
[10:52:04.104] |  :  readImmediateCondition() ... DONE
[10:52:04.104] |  checking value #1 ... done
[10:52:04.114] |  Number of remaining objects: 1
[10:52:04.114] |  checking value #1 ...
[10:52:04.115] |  :  'obj' is MulticoreFuture
[10:52:04.125] |  :  readImmediateCondition() ...
[10:52:04.125] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.125] |  :   - Number of RDS files: 0
[10:52:04.125] |  :  readImmediateCondition() ... DONE
[10:52:04.126] |  checking value #1 ... done
[10:52:04.136] |  Number of remaining objects: 1
[10:52:04.136] |  checking value #1 ...
[10:52:04.136] |  :  'obj' is MulticoreFuture
[10:52:04.146] |  :  readImmediateCondition() ...
[10:52:04.147] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.147] |  :   - Number of RDS files: 0
[10:52:04.147] |  :  readImmediateCondition() ... DONE
[10:52:04.147] |  checking value #1 ... done
[10:52:04.157] |  Number of remaining objects: 1
[10:52:04.157] |  checking value #1 ...
[10:52:04.158] |  :  'obj' is MulticoreFuture
[10:52:04.168] |  :  readImmediateCondition() ...
[10:52:04.168] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.168] |  :   - Number of RDS files: 0
[10:52:04.168] |  :  readImmediateCondition() ... DONE
[10:52:04.169] |  checking value #1 ... done
[10:52:04.179] |  Number of remaining objects: 1
[10:52:04.179] |  checking value #1 ...
[10:52:04.179] |  :  'obj' is MulticoreFuture
[10:52:04.189] |  :  readImmediateCondition() ...
[10:52:04.189] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.190] |  :   - Number of RDS files: 0
[10:52:04.190] |  :  readImmediateCondition() ... DONE
[10:52:04.190] |  checking value #1 ... done
[10:52:04.200] |  Number of remaining objects: 1
[10:52:04.200] |  checking value #1 ...
[10:52:04.200] |  :  'obj' is MulticoreFuture
[10:52:04.211] |  :  readImmediateCondition() ...
[10:52:04.211] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.211] |  :   - Number of RDS files: 0
[10:52:04.211] |  :  readImmediateCondition() ... DONE
[10:52:04.211] |  checking value #1 ... done
[10:52:04.221] |  Number of remaining objects: 1
[10:52:04.221] |  checking value #1 ...
[10:52:04.222] |  :  'obj' is MulticoreFuture
[10:52:04.232] |  :  readImmediateCondition() ...
[10:52:04.232] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.232] |  :   - Number of RDS files: 0
[10:52:04.232] |  :  readImmediateCondition() ... DONE
[10:52:04.233] |  checking value #1 ... done
[10:52:04.243] |  Number of remaining objects: 1
[10:52:04.243] |  checking value #1 ...
[10:52:04.243] |  :  'obj' is MulticoreFuture
[10:52:04.253] |  :  readImmediateCondition() ...
[10:52:04.254] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.254] |  :   - Number of RDS files: 0
[10:52:04.254] |  :  readImmediateCondition() ... DONE
[10:52:04.254] |  checking value #1 ... done
[10:52:04.264] |  Number of remaining objects: 1
[10:52:04.265] |  checking value #1 ...
[10:52:04.265] |  :  'obj' is MulticoreFuture
[10:52:04.275] |  :  readImmediateCondition() ...
[10:52:04.275] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.275] |  :   - Number of RDS files: 0
[10:52:04.275] |  :  readImmediateCondition() ... DONE
[10:52:04.276] |  checking value #1 ... done
[10:52:04.286] |  Number of remaining objects: 1
[10:52:04.286] |  checking value #1 ...
[10:52:04.286] |  :  'obj' is MulticoreFuture
[10:52:04.296] |  :  readImmediateCondition() ...
[10:52:04.297] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.297] |  :   - Number of RDS files: 0
[10:52:04.297] |  :  readImmediateCondition() ... DONE
[10:52:04.297] |  checking value #1 ... done
[10:52:04.307] |  Number of remaining objects: 1
[10:52:04.307] |  checking value #1 ...
[10:52:04.308] |  :  'obj' is MulticoreFuture
[10:52:04.318] |  :  readImmediateCondition() ...
[10:52:04.318] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.318] |  :   - Number of RDS files: 0
[10:52:04.318] |  :  readImmediateCondition() ... DONE
[10:52:04.319] |  checking value #1 ... done
[10:52:04.329] |  Number of remaining objects: 1
[10:52:04.329] |  checking value #1 ...
[10:52:04.329] |  :  'obj' is MulticoreFuture
[10:52:04.339] |  :  readImmediateCondition() ...
[10:52:04.340] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.340] |  :   - Number of RDS files: 0
[10:52:04.340] |  :  readImmediateCondition() ... DONE
[10:52:04.340] |  checking value #1 ... done
[10:52:04.350] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:04.350] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:04.350] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:04.350] |  Number of remaining objects: 1
[10:52:04.350] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:04.350] |  checking value #1 ...
[10:52:04.351] |  :  .  |  :  .  |  :  New stack:
[10:52:04.351] |  :  'obj' is MulticoreFuture
[10:52:04.351] |  :  .  |  :  .  |  :  List of 1
[10:52:04.351] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.351] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.351] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.351] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.351] |  :  .  |  :  .  |  :      ...)  
[10:52:04.351] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.351] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.351] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:04.351] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.351] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.351] |  :  .  |  :  .  |  :      ...)  
[10:52:04.351] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.351] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.354] |  :  .  |  :  .  |  :  Old stack:
[10:52:04.354] |  :  .  |  :  .  |  :  List of 1
[10:52:04.354] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.354] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.354] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.354] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.354] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.354] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.354] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.356] |  :  .  |  :  .  |  :  Not identical
[10:52:04.356] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:04.357] |  :  .  |  :  .  |  :  .  List of 2
[10:52:04.357] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.357] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.357] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.357] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.357] |  :  .  |  :  .  |  :  .      ...)  
[10:52:04.357] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.357] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.357] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:04.357] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.357] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.357] |  :  .  |  :  .  |  :  .      ...)  
[10:52:04.357] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.357] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.357] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.357] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.357] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.357] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.357] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.361] |  :  readImmediateCondition() ...
[10:52:04.361] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.361] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:04.361] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:04.361] |  :   - Number of RDS files: 0
[10:52:04.361] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:04.361] |  :  readImmediateCondition() ... DONE
[10:52:04.361] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:04.361] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:04.361] |  checking value #1 ... done
[10:52:04.362] |  :  .  |  :  .  |  List of future strategies:
[10:52:04.362] |  :  .  |  :  .  |  1. multicore:
[10:52:04.362] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:04.362] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:04.362] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:04.362] |  :  .  |  :  .  |  List of 1
[10:52:04.362] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.362] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.362] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.362] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.362] |  :  .  |  :  .  |      ...)  
[10:52:04.362] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.362] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.362] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:04.362] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.362] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.362] |  :  .  |  :  .  |      ...)  
[10:52:04.362] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.362] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.367] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:04.368] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:04.368] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.368] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:04.368] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.368] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:04.368] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:04.368] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:04.369] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:04.372] |  Number of remaining objects: 1
[10:52:04.372] |  checking value #1 ...
[10:52:04.372] |  :  'obj' is MulticoreFuture
[10:52:04.372] |  :  readImmediateCondition() ...
[10:52:04.372] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.373] |  :   - Number of RDS files: 0
[10:52:04.373] |  :  readImmediateCondition() ... DONE
[10:52:04.373] |  :  MulticoreFuture #1
[10:52:04.373] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:04.373] |  :  .  nx: 2
[10:52:04.373] |  :  .  relay: TRUE
[10:52:04.373] |  :  .  stdout: TRUE
[10:52:04.373] |  :  .  signal: TRUE
[10:52:04.373] |  :  .  resignal: FALSE
[10:52:04.374] |  :  .  force: TRUE
[10:52:04.374] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:04.374] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:04.374] |  :  .  until=1
[10:52:04.374] |  :  .  relaying element #1
[10:52:04.374] |  :  .  result() for MulticoreFuture ...
[10:52:04.375] |  :  .  |  readImmediateCondition() ...
[10:52:04.375] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.375] |  :  .  |   - Number of RDS files: 0
[10:52:04.375] |  :  .  |  readImmediateCondition() ... DONE
[10:52:04.375] |  :  .  |  result() for MulticoreFuture ...
[10:52:04.375] |  :  .  |  result() for MulticoreFuture ... done
[10:52:04.375] |  :  .  result() for MulticoreFuture ... done
[10:52:04.375] |  :  .  result() for MulticoreFuture ...
[10:52:04.376] |  :  .  result() for MulticoreFuture ... done
[10:52:04.376] |  :  .  result() for MulticoreFuture ...
[10:52:04.376] |  :  .  result() for MulticoreFuture ... done
[10:52:04.376] |  :  .  result() for MulticoreFuture ...
[10:52:04.376] |  :  .  result() for MulticoreFuture ... done
[10:52:04.376] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:04.376] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:04.376] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:04.376] |  :  value(<MulticoreFuture>, ...) ...
[10:52:04.377] |  :  .  result() for MulticoreFuture ...
[10:52:04.377] |  :  .  result() for MulticoreFuture ... done
[10:52:04.377] |  :  .  result() for MulticoreFuture ...
[10:52:04.377] |  :  .  result() for MulticoreFuture ... done
[10:52:04.377] |  :  .  value: <list>
[10:52:04.377] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:04.379] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:04.379] |  :  .  nx: 2
[10:52:04.379] |  :  .  relay: TRUE
[10:52:04.380] |  :  .  stdout: TRUE
[10:52:04.380] |  :  .  signal: TRUE
[10:52:04.380] |  :  .  resignal: FALSE
[10:52:04.380] |  :  .  force: TRUE
[10:52:04.380] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:04.380] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:04.380] |  :  .  until=2
[10:52:04.380] |  :  .  relaying element #2
[10:52:04.380] |  :  .  result() for MulticoreFuture ...
[10:52:04.381] |  :  .  result() for MulticoreFuture ... done
[10:52:04.381] |  :  .  result() for MulticoreFuture ...
[10:52:04.381] |  :  .  result() for MulticoreFuture ... done
[10:52:04.381] |  :  .  result() for MulticoreFuture ...
[10:52:04.381] |  :  .  result() for MulticoreFuture ... done
[10:52:04.381] |  :  .  result() for MulticoreFuture ...
[10:52:04.381] |  :  .  result() for MulticoreFuture ... done
[10:52:04.382] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:04.382] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:04.382] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:04.382] |  :  length: 0 (resolved future 1)
[10:52:04.382] |  checking value #1 ... done
[10:52:04.382] |  Relaying remaining futures ...
[10:52:04.382] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:04.382] |  :  .  nx: 2
[10:52:04.383] |  :  .  relay: TRUE
[10:52:04.383] |  :  .  stdout: TRUE
[10:52:04.383] |  :  .  signal: TRUE
[10:52:04.383] |  :  .  resignal: FALSE
[10:52:04.383] |  :  .  force: TRUE
[10:52:04.383] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:04.383] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:04.383] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:04.384] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:04.384] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:04.384] |  Relaying remaining futures ... done
[10:52:04.384] value() on list ... done
[10:52:04.384]  - Number of value chunks collected: 2
[10:52:04.384] Resolving 2 futures (chunks) ... DONE
[10:52:04.384] Reducing values from 2 chunks ...
[10:52:04.384]  - Number of values collected after concatenation: 2
[10:52:04.384]  - Number of values expected: 2
[10:52:04.385] Reducing values from 2 chunks ... DONE
[10:52:04.385] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ... DONE
* future_mapply(x, ..., future.stdout = NA) ...
[10:52:04.385] future_mapply() ...
[10:52:04.385] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.386] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:04.386] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.386] Number of chunks: 2
[10:52:04.386] getGlobalsAndPackagesXApply() ...
[10:52:04.386]  - future.globals: TRUE
[10:52:04.386] getGlobalsAndPackages() ...
[10:52:04.387] |  Searching for globals ...
[10:52:04.389] |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:52:04.389] |  Searching for globals ... DONE
[10:52:04.389] |  Resolving globals: FALSE
[10:52:04.389] |  Search for packages associated with the globals ...
[10:52:04.389] |  :  Packages associated with globals: [1] ‘base’
[10:52:04.389] |  :  Packages: [1] ‘base’
[10:52:04.390] |  Search for packages associated with the globals ... DONE
[10:52:04.390] |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:52:04.390] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:52:04.390] |  Packages after dropping 'base': [0] 
[10:52:04.390] |  globals: [1] ‘FUN’
[10:52:04.390] |  packages: [0] 
[10:52:04.391] getGlobalsAndPackages() ... done
[10:52:04.391]  - globals found/used: [n=1] ‘FUN’
[10:52:04.391]  - needed namespaces: [n=0] 
[10:52:04.391] Finding globals ... DONE
[10:52:04.391] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:52:04.391] List of 2
[10:52:04.391]  $ ...future.FUN:function (x, y)  
[10:52:04.391]  $ MoreArgs     : NULL
[10:52:04.391]  - attr(*, "where")=List of 2
[10:52:04.391]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:04.391]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:52:04.391]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:04.391]  - attr(*, "resolved")= logi FALSE
[10:52:04.391]  - attr(*, "total_size")= num NA
[10:52:04.394] Packages to be attached in all futures: [n=0] 
[10:52:04.394] getGlobalsAndPackagesXApply() ... DONE
[10:52:04.394] Number of futures (= number of chunks): 2
[10:52:04.395] Launching 2 futures (chunks) ...
[10:52:04.395] Chunk #1 of 2 ...
[10:52:04.395]  - Finding globals in '...' for chunk #1 ...
[10:52:04.395] getGlobalsAndPackages() ...
[10:52:04.395] |  Searching for globals ...
[10:52:04.395] |  :  globals found: [0] 
[10:52:04.396] |  Searching for globals ... DONE
[10:52:04.396] |  globals: [0] <none>
[10:52:04.396] |  packages: [0] <none>
[10:52:04.396] getGlobalsAndPackages() ... done
[10:52:04.396]    + additional globals found: [n=0] 
[10:52:04.396]    + additional namespaces needed: [n=0] 
[10:52:04.396]  - Finding globals in '...' for chunk #1 ... DONE
[10:52:04.396]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:04.396]  - seeds: <none>
[10:52:04.396]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:04.396] getGlobalsAndPackages() ...
[10:52:04.397] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:04.397] |  Resolving globals: FALSE
[10:52:04.397] |  Search for packages associated with the globals ...
[10:52:04.397] |  :  Packages associated with globals: [0] 
[10:52:04.397] |  :  Packages: [0] 
[10:52:04.397] |  Search for packages associated with the globals ... DONE
[10:52:04.397] |  Packages after dropping 'base': [0] 
[10:52:04.398] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:04.398] |  packages: [0] 
[10:52:04.398] getGlobalsAndPackages() ... done
[10:52:04.398] run() for Future (‘Future’) ...
[10:52:04.398] |  state: ‘created’
[10:52:04.398] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.398] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.398] |  Using MulticoreFutureBackend ...
[10:52:04.399] |  :  Launching futures ...
[10:52:04.399] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:04.399] |  :  .  |  getFutureData() ...
[10:52:04.401] |  :  .  |  :  getFutureCore() ...
[10:52:04.401] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:04.401] |  :  .  |  :  getFutureCore() ... done
[10:52:04.401] |  :  .  |  :  getFutureCapture() ...
[10:52:04.401] |  :  .  |  :  getFutureCapture() ... done
[10:52:04.401] |  :  .  |  :  getFutureContext() ...
[10:52:04.401] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.402] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:04.402] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.402] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:04.402] |  :  .  |  :  getFutureContext() ... done
[10:52:04.402] |  :  .  |  getFutureData() ... done
[10:52:04.402] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:04.403] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:04.405] |  :  .  |  MulticoreFuture started
[10:52:04.405] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:04.406] |  :  .  |  attachPackages() ...
[10:52:04.406] |  :  Launching futures ... done
[10:52:04.406] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:04.406] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:04.407] |  :  .  |  attachPackages() ... DONE
[10:52:04.407] |  Using MulticoreFutureBackend ... done
[10:52:04.407] |  :  .  |  attachPackages() ...
[10:52:04.407] run() for Future (‘MulticoreFuture’) ... done
[10:52:04.408] |  :  .  |  :  packages: [n=0] 
[10:52:04.408] Created future:
[10:52:04.408] |  :  .  |  attachPackages() ... DONE
[10:52:04.409] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.410] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:04.410] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.411] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:04.411] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:04.412] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:04.412] |  :  .  |  :  .  |  New stack:
[10:52:04.412] |  :  .  |  :  .  |  List of 1
[10:52:04.412] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.412] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.412] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.412] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.412] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.412] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.412] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.419] |  :  .  |  :  .  |  Old stack:
[10:52:04.421] readImmediateCondition() ...
[10:52:04.421]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.421]  - Number of RDS files: 0
[10:52:04.422] readImmediateCondition() ... DONE
[10:52:04.408] MulticoreFuture:
[10:52:04.408] Label: ‘future_mapply-1’
[10:52:04.408] Expression:
[10:52:04.408] {
[10:52:04.408]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:04.408]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:04.408]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:04.408]         on.exit(options(oopts), add = TRUE)
[10:52:04.408]     }
[10:52:04.408]     {
[10:52:04.408]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:04.408]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:04.408]         do.call(mapply, args = args)
[10:52:04.408]     }
[10:52:04.408] }
[10:52:04.408] Lazy evaluation: FALSE
[10:52:04.408] Asynchronous evaluation: TRUE
[10:52:04.408] Local evaluation: TRUE
[10:52:04.408] Environment: R_GlobalEnv
[10:52:04.408] Capture standard output: NA
[10:52:04.408] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:04.408] Immediate condition classes: ‘immediateCondition’
[10:52:04.408] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:04.408] Packages: <none>
[10:52:04.408] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:04.408] Resolved: FALSE
[10:52:04.408] Value: <not collected>
[10:52:04.408] Conditions captured: <none>
[10:52:04.408] Early signaling: FALSE
[10:52:04.408] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:04.408] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:04.422] Chunk #1 of 2 ... DONE
[10:52:04.422] Chunk #2 of 2 ...
[10:52:04.423]  - Finding globals in '...' for chunk #2 ...
[10:52:04.423] getGlobalsAndPackages() ...
[10:52:04.423] |  Searching for globals ...
[10:52:04.419] |  :  .  |  :  .  |  List of 1
[10:52:04.419] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.419] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.419] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.419] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.419] |  :  .  |  :  .  |      ...)  
[10:52:04.419] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.419] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.419] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:04.419] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.419] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.419] |  :  .  |  :  .  |      ...)  
[10:52:04.419] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.419] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.424] |  :  globals found: [0] 
[10:52:04.424] |  :  .  |  :  .  |  Not identical
[10:52:04.424] |  Searching for globals ... DONE
[10:52:04.424] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:04.424] |  globals: [0] <none>
[10:52:04.424] |  packages: [0] <none>
[10:52:04.425] getGlobalsAndPackages() ... done
[10:52:04.425]    + additional globals found: [n=0] 
[10:52:04.425]    + additional namespaces needed: [n=0] 
[10:52:04.425]  - Finding globals in '...' for chunk #2 ... DONE
[10:52:04.425]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:04.426]  - seeds: <none>
[10:52:04.426]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:04.426] getGlobalsAndPackages() ...
[10:52:04.426] |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:04.426] |  Resolving globals: FALSE
[10:52:04.426] |  Search for packages associated with the globals ...
[10:52:04.427] |  :  Packages associated with globals: [0] 
[10:52:04.427] |  :  Packages: [0] 
[10:52:04.427] |  Search for packages associated with the globals ... DONE
[10:52:04.428] |  Packages after dropping 'base': [0] 
[10:52:04.428] |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:04.428] |  packages: [0] 
[10:52:04.428] getGlobalsAndPackages() ... done
[10:52:04.429] run() for Future (‘Future’) ...
[10:52:04.429] |  state: ‘created’
[10:52:04.429] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.429] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.429] |  Using MulticoreFutureBackend ...
[10:52:04.429] |  :  Launching futures ...
[10:52:04.430] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:04.430] |  :  .  |  getFutureData() ...
[10:52:04.424] |  :  .  |  :  .  |  :  List of 2
[10:52:04.424] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.424] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.424] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.424] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.424] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.424] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.424] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.424] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.424] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.424] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.424] |  :  .  |  :  .  |  :      ...)  
[10:52:04.424] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.424] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.424] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:04.424] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.424] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.424] |  :  .  |  :  .  |  :      ...)  
[10:52:04.424] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.430] |  :  .  |  :  getFutureCore() ...
[10:52:04.430] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:04.430] |  :  .  |  :  getFutureCore() ... done
[10:52:04.430] |  :  .  |  :  getFutureCapture() ...
[10:52:04.430] |  :  .  |  :  getFutureCapture() ... done
[10:52:04.430] |  :  .  |  :  .  |  :  Formals differ
[10:52:04.430] |  :  .  |  :  getFutureContext() ...
[10:52:04.431] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:04.431] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.431] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:04.431] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:04.431] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:04.431] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.431] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:04.431] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:04.431] |  :  .  |  :  getFutureContext() ... done
[10:52:04.431] |  :  .  |  getFutureData() ... done
[10:52:04.431] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:04.431] |  :  .  |  :  .  List of future strategies:
[10:52:04.431] |  :  .  |  :  .  1. sequential:
[10:52:04.431] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:04.431] |  :  .  |  :  .     - tweaked: FALSE
[10:52:04.431] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.432] |  :  .  |  requestCore(..., workers = 2) ...
[10:52:04.434] |  :  .  |  MulticoreFuture started
[10:52:04.435] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:52:04.435] |  :  Launching futures ... done
[10:52:04.435] |  :  .  |  attachPackages() ...
[10:52:04.435] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:04.435] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:04.436] |  Using MulticoreFutureBackend ... done
[10:52:04.436] |  :  .  |  attachPackages() ... DONE
[10:52:04.436] run() for Future (‘MulticoreFuture’) ... done
[10:52:04.436] |  :  .  |  attachPackages() ...
[10:52:04.437] |  :  .  |  :  packages: [n=0] 
[10:52:04.437] Created future:
[10:52:04.437] |  :  .  |  attachPackages() ... DONE
[10:52:04.432] |  :  .  |  :  .  List of 1
[10:52:04.432] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.432] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.432] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.432] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.432] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.432] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.432] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.437] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:04.438] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:04.438] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.438] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:04.438] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.438] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.438] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:04.438] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:04.439] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:04.439] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:04.439] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.439] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:04.439] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:04.439] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:04.440] |  :  .  |  assign_globals() ...
[10:52:04.440] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:04.440] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:04.440] |  :  .  |  :  .  |  New stack:
[10:52:04.441] |  :  .  |  :  .  |  List of 1
[10:52:04.441] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.441] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.441] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.441] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.441] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.441] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.441] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.445] |  :  .  |  :  .  |  Old stack:
[10:52:04.440] |  :  .  |  List of 5
[10:52:04.440] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:52:04.440] |  :  .  |   $ MoreArgs                 : NULL
[10:52:04.440] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:52:04.440] |  :  .  |    ..$ :List of 1
[10:52:04.440] |  :  .  |    .. ..$ : int 1
[10:52:04.440] |  :  .  |    ..$ :List of 1
[10:52:04.440] |  :  .  |    .. ..$ : int 0
[10:52:04.440] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:04.440] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:04.440] |  :  .  |   - attr(*, "where")=List of 5
[10:52:04.440] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:04.440] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:52:04.440] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:04.440] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:04.440] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:04.440] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:04.440] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:04.440] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:04.440] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:04.446] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:04.446] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:04.447] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:52:04.447] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:04.447] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:04.447] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:04.447] |  :  .  |  assign_globals() ... done
[10:52:04.449] readImmediateCondition() ...
[10:52:04.450]   - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.450]  - Number of RDS files: 0
[10:52:04.450] readImmediateCondition() ... DONE
[10:52:04.445] |  :  .  |  :  .  |  List of 1
[10:52:04.445] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.445] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.445] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.445] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.445] |  :  .  |  :  .  |      ...)  
[10:52:04.445] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.445] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.445] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:04.445] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.445] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.445] |  :  .  |  :  .  |      ...)  
[10:52:04.445] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.445] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.451] |  :  .  |  :  .  |  Not identical
[10:52:04.437] MulticoreFuture:
[10:52:04.437] Label: ‘future_mapply-2’
[10:52:04.437] Expression:
[10:52:04.437] {
[10:52:04.437]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:04.437]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:04.437]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:04.437]         on.exit(options(oopts), add = TRUE)
[10:52:04.437]     }
[10:52:04.437]     {
[10:52:04.437]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:04.437]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:04.437]         do.call(mapply, args = args)
[10:52:04.437]     }
[10:52:04.437] }
[10:52:04.437] Lazy evaluation: FALSE
[10:52:04.437] Asynchronous evaluation: TRUE
[10:52:04.437] Local evaluation: TRUE
[10:52:04.437][10:52:04.451] |  :  .  |  :  .  |  all.equal() for future ...
 Environment: R_GlobalEnv
[10:52:04.437] Capture standard output: NA
[10:52:04.437] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:04.437] Immediate condition classes: ‘immediateCondition’
[10:52:04.437] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:04.437] Packages: <none>
[10:52:04.437] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:04.437] Resolved: FALSE
[10:52:04.437] Value: <not collected>
[10:52:04.437] Conditions captured: <none>
[10:52:04.437] Early signaling: FALSE
[10:52:04.437] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:04.437] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:04.451] Chunk #2 of 2 ... DONE
[10:52:04.451] Launching 2 futures (chunks) ... DONE
[10:52:04.451] Resolving 2 futures (chunks) ...
[10:52:04.452] value() on list ...
[10:52:04.452] |  recursive: 0
[10:52:04.452] |  length: 2
[10:52:04.452] |  
[10:52:04.453] |  Number of remaining objects: 2
[10:52:04.453] |  checking value #1 ...
[10:52:04.453] |  :  'obj' is MulticoreFuture
[10:52:04.463] |  :  readImmediateCondition() ...
[10:52:04.464] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.464] |  :   - Number of RDS files: 0
[10:52:04.464] |  :  readImmediateCondition() ... DONE
[10:52:04.465] |  checking value #1 ... done
[10:52:04.465] |  checking value #2 ...
[10:52:04.465] |  :  'obj' is MulticoreFuture
[10:52:04.451] |  :  .  |  :  .  |  :  List of 2
[10:52:04.451] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.451] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.451] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.451] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.451] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.451] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.451] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.451] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.451] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.451] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.451] |  :  .  |  :  .  |  :      ...)  
[10:52:04.451] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.451] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.451] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:04.451] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.451] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.451] |  :  .  |  :  .  |  :      ...)  
[10:52:04.451] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.467] |  :  .  |  :  .  |  :  Formals differ
[10:52:04.467] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:04.468] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:04.468] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:04.468] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:04.468] |  :  .  |  :  .  List of future strategies:
[10:52:04.468] |  :  .  |  :  .  1. sequential:
[10:52:04.468] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:04.468] |  :  .  |  :  .     - tweaked: FALSE
[10:52:04.468] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.469] |  :  .  |  :  .  List of 1
[10:52:04.469] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.469] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.469] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.469] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.469] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.469] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.469] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.472] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:04.472] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:04.472] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.473] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:04.473] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.473] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:52:04.473] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:04.474] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:52:04.474] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:04.474] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:04.475] |  :  .  |  assign_globals() ...
[10:52:04.475] |  :  readImmediateCondition() ...
[10:52:04.476] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.476] |  :   - Number of RDS files: 0
[10:52:04.476] |  :  readImmediateCondition() ... DONE
[10:52:04.476] |  checking value #2 ... done
[10:52:04.475] |  :  .  |  List of 5
[10:52:04.475] |  :  .  |   $ ...future.FUN            :function (x, y)  
[10:52:04.475] |  :  .  |   $ MoreArgs                 : NULL
[10:52:04.475] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:52:04.475] |  :  .  |    ..$ :List of 1
[10:52:04.475] |  :  .  |    .. ..$ : int 0
[10:52:04.475] |  :  .  |    ..$ :List of 1
[10:52:04.475] |  :  .  |    .. ..$ : int 1
[10:52:04.475] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:52:04.475] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:52:04.475] |  :  .  |   - attr(*, "where")=List of 5
[10:52:04.475] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:52:04.475] |  :  .  |    ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[10:52:04.475] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:52:04.475] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:52:04.475] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:52:04.475] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:04.475] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:04.475] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:04.475] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:04.481] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:52:04.481] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:52:04.481] |  :  .  |  - copied ‘MoreArgs’ to environment
[10:52:04.481] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:52:04.482] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:52:04.482] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:52:04.482] |  :  .  |  assign_globals() ... done
[10:52:04.484] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:04.486] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:04.486] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:04.487] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:04.487] |  Number of remaining objects: 2
[10:52:04.487] |  :  .  |  :  .  |  :  New stack:
[10:52:04.487] |  checking value #1 ...
[10:52:04.487] |  :  'obj' is MulticoreFuture
[10:52:04.487] |  :  .  |  :  .  |  :  List of 1
[10:52:04.487] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.487] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.487] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.487] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.487] |  :  .  |  :  .  |  :      ...)  
[10:52:04.487] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.487] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.487] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:04.487] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.487] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.487] |  :  .  |  :  .  |  :      ...)  
[10:52:04.487] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.487] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.491] |  :  .  |  :  .  |  :  Old stack:
[10:52:04.491] |  :  .  |  :  .  |  :  List of 1
[10:52:04.491] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.491] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.491] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.491] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.491] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.491] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.491] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.494] |  :  .  |  :  .  |  :  Not identical
[10:52:04.494] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:04.497] |  :  readImmediateCondition() ...
[10:52:04.498] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.498] |  :   - Number of RDS files: 0
[10:52:04.498] |  :  readImmediateCondition() ... DONE
[10:52:04.498] |  checking value #1 ... done
[10:52:04.494] |  :  .  |  :  .  |  :  .  List of 2
[10:52:04.494] |  :  .  |  :  .  |  :  .   $ target :function (..., workers [10:52:04.499] |  checking value #2 ...
= availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.494] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.494] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.494] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.494] |  :  .  |  :  .  |  :  .      ...)  
[10:52:04.494] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.494] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.494] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:04.494] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.494] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.494] |  :  .  |  :  .  |  :  .      ...)  
[10:52:04.494] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.494] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.494] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.494] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.494] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.494] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.494] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.499] |  :  'obj' is MulticoreFuture
[10:52:04.499] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:04.499] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:04.499] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:04.500] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:04.500] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:04.500] |  :  .  |  :  .  |  List of future strategies:
[10:52:04.500] |  :  .  |  :  .  |  1. multicore:
[10:52:04.500] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:04.500] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:04.500] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:04.500] |  :  .  |  :  .  |  List of 1
[10:52:04.500] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.500] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.500] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.500] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.500] |  :  .  |  :  .  |      ...)  
[10:52:04.500] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.500] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.500] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:04.500] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.500] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.500] |  :  .  |  :  .  |      ...)  
[10:52:04.500] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.500] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.503] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:04.503] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:04.503] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.504] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:04.504] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.504] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:04.504] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:04.504] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:04.504] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:04.505] |  :  readImmediateCondition() ...
[10:52:04.505] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.505] |  :   - Number of RDS files: 0
[10:52:04.505] |  :  readImmediateCondition() ... DONE
[10:52:04.505] |  :  MulticoreFuture #2
[10:52:04.505] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:04.506] |  :  .  nx: 2
[10:52:04.506] |  :  .  relay: TRUE
[10:52:04.506] |  :  .  stdout: TRUE
[10:52:04.506] |  :  .  signal: TRUE
[10:52:04.506] |  :  .  resignal: FALSE
[10:52:04.506] |  :  .  force: TRUE
[10:52:04.506] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:04.506] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:52:04.506] |  :  .  until=1
[10:52:04.507] |  :  .  relaying element #1
[10:52:04.507] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:04.507] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:04.507] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:04.507] |  :  value(<MulticoreFuture>, ...) ...
[10:52:04.507] |  :  .  result() for MulticoreFuture ...
[10:52:04.508] |  :  .  |  readImmediateCondition() ...
[10:52:04.508] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.508] |  :  .  |   - Number of RDS files: 0
[10:52:04.509] |  :  .  |  readImmediateCondition() ... DONE
[10:52:04.509] |  :  .  |  result() for MulticoreFuture ...
[10:52:04.509] |  :  .  |  result() for MulticoreFuture ... done
[10:52:04.509] |  :  .  result() for MulticoreFuture ... done
[10:52:04.509] |  :  .  result() for MulticoreFuture ...
[10:52:04.509] |  :  .  result() for MulticoreFuture ... done
[10:52:04.510] |  :  .  value: <list>
[10:52:04.510] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:04.510] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:52:04.513] |  :  .  nx: 2
[10:52:04.513] |  :  .  relay: TRUE
[10:52:04.513] |  :  .  stdout: TRUE
[10:52:04.513] |  :  .  signal: TRUE
[10:52:04.514] |  :  .  resignal: FALSE
[10:52:04.514] |  :  .  force: TRUE
[10:52:04.514] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:04.514] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:04.514] |  :  .  until=1
[10:52:04.514] |  :  .  relaying element #1
[10:52:04.515] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:04.515] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:04.515] |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:04.515] |  :  length: 1 (resolved future 2)
[10:52:04.515] |  checking value #2 ... done
[10:52:04.526] |  Number of remaining objects: 1
[10:52:04.526] |  checking value #1 ...
[10:52:04.526] |  :  'obj' is MulticoreFuture
[10:52:04.536] |  :  readImmediateCondition() ...
[10:52:04.537] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.537] |  :   - Number of RDS files: 0
[10:52:04.537] |  :  readImmediateCondition() ... DONE
[10:52:04.537] |  checking value #1 ... done
[10:52:04.547] |  Number of remaining objects: 1
[10:52:04.548] |  checking value #1 ...
[10:52:04.548] |  :  'obj' is MulticoreFuture
[10:52:04.558] |  :  readImmediateCondition() ...
[10:52:04.558] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.558] |  :   - Number of RDS files: 0
[10:52:04.559] |  :  readImmediateCondition() ... DONE
[10:52:04.559] |  checking value #1 ... done
[10:52:04.569] |  Number of remaining objects: 1
[10:52:04.569] |  checking value #1 ...
[10:52:04.569] |  :  'obj' is MulticoreFuture
[10:52:04.580] |  :  readImmediateCondition() ...
[10:52:04.580] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.580] |  :   - Number of RDS files: 0
[10:52:04.580] |  :  readImmediateCondition() ... DONE
[10:52:04.581] |  checking value #1 ... done
[10:52:04.591] |  Number of remaining objects: 1
[10:52:04.591] |  checking value #1 ...
[10:52:04.591] |  :  'obj' is MulticoreFuture
[10:52:04.601] |  :  readImmediateCondition() ...
[10:52:04.602] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.602] |  :   - Number of RDS files: 0
[10:52:04.602] |  :  readImmediateCondition() ... DONE
[10:52:04.602] |  checking value #1 ... done
[10:52:04.613] |  Number of remaining objects: 1
[10:52:04.613] |  checking value #1 ...
[10:52:04.613] |  :  'obj' is MulticoreFuture
[10:52:04.623] |  :  readImmediateCondition() ...
[10:52:04.623] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.624] |  :   - Number of RDS files: 0
[10:52:04.624] |  :  readImmediateCondition() ... DONE
[10:52:04.624] |  checking value #1 ... done
[10:52:04.634] |  Number of remaining objects: 1
[10:52:04.634] |  checking value #1 ...
[10:52:04.635] |  :  'obj' is MulticoreFuture
[10:52:04.645] |  :  readImmediateCondition() ...
[10:52:04.645] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.645] |  :   - Number of RDS files: 0
[10:52:04.645] |  :  readImmediateCondition() ... DONE
[10:52:04.645] |  checking value #1 ... done
[10:52:04.656] |  Number of remaining objects: 1
[10:52:04.656] |  checking value #1 ...
[10:52:04.656] |  :  'obj' is MulticoreFuture
[10:52:04.666] |  :  readImmediateCondition() ...
[10:52:04.667] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.667] |  :   - Number of RDS files: 0
[10:52:04.667] |  :  readImmediateCondition() ... DONE
[10:52:04.667] |  checking value #1 ... done
[10:52:04.677] |  Number of remaining objects: 1
[10:52:04.677] |  checking value #1 ...
[10:52:04.678] |  :  'obj' is MulticoreFuture
[10:52:04.688] |  :  readImmediateCondition() ...
[10:52:04.688] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.688] |  :   - Number of RDS files: 0
[10:52:04.688] |  :  readImmediateCondition() ... DONE
[10:52:04.688] |  checking value #1 ... done
[10:52:04.699] |  Number of remaining objects: 1
[10:52:04.699] |  checking value #1 ...
[10:52:04.699] |  :  'obj' is MulticoreFuture
[10:52:04.709] |  :  readImmediateCondition() ...
[10:52:04.709] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.710] |  :   - Number of RDS files: 0
[10:52:04.710] |  :  readImmediateCondition() ... DONE
[10:52:04.710] |  checking value #1 ... done
[10:52:04.720] |  Number of remaining objects: 1
[10:52:04.720] |  checking value #1 ...
[10:52:04.720] |  :  'obj' is MulticoreFuture
[10:52:04.731] |  :  readImmediateCondition() ...
[10:52:04.731] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.731] |  :   - Number of RDS files: 0
[10:52:04.731] |  :  readImmediateCondition() ... DONE
[10:52:04.731] |  checking value #1 ... done
[10:52:04.741] |  Number of remaining objects: 1
[10:52:04.742] |  checking value #1 ...
[10:52:04.742] |  :  'obj' is MulticoreFuture
[10:52:04.752] |  :  readImmediateCondition() ...
[10:52:04.752] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.752] |  :   - Number of RDS files: 0
[10:52:04.752] |  :  readImmediateCondition() ... DONE
[10:52:04.752] |  checking value #1 ... done
[10:52:04.763] |  Number of remaining objects: 1
[10:52:04.763] |  checking value #1 ...
[10:52:04.763] |  :  'obj' is MulticoreFuture
[10:52:04.773] |  :  readImmediateCondition() ...
[10:52:04.773] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.773] |  :   - Number of RDS files: 0
[10:52:04.774] |  :  readImmediateCondition() ... DONE
[10:52:04.774] |  checking value #1 ... done
[10:52:04.784] |  Number of remaining objects: 1
[10:52:04.784] |  checking value #1 ...
[10:52:04.784] |  :  'obj' is MulticoreFuture
[10:52:04.794] |  :  readImmediateCondition() ...
[10:52:04.794] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.795] |  :   - Number of RDS files: 0
[10:52:04.795] |  :  readImmediateCondition() ... DONE
[10:52:04.795] |  checking value #1 ... done
[10:52:04.805] |  Number of remaining objects: 1
[10:52:04.805] |  checking value #1 ...
[10:52:04.806] |  :  'obj' is MulticoreFuture
[10:52:04.816] |  :  readImmediateCondition() ...
[10:52:04.816] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.816] |  :   - Number of RDS files: 0
[10:52:04.816] |  :  readImmediateCondition() ... DONE
[10:52:04.816] |  checking value #1 ... done
[10:52:04.827] |  Number of remaining objects: 1
[10:52:04.827] |  checking value #1 ...
[10:52:04.827] |  :  'obj' is MulticoreFuture
[10:52:04.837] |  :  readImmediateCondition() ...
[10:52:04.838] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.838] |  :   - Number of RDS files: 0
[10:52:04.838] |  :  readImmediateCondition() ... DONE
[10:52:04.838] |  checking value #1 ... done
[10:52:04.848] |  Number of remaining objects: 1
[10:52:04.848] |  checking value #1 ...
[10:52:04.849] |  :  'obj' is MulticoreFuture
[10:52:04.859] |  :  readImmediateCondition() ...
[10:52:04.859] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.859] |  :   - Number of RDS files: 0
[10:52:04.859] |  :  readImmediateCondition() ... DONE
[10:52:04.860] |  checking value #1 ... done
[10:52:04.870] |  Number of remaining objects: 1
[10:52:04.870] |  checking value #1 ...
[10:52:04.870] |  :  'obj' is MulticoreFuture
[10:52:04.880] |  :  readImmediateCondition() ...
[10:52:04.881] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.881] |  :   - Number of RDS files: 0
[10:52:04.881] |  :  readImmediateCondition() ... DONE
[10:52:04.881] |  checking value #1 ... done
[10:52:04.891] |  Number of remaining objects: 1
[10:52:04.891] |  checking value #1 ...
[10:52:04.892] |  :  'obj' is MulticoreFuture
[10:52:04.902] |  :  readImmediateCondition() ...
[10:52:04.902] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.902] |  :   - Number of RDS files: 0
[10:52:04.902] |  :  readImmediateCondition() ... DONE
[10:52:04.902] |  checking value #1 ... done
[10:52:04.913] |  Number of remaining objects: 1
[10:52:04.913] |  checking value #1 ...
[10:52:04.913] |  :  'obj' is MulticoreFuture
[10:52:04.923] |  :  readImmediateCondition() ...
[10:52:04.923] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.924] |  :   - Number of RDS files: 0
[10:52:04.924] |  :  readImmediateCondition() ... DONE
[10:52:04.924] |  checking value #1 ... done
[10:52:04.934] |  Number of remaining objects: 1
[10:52:04.934] |  checking value #1 ...
[10:52:04.935] |  :  'obj' is MulticoreFuture
[10:52:04.945] |  :  readImmediateCondition() ...
[10:52:04.945] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.945] |  :   - Number of RDS files: 0
[10:52:04.945] |  :  readImmediateCondition() ... DONE
[10:52:04.947] |  checking value #1 ... done
[10:52:04.950] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:04.950] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:04.951] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:04.951] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:04.951] |  :  .  |  :  .  |  :  New stack:
[10:52:04.951] |  :  .  |  :  .  |  :  List of 1
[10:52:04.951] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.951] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.951] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.951] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.951] |  :  .  |  :  .  |  :      ...)  
[10:52:04.951] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.951] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.951] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:04.951] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.951] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.951] |  :  .  |  :  .  |  :      ...)  
[10:52:04.951] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.951] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.954] |  :  .  |  :  .  |  :  Old stack:
[10:52:04.954] |  :  .  |  :  .  |  :  List of 1
[10:52:04.954] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.954] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.954] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.954] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.954] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.954] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.954] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.957] |  :  .  |  :  .  |  :  Not identical
[10:52:04.957] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:52:04.958] |  Number of remaining objects: 1
[10:52:04.958] |  checking value #1 ...
[10:52:04.958] |  :  'obj' is MulticoreFuture
[10:52:04.957] |  :  .  |  :  .  |  :  .  List of 2
[10:52:04.957] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.957] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.957] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.957] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.957] |  :  .  |  :  .  |  :  .      ...)  
[10:52:04.957] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.957] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.957] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:04.957] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.957] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.957] |  :  .  |  :  .  |  :  .      ...)  
[10:52:04.957] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.957] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.957] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:04.957] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:04.957] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.957] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:04.957] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:04.965] |  :  .  |  :  .  |  :  .  Formals differ
[10:52:04.965] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:52:04.965] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:52:04.965] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:04.965] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:52:04.965] |  :  .  |  :  .  |  List of future strategies:
[10:52:04.965] |  :  .  |  :  .  |  1. multicore:
[10:52:04.965] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:04.965] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:04.965] |  :  .  |  :  .  |     - call: plan(strategy)
[10:52:04.969] |  :  readImmediateCondition() ...
[10:52:04.966] |  :  .  |  :  .  |  List of 1
[10:52:04.966] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.966] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.966] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.966] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.966] |  :  .  |  :  .  |      ...)  
[10:52:04.966] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.966] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.966] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:04.966] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.966] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.966] |  :  .  |  :  .  |      ...)  
[10:52:04.966] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.966] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.969] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.969] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:04.969] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:04.969] |  :   - Number of RDS files: 0
[10:52:04.969] |  :  readImmediateCondition() ... DONE
[10:52:04.969] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.969] |  checking value #1 ... done
[10:52:04.969] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:04.969] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:04.970] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:52:04.970] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:04.970] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:04.970] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:04.980] |  Number of remaining objects: 1
[10:52:04.980] |  checking value #1 ...
[10:52:04.980] |  :  'obj' is MulticoreFuture
[10:52:04.980] |  :  readImmediateCondition() ...
[10:52:04.980] |  :    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.980] |  :   - Number of RDS files: 0
[10:52:04.981] |  :  readImmediateCondition() ... DONE
[10:52:04.981] |  :  MulticoreFuture #1
[10:52:04.981] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:04.981] |  :  .  nx: 2
[10:52:04.981] |  :  .  relay: TRUE
[10:52:04.981] |  :  .  stdout: TRUE
[10:52:04.981] |  :  .  signal: TRUE
[10:52:04.981] |  :  .  resignal: FALSE
[10:52:04.981] |  :  .  force: TRUE
[10:52:04.982] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:04.982] |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:04.982] |  :  .  until=1
[10:52:04.982] |  :  .  relaying element #1
[10:52:04.982] |  :  .  result() for MulticoreFuture ...
[10:52:04.983] |  :  .  |  readImmediateCondition() ...
[10:52:04.983] |  :  .  |    - path: ‘/tmp/RtmpKvwf7L/.future/immediateConditions’
[10:52:04.983] |  :  .  |   - Number of RDS files: 0
[10:52:04.983] |  :  .  |  readImmediateCondition() ... DONE
[10:52:04.983] |  :  .  |  result() for MulticoreFuture ...
[10:52:04.983] |  :  .  |  result() for MulticoreFuture ... done
[10:52:04.984] |  :  .  result() for MulticoreFuture ... done
[10:52:04.984] |  :  .  result() for MulticoreFuture ...
[10:52:04.984] |  :  .  result() for MulticoreFuture ... done
[10:52:04.984] |  :  .  result() for MulticoreFuture ...
[10:52:04.984] |  :  .  result() for MulticoreFuture ... done
[10:52:04.984] |  :  .  result() for MulticoreFuture ...
[10:52:04.984] |  :  .  result() for MulticoreFuture ... done
[10:52:04.985] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:04.985] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:04.985] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:04.985] |  :  value(<MulticoreFuture>, ...) ...
[10:52:04.985] |  :  .  result() for MulticoreFuture ...
[10:52:04.985] |  :  .  result() for MulticoreFuture ... done
[10:52:04.985] |  :  .  result() for MulticoreFuture ...
[10:52:04.985] |  :  .  result() for MulticoreFuture ... done
[10:52:04.986] |  :  .  value: <list>
[10:52:04.986] |  :  value(<MulticoreFuture>, ...) ... done
[10:52:04.986] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:52:04.986] |  :  .  nx: 2
[10:52:04.986] |  :  .  relay: TRUE
[10:52:04.986] |  :  .  stdout: TRUE
[10:52:04.986] |  :  .  signal: TRUE
[10:52:04.986] |  :  .  resignal: FALSE
[10:52:04.986] |  :  .  force: TRUE
[10:52:04.987] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:04.987] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:04.987] |  :  .  until=2
[10:52:04.987] |  :  .  relaying element #2
[10:52:04.987] |  :  .  result() for MulticoreFuture ...
[10:52:04.987] |  :  .  result() for MulticoreFuture ... done
[10:52:04.987] |  :  .  result() for MulticoreFuture ...
[10:52:04.987] |  :  .  result() for MulticoreFuture ... done
[10:52:04.987] |  :  .  result() for MulticoreFuture ...
[10:52:04.988] |  :  .  result() for MulticoreFuture ... done
[10:52:04.988] |  :  .  result() for MulticoreFuture ...
[10:52:04.988] |  :  .  result() for MulticoreFuture ... done
[10:52:04.988] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:04.988] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:04.988] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:52:04.988] |  :  length: 0 (resolved future 1)
[10:52:04.988] |  checking value #1 ... done
[10:52:04.988] |  Relaying remaining futures ...
[10:52:04.988] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:04.989] |  :  .  nx: 2
[10:52:04.989] |  :  .  relay: TRUE
[10:52:04.989] |  :  .  stdout: TRUE
[10:52:04.989] |  :  .  signal: TRUE
[10:52:04.989] |  :  .  resignal: FALSE
[10:52:04.989] |  :  .  force: TRUE
[10:52:04.989] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:04.989] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:04.989] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:04.989] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:04.990] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:04.990] |  Relaying remaining futures ... done
[10:52:04.990] value() on list ... done
[10:52:04.990]  - Number of value chunks collected: 2
[10:52:04.990] Resolving 2 futures (chunks) ... DONE
[10:52:04.990] Reducing values from 2 chunks ...
[10:52:04.990]  - Number of values collected after concatenation: 2
[10:52:04.990]  - Number of values expected: 2
[10:52:04.990] Reducing values from 2 chunks ... DONE
[10:52:04.991] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = NA) ... DONE
* plan('multicore') ... DONE
* plan('multisession') ...
[10:52:04.991] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:04.992] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:52:04.992] |  :  all.equal() for FutureStrategyList ...
[10:52:04.992] |  :  .  New stack:
[10:52:04.992] |  :  .  List of 1
[10:52:04.992] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:04.992] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:04.992] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:04.992] |  :  .    ..- attr(*, "init")= logi TRUE
[10:52:04.992] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:04.992] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:04.992] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:04.992] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:52:04.992] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:04.992] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:04.997] |  :  .  Old stack:
[10:52:04.997] |  :  .  List of 1
[10:52:04.997] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:04.997] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:04.997] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:04.997] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.997] |  :  .      ...)  
[10:52:04.997] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.997] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.997] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:04.997] |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:04.997] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:04.997] |  :  .      ...)  
[10:52:04.997] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:04.997] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:05.002] |  :  .  Not identical
[10:52:05.002] |  :  .  all.equal() for future ...
[10:52:05.004] |  :  .  |  List of 2
[10:52:05.004] |  :  .  |   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:05.004] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:05.004] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:05.004] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:52:05.004] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:05.004] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:05.004] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:05.004] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:52:05.004] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:05.004] |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:05.004] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:05.004] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:05.004] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:05.004] |  :  .  |      ...)  
[10:52:05.004] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:05.004] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:05.004] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:05.004] |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x562581d91518> 
[10:52:05.004] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:05.004] |  :  .  |      ...)  
[10:52:05.004] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:05.011] |  :  .  |  Formals differ
[10:52:05.011] |  :  .  all.equal() for future ... done
[10:52:05.011] |  :  .  Future strategies differ at level 1
[10:52:05.012] |  :  all.equal() for FutureStrategyList ... done
[10:52:05.012] |  :  plan(): Setting new future strategy stack:
[10:52:05.012] |  :  List of future strategies:
[10:52:05.012] |  :  1. multisession:
[10:52:05.012] |  :     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:05.012] |  :     - tweaked: FALSE
[10:52:05.012] |  :     - call: plan(strategy)
[10:52:05.012] |  :  List of 1
[10:52:05.012] |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:05.012] |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:05.012] |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:05.012] |  :    ..- attr(*, "init")= logi TRUE
[10:52:05.012] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:05.012] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:05.012] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:05.012] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:52:05.012] |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:05.012] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:05.015] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:52:05.015] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:05.015] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:05.016] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:05.017] |  :  .  Legacy shutdown of cluster workers ...
[10:52:05.017] |  :  .  |  Stopping existing cluster ...
[10:52:05.017] |  :  .  |  :  No pre-existing cluster. Skipping
[10:52:05.017] |  :  .  |  Stopping existing cluster ... done
[10:52:05.017] |  :  .  Legacy shutdown of cluster workers ... done
[10:52:05.017] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:52:05.017] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:52:05.017] |  :  .  function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:05.017] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:05.017] |  :  .   - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:05.017] |  :  .   - attr(*, "init")= logi TRUE
[10:52:05.017] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:05.017] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:05.017] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:05.017] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:52:05.017] |  :  .   - attr(*, "call")= language plan(strategy)
[10:52:05.020] |  :  .  init: TRUE
[10:52:05.020] |  :  .  makeFutureBackend(<multisession>) ...
[10:52:05.020] |  :  .  |  Backend function: <‘NULL’>
[10:52:05.033] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[10:52:05.033] |  :  .  |  :  workers: 2
[10:52:05.033] |  :  .  |  :  getCluster() ...
[10:52:05.033] |  :  .  |  :  getCluster() ... done
[10:52:05.033] |  :  .  |  :  Stopping existing cluster ...
[10:52:05.033] |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:52:05.033] |  :  .  |  :  Stopping existing cluster ... done
[10:52:05.033] |  :  .  |  :  Starting new cluster ...
[10:52:05.033] |  :  .  |  :  .  makeCluster(workers, ...) ...
[10:52:05.033] |  :  .  |  :  .  |  Arguments:
[10:52:05.034] |  :  .  |  :  .  |  List of 2
[10:52:05.034] |  :  .  |  :  .  |   $             : int 2
[10:52:05.034] |  :  .  |  :  .  |   $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:52:05.532] |  :  .  |  :  .  |  Generated cluster UUID
[10:52:05.532] |  :  .  |  :  .  |  Cluster UUID: ‘205d289c31d5cc4f272aa5ad0e957f88’
[10:52:05.532] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:05.534] |  :  .  |  :  .  makeCluster(workers, ...) ... done
[10:52:05.534] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:05.536] |  :  .  |  :  Starting new cluster ... done
[10:52:05.536] |  :  .  |  :  Number of workers: 2
[10:52:05.536] |  :  .  |  :  Workers UUID: ‘205d289c31d5cc4f272aa5ad0e957f88’
[10:52:05.536] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[10:52:05.536] |  :  .  |  Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:05.536] |  :  .  makeFutureBackend(<multisession>) ... done
[10:52:05.537] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:52:05.537] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:05.537] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:05.537] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:05.537] |  :  plan(): nbrOfWorkers() = 2
[10:52:05.537] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:52:05.537] plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
* future_lapply(x, ..., future.stdout = FALSE) ...
[10:52:05.538] future_lapply() ...
[10:52:05.538] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:05.539] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:05.539] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:05.539] Number of chunks: 2
[10:52:05.539] getGlobalsAndPackagesXApply() ...
[10:52:05.539]  - future.globals: TRUE
[10:52:05.539] getGlobalsAndPackages() ...
[10:52:05.540] |  Searching for globals ...
[10:52:05.541] |  :  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:52:05.541] |  Searching for globals ... DONE
[10:52:05.541] |  Resolving globals: FALSE
[10:52:05.541] |  Search for packages associated with the globals ...
[10:52:05.542] |  :  Packages associated with globals: [1] ‘base’
[10:52:05.542] |  :  Packages: [1] ‘base’
[10:52:05.542] |  Search for packages associated with the globals ... DONE
[10:52:05.542] |  The total size of the 1 globals is 841 bytes (841 bytes)
[10:52:05.543] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:52:05.543] |  Packages after dropping 'base': [0] 
[10:52:05.543] |  globals: [1] ‘FUN’
[10:52:05.543] |  packages: [0] 
[10:52:05.543] getGlobalsAndPackages() ... done
[10:52:05.543]  - globals found/used: [n=1] ‘FUN’
[10:52:05.543]  - needed namespaces: [n=0] 
[10:52:05.543] Finding globals ... DONE
[10:52:05.543]  - use_args: TRUE
[10:52:05.543]  - Getting '...' globals ...
[10:52:05.544] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:52:05.544] |  recursive: 0
[10:52:05.544] |  length: 1
[10:52:05.544] |  elements: ‘...’
[10:52:05.544] |  'obj' is DotDotDotList
[10:52:05.544] |  resolve(obj, ...) ...
[10:52:05.544] |  resolve(obj, ...) ... done
[10:52:05.545] |  length: 0 (resolved future 1)
[10:52:05.545] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:52:05.545]    - '...' content: [n=0] 
[10:52:05.545] List of 1
[10:52:05.545]  $ ...: list()
[10:52:05.545]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:05.545]  - attr(*, "where")=List of 1
[10:52:05.545]   ..$ ...:<environment: 0x562582044728> 
[10:52:05.545]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:05.545]  - attr(*, "resolved")= logi TRUE
[10:52:05.545]  - attr(*, "total_size")= num NA
[10:52:05.547]  - Getting '...' globals ... DONE
[10:52:05.548] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:52:05.548] List of 2
[10:52:05.548]  $ ...future.FUN:function (x)  
[10:52:05.548]  $ ...          : list()
[10:52:05.548]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:05.548]  - attr(*, "where")=List of 2
[10:52:05.548]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:05.548]   ..$ ...          :<environment: 0x562582044728> 
[10:52:05.548]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:05.548]  - attr(*, "resolved")= logi FALSE
[10:52:05.548]  - attr(*, "total_size")= num 5632
[10:52:05.551] Packages to be attached in all futures: [n=0] 
[10:52:05.551] getGlobalsAndPackagesXApply() ... DONE
[10:52:05.551] Number of futures (= number of chunks): 2
[10:52:05.551] Launching 2 futures (chunks) ...
[10:52:05.551] Chunk #1 of 2 ...
[10:52:05.551]  - Finding globals in 'X' for chunk #1 ...
[10:52:05.552] getGlobalsAndPackages() ...
[10:52:05.552] |  Searching for globals ...
[10:52:05.552] |  :  globals found: [0] 
[10:52:05.552] |  Searching for globals ... DONE
[10:52:05.552] |  globals: [0] <none>
[10:52:05.552] |  packages: [0] <none>
[10:52:05.553] getGlobalsAndPackages() ... done
[10:52:05.553]    + additional globals found: [n=0] 
[10:52:05.553]    + additional namespaces needed: [n=0] 
[10:52:05.553]  - Finding globals in 'X' for chunk #1 ... DONE
[10:52:05.553]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:05.553]  - seeds: <none>
[10:52:05.553]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:05.553] getGlobalsAndPackages() ...
[10:52:05.553] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:05.554] |  Resolving globals: FALSE
[10:52:05.554] |  Tweak future expression to call with '...' arguments ...
[10:52:05.554] |  :  {
[10:52:05.554] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:05.554] |  :      "# expression in do.call(), because function called uses '...'  "
[10:52:05.554] |  :      "# as a global variable                                         "
[10:52:05.554] |  :      do.call(function(...) {
[10:52:05.554] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:05.554] |  :          "# without having an '...' argument. This means '...' is treated"
[10:52:05.554] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:52:05.554] |  :          "# anonymous function.                                          "
[10:52:05.554] |  :          "#                                                              "
[10:52:05.554] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:52:05.554] |  :          "# function environment of FUN() to the calling environment.    "
[10:52:05.554] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:05.554] |  :          "# global environment, which is where globals are written.      "
[10:52:05.554] |  :          penv <- env <- environment(...future.FUN)
[10:52:05.554] |  :          repeat {
[10:52:05.554] |  :              if (identical(env, globalenv()) || identical(env, 
[10:52:05.554] |  :                  emptyenv())) 
[10:52:05.554] |  :                  break
[10:52:05.554] |  :              penv <- env
[10:52:05.554] |  :              env <- parent.env(env)
[10:52:05.554] |  :          }
[10:52:05.554] |  :          if (identical(penv, globalenv())) {
[10:52:05.554] |  :              environment(...future.FUN) <- environment()
[10:52:05.554] |  :          }
[10:52:05.554] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:05.554] |  :              !isNamespace(penv)) {
[10:52:05.554] |  :              parent.env(penv) <- environment()
[10:52:05.554] |  :          }
[10:52:05.554] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:05.554] |  :          {
[10:52:05.554] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:05.554] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:05.554] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:05.554] |  :                  on.exit(options(oopts), add = TRUE)
[10:52:05.554] |  :              }
[10:52:05.554] |  :              {
[10:52:05.554] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:05.554] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:05.554] |  :                    ...future.FUN(...future.X_jj, ...)
[10:52:05.554] |  :                  })
[10:52:05.554] |  :              }
[10:52:05.554] |  :          }
[10:52:05.554] |  :      }, args = future.call.arguments)
[10:52:05.554] |  :  }
[10:52:05.554] |  Tweak future expression to call with '...' arguments ... DONE
[10:52:05.555] |  Search for packages associated with the globals ...
[10:52:05.555] |  :  Packages associated with globals: [0] 
[10:52:05.555] |  :  Packages: [0] 
[10:52:05.555] |  Search for packages associated with the globals ... DONE
[10:52:05.555] |  Packages after dropping 'base': [0] 
[10:52:05.556] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:05.556] |  packages: [0] 
[10:52:05.556] getGlobalsAndPackages() ... done
[10:52:05.556] run() for Future (‘Future’) ...
[10:52:05.556] |  state: ‘created’
[10:52:05.556] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:05.557] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:05.557] |  Using MultisessionFutureBackend ...
[10:52:05.557] |  :  Launching futures ...
[10:52:05.557] |  :  .  launchFuture() for ClusterFutureBackend ...
[10:52:05.557] |  :  .  |  Workers: [n=2]
[10:52:05.558] |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:05.559] |  :  .  |  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:05.560] |  :  .  |  requestWorker() ...
[10:52:05.560] |  :  .  |  :  requestNode() ...
[10:52:05.560] |  :  .  |  :  .  Number of workers: 2
[10:52:05.560] |  :  .  |  :  .  Polling for a free worker ...
[10:52:05.560] |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:05.561] |  :  .  |  :  .  |  :  Created empty registry ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:05.561] |  :  .  |  :  .  |  :  Listing all futures
[10:52:05.561] |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:52:05.561] |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:05.561] |  :  .  |  :  .  |  Total time: 0
[10:52:05.561] |  :  .  |  :  .  Polling for a free worker ... done
[10:52:05.561] |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:05.561] |  :  .  |  :  .  |  Listing all futures
[10:52:05.562] |  :  .  |  :  .  |  Number of registered futures: 0
[10:52:05.562] |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:05.562] |  :  .  |  :  .  Index of first available worker: 1
[10:52:05.562] |  :  .  |  :  .  Validate that the worker is functional ...
[10:52:05.625] |  :  .  |  :  .  |  Worker is functional
[10:52:05.625] |  :  .  |  :  .  requestNode() ... done
[10:52:05.625] |  :  .  |  :  .  cluster node index: 1
[10:52:05.625] |  :  .  |  :  requestWorker() ... done
[10:52:05.626] |  :  .  |  :  eraseGlobalEnvironment() ...
[10:52:05.627] |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:52:05.627] |  :  .  |  :  launchFuture() ...
[10:52:05.628] |  :  .  |  :  .  cluster node index: 1
[10:52:05.628] |  :  .  |  :  .  getFutureData() ...
[10:52:05.628] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:05.628] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:52:05.628] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:05.628] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:05.628] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:05.629] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:05.629] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:05.629] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:05.629] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:05.629] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:05.629] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:05.629] |  :  .  |  :  .  getFutureData() ... done
[10:52:05.630] |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:05.630] |  :  .  |  :  .  |  Appended future to position #1
[10:52:05.630] |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:05.630] |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:05.630] |  :  .  |  :  launchFuture() ... done
[10:52:05.631] |  :  .  |  :  MultisessionFuture started
[10:52:05.631] |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:52:05.631] |  :  .  Launching futures ... done
[10:52:05.631] |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:05.631] |  :  Using MultisessionFutureBackend ... done
[10:52:05.631] |  run() for Future (‘MultisessionFuture’) ... done
[10:52:05.631] Created future:
[10:52:05.633] |  isFutureResolved() ...
[10:52:05.633] |  :  assertValidConnection() ...
[10:52:05.633] |  :  .  cluster node index: 1
[10:52:05.634] |  :  assertValidConnection() ... done
[10:52:05.644] |  isFutureResolved() ... done
[10:52:05.631] MultisessionFuture:
[10:52:05.631] Label: ‘future_lapply-1’
[10:52:05.631] Expression:
[10:52:05.631] {
[10:52:05.631]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:05.631]     "# expression in do.call(), because function called uses '...'  "
[10:52:05.631]     "# as a global variable                                         "
[10:52:05.631]     do.call(function(...) {
[10:52:05.631]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:05.631]         "# without having an '...' argument. This means '...' is treated"
[10:52:05.631]         "# as a global variable. This may happen when FUN() is an       "
[10:52:05.631]         "# anonymous function.                                          "
[10:52:05.631]         "#                                                              "
[10:52:05.631]         "# If an anonymous function, we will make sure to restore the   "
[10:52:05.631]         "# function environment of FUN() to the calling environment.    "
[10:52:05.631]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:05.631]         "# global environment, which is where globals are written.      "
[10:52:05.631]         penv <- env <- environment(...future.FUN)
[10:52:05.631]         repeat {
[10:52:05.631]             if (identical(env, globalenv()) || identical(env, 
[10:52:05.631]                 emptyenv())) 
[10:52:05.631]                 break
[10:52:05.631]             penv <- env
[10:52:05.631]             env <- parent.env(env)
[10:52:05.631]         }
[10:52:05.631]         if (identical(penv, globalenv())) {
[10:52:05.631]             environment(...future.FUN) <- environment()
[10:52:05.631]         }
[10:52:05.631]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:05.631]             !isNamespace(penv)) {
[10:52:05.631]             parent.env(penv) <- environment()
[10:52:05.631]         }
[10:52:05.631]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:05.631]         {
[10:52:05.631]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:05.631]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:05.631]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:05.631]                 on.exit(options(oopts), add = TRUE)
[10:52:05.631]             }
[10:52:05.631]             {
[10:52:05.631]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:05.631]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:05.631]                   ...future.FUN(...future.X_jj, ...)
[10:52:05.631]                 })
[10:52:05.631]             }
[10:52:05.631]         }
[10:52:05.631]     }, args = future.call.arguments)
[10:52:05.631] }
[10:52:05.631] Lazy evaluation: FALSE
[10:52:05.631] Asynchronous evaluation: TRUE
[10:52:05.631] Local evaluation: TRUE
[10:52:05.631] Environment: R_GlobalEnv
[10:52:05.631] Capture standard output: FALSE
[10:52:05.631] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:05.631] Immediate condition classes: ‘immediateCondition’
[10:52:05.631] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:05.631] Packages: <none>
[10:52:05.631] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:05.631] Resolved: FALSE
[10:52:05.631] Value: <not collected>
[10:52:05.631] Conditions captured: <none>
[10:52:05.631] Early signaling: FALSE
[10:52:05.631] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:05.631] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:05.645] Chunk #1 of 2 ... DONE
[10:52:05.645] Chunk #2 of 2 ...
[10:52:05.645]  - Finding globals in 'X' for chunk #2 ...
[10:52:05.645] |  getGlobalsAndPackages() ...
[10:52:05.645] |  :  Searching for globals ...
[10:52:05.646] |  :  .  globals found: [0] 
[10:52:05.646] |  :  Searching for globals ... DONE
[10:52:05.646] |  :  globals: [0] <none>
[10:52:05.646] |  :  packages: [0] <none>
[10:52:05.646] |  getGlobalsAndPackages() ... done
[10:52:05.646]    + additional globals found: [n=0] 
[10:52:05.646]    + additional namespaces needed: [n=0] 
[10:52:05.647]  - Finding globals in 'X' for chunk #2 ... DONE
[10:52:05.647]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:05.647]  - seeds: <none>
[10:52:05.647]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:05.647] |  getGlobalsAndPackages() ...
[10:52:05.647] |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:05.647] |  :  Resolving globals: FALSE
[10:52:05.647] |  :  Tweak future expression to call with '...' arguments ...
[10:52:05.648] |  :  .  {
[10:52:05.648] |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:05.648] |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:52:05.648] |  :  .      "# as a global variable                                         "
[10:52:05.648] |  :  .      do.call(function(...) {
[10:52:05.648] |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:05.648] |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:52:05.648] |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:52:05.648] |  :  .          "# anonymous function.                                          "
[10:52:05.648] |  :  .          "#                                                              "
[10:52:05.648] |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:52:05.648] |  :  .          "# function environment of FUN() to the calling environment.    "
[10:52:05.648] |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:05.648] |  :  .          "# global environment, which is where globals are written.      "
[10:52:05.648] |  :  .          penv <- env <- environment(...future.FUN)
[10:52:05.648] |  :  .          repeat {
[10:52:05.648] |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:52:05.648] |  :  .                  emptyenv())) 
[10:52:05.648] |  :  .                  break
[10:52:05.648] |  :  .              penv <- env
[10:52:05.648] |  :  .              env <- parent.env(env)
[10:52:05.648] |  :  .          }
[10:52:05.648] |  :  .          if (identical(penv, globalenv())) {
[10:52:05.648] |  :  .              environment(...future.FUN) <- environment()
[10:52:05.648] |  :  .          }
[10:52:05.648] |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:05.648] |  :  .              !isNamespace(penv)) {
[10:52:05.648] |  :  .              parent.env(penv) <- environment()
[10:52:05.648] |  :  .          }
[10:52:05.648] |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:05.648] |  :  .          {
[10:52:05.648] |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:05.648] |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:05.648] |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:05.648] |  :  .                  on.exit(options(oopts), add = TRUE)
[10:52:05.648] |  :  .              }
[10:52:05.648] |  :  .              {
[10:52:05.648] |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:05.648] |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:05.648] |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:52:05.648] |  :  .                  })
[10:52:05.648] |  :  .              }
[10:52:05.648] |  :  .          }
[10:52:05.648] |  :  .      }, args = future.call.arguments)
[10:52:05.648] |  :  .  }
[10:52:05.648] |  :  Tweak future expression to call with '...' arguments ... DONE
[10:52:05.648] |  :  Search for packages associated with the globals ...
[10:52:05.649] |  :  .  Packages associated with globals: [0] 
[10:52:05.649] |  :  .  Packages: [0] 
[10:52:05.649] |  :  Search for packages associated with the globals ... DONE
[10:52:05.649] |  :  Packages after dropping 'base': [0] 
[10:52:05.649] |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:05.649] |  :  packages: [0] 
[10:52:05.650] |  getGlobalsAndPackages() ... done
[10:52:05.650] |  run() for Future (‘Future’) ...
[10:52:05.650] |  :  state: ‘created’
[10:52:05.650] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:05.650] |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:05.650] |  :  Using MultisessionFutureBackend ...
[10:52:05.650] |  :  .  Launching futures ...
[10:52:05.651] |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:52:05.651] |  :  .  |  :  Workers: [n=2]
[10:52:05.651] |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:05.653] |  :  .  |  :  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:05.653] |  :  .  |  :  requestWorker() ...
[10:52:05.653] |  :  .  |  :  .  requestNode() ...
[10:52:05.653] |  :  .  |  :  .  |  Number of workers: 2
[10:52:05.653] |  :  .  |  :  .  |  Polling for a free worker ...
[10:52:05.654] |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:05.654] |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:05.654] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:05.654] |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:05.654] |  :  .  |  :  .  |  :  Total time: 0
[10:52:05.654] |  :  .  |  :  .  |  Polling for a free worker ... done
[10:52:05.654] |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:05.654] |  :  .  |  :  .  |  :  Listing all futures
[10:52:05.655] |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:05.655] |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:05.655] |  :  .  |  :  .  |  Index of first available worker: 2
[10:52:05.655] |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:52:05.729] |  :  .  |  :  .  |  :  Worker is functional
[10:52:05.730] |  :  .  |  :  .  |  requestNode() ... done
[10:52:05.730] |  :  .  |  :  .  |  cluster node index: 2
[10:52:05.730] |  :  .  |  :  .  requestWorker() ... done
[10:52:05.731] |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:52:05.731] |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:52:05.732] |  :  .  |  :  .  launchFuture() ...
[10:52:05.732] |  :  .  |  :  .  |  cluster node index: 2
[10:52:05.732] |  :  .  |  :  .  |  getFutureData() ...
[10:52:05.732] |  :  .  |  :  .  |  :  getFutureCore() ...
[10:52:05.733] |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:05.733] |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:52:05.733] |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:52:05.733] |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:52:05.733] |  :  .  |  :  .  |  :  getFutureContext() ...
[10:52:05.734] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:05.734] |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:05.734] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:05.734] |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:05.735] |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:52:05.735] |  :  .  |  :  .  |  getFutureData() ... done
[10:52:05.735] |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:05.736] |  :  .  |  :  .  |  :  Appended future to position #2
[10:52:05.736] |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:52:05.736] |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:05.736] |  :  .  |  :  .  launchFuture() ... done
[10:52:05.736] |  :  .  |  :  .  MultisessionFuture started
[10:52:05.736] |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:52:05.737] |  :  .  |  Launching futures ... done
[10:52:05.737] |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:05.737] |  :  .  Using MultisessionFutureBackend ... done
[10:52:05.737] |  :  run() for Future (‘MultisessionFuture’) ... done
[10:52:05.737] Created future:
[10:52:05.738] |  :  isFutureResolved() ...
[10:52:05.739] |  :  .  assertValidConnection() ...
[10:52:05.739] |  :  .  |  cluster node index: 2
[10:52:05.739] |  :  .  assertValidConnection() ... done
[10:52:05.750] |  :  isFutureResolved() ... done
[10:52:05.737] MultisessionFuture:
[10:52:05.737] Label: ‘future_lapply-2’
[10:52:05.737] Expression:
[10:52:05.737] {
[10:52:05.737]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:05.737]     "# expression in do.call(), because function called uses '...'  "
[10:52:05.737]     "# as a global variable                                         "
[10:52:05.737]     do.call(function(...) {
[10:52:05.737]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:05.737]         "# without having an '...' argument. This means '...' is treated"
[10:52:05.737]         "# as a global variable. This may happen when FUN() is an       "
[10:52:05.737]         "# anonymous function.                                          "
[10:52:05.737]         "#                                                              "
[10:52:05.737]         "# If an anonymous function, we will make sure to restore the   "
[10:52:05.737]         "# function environment of FUN() to the calling environment.    "
[10:52:05.737]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:05.737]         "# global environment, which is where globals are written.      "
[10:52:05.737]         penv <- env <- environment(...future.FUN)
[10:52:05.737]         repeat {
[10:52:05.737]             if (identical(env, globalenv()) || identical(env, 
[10:52:05.737]                 emptyenv())) 
[10:52:05.737]                 break
[10:52:05.737]             penv <- env
[10:52:05.737]             env <- parent.env(env)
[10:52:05.737]         }
[10:52:05.737]         if (identical(penv, globalenv())) {
[10:52:05.737]             environment(...future.FUN) <- environment()
[10:52:05.737]         }
[10:52:05.737]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:05.737]             !isNamespace(penv)) {
[10:52:05.737]             parent.env(penv) <- environment()
[10:52:05.737]         }
[10:52:05.737]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:05.737]         {
[10:52:05.737]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:05.737]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:05.737]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:05.737]                 on.exit(options(oopts), add = TRUE)
[10:52:05.737]             }
[10:52:05.737]             {
[10:52:05.737]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:05.737]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:05.737]                   ...future.FUN(...future.X_jj, ...)
[10:52:05.737]                 })
[10:52:05.737]             }
[10:52:05.737]         }
[10:52:05.737]     }, args = future.call.arguments)
[10:52:05.737] }
[10:52:05.737] Lazy evaluation: FALSE
[10:52:05.737] Asynchronous evaluation: TRUE
[10:52:05.737] Local evaluation: TRUE
[10:52:05.737] Environment: R_GlobalEnv
[10:52:05.737] Capture standard output: FALSE
[10:52:05.737] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:05.737] Immediate condition classes: ‘immediateCondition’
[10:52:05.737] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:05.737] Packages: <none>
[10:52:05.737] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:05.737] Resolved: FALSE
[10:52:05.737] Value: <not collected>
[10:52:05.737] Conditions captured: <none>
[10:52:05.737] Early signaling: FALSE
[10:52:05.737] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:05.737] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:05.750] Chunk #2 of 2 ... DONE
[10:52:05.750] Launching 2 futures (chunks) ... DONE
[10:52:05.750] Resolving 2 futures (chunks) ...
[10:52:05.751] |  :  value() on list ...
[10:52:05.751] |  :  .  recursive: 0
[10:52:05.751] |  :  .  length: 2
[10:52:05.751] |  :  .  
[10:52:05.751] |  :  .  Number of remaining objects: 2
[10:52:05.751] |  :  .  checking value #1 ...
[10:52:05.751] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.752] |  :  .  |  isFutureResolved() ...
[10:52:05.752] |  :  .  |  :  assertValidConnection() ...
[10:52:05.752] |  :  .  |  :  .  cluster node index: 1
[10:52:05.752] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.763] |  :  .  |  isFutureResolved() ... done
[10:52:05.763] |  :  .  checking value #1 ... done
[10:52:05.763] |  :  .  checking value #2 ...
[10:52:05.763] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.763] |  :  .  |  isFutureResolved() ...
[10:52:05.764] |  :  .  |  :  assertValidConnection() ...
[10:52:05.764] |  :  .  |  :  .  cluster node index: 2
[10:52:05.764] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.774] |  :  .  |  isFutureResolved() ... done
[10:52:05.774] |  :  .  checking value #2 ... done
[10:52:05.785] |  :  .  Number of remaining objects: 2
[10:52:05.785] |  :  .  checking value #1 ...
[10:52:05.785] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.785] |  :  .  |  isFutureResolved() ...
[10:52:05.786] |  :  .  |  :  assertValidConnection() ...
[10:52:05.786] |  :  .  |  :  .  cluster node index: 1
[10:52:05.786] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.796] |  :  .  |  isFutureResolved() ... done
[10:52:05.797] |  :  .  checking value #1 ... done
[10:52:05.797] |  :  .  checking value #2 ...
[10:52:05.797] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.797] |  :  .  |  isFutureResolved() ...
[10:52:05.797] |  :  .  |  :  assertValidConnection() ...
[10:52:05.797] |  :  .  |  :  .  cluster node index: 2
[10:52:05.798] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.808] |  :  .  |  isFutureResolved() ... done
[10:52:05.808] |  :  .  checking value #2 ... done
[10:52:05.818] |  :  .  Number of remaining objects: 2
[10:52:05.819] |  :  .  checking value #1 ...
[10:52:05.819] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.819] |  :  .  |  isFutureResolved() ...
[10:52:05.820] |  :  .  |  :  assertValidConnection() ...
[10:52:05.820] |  :  .  |  :  .  cluster node index: 1
[10:52:05.820] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.830] |  :  .  |  isFutureResolved() ... done
[10:52:05.830] |  :  .  checking value #1 ... done
[10:52:05.831] |  :  .  checking value #2 ...
[10:52:05.831] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.831] |  :  .  |  isFutureResolved() ...
[10:52:05.831] |  :  .  |  :  assertValidConnection() ...
[10:52:05.831] |  :  .  |  :  .  cluster node index: 2
[10:52:05.832] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.832] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:52:05.832] |  :  .  |  :  .  cluster node index: 2
[10:52:05.833] |  :  .  |  :  .  [1] TRUE
[10:52:05.833] |  :  .  |  :  .  received data:
[10:52:05.833] |  :  .  |  :  .  List of 5
[10:52:05.833] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:52:05.833] |  :  .  |  :  .   $ value  :List of 13
[10:52:05.833] |  :  .  |  :  .    ..$ value            :List of 1
[10:52:05.833] |  :  .  |  :  .    .. ..$ : int 0
[10:52:05.833] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:52:05.833] |  :  .  |  :  .    ..$ stdout           : NULL
[10:52:05.833] |  :  .  |  :  .    ..$ conditions       : list()
[10:52:05.833] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:52:05.833] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:52:05.833] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:52:05.833] |  :  .  |  :  .    .. ..$ added   : NULL
[10:52:05.833] |  :  .  |  :  .    .. ..$ removed : NULL
[10:52:05.833] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:52:05.833] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:52:05.833] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:05.833] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:05.833] |  :  .  |  :  .    ..$ session_uuid     : chr "be79b08faeced682a2aab9c61d6391c7"
[10:52:05.833] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:52:05.833] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:05.833] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:05.833] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:05.833] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:05.833] |  :  .  |  :  .    .. .. ..$ pid   : int 66994
[10:52:05.833] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:05.833] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:52:05.833] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:52:05.833] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:05.833] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:52:05.833] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:52:05.833] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:52:05.833] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:52:05.833] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:52:05.833] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:52:05.833] |  :  .  |  :  .   $ success: logi TRUE
[10:52:05.833] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.048 0.002 0.05 0 0
[10:52:05.833] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:05.833] |  :  .  |  :  .   $ tag    : NULL
[10:52:05.848] |  :  .  |  :  .  Received FutureResult
[10:52:05.848] |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:05.848] |  :  .  |  :  .  |  Removed future from position #2
[10:52:05.849] |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:05.849] |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:05.849] |  :  .  |  :  .  Erased future from future backend
[10:52:05.849] |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:05.849] |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:05.849] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:05.849] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:05.849] |  :  .  |  isFutureResolved() ... done
[10:52:05.849] |  :  .  |  MultisessionFuture #2
[10:52:05.849] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:05.850] |  :  .  |  :  nx: 2
[10:52:05.850] |  :  .  |  :  relay: TRUE
[10:52:05.850] |  :  .  |  :  stdout: TRUE
[10:52:05.850] |  :  .  |  :  signal: TRUE
[10:52:05.850] |  :  .  |  :  resignal: FALSE
[10:52:05.850] |  :  .  |  :  force: TRUE
[10:52:05.850] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:52:05.850] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:52:05.850] |  :  .  |  :  until=1
[10:52:05.850] |  :  .  |  :  relaying element #1
[10:52:05.850] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:52:05.850] |  :  .  |  :  queued futures: [n=2] FALSE, TRUE
[10:52:05.851] |  :  .  |  signalConditionsASAP(NULL, pos=2) ... done
[10:52:05.851] |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:52:05.851] |  :  .  |  :  result() for ClusterFuture ...
[10:52:05.851] |  :  .  |  :  .  result already collected: FutureResult
[10:52:05.851] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:05.851] |  :  .  |  :  result() for ClusterFuture ...
[10:52:05.851] |  :  .  |  :  .  result already collected: FutureResult
[10:52:05.851] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:05.851] |  :  .  |  :  value: <list>
[10:52:05.851] |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:52:05.851] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:05.852] |  :  .  |  :  nx: 2
[10:52:05.852] |  :  .  |  :  relay: TRUE
[10:52:05.852] |  :  .  |  :  stdout: TRUE
[10:52:05.852] |  :  .  |  :  signal: TRUE
[10:52:05.852] |  :  .  |  :  resignal: FALSE
[10:52:05.852] |  :  .  |  :  force: TRUE
[10:52:05.852] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:52:05.852] |  :  .  |  :  queued futures: [n=2] FALSE, TRUE
[10:52:05.852] |  :  .  |  :  until=1
[10:52:05.852] |  :  .  |  :  relaying element #1
[10:52:05.852] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:52:05.852] |  :  .  |  :  queued futures: [n=2] FALSE, TRUE
[10:52:05.853] |  :  .  |  signalConditionsASAP(NULL, pos=2) ... done
[10:52:05.853] |  :  .  |  length: 1 (resolved future 2)
[10:52:05.853] |  :  .  checking value #2 ... done
[10:52:05.863] |  :  .  Number of remaining objects: 1
[10:52:05.863] |  :  .  checking value #1 ...
[10:52:05.863] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.863] |  :  .  |  isFutureResolved() ...
[10:52:05.864] |  :  .  |  :  assertValidConnection() ...
[10:52:05.864] |  :  .  |  :  .  cluster node index: 1
[10:52:05.864] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.874] |  :  .  |  isFutureResolved() ... done
[10:52:05.875] |  :  .  checking value #1 ... done
[10:52:05.885] |  :  .  Number of remaining objects: 1
[10:52:05.885] |  :  .  checking value #1 ...
[10:52:05.885] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.885] |  :  .  |  isFutureResolved() ...
[10:52:05.885] |  :  .  |  :  assertValidConnection() ...
[10:52:05.886] |  :  .  |  :  .  cluster node index: 1
[10:52:05.886] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.896] |  :  .  |  isFutureResolved() ... done
[10:52:05.896] |  :  .  checking value #1 ... done
[10:52:05.906] |  :  .  Number of remaining objects: 1
[10:52:05.907] |  :  .  checking value #1 ...
[10:52:05.907] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.907] |  :  .  |  isFutureResolved() ...
[10:52:05.907] |  :  .  |  :  assertValidConnection() ...
[10:52:05.907] |  :  .  |  :  .  cluster node index: 1
[10:52:05.908] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.918] |  :  .  |  isFutureResolved() ... done
[10:52:05.918] |  :  .  checking value #1 ... done
[10:52:05.928] |  :  .  Number of remaining objects: 1
[10:52:05.928] |  :  .  checking value #1 ...
[10:52:05.928] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.929] |  :  .  |  isFutureResolved() ...
[10:52:05.929] |  :  .  |  :  assertValidConnection() ...
[10:52:05.929] |  :  .  |  :  .  cluster node index: 1
[10:52:05.929] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.940] |  :  .  |  isFutureResolved() ... done
[10:52:05.940] |  :  .  checking value #1 ... done
[10:52:05.950] |  :  .  Number of remaining objects: 1
[10:52:05.950] |  :  .  checking value #1 ...
[10:52:05.950] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.950] |  :  .  |  isFutureResolved() ...
[10:52:05.951] |  :  .  |  :  assertValidConnection() ...
[10:52:05.951] |  :  .  |  :  .  cluster node index: 1
[10:52:05.951] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.961] |  :  .  |  isFutureResolved() ... done
[10:52:05.961] |  :  .  checking value #1 ... done
[10:52:05.972] |  :  .  Number of remaining objects: 1
[10:52:05.972] |  :  .  checking value #1 ...
[10:52:05.972] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.972] |  :  .  |  isFutureResolved() ...
[10:52:05.972] |  :  .  |  :  assertValidConnection() ...
[10:52:05.972] |  :  .  |  :  .  cluster node index: 1
[10:52:05.973] |  :  .  |  :  assertValidConnection() ... done
[10:52:05.983] |  :  .  |  isFutureResolved() ... done
[10:52:05.983] |  :  .  checking value #1 ... done
[10:52:05.993] |  :  .  Number of remaining objects: 1
[10:52:05.993] |  :  .  checking value #1 ...
[10:52:05.994] |  :  .  |  'obj' is MultisessionFuture
[10:52:05.994] |  :  .  |  isFutureResolved() ...
[10:52:05.994] |  :  .  |  :  assertValidConnection() ...
[10:52:05.994] |  :  .  |  :  .  cluster node index: 1
[10:52:05.994] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.005] |  :  .  |  isFutureResolved() ... done
[10:52:06.005] |  :  .  checking value #1 ... done
[10:52:06.015] |  :  .  Number of remaining objects: 1
[10:52:06.015] |  :  .  checking value #1 ...
[10:52:06.015] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.015] |  :  .  |  isFutureResolved() ...
[10:52:06.016] |  :  .  |  :  assertValidConnection() ...
[10:52:06.016] |  :  .  |  :  .  cluster node index: 1
[10:52:06.016] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.026] |  :  .  |  isFutureResolved() ... done
[10:52:06.027] |  :  .  checking value #1 ... done
[10:52:06.037] |  :  .  Number of remaining objects: 1
[10:52:06.037] |  :  .  checking value #1 ...
[10:52:06.037] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.037] |  :  .  |  isFutureResolved() ...
[10:52:06.037] |  :  .  |  :  assertValidConnection() ...
[10:52:06.038] |  :  .  |  :  .  cluster node index: 1
[10:52:06.038] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.048] |  :  .  |  isFutureResolved() ... done
[10:52:06.048] |  :  .  checking value #1 ... done
[10:52:06.058] |  :  .  Number of remaining objects: 1
[10:52:06.058] |  :  .  checking value #1 ...
[10:52:06.059] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.059] |  :  .  |  isFutureResolved() ...
[10:52:06.059] |  :  .  |  :  assertValidConnection() ...
[10:52:06.059] |  :  .  |  :  .  cluster node index: 1
[10:52:06.059] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.070] |  :  .  |  isFutureResolved() ... done
[10:52:06.070] |  :  .  checking value #1 ... done
[10:52:06.080] |  :  .  Number of remaining objects: 1
[10:52:06.080] |  :  .  checking value #1 ...
[10:52:06.080] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.080] |  :  .  |  isFutureResolved() ...
[10:52:06.081] |  :  .  |  :  assertValidConnection() ...
[10:52:06.081] |  :  .  |  :  .  cluster node index: 1
[10:52:06.081] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.091] |  :  .  |  isFutureResolved() ... done
[10:52:06.091] |  :  .  checking value #1 ... done
[10:52:06.102] |  :  .  Number of remaining objects: 1
[10:52:06.102] |  :  .  checking value #1 ...
[10:52:06.102] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.102] |  :  .  |  isFutureResolved() ...
[10:52:06.102] |  :  .  |  :  assertValidConnection() ...
[10:52:06.103] |  :  .  |  :  .  cluster node index: 1
[10:52:06.103] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.113] |  :  .  |  isFutureResolved() ... done
[10:52:06.113] |  :  .  checking value #1 ... done
[10:52:06.123] |  :  .  Number of remaining objects: 1
[10:52:06.123] |  :  .  checking value #1 ...
[10:52:06.124] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.124] |  :  .  |  isFutureResolved() ...
[10:52:06.124] |  :  .  |  :  assertValidConnection() ...
[10:52:06.124] |  :  .  |  :  .  cluster node index: 1
[10:52:06.124] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.135] |  :  .  |  isFutureResolved() ... done
[10:52:06.135] |  :  .  checking value #1 ... done
[10:52:06.145] |  :  .  Number of remaining objects: 1
[10:52:06.145] |  :  .  checking value #1 ...
[10:52:06.145] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.145] |  :  .  |  isFutureResolved() ...
[10:52:06.146] |  :  .  |  :  assertValidConnection() ...
[10:52:06.146] |  :  .  |  :  .  cluster node index: 1
[10:52:06.146] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.156] |  :  .  |  isFutureResolved() ... done
[10:52:06.156] |  :  .  checking value #1 ... done
[10:52:06.167] |  :  .  Number of remaining objects: 1
[10:52:06.167] |  :  .  checking value #1 ...
[10:52:06.167] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.167] |  :  .  |  isFutureResolved() ...
[10:52:06.167] |  :  .  |  :  assertValidConnection() ...
[10:52:06.167] |  :  .  |  :  .  cluster node index: 1
[10:52:06.168] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.178] |  :  .  |  isFutureResolved() ... done
[10:52:06.178] |  :  .  checking value #1 ... done
[10:52:06.188] |  :  .  Number of remaining objects: 1
[10:52:06.188] |  :  .  checking value #1 ...
[10:52:06.188] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.189] |  :  .  |  isFutureResolved() ...
[10:52:06.189] |  :  .  |  :  assertValidConnection() ...
[10:52:06.189] |  :  .  |  :  .  cluster node index: 1
[10:52:06.189] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.199] |  :  .  |  isFutureResolved() ... done
[10:52:06.200] |  :  .  checking value #1 ... done
[10:52:06.210] |  :  .  Number of remaining objects: 1
[10:52:06.210] |  :  .  checking value #1 ...
[10:52:06.210] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.210] |  :  .  |  isFutureResolved() ...
[10:52:06.211] |  :  .  |  :  assertValidConnection() ...
[10:52:06.211] |  :  .  |  :  .  cluster node index: 1
[10:52:06.211] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.221] |  :  .  |  isFutureResolved() ... done
[10:52:06.221] |  :  .  checking value #1 ... done
[10:52:06.232] |  :  .  Number of remaining objects: 1
[10:52:06.232] |  :  .  checking value #1 ...
[10:52:06.232] |  :  .  |  'obj' is MultisessionFuture
[10:52:06.232] |  :  .  |  isFutureResolved() ...
[10:52:06.232] |  :  .  |  :  assertValidConnection() ...
[10:52:06.233] |  :  .  |  :  .  cluster node index: 1
[10:52:06.233] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.241] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:52:06.241] |  :  .  |  :  .  cluster node index: 1
[10:52:06.241] |  :  .  |  :  .  [1] TRUE
[10:52:06.241] |  :  .  |  :  .  received data:
[10:52:06.241] |  :  .  |  :  .  List of 5
[10:52:06.241] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:52:06.241] |  :  .  |  :  .   $ value  :List of 13
[10:52:06.241] |  :  .  |  :  .    ..$ value            :List of 1
[10:52:06.241] |  :  .  |  :  .    .. ..$ : int 1
[10:52:06.241] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:52:06.241] |  :  .  |  :  .    ..$ stdout           : NULL
[10:52:06.241] |  :  .  |  :  .    ..$ conditions       : list()
[10:52:06.241] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:52:06.241] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:52:06.241] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:52:06.241] |  :  .  |  :  .    .. ..$ added   : NULL
[10:52:06.241] |  :  .  |  :  .    .. ..$ removed : NULL
[10:52:06.241] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:52:06.241] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:52:06.241] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:06.241] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:06"
[10:52:06.241] |  :  .  |  :  .    ..$ session_uuid     : chr "48c1991b2558e157e5b0d07703630534"
[10:52:06.241] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:52:06.241] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:06.241] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:06.241] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:06.241] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:06.241] |  :  .  |  :  .    .. .. ..$ pid   : int 66993
[10:52:06.241] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:06.241] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:52:06.241] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:52:06.241] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:06.241] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:52:06.241] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:52:06.241] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:52:06.241] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:52:06.241] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:52:06.241] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:52:06.241] |  :  .  |  :  .   $ success: logi TRUE
[10:52:06.241] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.066 0.004 0.57 0 0
[10:52:06.241] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:06.241] |  :  .  |  :  .   $ tag    : NULL
[10:52:06.252] |  :  .  |  :  .  Received FutureResult
[10:52:06.252] |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:06.252] |  :  .  |  :  .  |  Removed future from position #1
[10:52:06.252] |  :  .  |  :  .  |  Number of registered futures: 0
[10:52:06.252] |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:06.252] |  :  .  |  :  .  Erased future from future backend
[10:52:06.252] |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:06.252] |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:06.252] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:06.253] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:06.253] |  :  .  |  isFutureResolved() ... done
[10:52:06.253] |  :  .  |  MultisessionFuture #1
[10:52:06.253] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:06.253] |  :  .  |  :  nx: 2
[10:52:06.253] |  :  .  |  :  relay: TRUE
[10:52:06.253] |  :  .  |  :  stdout: TRUE
[10:52:06.253] |  :  .  |  :  signal: TRUE
[10:52:06.253] |  :  .  |  :  resignal: FALSE
[10:52:06.253] |  :  .  |  :  force: TRUE
[10:52:06.253] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:52:06.254] |  :  .  |  :  queued futures: [n=2] FALSE, TRUE
[10:52:06.254] |  :  .  |  :  until=1
[10:52:06.254] |  :  .  |  :  relaying element #1
[10:52:06.254] |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.254] |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.254] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.254] |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.254] |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.254] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.254] |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.255] |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.255] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.255] |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.255] |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.255] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.255] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:52:06.255] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:52:06.255] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:06.255] |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:52:06.255] |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.255] |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.256] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.256] |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.256] |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.256] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.256] |  :  .  |  :  value: <list>
[10:52:06.256] |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:52:06.256] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:06.256] |  :  .  |  :  nx: 2
[10:52:06.256] |  :  .  |  :  relay: TRUE
[10:52:06.256] |  :  .  |  :  stdout: TRUE
[10:52:06.256] |  :  .  |  :  signal: TRUE
[10:52:06.257] |  :  .  |  :  resignal: FALSE
[10:52:06.257] |  :  .  |  :  force: TRUE
[10:52:06.257] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:52:06.257] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:52:06.257] |  :  .  |  :  until=2
[10:52:06.257] |  :  .  |  :  relaying element #2
[10:52:06.257] |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.257] |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.257] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.257] |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.257] |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.258] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.258] |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.258] |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.258] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.258] |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.258] |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.258] |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.258] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:52:06.258] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:52:06.258] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:06.259] |  :  .  |  length: 0 (resolved future 1)
[10:52:06.259] |  :  .  checking value #1 ... done
[10:52:06.259] |  :  .  Relaying remaining futures ...
[10:52:06.259] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:52:06.259] |  :  .  |  :  nx: 2
[10:52:06.259] |  :  .  |  :  relay: TRUE
[10:52:06.259] |  :  .  |  :  stdout: TRUE
[10:52:06.259] |  :  .  |  :  signal: TRUE
[10:52:06.259] |  :  .  |  :  resignal: FALSE
[10:52:06.259] |  :  .  |  :  force: TRUE
[10:52:06.259] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:52:06.259] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:06.260] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:52:06.260] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:52:06.260] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:52:06.260] |  :  .  Relaying remaining futures ... done
[10:52:06.260] |  :  value() on list ... done
[10:52:06.260]  - Number of value chunks collected: 2
[10:52:06.260] Resolving 2 futures (chunks) ... DONE
[10:52:06.260] Reducing values from 2 chunks ...
[10:52:06.260]  - Number of values collected after concatenation: 2
[10:52:06.260]  - Number of values expected: 2
[10:52:06.260] Reducing values from 2 chunks ... DONE
[10:52:06.261] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = FALSE) ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ...
[10:52:06.261] future_lapply() ...
[10:52:06.262] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:06.262] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:06.262] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:06.262] Number of chunks: 2
[10:52:06.262] getGlobalsAndPackagesXApply() ...
[10:52:06.263]  - future.globals: TRUE
[10:52:06.263] |  :  getGlobalsAndPackages() ...
[10:52:06.263] |  :  .  Searching for globals ...
[10:52:06.264] |  :  .  |  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:52:06.264] |  :  .  Searching for globals ... DONE
[10:52:06.265] |  :  .  Resolving globals: FALSE
[10:52:06.265] |  :  .  Search for packages associated with the globals ...
[10:52:06.265] |  :  .  |  Packages associated with globals: [1] ‘base’
[10:52:06.265] |  :  .  |  Packages: [1] ‘base’
[10:52:06.265] |  :  .  Search for packages associated with the globals ... DONE
[10:52:06.265] |  :  .  The total size of the 1 globals is 841 bytes (841 bytes)
[10:52:06.266] |  :  .  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:52:06.266] |  :  .  Packages after dropping 'base': [0] 
[10:52:06.266] |  :  .  globals: [1] ‘FUN’
[10:52:06.266] |  :  .  packages: [0] 
[10:52:06.266] |  :  getGlobalsAndPackages() ... done
[10:52:06.266]  - globals found/used: [n=1] ‘FUN’
[10:52:06.266]  - needed namespaces: [n=0] 
[10:52:06.266] Finding globals ... DONE
[10:52:06.266]  - use_args: TRUE
[10:52:06.267]  - Getting '...' globals ...
[10:52:06.267] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:52:06.267] |  :  .  recursive: 0
[10:52:06.267] |  :  .  length: 1
[10:52:06.267] |  :  .  elements: ‘...’
[10:52:06.267] |  :  .  'obj' is DotDotDotList
[10:52:06.267] |  :  .  resolve(obj, ...) ...
[10:52:06.268] |  :  .  resolve(obj, ...) ... done
[10:52:06.268] |  :  .  length: 0 (resolved future 1)
[10:52:06.268] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:52:06.268]    - '...' content: [n=0] 
[10:52:06.268] List of 1
[10:52:06.268]  $ ...: list()
[10:52:06.268]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:06.268]  - attr(*, "where")=List of 1
[10:52:06.268]   ..$ ...:<environment: 0x56258447ee90> 
[10:52:06.268]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:06.268]  - attr(*, "resolved")= logi TRUE
[10:52:06.268]  - attr(*, "total_size")= num NA
[10:52:06.270]  - Getting '...' globals ... DONE
[10:52:06.271] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:52:06.271] List of 2
[10:52:06.271]  $ ...future.FUN:function (x)  
[10:52:06.271]  $ ...          : list()
[10:52:06.271]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:06.271]  - attr(*, "where")=List of 2
[10:52:06.271]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:06.271]   ..$ ...          :<environment: 0x56258447ee90> 
[10:52:06.271]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:06.271]  - attr(*, "resolved")= logi FALSE
[10:52:06.271]  - attr(*, "total_size")= num 5632
[10:52:06.274] Packages to be attached in all futures: [n=0] 
[10:52:06.274] getGlobalsAndPackagesXApply() ... DONE
[10:52:06.274] Number of futures (= number of chunks): 2
[10:52:06.274] Launching 2 futures (chunks) ...
[10:52:06.274] Chunk #1 of 2 ...
[10:52:06.274]  - Finding globals in 'X' for chunk #1 ...
[10:52:06.274] |  :  getGlobalsAndPackages() ...
[10:52:06.274] |  :  .  Searching for globals ...
[10:52:06.275] |  :  .  |  globals found: [0] 
[10:52:06.275] |  :  .  Searching for globals ... DONE
[10:52:06.275] |  :  .  globals: [0] <none>
[10:52:06.275] |  :  .  packages: [0] <none>
[10:52:06.275] |  :  getGlobalsAndPackages() ... done
[10:52:06.275]    + additional globals found: [n=0] 
[10:52:06.275]    + additional namespaces needed: [n=0] 
[10:52:06.275]  - Finding globals in 'X' for chunk #1 ... DONE
[10:52:06.275]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:06.275]  - seeds: <none>
[10:52:06.275]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.276] |  :  getGlobalsAndPackages() ...
[10:52:06.276] |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.276] |  :  .  Resolving globals: FALSE
[10:52:06.276] |  :  .  Tweak future expression to call with '...' arguments ...
[10:52:06.276] |  :  .  |  {
[10:52:06.276] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:06.276] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:52:06.276] |  :  .  |      "# as a global variable                                         "
[10:52:06.276] |  :  .  |      do.call(function(...) {
[10:52:06.276] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:06.276] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:52:06.276] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:52:06.276] |  :  .  |          "# anonymous function.                                          "
[10:52:06.276] |  :  .  |          "#                                                              "
[10:52:06.276] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:52:06.276] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:52:06.276] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:06.276] |  :  .  |          "# global environment, which is where globals are written.      "
[10:52:06.276] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:52:06.276] |  :  .  |          repeat {
[10:52:06.276] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:52:06.276] |  :  .  |                  emptyenv())) 
[10:52:06.276] |  :  .  |                  break
[10:52:06.276] |  :  .  |              penv <- env
[10:52:06.276] |  :  .  |              env <- parent.env(env)
[10:52:06.276] |  :  .  |          }
[10:52:06.276] |  :  .  |          if (identical(penv, globalenv())) {
[10:52:06.276] |  :  .  |              environment(...future.FUN) <- environment()
[10:52:06.276] |  :  .  |          }
[10:52:06.276] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:06.276] |  :  .  |              !isNamespace(penv)) {
[10:52:06.276] |  :  .  |              parent.env(penv) <- environment()
[10:52:06.276] |  :  .  |          }
[10:52:06.276] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:06.276] |  :  .  |          {
[10:52:06.276] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:06.276] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:06.276] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:06.276] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:52:06.276] |  :  .  |              }
[10:52:06.276] |  :  .  |              {
[10:52:06.276] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:06.276] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:06.276] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:52:06.276] |  :  .  |                  })
[10:52:06.276] |  :  .  |              }
[10:52:06.276] |  :  .  |          }
[10:52:06.276] |  :  .  |      }, args = future.call.arguments)
[10:52:06.276] |  :  .  |  }
[10:52:06.277] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:52:06.277] |  :  .  Search for packages associated with the globals ...
[10:52:06.277] |  :  .  |  Packages associated with globals: [0] 
[10:52:06.277] |  :  .  |  Packages: [0] 
[10:52:06.277] |  :  .  Search for packages associated with the globals ... DONE
[10:52:06.277] |  :  .  Packages after dropping 'base': [0] 
[10:52:06.277] |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.278] |  :  .  packages: [0] 
[10:52:06.278] |  :  getGlobalsAndPackages() ... done
[10:52:06.278] |  :  run() for Future (‘Future’) ...
[10:52:06.278] |  :  .  state: ‘created’
[10:52:06.278] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:06.278] |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:06.278] |  :  .  Using MultisessionFutureBackend ...
[10:52:06.278] |  :  .  |  Launching futures ...
[10:52:06.279] |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:52:06.279] |  :  .  |  :  .  Workers: [n=2]
[10:52:06.279] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:06.280] |  :  .  |  :  .  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:06.280] |  :  .  |  :  .  requestWorker() ...
[10:52:06.280] |  :  .  |  :  .  |  requestNode() ...
[10:52:06.281] |  :  .  |  :  .  |  :  Number of workers: 2
[10:52:06.281] |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:52:06.281] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:06.281] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:06.281] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:52:06.281] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:06.281] |  :  .  |  :  .  |  :  .  Total time: 0
[10:52:06.281] |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:52:06.281] |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:06.282] |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:06.282] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:52:06.282] |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:06.282] |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:52:06.282] |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:52:06.324] |  :  .  |  :  .  |  :  .  Worker is functional
[10:52:06.324] |  :  .  |  :  .  |  :  requestNode() ... done
[10:52:06.324] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.324] |  :  .  |  :  .  |  requestWorker() ... done
[10:52:06.326] |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:52:06.326] |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:52:06.327] |  :  .  |  :  .  |  launchFuture() ...
[10:52:06.327] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.327] |  :  .  |  :  .  |  :  getFutureData() ...
[10:52:06.327] |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:52:06.327] |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:52:06.327] |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:52:06.327] |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:52:06.327] |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:52:06.327] |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:52:06.327] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:06.328] |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:52:06.328] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:06.328] |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:52:06.328] |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:52:06.328] |  :  .  |  :  .  |  :  getFutureData() ... done
[10:52:06.328] |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:06.328] |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:52:06.328] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:06.329] |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:06.329] |  :  .  |  :  .  |  launchFuture() ... done
[10:52:06.329] |  :  .  |  :  .  |  MultisessionFuture started
[10:52:06.329] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:52:06.329] |  :  .  |  :  Launching futures ... done
[10:52:06.329] |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:06.329] |  :  .  |  Using MultisessionFutureBackend ... done
[10:52:06.329] |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:52:06.329] Created future:
[10:52:06.330] |  :  .  isFutureResolved() ...
[10:52:06.331] |  :  .  |  assertValidConnection() ...
[10:52:06.331] |  :  .  |  :  cluster node index: 1
[10:52:06.331] |  :  .  |  assertValidConnection() ... done
[10:52:06.341] |  :  .  isFutureResolved() ... done
[10:52:06.329] MultisessionFuture:
[10:52:06.329] Label: ‘future_lapply-1’
[10:52:06.329] Expression:
[10:52:06.329] {
[10:52:06.329]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:06.329]     "# expression in do.call(), because function called uses '...'  "
[10:52:06.329]     "# as a global variable                                         "
[10:52:06.329]     do.call(function(...) {
[10:52:06.329]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:06.329]         "# without having an '...' argument. This means '...' is treated"
[10:52:06.329]         "# as a global variable. This may happen when FUN() is an       "
[10:52:06.329]         "# anonymous function.                                          "
[10:52:06.329]         "#                                                              "
[10:52:06.329]         "# If an anonymous function, we will make sure to restore the   "
[10:52:06.329]         "# function environment of FUN() to the calling environment.    "
[10:52:06.329]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:06.329]         "# global environment, which is where globals are written.      "
[10:52:06.329]         penv <- env <- environment(...future.FUN)
[10:52:06.329]         repeat {
[10:52:06.329]             if (identical(env, globalenv()) || identical(env, 
[10:52:06.329]                 emptyenv())) 
[10:52:06.329]                 break
[10:52:06.329]             penv <- env
[10:52:06.329]             env <- parent.env(env)
[10:52:06.329]         }
[10:52:06.329]         if (identical(penv, globalenv())) {
[10:52:06.329]             environment(...future.FUN) <- environment()
[10:52:06.329]         }
[10:52:06.329]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:06.329]             !isNamespace(penv)) {
[10:52:06.329]             parent.env(penv) <- environment()
[10:52:06.329]         }
[10:52:06.329]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:06.329]         {
[10:52:06.329]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:06.329]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:06.329]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:06.329]                 on.exit(options(oopts), add = TRUE)
[10:52:06.329]             }
[10:52:06.329]             {
[10:52:06.329]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:06.329]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:06.329]                   ...future.FUN(...future.X_jj, ...)
[10:52:06.329]                 })
[10:52:06.329]             }
[10:52:06.329]         }
[10:52:06.329]     }, args = future.call.arguments)
[10:52:06.329] }
[10:52:06.329] Lazy evaluation: FALSE
[10:52:06.329] Asynchronous evaluation: TRUE
[10:52:06.329] Local evaluation: TRUE
[10:52:06.329] Environment: R_GlobalEnv
[10:52:06.329] Capture standard output: TRUE
[10:52:06.329] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:06.329] Immediate condition classes: ‘immediateCondition’
[10:52:06.329] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:06.329] Packages: <none>
[10:52:06.329] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:06.329] Resolved: FALSE
[10:52:06.329] Value: <not collected>
[10:52:06.329] Conditions captured: <none>
[10:52:06.329] Early signaling: FALSE
[10:52:06.329] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:06.329] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:06.342] Chunk #1 of 2 ... DONE
[10:52:06.342] Chunk #2 of 2 ...
[10:52:06.342]  - Finding globals in 'X' for chunk #2 ...
[10:52:06.342] |  :  .  getGlobalsAndPackages() ...
[10:52:06.342] |  :  .  |  Searching for globals ...
[10:52:06.343] |  :  .  |  :  globals found: [0] 
[10:52:06.343] |  :  .  |  Searching for globals ... DONE
[10:52:06.343] |  :  .  |  globals: [0] <none>
[10:52:06.343] |  :  .  |  packages: [0] <none>
[10:52:06.343] |  :  .  getGlobalsAndPackages() ... done
[10:52:06.343]    + additional globals found: [n=0] 
[10:52:06.343]    + additional namespaces needed: [n=0] 
[10:52:06.343]  - Finding globals in 'X' for chunk #2 ... DONE
[10:52:06.343]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:06.343]  - seeds: <none>
[10:52:06.343]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.344] |  :  .  getGlobalsAndPackages() ...
[10:52:06.344] |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.344] |  :  .  |  Resolving globals: FALSE
[10:52:06.344] |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:52:06.344] |  :  .  |  :  {
[10:52:06.344] |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:06.344] |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:52:06.344] |  :  .  |  :      "# as a global variable                                         "
[10:52:06.344] |  :  .  |  :      do.call(function(...) {
[10:52:06.344] |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:06.344] |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:52:06.344] |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:52:06.344] |  :  .  |  :          "# anonymous function.                                          "
[10:52:06.344] |  :  .  |  :          "#                                                              "
[10:52:06.344] |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:52:06.344] |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:52:06.344] |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:06.344] |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:52:06.344] |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:52:06.344] |  :  .  |  :          repeat {
[10:52:06.344] |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:52:06.344] |  :  .  |  :                  emptyenv())) 
[10:52:06.344] |  :  .  |  :                  break
[10:52:06.344] |  :  .  |  :              penv <- env
[10:52:06.344] |  :  .  |  :              env <- parent.env(env)
[10:52:06.344] |  :  .  |  :          }
[10:52:06.344] |  :  .  |  :          if (identical(penv, globalenv())) {
[10:52:06.344] |  :  .  |  :              environment(...future.FUN) <- environment()
[10:52:06.344] |  :  .  |  :          }
[10:52:06.344] |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:06.344] |  :  .  |  :              !isNamespace(penv)) {
[10:52:06.344] |  :  .  |  :              parent.env(penv) <- environment()
[10:52:06.344] |  :  .  |  :          }
[10:52:06.344] |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:06.344] |  :  .  |  :          {
[10:52:06.344] |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:06.344] |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:06.344] |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:06.344] |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:52:06.344] |  :  .  |  :              }
[10:52:06.344] |  :  .  |  :              {
[10:52:06.344] |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:06.344] |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:06.344] |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:52:06.344] |  :  .  |  :                  })
[10:52:06.344] |  :  .  |  :              }
[10:52:06.344] |  :  .  |  :          }
[10:52:06.344] |  :  .  |  :      }, args = future.call.arguments)
[10:52:06.344] |  :  .  |  :  }
[10:52:06.344] |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:52:06.345] |  :  .  |  Search for packages associated with the globals ...
[10:52:06.345] |  :  .  |  :  Packages associated with globals: [0] 
[10:52:06.345] |  :  .  |  :  Packages: [0] 
[10:52:06.345] |  :  .  |  Search for packages associated with the globals ... DONE
[10:52:06.345] |  :  .  |  Packages after dropping 'base': [0] 
[10:52:06.345] |  :  .  |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.345] |  :  .  |  packages: [0] 
[10:52:06.345] |  :  .  getGlobalsAndPackages() ... done
[10:52:06.346] |  :  .  run() for Future (‘Future’) ...
[10:52:06.346] |  :  .  |  state: ‘created’
[10:52:06.346] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:06.346] |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:06.346] |  :  .  |  Using MultisessionFutureBackend ...
[10:52:06.346] |  :  .  |  :  Launching futures ...
[10:52:06.346] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:52:06.346] |  :  .  |  :  .  |  Workers: [n=2]
[10:52:06.347] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:06.348] |  :  .  |  :  .  |  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:06.348] |  :  .  |  :  .  |  requestWorker() ...
[10:52:06.348] |  :  .  |  :  .  |  :  requestNode() ...
[10:52:06.348] |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:52:06.348] |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:52:06.349] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:06.349] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:52:06.349] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:06.349] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:06.349] |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:52:06.349] |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:52:06.349] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:06.349] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:06.349] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:06.349] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:06.349] |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:52:06.350] |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:52:06.391] |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:52:06.391] |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:52:06.391] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:52:06.392] |  :  .  |  :  .  |  :  requestWorker() ... done
[10:52:06.392] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:52:06.392] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:52:06.392] |  :  .  |  :  .  |  :  launchFuture() ...
[10:52:06.392] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:52:06.392] |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:52:06.392] |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:52:06.392] |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:52:06.393] |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:06.393] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:06.393] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:06.393] |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:52:06.393] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:06.393] |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:06.393] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:06.393] |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:06.393] |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:06.394] |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:52:06.394] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:06.394] |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:52:06.394] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:52:06.394] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:06.394] |  :  .  |  :  .  |  :  launchFuture() ... done
[10:52:06.394] |  :  .  |  :  .  |  :  MultisessionFuture started
[10:52:06.394] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:52:06.394] |  :  .  |  :  .  Launching futures ... done
[10:52:06.395] |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:06.395] |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:52:06.395] |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:52:06.395] Created future:
[10:52:06.396] |  :  .  |  isFutureResolved() ...
[10:52:06.396] |  :  .  |  :  assertValidConnection() ...
[10:52:06.396] |  :  .  |  :  .  cluster node index: 2
[10:52:06.396] |  :  .  |  :  assertValidConnection() ... done
[10:52:06.407] |  :  .  |  isFutureResolved() ... done
[10:52:06.395] MultisessionFuture:
[10:52:06.395] Label: ‘future_lapply-2’
[10:52:06.395] Expression:
[10:52:06.395] {
[10:52:06.395]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:06.395]     "# expression in do.call(), because function called uses '...'  "
[10:52:06.395]     "# as a global variable                                         "
[10:52:06.395]     do.call(function(...) {
[10:52:06.395]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:06.395]         "# without having an '...' argument. This means '...' is treated"
[10:52:06.395]         "# as a global variable. This may happen when FUN() is an       "
[10:52:06.395]         "# anonymous function.                                          "
[10:52:06.395]         "#                                                              "
[10:52:06.395]         "# If an anonymous function, we will make sure to restore the   "
[10:52:06.395]         "# function environment of FUN() to the calling environment.    "
[10:52:06.395]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:06.395]         "# global environment, which is where globals are written.      "
[10:52:06.395]         penv <- env <- environment(...future.FUN)
[10:52:06.395]         repeat {
[10:52:06.395]             if (identical(env, globalenv()) || identical(env, 
[10:52:06.395]                 emptyenv())) 
[10:52:06.395]                 break
[10:52:06.395]             penv <- env
[10:52:06.395]             env <- parent.env(env)
[10:52:06.395]         }
[10:52:06.395]         if (identical(penv, globalenv())) {
[10:52:06.395]             environment(...future.FUN) <- environment()
[10:52:06.395]         }
[10:52:06.395]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:06.395]             !isNamespace(penv)) {
[10:52:06.395]             parent.env(penv) <- environment()
[10:52:06.395]         }
[10:52:06.395]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:06.395]         {
[10:52:06.395]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:06.395]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:06.395]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:06.395]                 on.exit(options(oopts), add = TRUE)
[10:52:06.395]             }
[10:52:06.395]             {
[10:52:06.395]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:06.395]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:06.395]                   ...future.FUN(...future.X_jj, ...)
[10:52:06.395]                 })
[10:52:06.395]             }
[10:52:06.395]         }
[10:52:06.395]     }, args = future.call.arguments)
[10:52:06.395] }
[10:52:06.395] Lazy evaluation: FALSE
[10:52:06.395] Asynchronous evaluation: TRUE
[10:52:06.395] Local evaluation: TRUE
[10:52:06.395] Environment: R_GlobalEnv
[10:52:06.395] Capture standard output: TRUE
[10:52:06.395] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:06.395] Immediate condition classes: ‘immediateCondition’
[10:52:06.395] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:06.395] Packages: <none>
[10:52:06.395] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:06.395] Resolved: FALSE
[10:52:06.395] Value: <not collected>
[10:52:06.395] Conditions captured: <none>
[10:52:06.395] Early signaling: FALSE
[10:52:06.395] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:06.395] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:06.407] Chunk #2 of 2 ... DONE
[10:52:06.407] Launching 2 futures (chunks) ... DONE
[10:52:06.408] Resolving 2 futures (chunks) ...
[10:52:06.408] |  :  .  |  value() on list ...
[10:52:06.408] |  :  .  |  :  recursive: 0
[10:52:06.408] |  :  .  |  :  length: 2
[10:52:06.408] |  :  .  |  :  
[10:52:06.408] |  :  .  |  :  Number of remaining objects: 2
[10:52:06.408] |  :  .  |  :  checking value #1 ...
[10:52:06.408] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.408] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.409] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.409] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.409] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.419] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.419] |  :  .  |  :  checking value #1 ... done
[10:52:06.419] |  :  .  |  :  checking value #2 ...
[10:52:06.419] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.420] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.420] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.420] |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:06.420] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.430] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.431] |  :  .  |  :  checking value #2 ... done
[10:52:06.441] |  :  .  |  :  Number of remaining objects: 2
[10:52:06.441] |  :  .  |  :  checking value #1 ...
[10:52:06.441] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.441] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.442] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.442] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.442] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.452] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.452] |  :  .  |  :  checking value #1 ... done
[10:52:06.452] |  :  .  |  :  checking value #2 ...
[10:52:06.452] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.453] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.453] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.453] |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:06.453] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.453] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:52:06.453] |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:06.454] |  :  .  |  :  .  |  :  [1] TRUE
[10:52:06.454] |  :  .  |  :  .  |  :  received data:
[10:52:06.454] |  :  .  |  :  .  |  :  List of 5
[10:52:06.454] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:52:06.454] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:52:06.454] |  :  .  |  :  .  |  :    .. ..$ : int 0
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ stdout           : chr "[1] 0\n"
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:52:06.454] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:52:06.454] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:52:06.454] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:06"
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:06"
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "be79b08faeced682a2aab9c61d6391c7"
[10:52:06.454] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:52:06.454] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:06.454] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:06.454] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:06.454] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:06.454] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 66994
[10:52:06.454] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:06.454] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:52:06.454] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:06.454] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:52:06.454] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:52:06.454] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:52:06.454] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:52:06.454] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:52:06.454] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:52:06.454] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:52:06.454] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[10:52:06.454] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:06.454] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:52:06.464] |  :  .  |  :  .  |  :  Received FutureResult
[10:52:06.464] |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:06.464] |  :  .  |  :  .  |  :  .  Removed future from position #2
[10:52:06.465] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:06.465] |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:06.465] |  :  .  |  :  .  |  :  Erased future from future backend
[10:52:06.465] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.465] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.465] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.465] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:06.465] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.465] |  :  .  |  :  .  MultisessionFuture #2
[10:52:06.465] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:06.465] |  :  .  |  :  .  |  nx: 2
[10:52:06.466] |  :  .  |  :  .  |  relay: TRUE
[10:52:06.466] |  :  .  |  :  .  |  stdout: TRUE
[10:52:06.466] |  :  .  |  :  .  |  signal: TRUE
[10:52:06.466] |  :  .  |  :  .  |  resignal: FALSE
[10:52:06.466] |  :  .  |  :  .  |  force: TRUE
[10:52:06.466] |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:52:06.466] |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:52:06.466] |  :  .  |  :  .  |  until=1
[10:52:06.466] |  :  .  |  :  .  |  relaying element #1
[10:52:06.466] |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:52:06.466] |  :  .  |  :  .  |  queued futures: [n=2] FALSE, TRUE
[10:52:06.467] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=2) ... done
[10:52:06.467] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:52:06.467] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.467] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.467] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.467] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.467] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.467] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.467] |  :  .  |  :  .  |  value: <list>
[10:52:06.467] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:52:06.467] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:06.468] |  :  .  |  :  .  |  nx: 2
[10:52:06.468] |  :  .  |  :  .  |  relay: TRUE
[10:52:06.468] |  :  .  |  :  .  |  stdout: TRUE
[10:52:06.468] |  :  .  |  :  .  |  signal: TRUE
[10:52:06.468] |  :  .  |  :  .  |  resignal: FALSE
[10:52:06.468] |  :  .  |  :  .  |  force: TRUE
[10:52:06.468] |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:52:06.468] |  :  .  |  :  .  |  queued futures: [n=2] FALSE, TRUE
[10:52:06.468] |  :  .  |  :  .  |  until=1
[10:52:06.468] |  :  .  |  :  .  |  relaying element #1
[10:52:06.468] |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:52:06.468] |  :  .  |  :  .  |  queued futures: [n=2] FALSE, TRUE
[10:52:06.469] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=2) ... done
[10:52:06.469] |  :  .  |  :  .  length: 1 (resolved future 2)
[10:52:06.469] |  :  .  |  :  checking value #2 ... done
[10:52:06.479] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.479] |  :  .  |  :  checking value #1 ...
[10:52:06.479] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.479] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.480] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.480] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.480] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.491] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.491] |  :  .  |  :  checking value #1 ... done
[10:52:06.501] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.501] |  :  .  |  :  checking value #1 ...
[10:52:06.501] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.501] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.502] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.502] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.502] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.512] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.512] |  :  .  |  :  checking value #1 ... done
[10:52:06.522] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.523] |  :  .  |  :  checking value #1 ...
[10:52:06.523] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.523] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.523] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.523] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.523] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.534] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.534] |  :  .  |  :  checking value #1 ... done
[10:52:06.544] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.544] |  :  .  |  :  checking value #1 ...
[10:52:06.544] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.544] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.545] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.545] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.545] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.555] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.556] |  :  .  |  :  checking value #1 ... done
[10:52:06.566] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.566] |  :  .  |  :  checking value #1 ...
[10:52:06.566] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.566] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.566] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.567] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.567] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.577] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.577] |  :  .  |  :  checking value #1 ... done
[10:52:06.587] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.588] |  :  .  |  :  checking value #1 ...
[10:52:06.588] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.588] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.588] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.588] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.589] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.599] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.599] |  :  .  |  :  checking value #1 ... done
[10:52:06.609] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.609] |  :  .  |  :  checking value #1 ...
[10:52:06.609] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.609] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.610] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.610] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.610] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.620] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.620] |  :  .  |  :  checking value #1 ... done
[10:52:06.631] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.631] |  :  .  |  :  checking value #1 ...
[10:52:06.631] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.631] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.631] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.631] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.632] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.642] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.642] |  :  .  |  :  checking value #1 ... done
[10:52:06.652] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.652] |  :  .  |  :  checking value #1 ...
[10:52:06.652] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.653] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.653] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.653] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.653] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.664] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.664] |  :  .  |  :  checking value #1 ... done
[10:52:06.674] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.674] |  :  .  |  :  checking value #1 ...
[10:52:06.674] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.674] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.674] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.675] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.675] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.685] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.685] |  :  .  |  :  checking value #1 ... done
[10:52:06.695] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.695] |  :  .  |  :  checking value #1 ...
[10:52:06.696] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.696] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.696] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.696] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.696] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.707] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.707] |  :  .  |  :  checking value #1 ... done
[10:52:06.717] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.717] |  :  .  |  :  checking value #1 ...
[10:52:06.717] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.717] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.717] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.718] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.718] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.728] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.728] |  :  .  |  :  checking value #1 ... done
[10:52:06.738] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.739] |  :  .  |  :  checking value #1 ...
[10:52:06.739] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.739] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.739] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.739] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.740] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.750] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.750] |  :  .  |  :  checking value #1 ... done
[10:52:06.760] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.760] |  :  .  |  :  checking value #1 ...
[10:52:06.761] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.761] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.761] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.761] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.762] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.772] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.772] |  :  .  |  :  checking value #1 ... done
[10:52:06.782] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.782] |  :  .  |  :  checking value #1 ...
[10:52:06.782] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.783] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.783] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.783] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.783] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.793] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.794] |  :  .  |  :  checking value #1 ... done
[10:52:06.804] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.804] |  :  .  |  :  checking value #1 ...
[10:52:06.804] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.804] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.805] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.805] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.805] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.815] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.815] |  :  .  |  :  checking value #1 ... done
[10:52:06.826] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.826] |  :  .  |  :  checking value #1 ...
[10:52:06.826] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.826] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.827] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.827] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.827] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.837] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.837] |  :  .  |  :  checking value #1 ... done
[10:52:06.848] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.848] |  :  .  |  :  checking value #1 ...
[10:52:06.848] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.848] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.848] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.849] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.849] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.859] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.859] |  :  .  |  :  checking value #1 ... done
[10:52:06.869] |  :  .  |  :  Number of remaining objects: 1
[10:52:06.870] |  :  .  |  :  checking value #1 ...
[10:52:06.870] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:06.870] |  :  .  |  :  .  isFutureResolved() ...
[10:52:06.870] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:06.870] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.871] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:06.873] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:52:06.873] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:06.874] |  :  .  |  :  .  |  :  [1] TRUE
[10:52:06.874] |  :  .  |  :  .  |  :  received data:
[10:52:06.874] |  :  .  |  :  .  |  :  List of 5
[10:52:06.874] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:52:06.874] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:52:06.874] |  :  .  |  :  .  |  :    .. ..$ : int 1
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ stdout           : chr "[1] 1\n"
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:52:06.874] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:52:06.874] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:52:06.874] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:06"
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:06"
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "48c1991b2558e157e5b0d07703630534"
[10:52:06.874] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:52:06.874] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:06.874] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:06.874] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:06.874] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:06.874] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 66993
[10:52:06.874] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:06.874] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:52:06.874] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:06.874] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:52:06.874] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:52:06.874] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:52:06.874] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:52:06.874] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:52:06.874] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:52:06.874] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:52:06.874] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.504 0 0
[10:52:06.874] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:06.874] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:52:06.886] |  :  .  |  :  .  |  :  Received FutureResult
[10:52:06.886] |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:06.886] |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:52:06.886] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:52:06.886] |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:06.887] |  :  .  |  :  .  |  :  Erased future from future backend
[10:52:06.887] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:06.887] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:06.887] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:06.887] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:06.887] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:06.887] |  :  .  |  :  .  MultisessionFuture #1
[10:52:06.887] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:06.887] |  :  .  |  :  .  |  nx: 2
[10:52:06.887] |  :  .  |  :  .  |  relay: TRUE
[10:52:06.887] |  :  .  |  :  .  |  stdout: TRUE
[10:52:06.888] |  :  .  |  :  .  |  signal: TRUE
[10:52:06.888] |  :  .  |  :  .  |  resignal: FALSE
[10:52:06.888] |  :  .  |  :  .  |  force: TRUE
[10:52:06.888] |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:52:06.888] |  :  .  |  :  .  |  queued futures: [n=2] FALSE, TRUE
[10:52:06.888] |  :  .  |  :  .  |  until=1
[10:52:06.888] |  :  .  |  :  .  |  relaying element #1
[10:52:06.888] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.888] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.888] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.888] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.889] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.889] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.889] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.889] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.889] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.889] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.889] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.889] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.889] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:52:06.889] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:52:06.889] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:06.890] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:52:06.890] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.890] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.890] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.890] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.890] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.890] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.890] |  :  .  |  :  .  |  value: <list>
[10:52:06.890] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:52:06.890] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:06.890] |  :  .  |  :  .  |  nx: 2
[10:52:06.891] |  :  .  |  :  .  |  relay: TRUE
[10:52:06.891] |  :  .  |  :  .  |  stdout: TRUE
[10:52:06.891] |  :  .  |  :  .  |  signal: TRUE
[10:52:06.891] |  :  .  |  :  .  |  resignal: FALSE
[10:52:06.891] |  :  .  |  :  .  |  force: TRUE
[10:52:06.891] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:52:06.891] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:52:06.891] |  :  .  |  :  .  |  until=2
[10:52:06.891] |  :  .  |  :  .  |  relaying element #2
[10:52:06.891] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.891] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.891] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.892] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.892] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.892] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.892] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.892] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.892] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.892] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:06.892] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:06.892] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:06.892] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:52:06.893] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:52:06.893] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:06.893] |  :  .  |  :  .  length: 0 (resolved future 1)
[10:52:06.893] |  :  .  |  :  checking value #1 ... done
[10:52:06.893] |  :  .  |  :  Relaying remaining futures ...
[10:52:06.893] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:52:06.893] |  :  .  |  :  .  |  nx: 2
[10:52:06.893] |  :  .  |  :  .  |  relay: TRUE
[10:52:06.893] |  :  .  |  :  .  |  stdout: TRUE
[10:52:06.893] |  :  .  |  :  .  |  signal: TRUE
[10:52:06.893] |  :  .  |  :  .  |  resignal: FALSE
[10:52:06.894] |  :  .  |  :  .  |  force: TRUE
[10:52:06.894] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:52:06.894] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:06.894] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:52:06.894] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:52:06.894] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:52:06.894] |  :  .  |  :  Relaying remaining futures ... done
[10:52:06.894] |  :  .  |  value() on list ... done
[10:52:06.894]  - Number of value chunks collected: 2
[10:52:06.895] Resolving 2 futures (chunks) ... DONE
[10:52:06.895] Reducing values from 2 chunks ...
[10:52:06.895]  - Number of values collected after concatenation: 2
[10:52:06.895]  - Number of values expected: 2
[10:52:06.895] Reducing values from 2 chunks ... DONE
[10:52:06.895] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ... DONE
* future_lapply(x, ..., future.stdout = NA) ...
[10:52:06.895] future_lapply() ...
[10:52:06.896] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:06.896] |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:06.896] |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:06.897] Number of chunks: 2
[10:52:06.897] getGlobalsAndPackagesXApply() ...
[10:52:06.897]  - future.globals: TRUE
[10:52:06.897] |  :  .  |  getGlobalsAndPackages() ...
[10:52:06.897] |  :  .  |  :  Searching for globals ...
[10:52:06.899] |  :  .  |  :  .  globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[10:52:06.899] |  :  .  |  :  Searching for globals ... DONE
[10:52:06.899] |  :  .  |  :  Resolving globals: FALSE
[10:52:06.899] |  :  .  |  :  Search for packages associated with the globals ...
[10:52:06.899] |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:52:06.900] |  :  .  |  :  .  Packages: [1] ‘base’
[10:52:06.900] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:52:06.900] |  :  .  |  :  The total size of the 1 globals is 841 bytes (841 bytes)
[10:52:06.900] |  :  .  |  :  The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[10:52:06.900] |  :  .  |  :  Packages after dropping 'base': [0] 
[10:52:06.900] |  :  .  |  :  globals: [1] ‘FUN’
[10:52:06.900] |  :  .  |  :  packages: [0] 
[10:52:06.901] |  :  .  |  getGlobalsAndPackages() ... done
[10:52:06.901]  - globals found/used: [n=1] ‘FUN’
[10:52:06.901]  - needed namespaces: [n=0] 
[10:52:06.901] Finding globals ... DONE
[10:52:06.901]  - use_args: TRUE
[10:52:06.901]  - Getting '...' globals ...
[10:52:06.901] |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:52:06.902] |  :  .  |  :  recursive: 0
[10:52:06.902] |  :  .  |  :  length: 1
[10:52:06.902] |  :  .  |  :  elements: ‘...’
[10:52:06.902] |  :  .  |  :  'obj' is DotDotDotList
[10:52:06.902] |  :  .  |  :  resolve(obj, ...) ...
[10:52:06.902] |  :  .  |  :  resolve(obj, ...) ... done
[10:52:06.902] |  :  .  |  :  length: 0 (resolved future 1)
[10:52:06.902] |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:52:06.902]    - '...' content: [n=0] 
[10:52:06.902] List of 1
[10:52:06.902]  $ ...: list()
[10:52:06.902]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:06.902]  - attr(*, "where")=List of 1
[10:52:06.902]   ..$ ...:<environment: 0x562581db2df0> 
[10:52:06.902]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:06.902]  - attr(*, "resolved")= logi TRUE
[10:52:06.902]  - attr(*, "total_size")= num NA
[10:52:06.905]  - Getting '...' globals ... DONE
[10:52:06.905] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:52:06.905] List of 2
[10:52:06.905]  $ ...future.FUN:function (x)  
[10:52:06.905]  $ ...          : list()
[10:52:06.905]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:52:06.905]  - attr(*, "where")=List of 2
[10:52:06.905]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:06.905]   ..$ ...          :<environment: 0x562581db2df0> 
[10:52:06.905]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:06.905]  - attr(*, "resolved")= logi FALSE
[10:52:06.905]  - attr(*, "total_size")= num 5632
[10:52:06.908] Packages to be attached in all futures: [n=0] 
[10:52:06.908] getGlobalsAndPackagesXApply() ... DONE
[10:52:06.908] Number of futures (= number of chunks): 2
[10:52:06.908] Launching 2 futures (chunks) ...
[10:52:06.909] Chunk #1 of 2 ...
[10:52:06.909]  - Finding globals in 'X' for chunk #1 ...
[10:52:06.909] |  :  .  |  getGlobalsAndPackages() ...
[10:52:06.909] |  :  .  |  :  Searching for globals ...
[10:52:06.909] |  :  .  |  :  .  globals found: [0] 
[10:52:06.909] |  :  .  |  :  Searching for globals ... DONE
[10:52:06.909] |  :  .  |  :  globals: [0] <none>
[10:52:06.909] |  :  .  |  :  packages: [0] <none>
[10:52:06.909] |  :  .  |  getGlobalsAndPackages() ... done
[10:52:06.910]    + additional globals found: [n=0] 
[10:52:06.910]    + additional namespaces needed: [n=0] 
[10:52:06.910]  - Finding globals in 'X' for chunk #1 ... DONE
[10:52:06.910]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:06.910]  - seeds: <none>
[10:52:06.910]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.910] |  :  .  |  getGlobalsAndPackages() ...
[10:52:06.910] |  :  .  |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.910] |  :  .  |  :  Resolving globals: FALSE
[10:52:06.910] |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:52:06.911] |  :  .  |  :  .  {
[10:52:06.911] |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:06.911] |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:52:06.911] |  :  .  |  :  .      "# as a global variable                                         "
[10:52:06.911] |  :  .  |  :  .      do.call(function(...) {
[10:52:06.911] |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:06.911] |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:52:06.911] |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:52:06.911] |  :  .  |  :  .          "# anonymous function.                                          "
[10:52:06.911] |  :  .  |  :  .          "#                                                              "
[10:52:06.911] |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:52:06.911] |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:52:06.911] |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:06.911] |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:52:06.911] |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:52:06.911] |  :  .  |  :  .          repeat {
[10:52:06.911] |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:52:06.911] |  :  .  |  :  .                  emptyenv())) 
[10:52:06.911] |  :  .  |  :  .                  break
[10:52:06.911] |  :  .  |  :  .              penv <- env
[10:52:06.911] |  :  .  |  :  .              env <- parent.env(env)
[10:52:06.911] |  :  .  |  :  .          }
[10:52:06.911] |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:52:06.911] |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:52:06.911] |  :  .  |  :  .          }
[10:52:06.911] |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:06.911] |  :  .  |  :  .              !isNamespace(penv)) {
[10:52:06.911] |  :  .  |  :  .              parent.env(penv) <- environment()
[10:52:06.911] |  :  .  |  :  .          }
[10:52:06.911] |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:06.911] |  :  .  |  :  .          {
[10:52:06.911] |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:06.911] |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:06.911] |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:06.911] |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:52:06.911] |  :  .  |  :  .              }
[10:52:06.911] |  :  .  |  :  .              {
[10:52:06.911] |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:06.911] |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:06.911] |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:52:06.911] |  :  .  |  :  .                  })
[10:52:06.911] |  :  .  |  :  .              }
[10:52:06.911] |  :  .  |  :  .          }
[10:52:06.911] |  :  .  |  :  .      }, args = future.call.arguments)
[10:52:06.911] |  :  .  |  :  .  }
[10:52:06.911] |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:52:06.911] |  :  .  |  :  Search for packages associated with the globals ...
[10:52:06.911] |  :  .  |  :  .  Packages associated with globals: [0] 
[10:52:06.912] |  :  .  |  :  .  Packages: [0] 
[10:52:06.912] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:52:06.912] |  :  .  |  :  Packages after dropping 'base': [0] 
[10:52:06.912] |  :  .  |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.912] |  :  .  |  :  packages: [0] 
[10:52:06.912] |  :  .  |  getGlobalsAndPackages() ... done
[10:52:06.912] |  :  .  |  run() for Future (‘Future’) ...
[10:52:06.913] |  :  .  |  :  state: ‘created’
[10:52:06.913] |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:06.913] |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:06.913] |  :  .  |  :  Using MultisessionFutureBackend ...
[10:52:06.913] |  :  .  |  :  .  Launching futures ...
[10:52:06.913] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:52:06.913] |  :  .  |  :  .  |  :  Workers: [n=2]
[10:52:06.913] |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:06.915] |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:06.915] |  :  .  |  :  .  |  :  requestWorker() ...
[10:52:06.915] |  :  .  |  :  .  |  :  .  requestNode() ...
[10:52:06.915] |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:52:06.915] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:52:06.915] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:52:06.916] |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:52:06.957] |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:52:06.957] |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:52:06.958] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:06.958] |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:52:06.958] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:52:06.958] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:52:06.958] |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:52:06.958] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:06.958] |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:52:06.958] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:52:06.959] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:06.959] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:52:06.959] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:52:06.959] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:52:06.959] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:52:06.959] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:06.959] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:06.959] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:06.959] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:06.959] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:52:06.960] |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:52:06.960] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:06.960] |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:52:06.960] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:06.960] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:06.960] |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:52:06.960] |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:52:06.960] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:52:06.961] |  :  .  |  :  .  |  Launching futures ... done
[10:52:06.961] |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:06.961] |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:52:06.961] |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:52:06.961] Created future:
[10:52:06.962] |  :  .  |  :  isFutureResolved() ...
[10:52:06.962] |  :  .  |  :  .  assertValidConnection() ...
[10:52:06.962] |  :  .  |  :  .  |  cluster node index: 1
[10:52:06.963] |  :  .  |  :  .  assertValidConnection() ... done
[10:52:06.973] |  :  .  |  :  isFutureResolved() ... done
[10:52:06.961] MultisessionFuture:
[10:52:06.961] Label: ‘future_lapply-1’
[10:52:06.961] Expression:
[10:52:06.961] {
[10:52:06.961]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:06.961]     "# expression in do.call(), because function called uses '...'  "
[10:52:06.961]     "# as a global variable                                         "
[10:52:06.961]     do.call(function(...) {
[10:52:06.961]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:06.961]         "# without having an '...' argument. This means '...' is treated"
[10:52:06.961]         "# as a global variable. This may happen when FUN() is an       "
[10:52:06.961]         "# anonymous function.                                          "
[10:52:06.961]         "#                                                              "
[10:52:06.961]         "# If an anonymous function, we will make sure to restore the   "
[10:52:06.961]         "# function environment of FUN() to the calling environment.    "
[10:52:06.961]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:06.961]         "# global environment, which is where globals are written.      "
[10:52:06.961]         penv <- env <- environment(...future.FUN)
[10:52:06.961]         repeat {
[10:52:06.961]             if (identical(env, globalenv()) || identical(env, 
[10:52:06.961]                 emptyenv())) 
[10:52:06.961]                 break
[10:52:06.961]             penv <- env
[10:52:06.961]             env <- parent.env(env)
[10:52:06.961]         }
[10:52:06.961]         if (identical(penv, globalenv())) {
[10:52:06.961]             environment(...future.FUN) <- environment()
[10:52:06.961]         }
[10:52:06.961]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:06.961]             !isNamespace(penv)) {
[10:52:06.961]             parent.env(penv) <- environment()
[10:52:06.961]         }
[10:52:06.961]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:06.961]         {
[10:52:06.961]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:06.961]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:06.961]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:06.961]                 on.exit(options(oopts), add = TRUE)
[10:52:06.961]             }
[10:52:06.961]             {
[10:52:06.961]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:06.961]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:06.961]                   ...future.FUN(...future.X_jj, ...)
[10:52:06.961]                 })
[10:52:06.961]             }
[10:52:06.961]         }
[10:52:06.961]     }, args = future.call.arguments)
[10:52:06.961] }
[10:52:06.961] Lazy evaluation: FALSE
[10:52:06.961] Asynchronous evaluation: TRUE
[10:52:06.961] Local evaluation: TRUE
[10:52:06.961] Environment: R_GlobalEnv
[10:52:06.961] Capture standard output: NA
[10:52:06.961] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:06.961] Immediate condition classes: ‘immediateCondition’
[10:52:06.961] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:06.961] Packages: <none>
[10:52:06.961] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:06.961] Resolved: FALSE
[10:52:06.961] Value: <not collected>
[10:52:06.961] Conditions captured: <none>
[10:52:06.961] Early signaling: FALSE
[10:52:06.961] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:06.961] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:06.973] Chunk #1 of 2 ... DONE
[10:52:06.974] Chunk #2 of 2 ...
[10:52:06.974]  - Finding globals in 'X' for chunk #2 ...
[10:52:06.974] |  :  .  |  :  getGlobalsAndPackages() ...
[10:52:06.974] |  :  .  |  :  .  Searching for globals ...
[10:52:06.974] |  :  .  |  :  .  |  globals found: [0] 
[10:52:06.974] |  :  .  |  :  .  Searching for globals ... DONE
[10:52:06.974] |  :  .  |  :  .  globals: [0] <none>
[10:52:06.974] |  :  .  |  :  .  packages: [0] <none>
[10:52:06.975] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:52:06.975]    + additional globals found: [n=0] 
[10:52:06.975]    + additional namespaces needed: [n=0] 
[10:52:06.975]  - Finding globals in 'X' for chunk #2 ... DONE
[10:52:06.975]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:06.975]  - seeds: <none>
[10:52:06.975]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.975] |  :  .  |  :  getGlobalsAndPackages() ...
[10:52:06.975] |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.976] |  :  .  |  :  .  Resolving globals: FALSE
[10:52:06.976] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:52:06.976] |  :  .  |  :  .  |  {
[10:52:06.976] |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:06.976] |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:52:06.976] |  :  .  |  :  .  |      "# as a global variable                                         "
[10:52:06.976] |  :  .  |  :  .  |      do.call(function(...) {
[10:52:06.976] |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:06.976] |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:52:06.976] |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:52:06.976] |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:52:06.976] |  :  .  |  :  .  |          "#                                                              "
[10:52:06.976] |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:52:06.976] |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:52:06.976] |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:52:06.976] |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:52:06.976] |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:52:06.976] |  :  .  |  :  .  |          repeat {
[10:52:06.976] |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:52:06.976] |  :  .  |  :  .  |                  emptyenv())) 
[10:52:06.976] |  :  .  |  :  .  |                  break
[10:52:06.976] |  :  .  |  :  .  |              penv <- env
[10:52:06.976] |  :  .  |  :  .  |              env <- parent.env(env)
[10:52:06.976] |  :  .  |  :  .  |          }
[10:52:06.976] |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:52:06.976] |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:52:06.976] |  :  .  |  :  .  |          }
[10:52:06.976] |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:06.976] |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:52:06.976] |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:52:06.976] |  :  .  |  :  .  |          }
[10:52:06.976] |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:52:06.976] |  :  .  |  :  .  |          {
[10:52:06.976] |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:06.976] |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:06.976] |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:06.976] |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:52:06.976] |  :  .  |  :  .  |              }
[10:52:06.976] |  :  .  |  :  .  |              {
[10:52:06.976] |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:06.976] |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:06.976] |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:52:06.976] |  :  .  |  :  .  |                  })
[10:52:06.976] |  :  .  |  :  .  |              }
[10:52:06.976] |  :  .  |  :  .  |          }
[10:52:06.976] |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:52:06.976] |  :  .  |  :  .  |  }
[10:52:06.976] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:52:06.976] |  :  .  |  :  .  Search for packages associated with the globals ...
[10:52:06.977] |  :  .  |  :  .  |  Packages associated with globals: [0] 
[10:52:06.977] |  :  .  |  :  .  |  Packages: [0] 
[10:52:06.977] |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:52:06.977] |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:52:06.977] |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:06.977] |  :  .  |  :  .  packages: [0] 
[10:52:06.977] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:52:06.978] |  :  .  |  :  run() for Future (‘Future’) ...
[10:52:06.978] |  :  .  |  :  .  state: ‘created’
[10:52:06.978] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:06.978] |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:06.978] |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:52:06.978] |  :  .  |  :  .  |  Launching futures ...
[10:52:06.978] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:52:06.978] |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:52:06.978] |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:06.980] |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:06.980] |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:52:06.980] |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:52:06.980] |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:52:06.981] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:52:06.981] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:06.981] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:06.981] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:06.981] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:06.981] |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:52:06.981] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:52:06.981] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:06.981] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:06.982] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:06.982] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:06.982] |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:52:06.982] |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:52:07.061] |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:52:07.062] |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:52:07.062] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:07.062] |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:52:07.062] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:52:07.062] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:52:07.062] |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:52:07.063] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:07.063] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:52:07.063] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:52:07.063] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:52:07.063] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:52:07.063] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:52:07.063] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:52:07.063] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:52:07.063] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:07.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:52:07.064] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:07.064] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:52:07.064] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:52:07.064] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:52:07.064] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:07.064] |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:52:07.064] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:52:07.065] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:07.065] |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:52:07.065] |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:52:07.065] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:52:07.065] |  :  .  |  :  .  |  :  Launching futures ... done
[10:52:07.065] |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:07.065] |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:52:07.065] |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:52:07.065] Created future:
[10:52:07.066] |  :  .  |  :  .  isFutureResolved() ...
[10:52:07.067] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:07.067] |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:07.067] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:07.077] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:07.065] MultisessionFuture:
[10:52:07.065] Label: ‘future_lapply-2’
[10:52:07.065] Expression:
[10:52:07.065] {
[10:52:07.065]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:52:07.065]     "# expression in do.call(), because function called uses '...'  "
[10:52:07.065]     "# as a global variable                                         "
[10:52:07.065]     do.call(function(...) {
[10:52:07.065]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:52:07.065]         "# without having an '...' argument. This means '...' is treated"
[10:52:07.065]         "# as a global variable. This may happen when FUN() is an       "
[10:52:07.065]         "# anonymous function.                                          "
[10:52:07.065]         "#                                                              "
[10:52:07.065]         "# If an anonymous function, we will make sure to restore the   "
[10:52:07.065]         "# function environment of FUN() to the calling environment.    "
[10:52:07.065]         "# We assume FUN() an anonymous function if it lives in the     "
[10:52:07.065]         "# global environment, which is where globals are written.      "
[10:52:07.065]         penv <- env <- environment(...future.FUN)
[10:52:07.065]         repeat {
[10:52:07.065]             if (identical(env, globalenv()) || identical(env, 
[10:52:07.065]                 emptyenv())) 
[10:52:07.065]                 break
[10:52:07.065]             penv <- env
[10:52:07.065]             env <- parent.env(env)
[10:52:07.065]         }
[10:52:07.065]         if (identical(penv, globalenv())) {
[10:52:07.065]             environment(...future.FUN) <- environment()
[10:52:07.065]         }
[10:52:07.065]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:52:07.065]             !isNamespace(penv)) {
[10:52:07.065]             parent.env(penv) <- environment()
[10:52:07.065]         }
[10:52:07.065]         rm(list = c("env", "penv"), inherits = FALSE)
[10:52:07.065]         {
[10:52:07.065]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:07.065]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:07.065]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:07.065]                 on.exit(options(oopts), add = TRUE)
[10:52:07.065]             }
[10:52:07.065]             {
[10:52:07.065]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:52:07.065]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:52:07.065]                   ...future.FUN(...future.X_jj, ...)
[10:52:07.065]                 })
[10:52:07.065]             }
[10:52:07.065]         }
[10:52:07.065]     }, args = future.call.arguments)
[10:52:07.065] }
[10:52:07.065] Lazy evaluation: FALSE
[10:52:07.065] Asynchronous evaluation: TRUE
[10:52:07.065] Local evaluation: TRUE
[10:52:07.065] Environment: R_GlobalEnv
[10:52:07.065] Capture standard output: NA
[10:52:07.065] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:07.065] Immediate condition classes: ‘immediateCondition’
[10:52:07.065] Globals: 5 objects totaling 1.01 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:07.065] Packages: <none>
[10:52:07.065] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:07.065] Resolved: FALSE
[10:52:07.065] Value: <not collected>
[10:52:07.065] Conditions captured: <none>
[10:52:07.065] Early signaling: FALSE
[10:52:07.065] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:07.065] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:07.078] Chunk #2 of 2 ... DONE
[10:52:07.078] Launching 2 futures (chunks) ... DONE
[10:52:07.078] Resolving 2 futures (chunks) ...
[10:52:07.078] |  :  .  |  :  .  value() on list ...
[10:52:07.078] |  :  .  |  :  .  |  recursive: 0
[10:52:07.078] |  :  .  |  :  .  |  length: 2
[10:52:07.079] |  :  .  |  :  .  |  
[10:52:07.079] |  :  .  |  :  .  |  Number of remaining objects: 2
[10:52:07.079] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.079] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.079] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.079] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.079] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.080] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.090] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.090] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.090] |  :  .  |  :  .  |  checking value #2 ...
[10:52:07.090] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.090] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.091] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.091] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:07.091] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.101] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.101] |  :  .  |  :  .  |  checking value #2 ... done
[10:52:07.112] |  :  .  |  :  .  |  Number of remaining objects: 2
[10:52:07.112] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.112] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.112] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.112] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.112] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.113] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.123] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.123] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.123] |  :  .  |  :  .  |  checking value #2 ...
[10:52:07.123] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.123] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.124] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.124] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:07.124] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.124] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:52:07.124] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:07.124] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:52:07.125] |  :  .  |  :  .  |  :  .  |  received data:
[10:52:07.125] |  :  .  |  :  .  |  :  .  |  List of 5
[10:52:07.125] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. ..$ : int 0
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : NULL
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:07"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:07"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "be79b08faeced682a2aab9c61d6391c7"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66994
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:52:07.125] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:52:07.125] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:52:07.125] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:07.125] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:52:07.137] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:52:07.137] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:07.137] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #2
[10:52:07.137] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:07.137] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:07.137] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:52:07.137] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:07.138] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:07.138] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:07.138] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:07.138] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.138] |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:52:07.138] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:07.138] |  :  .  |  :  .  |  :  .  nx: 2
[10:52:07.138] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:52:07.138] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:52:07.138] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:52:07.138] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:52:07.139] |  :  .  |  :  .  |  :  .  force: TRUE
[10:52:07.139] |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:07.139] |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:52:07.139] |  :  .  |  :  .  |  :  .  until=1
[10:52:07.139] |  :  .  |  :  .  |  :  .  relaying element #1
[10:52:07.139] |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:07.139] |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:07.139] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:07.139] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:52:07.139] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.139] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.140] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.140] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.140] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.140] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.140] |  :  .  |  :  .  |  :  .  value: <list>
[10:52:07.140] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:52:07.140] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:07.140] |  :  .  |  :  .  |  :  .  nx: 2
[10:52:07.140] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:52:07.140] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:52:07.140] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:52:07.141] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:52:07.141] |  :  .  |  :  .  |  :  .  force: TRUE
[10:52:07.141] |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:07.141] |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:07.141] |  :  .  |  :  .  |  :  .  until=1
[10:52:07.141] |  :  .  |  :  .  |  :  .  relaying element #1
[10:52:07.141] |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:07.141] |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:07.141] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:07.141] |  :  .  |  :  .  |  :  length: 1 (resolved future 2)
[10:52:07.141] |  :  .  |  :  .  |  checking value #2 ... done
[10:52:07.152] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.152] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.152] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.152] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.152] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.152] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.153] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.163] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.163] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.173] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.173] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.174] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.174] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.174] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.174] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.174] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.185] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.185] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.195] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.195] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.195] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.195] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.196] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.196] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.196] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.206] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.206] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.217] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.217] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.217] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.217] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.217] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.217] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.218] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.228] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.228] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.238] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.238] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.238] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.239] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.239] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.239] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.239] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.250] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.250] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.260] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.260] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.260] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.260] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.261] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.261] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.261] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.271] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.271] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.281] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.281] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.282] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.282] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.282] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.282] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.283] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.293] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.293] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.303] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.303] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.303] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.303] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.304] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.304] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.304] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.314] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.315] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.325] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.325] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.325] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.325] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.325] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.326] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.326] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.336] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.336] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.346] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.346] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.347] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.347] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.347] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.347] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.347] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.358] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.358] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.368] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.368] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.368] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.368] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.369] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.369] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.369] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.379] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.379] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.390] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.390] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.390] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.390] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.390] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.391] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.391] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.401] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.401] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.411] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.412] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.412] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.412] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.412] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.412] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.413] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.423] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.423] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.433] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.434] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.434] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.434] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.434] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.434] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.435] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.445] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.445] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.455] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.455] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.456] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.456] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.456] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.456] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.456] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.467] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.467] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.477] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.477] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.477] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.478] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.478] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.478] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.478] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.489] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.489] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.499] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:07.499] |  :  .  |  :  .  |  checking value #1 ...
[10:52:07.499] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:07.500] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.500] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.500] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.500] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.504] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:52:07.504] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:07.505] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:52:07.505] |  :  .  |  :  .  |  :  .  |  received data:
[10:52:07.505] |  :  .  |  :  .  |  :  .  |  List of 5
[10:52:07.505] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. ..$ : int 1
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : NULL
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:07"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:07"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "48c1991b2558e157e5b0d07703630534"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66993
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:52:07.505] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:52:07.505] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.504 0 0
[10:52:07.505] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:07.505] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:52:07.515] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:52:07.515] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:07.515] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:52:07.515] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:52:07.516] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:07.516] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:52:07.516] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:07.516] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:07.516] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:07.516] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:07.516] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.516] |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:52:07.516] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:07.516] |  :  .  |  :  .  |  :  .  nx: 2
[10:52:07.517] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:52:07.517] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:52:07.517] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:52:07.517] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:52:07.517] |  :  .  |  :  .  |  :  .  force: TRUE
[10:52:07.517] |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:07.517] |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:07.517] |  :  .  |  :  .  |  :  .  until=1
[10:52:07.517] |  :  .  |  :  .  |  :  .  relaying element #1
[10:52:07.517] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.517] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.518] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.518] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.518] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.518] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.518] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.518] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.518] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.518] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.518] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.518] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.518] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:07.519] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:07.519] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:07.519] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:52:07.519] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.519] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.519] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.519] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.519] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.519] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.519] |  :  .  |  :  .  |  :  .  value: <list>
[10:52:07.520] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:52:07.520] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:07.520] |  :  .  |  :  .  |  :  .  nx: 2
[10:52:07.520] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:52:07.520] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:52:07.520] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:52:07.520] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:52:07.520] |  :  .  |  :  .  |  :  .  force: TRUE
[10:52:07.520] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:07.520] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:07.520] |  :  .  |  :  .  |  :  .  until=2
[10:52:07.520] |  :  .  |  :  .  |  :  .  relaying element #2
[10:52:07.521] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.521] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.521] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.521] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.521] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.521] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.521] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.521] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.521] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.521] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.521] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.522] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.522] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:07.522] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:07.522] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:07.522] |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:52:07.522] |  :  .  |  :  .  |  checking value #1 ... done
[10:52:07.522] |  :  .  |  :  .  |  Relaying remaining futures ...
[10:52:07.522] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:07.522] |  :  .  |  :  .  |  :  .  nx: 2
[10:52:07.522] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:52:07.523] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:52:07.523] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:52:07.523] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:52:07.523] |  :  .  |  :  .  |  :  .  force: TRUE
[10:52:07.523] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:07.523] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:07.523] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:07.523] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:07.523] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:07.523] |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:52:07.523] |  :  .  |  :  .  value() on list ... done
[10:52:07.524]  - Number of value chunks collected: 2
[10:52:07.524] Resolving 2 futures (chunks) ... DONE
[10:52:07.524] Reducing values from 2 chunks ...
[10:52:07.524]  - Number of values collected after concatenation: 2
[10:52:07.524]  - Number of values expected: 2
[10:52:07.524] Reducing values from 2 chunks ... DONE
[10:52:07.524] future_lapply() ... DONE
* future_lapply(x, ..., future.stdout = NA) ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ...
[10:52:07.524] future_mapply() ...
[10:52:07.525] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:07.525] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:07.525] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:07.525] Number of chunks: 2
[10:52:07.525] getGlobalsAndPackagesXApply() ...
[10:52:07.525]  - future.globals: TRUE
[10:52:07.525] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:52:07.526] |  :  .  |  :  .  |  Searching for globals ...
[10:52:07.527] |  :  .  |  :  .  |  :  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:52:07.527] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:52:07.527] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:52:07.528] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:52:07.528] |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:52:07.528] |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:52:07.528] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:52:07.528] |  :  .  |  :  .  |  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:52:07.529] |  :  .  |  :  .  |  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:52:07.529] |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:52:07.529] |  :  .  |  :  .  |  globals: [1] ‘FUN’
[10:52:07.529] |  :  .  |  :  .  |  packages: [0] 
[10:52:07.529] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:52:07.529]  - globals found/used: [n=1] ‘FUN’
[10:52:07.529]  - needed namespaces: [n=0] 
[10:52:07.529] Finding globals ... DONE
[10:52:07.530] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:52:07.530] List of 2
[10:52:07.530]  $ ...future.FUN:function (x, y)  
[10:52:07.530]  $ MoreArgs     : NULL
[10:52:07.530]  - attr(*, "where")=List of 2
[10:52:07.530]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:07.530]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:52:07.530]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:07.530]  - attr(*, "resolved")= logi FALSE
[10:52:07.530]  - attr(*, "total_size")= num NA
[10:52:07.532] Packages to be attached in all futures: [n=0] 
[10:52:07.532] getGlobalsAndPackagesXApply() ... DONE
[10:52:07.533] Number of futures (= number of chunks): 2
[10:52:07.533] Launching 2 futures (chunks) ...
[10:52:07.533] Chunk #1 of 2 ...
[10:52:07.533]  - Finding globals in '...' for chunk #1 ...
[10:52:07.533] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:52:07.533] |  :  .  |  :  .  |  Searching for globals ...
[10:52:07.533] |  :  .  |  :  .  |  :  globals found: [0] 
[10:52:07.534] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:52:07.534] |  :  .  |  :  .  |  globals: [0] <none>
[10:52:07.534] |  :  .  |  :  .  |  packages: [0] <none>
[10:52:07.534] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:52:07.534]    + additional globals found: [n=0] 
[10:52:07.534]    + additional namespaces needed: [n=0] 
[10:52:07.534]  - Finding globals in '...' for chunk #1 ... DONE
[10:52:07.534]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:07.534]  - seeds: <none>
[10:52:07.534]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:07.535] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:52:07.535] |  :  .  |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:07.535] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:52:07.535] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:52:07.535] |  :  .  |  :  .  |  :  Packages associated with globals: [0] 
[10:52:07.535] |  :  .  |  :  .  |  :  Packages: [0] 
[10:52:07.535] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:52:07.535] |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:52:07.536] |  :  .  |  :  .  |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:07.536] |  :  .  |  :  .  |  packages: [0] 
[10:52:07.536] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:52:07.536] |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:52:07.536] |  :  .  |  :  .  |  state: ‘created’
[10:52:07.536] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:07.536] |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:07.536] |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:52:07.537] |  :  .  |  :  .  |  :  Launching futures ...
[10:52:07.537] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:52:07.537] |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:52:07.537] |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:07.538] |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:07.539] |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:52:07.539] |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:52:07.539] |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:52:07.539] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:52:07.539] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:07.539] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:52:07.539] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:52:07.539] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:07.539] |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:52:07.539] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:52:07.540] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:07.540] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:07.540] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:52:07.540] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:07.540] |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:52:07.540] |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:52:07.581] |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:52:07.581] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:52:07.581] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.581] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:52:07.581] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:52:07.582] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:52:07.582] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:52:07.582] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.582] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:52:07.582] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:52:07.582] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:52:07.582] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:07.583] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:07.583] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:07.583] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:52:07.583] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:07.583] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:07.583] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:07.583] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:07.583] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:07.583] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:52:07.584] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:07.584] |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:52:07.584] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:07.584] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:07.584] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:52:07.584] |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:52:07.584] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:52:07.584] |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:52:07.585] |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:07.585] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:52:07.585] |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:52:07.585] Created future:
[10:52:07.586] |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.586] |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.586] |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.586] |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.597] |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.585] MultisessionFuture:
[10:52:07.585] Label: ‘future_mapply-1’
[10:52:07.585] Expression:
[10:52:07.585] {
[10:52:07.585]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:07.585]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:07.585]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:07.585]         on.exit(options(oopts), add = TRUE)
[10:52:07.585]     }
[10:52:07.585]     {
[10:52:07.585]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:07.585]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:07.585]         do.call(mapply, args = args)
[10:52:07.585]     }
[10:52:07.585] }
[10:52:07.585] Lazy evaluation: FALSE
[10:52:07.585] Asynchronous evaluation: TRUE
[10:52:07.585] Local evaluation: TRUE
[10:52:07.585] Environment: R_GlobalEnv
[10:52:07.585] Capture standard output: FALSE
[10:52:07.585] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:07.585] Immediate condition classes: ‘immediateCondition’
[10:52:07.585] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:07.585] Packages: <none>
[10:52:07.585] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:07.585] Resolved: FALSE
[10:52:07.585] Value: <not collected>
[10:52:07.585] Conditions captured: <none>
[10:52:07.585] Early signaling: FALSE
[10:52:07.585] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:07.585] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:07.597] Chunk #1 of 2 ... DONE
[10:52:07.597] Chunk #2 of 2 ...
[10:52:07.598]  - Finding globals in '...' for chunk #2 ...
[10:52:07.598] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:52:07.600] |  :  .  |  :  .  |  :  Searching for globals ...
[10:52:07.600] |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:52:07.600] |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:52:07.600] |  :  .  |  :  .  |  :  globals: [0] <none>
[10:52:07.600] |  :  .  |  :  .  |  :  packages: [0] <none>
[10:52:07.600] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:52:07.600]    + additional globals found: [n=0] 
[10:52:07.600]    + additional namespaces needed: [n=0] 
[10:52:07.601]  - Finding globals in '...' for chunk #2 ... DONE
[10:52:07.601]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:07.601]  - seeds: <none>
[10:52:07.601]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:07.601] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:52:07.601] |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:07.601] |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:52:07.601] |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:52:07.601] |  :  .  |  :  .  |  :  .  Packages associated with globals: [0] 
[10:52:07.602] |  :  .  |  :  .  |  :  .  Packages: [0] 
[10:52:07.602] |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:52:07.602] |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:52:07.602] |  :  .  |  :  .  |  :  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:07.602] |  :  .  |  :  .  |  :  packages: [0] 
[10:52:07.602] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:52:07.602] |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:52:07.602] |  :  .  |  :  .  |  :  state: ‘created’
[10:52:07.603] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:07.603] |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:07.603] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:52:07.603] |  :  .  |  :  .  |  :  .  Launching futures ...
[10:52:07.603] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:52:07.603] |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:52:07.603] |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:07.605] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:07.605] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:52:07.605] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:52:07.605] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:52:07.605] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:52:07.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:07.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:07.605] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:07.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:07.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:52:07.606] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:52:07.606] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:07.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:52:07.606] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:07.606] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:07.606] |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 2
[10:52:07.606] |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:52:07.687] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:52:07.687] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:52:07.688] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:07.688] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:52:07.688] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:52:07.688] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:52:07.688] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:52:07.689] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:07.689] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:52:07.689] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:52:07.689] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:07.689] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:52:07.689] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:52:07.689] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:52:07.689] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:52:07.689] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:07.689] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:07.690] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:07.690] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:07.690] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:52:07.690] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:52:07.690] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:07.690] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:52:07.690] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:52:07.691] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:07.691] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:52:07.691] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:52:07.691] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:52:07.691] |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:52:07.691] |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:07.691] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:52:07.691] |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:52:07.691] Created future:
[10:52:07.692] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:07.692] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:07.693] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:07.693] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:07.703] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:07.691] MultisessionFuture:
[10:52:07.691] Label: ‘future_mapply-2’
[10:52:07.691] Expression:
[10:52:07.691] {
[10:52:07.691]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:07.691]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:07.691]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:07.691]         on.exit(options(oopts), add = TRUE)
[10:52:07.691]     }
[10:52:07.691]     {
[10:52:07.691]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:07.691]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:07.691]         do.call(mapply, args = args)
[10:52:07.691]     }
[10:52:07.691] }
[10:52:07.691] Lazy evaluation: FALSE
[10:52:07.691] Asynchronous evaluation: TRUE
[10:52:07.691] Local evaluation: TRUE
[10:52:07.691] Environment: R_GlobalEnv
[10:52:07.691] Capture standard output: FALSE
[10:52:07.691] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:07.691] Immediate condition classes: ‘immediateCondition’
[10:52:07.691] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:07.691] Packages: <none>
[10:52:07.691] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:07.691] Resolved: FALSE
[10:52:07.691] Value: <not collected>
[10:52:07.691] Conditions captured: <none>
[10:52:07.691] Early signaling: FALSE
[10:52:07.691] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:07.691] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:07.704] Chunk #2 of 2 ... DONE
[10:52:07.704] Launching 2 futures (chunks) ... DONE
[10:52:07.704] Resolving 2 futures (chunks) ...
[10:52:07.704] |  :  .  |  :  .  |  :  value() on list ...
[10:52:07.704] |  :  .  |  :  .  |  :  .  recursive: 0
[10:52:07.704] |  :  .  |  :  .  |  :  .  length: 2
[10:52:07.704] |  :  .  |  :  .  |  :  .  
[10:52:07.704] |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:52:07.704] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.705] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.705] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.705] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.705] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.705] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.715] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.716] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.716] |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:52:07.716] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.716] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.716] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.716] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:52:07.717] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.727] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.727] |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:52:07.737] |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:52:07.737] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.737] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.738] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.738] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.738] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.738] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.749] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.749] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.749] |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:52:07.749] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.749] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.749] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ :List of 2
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ x: int 0
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ y: int 1
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : NULL
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:07"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:07"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "be79b08faeced682a2aab9c61d6391c7"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 66994
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:07.750] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:52:07.761] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:52:07.761] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:07.762] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #2
[10:52:07.762] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:07.762] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:07.762] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:52:07.762] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:07.762] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:07.762] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:07.762] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:07.762] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.762] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  until=1
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:52:07.763] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:52:07.764] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, TRUE
[10:52:07.764] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=2) ... done
[10:52:07.764] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:52:07.764] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:07.764] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:07.764] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:07.764] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:07.764] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:07.764] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:07.764] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, TRUE
[10:52:07.765] |  :  .  |  :  .  |  :  .  |  :  until=1
[10:52:07.766] |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:52:07.766] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:52:07.766] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, TRUE
[10:52:07.766] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=2) ... done
[10:52:07.766] |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 2)
[10:52:07.766] |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:52:07.776] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.776] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.776] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.777] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.777] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.777] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.777] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.788] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.788] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.798] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.798] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.798] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.798] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.799] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.799] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.799] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.809] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.809] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.819] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.820] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.820] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.820] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.820] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.820] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.821] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.831] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.831] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.841] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.841] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.841] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.842] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.842] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.842] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.842] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.852] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.853] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.863] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.863] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.863] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.863] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.864] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.864] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.864] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.874] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.874] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.884] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.885] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.885] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.885] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.885] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.885] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.886] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.896] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.896] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.906] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.906] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.906] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.907] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.907] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.907] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.907] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.917] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.918] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.928] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.928] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.928] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.928] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.928] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.929] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.929] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.939] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.939] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.949] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.949] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.950] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.950] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.950] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.950] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.951] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.961] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.961] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.971] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.971] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.971] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.971] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.972] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.972] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.972] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:07.982] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:07.982] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:07.993] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:07.993] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:07.993] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:07.993] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:07.993] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:07.994] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:07.994] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:08.004] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:08.004] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:08.014] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:08.014] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:08.015] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:08.015] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:08.015] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:08.015] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:08.015] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:08.026] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:08.026] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:08.036] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:08.036] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:08.036] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:08.036] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:08.037] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:08.037] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:08.037] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:08.047] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:08.047] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:08.058] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:08.058] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:08.058] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:08.058] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:08.059] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:08.059] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:08.059] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:08.069] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:08.069] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:08.080] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:08.080] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:08.080] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:08.080] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:08.080] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:08.081] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:08.081] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:08.091] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:08.091] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:08.102] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:08.102] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:08.102] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:08.102] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:08.102] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:08.103] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:08.103] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:08.113] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:08.113] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:08.124] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:52:08.124] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:52:08.124] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:52:08.124] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:08.124] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:08.124] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:08.125] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:08.128] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ :List of 2
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ x: int 1
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ y: int 0
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : NULL
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:07"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:08"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "48c1991b2558e157e5b0d07703630534"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 66993
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.504 0 0
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:08.129] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:52:08.140] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:52:08.140] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:08.140] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:52:08.140] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:52:08.140] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:08.140] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:52:08.141] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:52:08.142] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:52:08.142] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:52:08.142] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:52:08.142] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, TRUE
[10:52:08.142] |  :  .  |  :  .  |  :  .  |  :  until=1
[10:52:08.142] |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:52:08.142] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.142] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.142] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.144] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.144] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.144] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:52:08.145] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:52:08.146] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.147] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.148] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.148] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.148] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.148] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.148] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.148] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.148] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.148] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:52:08.148] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:52:08.148] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:08.149] |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:52:08.149] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:52:08.149] |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:52:08.149] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:52:08.149] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:52:08.149] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:52:08.149] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:52:08.149] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:52:08.149] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:52:08.149] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:52:08.149] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:52:08.149] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:08.150] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:52:08.150] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:52:08.150] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:52:08.150] |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:52:08.150] |  :  .  |  :  .  |  :  value() on list ... done
[10:52:08.150]  - Number of value chunks collected: 2
[10:52:08.150] Resolving 2 futures (chunks) ... DONE
[10:52:08.150] Reducing values from 2 chunks ...
[10:52:08.150]  - Number of values collected after concatenation: 2
[10:52:08.150]  - Number of values expected: 2
[10:52:08.150] Reducing values from 2 chunks ... DONE
[10:52:08.151] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ...
[10:52:08.151] future_mapply() ...
[10:52:08.151] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:08.151] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:08.151] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:08.152] Number of chunks: 2
[10:52:08.152] getGlobalsAndPackagesXApply() ...
[10:52:08.152]  - future.globals: TRUE
[10:52:08.152] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:52:08.152] |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:52:08.154] |  :  .  |  :  .  |  :  .  |  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:52:08.154] |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:52:08.154] |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:52:08.154] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:52:08.154] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:52:08.155] |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:52:08.155] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:52:08.155] |  :  .  |  :  .  |  :  .  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:52:08.155] |  :  .  |  :  .  |  :  .  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:52:08.155] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:52:08.156] |  :  .  |  :  .  |  :  .  globals: [1] ‘FUN’
[10:52:08.156] |  :  .  |  :  .  |  :  .  packages: [0] 
[10:52:08.156] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:52:08.156]  - globals found/used: [n=1] ‘FUN’
[10:52:08.156]  - needed namespaces: [n=0] 
[10:52:08.156] Finding globals ... DONE
[10:52:08.156] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:52:08.156] List of 2
[10:52:08.156]  $ ...future.FUN:function (x, y)  
[10:52:08.156]  $ MoreArgs     : NULL
[10:52:08.156]  - attr(*, "where")=List of 2
[10:52:08.156]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:08.156]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:52:08.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:08.156]  - attr(*, "resolved")= logi FALSE
[10:52:08.156]  - attr(*, "total_size")= num NA
[10:52:08.159] Packages to be attached in all futures: [n=0] 
[10:52:08.159] getGlobalsAndPackagesXApply() ... DONE
[10:52:08.159] Number of futures (= number of chunks): 2
[10:52:08.159] Launching 2 futures (chunks) ...
[10:52:08.159] Chunk #1 of 2 ...
[10:52:08.160]  - Finding globals in '...' for chunk #1 ...
[10:52:08.160] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:52:08.160] |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:52:08.160] |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:52:08.160] |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:52:08.160] |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:52:08.160] |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:52:08.160] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:52:08.161]    + additional globals found: [n=0] 
[10:52:08.161]    + additional namespaces needed: [n=0] 
[10:52:08.161]  - Finding globals in '...' for chunk #1 ... DONE
[10:52:08.161]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:08.161]  - seeds: <none>
[10:52:08.161]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.161] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:52:08.161] |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.161] |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:52:08.161] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:52:08.162] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [0] 
[10:52:08.162] |  :  .  |  :  .  |  :  .  |  Packages: [0] 
[10:52:08.162] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:52:08.162] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:52:08.162] |  :  .  |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.162] |  :  .  |  :  .  |  :  .  packages: [0] 
[10:52:08.162] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:52:08.163] |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:52:08.163] |  :  .  |  :  .  |  :  .  state: ‘created’
[10:52:08.163] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:08.163] |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:08.163] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:52:08.163] |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:52:08.163] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:52:08.163] |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:52:08.164] |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:08.165] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:08.165] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:52:08.165] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:52:08.165] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:52:08.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:52:08.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:08.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:08.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:52:08.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:08.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:52:08.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:52:08.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:08.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:08.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:52:08.167] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:08.167] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:52:08.167] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:52:08.208] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:52:08.208] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:52:08.208] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.208] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:52:08.208] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:52:08.209] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:52:08.209] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:52:08.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:52:08.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:52:08.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:52:08.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:52:08.209] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:52:08.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:52:08.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:52:08.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:08.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:52:08.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:08.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:52:08.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:52:08.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:52:08.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:08.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:52:08.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:08.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:08.211] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:52:08.211] |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:52:08.211] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:52:08.211] |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:52:08.211] |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:08.212] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:52:08.212] |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:52:08.212] Created future:
[10:52:08.213] |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.213] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.213] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.213] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.224] |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.212] MultisessionFuture:
[10:52:08.212] Label: ‘future_mapply-1’
[10:52:08.212] Expression:
[10:52:08.212] {
[10:52:08.212]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:08.212]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:08.212]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:08.212]         on.exit(options(oopts), add = TRUE)
[10:52:08.212]     }
[10:52:08.212]     {
[10:52:08.212]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:08.212]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:08.212]         do.call(mapply, args = args)
[10:52:08.212]     }
[10:52:08.212] }
[10:52:08.212] Lazy evaluation: FALSE
[10:52:08.212] Asynchronous evaluation: TRUE
[10:52:08.212] Local evaluation: TRUE
[10:52:08.212] Environment: R_GlobalEnv
[10:52:08.212] Capture standard output: TRUE
[10:52:08.212] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:08.212] Immediate condition classes: ‘immediateCondition’
[10:52:08.212] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:08.212] Packages: <none>
[10:52:08.212] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:08.212] Resolved: FALSE
[10:52:08.212] Value: <not collected>
[10:52:08.212] Conditions captured: <none>
[10:52:08.212] Early signaling: FALSE
[10:52:08.212] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:08.212] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:08.224] Chunk #1 of 2 ... DONE
[10:52:08.224] Chunk #2 of 2 ...
[10:52:08.224]  - Finding globals in '...' for chunk #2 ...
[10:52:08.224] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:52:08.225] |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:52:08.225] |  :  .  |  :  .  |  :  .  |  :  globals found: [0] 
[10:52:08.225] |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:52:08.225] |  :  .  |  :  .  |  :  .  |  globals: [0] <none>
[10:52:08.225] |  :  .  |  :  .  |  :  .  |  packages: [0] <none>
[10:52:08.225] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:52:08.225]    + additional globals found: [n=0] 
[10:52:08.225]    + additional namespaces needed: [n=0] 
[10:52:08.226]  - Finding globals in '...' for chunk #2 ... DONE
[10:52:08.226]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:08.226]  - seeds: <none>
[10:52:08.226]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.226] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:52:08.226] |  :  .  |  :  .  |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.226] |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:52:08.226] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:52:08.226] |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [0] 
[10:52:08.227] |  :  .  |  :  .  |  :  .  |  :  Packages: [0] 
[10:52:08.227] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:52:08.227] |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:52:08.227] |  :  .  |  :  .  |  :  .  |  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.227] |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:52:08.227] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:52:08.227] |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:52:08.228] |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:52:08.228] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:08.228] |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:08.228] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:52:08.228] |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:52:08.228] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:52:08.228] |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:52:08.228] |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:08.230] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:08.230] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:52:08.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:52:08.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:52:08.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:52:08.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:08.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:52:08.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:08.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:08.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:52:08.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:52:08.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:08.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:08.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:08.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:08.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:52:08.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:52:08.311] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:52:08.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:52:08.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:52:08.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:52:08.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:52:08.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:52:08.312] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:52:08.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:52:08.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:52:08.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:52:08.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:52:08.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:08.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:08.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:08.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:52:08.313] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:08.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:08.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:08.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:08.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:08.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:52:08.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:08.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:52:08.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:52:08.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:08.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:52:08.315] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:52:08.315] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:52:08.315] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:52:08.315] |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:08.315] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:52:08.315] |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:52:08.315] Created future:
[10:52:08.316] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:08.316] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:08.317] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:52:08.317] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:08.327] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:08.315] MultisessionFuture:
[10:52:08.315] Label: ‘future_mapply-2’
[10:52:08.315] Expression:
[10:52:08.315] {
[10:52:08.315]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:08.315]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:08.315]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:08.315]         on.exit(options(oopts), add = TRUE)
[10:52:08.315]     }
[10:52:08.315]     {
[10:52:08.315]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:08.315]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:08.315]         do.call(mapply, args = args)
[10:52:08.315]     }
[10:52:08.315] }
[10:52:08.315] Lazy evaluation: FALSE
[10:52:08.315] Asynchronous evaluation: TRUE
[10:52:08.315] Local evaluation: TRUE
[10:52:08.315] Environment: R_GlobalEnv
[10:52:08.315] Capture standard output: TRUE
[10:52:08.315] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:08.315] Immediate condition classes: ‘immediateCondition’
[10:52:08.315] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:08.315] Packages: <none>
[10:52:08.315] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:08.315] Resolved: FALSE
[10:52:08.315] Value: <not collected>
[10:52:08.315] Conditions captured: <none>
[10:52:08.315] Early signaling: FALSE
[10:52:08.315] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:08.315] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:08.328] Chunk #2 of 2 ... DONE
[10:52:08.328] Launching 2 futures (chunks) ... DONE
[10:52:08.328] Resolving 2 futures (chunks) ...
[10:52:08.328] |  :  .  |  :  .  |  :  .  |  value() on list ...
[10:52:08.328] |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:52:08.328] |  :  .  |  :  .  |  :  .  |  :  length: 2
[10:52:08.328] |  :  .  |  :  .  |  :  .  |  :  
[10:52:08.328] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 2
[10:52:08.329] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.329] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.329] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.329] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.329] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.340] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.340] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.340] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:52:08.340] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.340] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.340] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:08.341] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.351] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.351] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:52:08.361] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 2
[10:52:08.361] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.362] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.362] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.362] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.362] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.363] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.373] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.373] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.373] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:52:08.373] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.373] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.374] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:08.374] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.374] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:52:08.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:08.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:52:08.374] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ :List of 2
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ x: int 0
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ y: int 1
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr "$x\n[1] 0\n\n$y\n[1] 1\n\n"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:08"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:08"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "be79b08faeced682a2aab9c61d6391c7"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 66994
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.004 0 0
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:08.375] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:52:08.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:52:08.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:08.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #2
[10:52:08.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:08.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:08.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:52:08.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.386] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:08.386] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.386] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #2
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  until=1
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #1
[10:52:08.387] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:52:08.388] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, TRUE
[10:52:08.388] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=2) ... done
[10:52:08.388] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:52:08.388] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.388] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.388] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.388] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.388] |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, TRUE
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  |  until=1
[10:52:08.389] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #1
[10:52:08.390] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:52:08.390] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, TRUE
[10:52:08.390] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=2) ... done
[10:52:08.390] |  :  .  |  :  .  |  :  .  |  :  .  length: 1 (resolved future 2)
[10:52:08.390] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:52:08.400] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.400] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.400] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.400] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.401] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.401] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.411] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.412] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.422] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.422] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.422] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.422] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.422] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.423] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.423] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.433] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.435] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.445] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.445] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.445] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.446] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.446] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.446] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.446] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.457] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.457] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.467] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.467] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.467] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.467] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.468] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.468] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.468] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.478] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.478] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.488] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.489] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.489] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.489] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.489] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.490] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.500] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.500] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.510] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.510] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.510] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.511] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.511] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.511] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.521] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.522] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.532] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.532] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.532] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.532] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.532] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.533] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.533] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.543] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.543] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.553] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.554] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.554] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.554] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.554] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.554] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.555] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.565] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.565] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.575] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.575] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.575] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.576] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.576] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.576] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.576] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.587] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.587] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.597] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.597] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.597] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.597] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.598] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.598] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.608] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.608] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.619] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.619] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.619] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.619] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.619] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.620] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.630] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.630] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.640] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.640] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.640] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.641] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.641] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.641] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.641] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.652] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.652] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.662] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.662] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.662] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.662] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.663] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.663] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.663] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.673] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.673] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.684] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.684] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.684] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.684] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.684] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.684] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.685] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.695] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.695] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.705] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.706] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.706] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.706] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.706] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.707] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.717] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.717] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.727] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.727] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.728] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.728] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.728] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.728] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.729] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.739] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.739] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.749] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:52:08.749] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:52:08.750] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:52:08.750] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.750] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.750] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.756] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:52:08.756] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:08.756] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ :List of 2
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ x: int 1
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ y: int 0
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr "$x\n[1] 1\n\n$y\n[1] 0\n\n"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:08"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:08"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "48c1991b2558e157e5b0d07703630534"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 66993
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.504 0 0
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:08.757] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:52:08.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:52:08.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:08.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:52:08.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:52:08.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:08.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:52:08.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:08.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #1
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:52:08.769] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:52:08.770] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:52:08.770] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, TRUE
[10:52:08.770] |  :  .  |  :  .  |  :  .  |  :  .  |  until=1
[10:52:08.770] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #1
[10:52:08.770] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.770] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.770] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.770] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.770] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:52:08.771] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:52:08.772] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.773] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:52:08.774] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ...
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:52:08.775] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:52:08.776] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:08.776] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:52:08.776] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:52:08.776] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:52:08.776] |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ... done
[10:52:08.776] |  :  .  |  :  .  |  :  .  |  value() on list ... done
[10:52:08.776]  - Number of value chunks collected: 2
[10:52:08.776] Resolving 2 futures (chunks) ... DONE
[10:52:08.776] Reducing values from 2 chunks ...
[10:52:08.776]  - Number of values collected after concatenation: 2
[10:52:08.777]  - Number of values expected: 2
[10:52:08.777] Reducing values from 2 chunks ... DONE
[10:52:08.777] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ... DONE
* future_mapply(x, ..., future.stdout = NA) ...
[10:52:08.777] future_mapply() ...
[10:52:08.777] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:08.777] |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:08.777] |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:08.778] Number of chunks: 2
[10:52:08.778] getGlobalsAndPackagesXApply() ...
[10:52:08.778]  - future.globals: TRUE
[10:52:08.778] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:52:08.778] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:52:08.780] |  :  .  |  :  .  |  :  .  |  :  .  globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[10:52:08.780] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:52:08.780] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:52:08.780] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:52:08.781] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:52:08.781] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:52:08.781] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:52:08.781] |  :  .  |  :  .  |  :  .  |  :  The total size of the 1 globals is 1.04 KiB (1066 bytes)
[10:52:08.781] |  :  .  |  :  .  |  :  .  |  :  The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[10:52:08.782] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:52:08.782] |  :  .  |  :  .  |  :  .  |  :  globals: [1] ‘FUN’
[10:52:08.782] |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:52:08.782] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:52:08.782]  - globals found/used: [n=1] ‘FUN’
[10:52:08.782]  - needed namespaces: [n=0] 
[10:52:08.782] Finding globals ... DONE
[10:52:08.782] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[10:52:08.783] List of 2
[10:52:08.783]  $ ...future.FUN:function (x, y)  
[10:52:08.783]  $ MoreArgs     : NULL
[10:52:08.783]  - attr(*, "where")=List of 2
[10:52:08.783]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:52:08.783]   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[10:52:08.783]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:08.783]  - attr(*, "resolved")= logi FALSE
[10:52:08.783]  - attr(*, "total_size")= num NA
[10:52:08.785] Packages to be attached in all futures: [n=0] 
[10:52:08.785] getGlobalsAndPackagesXApply() ... DONE
[10:52:08.785] Number of futures (= number of chunks): 2
[10:52:08.786] Launching 2 futures (chunks) ...
[10:52:08.786] Chunk #1 of 2 ...
[10:52:08.786]  - Finding globals in '...' for chunk #1 ...
[10:52:08.786] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:52:08.786] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:52:08.786] |  :  .  |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:52:08.786] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:52:08.786] |  :  .  |  :  .  |  :  .  |  :  globals: [0] <none>
[10:52:08.787] |  :  .  |  :  .  |  :  .  |  :  packages: [0] <none>
[10:52:08.787] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:52:08.787]    + additional globals found: [n=0] 
[10:52:08.787]    + additional namespaces needed: [n=0] 
[10:52:08.787]  - Finding globals in '...' for chunk #1 ... DONE
[10:52:08.787]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:08.787]  - seeds: <none>
[10:52:08.787]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.787] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:52:08.787] |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.787] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:52:08.788] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:52:08.788] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [0] 
[10:52:08.788] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [0] 
[10:52:08.788] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:52:08.788] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:52:08.788] |  :  .  |  :  .  |  :  .  |  :  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.788] |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:52:08.789] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:52:08.789] |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:52:08.789] |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:52:08.789] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:08.789] |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:08.789] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:52:08.789] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:52:08.789] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:52:08.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:52:08.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:08.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:08.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:52:08.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:52:08.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:52:08.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:52:08.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:08.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:08.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:52:08.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:08.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:52:08.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:52:08.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:08.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:52:08.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:52:08.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:08.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:52:08.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:52:08.834] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:52:08.834] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:52:08.834] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:08.834] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:52:08.834] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:52:08.834] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:52:08.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:52:08.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:08.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:52:08.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:52:08.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:08.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:52:08.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:52:08.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:52:08.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:52:08.835] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:08.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:08.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:08.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:08.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:52:08.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:52:08.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:08.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:52:08.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:08.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:08.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:52:08.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:52:08.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:52:08.837] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:52:08.837] |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:08.837] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:52:08.837] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:52:08.837] Created future:
[10:52:08.838] |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:08.839] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:08.839] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:08.839] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:08.849] |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:08.838] MultisessionFuture:
[10:52:08.838] Label: ‘future_mapply-1’
[10:52:08.838] Expression:
[10:52:08.838] {
[10:52:08.838]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:08.838]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:08.838]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:08.838]         on.exit(options(oopts), add = TRUE)
[10:52:08.838]     }
[10:52:08.838]     {
[10:52:08.838]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:08.838]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:08.838]         do.call(mapply, args = args)
[10:52:08.838]     }
[10:52:08.838] }
[10:52:08.838] Lazy evaluation: FALSE
[10:52:08.838] Asynchronous evaluation: TRUE
[10:52:08.838] Local evaluation: TRUE
[10:52:08.838] Environment: R_GlobalEnv
[10:52:08.838] Capture standard output: NA
[10:52:08.838] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:08.838] Immediate condition classes: ‘immediateCondition’
[10:52:08.838] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:08.838] Packages: <none>
[10:52:08.838] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:08.838] Resolved: FALSE
[10:52:08.838] Value: <not collected>
[10:52:08.838] Conditions captured: <none>
[10:52:08.838] Early signaling: FALSE
[10:52:08.838] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:08.838] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:08.850] Chunk #1 of 2 ... DONE
[10:52:08.850] Chunk #2 of 2 ...
[10:52:08.850]  - Finding globals in '...' for chunk #2 ...
[10:52:08.850] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:52:08.850] |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:52:08.851] |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:52:08.851] |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:52:08.851] |  :  .  |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:52:08.851] |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:52:08.851] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:52:08.851]    + additional globals found: [n=0] 
[10:52:08.851]    + additional namespaces needed: [n=0] 
[10:52:08.851]  - Finding globals in '...' for chunk #2 ... DONE
[10:52:08.851]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:52:08.851]  - seeds: <none>
[10:52:08.851]  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.852] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:52:08.852] |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.852] |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:52:08.852] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:52:08.852] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [0] 
[10:52:08.852] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [0] 
[10:52:08.852] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:52:08.853] |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:52:08.853] |  :  .  |  :  .  |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:52:08.853] |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] 
[10:52:08.853] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:52:08.853] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:52:08.853] |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:52:08.853] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:08.853] |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:08.854] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:52:08.854] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:52:08.854] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:52:08.854] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:52:08.854] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:08.856] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-205d289c31d5cc4f272aa5ad0e957f88’
[10:52:08.856] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:52:08.856] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:52:08.856] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:52:08.856] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:52:08.856] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:08.856] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:08.856] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:08.856] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:08.856] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:52:08.857] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:52:08.857] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ...
[10:52:08.857] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:08.857] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:08.857] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'list', earlySignal = 0) ... done
[10:52:08.857] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:52:08.857] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:52:08.939] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:52:08.940] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:52:08.940] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:08.940] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:52:08.940] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:52:08.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:52:08.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:52:08.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:08.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:52:08.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:52:08.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:52:08.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:52:08.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:52:08.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:52:08.941] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:52:08.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:08.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:52:08.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:08.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:52:08.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:52:08.942] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:52:08.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ...
[10:52:08.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:52:08.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:52:08.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'add', earlySignal = 0) ... done
[10:52:08.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:52:08.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:52:08.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:52:08.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:52:08.943] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:08.943] |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:52:08.944] |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:52:08.944] Created future:
[10:52:08.944] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:52:08.945] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:08.945] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:08.945] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:08.956] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:52:08.944] MultisessionFuture:
[10:52:08.944] Label: ‘future_mapply-2’
[10:52:08.944] Expression:
[10:52:08.944] {
[10:52:08.944]     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:52:08.944]     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:52:08.944]         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:52:08.944]         on.exit(options(oopts), add = TRUE)
[10:52:08.944]     }
[10:52:08.944]     {
[10:52:08.944]         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[10:52:08.944]             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[10:52:08.944]         do.call(mapply, args = args)
[10:52:08.944]     }
[10:52:08.944] }
[10:52:08.944] Lazy evaluation: FALSE
[10:52:08.944] Asynchronous evaluation: TRUE
[10:52:08.944] Local evaluation: TRUE
[10:52:08.944] Environment: R_GlobalEnv
[10:52:08.944] Capture standard output: NA
[10:52:08.944] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:52:08.944] Immediate condition classes: ‘immediateCondition’
[10:52:08.944] Globals: 5 objects totaling 1.19 KiB (function ‘...future.FUN’ of 1.04 KiB, NULL ‘MoreArgs’ of 27 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:52:08.944] Packages: <none>
[10:52:08.944] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:52:08.944] Resolved: FALSE
[10:52:08.944] Value: <not collected>
[10:52:08.944] Conditions captured: <none>
[10:52:08.944] Early signaling: FALSE
[10:52:08.944] Owner process: b9baaf5323afbfa5c141c0476b9fb995
[10:52:08.944] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:08.956] Chunk #2 of 2 ... DONE
[10:52:08.956] Launching 2 futures (chunks) ... DONE
[10:52:08.956] Resolving 2 futures (chunks) ...
[10:52:08.956] |  :  .  |  :  .  |  :  .  |  :  .  value() on list ...
[10:52:08.956] |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:52:08.957] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 2
[10:52:08.957] |  :  .  |  :  .  |  :  .  |  :  .  |  
[10:52:08.957] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 2
[10:52:08.957] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:08.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:08.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:08.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:08.957] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:08.958] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:08.968] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:08.968] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:08.968] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:52:08.968] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:08.968] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:08.969] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:08.969] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:08.969] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:08.979] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:08.979] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:52:08.990] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 2
[10:52:08.990] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:08.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:08.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:08.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:08.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:08.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.001] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.001] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.002] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:52:09.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.002] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:09.003] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.003] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:52:09.003] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:09.003] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ :List of 2
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ x: int 0
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ y: int 1
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : NULL
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:08"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:08"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "be79b08faeced682a2aab9c61d6391c7"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66994
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.003 0 0
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:09.004] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:52:09.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:52:09.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:09.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #2
[10:52:09.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:09.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:09.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:52:09.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:09.017] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:52:09.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=1
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #1
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:52:09.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:52:09.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:52:09.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:52:09.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:52:09.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:52:09.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=1
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #1
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=2) ... done
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1 (resolved future 2)
[10:52:09.021] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:52:09.032] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.032] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.032] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.033] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.043] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.053] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.054] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.054] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.054] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.054] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.054] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.055] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.065] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.075] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.075] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.075] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.076] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.076] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.076] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.076] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.087] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.087] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.097] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.097] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.097] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.097] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.108] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.108] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.119] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.119] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.119] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.120] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.130] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.130] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.140] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.140] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.140] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.141] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.141] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.141] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.141] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.152] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.162] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.162] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.162] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.162] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.163] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.163] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.163] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.173] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.183] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.184] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.195] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.195] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.205] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.205] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.205] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.205] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.206] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.206] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.206] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.216] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.227] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.227] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.227] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.228] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.238] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.238] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.248] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.249] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.260] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.270] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.270] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.270] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.270] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.281] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.282] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.292] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.292] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.303] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.303] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.313] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.313] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.314] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.325] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.325] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.335] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.335] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.336] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.336] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.336] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.336] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.347] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.347] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.357] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.357] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.369] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.369] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.379] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:52:09.379] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:52:09.379] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:52:09.380] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:09.380] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:09.380] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.380] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:09.381] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:52:09.381] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ :List of 2
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ x: int 1
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ y: int 0
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : NULL
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:08"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:09"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "48c1991b2558e157e5b0d07703630534"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 66993
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:05"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.505 0 0
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:09.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:52:09.393] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:52:09.393] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ...
[10:52:09.393] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:52:09.393] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:52:09.393] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-205d289c31d5cc4f272aa5ad0e957f88', action = 'remove', earlySignal = 0) ... done
[10:52:09.393] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:52:09.393] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:52:09.394] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, TRUE
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=1
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #1
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.395] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.396] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.396] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.396] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.396] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.396] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.396] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.396] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:09.396] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:09.396] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:09.396] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:52:09.397] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.398] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:09.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ...
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:52:09.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:52:09.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:09.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:09.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:09.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:09.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:09.401] |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:52:09.401] |  :  .  |  :  .  |  :  .  |  :  .  value() on list ... done
[10:52:09.401]  - Number of value chunks collected: 2
[10:52:09.401] Resolving 2 futures (chunks) ... DONE
[10:52:09.401] Reducing values from 2 chunks ...
[10:52:09.402]  - Number of values collected after concatenation: 2
[10:52:09.402]  - Number of values expected: 2
[10:52:09.402] Reducing values from 2 chunks ... DONE
[10:52:09.404] future_mapply() ... DONE
* future_mapply(x, ..., future.stdout = NA) ... DONE
* plan('multisession') ... DONE
  - Testing with 2 cores ... DONE
> 
> message("*** future_*apply() and 'future.stdout' ... DONE")
*** future_*apply() and 'future.stdout' ... DONE
> 
> source("incl/end.R")
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  New stack:
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 1
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:09.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Old stack:
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 1
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625825c4e88> 
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:09.407] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Not identical
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5625825c4e88> 
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:09.411] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:09.416] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Formals differ
[10:52:09.416] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:09.416] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:52:09.416] |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:09.416] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:52:09.416] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of future strategies:
[10:52:09.416] |  :  .  |  :  .  |  :  .  |  :  .  |  :  1. FutureStrategy:
[10:52:09.416] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:09.416] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:09.416] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - call: plan(sequential)
[10:52:09.417] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:52:09.417] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:09.417] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:52:09.417] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:09.417] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:09.417] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:09.417] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:09.417] |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:09.419] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:52:09.419] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:09.419] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:09.419] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:09.419] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stopWorkers() for MultisessionFutureBackend ...
[10:52:09.420] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Interrupt active futures ...
[10:52:09.420] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of futures: 0
[10:52:09.420] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Interrupt active futures ... done
[10:52:09.420] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Clear future registry ...
[10:52:09.421] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Clear future registry ... done
[10:52:09.421] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stop cluster workers ...
[10:52:09.421] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Stopping existing cluster ...
[10:52:09.421] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Cluster to shut down:
[10:52:09.421] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:09.433] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Stopped cluster: ‘NULL’
[10:52:09.433] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Stopping existing cluster ... done
[10:52:09.433] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stop cluster workers ... done
[10:52:09.433] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stopWorkers() for MultisessionFutureBackend ... done
[10:52:09.433] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Legacy shutdown of cluster workers ...
[10:52:09.433] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stopping existing cluster ...
[10:52:09.433] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  No pre-existing cluster. Skipping
[10:52:09.433] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stopping existing cluster ... done
[10:52:09.434] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Legacy shutdown of cluster workers ... done
[10:52:09.434] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:52:09.434] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_init() of ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:52:09.434] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:09.434] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:52:09.434] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:09.434] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:09.434] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:09.434] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "call")= language plan(sequential)
[10:52:09.436] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  init: NULL
[10:52:09.436] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_init() of ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:52:09.436] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:09.436] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:09.436] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:09.437] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:52:09.437] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:09.437] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:52:09.437] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:52:09.437] |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
