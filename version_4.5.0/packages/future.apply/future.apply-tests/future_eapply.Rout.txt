
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:49:41.624] plan(<NULL>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.624] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.624] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.624] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.662] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:41.663] |  :  all.equal() for FutureStrategyList ...
[10:49:41.663] |  :  .  New stack:
[10:49:41.663] |  :  .  List of 1
[10:49:41.663] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.663] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.663] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.663] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.663] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.663] |  :  .    ..- attr(*, "call")= language future::plan("sequential")
[10:49:41.663] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.667] |  :  .  Old stack:
[10:49:41.667] |  :  .  List of 1
[10:49:41.667] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.667] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.667] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.667] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.667] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.667] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:41.667] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.669] |  :  .  Not identical
[10:49:41.669] |  :  .  all.equal() for future ...
[10:49:41.669] |  :  .  |  List of 2
[10:49:41.669] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.669] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.669] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.669] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.669] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.669] |  :  .  |    ..- attr(*, "call")= language future::plan("sequential")
[10:49:41.669] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.669] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.669] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.669] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.669] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.669] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:41.673] |  :  .  all.equal() for future ... done
[10:49:41.673] |  :  all.equal() for FutureStrategyList ... done
[10:49:41.673] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.673] |  :  List of future strategies:
[10:49:41.673] |  :  1. sequential:
[10:49:41.673] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.673] |  :     - tweaked: FALSE
[10:49:41.673] |  :     - call: plan(sequential)
[10:49:41.674] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:41.674] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
> message("*** future_eapply() ...")
*** future_eapply() ...
> 
> message("- From example(eapply) ...")
- From example(eapply) ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   env <- new.env(hash = FALSE)
+   env$a <- 1:10
+   env$beta <- exp(-3:3)
+   env$logic <- c(TRUE, FALSE, FALSE, TRUE)
+   
+   y0 <- unlist(eapply(env, mean, USE.NAMES = FALSE))
+   y1 <- unlist(future_eapply(env, mean, USE.NAMES = FALSE))
+   stopifnot(all.equal(y1, y0))
+   
+   y0 <- eapply(env, quantile, probs = 1:3/4)
+   y1 <- future_eapply(env, quantile, probs = 1:3/4)
+   stopifnot(all.equal(y1, y0))
+   
+   y0 <- eapply(env, quantile)
+   y1 <- future_eapply(env, quantile)
+   stopifnot(all.equal(y1, y0))
+   y2 <- future_eapply(env, "quantile")
+   stopifnot(all.equal(y2, y0))
+ 
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[10:49:41.703] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.703] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:41.703] |  :  all.equal() for FutureStrategyList ...
[10:49:41.703] |  :  .  New stack:
[10:49:41.704] |  :  .  List of 1
[10:49:41.704] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.704] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.704] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.704] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.704] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.704] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:41.704] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.706] |  :  .  Old stack:
[10:49:41.706] |  :  .  List of 1
[10:49:41.706] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.706] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.706] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.706] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.706] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.706] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:41.706] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.708] |  :  .  Not identical
[10:49:41.708] |  :  .  all.equal() for future ...
[10:49:41.708] |  :  .  |  List of 2
[10:49:41.708] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.708] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.708] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.708] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.708] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.708] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:41.708] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.708] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.708] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.708] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.708] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.708] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:41.712] |  :  .  all.equal() for future ... done
[10:49:41.712] |  :  all.equal() for FutureStrategyList ... done
[10:49:41.712] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.712] |  :  List of future strategies:
[10:49:41.712] |  :  1. sequential:
[10:49:41.712] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.712] |  :     - tweaked: FALSE
[10:49:41.712] |  :     - call: plan(sequential)
[10:49:41.712] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:41.712] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.713] future_lapply() ...
[10:49:41.720] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.720] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.720] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.720] Backend function: <‘NULL’>
[10:49:41.721] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:41.721] Number of chunks: 1
[10:49:41.721] getGlobalsAndPackagesXApply() ...
[10:49:41.721]  - future.globals: TRUE
[10:49:41.722] getGlobalsAndPackages() ...
[10:49:41.722] |  Searching for globals ...
[10:49:41.724] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:41.724] |  Searching for globals ... DONE
[10:49:41.724] |  Resolving globals: FALSE
[10:49:41.724] |  Search for packages associated with the globals ...
[10:49:41.724] |  :  Packages associated with globals: [1] ‘base’
[10:49:41.725] |  :  Packages: [1] ‘base’
[10:49:41.725] |  Search for packages associated with the globals ... DONE
[10:49:41.725] |  The total size of the 1 globals is 273 bytes (273 bytes)
[10:49:41.726] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 273 bytes There is one global: ‘FUN’ (273 bytes of class ‘function’)
[10:49:41.726] |  Packages after dropping 'base': [0] 
[10:49:41.726] |  globals: [1] ‘FUN’
[10:49:41.726] |  packages: [0] 
[10:49:41.726] getGlobalsAndPackages() ... done
[10:49:41.726]  - globals found/used: [n=1] ‘FUN’
[10:49:41.726]  - needed namespaces: [n=0] 
[10:49:41.726] Finding globals ... DONE
[10:49:41.727]  - use_args: TRUE
[10:49:41.727]  - Getting '...' globals ...
[10:49:41.727] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:41.727] |  recursive: 0
[10:49:41.728] |  length: 1
[10:49:41.728] |  elements: ‘...’
[10:49:41.728] |  'obj' is DotDotDotList
[10:49:41.728] |  resolve(obj, ...) ...
[10:49:41.728] |  resolve(obj, ...) ... done
[10:49:41.728] |  length: 0 (resolved future 1)
[10:49:41.728] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:41.729]    - '...' content: [n=0] 
[10:49:41.729] List of 1
[10:49:41.729]  $ ...: list()
[10:49:41.729]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.729]  - attr(*, "where")=List of 1
[10:49:41.729]   ..$ ...:<environment: 0x555d039a2340> 
[10:49:41.729]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.729]  - attr(*, "resolved")= logi TRUE
[10:49:41.729]  - attr(*, "total_size")= num NA
[10:49:41.731]  - Getting '...' globals ... DONE
[10:49:41.732] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:41.732] List of 2
[10:49:41.732]  $ ...future.FUN:function (x, ...)  
[10:49:41.732]  $ ...          : list()
[10:49:41.732]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.732]  - attr(*, "where")=List of 2
[10:49:41.732]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:41.732]   ..$ ...          :<environment: 0x555d039a2340> 
[10:49:41.732]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.732]  - attr(*, "resolved")= logi FALSE
[10:49:41.732]  - attr(*, "total_size")= num 5249
[10:49:41.734] Packages to be attached in all futures: [n=0] 
[10:49:41.735] getGlobalsAndPackagesXApply() ... DONE
[10:49:41.735] Number of futures (= number of chunks): 1
[10:49:41.735] Launching 1 futures (chunks) ...
[10:49:41.735] Chunk #1 of 1 ...
[10:49:41.735]  - Finding globals in 'X' for chunk #1 ...
[10:49:41.735] getGlobalsAndPackages() ...
[10:49:41.735] |  Searching for globals ...
[10:49:41.736] |  :  globals found: [0] 
[10:49:41.736] |  Searching for globals ... DONE
[10:49:41.736] |  globals: [0] <none>
[10:49:41.736] |  packages: [0] <none>
[10:49:41.736] getGlobalsAndPackages() ... done
[10:49:41.736]    + additional globals found: [n=0] 
[10:49:41.736]    + additional namespaces needed: [n=0] 
[10:49:41.736]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:41.736]  - seeds: <none>
[10:49:41.737]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.737] getGlobalsAndPackages() ...
[10:49:41.737] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.737] |  Resolving globals: FALSE
[10:49:41.737] |  Tweak future expression to call with '...' arguments ...
[10:49:41.737] |  :  {
[10:49:41.737] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.737] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:41.737] |  :      "# as a global variable                                         "
[10:49:41.737] |  :      do.call(function(...) {
[10:49:41.737] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.737] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.737] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.737] |  :              on.exit(options(oopts), add = TRUE)
[10:49:41.737] |  :          }
[10:49:41.737] |  :          {
[10:49:41.737] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.737] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.737] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:41.737] |  :              })
[10:49:41.737] |  :          }
[10:49:41.737] |  :      }, args = future.call.arguments)
[10:49:41.737] |  :  }
[10:49:41.737] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:41.737] |  Search for packages associated with the globals ...
[10:49:41.738] |  :  Packages associated with globals: [1] ‘base’
[10:49:41.738] |  :  Packages: [1] ‘base’
[10:49:41.738] |  Search for packages associated with the globals ... DONE
[10:49:41.738] |  Packages after dropping 'base': [0] 
[10:49:41.738] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.738] |  packages: [0] 
[10:49:41.738] getGlobalsAndPackages() ... done
[10:49:41.739] run() for Future (‘Future’) ...
[10:49:41.739] |  state: ‘created’
[10:49:41.739] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.739] |  :  makeFutureBackend(<sequential>) ...
[10:49:41.739] |  :  .  Backend function: <‘NULL’>
[10:49:41.740] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:41.740] |  :  makeFutureBackend(<sequential>) ... done
[10:49:41.740] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.740] |  Using SequentialFutureBackend ...
[10:49:41.740] |  :  Launching futures ...
[10:49:41.740] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:41.740] |  :  .  |  getFutureData() ...
[10:49:41.741] |  :  .  |  :  getFutureCore() ...
[10:49:41.741] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:41.741] |  :  .  |  :  getFutureCore() ... done
[10:49:41.741] |  :  .  |  :  getFutureCapture() ...
[10:49:41.741] |  :  .  |  :  getFutureCapture() ... done
[10:49:41.741] |  :  .  |  :  getFutureContext() ...
[10:49:41.741] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.741] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:41.742] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.742] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:41.742] |  :  .  |  :  getFutureContext() ... done
[10:49:41.742] |  :  .  |  getFutureData() ... done
[10:49:41.743] |  :  .  |  attachPackages() ...
[10:49:41.743] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:41.743] |  :  .  |  attachPackages() ... DONE
[10:49:41.743] |  :  .  |  attachPackages() ...
[10:49:41.743] |  :  .  |  :  packages: [n=0] 
[10:49:41.743] |  :  .  |  attachPackages() ... DONE
[10:49:41.744] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.744] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.744] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.744] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.745] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:41.745] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:41.745] |  :  .  |  :  .  |  New stack:
[10:49:41.745] |  :  .  |  :  .  |  List of 1
[10:49:41.745] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.745] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.745] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.745] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.745] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.745] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:41.745] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.749] |  :  .  |  :  .  |  Old stack:
[10:49:41.749] |  :  .  |  :  .  |  List of 1
[10:49:41.749] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.749] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.749] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.749] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.749] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.749] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:41.749] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.749] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.749] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.749] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.752] |  :  .  |  :  .  |  Not identical
[10:49:41.752] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:41.752] |  :  .  |  :  .  |  :  List of 2
[10:49:41.752] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.752] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.752] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.752] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.752] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.752] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:41.752] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.752] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.752] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.752] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.752] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.752] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.752] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.752] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.752] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.757] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:41.757] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:41.757] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.757] |  :  .  |  :  .  List of future strategies:
[10:49:41.757] |  :  .  |  :  .  1. sequential:
[10:49:41.757] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.757] |  :  .  |  :  .     - tweaked: FALSE
[10:49:41.757] |  :  .  |  :  .     - call: plan(sequential)
[10:49:41.757] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:41.757] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.758] |  :  .  |  assign_globals() ...
[10:49:41.758] |  :  .  |  List of 5
[10:49:41.758] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:41.758] |  :  .  |   $ future.call.arguments    : list()
[10:49:41.758] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.758] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:41.758] |  :  .  |    ..$ : logi [1:4] TRUE FALSE FALSE TRUE
[10:49:41.758] |  :  .  |    ..$ : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:49:41.758] |  :  .  |    ..$ : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:49:41.758] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:41.758] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:41.758] |  :  .  |   - attr(*, "where")=List of 5
[10:49:41.758] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:41.758] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:41.758] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:41.758] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:41.758] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:41.758] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:41.758] |  :  .  |   - attr(*, "total_size")= num 5249
[10:49:41.758] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.758] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:41.763] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:41.763] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:41.763] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:41.763] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:41.763] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:41.763] |  :  .  |  assign_globals() ... done
[10:49:41.766] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.766] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.766] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:41.766] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:41.767] |  :  .  |  :  .  |  :  New stack:
[10:49:41.767] |  :  .  |  :  .  |  :  List of 1
[10:49:41.767] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.767] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.767] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.767] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.767] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.767] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.767] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.767] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.767] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.767] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.770] |  :  .  |  :  .  |  :  Old stack:
[10:49:41.770] |  :  .  |  :  .  |  :  List of 1
[10:49:41.770] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.770] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.770] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.770] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.770] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.770] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.770] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.770] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.770] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.770] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.774] |  :  .  |  :  .  |  :  Identical
[10:49:41.774] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:41.774] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.774] |  :  .  |  :  .  |  List of future strategies:
[10:49:41.774] |  :  .  |  :  .  |  1. sequential:
[10:49:41.774] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.774] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:41.774] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:41.774] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:41.774] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.775] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.775] |  :  .  |  SequentialFuture started (and completed)
[10:49:41.775] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:41.775] |  :  Launching futures ... done
[10:49:41.775] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:41.776] |  Using SequentialFutureBackend ... done
[10:49:41.776] run() for Future (‘SequentialFuture’) ... done
[10:49:41.776] Created future:
[10:49:41.776] SequentialFuture:
[10:49:41.776] Label: ‘future_eapply-1’
[10:49:41.776] Expression:
[10:49:41.776] {
[10:49:41.776]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.776]     "# expression in do.call(), because function called uses '...'  "
[10:49:41.776]     "# as a global variable                                         "
[10:49:41.776]     do.call(function(...) {
[10:49:41.776]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.776]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.776]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.776]             on.exit(options(oopts), add = TRUE)
[10:49:41.776]         }
[10:49:41.776]         {
[10:49:41.776]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.776]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.776]                 ...future.FUN(...future.X_jj, ...)
[10:49:41.776]             })
[10:49:41.776]         }
[10:49:41.776]     }, args = future.call.arguments)
[10:49:41.776] }
[10:49:41.776] Lazy evaluation: FALSE
[10:49:41.776] Asynchronous evaluation: TRUE
[10:49:41.776] Local evaluation: TRUE
[10:49:41.776] Environment: R_GlobalEnv
[10:49:41.776] Capture standard output: TRUE
[10:49:41.776] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:41.776] Immediate condition classes: ‘immediateCondition’
[10:49:41.776] Globals: 5 objects totaling 653 bytes (function ‘...future.FUN’ of 273 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 229 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:41.776] Packages: <none>
[10:49:41.776] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:41.776] Resolved: TRUE
[10:49:41.776] Value: 79 bytes of class ‘list’
[10:49:41.776] Early signaling: FALSE
[10:49:41.776] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:41.776] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:41.777] Chunk #1 of 1 ... DONE
[10:49:41.777] Launching 1 futures (chunks) ... DONE
[10:49:41.777] Resolving 1 futures (chunks) ...
[10:49:41.778] value() on list ...
[10:49:41.778] |  recursive: 0
[10:49:41.778] |  length: 1
[10:49:41.778] |  
[10:49:41.778] |  Number of remaining objects: 1
[10:49:41.778] |  checking value #1 ...
[10:49:41.778] |  :  'obj' is SequentialFuture
[10:49:41.778] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:41.779] |  :  .  state: ‘finished’
[10:49:41.779] |  :  .  run: TRUE
[10:49:41.779] |  :  .  result: ‘FutureResult’
[10:49:41.779] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:41.779] |  :  SequentialFuture #1
[10:49:41.779] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:41.779] |  :  .  nx: 1
[10:49:41.779] |  :  .  relay: TRUE
[10:49:41.779] |  :  .  stdout: TRUE
[10:49:41.779] |  :  .  signal: TRUE
[10:49:41.779] |  :  .  resignal: FALSE
[10:49:41.779] |  :  .  force: TRUE
[10:49:41.780] |  :  .  relayed: [n=1] FALSE
[10:49:41.780] |  :  .  queued futures: [n=1] FALSE
[10:49:41.780] |  :  .  until=1
[10:49:41.780] |  :  .  relaying element #1
[10:49:41.780] |  :  .  relayed: [n=1] TRUE
[10:49:41.780] |  :  .  queued futures: [n=1] TRUE
[10:49:41.781] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:41.781] |  :  value(<SequentialFuture>, ...) ...
[10:49:41.781] |  :  .  value: <list>
[10:49:41.781] |  :  value(<SequentialFuture>, ...) ... done
[10:49:41.781] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:41.781] |  :  .  nx: 1
[10:49:41.781] |  :  .  relay: TRUE
[10:49:41.781] |  :  .  stdout: TRUE
[10:49:41.781] |  :  .  signal: TRUE
[10:49:41.781] |  :  .  resignal: FALSE
[10:49:41.781] |  :  .  force: TRUE
[10:49:41.781] |  :  .  relayed: [n=1] TRUE
[10:49:41.782] |  :  .  queued futures: [n=1] TRUE
[10:49:41.782] |  :  .  until=1
[10:49:41.782] |  :  .  relayed: [n=1] TRUE
[10:49:41.782] |  :  .  queued futures: [n=1] TRUE
[10:49:41.782] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:41.782] |  :  length: 0 (resolved future 1)
[10:49:41.782] |  checking value #1 ... done
[10:49:41.782] |  Relaying remaining futures ...
[10:49:41.782] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:41.783] |  :  .  nx: 1
[10:49:41.783] |  :  .  relay: TRUE
[10:49:41.783] |  :  .  stdout: TRUE
[10:49:41.783] |  :  .  signal: TRUE
[10:49:41.783] |  :  .  resignal: FALSE
[10:49:41.783] |  :  .  force: TRUE
[10:49:41.783] |  :  .  relayed: [n=1] TRUE
[10:49:41.783] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:41.783] |  :  .  relayed: [n=1] TRUE
[10:49:41.783] |  :  .  queued futures: [n=1] TRUE
[10:49:41.783] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:41.783] |  Relaying remaining futures ... done
[10:49:41.784] value() on list ... done
[10:49:41.784]  - Number of value chunks collected: 1
[10:49:41.784] Resolving 1 futures (chunks) ... DONE
[10:49:41.784] Reducing values from 1 chunks ...
[10:49:41.784]  - Number of values collected after concatenation: 3
[10:49:41.784]  - Number of values expected: 3
[10:49:41.784] Reducing values from 1 chunks ... DONE
[10:49:41.784] future_lapply() ... DONE
[10:49:41.786] future_lapply() ...
[10:49:41.786] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.787] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.787] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.787] Number of chunks: 1
[10:49:41.787] getGlobalsAndPackagesXApply() ...
[10:49:41.787]  - future.globals: TRUE
[10:49:41.787] getGlobalsAndPackages() ...
[10:49:41.787] |  Searching for globals ...
[10:49:41.788] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:41.788] |  Searching for globals ... DONE
[10:49:41.788] |  Resolving globals: FALSE
[10:49:41.789] |  Search for packages associated with the globals ...
[10:49:41.789] |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:41.789] |  :  Packages: [2] ‘stats’, ‘base’
[10:49:41.789] |  Search for packages associated with the globals ... DONE
[10:49:41.789] |  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:41.789] |  The total size of the 1 globals exported for future expression (‘FUN(probs = c(0.25, 0.5, 0.75))’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:41.790] |  Packages after dropping 'base': [1] ‘stats’
[10:49:41.790] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:41.790] |  globals: [1] ‘FUN’
[10:49:41.790] |  packages: [1] ‘stats’
[10:49:41.790] getGlobalsAndPackages() ... done
[10:49:41.790]  - globals found/used: [n=1] ‘FUN’
[10:49:41.790]  - needed namespaces: [n=1] ‘stats’
[10:49:41.790] Finding globals ... DONE
[10:49:41.790]  - use_args: TRUE
[10:49:41.791]  - Getting '...' globals ...
[10:49:41.791] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:41.791] |  recursive: 0
[10:49:41.791] |  length: 1
[10:49:41.791] |  elements: ‘...’
[10:49:41.791] |  'obj' is DotDotDotList
[10:49:41.791] |  resolve(obj, ...) ...
[10:49:41.791] |  resolve(obj, ...) ... done
[10:49:41.792] |  length: 0 (resolved future 1)
[10:49:41.792] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:41.792]    - '...' content: [n=1] ‘probs’
[10:49:41.792] List of 1
[10:49:41.792]  $ ...:List of 1
[10:49:41.792]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:49:41.792]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.792]  - attr(*, "where")=List of 1
[10:49:41.792]   ..$ ...:<environment: 0x555d02fddfc8> 
[10:49:41.792]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.792]  - attr(*, "resolved")= logi TRUE
[10:49:41.792]  - attr(*, "total_size")= num NA
[10:49:41.796]  - Getting '...' globals ... DONE
[10:49:41.796] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:41.796] List of 2
[10:49:41.796]  $ ...future.FUN:function (x, ...)  
[10:49:41.796]  $ ...          :List of 1
[10:49:41.796]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:49:41.796]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.796]  - attr(*, "where")=List of 2
[10:49:41.796]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:41.796]   ..$ ...          :<environment: 0x555d02fddfc8> 
[10:49:41.796]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.796]  - attr(*, "resolved")= logi FALSE
[10:49:41.796]  - attr(*, "total_size")= num 6525
[10:49:41.799] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:41.799] getGlobalsAndPackagesXApply() ... DONE
[10:49:41.799] Number of futures (= number of chunks): 1
[10:49:41.799] Launching 1 futures (chunks) ...
[10:49:41.800] Chunk #1 of 1 ...
[10:49:41.800]  - Finding globals in 'X' for chunk #1 ...
[10:49:41.800] getGlobalsAndPackages() ...
[10:49:41.800] |  Searching for globals ...
[10:49:41.800] |  :  globals found: [0] 
[10:49:41.800] |  Searching for globals ... DONE
[10:49:41.800] |  globals: [0] <none>
[10:49:41.800] |  packages: [0] <none>
[10:49:41.800] getGlobalsAndPackages() ... done
[10:49:41.801]    + additional globals found: [n=0] 
[10:49:41.801]    + additional namespaces needed: [n=0] 
[10:49:41.801]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:41.801]  - seeds: <none>
[10:49:41.801]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.801] getGlobalsAndPackages() ...
[10:49:41.801] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.801] |  Resolving globals: FALSE
[10:49:41.801] |  Tweak future expression to call with '...' arguments ...
[10:49:41.801] |  :  {
[10:49:41.801] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.801] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:41.801] |  :      "# as a global variable                                         "
[10:49:41.801] |  :      do.call(function(...) {
[10:49:41.801] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.801] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.801] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.801] |  :              on.exit(options(oopts), add = TRUE)
[10:49:41.801] |  :          }
[10:49:41.801] |  :          {
[10:49:41.801] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.801] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.801] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:41.801] |  :              })
[10:49:41.801] |  :          }
[10:49:41.801] |  :      }, args = future.call.arguments)
[10:49:41.801] |  :  }
[10:49:41.802] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:41.802] |  Search for packages associated with the globals ...
[10:49:41.802] |  :  Packages associated with globals: [1] ‘stats’
[10:49:41.802] |  :  Packages: [1] ‘stats’
[10:49:41.802] |  Search for packages associated with the globals ... DONE
[10:49:41.802] |  Packages after dropping 'base': [1] ‘stats’
[10:49:41.803] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:41.803] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.803] |  packages: [1] ‘stats’
[10:49:41.803] getGlobalsAndPackages() ... done
[10:49:41.803] run() for Future (‘Future’) ...
[10:49:41.803] |  state: ‘created’
[10:49:41.803] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.803] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.803] |  Using SequentialFutureBackend ...
[10:49:41.804] |  :  Launching futures ...
[10:49:41.804] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:41.804] |  :  .  |  getFutureData() ...
[10:49:41.804] |  :  .  |  :  getFutureCore() ...
[10:49:41.804] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:41.804] |  :  .  |  :  getFutureCore() ... done
[10:49:41.804] |  :  .  |  :  getFutureCapture() ...
[10:49:41.804] |  :  .  |  :  getFutureCapture() ... done
[10:49:41.805] |  :  .  |  :  getFutureContext() ...
[10:49:41.805] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.805] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:41.805] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.805] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:41.805] |  :  .  |  :  getFutureContext() ... done
[10:49:41.805] |  :  .  |  getFutureData() ... done
[10:49:41.805] |  :  .  |  attachPackages() ...
[10:49:41.806] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:41.806] |  :  .  |  attachPackages() ... DONE
[10:49:41.806] |  :  .  |  attachPackages() ...
[10:49:41.806] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:41.806] |  :  .  |  attachPackages() ... DONE
[10:49:41.807] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.807] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.807] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.807] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.807] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:41.808] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:41.808] |  :  .  |  :  .  |  New stack:
[10:49:41.808] |  :  .  |  :  .  |  List of 1
[10:49:41.808] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.808] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.808] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.808] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.808] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.808] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:41.808] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.810] |  :  .  |  :  .  |  Old stack:
[10:49:41.810] |  :  .  |  :  .  |  List of 1
[10:49:41.810] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.810] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.810] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.810] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.810] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.810] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:41.810] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.810] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.810] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.810] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.813] |  :  .  |  :  .  |  Not identical
[10:49:41.813] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:41.813] |  :  .  |  :  .  |  :  List of 2
[10:49:41.813] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.813] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.813] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.813] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.813] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.813] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:41.813] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.813] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.813] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.813] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.813] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.813] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.813] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.813] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.813] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.819] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:41.819] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:41.819] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.819] |  :  .  |  :  .  List of future strategies:
[10:49:41.819] |  :  .  |  :  .  1. sequential:
[10:49:41.819] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.819] |  :  .  |  :  .     - tweaked: FALSE
[10:49:41.819] |  :  .  |  :  .     - call: plan(sequential)
[10:49:41.820] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:41.820] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.820] |  :  .  |  assign_globals() ...
[10:49:41.820] |  :  .  |  List of 5
[10:49:41.820] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:41.820] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:41.820] |  :  .  |    ..$ probs: num [1:3] 0.25 0.5 0.75
[10:49:41.820] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.820] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:41.820] |  :  .  |    ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:49:41.820] |  :  .  |    ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:49:41.820] |  :  .  |    ..$ a    : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:49:41.820] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:41.820] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:41.820] |  :  .  |   - attr(*, "where")=List of 5
[10:49:41.820] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:41.820] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:41.820] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:41.820] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:41.820] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:41.820] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:41.820] |  :  .  |   - attr(*, "total_size")= num 6525
[10:49:41.820] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.820] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:41.826] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:41.826] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:41.826] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:41.826] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:41.826] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:41.826] |  :  .  |  assign_globals() ... done
[10:49:41.828] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.828] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.828] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:41.829] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:41.829] |  :  .  |  :  .  |  :  New stack:
[10:49:41.829] |  :  .  |  :  .  |  :  List of 1
[10:49:41.829] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.829] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.829] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.829] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.829] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.829] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.829] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.829] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.829] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.829] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.832] |  :  .  |  :  .  |  :  Old stack:
[10:49:41.832] |  :  .  |  :  .  |  :  List of 1
[10:49:41.832] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.832] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.832] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.832] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.832] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.832] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.832] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.832] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.832] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.832] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.835] |  :  .  |  :  .  |  :  Identical
[10:49:41.835] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:41.836] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.836] |  :  .  |  :  .  |  List of future strategies:
[10:49:41.836] |  :  .  |  :  .  |  1. sequential:
[10:49:41.836] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.836] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:41.836] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:41.836] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:41.836] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.836] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.836] |  :  .  |  SequentialFuture started (and completed)
[10:49:41.837] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:41.837] |  :  Launching futures ... done
[10:49:41.837] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:41.837] |  Using SequentialFutureBackend ... done
[10:49:41.837] run() for Future (‘SequentialFuture’) ... done
[10:49:41.837] Created future:
[10:49:41.837] SequentialFuture:
[10:49:41.837] Label: ‘future_eapply-1’
[10:49:41.837] Expression:
[10:49:41.837] {
[10:49:41.837]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.837]     "# expression in do.call(), because function called uses '...'  "
[10:49:41.837]     "# as a global variable                                         "
[10:49:41.837]     do.call(function(...) {
[10:49:41.837]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.837]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.837]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.837]             on.exit(options(oopts), add = TRUE)
[10:49:41.837]         }
[10:49:41.837]         {
[10:49:41.837]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.837]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.837]                 ...future.FUN(...future.X_jj, ...)
[10:49:41.837]             })
[10:49:41.837]         }
[10:49:41.837]     }, args = future.call.arguments)
[10:49:41.837] }
[10:49:41.837] Lazy evaluation: FALSE
[10:49:41.837] Asynchronous evaluation: TRUE
[10:49:41.837] Local evaluation: TRUE
[10:49:41.837] Environment: R_GlobalEnv
[10:49:41.837] Capture standard output: TRUE
[10:49:41.837] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:41.837] Immediate condition classes: ‘immediateCondition’
[10:49:41.837] Globals: 5 objects totaling 832 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 171 bytes, list ‘...future.elements_ii’ of 296 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:41.837] Packages: 1 packages (‘stats’)
[10:49:41.837] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:41.837] Resolved: TRUE
[10:49:41.837] Value: 299 bytes of class ‘list’
[10:49:41.837] Early signaling: FALSE
[10:49:41.837] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:41.837] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:41.838] Chunk #1 of 1 ... DONE
[10:49:41.838] Launching 1 futures (chunks) ... DONE
[10:49:41.838] Resolving 1 futures (chunks) ...
[10:49:41.838] value() on list ...
[10:49:41.838] |  recursive: 0
[10:49:41.838] |  length: 1
[10:49:41.838] |  
[10:49:41.839] |  Number of remaining objects: 1
[10:49:41.839] |  checking value #1 ...
[10:49:41.839] |  :  'obj' is SequentialFuture
[10:49:41.839] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:41.839] |  :  .  state: ‘finished’
[10:49:41.839] |  :  .  run: TRUE
[10:49:41.839] |  :  .  result: ‘FutureResult’
[10:49:41.839] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:41.839] |  :  SequentialFuture #1
[10:49:41.839] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:41.839] |  :  .  nx: 1
[10:49:41.840] |  :  .  relay: TRUE
[10:49:41.840] |  :  .  stdout: TRUE
[10:49:41.840] |  :  .  signal: TRUE
[10:49:41.840] |  :  .  resignal: FALSE
[10:49:41.840] |  :  .  force: TRUE
[10:49:41.840] |  :  .  relayed: [n=1] FALSE
[10:49:41.840] |  :  .  queued futures: [n=1] FALSE
[10:49:41.840] |  :  .  until=1
[10:49:41.840] |  :  .  relaying element #1
[10:49:41.840] |  :  .  relayed: [n=1] TRUE
[10:49:41.840] |  :  .  queued futures: [n=1] TRUE
[10:49:41.841] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:41.841] |  :  value(<SequentialFuture>, ...) ...
[10:49:41.841] |  :  .  value: <list>
[10:49:41.841] |  :  value(<SequentialFuture>, ...) ... done
[10:49:41.841] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:41.841] |  :  .  nx: 1
[10:49:41.841] |  :  .  relay: TRUE
[10:49:41.841] |  :  .  stdout: TRUE
[10:49:41.841] |  :  .  signal: TRUE
[10:49:41.841] |  :  .  resignal: FALSE
[10:49:41.841] |  :  .  force: TRUE
[10:49:41.841] |  :  .  relayed: [n=1] TRUE
[10:49:41.842] |  :  .  queued futures: [n=1] TRUE
[10:49:41.842] |  :  .  until=1
[10:49:41.842] |  :  .  relayed: [n=1] TRUE
[10:49:41.842] |  :  .  queued futures: [n=1] TRUE
[10:49:41.842] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:41.842] |  :  length: 0 (resolved future 1)
[10:49:41.842] |  checking value #1 ... done
[10:49:41.842] |  Relaying remaining futures ...
[10:49:41.842] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:41.842] |  :  .  nx: 1
[10:49:41.842] |  :  .  relay: TRUE
[10:49:41.842] |  :  .  stdout: TRUE
[10:49:41.843] |  :  .  signal: TRUE
[10:49:41.843] |  :  .  resignal: FALSE
[10:49:41.843] |  :  .  force: TRUE
[10:49:41.843] |  :  .  relayed: [n=1] TRUE
[10:49:41.843] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:41.843] |  :  .  relayed: [n=1] TRUE
[10:49:41.843] |  :  .  queued futures: [n=1] TRUE
[10:49:41.843] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:41.843] |  Relaying remaining futures ... done
[10:49:41.843] value() on list ... done
[10:49:41.843]  - Number of value chunks collected: 1
[10:49:41.844] Resolving 1 futures (chunks) ... DONE
[10:49:41.844] Reducing values from 1 chunks ...
[10:49:41.844]  - Number of values collected after concatenation: 3
[10:49:41.844]  - Number of values expected: 3
[10:49:41.844] Reducing values from 1 chunks ... DONE
[10:49:41.844] future_lapply() ... DONE
[10:49:41.845] future_lapply() ...
[10:49:41.845] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.846] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.846] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.846] Number of chunks: 1
[10:49:41.846] getGlobalsAndPackagesXApply() ...
[10:49:41.846]  - future.globals: TRUE
[10:49:41.846] getGlobalsAndPackages() ...
[10:49:41.846] |  Searching for globals ...
[10:49:41.847] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:41.847] |  Searching for globals ... DONE
[10:49:41.847] |  Resolving globals: FALSE
[10:49:41.848] |  Search for packages associated with the globals ...
[10:49:41.848] |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:41.848] |  :  Packages: [2] ‘stats’, ‘base’
[10:49:41.848] |  Search for packages associated with the globals ... DONE
[10:49:41.848] |  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:41.848] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:41.849] |  Packages after dropping 'base': [1] ‘stats’
[10:49:41.849] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:41.849] |  globals: [1] ‘FUN’
[10:49:41.849] |  packages: [1] ‘stats’
[10:49:41.849] getGlobalsAndPackages() ... done
[10:49:41.849]  - globals found/used: [n=1] ‘FUN’
[10:49:41.849]  - needed namespaces: [n=1] ‘stats’
[10:49:41.849] Finding globals ... DONE
[10:49:41.849]  - use_args: TRUE
[10:49:41.849]  - Getting '...' globals ...
[10:49:41.850] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:41.850] |  recursive: 0
[10:49:41.850] |  length: 1
[10:49:41.850] |  elements: ‘...’
[10:49:41.850] |  'obj' is DotDotDotList
[10:49:41.850] |  resolve(obj, ...) ...
[10:49:41.850] |  resolve(obj, ...) ... done
[10:49:41.850] |  length: 0 (resolved future 1)
[10:49:41.851] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:41.851]    - '...' content: [n=0] 
[10:49:41.851] List of 1
[10:49:41.851]  $ ...: list()
[10:49:41.851]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.851]  - attr(*, "where")=List of 1
[10:49:41.851]   ..$ ...:<environment: 0x555d02ebc170> 
[10:49:41.851]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.851]  - attr(*, "resolved")= logi TRUE
[10:49:41.851]  - attr(*, "total_size")= num NA
[10:49:41.854]  - Getting '...' globals ... DONE
[10:49:41.854] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:41.854] List of 2
[10:49:41.854]  $ ...future.FUN:function (x, ...)  
[10:49:41.854]  $ ...          : list()
[10:49:41.854]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.854]  - attr(*, "where")=List of 2
[10:49:41.854]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:41.854]   ..$ ...          :<environment: 0x555d02ebc170> 
[10:49:41.854]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.854]  - attr(*, "resolved")= logi FALSE
[10:49:41.854]  - attr(*, "total_size")= num 5433
[10:49:41.857] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:41.857] getGlobalsAndPackagesXApply() ... DONE
[10:49:41.857] Number of futures (= number of chunks): 1
[10:49:41.857] Launching 1 futures (chunks) ...
[10:49:41.857] Chunk #1 of 1 ...
[10:49:41.858]  - Finding globals in 'X' for chunk #1 ...
[10:49:41.858] getGlobalsAndPackages() ...
[10:49:41.858] |  Searching for globals ...
[10:49:41.858] |  :  globals found: [0] 
[10:49:41.858] |  Searching for globals ... DONE
[10:49:41.858] |  globals: [0] <none>
[10:49:41.858] |  packages: [0] <none>
[10:49:41.858] getGlobalsAndPackages() ... done
[10:49:41.858]    + additional globals found: [n=0] 
[10:49:41.859]    + additional namespaces needed: [n=0] 
[10:49:41.859]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:41.859]  - seeds: <none>
[10:49:41.859]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.859] getGlobalsAndPackages() ...
[10:49:41.859] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.859] |  Resolving globals: FALSE
[10:49:41.859] |  Tweak future expression to call with '...' arguments ...
[10:49:41.859] |  :  {
[10:49:41.859] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.859] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:41.859] |  :      "# as a global variable                                         "
[10:49:41.859] |  :      do.call(function(...) {
[10:49:41.859] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.859] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.859] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.859] |  :              on.exit(options(oopts), add = TRUE)
[10:49:41.859] |  :          }
[10:49:41.859] |  :          {
[10:49:41.859] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.859] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.859] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:41.859] |  :              })
[10:49:41.859] |  :          }
[10:49:41.859] |  :      }, args = future.call.arguments)
[10:49:41.859] |  :  }
[10:49:41.860] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:41.860] |  Search for packages associated with the globals ...
[10:49:41.860] |  :  Packages associated with globals: [1] ‘stats’
[10:49:41.860] |  :  Packages: [1] ‘stats’
[10:49:41.860] |  Search for packages associated with the globals ... DONE
[10:49:41.860] |  Packages after dropping 'base': [1] ‘stats’
[10:49:41.860] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:41.861] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.861] |  packages: [1] ‘stats’
[10:49:41.861] getGlobalsAndPackages() ... done
[10:49:41.861] run() for Future (‘Future’) ...
[10:49:41.861] |  state: ‘created’
[10:49:41.861] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.861] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.861] |  Using SequentialFutureBackend ...
[10:49:41.861] |  :  Launching futures ...
[10:49:41.862] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:41.862] |  :  .  |  getFutureData() ...
[10:49:41.862] |  :  .  |  :  getFutureCore() ...
[10:49:41.862] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:41.862] |  :  .  |  :  getFutureCore() ... done
[10:49:41.862] |  :  .  |  :  getFutureCapture() ...
[10:49:41.862] |  :  .  |  :  getFutureCapture() ... done
[10:49:41.862] |  :  .  |  :  getFutureContext() ...
[10:49:41.862] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.862] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:41.862] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.863] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:41.863] |  :  .  |  :  getFutureContext() ... done
[10:49:41.863] |  :  .  |  getFutureData() ... done
[10:49:41.863] |  :  .  |  attachPackages() ...
[10:49:41.863] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:41.863] |  :  .  |  attachPackages() ... DONE
[10:49:41.863] |  :  .  |  attachPackages() ...
[10:49:41.863] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:41.863] |  :  .  |  attachPackages() ... DONE
[10:49:41.864] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.864] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.864] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.864] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.864] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:41.865] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:41.865] |  :  .  |  :  .  |  New stack:
[10:49:41.865] |  :  .  |  :  .  |  List of 1
[10:49:41.865] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.865] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.865] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.865] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.865] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.865] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:41.865] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.867] |  :  .  |  :  .  |  Old stack:
[10:49:41.867] |  :  .  |  :  .  |  List of 1
[10:49:41.867] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.867] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.867] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.867] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.867] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.867] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:41.867] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.867] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.867] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.867] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.870] |  :  .  |  :  .  |  Not identical
[10:49:41.870] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:41.870] |  :  .  |  :  .  |  :  List of 2
[10:49:41.870] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.870] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.870] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.870] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.870] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.870] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:41.870] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.870] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.870] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.870] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.870] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.870] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.870] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.870] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.870] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.875] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:41.875] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:41.875] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.875] |  :  .  |  :  .  List of future strategies:
[10:49:41.875] |  :  .  |  :  .  1. sequential:
[10:49:41.875] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.875] |  :  .  |  :  .     - tweaked: FALSE
[10:49:41.875] |  :  .  |  :  .     - call: plan(sequential)
[10:49:41.876] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:41.876] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.876] |  :  .  |  assign_globals() ...
[10:49:41.876] |  :  .  |  List of 5
[10:49:41.876] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:41.876] |  :  .  |   $ future.call.arguments    : list()
[10:49:41.876] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.876] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:41.876] |  :  .  |    ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:49:41.876] |  :  .  |    ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:49:41.876] |  :  .  |    ..$ a    : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:49:41.876] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:41.876] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:41.876] |  :  .  |   - attr(*, "where")=List of 5
[10:49:41.876] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:41.876] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:41.876] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:41.876] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:41.876] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:41.876] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:41.876] |  :  .  |   - attr(*, "total_size")= num 5433
[10:49:41.876] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.876] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:41.881] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:41.881] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:41.882] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:41.882] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:41.882] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:41.882] |  :  .  |  assign_globals() ... done
[10:49:41.884] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.884] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.884] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:41.884] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:41.884] |  :  .  |  :  .  |  :  New stack:
[10:49:41.884] |  :  .  |  :  .  |  :  List of 1
[10:49:41.884] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.884] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.884] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.884] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.884] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.884] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.884] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.884] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.884] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.884] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.887] |  :  .  |  :  .  |  :  Old stack:
[10:49:41.887] |  :  .  |  :  .  |  :  List of 1
[10:49:41.887] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.887] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.887] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.887] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.887] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.887] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.887] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.887] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.887] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.887] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.891] |  :  .  |  :  .  |  :  Identical
[10:49:41.891] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:41.891] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.891] |  :  .  |  :  .  |  List of future strategies:
[10:49:41.891] |  :  .  |  :  .  |  1. sequential:
[10:49:41.891] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.891] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:41.891] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:41.891] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:41.891] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.891] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.892] |  :  .  |  SequentialFuture started (and completed)
[10:49:41.892] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:41.892] |  :  Launching futures ... done
[10:49:41.892] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:41.892] |  Using SequentialFutureBackend ... done
[10:49:41.892] run() for Future (‘SequentialFuture’) ... done
[10:49:41.892] Created future:
[10:49:41.892] SequentialFuture:
[10:49:41.892] Label: ‘future_eapply-1’
[10:49:41.892] Expression:
[10:49:41.892] {
[10:49:41.892]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.892]     "# expression in do.call(), because function called uses '...'  "
[10:49:41.892]     "# as a global variable                                         "
[10:49:41.892]     do.call(function(...) {
[10:49:41.892]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.892]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.892]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.892]             on.exit(options(oopts), add = TRUE)
[10:49:41.892]         }
[10:49:41.892]         {
[10:49:41.892]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.892]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.892]                 ...future.FUN(...future.X_jj, ...)
[10:49:41.892]             })
[10:49:41.892]         }
[10:49:41.892]     }, args = future.call.arguments)
[10:49:41.892] }
[10:49:41.892] Lazy evaluation: FALSE
[10:49:41.892] Asynchronous evaluation: TRUE
[10:49:41.892] Local evaluation: TRUE
[10:49:41.892] Environment: R_GlobalEnv
[10:49:41.892] Capture standard output: TRUE
[10:49:41.892] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:41.892] Immediate condition classes: ‘immediateCondition’
[10:49:41.892] Globals: 5 objects totaling 758 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 296 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:41.892] Packages: 1 packages (‘stats’)
[10:49:41.892] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:41.892] Resolved: TRUE
[10:49:41.892] Value: 413 bytes of class ‘list’
[10:49:41.892] Early signaling: FALSE
[10:49:41.892] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:41.892] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:41.893] Chunk #1 of 1 ... DONE
[10:49:41.893] Launching 1 futures (chunks) ... DONE
[10:49:41.893] Resolving 1 futures (chunks) ...
[10:49:41.893] value() on list ...
[10:49:41.894] |  recursive: 0
[10:49:41.894] |  length: 1
[10:49:41.894] |  
[10:49:41.894] |  Number of remaining objects: 1
[10:49:41.894] |  checking value #1 ...
[10:49:41.894] |  :  'obj' is SequentialFuture
[10:49:41.894] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:41.894] |  :  .  state: ‘finished’
[10:49:41.894] |  :  .  run: TRUE
[10:49:41.894] |  :  .  result: ‘FutureResult’
[10:49:41.894] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:41.894] |  :  SequentialFuture #1
[10:49:41.895] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:41.895] |  :  .  nx: 1
[10:49:41.895] |  :  .  relay: TRUE
[10:49:41.895] |  :  .  stdout: TRUE
[10:49:41.895] |  :  .  signal: TRUE
[10:49:41.895] |  :  .  resignal: FALSE
[10:49:41.895] |  :  .  force: TRUE
[10:49:41.895] |  :  .  relayed: [n=1] FALSE
[10:49:41.895] |  :  .  queued futures: [n=1] FALSE
[10:49:41.895] |  :  .  until=1
[10:49:41.895] |  :  .  relaying element #1
[10:49:41.896] |  :  .  relayed: [n=1] TRUE
[10:49:41.896] |  :  .  queued futures: [n=1] TRUE
[10:49:41.896] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:41.896] |  :  value(<SequentialFuture>, ...) ...
[10:49:41.896] |  :  .  value: <list>
[10:49:41.896] |  :  value(<SequentialFuture>, ...) ... done
[10:49:41.896] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:41.896] |  :  .  nx: 1
[10:49:41.896] |  :  .  relay: TRUE
[10:49:41.896] |  :  .  stdout: TRUE
[10:49:41.896] |  :  .  signal: TRUE
[10:49:41.897] |  :  .  resignal: FALSE
[10:49:41.897] |  :  .  force: TRUE
[10:49:41.897] |  :  .  relayed: [n=1] TRUE
[10:49:41.897] |  :  .  queued futures: [n=1] TRUE
[10:49:41.897] |  :  .  until=1
[10:49:41.897] |  :  .  relayed: [n=1] TRUE
[10:49:41.897] |  :  .  queued futures: [n=1] TRUE
[10:49:41.897] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:41.897] |  :  length: 0 (resolved future 1)
[10:49:41.897] |  checking value #1 ... done
[10:49:41.897] |  Relaying remaining futures ...
[10:49:41.897] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:41.898] |  :  .  nx: 1
[10:49:41.898] |  :  .  relay: TRUE
[10:49:41.898] |  :  .  stdout: TRUE
[10:49:41.898] |  :  .  signal: TRUE
[10:49:41.898] |  :  .  resignal: FALSE
[10:49:41.898] |  :  .  force: TRUE
[10:49:41.898] |  :  .  relayed: [n=1] TRUE
[10:49:41.898] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:41.898] |  :  .  relayed: [n=1] TRUE
[10:49:41.898] |  :  .  queued futures: [n=1] TRUE
[10:49:41.898] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:41.899] |  Relaying remaining futures ... done
[10:49:41.899] value() on list ... done
[10:49:41.899]  - Number of value chunks collected: 1
[10:49:41.899] Resolving 1 futures (chunks) ... DONE
[10:49:41.899] Reducing values from 1 chunks ...
[10:49:41.899]  - Number of values collected after concatenation: 3
[10:49:41.899]  - Number of values expected: 3
[10:49:41.899] Reducing values from 1 chunks ... DONE
[10:49:41.899] future_lapply() ... DONE
[10:49:41.899] future_lapply() ...
[10:49:41.900] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.900] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.900] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.900] Number of chunks: 1
[10:49:41.900] getGlobalsAndPackagesXApply() ...
[10:49:41.900]  - future.globals: TRUE
[10:49:41.900] getGlobalsAndPackages() ...
[10:49:41.901] |  Searching for globals ...
[10:49:41.902] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:41.902] |  Searching for globals ... DONE
[10:49:41.902] |  Resolving globals: FALSE
[10:49:41.902] |  Search for packages associated with the globals ...
[10:49:41.902] |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:41.902] |  :  Packages: [2] ‘stats’, ‘base’
[10:49:41.902] |  Search for packages associated with the globals ... DONE
[10:49:41.902] |  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:41.903] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:41.903] |  Packages after dropping 'base': [1] ‘stats’
[10:49:41.903] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:41.903] |  globals: [1] ‘FUN’
[10:49:41.903] |  packages: [1] ‘stats’
[10:49:41.903] getGlobalsAndPackages() ... done
[10:49:41.903]  - globals found/used: [n=1] ‘FUN’
[10:49:41.903]  - needed namespaces: [n=1] ‘stats’
[10:49:41.904] Finding globals ... DONE
[10:49:41.904]  - use_args: TRUE
[10:49:41.904]  - Getting '...' globals ...
[10:49:41.904] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:41.904] |  recursive: 0
[10:49:41.904] |  length: 1
[10:49:41.904] |  elements: ‘...’
[10:49:41.904] |  'obj' is DotDotDotList
[10:49:41.905] |  resolve(obj, ...) ...
[10:49:41.905] |  resolve(obj, ...) ... done
[10:49:41.905] |  length: 0 (resolved future 1)
[10:49:41.905] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:41.905]    - '...' content: [n=0] 
[10:49:41.905] List of 1
[10:49:41.905]  $ ...: list()
[10:49:41.905]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.905]  - attr(*, "where")=List of 1
[10:49:41.905]   ..$ ...:<environment: 0x555d02dcc6e8> 
[10:49:41.905]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.905]  - attr(*, "resolved")= logi TRUE
[10:49:41.905]  - attr(*, "total_size")= num NA
[10:49:41.907]  - Getting '...' globals ... DONE
[10:49:41.908] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:41.908] List of 2
[10:49:41.908]  $ ...future.FUN:function (x, ...)  
[10:49:41.908]  $ ...          : list()
[10:49:41.908]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.908]  - attr(*, "where")=List of 2
[10:49:41.908]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:41.908]   ..$ ...          :<environment: 0x555d02dcc6e8> 
[10:49:41.908]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.908]  - attr(*, "resolved")= logi FALSE
[10:49:41.908]  - attr(*, "total_size")= num 5437
[10:49:41.911] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:41.911] getGlobalsAndPackagesXApply() ... DONE
[10:49:41.911] Number of futures (= number of chunks): 1
[10:49:41.912] Launching 1 futures (chunks) ...
[10:49:41.912] Chunk #1 of 1 ...
[10:49:41.912]  - Finding globals in 'X' for chunk #1 ...
[10:49:41.912] getGlobalsAndPackages() ...
[10:49:41.912] |  Searching for globals ...
[10:49:41.912] |  :  globals found: [0] 
[10:49:41.912] |  Searching for globals ... DONE
[10:49:41.912] |  globals: [0] <none>
[10:49:41.912] |  packages: [0] <none>
[10:49:41.913] getGlobalsAndPackages() ... done
[10:49:41.913]    + additional globals found: [n=0] 
[10:49:41.913]    + additional namespaces needed: [n=0] 
[10:49:41.913]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:41.913]  - seeds: <none>
[10:49:41.913]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.913] getGlobalsAndPackages() ...
[10:49:41.913] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.913] |  Resolving globals: FALSE
[10:49:41.913] |  Tweak future expression to call with '...' arguments ...
[10:49:41.913] |  :  {
[10:49:41.913] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.913] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:41.913] |  :      "# as a global variable                                         "
[10:49:41.913] |  :      do.call(function(...) {
[10:49:41.913] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.913] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.913] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.913] |  :              on.exit(options(oopts), add = TRUE)
[10:49:41.913] |  :          }
[10:49:41.913] |  :          {
[10:49:41.913] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.913] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.913] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:41.913] |  :              })
[10:49:41.913] |  :          }
[10:49:41.913] |  :      }, args = future.call.arguments)
[10:49:41.913] |  :  }
[10:49:41.914] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:41.914] |  Search for packages associated with the globals ...
[10:49:41.914] |  :  Packages associated with globals: [1] ‘stats’
[10:49:41.914] |  :  Packages: [1] ‘stats’
[10:49:41.914] |  Search for packages associated with the globals ... DONE
[10:49:41.915] |  Packages after dropping 'base': [1] ‘stats’
[10:49:41.915] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:41.915] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.915] |  packages: [1] ‘stats’
[10:49:41.915] getGlobalsAndPackages() ... done
[10:49:41.915] run() for Future (‘Future’) ...
[10:49:41.915] |  state: ‘created’
[10:49:41.915] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.915] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.916] |  Using SequentialFutureBackend ...
[10:49:41.916] |  :  Launching futures ...
[10:49:41.916] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:41.916] |  :  .  |  getFutureData() ...
[10:49:41.916] |  :  .  |  :  getFutureCore() ...
[10:49:41.916] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:41.916] |  :  .  |  :  getFutureCore() ... done
[10:49:41.916] |  :  .  |  :  getFutureCapture() ...
[10:49:41.916] |  :  .  |  :  getFutureCapture() ... done
[10:49:41.916] |  :  .  |  :  getFutureContext() ...
[10:49:41.917] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.917] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:41.917] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.917] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:41.917] |  :  .  |  :  getFutureContext() ... done
[10:49:41.917] |  :  .  |  getFutureData() ... done
[10:49:41.917] |  :  .  |  attachPackages() ...
[10:49:41.917] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:41.917] |  :  .  |  attachPackages() ... DONE
[10:49:41.917] |  :  .  |  attachPackages() ...
[10:49:41.918] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:41.918] |  :  .  |  attachPackages() ... DONE
[10:49:41.918] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.918] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.918] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.918] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.919] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:41.919] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:41.919] |  :  .  |  :  .  |  New stack:
[10:49:41.919] |  :  .  |  :  .  |  List of 1
[10:49:41.919] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.919] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.919] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.919] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.919] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.919] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:41.919] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.921] |  :  .  |  :  .  |  Old stack:
[10:49:41.921] |  :  .  |  :  .  |  List of 1
[10:49:41.921] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.921] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.921] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.921] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.921] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.921] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:41.921] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.921] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.921] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.921] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.924] |  :  .  |  :  .  |  Not identical
[10:49:41.924] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:41.924] |  :  .  |  :  .  |  :  List of 2
[10:49:41.924] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.924] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.924] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.924] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.924] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.924] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:41.924] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.924] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.924] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.924] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.924] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.924] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.924] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.924] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.924] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.929] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:41.929] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:41.930] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.930] |  :  .  |  :  .  List of future strategies:
[10:49:41.930] |  :  .  |  :  .  1. sequential:
[10:49:41.930] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.930] |  :  .  |  :  .     - tweaked: FALSE
[10:49:41.930] |  :  .  |  :  .     - call: plan(sequential)
[10:49:41.930] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:41.930] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.930] |  :  .  |  assign_globals() ...
[10:49:41.930] |  :  .  |  List of 5
[10:49:41.930] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:41.930] |  :  .  |   $ future.call.arguments    : list()
[10:49:41.930] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.930] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:41.930] |  :  .  |    ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:49:41.930] |  :  .  |    ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:49:41.930] |  :  .  |    ..$ a    : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:49:41.930] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:41.930] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:41.930] |  :  .  |   - attr(*, "where")=List of 5
[10:49:41.930] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:41.930] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:41.930] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:41.930] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:41.930] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:41.930] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:41.930] |  :  .  |   - attr(*, "total_size")= num 5437
[10:49:41.930] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.930] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:41.936] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:41.936] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:41.936] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:41.936] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:41.936] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:41.936] |  :  .  |  assign_globals() ... done
[10:49:41.938] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.938] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:41.938] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:41.938] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:41.938] |  :  .  |  :  .  |  :  New stack:
[10:49:41.938] |  :  .  |  :  .  |  :  List of 1
[10:49:41.938] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.938] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.938] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.938] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.938] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.938] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.938] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.938] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.938] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.938] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.941] |  :  .  |  :  .  |  :  Old stack:
[10:49:41.941] |  :  .  |  :  .  |  :  List of 1
[10:49:41.941] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.941] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.941] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.941] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.941] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.941] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.941] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.941] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.941] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.941] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.945] |  :  .  |  :  .  |  :  Identical
[10:49:41.945] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:41.945] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.945] |  :  .  |  :  .  |  List of future strategies:
[10:49:41.945] |  :  .  |  :  .  |  1. sequential:
[10:49:41.945] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.945] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:41.945] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:41.946] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:41.946] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.946] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:41.946] |  :  .  |  SequentialFuture started (and completed)
[10:49:41.946] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:41.946] |  :  Launching futures ... done
[10:49:41.946] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:41.946] |  Using SequentialFutureBackend ... done
[10:49:41.947] run() for Future (‘SequentialFuture’) ... done
[10:49:41.947] Created future:
[10:49:41.947] SequentialFuture:
[10:49:41.947] Label: ‘future_eapply-1’
[10:49:41.947] Expression:
[10:49:41.947] {
[10:49:41.947]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.947]     "# expression in do.call(), because function called uses '...'  "
[10:49:41.947]     "# as a global variable                                         "
[10:49:41.947]     do.call(function(...) {
[10:49:41.947]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.947]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.947]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.947]             on.exit(options(oopts), add = TRUE)
[10:49:41.947]         }
[10:49:41.947]         {
[10:49:41.947]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.947]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.947]                 ...future.FUN(...future.X_jj, ...)
[10:49:41.947]             })
[10:49:41.947]         }
[10:49:41.947]     }, args = future.call.arguments)
[10:49:41.947] }
[10:49:41.947] Lazy evaluation: FALSE
[10:49:41.947] Asynchronous evaluation: TRUE
[10:49:41.947] Local evaluation: TRUE
[10:49:41.947] Environment: R_GlobalEnv
[10:49:41.947] Capture standard output: TRUE
[10:49:41.947] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:41.947] Immediate condition classes: ‘immediateCondition’
[10:49:41.947] Globals: 5 objects totaling 758 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 296 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:41.947] Packages: 1 packages (‘stats’)
[10:49:41.947] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:41.947] Resolved: TRUE
[10:49:41.947] Value: 413 bytes of class ‘list’
[10:49:41.947] Early signaling: FALSE
[10:49:41.947] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:41.947] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:41.948] Chunk #1 of 1 ... DONE
[10:49:41.948] Launching 1 futures (chunks) ... DONE
[10:49:41.948] Resolving 1 futures (chunks) ...
[10:49:41.948] value() on list ...
[10:49:41.948] |  recursive: 0
[10:49:41.948] |  length: 1
[10:49:41.948] |  
[10:49:41.948] |  Number of remaining objects: 1
[10:49:41.948] |  checking value #1 ...
[10:49:41.948] |  :  'obj' is SequentialFuture
[10:49:41.948] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:41.948] |  :  .  state: ‘finished’
[10:49:41.949] |  :  .  run: TRUE
[10:49:41.949] |  :  .  result: ‘FutureResult’
[10:49:41.949] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:41.949] |  :  SequentialFuture #1
[10:49:41.949] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:41.949] |  :  .  nx: 1
[10:49:41.949] |  :  .  relay: TRUE
[10:49:41.949] |  :  .  stdout: TRUE
[10:49:41.949] |  :  .  signal: TRUE
[10:49:41.949] |  :  .  resignal: FALSE
[10:49:41.949] |  :  .  force: TRUE
[10:49:41.949] |  :  .  relayed: [n=1] FALSE
[10:49:41.950] |  :  .  queued futures: [n=1] FALSE
[10:49:41.950] |  :  .  until=1
[10:49:41.950] |  :  .  relaying element #1
[10:49:41.950] |  :  .  relayed: [n=1] TRUE
[10:49:41.950] |  :  .  queued futures: [n=1] TRUE
[10:49:41.950] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:41.950] |  :  value(<SequentialFuture>, ...) ...
[10:49:41.950] |  :  .  value: <list>
[10:49:41.950] |  :  value(<SequentialFuture>, ...) ... done
[10:49:41.950] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:41.951] |  :  .  nx: 1
[10:49:41.951] |  :  .  relay: TRUE
[10:49:41.951] |  :  .  stdout: TRUE
[10:49:41.951] |  :  .  signal: TRUE
[10:49:41.951] |  :  .  resignal: FALSE
[10:49:41.951] |  :  .  force: TRUE
[10:49:41.951] |  :  .  relayed: [n=1] TRUE
[10:49:41.951] |  :  .  queued futures: [n=1] TRUE
[10:49:41.951] |  :  .  until=1
[10:49:41.951] |  :  .  relayed: [n=1] TRUE
[10:49:41.951] |  :  .  queued futures: [n=1] TRUE
[10:49:41.951] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:41.952] |  :  length: 0 (resolved future 1)
[10:49:41.952] |  checking value #1 ... done
[10:49:41.952] |  Relaying remaining futures ...
[10:49:41.952] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:41.952] |  :  .  nx: 1
[10:49:41.952] |  :  .  relay: TRUE
[10:49:41.952] |  :  .  stdout: TRUE
[10:49:41.952] |  :  .  signal: TRUE
[10:49:41.952] |  :  .  resignal: FALSE
[10:49:41.952] |  :  .  force: TRUE
[10:49:41.952] |  :  .  relayed: [n=1] TRUE
[10:49:41.952] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:41.953] |  :  .  relayed: [n=1] TRUE
[10:49:41.953] |  :  .  queued futures: [n=1] TRUE
[10:49:41.953] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:41.953] |  Relaying remaining futures ... done
[10:49:41.953] value() on list ... done
[10:49:41.953]  - Number of value chunks collected: 1
[10:49:41.953] Resolving 1 futures (chunks) ... DONE
[10:49:41.953] Reducing values from 1 chunks ...
[10:49:41.953]  - Number of values collected after concatenation: 3
[10:49:41.953]  - Number of values expected: 3
[10:49:41.953] Reducing values from 1 chunks ... DONE
[10:49:41.953] future_lapply() ... DONE
[10:49:41.954] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.954] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:41.954] |  :  all.equal() for FutureStrategyList ...
[10:49:41.954] |  :  .  New stack:
[10:49:41.954] |  :  .  List of 1
[10:49:41.954] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.954] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.954] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.954] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.954] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.954] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:41.954] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.956] |  :  .  Old stack:
[10:49:41.956] |  :  .  List of 1
[10:49:41.956] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.956] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.956] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.956] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.956] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.956] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:41.956] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.956] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.956] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.956] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.959] |  :  .  Not identical
[10:49:41.959] |  :  .  all.equal() for future ...
[10:49:41.959] |  :  .  |  List of 2
[10:49:41.959] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.959] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.959] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.959] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.959] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.959] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:41.959] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.959] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.959] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.959] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.959] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.959] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:41.959] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.959] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.959] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.964] |  :  .  all.equal() for future ... done
[10:49:41.964] |  :  all.equal() for FutureStrategyList ... done
[10:49:41.964] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:41.965] |  :  List of future strategies:
[10:49:41.965] |  :  1. sequential:
[10:49:41.965] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.965] |  :     - tweaked: FALSE
[10:49:41.965] |  :     - call: plan(sequential)
[10:49:41.965] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:41.965] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[10:49:41.965] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.965] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:41.966] |  :  all.equal() for FutureStrategyList ...
[10:49:41.966] |  :  .  New stack:
[10:49:41.966] |  :  .  List of 1
[10:49:41.966] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:41.966] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:41.966] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:41.966] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:41.966] |  :  .      ...)  
[10:49:41.966] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:41.966] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:41.966] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:41.966] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.968] |  :  .  Old stack:
[10:49:41.968] |  :  .  List of 1
[10:49:41.968] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.968] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.968] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.968] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.968] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.968] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:41.968] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.968] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.968] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.968] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.971] |  :  .  Not identical
[10:49:41.971] |  :  .  all.equal() for future ...
[10:49:41.971] |  :  .  |  List of 2
[10:49:41.971] |  :  .  |   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:41.971] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:41.971] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:41.971] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:41.971] |  :  .  |      ...)  
[10:49:41.971] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:41.971] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:41.971] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:41.971] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.971] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:41.971] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.971] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.971] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.971] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:41.971] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d03582a18> 
[10:49:41.971] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.971] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.975] |  :  .  |  Formals differ
[10:49:41.975] |  :  .  all.equal() for future ... done
[10:49:41.975] |  :  .  Future strategies differ at level 1
[10:49:41.975] |  :  all.equal() for FutureStrategyList ... done
[10:49:41.975] |  :  plan(): Setting new future strategy stack:
[10:49:41.975] |  :  List of future strategies:
[10:49:41.975] |  :  1. multicore:
[10:49:41.975] |  :     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:41.975] |  :     - tweaked: FALSE
[10:49:41.975] |  :     - call: plan(strategy)
[10:49:41.976] |  :  List of 1
[10:49:41.976] |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:41.976] |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:41.976] |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:41.976] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:41.976] |  :      ...)  
[10:49:41.976] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:41.976] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:41.976] |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:41.976] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.979] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:41.979] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.979] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.979] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.979] |  :  .  Legacy shutdown of cluster workers ...
[10:49:41.979] |  :  .  |  Stopping existing cluster ...
[10:49:41.980] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:41.980] |  :  .  |  Stopping existing cluster ... done
[10:49:41.980] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:41.980] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:41.980] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:49:41.980] |  :  .  function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:41.980] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:41.980] |  :  .   - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:41.980] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:41.980] |  :  .      ...)  
[10:49:41.980] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:41.980] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:41.980] |  :  .   - attr(*, "call")= language plan(strategy)
[10:49:41.982] |  :  .  init: NULL
[10:49:41.982] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:49:41.982] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.982] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:41.982] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.982] |  :  Backend function: <‘NULL’>
[10:49:41.984] |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:41.984] |  :  plan(): nbrOfWorkers() = 2
[10:49:41.984] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:41.984] plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.984] future_lapply() ...
[10:49:41.985] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.985] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:41.985] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.985] Backend function: <‘NULL’>
[10:49:41.996] Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:41.997] Number of chunks: 2
[10:49:41.997] getGlobalsAndPackagesXApply() ...
[10:49:41.997]  - future.globals: TRUE
[10:49:41.997] getGlobalsAndPackages() ...
[10:49:41.997] |  Searching for globals ...
[10:49:41.998] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:41.999] |  Searching for globals ... DONE
[10:49:41.999] |  Resolving globals: FALSE
[10:49:41.999] |  Search for packages associated with the globals ...
[10:49:41.999] |  :  Packages associated with globals: [1] ‘base’
[10:49:41.999] |  :  Packages: [1] ‘base’
[10:49:41.999] |  Search for packages associated with the globals ... DONE
[10:49:41.999] |  The total size of the 1 globals is 273 bytes (273 bytes)
[10:49:42.000] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 273 bytes There is one global: ‘FUN’ (273 bytes of class ‘function’)
[10:49:42.000] |  Packages after dropping 'base': [0] 
[10:49:42.000] |  globals: [1] ‘FUN’
[10:49:42.000] |  packages: [0] 
[10:49:42.000] getGlobalsAndPackages() ... done
[10:49:42.000]  - globals found/used: [n=1] ‘FUN’
[10:49:42.000]  - needed namespaces: [n=0] 
[10:49:42.000] Finding globals ... DONE
[10:49:42.001]  - use_args: TRUE
[10:49:42.001]  - Getting '...' globals ...
[10:49:42.001] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:42.001] |  recursive: 0
[10:49:42.001] |  length: 1
[10:49:42.001] |  elements: ‘...’
[10:49:42.001] |  'obj' is DotDotDotList
[10:49:42.001] |  resolve(obj, ...) ...
[10:49:42.002] |  resolve(obj, ...) ... done
[10:49:42.002] |  length: 0 (resolved future 1)
[10:49:42.002] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:42.002]    - '...' content: [n=0] 
[10:49:42.002] List of 1
[10:49:42.002]  $ ...: list()
[10:49:42.002]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.002]  - attr(*, "where")=List of 1
[10:49:42.002]   ..$ ...:<environment: 0x555d0147def8> 
[10:49:42.002]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.002]  - attr(*, "resolved")= logi TRUE
[10:49:42.002]  - attr(*, "total_size")= num NA
[10:49:42.004]  - Getting '...' globals ... DONE
[10:49:42.005] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:42.005] List of 2
[10:49:42.005]  $ ...future.FUN:function (x, ...)  
[10:49:42.005]  $ ...          : list()
[10:49:42.005]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.005]  - attr(*, "where")=List of 2
[10:49:42.005]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:42.005]   ..$ ...          :<environment: 0x555d0147def8> 
[10:49:42.005]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.005]  - attr(*, "resolved")= logi FALSE
[10:49:42.005]  - attr(*, "total_size")= num 5249
[10:49:42.007] Packages to be attached in all futures: [n=0] 
[10:49:42.007] getGlobalsAndPackagesXApply() ... DONE
[10:49:42.008] Number of futures (= number of chunks): 2
[10:49:42.008] Launching 2 futures (chunks) ...
[10:49:42.008] Chunk #1 of 2 ...
[10:49:42.008]  - Finding globals in 'X' for chunk #1 ...
[10:49:42.008] getGlobalsAndPackages() ...
[10:49:42.008] |  Searching for globals ...
[10:49:42.008] |  :  globals found: [0] 
[10:49:42.008] |  Searching for globals ... DONE
[10:49:42.009] |  globals: [0] <none>
[10:49:42.009] |  packages: [0] <none>
[10:49:42.009] getGlobalsAndPackages() ... done
[10:49:42.009]    + additional globals found: [n=0] 
[10:49:42.009]    + additional namespaces needed: [n=0] 
[10:49:42.009]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:42.009]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:42.009]  - seeds: <none>
[10:49:42.009]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.009] getGlobalsAndPackages() ...
[10:49:42.009] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.010] |  Resolving globals: FALSE
[10:49:42.010] |  Tweak future expression to call with '...' arguments ...
[10:49:42.010] |  :  {
[10:49:42.010] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.010] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:42.010] |  :      "# as a global variable                                         "
[10:49:42.010] |  :      do.call(function(...) {
[10:49:42.010] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.010] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.010] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.010] |  :              on.exit(options(oopts), add = TRUE)
[10:49:42.010] |  :          }
[10:49:42.010] |  :          {
[10:49:42.010] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.010] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.010] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:42.010] |  :              })
[10:49:42.010] |  :          }
[10:49:42.010] |  :      }, args = future.call.arguments)
[10:49:42.010] |  :  }
[10:49:42.010] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:42.010] |  Search for packages associated with the globals ...
[10:49:42.010] |  :  Packages associated with globals: [1] ‘base’
[10:49:42.011] |  :  Packages: [1] ‘base’
[10:49:42.011] |  Search for packages associated with the globals ... DONE
[10:49:42.011] |  Packages after dropping 'base': [0] 
[10:49:42.011] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.011] |  packages: [0] 
[10:49:42.011] getGlobalsAndPackages() ... done
[10:49:42.011] run() for Future (‘Future’) ...
[10:49:42.011] |  state: ‘created’
[10:49:42.012] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.012] |  :  makeFutureBackend(<multicore>) ...
[10:49:42.012] |  :  .  Backend function: <‘NULL’>
[10:49:42.013] |  :  .  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:42.013] |  :  makeFutureBackend(<multicore>) ... done
[10:49:42.013] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.014] |  Using MulticoreFutureBackend ...
[10:49:42.014] |  :  Launching futures ...
[10:49:42.014] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.014] |  :  .  |  getFutureData() ...
[10:49:42.014] |  :  .  |  :  getFutureCore() ...
[10:49:42.014] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:42.014] |  :  .  |  :  getFutureCore() ... done
[10:49:42.015] |  :  .  |  :  getFutureCapture() ...
[10:49:42.015] |  :  .  |  :  getFutureCapture() ... done
[10:49:42.015] |  :  .  |  :  getFutureContext() ...
[10:49:42.015] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.016] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:42.017] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.017] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:42.017] |  :  .  |  :  getFutureContext() ... done
[10:49:42.017] |  :  .  |  getFutureData() ... done
[10:49:42.017] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.018] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.021] |  :  .  |  MulticoreFuture started
[10:49:42.021] |  :  .  |  attachPackages() ...
[10:49:42.021] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.021] |  :  Launching futures ... done
[10:49:42.021] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:42.022] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.022] |  :  .  |  attachPackages() ... DONE
[10:49:42.022] |  Using MulticoreFutureBackend ... done
[10:49:42.022] |  :  .  |  attachPackages() ...
[10:49:42.022] run() for Future (‘MulticoreFuture’) ... done
[10:49:42.022] |  :  .  |  :  packages: [n=0] 
[10:49:42.023] Created future:
[10:49:42.023] |  :  .  |  attachPackages() ... DONE
[10:49:42.023] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.024] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.024] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.025] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.025] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.025] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:42.025] |  :  .  |  :  .  |  New stack:
[10:49:42.026] |  :  .  |  :  .  |  List of 1
[10:49:42.026] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.026] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.026] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.026] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.026] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.026] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.026] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.030] |  :  .  |  :  .  |  Old stack:
[10:49:42.030] |  :  .  |  :  .  |  List of 1
[10:49:42.030] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.030] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.030] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.030] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.030] |  :  .  |  :  .  |      ...)  
[10:49:42.030] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.030] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.030] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.030] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.030] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.030] |  :  .  |  :  .  |      ...)  
[10:49:42.030] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.030] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.034] |  :  .  |  :  .  |  Not identical
[10:49:42.035] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:42.036] readImmediateCondition() ...
[10:49:42.036]   - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.037]  - Number of RDS files: 0
[10:49:42.037] readImmediateCondition() ... DONE
[10:49:42.023] MulticoreFuture:
[10:49:42.023] Label: ‘future_eapply-1’
[10:49:42.023] Expression:
[10:49:42.023] {
[10:49:42.023]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.023]     "# expression in do.call(), because function called uses '...'  "
[10:49:42.023]     "# as a global variable                                         "
[10:49:42.023]     do.call(function(...) {
[10:49:42.023]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.023]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.023]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.023]             on.exit(options(oopts), add = TRUE)
[10:49:42.023]         }
[10:49:42.023]         {
[10:49:42.023]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.023]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.023]                 ...future.FUN(...future.X_jj, ...)
[10:49:42.023]             })
[10:49:42.023]         }
[10:49:42.023]     }, args = future.call.arguments)
[10:49:42.023] }
[10:49:42.023] Lazy evaluation: FALSE
[10:49:42.023] Asynchronous evaluation: TRUE
[10:49:42.023] Local evaluation: TRUE
[10:49:42.023] Environment: R_GlobalEnv
[10:49:42.023] Capture standard output: TRUE
[10:49:42.023] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:42.023] Immediate condition classes: ‘immediateCondition’
[10:49:42.023] Globals: 5 objects totaling 479 bytes (function ‘...future.FUN’ of 273 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:42.023] Packages: <none>
[10:49:42.023] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:42.023] Resolved: FALSE
[10:49:42.023] Value: <not collected>
[10:49:42.023] Conditions captured: <none>
[10:49:42.023] Early signaling: FALSE
[10:49:42.023] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:42.023] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.037] Chunk #1 of 2 ... DONE
[10:49:42.037] Chunk #2 of 2 ...
[10:49:42.038]  - Finding globals in 'X' for chunk #2 ...
[10:49:42.038] getGlobalsAndPackages() ...
[10:49:42.038] |  Searching for globals ...
[10:49:42.038] |  :  globals found: [0] 
[10:49:42.039] |  Searching for globals ... DONE
[10:49:42.039] |  globals: [0] <none>
[10:49:42.039] |  packages: [0] <none>
[10:49:42.039] getGlobalsAndPackages() ... done
[10:49:42.039]    + additional globals found: [n=0] 
[10:49:42.039]    + additional namespaces needed: [n=0] 
[10:49:42.039]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:42.039]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:42.040]  - seeds: <none>
[10:49:42.040]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.040] getGlobalsAndPackages() ...
[10:49:42.040] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.040] |  Resolving globals: FALSE
[10:49:42.040] |  Tweak future expression to call with '...' arguments ...
[10:49:42.040] |  :  {
[10:49:42.040] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.040] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:42.040] |  :      "# as a global variable                                         "
[10:49:42.040] |  :      do.call(function(...) {
[10:49:42.040] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.040] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.040] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.040] |  :              on.exit(options(oopts), add = TRUE)
[10:49:42.040] |  :          }
[10:49:42.040] |  :          {
[10:49:42.040] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.040] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.040] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:42.040] |  :              })
[10:49:42.040] |  :          }
[10:49:42.040] |  :      }, args = future.call.arguments)
[10:49:42.040] |  :  }
[10:49:42.041] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:42.041] |  Search for packages associated with the globals ...
[10:49:42.035] |  :  .  |  :  .  |  :  List of 2
[10:49:42.035] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.035] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.035] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.035] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.035] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.035] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.035] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.035] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.035] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.035] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.035] |  :  .  |  :  .  |  :      ...)  
[10:49:42.035] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.035] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.035] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.035] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.035] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.035] |  :  .  |  :  .  |  :      ...)  
[10:49:42.035] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.041] |  :  Packages associated with globals: [1] ‘base’
[10:49:42.042] |  :  Packages: [1] ‘base’
[10:49:42.042] |  Search for packages associated with the globals ... DONE
[10:49:42.042] |  :  .  |  :  .  |  :  Formals differ
[10:49:42.042] |  Packages after dropping 'base': [0] 
[10:49:42.042] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:42.042] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.042] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:42.042] |  packages: [0] 
[10:49:42.042] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:42.042] getGlobalsAndPackages() ... done
[10:49:42.042] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:42.043] run() for Future (‘Future’) ...
[10:49:42.043] |  state: ‘created’
[10:49:42.043] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.043] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.043] |  :  .  |  :  .  List of future strategies:
[10:49:42.043] |  :  .  |  :  .  1. sequential:
[10:49:42.043] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:42.043] |  :  .  |  :  .     - tweaked: FALSE
[10:49:42.043] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.043] |  Using MulticoreFutureBackend ...
[10:49:42.043] |  :  Launching futures ...
[10:49:42.044] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.044] |  :  .  |  getFutureData() ...
[10:49:42.044] |  :  .  |  :  getFutureCore() ...
[10:49:42.044] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:42.044] |  :  .  |  :  getFutureCore() ... done
[10:49:42.044] |  :  .  |  :  getFutureCapture() ...
[10:49:42.044] |  :  .  |  :  getFutureCapture() ... done
[10:49:42.044] |  :  .  |  :  getFutureContext() ...
[10:49:42.045] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.045] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:42.045] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.045] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:42.045] |  :  .  |  :  getFutureContext() ... done
[10:49:42.045] |  :  .  |  getFutureData() ... done
[10:49:42.045] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.046] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.043] |  :  .  |  :  .  List of 1
[10:49:42.043] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.043] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.043] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.043] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.043] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.043] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.043] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.047] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.047] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.047] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.047] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:42.047] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.048] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:42.051] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:42.051] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:42.051] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.051] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.051] |  :  .  |  MulticoreFuture started
[10:49:42.052] |  :  .  |  assign_globals() ...
[10:49:42.052] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.052] |  :  Launching futures ... done
[10:49:42.052] |  :  .  |  attachPackages() ...
[10:49:42.052] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.053] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:42.053] |  Using MulticoreFutureBackend ... done
[10:49:42.053] run() for Future (‘MulticoreFuture’) ... done
[10:49:42.053] |  :  .  |  attachPackages() ... DONE
[10:49:42.053] |  :  .  |  attachPackages() ...
[10:49:42.053] Created future:
[10:49:42.053] |  :  .  |  :  packages: [n=0] 
[10:49:42.054] |  :  .  |  attachPackages() ... DONE
[10:49:42.055] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.055] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.055] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.056] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.056] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.057] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:42.057] |  :  .  |  :  .  |  New stack:
[10:49:42.052] |  :  .  |  List of 5
[10:49:42.052] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:42.052] |  :  .  |   $ future.call.arguments    : list()
[10:49:42.052] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.052] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:42.052] |  :  .  |    ..$ : logi [1:4] TRUE FALSE FALSE TRUE
[10:49:42.052] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:42.052] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:42.052] |  :  .  |   - attr(*, "where")=List of 5
[10:49:42.052] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:42.052] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:42.052] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:42.052] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:42.052] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:42.052] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:42.052] |  :  .  |   - attr(*, "total_size")= num 5249
[10:49:42.052] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.052] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:42.057] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:42.057] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:42.057] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:42.058] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:42.058] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:42.058] |  :  .  |  assign_globals() ... done
[10:49:42.060] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.060] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.060] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.060] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:42.060] |  :  .  |  :  .  |  :  New stack:
[10:49:42.057] |  :  .  |  :  .  |  List of 1
[10:49:42.057] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.057] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.057] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.057] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.057] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.057] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.057] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.061] |  :  .  |  :  .  |  Old stack:
[10:49:42.060] |  :  .  |  :  .  |  :  List of 1
[10:49:42.060] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.060] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.060] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.060] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.060] |  :  .  |  :  .  |  :      ...)  
[10:49:42.060] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.060] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.060] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.060] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.060] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.060] |  :  .  |  :  .  |  :      ...)  
[10:49:42.060] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.060] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.064] |  :  .  |  :  .  |  :  Old stack:
[10:49:42.064] |  :  .  |  :  .  |  :  List of 1
[10:49:42.064] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.064] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.064] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.064] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.064] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.064] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.064] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.066] |  :  .  |  :  .  |  :  Not identical
[10:49:42.066] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:42.066] readImmediateCondition() ...
[10:49:42.066]   - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.067]  - Number of RDS files: 0
[10:49:42.067] readImmediateCondition() ... DONE
[10:49:42.054] MulticoreFuture:
[10:49:42.054] Label: ‘future_eapply-2’
[10:49:42.054] Expression:
[10:49:42.054] {
[10:49:42.054]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.054]     "# expression in do.call(), because function called uses '...'  "
[10:49:42.054]     "# as a global variable                                         "
[10:49:42.054]     do.call(function(...) {
[10:49:42.054]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.054]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.054]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.054]             on.exit(options(oopts), add = TRUE)
[10:49:42.054]         }
[10:49:42.054]         {
[10:49:42.054]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.054]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.054]                 ...future.FUN(...future.X_jj, ...)
[10:49:42.054]             })
[10:49:42.054]         }
[10:49:42.054]     }, args = future.call.arguments)
[10:49:42.054] }
[10:49:42.054] Lazy evaluation: FALSE
[10:49:42.054] Asynchronous evaluation: TRUE
[10:49:42.054] Local evaluation: TRUE
[10:49:42.054] Environment: R_GlobalEnv
[10:49:42.054] Capture standard output: TRUE
[10:49:42.054] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:42.054] Immediate condition classes: ‘immediateCondition’
[10:49:42.054] Globals: 5 objects totaling 629 bytes (function ‘...future.FUN’ of 273 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 205 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:42.054] Packages: <none>
[10:49:42.054] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:42.054] Resolved: FALSE
[10:49:42.054] Value: <not collected>
[10:49:42.054] Conditions captured: <none>
[10:49:42.054] Early signaling: FALSE
[10:49:42.054] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:42.054] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.067] Chunk #2 of 2 ... DONE
[10:49:42.068] Launching 2 futures (chunks) ... DONE
[10:49:42.068] Resolving 2 futures (chunks) ...
[10:49:42.068] value() on list ...
[10:49:42.068] |  recursive: 0
[10:49:42.069] |  length: 2
[10:49:42.069] |  
[10:49:42.069] |  Number of remaining objects: 2
[10:49:42.069] |  checking value #1 ...
[10:49:42.069] |  :  'obj' is MulticoreFuture
[10:49:42.061] |  :  .  |  :  .  |  List of 1
[10:49:42.061] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.061] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.061] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.061] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.061] |  :  .  |  :  .  |      ...)  
[10:49:42.061] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.061] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.061] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.061] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.061] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.061] |  :  .  |  :  .  |      ...)  
[10:49:42.061] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.061] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.072] |  :  .  |  :  .  |  Not identical
[10:49:42.072] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:42.072] |  :  .  |  :  .  |  :  List of 2
[10:49:42.072] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.072] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.072] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.072] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.072] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.072] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.072] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.072] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.072] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.072] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.072] |  :  .  |  :  .  |  :      ...)  
[10:49:42.072] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.072] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.072] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.072] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.072] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.072] |  :  .  |  :  .  |  :      ...)  
[10:49:42.072] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.079] |  :  .  |  :  .  |  :  Formals differ
[10:49:42.079] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:42.079] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:42.079] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:42.079] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:42.080] |  :  readImmediateCondition() ...
[10:49:42.080] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.080] |  :  .  |  :  .  List of future strategies:
[10:49:42.080] |  :  .  |  :  .  1. sequential:
[10:49:42.080] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:42.080] |  :  .  |  :  .     - tweaked: FALSE
[10:49:42.080] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.080] |  :   - Number of RDS files: 0
[10:49:42.081] |  :  readImmediateCondition() ... DONE
[10:49:42.081] |  checking value #1 ... done
[10:49:42.081] |  checking value #2 ...
[10:49:42.081] |  :  'obj' is MulticoreFuture
[10:49:42.080] |  :  .  |  :  .  List of 1
[10:49:42.080] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.080] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.080] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.080] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.080] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.080] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.080] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.084] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.084] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.084] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.085] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:42.085] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.085] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:42.085] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:42.085] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:42.086] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.086] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.086] |  :  .  |  assign_globals() ...
[10:49:42.092] |  :  readImmediateCondition() ...
[10:49:42.092] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.086] |  :  .  |  List of 5
[10:49:42.086] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:42.086] |  :  .  |   $ future.call.arguments    : list()
[10:49:42.086] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.086] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:42.086] |  :  .  |    ..$ : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:49:42.086] |  :  .  |    ..$ : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:49:42.086] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:42.086] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:42.086] |  :  .  |   - attr(*, "where")=List of 5
[10:49:42.086] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:42.086] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:42.086] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:42.086] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:42.086] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:42.086] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:42.086] |  :  .  |   - attr(*, "total_size")= num 5249
[10:49:42.086] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.086] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:42.092] |  :   - Number of RDS files: 0
[10:49:42.092] |  :  readImmediateCondition() ... DONE
[10:49:42.092] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:42.092] |  checking value #2 ... done
[10:49:42.103] |  Number of remaining objects: 2
[10:49:42.103] |  checking value #1 ...
[10:49:42.103] |  :  'obj' is MulticoreFuture
[10:49:42.066] |  :  .  |  :  .  |  :  .  List of 2
[10:49:42.066] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.066] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.066] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.066] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.066] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.066] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.066] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.066] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:42.066] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.066] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.066] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.066] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.066] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.066] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.066] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.066] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.066] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.066] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.113] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:42.113] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:42.113] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:42.113] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:42.113] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:42.113] |  :  .  |  :  .  |  List of future strategies:
[10:49:42.113] |  :  .  |  :  .  |  1. multicore:
[10:49:42.113] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:42.113] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:42.113] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:42.114] |  :  readImmediateCondition() ...
[10:49:42.114] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.114] |  :   - Number of RDS files: 0
[10:49:42.115] |  :  readImmediateCondition() ... DONE
[10:49:42.115] |  checking value #1 ... done
[10:49:42.115] |  checking value #2 ...
[10:49:42.115] |  :  'obj' is MulticoreFuture
[10:49:42.114] |  :  .  |  :  .  |  List of 1
[10:49:42.114] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.114] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.114] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.114] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.114] |  :  .  |  :  .  |      ...)  
[10:49:42.114] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.114] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.114] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.114] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.114] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.114] |  :  .  |  :  .  |      ...)  
[10:49:42.114] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.114] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.117] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.117] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.117] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.117] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.117] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.117] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:42.118] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.118] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.118] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.126] |  :  readImmediateCondition() ...
[10:49:42.126] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.126] |  :   - Number of RDS files: 0
[10:49:42.126] |  :  readImmediateCondition() ... DONE
[10:49:42.127] |  checking value #2 ... done
[10:49:42.092] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:42.134] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:42.134] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:42.134] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:42.135] |  :  .  |  assign_globals() ... done
[10:49:42.137] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.137] |  Number of remaining objects: 2
[10:49:42.137] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.137] |  checking value #1 ...
[10:49:42.137] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.137] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:42.137] |  :  'obj' is MulticoreFuture
[10:49:42.137] |  :  .  |  :  .  |  :  New stack:
[10:49:42.138] |  :  readImmediateCondition() ...
[10:49:42.138] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.138] |  :   - Number of RDS files: 0
[10:49:42.138] |  :  readImmediateCondition() ... DONE
[10:49:42.138] |  :  .  |  :  .  |  :  List of 1
[10:49:42.138] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCo[10:49:42.142] |  :  MulticoreFuture #1
res(constraints = "multicore"), gc = FALSE, 
[10:49:42.138] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.138] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.138] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.138] |  :  .  |  :  .  |  :      ...)  
[10:49:42.138] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.138] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.138] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.138] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.138] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.138] |  :  .  |  :  .  |  :      ...)  
[10:49:42.138] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.138] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.142] |  :  .  |  :  .  |  :  Old stack:
[10:49:42.142] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:42.143] |  :  .  nx: 2
[10:49:42.143] |  :  .  relay: TRUE
[10:49:42.143] |  :  .  stdout: TRUE
[10:49:42.143] |  :  .  signal: TRUE
[10:49:42.143] |  :  .  resignal: FALSE
[10:49:42.143] |  :  .  force: TRUE
[10:49:42.144] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:42.144] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:42.144] |  :  .  until=1
[10:49:42.144] |  :  .  relaying element #1
[10:49:42.142] |  :  .  |  :  .  |  :  List of 1
[10:49:42.142] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.142] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.142] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.142] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.142] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.142] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.142] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.146] |  :  .  |  :  .  |  :  Not identical
[10:49:42.146] |  :  .  result() for MulticoreFuture ...
[10:49:42.146] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:42.147] |  :  .  |  readImmediateCondition() ...
[10:49:42.147] |  :  .  |    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.148] |  :  .  |   - Number of RDS files: 0
[10:49:42.148] |  :  .  |  readImmediateCondition() ... DONE
[10:49:42.148] |  :  .  |  result() for MulticoreFuture ...
[10:49:42.148] |  :  .  |  result() for MulticoreFuture ... done
[10:49:42.148] |  :  .  result() for MulticoreFuture ... done
[10:49:42.149] |  :  .  result() for MulticoreFuture ...
[10:49:42.149] |  :  .  result() for MulticoreFuture ... done
[10:49:42.149] |  :  .  result() for MulticoreFuture ...
[10:49:42.149] |  :  .  result() for MulticoreFuture ... done
[10:49:42.150] |  :  .  result() for MulticoreFuture ...
[10:49:42.150] |  :  .  result() for MulticoreFuture ... done
[10:49:42.150] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.150] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.150] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:42.151] |  :  value(<MulticoreFuture>, ...) ...
[10:49:42.151] |  :  .  result() for MulticoreFuture ...
[10:49:42.151] |  :  .  result() for MulticoreFuture ... done
[10:49:42.151] |  :  .  result() for MulticoreFuture ...
[10:49:42.151] |  :  .  result() for MulticoreFuture ... done
[10:49:42.152] |  :  .  value: <list>
[10:49:42.152] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:42.152] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:42.152] |  :  .  nx: 2
[10:49:42.152] |  :  .  relay: TRUE
[10:49:42.153] |  :  .  stdout: TRUE
[10:49:42.153] |  :  .  signal: TRUE
[10:49:42.153] |  :  .  resignal: FALSE
[10:49:42.153] |  :  .  force: TRUE
[10:49:42.153] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.153] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.153] |  :  .  until=2
[10:49:42.153] |  :  .  relaying element #2
[10:49:42.146] |  :  .  |  :  .  |  :  .  List of 2
[10:49:42.146] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.146] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.146] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.146] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.146] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.146] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.146] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.146] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:42.146] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.146] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.146] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.146] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.146] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.146] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.146] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.146] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.146] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.146] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.154] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.154] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.154] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:42.154] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:42.154] |  :  length: 1 (resolved future 1)
[10:49:42.154] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:42.154] |  checking value #1 ... done
[10:49:42.154] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:42.154] |  checking value #2 ...
[10:49:42.154] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:42.154] |  :  'obj' is MulticoreFuture
[10:49:42.154] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:42.154] |  :  .  |  :  .  |  List of future strategies:
[10:49:42.154] |  :  .  |  :  .  |  1. multicore:
[10:49:42.154] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:42.154] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:42.154] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:42.155] |  :  .  |  :  .  |  List of 1
[10:49:42.155] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.155] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.155] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.155] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.155] |  :  .  |  :  .  |      ...)  
[10:49:42.155] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.155] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.155] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.155] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.155] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.155] |  :  .  |  :  .  |      ...)  
[10:49:42.155] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.155] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.158] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.158] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.158] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.158] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.158] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.159] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:42.159] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.159] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.159] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.159] |  :  readImmediateCondition() ...
[10:49:42.159] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.159] |  :   - Number of RDS files: 0
[10:49:42.160] |  :  readImmediateCondition() ... DONE
[10:49:42.160] |  :  MulticoreFuture #2
[10:49:42.160] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:42.160] |  :  .  nx: 2
[10:49:42.160] |  :  .  relay: TRUE
[10:49:42.160] |  :  .  stdout: TRUE
[10:49:42.160] |  :  .  signal: TRUE
[10:49:42.160] |  :  .  resignal: FALSE
[10:49:42.160] |  :  .  force: TRUE
[10:49:42.161] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.161] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.161] |  :  .  until=2
[10:49:42.161] |  :  .  relaying element #2
[10:49:42.161] |  :  .  result() for MulticoreFuture ...
[10:49:42.161] |  :  .  |  readImmediateCondition() ...
[10:49:42.162] |  :  .  |    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.162] |  :  .  |   - Number of RDS files: 0
[10:49:42.162] |  :  .  |  readImmediateCondition() ... DONE
[10:49:42.162] |  :  .  |  result() for MulticoreFuture ...
[10:49:42.162] |  :  .  |  result() for MulticoreFuture ... done
[10:49:42.162] |  :  .  result() for MulticoreFuture ... done
[10:49:42.162] |  :  .  result() for MulticoreFuture ...
[10:49:42.163] |  :  .  result() for MulticoreFuture ... done
[10:49:42.163] |  :  .  result() for MulticoreFuture ...
[10:49:42.163] |  :  .  result() for MulticoreFuture ... done
[10:49:42.163] |  :  .  result() for MulticoreFuture ...
[10:49:42.163] |  :  .  result() for MulticoreFuture ... done
[10:49:42.163] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.163] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.163] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:42.164] |  :  value(<MulticoreFuture>, ...) ...
[10:49:42.164] |  :  .  result() for MulticoreFuture ...
[10:49:42.164] |  :  .  result() for MulticoreFuture ... done
[10:49:42.164] |  :  .  result() for MulticoreFuture ...
[10:49:42.164] |  :  .  result() for MulticoreFuture ... done
[10:49:42.164] |  :  .  value: <list>
[10:49:42.164] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:42.164] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:42.165] |  :  .  nx: 2
[10:49:42.165] |  :  .  relay: TRUE
[10:49:42.165] |  :  .  stdout: TRUE
[10:49:42.165] |  :  .  signal: TRUE
[10:49:42.165] |  :  .  resignal: FALSE
[10:49:42.165] |  :  .  force: TRUE
[10:49:42.165] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.165] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.165] |  :  .  until=2
[10:49:42.165] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.166] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.166] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:42.166] |  :  length: 0 (resolved future 2)
[10:49:42.166] |  checking value #2 ... done
[10:49:42.166] |  Relaying remaining futures ...
[10:49:42.166] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:42.166] |  :  .  nx: 2
[10:49:42.166] |  :  .  relay: TRUE
[10:49:42.166] |  :  .  stdout: TRUE
[10:49:42.166] |  :  .  signal: TRUE
[10:49:42.166] |  :  .  resignal: FALSE
[10:49:42.167] |  :  .  force: TRUE
[10:49:42.167] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.167] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:42.167] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.167] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.167] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:42.167] |  Relaying remaining futures ... done
[10:49:42.167] value() on list ... done
[10:49:42.167]  - Number of value chunks collected: 2
[10:49:42.168] Resolving 2 futures (chunks) ... DONE
[10:49:42.168] Reducing values from 2 chunks ...
[10:49:42.168]  - Number of values collected after concatenation: 3
[10:49:42.168]  - Number of values expected: 3
[10:49:42.168] Reducing values from 2 chunks ... DONE
[10:49:42.168] future_lapply() ... DONE
[10:49:42.169] future_lapply() ...
[10:49:42.169] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.170] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.170] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.170] Number of chunks: 2
[10:49:42.170] getGlobalsAndPackagesXApply() ...
[10:49:42.170]  - future.globals: TRUE
[10:49:42.170] getGlobalsAndPackages() ...
[10:49:42.171] |  Searching for globals ...
[10:49:42.172] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:42.172] |  Searching for globals ... DONE
[10:49:42.172] |  Resolving globals: FALSE
[10:49:42.205] |  Search for packages associated with the globals ...
[10:49:42.205] |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:42.205] |  :  Packages: [2] ‘stats’, ‘base’
[10:49:42.206] |  Search for packages associated with the globals ... DONE
[10:49:42.206] |  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:42.206] |  The total size of the 1 globals exported for future expression (‘FUN(probs = c(0.25, 0.5, 0.75))’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:42.206] |  Packages after dropping 'base': [1] ‘stats’
[10:49:42.206] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:42.207] |  globals: [1] ‘FUN’
[10:49:42.207] |  packages: [1] ‘stats’
[10:49:42.207] getGlobalsAndPackages() ... done
[10:49:42.207]  - globals found/used: [n=1] ‘FUN’
[10:49:42.207]  - needed namespaces: [n=1] ‘stats’
[10:49:42.207] Finding globals ... DONE
[10:49:42.207]  - use_args: TRUE
[10:49:42.207]  - Getting '...' globals ...
[10:49:42.208] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:42.208] |  recursive: 0
[10:49:42.208] |  length: 1
[10:49:42.208] |  elements: ‘...’
[10:49:42.208] |  'obj' is DotDotDotList
[10:49:42.208] |  resolve(obj, ...) ...
[10:49:42.208] |  resolve(obj, ...) ... done
[10:49:42.209] |  length: 0 (resolved future 1)
[10:49:42.209] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:42.209]    - '...' content: [n=1] ‘probs’
[10:49:42.209] List of 1
[10:49:42.209]  $ ...:List of 1
[10:49:42.209]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:49:42.209]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.209]  - attr(*, "where")=List of 1
[10:49:42.209]   ..$ ...:<environment: 0x555d035e72e8> 
[10:49:42.209]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.209]  - attr(*, "resolved")= logi TRUE
[10:49:42.209]  - attr(*, "total_size")= num NA
[10:49:42.212]  - Getting '...' globals ... DONE
[10:49:42.212] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:42.212] List of 2
[10:49:42.212]  $ ...future.FUN:function (x, ...)  
[10:49:42.212]  $ ...          :List of 1
[10:49:42.212]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:49:42.212]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.212]  - attr(*, "where")=List of 2
[10:49:42.212]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:42.212]   ..$ ...          :<environment: 0x555d035e72e8> 
[10:49:42.212]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.212]  - attr(*, "resolved")= logi FALSE
[10:49:42.212]  - attr(*, "total_size")= num 6525
[10:49:42.215] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:42.215] getGlobalsAndPackagesXApply() ... DONE
[10:49:42.215] Number of futures (= number of chunks): 2
[10:49:42.216] Launching 2 futures (chunks) ...
[10:49:42.216] Chunk #1 of 2 ...
[10:49:42.216]  - Finding globals in 'X' for chunk #1 ...
[10:49:42.216] getGlobalsAndPackages() ...
[10:49:42.216] |  Searching for globals ...
[10:49:42.216] |  :  globals found: [0] 
[10:49:42.216] |  Searching for globals ... DONE
[10:49:42.216] |  globals: [0] <none>
[10:49:42.217] |  packages: [0] <none>
[10:49:42.217] getGlobalsAndPackages() ... done
[10:49:42.217]    + additional globals found: [n=0] 
[10:49:42.217]    + additional namespaces needed: [n=0] 
[10:49:42.217]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:42.217]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:42.217]  - seeds: <none>
[10:49:42.217]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.217] getGlobalsAndPackages() ...
[10:49:42.217] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.217] |  Resolving globals: FALSE
[10:49:42.218] |  Tweak future expression to call with '...' arguments ...
[10:49:42.218] |  :  {
[10:49:42.218] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.218] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:42.218] |  :      "# as a global variable                                         "
[10:49:42.218] |  :      do.call(function(...) {
[10:49:42.218] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.218] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.218] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.218] |  :              on.exit(options(oopts), add = TRUE)
[10:49:42.218] |  :          }
[10:49:42.218] |  :          {
[10:49:42.218] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.218] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.218] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:42.218] |  :              })
[10:49:42.218] |  :          }
[10:49:42.218] |  :      }, args = future.call.arguments)
[10:49:42.218] |  :  }
[10:49:42.218] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:42.218] |  Search for packages associated with the globals ...
[10:49:42.218] |  :  Packages associated with globals: [1] ‘stats’
[10:49:42.219] |  :  Packages: [1] ‘stats’
[10:49:42.219] |  Search for packages associated with the globals ... DONE
[10:49:42.219] |  Packages after dropping 'base': [1] ‘stats’
[10:49:42.219] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:42.219] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.219] |  packages: [1] ‘stats’
[10:49:42.219] getGlobalsAndPackages() ... done
[10:49:42.219] run() for Future (‘Future’) ...
[10:49:42.220] |  state: ‘created’
[10:49:42.220] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.220] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.220] |  Using MulticoreFutureBackend ...
[10:49:42.220] |  :  Launching futures ...
[10:49:42.220] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.220] |  :  .  |  getFutureData() ...
[10:49:42.220] |  :  .  |  :  getFutureCore() ...
[10:49:42.220] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:42.220] |  :  .  |  :  getFutureCore() ... done
[10:49:42.221] |  :  .  |  :  getFutureCapture() ...
[10:49:42.221] |  :  .  |  :  getFutureCapture() ... done
[10:49:42.221] |  :  .  |  :  getFutureContext() ...
[10:49:42.221] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.221] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:42.221] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.221] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:42.221] |  :  .  |  :  getFutureContext() ... done
[10:49:42.221] |  :  .  |  getFutureData() ... done
[10:49:42.222] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.222] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.224] |  :  .  |  MulticoreFuture started
[10:49:42.224] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.224] |  :  Launching futures ... done
[10:49:42.225] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.225] |  :  .  |  attachPackages() ...
[10:49:42.225] |  Using MulticoreFutureBackend ... done
[10:49:42.225] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:42.225] run() for Future (‘MulticoreFuture’) ... done
[10:49:42.225] Created future:
[10:49:42.225] |  :  .  |  attachPackages() ... DONE
[10:49:42.226] |  :  .  |  attachPackages() ...
[10:49:42.226] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:42.226] |  :  .  |  attachPackages() ... DONE
[10:49:42.227] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.227] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.228] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.228] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.228] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.229] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:42.229] |  :  .  |  :  .  |  New stack:
[10:49:42.229] |  :  .  |  :  .  |  List of 1
[10:49:42.229] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.229] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.229] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.229] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.229] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.229] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.229] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.237] readImmediateCondition() ...
[10:49:42.238]   - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.238] |  :  .  |  :  .  |  Old stack:
[10:49:42.238]  - Number of RDS files: 0
[10:49:42.238] readImmediateCondition() ... DONE
[10:49:42.226] MulticoreFuture:
[10:49:42.226] Label: ‘future_eapply-1’
[10:49:42.226] Expression:
[10:49:42.226] {
[10:49:42.226]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.226]     "# expression in do.call(), because function called uses '...'  "
[10:49:42.226]     "# as a global variable                                         "
[10:49:42.226]     do.call(function(...) {
[10:49:42.226]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.226]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.226]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.226]             on.exit(options(oopts), add = TRUE)
[10:49:42.226]         }
[10:49:42.226]         {
[10:49:42.226]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.226]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.226]                 ...future.FUN(...future.X_jj, ...)
[10:49:42.226]             })
[10:49:42.226]         }
[10:49:42.226]     }, args = future.call.arguments)
[10:49:42.226] }
[10:49:42.226] Lazy evaluation: FALSE
[10:49:42.226] Asynchronous evaluation: TRUE
[10:49:42.226] Local evaluation: TRUE
[10:49:42.226] Environment: R_GlobalEnv
[10:49:42.226] Capture standard output: TRUE
[10:49:42.226] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:42.226] Immediate condition classes: ‘immediateCondition’
[10:49:42.226] Globals: 5 objects totaling 637 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 171 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:42.226] Packages: 1 packages (‘stats’)
[10:49:42.226] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:42.226] Resolved: FALSE
[10:49:42.226] Value: <not collected>
[10:49:42.226] Conditions captured: <none>
[10:49:42.226] Early signaling: FALSE
[10:49:42.226] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:42.226] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.239] Chunk #1 of 2 ... DONE
[10:49:42.239] Chunk #2 of 2 ...
[10:49:42.239]  - Finding globals in 'X' for chunk #2 ...
[10:49:42.239] getGlobalsAndPackages() ...
[10:49:42.239] |  Searching for globals ...
[10:49:42.240] |  :  globals found: [0] 
[10:49:42.240] |  Searching for globals ... DONE
[10:49:42.240] |  globals: [0] <none>
[10:49:42.240] |  packages: [0] <none>
[10:49:42.240] getGlobalsAndPackages() ... done
[10:49:42.242]    + additional globals found: [n=0] 
[10:49:42.242]    + additional namespaces needed: [n=0] 
[10:49:42.243]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:42.243]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:42.243]  - seeds: <none>
[10:49:42.243]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.243] getGlobalsAndPackages() ...
[10:49:42.238] |  :  .  |  :  .  |  List of 1
[10:49:42.238] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.238] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.238] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.238] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.238] |  :  .  |  :  .  |      ...)  
[10:49:42.238] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.238] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.238] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.238] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.238] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.238] |  :  .  |  :  .  |      ...)  
[10:49:42.238] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.238] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.244] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.244] |  :  .  |  :  .  |  Not identical
[10:49:42.244] |  Resolving globals: FALSE
[10:49:42.244] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:42.244] |  Tweak future expression to call with '...' arguments ...
[10:49:42.244] |  :  {
[10:49:42.244] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.244] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:42.244] |  :      "# as a global variable                                         "
[10:49:42.244] |  :      do.call(function(...) {
[10:49:42.244] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.244] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.244] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.244] |  :              on.exit(options(oopts), add = TRUE)
[10:49:42.244] |  :          }
[10:49:42.244] |  :          {
[10:49:42.244] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.244] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.244] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:42.244] |  :              })
[10:49:42.244] |  :          }
[10:49:42.244] |  :      }, args = future.call.arguments)
[10:49:42.244] |  :  }
[10:49:42.245] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:42.245] |  Search for packages associated with the globals ...
[10:49:42.245] |  :  Packages associated with globals: [1] ‘stats’
[10:49:42.246] |  :  Packages: [1] ‘stats’
[10:49:42.246] |  Search for packages associated with the globals ... DONE
[10:49:42.246] |  Packages after dropping 'base': [1] ‘stats’
[10:49:42.246] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:42.247] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.247] |  packages: [1] ‘stats’
[10:49:42.247] getGlobalsAndPackages() ... done
[10:49:42.247] run() for Future (‘Future’) ...
[10:49:42.247] |  state: ‘created’
[10:49:42.248] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.248] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.248] |  Using MulticoreFutureBackend ...
[10:49:42.248] |  :  Launching futures ...
[10:49:42.248] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.248] |  :  .  |  getFutureData() ...
[10:49:42.248] |  :  .  |  :  getFutureCore() ...
[10:49:42.249] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:42.249] |  :  .  |  :  getFutureCore() ... done
[10:49:42.249] |  :  .  |  :  getFutureCapture() ...
[10:49:42.249] |  :  .  |  :  getFutureCapture() ... done
[10:49:42.249] |  :  .  |  :  getFutureContext() ...
[10:49:42.249] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.249] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:42.250] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.250] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:42.244] |  :  .  |  :  .  |  :  List of 2
[10:49:42.244] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.244] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.244] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.244] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.244] |  :  .  |  :  .  |  :      ...)  
[10:49:42.244] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.244] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.244] |  :  .  |  :  .  |  :      ...)  
[10:49:42.244] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.250] |  :  .  |  :  getFutureContext() ... done
[10:49:42.250] |  :  .  |  getFutureData() ... done
[10:49:42.250] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.250] |  :  .  |  :  .  |  :  Formals differ
[10:49:42.251] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.251] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:42.251] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:42.251] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:42.251] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:42.251] |  :  .  |  :  .  List of future strategies:
[10:49:42.251] |  :  .  |  :  .  1. sequential:
[10:49:42.251] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:42.251] |  :  .  |  :  .     - tweaked: FALSE
[10:49:42.251] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.253] |  :  .  |  MulticoreFuture started
[10:49:42.253] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.254] |  :  Launching futures ... done
[10:49:42.254] |  :  .  |  attachPackages() ...
[10:49:42.254] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:42.254] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.252] |  :  .  |  :  .  List of 1
[10:49:42.252] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.252] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.252] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.252] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.252] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.252] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.252] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.254] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.254] |  Using MulticoreFutureBackend ... done
[10:49:42.255] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.255] |  :  .  |  attachPackages() ... DONE
[10:49:42.255] run() for Future (‘MulticoreFuture’) ... done
[10:49:42.255] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.255] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:42.255] |  :  .  |  attachPackages() ...
[10:49:42.255] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.255] Created future:
[10:49:42.255] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:42.255] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:42.255] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:42.256] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:42.256] |  :  .  |  attachPackages() ... DONE
[10:49:42.256] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.256] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.256] |  :  .  |  assign_globals() ...
[10:49:42.257] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.257] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.258] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.258] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.259] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.259] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:42.259] |  :  .  |  :  .  |  New stack:
[10:49:42.259] |  :  .  |  :  .  |  List of 1
[10:49:42.259] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.259] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.259] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.259] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.259] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.259] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.259] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.263] |  :  .  |  :  .  |  Old stack:
[10:49:42.256] |  :  .  |  List of 5
[10:49:42.256] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:42.256] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:42.256] |  :  .  |    ..$ probs: num [1:3] 0.25 0.5 0.75
[10:49:42.256] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.256] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:42.256] |  :  .  |    ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:49:42.256] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:42.256] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:42.256] |  :  .  |   - attr(*, "where")=List of 5
[10:49:42.256] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:42.256] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:42.256] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:42.256] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:42.256] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:42.256] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:42.256] |  :  .  |   - attr(*, "total_size")= num 6525
[10:49:42.256] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.256] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:42.264] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:42.264] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:42.264] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:42.264] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:42.264] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:42.264] |  :  .  |  assign_globals() ... done
[10:49:42.267] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.267] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.267] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.267] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:42.267] |  :  .  |  :  .  |  :  New stack:
[10:49:42.268] readImmediateCondition() ...
[10:49:42.268]   - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.268]  - Number of RDS files: 0
[10:49:42.269] readImmediateCondition() ... DONE
[10:49:42.263] |  :  .  |  :  .  |  List of 1
[10:49:42.263] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.263] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.263] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.263] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.263] |  :  .  |  :  .  |      ...)  
[10:49:42.263] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.263] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.263] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.263] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.263] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.263] |  :  .  |  :  .  |      ...)  
[10:49:42.263] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.263] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.269] |  :  .  |  :  .  |  Not identical
[10:49:42.255] MulticoreFuture:
[10:49:42.255] Label: ‘future_eapply-2’
[10:49:42.255] Expression:
[10:49:42.255] {
[10:49:42.255]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.255]     "# expression in do.call(), because function called uses '...'  "
[10:49:42.255]     "# as a global variable                                         "
[10:49:42.255]     do.call(function(...) {
[10:49:42.255]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.255]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.255]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.255]             on.exit(options(oopts), add = TRUE)
[10:49:42.255]         }
[10:49:42.255]         {
[10:49:42.255]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.255]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.255]                 ...future.FUN(...future.X_jj, ...)
[10:49:42.255]             })
[10:49:42.255]         }
[10:49:42.255]     }, args = future.call.arguments)
[10:49:42.255] }
[10:49:42.255] Lazy evaluation: FALSE
[10:49:42.255] Asynchronous evaluation: TRUE
[10:49:42.255] Local evaluation: TRUE
[10:49:42.255] Environment: R_GlobalEnv
[10:49:42.255] Capture standard output: TRUE
[10:49:42.255] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:42.255] Immediate condition classes: ‘immediateCondition’
[10:49:42.255] Globals: 5 objects totaling 795 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 171 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:42.255] Packages: 1 packages (‘stats’)
[10:49:42.255] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:42.255] Resolved: FALSE
[10:49:42.255] Value: <not collected>
[10:49:42.255] Conditions captured: <none>
[10:49:42.255] Early signaling: FALSE
[10:49:42.255] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:42.255] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.269] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:42.269] Chunk #2 of 2 ... DONE
[10:49:42.270] Launching 2 futures (chunks) ... DONE
[10:49:42.270] Resolving 2 futures (chunks) ...
[10:49:42.267] |  :  .  |  :  .  |  :  List of 1
[10:49:42.267] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.267] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.267] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.267] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.267] |  :  .  |  :  .  |  :      ...)  
[10:49:42.267] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.267] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.267] |  :  .  |[10:49:42.270] value() on list ...
  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.267] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.267] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.267] |  :  .  |  :  .  |  :      ...)  
[10:49:42.267] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.267] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.270] |  :  .  |  :  .  |  :  Old stack:
[10:49:42.270] |  recursive: 0
[10:49:42.270] |  length: 2
[10:49:42.271] |  
[10:49:42.271] |  Number of remaining objects: 2
[10:49:42.271] |  checking value #1 ...
[10:49:42.271] |  :  'obj' is MulticoreFuture
[10:49:42.270] |  :  .  |  :  .  |  :  List of 1
[10:49:42.270] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.270] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.270] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.270] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.270] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.270] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.270] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.272] |  :  .  |  :  .  |  :  Not identical
[10:49:42.272] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:42.273] |  :  .  |  :  .  |  :  .  List of 2
[10:49:42.273] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.273] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.273] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.273] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.273] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.273] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.273] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.273] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:42.273] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.273] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.273] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.273] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.273] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.273] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.273] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.273] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.273] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.273] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.277] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:42.269] |  :  .  |  :  .  |  :  List of 2
[10:49:42.269] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.269] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.269] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.269] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.269] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.269] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.269] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.269] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.269] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.269] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.269] |  :  .  |  :  .  |  :      ...)  
[10:49:42.269] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.269] |  :  .  |  :  .  |  :    ..- attr(*, "tweakab[10:49:42.277] |  :  .  |  :  .  |  :  all.equal() for future ... done
le")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.269] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.269] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.269] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.269] |  :  .  |  :  .  |  :      ...)  
[10:49:42.269] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.277] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:42.277] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:42.277] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:42.277] |  :  .  |  :  .  |  List of future strategies:
[10:49:42.277] |  :  .  |  :  .  |  1. multicore:
[10:49:42.277] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:42.277] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:42.277] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:42.278] |  :  .  |  :  .  |  :  Formals differ
[10:49:42.278] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:42.278] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:42.278] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:42.278] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:42.279] |  :  .  |  :  .  List of future strategies:
[10:49:42.279] |  :  .  |  :  .  1. sequential:
[10:49:42.279] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:42.279] |  :  .  |  :  .     - tweaked: FALSE
[10:49:42.279] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.278] |  :  .  |  :  .  |  List of 1
[10:49:42.278] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.278] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.278] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.278] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.278] |  :  .  |  :  .  |      ...)  
[10:49:42.278] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.278] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.278] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.278] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.278] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.278] |  :  .  |  :  .  |      ...)  
[10:49:42.278] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.278] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.281] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.281] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.281] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.282] |  :  readImmediateCondition() ...
[10:49:42.282] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.281] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.282] |  :   - Number of RDS files: 0
[10:49:42.282] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.282] |  :  readImmediateCondition() ... DONE
[10:49:42.282] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:42.282] |  checking value #1 ... done
[10:49:42.283] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.283] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.283] |  checking value #2 ...
[10:49:42.283] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.283] |  :  'obj' is MulticoreFuture
[10:49:42.279] |  :  .  |  :  .  List of 1
[10:49:42.279] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.279] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.279] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.279] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.279] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.279] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.279] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.286] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.286] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.287] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.287] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:42.287] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.287] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:42.288] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:42.288] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:42.288] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.288] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.288] |  :  .  |  assign_globals() ...
[10:49:42.293] |  :  readImmediateCondition() ...
[10:49:42.293] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.294] |  :   - Number of RDS files: 0
[10:49:42.294] |  :  readImmediateCondition() ... DONE
[10:49:42.294] |  checking value #2 ... done
[10:49:42.289] |  :  .  |  List of 5
[10:49:42.289] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:42.289] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:42.289] |  :  .  |    ..$ probs: num [1:3] 0.25 0.5 0.75
[10:49:42.289] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.289] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:42.289] |  :  .  |    ..$ beta: num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:49:42.289] |  :  .  |    ..$ a   : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:49:42.289] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:42.289] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:42.289] |  :  .  |   - attr(*, "where")=List of 5
[10:49:42.289] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:42.289] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:42.289] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:42.289] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:42.289] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:42.289] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:42.289] |  :  .  |   - attr(*, "total_size")= num 6525
[10:49:42.289] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.289] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:42.296] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:42.296] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:42.296] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:42.296] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:42.297] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:42.297] |  :  .  |  assign_globals() ... done
[10:49:42.299] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.300] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.300] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.300] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:42.300] |  :  .  |  :  .  |  :  New stack:
[10:49:42.300] |  :  .  |  :  .  |  :  List of 1
[10:49:42.300] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.300] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.300] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.300] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.300] |  :  .  |  :  .  |  :      ...)  
[10:49:42.300] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.300] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.300] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.300] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.300] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.300] |  :  .  |  :  .  |  :      ...)  
[10:49:42.300] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.300] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.303] |  :  .  |  :  .  |  :  Old stack:
[10:49:42.304] |  Number of remaining objects: 2
[10:49:42.305] |  checking value #1 ...
[10:49:42.305] |  :  'obj' is MulticoreFuture
[10:49:42.305] |  :  readImmediateCondition() ...
[10:49:42.305] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.306] |  :   - Number of RDS files: 0
[10:49:42.306] |  :  readImmediateCondition() ... DONE
[10:49:42.303] |  :  .  |  :  .  |  :  List of 1
[10:49:42.303] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.303] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.303] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.303] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.303] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.303] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.303] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.306] |  :  MulticoreFuture #1
[10:49:42.306] |  :  .  |  :  .  |  :  Not identical
[10:49:42.306] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:42.306] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:42.306] |  :  .  nx: 2
[10:49:42.307] |  :  .  relay: TRUE
[10:49:42.307] |  :  .  stdout: TRUE
[10:49:42.307] |  :  .  signal: TRUE
[10:49:42.307] |  :  .  resignal: FALSE
[10:49:42.307] |  :  .  force: TRUE
[10:49:42.307] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:42.308] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:42.308] |  :  .  until=1
[10:49:42.308] |  :  .  relaying element #1
[10:49:42.308] |  :  .  result() for MulticoreFuture ...
[10:49:42.309] |  :  .  |  readImmediateCondition() ...
[10:49:42.309] |  :  .  |    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.310] |  :  .  |   - Number of RDS files: 0
[10:49:42.310] |  :  .  |  readImmediateCondition() ... DONE
[10:49:42.310] |  :  .  |  result() for MulticoreFuture ...
[10:49:42.310] |  :  .  |  result() for MulticoreFuture ... done
[10:49:42.311] |  :  .  result() for MulticoreFuture ... done
[10:49:42.311] |  :  .  result() for MulticoreFuture ...
[10:49:42.311] |  :  .  result() for MulticoreFuture ... done
[10:49:42.312] |  :  .  result() for MulticoreFuture ...
[10:49:42.312] |  :  .  result() for MulticoreFuture ... done
[10:49:42.312] |  :  .  result() for MulticoreFuture ...
[10:49:42.312] |  :  .  result() for MulticoreFuture ... done
[10:49:42.312] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.313] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.313] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:42.313] |  :  value(<MulticoreFuture>, ...) ...
[10:49:42.313] |  :  .  result() for MulticoreFuture ...
[10:49:42.313] |  :  .  result() for MulticoreFuture ... done
[10:49:42.314] |  :  .  result() for MulticoreFuture ...
[10:49:42.314] |  :  .  result() for MulticoreFuture ... done
[10:49:42.314] |  :  .  value: <list>
[10:49:42.314] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:42.315] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:42.315] |  :  .  nx: 2
[10:49:42.315] |  :  .  relay: TRUE
[10:49:42.315] |  :  .  stdout: TRUE
[10:49:42.315] |  :  .  signal: TRUE
[10:49:42.315] |  :  .  resignal: FALSE
[10:49:42.316] |  :  .  force: TRUE
[10:49:42.306] |  :  .  |  :  .  |  :  .  List of 2
[10:49:42.306] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.306] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.306] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.306] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.306] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.306] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.306] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.306] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:42.306] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.306] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.306] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.306] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.306] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.306] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.306] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.306] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.306] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.306] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.316] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.316] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.316] |  :  .  until=2
[10:49:42.316] |  :  .  relaying element #2
[10:49:42.316] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:42.317] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.317] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:42.317] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:42.317] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.317] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:42.317] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:42.317] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:42.317] |  :  length: 1 (resolved future 1)
[10:49:42.317] |  checking value #1 ... done
[10:49:42.317] |  :  .  |  :  .  |  List of future strategies:
[10:49:42.317] |  :  .  |  :  .  |  1. multicore:
[10:49:42.317] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:42.317] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:42.317] |  :  .  |  :  .  |     - ca[10:49:42.318] |  checking value #2 ...
ll: plan(strategy)
[10:49:42.318] |  :  'obj' is MulticoreFuture
[10:49:42.318] |  :  .  |  :  .  |  List of 1
[10:49:42.318] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.318] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.318] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.318] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.318] |  :  .  |  :  .  |      ...)  
[10:49:42.318] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.318] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.318] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.318] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.318] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.318] |  :  .  |  :  .  |      ...)  
[10:49:42.318] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.318] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.321] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.321] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.321] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.321] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.322] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.322] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:42.322] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.322] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.322] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.322] |  :  readImmediateCondition() ...
[10:49:42.322] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.323] |  :   - Number of RDS files: 0
[10:49:42.323] |  :  readImmediateCondition() ... DONE
[10:49:42.323] |  :  MulticoreFuture #2
[10:49:42.323] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:42.323] |  :  .  nx: 2
[10:49:42.323] |  :  .  relay: TRUE
[10:49:42.323] |  :  .  stdout: TRUE
[10:49:42.323] |  :  .  signal: TRUE
[10:49:42.324] |  :  .  resignal: FALSE
[10:49:42.324] |  :  .  force: TRUE
[10:49:42.324] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.324] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.324] |  :  .  until=2
[10:49:42.324] |  :  .  relaying element #2
[10:49:42.324] |  :  .  result() for MulticoreFuture ...
[10:49:42.325] |  :  .  |  readImmediateCondition() ...
[10:49:42.325] |  :  .  |    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.325] |  :  .  |   - Number of RDS files: 0
[10:49:42.325] |  :  .  |  readImmediateCondition() ... DONE
[10:49:42.326] |  :  .  |  result() for MulticoreFuture ...
[10:49:42.326] |  :  .  |  result() for MulticoreFuture ... done
[10:49:42.326] |  :  .  result() for MulticoreFuture ... done
[10:49:42.326] |  :  .  result() for MulticoreFuture ...
[10:49:42.326] |  :  .  result() for MulticoreFuture ... done
[10:49:42.327] |  :  .  result() for MulticoreFuture ...
[10:49:42.327] |  :  .  result() for MulticoreFuture ... done
[10:49:42.327] |  :  .  result() for MulticoreFuture ...
[10:49:42.327] |  :  .  result() for MulticoreFuture ... done
[10:49:42.327] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.328] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.328] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:42.328] |  :  value(<MulticoreFuture>, ...) ...
[10:49:42.328] |  :  .  result() for MulticoreFuture ...
[10:49:42.328] |  :  .  result() for MulticoreFuture ... done
[10:49:42.329] |  :  .  result() for MulticoreFuture ...
[10:49:42.329] |  :  .  result() for MulticoreFuture ... done
[10:49:42.329] |  :  .  value: <list>
[10:49:42.329] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:42.331] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:42.331] |  :  .  nx: 2
[10:49:42.331] |  :  .  relay: TRUE
[10:49:42.331] |  :  .  stdout: TRUE
[10:49:42.332] |  :  .  signal: TRUE
[10:49:42.332] |  :  .  resignal: FALSE
[10:49:42.332] |  :  .  force: TRUE
[10:49:42.332] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.332] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.332] |  :  .  until=2
[10:49:42.333] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.333] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.333] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:42.333] |  :  length: 0 (resolved future 2)
[10:49:42.333] |  checking value #2 ... done
[10:49:42.333] |  Relaying remaining futures ...
[10:49:42.334] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:42.334] |  :  .  nx: 2
[10:49:42.334] |  :  .  relay: TRUE
[10:49:42.334] |  :  .  stdout: TRUE
[10:49:42.334] |  :  .  signal: TRUE
[10:49:42.334] |  :  .  resignal: FALSE
[10:49:42.334] |  :  .  force: TRUE
[10:49:42.334] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.334] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:42.335] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.335] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.335] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:42.335] |  Relaying remaining futures ... done
[10:49:42.335] value() on list ... done
[10:49:42.335]  - Number of value chunks collected: 2
[10:49:42.336] Resolving 2 futures (chunks) ... DONE
[10:49:42.336] Reducing values from 2 chunks ...
[10:49:42.336]  - Number of values collected after concatenation: 3
[10:49:42.336]  - Number of values expected: 3
[10:49:42.336] Reducing values from 2 chunks ... DONE
[10:49:42.336] future_lapply() ... DONE
[10:49:42.337] future_lapply() ...
[10:49:42.338] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.338] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.338] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.339] Number of chunks: 2
[10:49:42.339] getGlobalsAndPackagesXApply() ...
[10:49:42.339]  - future.globals: TRUE
[10:49:42.339] getGlobalsAndPackages() ...
[10:49:42.339] |  Searching for globals ...
[10:49:42.340] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:42.340] |  Searching for globals ... DONE
[10:49:42.341] |  Resolving globals: FALSE
[10:49:42.341] |  Search for packages associated with the globals ...
[10:49:42.341] |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:42.341] |  :  Packages: [2] ‘stats’, ‘base’
[10:49:42.341] |  Search for packages associated with the globals ... DONE
[10:49:42.342] |  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:42.342] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:42.342] |  Packages after dropping 'base': [1] ‘stats’
[10:49:42.342] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:42.342] |  globals: [1] ‘FUN’
[10:49:42.342] |  packages: [1] ‘stats’
[10:49:42.342] getGlobalsAndPackages() ... done
[10:49:42.343]  - globals found/used: [n=1] ‘FUN’
[10:49:42.343]  - needed namespaces: [n=1] ‘stats’
[10:49:42.343] Finding globals ... DONE
[10:49:42.343]  - use_args: TRUE
[10:49:42.343]  - Getting '...' globals ...
[10:49:42.343] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:42.343] |  recursive: 0
[10:49:42.344] |  length: 1
[10:49:42.344] |  elements: ‘...’
[10:49:42.344] |  'obj' is DotDotDotList
[10:49:42.344] |  resolve(obj, ...) ...
[10:49:42.344] |  resolve(obj, ...) ... done
[10:49:42.344] |  length: 0 (resolved future 1)
[10:49:42.344] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:42.344]    - '...' content: [n=0] 
[10:49:42.345] List of 1
[10:49:42.345]  $ ...: list()
[10:49:42.345]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.345]  - attr(*, "where")=List of 1
[10:49:42.345]   ..$ ...:<environment: 0x555d010ce578> 
[10:49:42.345]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.345]  - attr(*, "resolved")= logi TRUE
[10:49:42.345]  - attr(*, "total_size")= num NA
[10:49:42.347]  - Getting '...' globals ... DONE
[10:49:42.347] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:42.347] List of 2
[10:49:42.347]  $ ...future.FUN:function (x, ...)  
[10:49:42.347]  $ ...          : list()
[10:49:42.347]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.347]  - attr(*, "where")=List of 2
[10:49:42.347]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:42.347]   ..$ ...          :<environment: 0x555d010ce578> 
[10:49:42.347]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.347]  - attr(*, "resolved")= logi FALSE
[10:49:42.347]  - attr(*, "total_size")= num 5433
[10:49:42.350] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:42.350] getGlobalsAndPackagesXApply() ... DONE
[10:49:42.351] Number of futures (= number of chunks): 2
[10:49:42.351] Launching 2 futures (chunks) ...
[10:49:42.351] Chunk #1 of 2 ...
[10:49:42.351]  - Finding globals in 'X' for chunk #1 ...
[10:49:42.351] getGlobalsAndPackages() ...
[10:49:42.351] |  Searching for globals ...
[10:49:42.351] |  :  globals found: [0] 
[10:49:42.352] |  Searching for globals ... DONE
[10:49:42.352] |  globals: [0] <none>
[10:49:42.352] |  packages: [0] <none>
[10:49:42.352] getGlobalsAndPackages() ... done
[10:49:42.352]    + additional globals found: [n=0] 
[10:49:42.352]    + additional namespaces needed: [n=0] 
[10:49:42.352]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:42.352]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:42.352]  - seeds: <none>
[10:49:42.352]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.353] getGlobalsAndPackages() ...
[10:49:42.353] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.353] |  Resolving globals: FALSE
[10:49:42.353] |  Tweak future expression to call with '...' arguments ...
[10:49:42.353] |  :  {
[10:49:42.353] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.353] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:42.353] |  :      "# as a global variable                                         "
[10:49:42.353] |  :      do.call(function(...) {
[10:49:42.353] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.353] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.353] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.353] |  :              on.exit(options(oopts), add = TRUE)
[10:49:42.353] |  :          }
[10:49:42.353] |  :          {
[10:49:42.353] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.353] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.353] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:42.353] |  :              })
[10:49:42.353] |  :          }
[10:49:42.353] |  :      }, args = future.call.arguments)
[10:49:42.353] |  :  }
[10:49:42.353] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:42.353] |  Search for packages associated with the globals ...
[10:49:42.355] |  :  Packages associated with globals: [1] ‘stats’
[10:49:42.355] |  :  Packages: [1] ‘stats’
[10:49:42.355] |  Search for packages associated with the globals ... DONE
[10:49:42.355] |  Packages after dropping 'base': [1] ‘stats’
[10:49:42.356] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:42.356] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.356] |  packages: [1] ‘stats’
[10:49:42.356] getGlobalsAndPackages() ... done
[10:49:42.356] run() for Future (‘Future’) ...
[10:49:42.356] |  state: ‘created’
[10:49:42.357] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.357] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.357] |  Using MulticoreFutureBackend ...
[10:49:42.357] |  :  Launching futures ...
[10:49:42.357] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.357] |  :  .  |  getFutureData() ...
[10:49:42.357] |  :  .  |  :  getFutureCore() ...
[10:49:42.357] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:42.357] |  :  .  |  :  getFutureCore() ... done
[10:49:42.358] |  :  .  |  :  getFutureCapture() ...
[10:49:42.358] |  :  .  |  :  getFutureCapture() ... done
[10:49:42.358] |  :  .  |  :  getFutureContext() ...
[10:49:42.358] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.358] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:42.358] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.358] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:42.358] |  :  .  |  :  getFutureContext() ... done
[10:49:42.358] |  :  .  |  getFutureData() ... done
[10:49:42.359] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.359] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.361] |  :  .  |  MulticoreFuture started
[10:49:42.361] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.362] |  :  Launching futures ... done
[10:49:42.362] |  :  .  |  attachPackages() ...
[10:49:42.362] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.362] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:42.362] |  Using MulticoreFutureBackend ... done
[10:49:42.362] run() for Future (‘MulticoreFuture’) ... done
[10:49:42.362] |  :  .  |  attachPackages() ... DONE
[10:49:42.363] |  :  .  |  attachPackages() ...
[10:49:42.363] Created future:
[10:49:42.363] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:42.363] |  :  .  |  attachPackages() ... DONE
[10:49:42.364] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.365] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.365] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.366] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.366] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.367] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:42.367] |  :  .  |  :  .  |  New stack:
[10:49:42.367] |  :  .  |  :  .  |  List of 1
[10:49:42.367] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.367] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.367] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.367] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.367] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.367] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.367] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.373] |  :  .  |  :  .  |  Old stack:
[10:49:42.375] readImmediateCondition() ...
[10:49:42.375]   - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.375]  - Number of RDS files: 0
[10:49:42.375] readImmediateCondition() ... DONE
[10:49:42.363] MulticoreFuture:
[10:49:42.363] Label: ‘future_eapply-1’
[10:49:42.363] Expression:
[10:49:42.363] {
[10:49:42.363]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.363]     "# expression in do.call(), because function called uses '...'  "
[10:49:42.363]     "# as a global variable                                         "
[10:49:42.363]     do.call(function(...) {
[10:49:42.363]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.363]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.363]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.363]             on.exit(options(oopts), add = TRUE)
[10:49:42.363]         }
[10:49:42.363]         {
[10:49:42.363]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.363]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.363]                 ...future.FUN(...future.X_jj, ...)
[10:49:42.363]             })
[10:49:42.363]         }
[10:49:42.363]     }, args = future.call.arguments)
[10:49:42.363] }
[10:49:42.363] Lazy evaluation: FALSE
[10:49:42.363] Asynchronous evaluation: TRUE
[10:49:42.363] Local evaluation: TRUE
[10:49:42.363] Environment: R_GlobalEnv
[10:49:42.363] Capture standard output: TRUE
[10:49:42.363] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:42.363] Immediate condition classes: ‘immediateCondition’
[10:49:42.363] Globals: 5 objects totaling 563 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:42.363] Packages: 1 packages (‘stats’)
[10:49:42.363] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:42.363] Resolved: FALSE
[10:49:42.363] Value: <not collected>
[10:49:42.363] Conditions captured: <none>
[10:49:42.363] Early signaling: FALSE
[10:49:42.363] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:42.363] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.376] Chunk #1 of 2 ... DONE
[10:49:42.376] Chunk #2 of 2 ...
[10:49:42.376]  - Finding globals in 'X' for chunk #2 ...
[10:49:42.376] getGlobalsAndPackages() ...
[10:49:42.377] |  Searching for globals ...
[10:49:42.377] |  :  globals found: [0] 
[10:49:42.377] |  Searching for globals ... DONE
[10:49:42.377] |  globals: [0] <none>
[10:49:42.378] |  packages: [0] <none>
[10:49:42.378] getGlobalsAndPackages() ... done
[10:49:42.378]    + additional globals found: [n=0] 
[10:49:42.378]    + additional namespaces needed: [n=0] 
[10:49:42.378]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:42.378]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:42.378]  - seeds: <none>
[10:49:42.378]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.379] getGlobalsAndPackages() ...
[10:49:42.373] |  :  .  |  :  .  |  List of 1
[10:49:42.373] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.373] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.373] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.373] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.373] |  :  .  |  :  .  |      ...)  
[10:49:42.373] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.373] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.373] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.373] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.373] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.373] |  :  .  |  :  .  |      ...)  
[10:49:42.373] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.373] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.379] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.379] |  :  .  |  :  .  |  Not identical
[10:49:42.379] |  Resolving globals: FALSE
[10:49:42.379] |  Tweak future expression to call with '...' arguments ...
[10:49:42.379] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:42.379] |  :  {
[10:49:42.379] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.379] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:42.379] |  :      "# as a global variable                                         "
[10:49:42.379] |  :      do.call(function(...) {
[10:49:42.379] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.379] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.379] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.379] |  :              on.exit(options(oopts), add = TRUE)
[10:49:42.379] |  :          }
[10:49:42.379] |  :          {
[10:49:42.379] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.379] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.379] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:42.379] |  :              })
[10:49:42.379] |  :          }
[10:49:42.379] |  :      }, args = future.call.arguments)
[10:49:42.379] |  :  }
[10:49:42.380] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:42.380] |  Search for packages associated with the globals ...
[10:49:42.380] |  :  Packages associated with globals: [1] ‘stats’
[10:49:42.380] |  :  Packages: [1] ‘stats’
[10:49:42.381] |  Search for packages associated with the globals ... DONE
[10:49:42.381] |  Packages after dropping 'base': [1] ‘stats’
[10:49:42.381] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:42.381] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.381] |  packages: [1] ‘stats’
[10:49:42.381] getGlobalsAndPackages() ... done
[10:49:42.382] run() for Future (‘Future’) ...
[10:49:42.382] |  state: ‘created’
[10:49:42.382] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.382] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.382] |  Using MulticoreFutureBackend ...
[10:49:42.382] |  :  Launching futures ...
[10:49:42.383] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.383] |  :  .  |  getFutureData() ...
[10:49:42.383] |  :  .  |  :  getFutureCore() ...
[10:49:42.383] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:42.383] |  :  .  |  :  getFutureCore() ... done
[10:49:42.383] |  :  .  |  :  getFutureCapture() ...
[10:49:42.383] |  :  .  |  :  getFutureCapture() ... done
[10:49:42.384] |  :  .  |  :  getFutureContext() ...
[10:49:42.384] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.384] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:42.384] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.384] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:42.384] |  :  .  |  :  getFutureContext() ... done
[10:49:42.384] |  :  .  |  getFutureData() ... done
[10:49:42.385] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.385] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.387] |  :  .  |  MulticoreFuture started
[10:49:42.379] |  :  .  |  :  .  |  :  List of 2
[10:49:42.379] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.379] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.379] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.379] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.379] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.379] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.379] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.379] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.379] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.379] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.379] |  :  .  |  :  .  |  :      ...)  
[10:49:42.379] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.379] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.379] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.379] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.379] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.379] |  :  .  |  :  .  |  :      ...)  
[10:49:42.379] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.387] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.388] |  :  Launching futures ... done
[10:49:42.388] |  :  .  |  attachPackages() ...
[10:49:42.388] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.388] |  :  .  |  :  .  |  :  Formals differ
[10:49:42.388] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:42.388] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:42.388] |  Using MulticoreFutureBackend ... done
[10:49:42.389] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:42.389] run() for Future (‘MulticoreFuture’) ... done
[10:49:42.389] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:42.389] |  :  .  |  attachPackages() ... DONE
[10:49:42.389] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:42.389] Created future:
[10:49:42.389] |  :  .  |  attachPackages() ...
[10:49:42.389] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:42.390] |  :  .  |  attachPackages() ... DONE
[10:49:42.389] |  :  .  |  :  .  List of future strategies:
[10:49:42.389] |  :  .  |  :  .  1. sequential:
[10:49:42.389] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:42.389] |  :  .  |  :  .     - tweaked: FALSE
[10:49:42.389] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.391] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.391] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.392] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.392] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.393] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.393] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:42.393] |  :  .  |  :  .  |  New stack:
[10:49:42.390] |  :  .  |  :  .  List of 1
[10:49:42.390] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.390] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.390] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.390] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.390] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.390] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.390] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.397] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.393] |  :  .  |  :  .  |  List of 1
[10:49:42.393] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.393] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.393] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.393] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.393] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.393] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.393] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.397] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.398] |  :  .  |  :  .  |  Old stack:
[10:49:42.398] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.398] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:42.398] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.398] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:42.399] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:42.399] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:42.399] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.400] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.400] |  :  .  |  assign_globals() ...
[10:49:42.402] readImmediateCondition() ...
[10:49:42.402]   - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.402]  - Number of RDS files: 0
[10:49:42.403] readImmediateCondition() ... DONE
[10:49:42.389] MulticoreFuture:
[10:49:42.389] Label: ‘future_eapply-2’
[10:49:42.389] Expression:
[10:49:42.389] {
[10:49:42.389]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.389]     "# expression in do.call(), because function called uses '...'  "
[10:49:42.389]     "# as a global variable                                         "
[10:49:42.389]     do.call(function(...) {
[10:49:42.389]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.389]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.389]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.389]             on.exit(options(oopts), add = TRUE)
[10:49:42.389]         }
[10:49:42.389]         {
[10:49:42.389]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.389]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.389]                 ...future.FUN(...future.X_jj, ...)
[10:49:42.389]             })
[10:49:42.389]         }
[10:49:42.389]     }, args = future.call.arguments)
[10:49:42.389] }
[10:49:42.389] Lazy evaluation: FALSE
[10:49:42.389] Asynchronous evaluation: TRUE
[10:49:42.389] Local evaluation: TRUE
[10:49:42.389] Environment: R_GlobalEnv
[10:49:42.389] Capture standard output: TRUE
[10:49:42.389] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:42.389] Immediate condition classes: ‘immediateCondition’
[10:49:42.389] Globals: 5 objects totaling 721 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:42.389] Packages: 1 packages (‘stats’)
[10:49:42.389] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:42.389] Resolved: FALSE
[10:49:42.389] Value: <not collected>
[10:49:42.389] Conditions captured: <none>
[10:49:42.389] Early signaling: FALSE
[10:49:42.389] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:42.389] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.403] Chunk #2 of 2 ... DONE
[10:49:42.398] |  :  .  |  :  .  |  List of 1
[10:49:42.398] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.398] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.398] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.398] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.398] |  :  .  |  :  .  |      ...)  
[10:49:42.398] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.398] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.398] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.398] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.398] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.398] |  :  .  |  :  .  |      ...)  
[10:49:42.398] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.398] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.404] Launching 2 futures (chunks) ... DONE
[10:49:42.404] |  :  .  |  :  .  |  Not identical
[10:49:42.404] Resolving 2 futures (chunks) ...
[10:49:42.404] value() on list ...
[10:49:42.404] |  recursive: 0
[10:49:42.405] |  length: 2
[10:49:42.405] |  
[10:49:42.405] |  Number of remaining objects: 2
[10:49:42.405] |  checking value #1 ...
[10:49:42.405] |  :  'obj' is MulticoreFuture
[10:49:42.404] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:42.400] |  :  .  |  List of 5
[10:49:42.400] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:42.400] |  :  .  |   $ future.call.arguments    : list()
[10:49:42.400] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.400] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:42.400] |  :  .  |    ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:49:42.400] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:42.400] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:42.400] |  :  .  |   - attr(*, "where")=List of 5
[10:49:42.400] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:42.400] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:42.400] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:42.400] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:42.400] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:42.400] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:42.400] |  :  .  |   - attr(*, "total_size")= num 5433
[10:49:42.400] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.400] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:42.407] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:42.407] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:42.407] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:42.407] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:42.407] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:42.408] |  :  .  |  assign_globals() ... done
[10:49:42.410] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.410] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.411] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.411] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:42.411] |  :  .  |  :  .  |  :  New stack:
[10:49:42.411] |  :  .  |  :  .  |  :  List of 1
[10:49:42.411] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.411] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.411] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.411] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.411] |  :  .  |  :  .  |  :      ...)  
[10:49:42.411] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.411] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.411] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.411] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.411] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.411] |  :  .  |  :  .  |  :      ...)  
[10:49:42.411] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.411] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.414] |  :  .  |  :  .  |  :  Old stack:
[10:49:42.416] |  :  readImmediateCondition() ...
[10:49:42.416] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.416] |  :   - Number of RDS files: 0
[10:49:42.414] |  :  .  |  :  .  |  :  List of 1
[10:49:42.414] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.414] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.414] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.414] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.414] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.414] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.414] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.407] |  :  .  |  :  .  |  :  List of 2
[10:49:42.407] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.407] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.407] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.407] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.407] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.407] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.407] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.407] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.407] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.407] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.407] |  :  .  |  :  .  |  :      ...)  
[10:49:42.407] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.407] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.407] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.407] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.407] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.407] |  :  .  |  :  .  |  :      ...)  
[10:49:42.407] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.416] |  :  .  |  :  .  |  :  Not identical
[10:49:42.416] |  :  readImmediateCondition() ... DONE
[10:49:42.416] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:42.417] |  checking value #1 ... done
[10:49:42.417] |  checking value #2 ...
[10:49:42.417] |  :  'obj' is MulticoreFuture
[10:49:42.417] |  :  .  |  :  .  |  :  Formals differ
[10:49:42.417] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:42.418] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:42.418] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:42.418] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:42.418] |  :  .  |  :  .  List of future strategies:
[10:49:42.418] |  :  .  |  :  .  1. sequential:
[10:49:42.418] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:42.418] |  :  .  |  :  .     - tweaked: FALSE
[10:49:42.418] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.419] |  :  .  |  :  .  List of 1
[10:49:42.419] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.419] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.419] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.419] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.419] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.419] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.419] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.422] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.422] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.422] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.417] |  :  .  |  :  .  |  :  .  List of 2
[10:49:42.417] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.417] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.417] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.417] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.417] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.417] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.417] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.417] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:42.417] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.417] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.417] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.417] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.417] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.417] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.417] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.417] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.417] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.417] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.422] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:42.422] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.423] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:42.423] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:42.423] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:42.423] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:42.423] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:42.423] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:42.423] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:42.423] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.423] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:42.423] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.423] |  :  .  |  assign_globals() ...
[10:49:42.423] |  :  .  |  :  .  |  List of future strategies:
[10:49:42.423] |  :  .  |  :  .  |  1. multicore:
[10:49:42.423] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:42.423] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:42.423] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:42.424] |  :  .  |  :  .  |  List of 1
[10:49:42.424] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.424] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.424] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.424] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.424] |  :  .  |  :  .  |      ...)  
[10:49:42.424] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.424] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.424] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.424] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.424] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.424] |  :  .  |  :  .  |      ...)  
[10:49:42.424] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.424] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.427] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.427] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.427] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.427] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.427] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.427] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:42.427] |  :  readImmediateCondition() ...
[10:49:42.427] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.428] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.427] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.428] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.428] |  :   - Number of RDS files: 0
[10:49:42.428] |  :  readImmediateCondition() ... DONE
[10:49:42.428] |  checking value #2 ... done
[10:49:42.424] |  :  .  |  List of 5
[10:49:42.424] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:42.424] |  :  .  |   $ future.call.arguments    : list()
[10:49:42.424] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.424] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:42.424] |  :  .  |    ..$ beta: num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:49:42.424] |  :  .  |    ..$ a   : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:49:42.424] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:42.424] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:42.424] |  :  .  |   - attr(*, "where")=List of 5
[10:49:42.424] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:42.424] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:42.424] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:42.424] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:42.424] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:42.424] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:42.424] |  :  .  |   - attr(*, "total_size")= num 5433
[10:49:42.424] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.424] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:42.430] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:42.430] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:42.430] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:42.431] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:42.431] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:42.431] |  :  .  |  assign_globals() ... done
[10:49:42.433] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.434] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.434] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.434] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:42.434] |  :  .  |  :  .  |  :  New stack:
[10:49:42.438] |  Number of remaining objects: 2
[10:49:42.434] |  :  .  |  :  .  |  :  List of 1
[10:49:42.434] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.434] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.434] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.434] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.434] |  :  .  |  :  .  |  :      ...)  
[10:49:42.434] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.434] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.434] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.434] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.434] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.434] |  :  .  |  :  .  |  :      ...)  
[10:49:42.434] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.434] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.439] |  checking value #1 ...
[10:49:42.439] |  :  .  |  :  .  |  :  Old stack:
[10:49:42.439] |  :  'obj' is MulticoreFuture
[10:49:42.439] |  :  readImmediateCondition() ...
[10:49:42.439] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.440] |  :   - Number of RDS files: 0
[10:49:42.440] |  :  readImmediateCondition() ... DONE
[10:49:42.440] |  :  MulticoreFuture #1
[10:49:42.440] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:42.440] |  :  .  nx: 2
[10:49:42.441] |  :  .  relay: TRUE
[10:49:42.441] |  :  .  stdout: TRUE
[10:49:42.441] |  :  .  signal: TRUE
[10:49:42.441] |  :  .  resignal: FALSE
[10:49:42.441] |  :  .  force: TRUE
[10:49:42.442] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:42.442] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:42.442] |  :  .  until=1
[10:49:42.442] |  :  .  relaying element #1
[10:49:42.442] |  :  .  result() for MulticoreFuture ...
[10:49:42.439] |  :  .  |  :  .  |  :  List of 1
[10:49:42.439] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.439] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.439] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.439] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.439] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.439] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.439] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.443] |  :  .  |  :  .  |  :  Not identical
[10:49:42.443] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:42.443] |  :  .  |  readImmediateCondition() ...
[10:49:42.444] |  :  .  |    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.444] |  :  .  |   - Number of RDS files: 0
[10:49:42.444] |  :  .  |  readImmediateCondition() ... DONE
[10:49:42.444] |  :  .  |  result() for MulticoreFuture ...
[10:49:42.445] |  :  .  |  result() for MulticoreFuture ... done
[10:49:42.445] |  :  .  result() for MulticoreFuture ... done
[10:49:42.445] |  :  .  result() for MulticoreFuture ...
[10:49:42.445] |  :  .  result() for MulticoreFuture ... done
[10:49:42.446] |  :  .  result() for MulticoreFuture ...
[10:49:42.446] |  :  .  result() for MulticoreFuture ... done
[10:49:42.446] |  :  .  result() for MulticoreFuture ...
[10:49:42.446] |  :  .  result() for MulticoreFuture ... done
[10:49:42.447] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.447] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.447] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:42.449] |  :  value(<MulticoreFuture>, ...) ...
[10:49:42.443] |  :  .  |  :  .  |  :  .  List of 2
[10:49:42.443] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.443] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.443] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.443] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.443] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.443] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.443] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.443] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:42.443] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.443] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.443] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.443] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.443] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.443] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.443] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.443] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.443] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.443] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.450] |  :  .  result() for MulticoreFuture ...
[10:49:42.450] |  :  .  result() for MulticoreFuture ... done
[10:49:42.451] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:42.450] |  :  .  result() for MulticoreFuture ...
[10:49:42.451] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:42.451] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:42.451] |  :  .  result() for MulticoreFuture ... done
[10:49:42.451] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:42.451] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:42.451] |  :  .  value: <list>
[10:49:42.451] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:42.451] |  :  .  |  :  .  |  List of future strategies:
[10:49:42.451] |  :  .  |  :  .  |  1. multicore:
[10:49:42.451] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:42.451] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:42.451] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:42.452] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:42.452] |  :  .  nx: 2
[10:49:42.452] |  :  .  relay: TRUE
[10:49:42.452] |  :  .  stdout: TRUE
[10:49:42.453] |  :  .  signal: TRUE
[10:49:42.453] |  :  .  resignal: FALSE
[10:49:42.453] |  :  .  force: TRUE
[10:49:42.453] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.454] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.454] |  :  .  until=2
[10:49:42.454] |  :  .  relaying element #2
[10:49:42.454] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.454] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.455] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:42.455] |  :  length: 1 (resolved future 1)
[10:49:42.455] |  checking value #1 ... done
[10:49:42.455] |  checking value #2 ...
[10:49:42.456] |  :  'obj' is MulticoreFuture
[10:49:42.452] |  :  .  |  :  .  |  List of 1
[10:49:42.452] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.452] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.452] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.452] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.452] |  :  .  |  :  .  |      ...)  
[10:49:42.452] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.452] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.452] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.452] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.452] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.452] |  :  .  |  :  .  |      ...)  
[10:49:42.452] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.452] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.457] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.457] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.457] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.457] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.457] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.457] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:42.457] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.457] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.458] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.458] |  :  readImmediateCondition() ...
[10:49:42.458] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.458] |  :   - Number of RDS files: 0
[10:49:42.458] |  :  readImmediateCondition() ... DONE
[10:49:42.459] |  :  MulticoreFuture #2
[10:49:42.459] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:42.459] |  :  .  nx: 2
[10:49:42.459] |  :  .  relay: TRUE
[10:49:42.459] |  :  .  stdout: TRUE
[10:49:42.459] |  :  .  signal: TRUE
[10:49:42.459] |  :  .  resignal: FALSE
[10:49:42.459] |  :  .  force: TRUE
[10:49:42.459] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.459] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.460] |  :  .  until=2
[10:49:42.460] |  :  .  relaying element #2
[10:49:42.460] |  :  .  result() for MulticoreFuture ...
[10:49:42.460] |  :  .  |  readImmediateCondition() ...
[10:49:42.460] |  :  .  |    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.461] |  :  .  |   - Number of RDS files: 0
[10:49:42.461] |  :  .  |  readImmediateCondition() ... DONE
[10:49:42.461] |  :  .  |  result() for MulticoreFuture ...
[10:49:42.461] |  :  .  |  result() for MulticoreFuture ... done
[10:49:42.461] |  :  .  result() for MulticoreFuture ... done
[10:49:42.462] |  :  .  result() for MulticoreFuture ...
[10:49:42.462] |  :  .  result() for MulticoreFuture ... done
[10:49:42.462] |  :  .  result() for MulticoreFuture ...
[10:49:42.462] |  :  .  result() for MulticoreFuture ... done
[10:49:42.462] |  :  .  result() for MulticoreFuture ...
[10:49:42.463] |  :  .  result() for MulticoreFuture ... done
[10:49:42.463] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.463] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.463] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:42.463] |  :  value(<MulticoreFuture>, ...) ...
[10:49:42.463] |  :  .  result() for MulticoreFuture ...
[10:49:42.464] |  :  .  result() for MulticoreFuture ... done
[10:49:42.464] |  :  .  result() for MulticoreFuture ...
[10:49:42.464] |  :  .  result() for MulticoreFuture ... done
[10:49:42.464] |  :  .  value: <list>
[10:49:42.464] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:42.464] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:42.465] |  :  .  nx: 2
[10:49:42.465] |  :  .  relay: TRUE
[10:49:42.465] |  :  .  stdout: TRUE
[10:49:42.465] |  :  .  signal: TRUE
[10:49:42.465] |  :  .  resignal: FALSE
[10:49:42.465] |  :  .  force: TRUE
[10:49:42.465] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.465] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.465] |  :  .  until=2
[10:49:42.466] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.466] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.466] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:42.466] |  :  length: 0 (resolved future 2)
[10:49:42.466] |  checking value #2 ... done
[10:49:42.466] |  Relaying remaining futures ...
[10:49:42.466] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:42.466] |  :  .  nx: 2
[10:49:42.466] |  :  .  relay: TRUE
[10:49:42.467] |  :  .  stdout: TRUE
[10:49:42.467] |  :  .  signal: TRUE
[10:49:42.467] |  :  .  resignal: FALSE
[10:49:42.467] |  :  .  force: TRUE
[10:49:42.467] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.467] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:42.467] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.467] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.467] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:42.468] |  Relaying remaining futures ... done
[10:49:42.468] value() on list ... done
[10:49:42.468]  - Number of value chunks collected: 2
[10:49:42.468] Resolving 2 futures (chunks) ... DONE
[10:49:42.468] Reducing values from 2 chunks ...
[10:49:42.468]  - Number of values collected after concatenation: 3
[10:49:42.468]  - Number of values expected: 3
[10:49:42.468] Reducing values from 2 chunks ... DONE
[10:49:42.468] future_lapply() ... DONE
[10:49:42.469] future_lapply() ...
[10:49:42.470] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.470] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.470] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.470] Number of chunks: 2
[10:49:42.470] getGlobalsAndPackagesXApply() ...
[10:49:42.470]  - future.globals: TRUE
[10:49:42.471] getGlobalsAndPackages() ...
[10:49:42.471] |  Searching for globals ...
[10:49:42.472] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:42.472] |  Searching for globals ... DONE
[10:49:42.472] |  Resolving globals: FALSE
[10:49:42.472] |  Search for packages associated with the globals ...
[10:49:42.473] |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:42.473] |  :  Packages: [2] ‘stats’, ‘base’
[10:49:42.473] |  Search for packages associated with the globals ... DONE
[10:49:42.473] |  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:42.473] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:42.474] |  Packages after dropping 'base': [1] ‘stats’
[10:49:42.474] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:42.474] |  globals: [1] ‘FUN’
[10:49:42.474] |  packages: [1] ‘stats’
[10:49:42.474] getGlobalsAndPackages() ... done
[10:49:42.474]  - globals found/used: [n=1] ‘FUN’
[10:49:42.474]  - needed namespaces: [n=1] ‘stats’
[10:49:42.474] Finding globals ... DONE
[10:49:42.475]  - use_args: TRUE
[10:49:42.475]  - Getting '...' globals ...
[10:49:42.475] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:42.475] |  recursive: 0
[10:49:42.475] |  length: 1
[10:49:42.475] |  elements: ‘...’
[10:49:42.475] |  'obj' is DotDotDotList
[10:49:42.476] |  resolve(obj, ...) ...
[10:49:42.476] |  resolve(obj, ...) ... done
[10:49:42.476] |  length: 0 (resolved future 1)
[10:49:42.476] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:42.476]    - '...' content: [n=0] 
[10:49:42.476] List of 1
[10:49:42.476]  $ ...: list()
[10:49:42.476]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.476]  - attr(*, "where")=List of 1
[10:49:42.476]   ..$ ...:<environment: 0x555d02d75890> 
[10:49:42.476]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.476]  - attr(*, "resolved")= logi TRUE
[10:49:42.476]  - attr(*, "total_size")= num NA
[10:49:42.480]  - Getting '...' globals ... DONE
[10:49:42.480] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:42.480] List of 2
[10:49:42.480]  $ ...future.FUN:function (x, ...)  
[10:49:42.480]  $ ...          : list()
[10:49:42.480]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.480]  - attr(*, "where")=List of 2
[10:49:42.480]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:42.480]   ..$ ...          :<environment: 0x555d02d75890> 
[10:49:42.480]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.480]  - attr(*, "resolved")= logi FALSE
[10:49:42.480]  - attr(*, "total_size")= num 5437
[10:49:42.483] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:42.484] getGlobalsAndPackagesXApply() ... DONE
[10:49:42.484] Number of futures (= number of chunks): 2
[10:49:42.484] Launching 2 futures (chunks) ...
[10:49:42.484] Chunk #1 of 2 ...
[10:49:42.484]  - Finding globals in 'X' for chunk #1 ...
[10:49:42.484] getGlobalsAndPackages() ...
[10:49:42.484] |  Searching for globals ...
[10:49:42.485] |  :  globals found: [0] 
[10:49:42.485] |  Searching for globals ... DONE
[10:49:42.485] |  globals: [0] <none>
[10:49:42.485] |  packages: [0] <none>
[10:49:42.485] getGlobalsAndPackages() ... done
[10:49:42.485]    + additional globals found: [n=0] 
[10:49:42.485]    + additional namespaces needed: [n=0] 
[10:49:42.485]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:42.485]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:42.485]  - seeds: <none>
[10:49:42.486]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.486] getGlobalsAndPackages() ...
[10:49:42.486] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.486] |  Resolving globals: FALSE
[10:49:42.486] |  Tweak future expression to call with '...' arguments ...
[10:49:42.486] |  :  {
[10:49:42.486] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.486] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:42.486] |  :      "# as a global variable                                         "
[10:49:42.486] |  :      do.call(function(...) {
[10:49:42.486] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.486] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.486] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.486] |  :              on.exit(options(oopts), add = TRUE)
[10:49:42.486] |  :          }
[10:49:42.486] |  :          {
[10:49:42.486] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.486] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.486] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:42.486] |  :              })
[10:49:42.486] |  :          }
[10:49:42.486] |  :      }, args = future.call.arguments)
[10:49:42.486] |  :  }
[10:49:42.486] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:42.487] |  Search for packages associated with the globals ...
[10:49:42.487] |  :  Packages associated with globals: [1] ‘stats’
[10:49:42.487] |  :  Packages: [1] ‘stats’
[10:49:42.487] |  Search for packages associated with the globals ... DONE
[10:49:42.487] |  Packages after dropping 'base': [1] ‘stats’
[10:49:42.487] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:42.487] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.488] |  packages: [1] ‘stats’
[10:49:42.488] getGlobalsAndPackages() ... done
[10:49:42.488] run() for Future (‘Future’) ...
[10:49:42.488] |  state: ‘created’
[10:49:42.488] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.488] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.488] |  Using MulticoreFutureBackend ...
[10:49:42.489] |  :  Launching futures ...
[10:49:42.489] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.489] |  :  .  |  getFutureData() ...
[10:49:42.489] |  :  .  |  :  getFutureCore() ...
[10:49:42.489] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:42.489] |  :  .  |  :  getFutureCore() ... done
[10:49:42.489] |  :  .  |  :  getFutureCapture() ...
[10:49:42.489] |  :  .  |  :  getFutureCapture() ... done
[10:49:42.489] |  :  .  |  :  getFutureContext() ...
[10:49:42.489] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.490] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:42.490] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.490] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:42.490] |  :  .  |  :  getFutureContext() ... done
[10:49:42.490] |  :  .  |  getFutureData() ... done
[10:49:42.490] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.490] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.492] |  :  .  |  MulticoreFuture started
[10:49:42.493] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.493] |  :  Launching futures ... done
[10:49:42.493] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.493] |  :  .  |  attachPackages() ...
[10:49:42.493] |  Using MulticoreFutureBackend ... done
[10:49:42.493] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:42.493] run() for Future (‘MulticoreFuture’) ... done
[10:49:42.494] Created future:
[10:49:42.494] |  :  .  |  attachPackages() ... DONE
[10:49:42.494] |  :  .  |  attachPackages() ...
[10:49:42.494] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:42.494] |  :  .  |  attachPackages() ... DONE
[10:49:42.495] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.496] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.496] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.496] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.497] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.497] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:42.497] |  :  .  |  :  .  |  New stack:
[10:49:42.497] |  :  .  |  :  .  |  List of 1
[10:49:42.497] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.497] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.497] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.497] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.497] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.497] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.497] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.502] |  :  .  |  :  .  |  Old stack:
[10:49:42.506] readImmediateCondition() ...
[10:49:42.506]   - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.506]  - Number of RDS files: 0
[10:49:42.506] readImmediateCondition() ... DONE
[10:49:42.494] MulticoreFuture:
[10:49:42.494] Label: ‘future_eapply-1’
[10:49:42.494] Expression:
[10:49:42.494] {
[10:49:42.494]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.494]     "# expression in do.call(), because function called uses '...'  "
[10:49:42.494]     "# as a global variable                                         "
[10:49:42.494]     do.call(function(...) {
[10:49:42.494]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.494]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.494]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.494]             on.exit(options(oopts), add = TRUE)
[10:49:42.494]         }
[10:49:42.494]         {
[10:49:42.494]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.494]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.494]                 ...future.FUN(...future.X_jj, ...)
[10:49:42.494]             })
[10:49:42.494]         }
[10:49:42.494]     }, args = future.call.arguments)
[10:49:42.494] }
[10:49:42.494] Lazy evaluation: FALSE
[10:49:42.494] Asynchronous evaluation: TRUE
[10:49:42.494] Local evaluation: TRUE
[10:49:42.494] Environment: R_GlobalEnv
[10:49:42.494] Capture standard output: TRUE
[10:49:42.494] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:42.494] Immediate condition classes: ‘immediateCondition’
[10:49:42.494] Globals: 5 objects totaling 563 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:42.494] Packages: 1 packages (‘stats’)
[10:49:42.494] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:42.494] Resolved: FALSE
[10:49:42.494] Value: <not collected>
[10:49:42.494] Conditions captured: <none>
[10:49:42.494] Early signaling: FALSE
[10:49:42.494] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:42.494] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.507] Chunk #1 of 2 ... DONE
[10:49:42.502] |  :  .  |  :  .  |  List of 1
[10:49:42.502] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.502] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.502] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.502] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.502] |  :  .  |  :  .  |      ...)  
[10:49:42.502] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.502] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.502] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.502] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.502] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.502] |  :  .  |  :  .  |      ...)  
[10:49:42.502] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.502] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.507] Chunk #2 of 2 ...
[10:49:42.507] |  :  .  |  :  .  |  Not identical
[10:49:42.507]  - Finding globals in 'X' for chunk #2 ...
[10:49:42.507] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:42.507] getGlobalsAndPackages() ...
[10:49:42.508] |  Searching for globals ...
[10:49:42.508] |  :  globals found: [0] 
[10:49:42.508] |  Searching for globals ... DONE
[10:49:42.508] |  globals: [0] <none>
[10:49:42.508] |  packages: [0] <none>
[10:49:42.509] getGlobalsAndPackages() ... done
[10:49:42.509]    + additional globals found: [n=0] 
[10:49:42.509]    + additional namespaces needed: [n=0] 
[10:49:42.509]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:42.509]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:42.509]  - seeds: <none>
[10:49:42.509]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.509] getGlobalsAndPackages() ...
[10:49:42.510] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.510] |  Resolving globals: FALSE
[10:49:42.510] |  Tweak future expression to call with '...' arguments ...
[10:49:42.510] |  :  {
[10:49:42.510] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.510] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:42.510] |  :      "# as a global variable                                         "
[10:49:42.510] |  :      do.call(function(...) {
[10:49:42.510] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.510] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.510] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.510] |  :              on.exit(options(oopts), add = TRUE)
[10:49:42.510] |  :          }
[10:49:42.510] |  :          {
[10:49:42.510] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.510] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.510] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:42.510] |  :              })
[10:49:42.510] |  :          }
[10:49:42.510] |  :      }, args = future.call.arguments)
[10:49:42.510] |  :  }
[10:49:42.511] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:42.511] |  Search for packages associated with the globals ...
[10:49:42.511] |  :  Packages associated with globals: [1] ‘stats’
[10:49:42.512] |  :  Packages: [1] ‘stats’
[10:49:42.512] |  Search for packages associated with the globals ... DONE
[10:49:42.512] |  Packages after dropping 'base': [1] ‘stats’
[10:49:42.512] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:42.512] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:42.512] |  packages: [1] ‘stats’
[10:49:42.513] getGlobalsAndPackages() ... done
[10:49:42.513] run() for Future (‘Future’) ...
[10:49:42.513] |  state: ‘created’
[10:49:42.513] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.513] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.513] |  Using MulticoreFutureBackend ...
[10:49:42.514] |  :  Launching futures ...
[10:49:42.514] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.514] |  :  .  |  getFutureData() ...
[10:49:42.514] |  :  .  |  :  getFutureCore() ...
[10:49:42.514] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:42.514] |  :  .  |  :  getFutureCore() ... done
[10:49:42.514] |  :  .  |  :  getFutureCapture() ...
[10:49:42.515] |  :  .  |  :  getFutureCapture() ... done
[10:49:42.515] |  :  .  |  :  getFutureContext() ...
[10:49:42.515] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.515] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:42.515] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.515] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:42.515] |  :  .  |  :  getFutureContext() ... done
[10:49:42.516] |  :  .  |  getFutureData() ... done
[10:49:42.516] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.516] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:42.507] |  :  .  |  :  .  |  :  List of 2
[10:49:42.507] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.507] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.507] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.507] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.507] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.507] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.507] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.507] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.507] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.507] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.507] |  :  .  |  :  .  |  :      ...)  
[10:49:42.507] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.507] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.507] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.507] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.507] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.507] |  :  .  |  :  .  |  :      ...)  
[10:49:42.507] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.518] |  :  .  |  MulticoreFuture started
[10:49:42.519] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:42.519] |  :  Launching futures ... done
[10:49:42.519] |  :  .  |  attachPackages() ...
[10:49:42.519] |  :  .  |  :  .  |  :  Formals differ
[10:49:42.519] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.520] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:42.520] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:42.520] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:42.520] |  Using MulticoreFutureBackend ... done
[10:49:42.520] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:42.520] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:42.520] run() for Future (‘MulticoreFuture’) ... done
[10:49:42.520] |  :  .  |  attachPackages() ... DONE
[10:49:42.520] Created future:
[10:49:42.520] |  :  .  |  attachPackages() ...
[10:49:42.520] |  :  .  |  :  .  List of future strategies:
[10:49:42.520] |  :  .  |  :  .  1. sequential:
[10:49:42.520] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:42.520] |  :  .  |  :  .     - tweaked: FALSE
[10:49:42.520] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.521] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:42.521] |  :  .  |  attachPackages() ... DONE
[10:49:42.521] |  :  .  |  :  .  List of 1
[10:49:42.521] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.521] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.521] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.521] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.521] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.521] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.521] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.524] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.524] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.524] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.524] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:42.525] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.525] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:42.525] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:42.525] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:42.525] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.525] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.526] |  :  .  |  assign_globals() ...
[10:49:42.522] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.526] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.527] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.528] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.528] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.529] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:42.529] |  :  .  |  :  .  |  New stack:
[10:49:42.526] |  :  .  |  List of 5
[10:49:42.526] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:42.526] |  :  .  |   $ future.call.arguments    : list()
[10:49:42.526] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.526] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:42.526] |  :  .  |    ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:49:42.526] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:42.526] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:42.526] |  :  .  |   - attr(*, "where")=List of 5
[10:49:42.526] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:42.526] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:42.526] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:42.526] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:42.526] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:42.526] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:42.526] |  :  .  |   - attr(*, "total_size")= num 5437
[10:49:42.526] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.526] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:42.531] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:42.531] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:42.532] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:42.532] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:42.532] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:42.532] |  :  .  |  assign_globals() ... done
[10:49:42.534] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.535] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.535] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.535] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:42.535] |  :  .  |  :  .  |  :  New stack:
[10:49:42.530] |  :  .  |  :  .  |  List of 1
[10:49:42.530] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.530] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.530] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.530] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.530] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.530] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.530] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.536] |  :  .  |  :  .  |  Old stack:
[10:49:42.537] readImmediateCondition() ...
[10:49:42.537]   - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.538]  - Number of RDS files: 0
[10:49:42.538] readImmediateCondition() ... DONE
[10:49:42.521] MulticoreFuture:
[10:49:42.521] Label: ‘future_eapply-2’
[10:49:42.521] Expression:
[10:49:42.521] {
[10:49:42.521]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:42.521]     "# expression in do.call(), because function called uses '...'  "
[10:49:42.521]     "# as a global variable                                         "
[10:49:42.521]     do.call(function(...) {
[10:49:42.521]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:42.521]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:42.521]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:42.521]             on.exit(options(oopts), add = TRUE)
[10:49:42.521]         }
[10:49:42.521]         {
[10:49:42.521]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:42.521]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:42.521]                 ...future.FUN(...future.X_jj, ...)
[10:49:42.521]             })
[10:49:42.521]         }
[10:49:42.521]     }, args = future.call.arguments)
[10:49:42.521] }
[10:49:42.521] Lazy evaluation: FALSE
[10:49:42.521] Asynchronous evaluation: TRUE
[10:49:42.521] Local evaluation: TRUE
[10:49:42.521] Environment: R_GlobalEnv
[10:49:42.521] Capture standard output: TRUE
[10:49:42.521] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:42.521] Immediate condition classes: ‘immediateCondition’
[10:49:42.521] Globals: 5 objects totaling 721 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:42.521] Packages: 1 packages (‘stats’)
[10:49:42.521] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:42.521] Resolved: FALSE
[10:49:42.521] Value: <not collected>
[10:49:42.521] Conditions captured: <none>
[10:49:42.521] Early signaling: FALSE
[10:49:42.521] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:42.521] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:42.539] Chunk #2 of 2 ... DONE
[10:49:42.540] Launching 2 futures (chunks) ... DONE
[10:49:42.535] |  :  .  |  :  .  |  :  List of 1
[10:49:42.535] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.535] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.535] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.535] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.535] |  :  .  |  :  .  |  :      ...)  
[10:49:42.535] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.535] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.535] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.535] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.535] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.535] |  :  .  |  :  .  |  :      ...)  
[10:49:42.535] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.535] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.540] |  :  .  |  :  .  |  :  Old stack:
[10:49:42.540] Resolving 2 futures (chunks) ...
[10:49:42.540] value() on list ...
[10:49:42.541] |  recursive: 0
[10:49:42.541] |  length: 2
[10:49:42.541] |  
[10:49:42.541] |  Number of remaining objects: 2
[10:49:42.542] |  checking value #1 ...
[10:49:42.542] |  :  'obj' is MulticoreFuture
[10:49:42.540] |  :  .  |  :  .  |  :  List of 1
[10:49:42.540] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.540] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.540] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.540] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.540] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.540] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.540] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.542] |  :  .  |  :  .  |  :  Not identical
[10:49:42.543] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:42.536] |  :  .  |  :  .  |  List of 1
[10:49:42.536] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.536] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.536] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.536] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.536] |  :  .  |  :  .  |      ...)  
[10:49:42.536] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.536] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.536] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.536] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.536] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.536] |  :  .  |  :  .  |      ...)  
[10:49:42.536] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.536] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.543] |  :  .  |  :  .  |  Not identical
[10:49:42.543] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:42.543] |  :  .  |  :  .  |  :  .  List of 2
[10:49:42.543] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.543] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.543] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.543] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:42.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.543] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.543] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.543] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.543] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.543] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.547] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:42.547] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:42.548] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:42.548] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:42.548] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:42.548] |  :  .  |  :  .  |  List of future strategies:
[10:49:42.548] |  :  .  |  :  .  |  1. multicore:
[10:49:42.548] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:42.548] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:42.548] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:42.543] |  :  .  |  :  .  |  :  List of 2
[10:49:42.543] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.543] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.543] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.543] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.543] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.543] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.543] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.543] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.543] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.543] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.543] |  :  .  |  :  .  |  :      ...)  
[10:49:42.543] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.543] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.543] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.543] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.543] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.543] |  :  .  |  :  .  |  :      ...)  
[10:49:42.543] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.549] |  :  .  |  :  .  |  :  Formals differ
[10:49:42.550] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:42.550] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:42.550] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:42.550] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:42.550] |  :  .  |  :  .  List of future strategies:
[10:49:42.550] |  :  .  |  :  .  1. sequential:
[10:49:42.550] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:42.550] |  :  .  |  :  .     - tweaked: FALSE
[10:49:42.550] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.548] |  :  .  |  :  .  |  List of 1
[10:49:42.548] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.548] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.548] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.548] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.548] |  :  .  |  :  .  |      ...)  
[10:49:42.548] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.548] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.548] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.548] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.548] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.548] |  :  .  |  :  .  |      ...)  
[10:49:42.548] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.548] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.551] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.551] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.551] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.552] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.552] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.552] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:42.552] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.552] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.552] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.553] |  :  readImmediateCondition() ...
[10:49:42.553] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.553] |  :   - Number of RDS files: 0
[10:49:42.553] |  :  readImmediateCondition() ... DONE
[10:49:42.554] |  :  MulticoreFuture #1
[10:49:42.554] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:42.551] |  :  .  |  :  .  List of 1
[10:49:42.551] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.551] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.551] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.551] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.551] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.551] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.551] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.554] |  :  .  nx: 2
[10:49:42.554] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.554] |  :  .  relay: TRUE
[10:49:42.554] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.555] |  :  .  stdout: TRUE
[10:49:42.555] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.555] |  :  .  signal: TRUE
[10:49:42.555] |  :  .  resignal: FALSE
[10:49:42.555] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:42.555] |  :  .  force: TRUE
[10:49:42.555] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.555] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:42.555] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:42.556] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:42.556] |  :  .  until=1
[10:49:42.556] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:42.556] |  :  .  relaying element #1
[10:49:42.556] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:42.556] |  :  .  result() for MulticoreFuture ...
[10:49:42.556] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.556] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.557] |  :  .  |  assign_globals() ...
[10:49:42.557] |  :  .  |  readImmediateCondition() ...
[10:49:42.557] |  :  .  |    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.558] |  :  .  |   - Number of RDS files: 0
[10:49:42.558] |  :  .  |  readImmediateCondition() ... DONE
[10:49:42.558] |  :  .  |  result() for MulticoreFuture ...
[10:49:42.558] |  :  .  |  result() for MulticoreFuture ... done
[10:49:42.559] |  :  .  result() for MulticoreFuture ... done
[10:49:42.559] |  :  .  result() for MulticoreFuture ...
[10:49:42.559] |  :  .  result() for MulticoreFuture ... done
[10:49:42.559] |  :  .  result() for MulticoreFuture ...
[10:49:42.559] |  :  .  result() for MulticoreFuture ... done
[10:49:42.560] |  :  .  result() for MulticoreFuture ...
[10:49:42.560] |  :  .  result() for MulticoreFuture ... done
[10:49:42.560] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.560] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.560] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:42.561] |  :  value(<MulticoreFuture>, ...) ...
[10:49:42.561] |  :  .  result() for MulticoreFuture ...
[10:49:42.561] |  :  .  result() for MulticoreFuture ... done
[10:49:42.561] |  :  .  result() for MulticoreFuture ...
[10:49:42.562] |  :  .  result() for MulticoreFuture ... done
[10:49:42.562] |  :  .  value: <list>
[10:49:42.562] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:42.562] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:42.562] |  :  .  nx: 2
[10:49:42.562] |  :  .  relay: TRUE
[10:49:42.562] |  :  .  stdout: TRUE
[10:49:42.563] |  :  .  signal: TRUE
[10:49:42.563] |  :  .  resignal: FALSE
[10:49:42.563] |  :  .  force: TRUE
[10:49:42.563] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.563] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.563] |  :  .  until=2
[10:49:42.564] |  :  .  relaying element #2
[10:49:42.564] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.564] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.564] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:42.564] |  :  length: 1 (resolved future 1)
[10:49:42.565] |  checking value #1 ... done
[10:49:42.565] |  checking value #2 ...
[10:49:42.565] |  :  'obj' is MulticoreFuture
[10:49:42.557] |  :  .  |  List of 5
[10:49:42.557] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:42.557] |  :  .  |   $ future.call.arguments    : list()
[10:49:42.557] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:42.557] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:42.557] |  :  .  |    ..$ beta: num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:49:42.557] |  :  .  |    ..$ a   : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:49:42.557] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:42.557] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:42.557] |  :  .  |   - attr(*, "where")=List of 5
[10:49:42.557] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:42.557] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:42.557] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:42.557] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:42.557] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:42.557] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:42.557] |  :  .  |   - attr(*, "total_size")= num 5437
[10:49:42.557] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:42.557] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:42.568] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:42.568] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:42.568] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:42.568] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:42.568] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:42.568] |  :  .  |  assign_globals() ... done
[10:49:42.571] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.571] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:42.571] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:42.571] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:42.571] |  :  .  |  :  .  |  :  New stack:
[10:49:42.572] |  :  .  |  :  .  |  :  List of 1
[10:49:42.572] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.572] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.572] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.572] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.572] |  :  .  |  :  .  |  :      ...)  
[10:49:42.572] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.572] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.572] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.572] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.572] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.572] |  :  .  |  :  .  |  :      ...)  
[10:49:42.572] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.572] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.575] |  :  .  |  :  .  |  :  Old stack:
[10:49:42.575] |  :  readImmediateCondition() ...
[10:49:42.575] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.576] |  :   - Number of RDS files: 0
[10:49:42.576] |  :  readImmediateCondition() ... DONE
[10:49:42.576] |  checking value #2 ... done
[10:49:42.575] |  :  .  |  :  .  |  :  List of 1
[10:49:42.575] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.575] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.575] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.575] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.575] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.575] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.575] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.577] |  :  .  |  :  .  |  :  Not identical
[10:49:42.577] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:42.578] |  :  .  |  :  .  |  :  .  List of 2
[10:49:42.578] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.578] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.578] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.578] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:42.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.578] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.578] |  :  .  |  :  .  |  :  .      ...)  
[10:49:42.578] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.578] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.578] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.578] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:42.582] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:42.582] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:42.582] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:42.582] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:42.583] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:42.583] |  :  .  |  :  .  |  List of future strategies:
[10:49:42.583] |  :  .  |  :  .  |  1. multicore:
[10:49:42.583] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:42.583] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:42.583] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:42.586] |  Number of remaining objects: 1
[10:49:42.587] |  checking value #2 ...
[10:49:42.587] |  :  'obj' is MulticoreFuture
[10:49:42.583] |  :  .  |  :  .  |  List of 1
[10:49:42.583] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.583] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.583] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.583] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.583] |  :  .  |  :  .  |      ...)  
[10:49:42.583] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.583] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.583] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.583] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.583] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.583] |  :  .  |  :  .  |      ...)  
[10:49:42.583] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.583] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.588] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:42.588] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:42.588] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.588] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.588] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.589] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:42.589] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:42.589] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.589] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:42.589] |  :  readImmediateCondition() ...
[10:49:42.589] |  :    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.589] |  :   - Number of RDS files: 0
[10:49:42.590] |  :  readImmediateCondition() ... DONE
[10:49:42.590] |  :  MulticoreFuture #2
[10:49:42.590] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:42.590] |  :  .  nx: 2
[10:49:42.590] |  :  .  relay: TRUE
[10:49:42.590] |  :  .  stdout: TRUE
[10:49:42.590] |  :  .  signal: TRUE
[10:49:42.590] |  :  .  resignal: FALSE
[10:49:42.590] |  :  .  force: TRUE
[10:49:42.591] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:42.591] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:42.591] |  :  .  until=2
[10:49:42.591] |  :  .  relaying element #2
[10:49:42.591] |  :  .  result() for MulticoreFuture ...
[10:49:42.591] |  :  .  |  readImmediateCondition() ...
[10:49:42.592] |  :  .  |    - path: ‘/tmp/RtmpZzpgPQ/.future/immediateConditions’
[10:49:42.592] |  :  .  |   - Number of RDS files: 0
[10:49:42.592] |  :  .  |  readImmediateCondition() ... DONE
[10:49:42.592] |  :  .  |  result() for MulticoreFuture ...
[10:49:42.592] |  :  .  |  result() for MulticoreFuture ... done
[10:49:42.593] |  :  .  result() for MulticoreFuture ... done
[10:49:42.593] |  :  .  result() for MulticoreFuture ...
[10:49:42.593] |  :  .  result() for MulticoreFuture ... done
[10:49:42.593] |  :  .  result() for MulticoreFuture ...
[10:49:42.593] |  :  .  result() for MulticoreFuture ... done
[10:49:42.594] |  :  .  result() for MulticoreFuture ...
[10:49:42.594] |  :  .  result() for MulticoreFuture ... done
[10:49:42.594] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.594] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.594] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:42.594] |  :  value(<MulticoreFuture>, ...) ...
[10:49:42.594] |  :  .  result() for MulticoreFuture ...
[10:49:42.595] |  :  .  result() for MulticoreFuture ... done
[10:49:42.595] |  :  .  result() for MulticoreFuture ...
[10:49:42.595] |  :  .  result() for MulticoreFuture ... done
[10:49:42.595] |  :  .  value: <list>
[10:49:42.595] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:42.595] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:42.596] |  :  .  nx: 2
[10:49:42.596] |  :  .  relay: TRUE
[10:49:42.596] |  :  .  stdout: TRUE
[10:49:42.596] |  :  .  signal: TRUE
[10:49:42.596] |  :  .  resignal: FALSE
[10:49:42.596] |  :  .  force: TRUE
[10:49:42.596] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.596] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.597] |  :  .  until=2
[10:49:42.597] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.597] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.597] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:42.597] |  :  length: 0 (resolved future 2)
[10:49:42.597] |  checking value #2 ... done
[10:49:42.597] |  Relaying remaining futures ...
[10:49:42.597] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:42.597] |  :  .  nx: 2
[10:49:42.598] |  :  .  relay: TRUE
[10:49:42.598] |  :  .  stdout: TRUE
[10:49:42.598] |  :  .  signal: TRUE
[10:49:42.598] |  :  .  resignal: FALSE
[10:49:42.598] |  :  .  force: TRUE
[10:49:42.598] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.598] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:42.598] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:42.598] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:42.598] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:42.599] |  Relaying remaining futures ... done
[10:49:42.599] value() on list ... done
[10:49:42.599]  - Number of value chunks collected: 2
[10:49:42.599] Resolving 2 futures (chunks) ... DONE
[10:49:42.599] Reducing values from 2 chunks ...
[10:49:42.599]  - Number of values collected after concatenation: 3
[10:49:42.599]  - Number of values expected: 3
[10:49:42.599] Reducing values from 2 chunks ... DONE
[10:49:42.599] future_lapply() ... DONE
[10:49:42.600] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.600] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:42.600] |  :  all.equal() for FutureStrategyList ...
[10:49:42.600] |  :  .  New stack:
[10:49:42.600] |  :  .  List of 1
[10:49:42.600] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.600] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.600] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.600] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.600] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.600] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:42.600] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.604] |  :  .  Old stack:
[10:49:42.605] |  :  .  List of 1
[10:49:42.605] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.605] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.605] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.605] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.605] |  :  .      ...)  
[10:49:42.605] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.605] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.605] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:42.605] |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.605] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.605] |  :  .      ...)  
[10:49:42.605] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.605] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.608] |  :  .  Not identical
[10:49:42.608] |  :  .  all.equal() for future ...
[10:49:42.608] |  :  .  |  List of 2
[10:49:42.608] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.608] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.608] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.608] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.608] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.608] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:42.608] |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:42.608] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:42.608] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:42.608] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.608] |  :  .  |      ...)  
[10:49:42.608] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.608] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.608] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.608] |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0382dd80> 
[10:49:42.608] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:42.608] |  :  .  |      ...)  
[10:49:42.608] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:42.613] |  :  .  |  Formals differ
[10:49:42.613] |  :  .  all.equal() for future ... done
[10:49:42.613] |  :  .  Future strategies differ at level 1
[10:49:42.613] |  :  all.equal() for FutureStrategyList ... done
[10:49:42.613] |  :  plan(): Setting new future strategy stack:
[10:49:42.613] |  :  List of future strategies:
[10:49:42.613] |  :  1. sequential:
[10:49:42.613] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:42.613] |  :     - tweaked: FALSE
[10:49:42.613] |  :     - call: plan(sequential)
[10:49:42.614] |  :  List of 1
[10:49:42.614] |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.614] |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.614] |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.614] |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.614] |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.614] |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:42.614] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.616] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:42.616] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.616] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:42.616] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.617] |  :  .  Legacy shutdown of cluster workers ...
[10:49:42.618] |  :  .  |  Stopping existing cluster ...
[10:49:42.618] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:42.618] |  :  .  |  Stopping existing cluster ... done
[10:49:42.618] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:42.618] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:42.618] |  :  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:49:42.618] |  :  .  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.618] |  :  .   - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.618] |  :  .   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.618] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.618] |  :  .   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.618] |  :  .   - attr(*, "call")= language plan(sequential)
[10:49:42.620] |  :  .  init: NULL
[10:49:42.620] |  :  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:49:42.620] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.620] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:42.620] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.621] |  :  Backend function: <‘NULL’>
[10:49:42.621] |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:42.621] |  :  plan(): nbrOfWorkers() = 1
[10:49:42.621] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:42.621] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[10:49:42.621] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.622] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:42.622] |  :  all.equal() for FutureStrategyList ...
[10:49:42.622] |  :  .  New stack:
[10:49:42.622] |  :  .  List of 1
[10:49:42.622] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:42.622] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.622] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:42.622] |  :  .    ..- attr(*, "init")= logi TRUE
[10:49:42.622] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:42.622] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:42.622] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:42.622] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:42.622] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:42.622] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.626] |  :  .  Old stack:
[10:49:42.626] |  :  .  List of 1
[10:49:42.626] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.626] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.626] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.626] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.626] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.626] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:42.626] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.628] |  :  .  Not identical
[10:49:42.629] |  :  .  all.equal() for future ...
[10:49:42.629] |  :  .  |  List of 2
[10:49:42.629] |  :  .  |   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:42.629] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.629] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:42.629] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:49:42.629] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:42.629] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:42.629] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:42.629] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:42.629] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:42.629] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.629] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:42.629] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:42.629] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.629] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:42.629] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:42.633] |  :  .  |  Formals differ
[10:49:42.633] |  :  .  all.equal() for future ... done
[10:49:42.633] |  :  .  Future strategies differ at level 1
[10:49:42.633] |  :  all.equal() for FutureStrategyList ... done
[10:49:42.633] |  :  plan(): Setting new future strategy stack:
[10:49:42.633] |  :  List of future strategies:
[10:49:42.633] |  :  1. multisession:
[10:49:42.633] |  :     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:42.633] |  :     - tweaked: FALSE
[10:49:42.633] |  :     - call: plan(strategy)
[10:49:42.634] |  :  List of 1
[10:49:42.634] |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:42.634] |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.634] |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:42.634] |  :    ..- attr(*, "init")= logi TRUE
[10:49:42.634] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:42.634] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:42.634] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:42.634] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:42.634] |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:42.634] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:42.636] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:42.637] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:42.637] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:42.637] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:42.637] |  :  .  Legacy shutdown of cluster workers ...
[10:49:42.637] |  :  .  |  Stopping existing cluster ...
[10:49:42.637] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:42.637] |  :  .  |  Stopping existing cluster ... done
[10:49:42.637] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:42.637] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:42.637] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:49:42.638] |  :  .  function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:42.638] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:42.638] |  :  .   - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:42.638] |  :  .   - attr(*, "init")= logi TRUE
[10:49:42.638] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:42.638] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:42.638] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:42.638] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:49:42.638] |  :  .   - attr(*, "call")= language plan(strategy)
[10:49:42.640] |  :  .  init: TRUE
[10:49:42.640] |  :  .  makeFutureBackend(<multisession>) ...
[10:49:42.640] |  :  .  |  Backend function: <‘NULL’>
[10:49:42.642] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[10:49:42.642] |  :  .  |  :  workers: 2
[10:49:42.643] |  :  .  |  :  getCluster() ...
[10:49:42.643] |  :  .  |  :  getCluster() ... done
[10:49:42.643] |  :  .  |  :  Stopping existing cluster ...
[10:49:42.643] |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:49:42.643] |  :  .  |  :  Stopping existing cluster ... done
[10:49:42.643] |  :  .  |  :  Starting new cluster ...
[10:49:42.644] |  :  .  |  :  .  makeCluster(workers, ...) ...
[10:49:42.644] |  :  .  |  :  .  |  Arguments:
[10:49:42.644] |  :  .  |  :  .  |  List of 2
[10:49:42.644] |  :  .  |  :  .  |   $             : int 2
[10:49:42.644] |  :  .  |  :  .  |   $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:49:43.141] |  :  .  |  :  .  |  Generated cluster UUID
[10:49:43.141] |  :  .  |  :  .  |  Cluster UUID: ‘dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:43.141] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:43.144] |  :  .  |  :  .  makeCluster(workers, ...) ... done
[10:49:43.144] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:43.145] |  :  .  |  :  Starting new cluster ... done
[10:49:43.145] |  :  .  |  :  Number of workers: 2
[10:49:43.145] |  :  .  |  :  Workers UUID: ‘dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:43.146] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[10:49:43.146] |  :  .  |  Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:43.146] |  :  .  makeFutureBackend(<multisession>) ... done
[10:49:43.146] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:49:43.146] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.146] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:43.146] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.146] |  :  plan(): nbrOfWorkers() = 2
[10:49:43.147] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:43.147] plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.147] future_lapply() ...
[10:49:43.147] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.148] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:43.148] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.148] Number of chunks: 2
[10:49:43.148] getGlobalsAndPackagesXApply() ...
[10:49:43.148]  - future.globals: TRUE
[10:49:43.148] getGlobalsAndPackages() ...
[10:49:43.148] |  Searching for globals ...
[10:49:43.149] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:43.150] |  Searching for globals ... DONE
[10:49:43.150] |  Resolving globals: FALSE
[10:49:43.150] |  Search for packages associated with the globals ...
[10:49:43.150] |  :  Packages associated with globals: [1] ‘base’
[10:49:43.150] |  :  Packages: [1] ‘base’
[10:49:43.150] |  Search for packages associated with the globals ... DONE
[10:49:43.151] |  The total size of the 1 globals is 273 bytes (273 bytes)
[10:49:43.151] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 273 bytes There is one global: ‘FUN’ (273 bytes of class ‘function’)
[10:49:43.151] |  Packages after dropping 'base': [0] 
[10:49:43.151] |  globals: [1] ‘FUN’
[10:49:43.151] |  packages: [0] 
[10:49:43.151] getGlobalsAndPackages() ... done
[10:49:43.151]  - globals found/used: [n=1] ‘FUN’
[10:49:43.151]  - needed namespaces: [n=0] 
[10:49:43.152] Finding globals ... DONE
[10:49:43.152]  - use_args: TRUE
[10:49:43.152]  - Getting '...' globals ...
[10:49:43.152] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:43.152] |  recursive: 0
[10:49:43.152] |  length: 1
[10:49:43.152] |  elements: ‘...’
[10:49:43.152] |  'obj' is DotDotDotList
[10:49:43.153] |  resolve(obj, ...) ...
[10:49:43.153] |  resolve(obj, ...) ... done
[10:49:43.153] |  length: 0 (resolved future 1)
[10:49:43.153] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:43.153]    - '...' content: [n=0] 
[10:49:43.153] List of 1
[10:49:43.153]  $ ...: list()
[10:49:43.153]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:43.153]  - attr(*, "where")=List of 1
[10:49:43.153]   ..$ ...:<environment: 0x555d03152a70> 
[10:49:43.153]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:43.153]  - attr(*, "resolved")= logi TRUE
[10:49:43.153]  - attr(*, "total_size")= num NA
[10:49:43.156]  - Getting '...' globals ... DONE
[10:49:43.156] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:43.156] List of 2
[10:49:43.156]  $ ...future.FUN:function (x, ...)  
[10:49:43.156]  $ ...          : list()
[10:49:43.156]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:43.156]  - attr(*, "where")=List of 2
[10:49:43.156]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:43.156]   ..$ ...          :<environment: 0x555d03152a70> 
[10:49:43.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:43.156]  - attr(*, "resolved")= logi FALSE
[10:49:43.156]  - attr(*, "total_size")= num 5249
[10:49:43.159] Packages to be attached in all futures: [n=0] 
[10:49:43.159] getGlobalsAndPackagesXApply() ... DONE
[10:49:43.159] Number of futures (= number of chunks): 2
[10:49:43.159] Launching 2 futures (chunks) ...
[10:49:43.159] Chunk #1 of 2 ...
[10:49:43.160]  - Finding globals in 'X' for chunk #1 ...
[10:49:43.160] getGlobalsAndPackages() ...
[10:49:43.160] |  Searching for globals ...
[10:49:43.160] |  :  globals found: [0] 
[10:49:43.160] |  Searching for globals ... DONE
[10:49:43.160] |  globals: [0] <none>
[10:49:43.160] |  packages: [0] <none>
[10:49:43.161] getGlobalsAndPackages() ... done
[10:49:43.161]    + additional globals found: [n=0] 
[10:49:43.161]    + additional namespaces needed: [n=0] 
[10:49:43.161]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:43.161]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:43.161]  - seeds: <none>
[10:49:43.161]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.161] getGlobalsAndPackages() ...
[10:49:43.162] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.162] |  Resolving globals: FALSE
[10:49:43.162] |  Tweak future expression to call with '...' arguments ...
[10:49:43.162] |  :  {
[10:49:43.162] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.162] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:43.162] |  :      "# as a global variable                                         "
[10:49:43.162] |  :      do.call(function(...) {
[10:49:43.162] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.162] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.162] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.162] |  :              on.exit(options(oopts), add = TRUE)
[10:49:43.162] |  :          }
[10:49:43.162] |  :          {
[10:49:43.162] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.162] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.162] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:43.162] |  :              })
[10:49:43.162] |  :          }
[10:49:43.162] |  :      }, args = future.call.arguments)
[10:49:43.162] |  :  }
[10:49:43.162] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:43.162] |  Search for packages associated with the globals ...
[10:49:43.163] |  :  Packages associated with globals: [1] ‘base’
[10:49:43.163] |  :  Packages: [1] ‘base’
[10:49:43.163] |  Search for packages associated with the globals ... DONE
[10:49:43.163] |  Packages after dropping 'base': [0] 
[10:49:43.163] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.164] |  packages: [0] 
[10:49:43.164] getGlobalsAndPackages() ... done
[10:49:43.164] run() for Future (‘Future’) ...
[10:49:43.164] |  state: ‘created’
[10:49:43.164] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.164] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.164] |  Using MultisessionFutureBackend ...
[10:49:43.165] |  :  Launching futures ...
[10:49:43.165] |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:43.165] |  :  .  |  Workers: [n=2]
[10:49:43.165] |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:43.167] |  :  .  |  FutureRegistry: ‘workers-dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:43.167] |  :  .  |  requestWorker() ...
[10:49:43.168] |  :  .  |  :  requestNode() ...
[10:49:43.168] |  :  .  |  :  .  Number of workers: 2
[10:49:43.168] |  :  .  |  :  .  Polling for a free worker ...
[10:49:43.168] |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.168] |  :  .  |  :  .  |  :  Created empty registry ‘workers-dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:43.169] |  :  .  |  :  .  |  :  Listing all futures
[10:49:43.169] |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:43.169] |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.169] |  :  .  |  :  .  |  Total time: 0
[10:49:43.169] |  :  .  |  :  .  Polling for a free worker ... done
[10:49:43.169] |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.169] |  :  .  |  :  .  |  Listing all futures
[10:49:43.169] |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:43.169] |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.170] |  :  .  |  :  .  Index of first available worker: 1
[10:49:43.170] |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:43.229] |  :  .  |  :  .  |  Worker is functional
[10:49:43.229] |  :  .  |  :  .  requestNode() ... done
[10:49:43.230] |  :  .  |  :  .  cluster node index: 1
[10:49:43.230] |  :  .  |  :  requestWorker() ... done
[10:49:43.230] |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:43.231] |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:43.231] |  :  .  |  :  launchFuture() ...
[10:49:43.231] |  :  .  |  :  .  cluster node index: 1
[10:49:43.231] |  :  .  |  :  .  getFutureData() ...
[10:49:43.231] |  :  .  |  :  .  |  getFutureCore() ...
[10:49:43.231] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:43.232] |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:43.232] |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:43.232] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:43.232] |  :  .  |  :  .  |  getFutureContext() ...
[10:49:43.232] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.232] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:43.232] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.232] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:43.233] |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:43.233] |  :  .  |  :  .  getFutureData() ... done
[10:49:43.233] |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ...
[10:49:43.234] |  :  .  |  :  .  |  Appended future to position #1
[10:49:43.234] |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:43.234] |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ... done
[10:49:43.234] |  :  .  |  :  launchFuture() ... done
[10:49:43.234] |  :  .  |  :  MultisessionFuture started
[10:49:43.234] |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:43.234] |  :  .  Launching futures ... done
[10:49:43.234] |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.235] |  :  Using MultisessionFutureBackend ... done
[10:49:43.235] |  run() for Future (‘MultisessionFuture’) ... done
[10:49:43.235] Created future:
[10:49:43.236] |  isFutureResolved() ...
[10:49:43.237] |  :  assertValidConnection() ...
[10:49:43.237] |  :  .  cluster node index: 1
[10:49:43.237] |  :  assertValidConnection() ... done
[10:49:43.248] |  isFutureResolved() ... done
[10:49:43.235] MultisessionFuture:
[10:49:43.235] Label: ‘future_eapply-1’
[10:49:43.235] Expression:
[10:49:43.235] {
[10:49:43.235]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.235]     "# expression in do.call(), because function called uses '...'  "
[10:49:43.235]     "# as a global variable                                         "
[10:49:43.235]     do.call(function(...) {
[10:49:43.235]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.235]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.235]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.235]             on.exit(options(oopts), add = TRUE)
[10:49:43.235]         }
[10:49:43.235]         {
[10:49:43.235]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.235]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.235]                 ...future.FUN(...future.X_jj, ...)
[10:49:43.235]             })
[10:49:43.235]         }
[10:49:43.235]     }, args = future.call.arguments)
[10:49:43.235] }
[10:49:43.235] Lazy evaluation: FALSE
[10:49:43.235] Asynchronous evaluation: TRUE
[10:49:43.235] Local evaluation: TRUE
[10:49:43.235] Environment: R_GlobalEnv
[10:49:43.235] Capture standard output: TRUE
[10:49:43.235] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:43.235] Immediate condition classes: ‘immediateCondition’
[10:49:43.235] Globals: 5 objects totaling 479 bytes (function ‘...future.FUN’ of 273 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:43.235] Packages: <none>
[10:49:43.235] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:43.235] Resolved: FALSE
[10:49:43.235] Value: <not collected>
[10:49:43.235] Conditions captured: <none>
[10:49:43.235] Early signaling: FALSE
[10:49:43.235] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:43.235] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.248] Chunk #1 of 2 ... DONE
[10:49:43.248] Chunk #2 of 2 ...
[10:49:43.249]  - Finding globals in 'X' for chunk #2 ...
[10:49:43.249] |  getGlobalsAndPackages() ...
[10:49:43.249] |  :  Searching for globals ...
[10:49:43.249] |  :  .  globals found: [0] 
[10:49:43.250] |  :  Searching for globals ... DONE
[10:49:43.250] |  :  globals: [0] <none>
[10:49:43.250] |  :  packages: [0] <none>
[10:49:43.250] |  getGlobalsAndPackages() ... done
[10:49:43.250]    + additional globals found: [n=0] 
[10:49:43.250]    + additional namespaces needed: [n=0] 
[10:49:43.250]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:43.250]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:43.250]  - seeds: <none>
[10:49:43.251]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.251] |  getGlobalsAndPackages() ...
[10:49:43.251] |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.251] |  :  Resolving globals: FALSE
[10:49:43.251] |  :  Tweak future expression to call with '...' arguments ...
[10:49:43.251] |  :  .  {
[10:49:43.251] |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.251] |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:43.251] |  :  .      "# as a global variable                                         "
[10:49:43.251] |  :  .      do.call(function(...) {
[10:49:43.251] |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.251] |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.251] |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.251] |  :  .              on.exit(options(oopts), add = TRUE)
[10:49:43.251] |  :  .          }
[10:49:43.251] |  :  .          {
[10:49:43.251] |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.251] |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.251] |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:49:43.251] |  :  .              })
[10:49:43.251] |  :  .          }
[10:49:43.251] |  :  .      }, args = future.call.arguments)
[10:49:43.251] |  :  .  }
[10:49:43.252] |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:43.252] |  :  Search for packages associated with the globals ...
[10:49:43.252] |  :  .  Packages associated with globals: [1] ‘base’
[10:49:43.252] |  :  .  Packages: [1] ‘base’
[10:49:43.253] |  :  Search for packages associated with the globals ... DONE
[10:49:43.253] |  :  Packages after dropping 'base': [0] 
[10:49:43.253] |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.253] |  :  packages: [0] 
[10:49:43.253] |  getGlobalsAndPackages() ... done
[10:49:43.253] |  run() for Future (‘Future’) ...
[10:49:43.253] |  :  state: ‘created’
[10:49:43.254] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.254] |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.254] |  :  Using MultisessionFutureBackend ...
[10:49:43.254] |  :  .  Launching futures ...
[10:49:43.254] |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:43.254] |  :  .  |  :  Workers: [n=2]
[10:49:43.254] |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:43.256] |  :  .  |  :  FutureRegistry: ‘workers-dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:43.257] |  :  .  |  :  requestWorker() ...
[10:49:43.257] |  :  .  |  :  .  requestNode() ...
[10:49:43.257] |  :  .  |  :  .  |  Number of workers: 2
[10:49:43.257] |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:43.257] |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.257] |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:43.257] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:43.257] |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.258] |  :  .  |  :  .  |  :  Total time: 0
[10:49:43.258] |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:43.258] |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.258] |  :  .  |  :  .  |  :  Listing all futures
[10:49:43.258] |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:43.258] |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.258] |  :  .  |  :  .  |  Index of first available worker: 2
[10:49:43.258] |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:43.338] |  :  .  |  :  .  |  :  Worker is functional
[10:49:43.338] |  :  .  |  :  .  |  requestNode() ... done
[10:49:43.338] |  :  .  |  :  .  |  cluster node index: 2
[10:49:43.338] |  :  .  |  :  .  requestWorker() ... done
[10:49:43.338] |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:43.339] |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:43.339] |  :  .  |  :  .  launchFuture() ...
[10:49:43.339] |  :  .  |  :  .  |  cluster node index: 2
[10:49:43.339] |  :  .  |  :  .  |  getFutureData() ...
[10:49:43.340] |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:43.340] |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:43.340] |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:43.340] |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:43.340] |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:43.340] |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:43.340] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.341] |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:43.341] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.341] |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:43.341] |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:43.341] |  :  .  |  :  .  |  getFutureData() ... done
[10:49:43.342] |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ...
[10:49:43.342] |  :  .  |  :  .  |  :  Appended future to position #2
[10:49:43.342] |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:49:43.342] |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ... done
[10:49:43.342] |  :  .  |  :  .  launchFuture() ... done
[10:49:43.342] |  :  .  |  :  .  MultisessionFuture started
[10:49:43.342] |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:43.343] |  :  .  |  Launching futures ... done
[10:49:43.343] |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.343] |  :  .  Using MultisessionFutureBackend ... done
[10:49:43.343] |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:43.343] Created future:
[10:49:43.344] |  :  isFutureResolved() ...
[10:49:43.345] |  :  .  assertValidConnection() ...
[10:49:43.345] |  :  .  |  cluster node index: 2
[10:49:43.345] |  :  .  assertValidConnection() ... done
[10:49:43.356] |  :  isFutureResolved() ... done
[10:49:43.343] MultisessionFuture:
[10:49:43.343] Label: ‘future_eapply-2’
[10:49:43.343] Expression:
[10:49:43.343] {
[10:49:43.343]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.343]     "# expression in do.call(), because function called uses '...'  "
[10:49:43.343]     "# as a global variable                                         "
[10:49:43.343]     do.call(function(...) {
[10:49:43.343]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.343]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.343]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.343]             on.exit(options(oopts), add = TRUE)
[10:49:43.343]         }
[10:49:43.343]         {
[10:49:43.343]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.343]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.343]                 ...future.FUN(...future.X_jj, ...)
[10:49:43.343]             })
[10:49:43.343]         }
[10:49:43.343]     }, args = future.call.arguments)
[10:49:43.343] }
[10:49:43.343] Lazy evaluation: FALSE
[10:49:43.343] Asynchronous evaluation: TRUE
[10:49:43.343] Local evaluation: TRUE
[10:49:43.343] Environment: R_GlobalEnv
[10:49:43.343] Capture standard output: TRUE
[10:49:43.343] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:43.343] Immediate condition classes: ‘immediateCondition’
[10:49:43.343] Globals: 5 objects totaling 629 bytes (function ‘...future.FUN’ of 273 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 205 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:43.343] Packages: <none>
[10:49:43.343] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:43.343] Resolved: FALSE
[10:49:43.343] Value: <not collected>
[10:49:43.343] Conditions captured: <none>
[10:49:43.343] Early signaling: FALSE
[10:49:43.343] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:43.343] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.356] Chunk #2 of 2 ... DONE
[10:49:43.356] Launching 2 futures (chunks) ... DONE
[10:49:43.356] Resolving 2 futures (chunks) ...
[10:49:43.357] |  :  value() on list ...
[10:49:43.357] |  :  .  recursive: 0
[10:49:43.357] |  :  .  length: 2
[10:49:43.357] |  :  .  
[10:49:43.357] |  :  .  Number of remaining objects: 2
[10:49:43.357] |  :  .  checking value #1 ...
[10:49:43.357] |  :  .  |  'obj' is MultisessionFuture
[10:49:43.357] |  :  .  |  isFutureResolved() ...
[10:49:43.358] |  :  .  |  :  assertValidConnection() ...
[10:49:43.358] |  :  .  |  :  .  cluster node index: 1
[10:49:43.358] |  :  .  |  :  assertValidConnection() ... done
[10:49:43.359] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:43.359] |  :  .  |  :  .  cluster node index: 1
[10:49:43.359] |  :  .  |  :  .  [1] TRUE
[10:49:43.359] |  :  .  |  :  .  received data:
[10:49:43.359] |  :  .  |  :  .  List of 5
[10:49:43.359] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:43.359] |  :  .  |  :  .   $ value  :List of 13
[10:49:43.359] |  :  .  |  :  .    ..$ value            :List of 1
[10:49:43.359] |  :  .  |  :  .    .. ..$ : num 0.5
[10:49:43.359] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:43.359] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:43.359] |  :  .  |  :  .    ..$ conditions       : list()
[10:49:43.359] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:43.359] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:43.359] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:43.359] |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:43.359] |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:43.359] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:43.359] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:43.359] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.359] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.359] |  :  .  |  :  .    ..$ session_uuid     : chr "2dcd7b8c091ae79fc425586593ad7b28"
[10:49:43.359] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:43.359] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:43.359] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:43.359] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:43.359] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:43.359] |  :  .  |  :  .    .. .. ..$ pid   : int 64176
[10:49:43.359] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.359] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:43.359] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:43.359] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:43.359] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:43.359] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:43.359] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:43.359] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:43.359] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:43.359] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:43.359] |  :  .  |  :  .   $ success: logi TRUE
[10:49:43.359] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.061 0.005 0.067 0 0
[10:49:43.359] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:43.359] |  :  .  |  :  .   $ tag    : NULL
[10:49:43.373] |  :  .  |  :  .  Received FutureResult
[10:49:43.374] |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ...
[10:49:43.374] |  :  .  |  :  .  |  Removed future from position #1
[10:49:43.374] |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:43.374] |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ... done
[10:49:43.374] |  :  .  |  :  .  Erased future from future backend
[10:49:43.374] |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.374] |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.375] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.375] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:43.375] |  :  .  |  isFutureResolved() ... done
[10:49:43.375] |  :  .  |  MultisessionFuture #1
[10:49:43.375] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:43.375] |  :  .  |  :  nx: 2
[10:49:43.375] |  :  .  |  :  relay: TRUE
[10:49:43.375] |  :  .  |  :  stdout: TRUE
[10:49:43.375] |  :  .  |  :  signal: TRUE
[10:49:43.376] |  :  .  |  :  resignal: FALSE
[10:49:43.376] |  :  .  |  :  force: TRUE
[10:49:43.376] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:49:43.376] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:49:43.376] |  :  .  |  :  until=1
[10:49:43.376] |  :  .  |  :  relaying element #1
[10:49:43.376] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.376] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.377] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.377] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.377] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.377] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.377] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.377] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.377] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.377] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.378] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.378] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.378] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:43.378] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:43.378] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:43.378] |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:43.378] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.378] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.379] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.379] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.379] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.379] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.379] |  :  .  |  :  value: <list>
[10:49:43.379] |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:43.379] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:43.379] |  :  .  |  :  nx: 2
[10:49:43.379] |  :  .  |  :  relay: TRUE
[10:49:43.380] |  :  .  |  :  stdout: TRUE
[10:49:43.380] |  :  .  |  :  signal: TRUE
[10:49:43.382] |  :  .  |  :  resignal: FALSE
[10:49:43.382] |  :  .  |  :  force: TRUE
[10:49:43.383] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:43.383] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:43.383] |  :  .  |  :  until=2
[10:49:43.383] |  :  .  |  :  relaying element #2
[10:49:43.383] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:43.383] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:43.383] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:49:43.384] |  :  .  |  length: 1 (resolved future 1)
[10:49:43.384] |  :  .  checking value #1 ... done
[10:49:43.384] |  :  .  checking value #2 ...
[10:49:43.384] |  :  .  |  'obj' is MultisessionFuture
[10:49:43.384] |  :  .  |  isFutureResolved() ...
[10:49:43.385] |  :  .  |  :  assertValidConnection() ...
[10:49:43.385] |  :  .  |  :  .  cluster node index: 2
[10:49:43.385] |  :  .  |  :  assertValidConnection() ... done
[10:49:43.396] |  :  .  |  isFutureResolved() ... done
[10:49:43.396] |  :  .  checking value #2 ... done
[10:49:43.406] |  :  .  Number of remaining objects: 1
[10:49:43.406] |  :  .  checking value #2 ...
[10:49:43.407] |  :  .  |  'obj' is MultisessionFuture
[10:49:43.407] |  :  .  |  isFutureResolved() ...
[10:49:43.407] |  :  .  |  :  assertValidConnection() ...
[10:49:43.407] |  :  .  |  :  .  cluster node index: 2
[10:49:43.408] |  :  .  |  :  assertValidConnection() ... done
[10:49:43.418] |  :  .  |  isFutureResolved() ... done
[10:49:43.418] |  :  .  checking value #2 ... done
[10:49:43.429] |  :  .  Number of remaining objects: 1
[10:49:43.429] |  :  .  checking value #2 ...
[10:49:43.429] |  :  .  |  'obj' is MultisessionFuture
[10:49:43.429] |  :  .  |  isFutureResolved() ...
[10:49:43.430] |  :  .  |  :  assertValidConnection() ...
[10:49:43.430] |  :  .  |  :  .  cluster node index: 2
[10:49:43.430] |  :  .  |  :  assertValidConnection() ... done
[10:49:43.435] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:43.435] |  :  .  |  :  .  cluster node index: 2
[10:49:43.435] |  :  .  |  :  .  [1] TRUE
[10:49:43.435] |  :  .  |  :  .  received data:
[10:49:43.435] |  :  .  |  :  .  List of 5
[10:49:43.435] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:43.435] |  :  .  |  :  .   $ value  :List of 13
[10:49:43.435] |  :  .  |  :  .    ..$ value            :List of 2
[10:49:43.435] |  :  .  |  :  .    .. ..$ : num 4.54
[10:49:43.435] |  :  .  |  :  .    .. ..$ : num 5.5
[10:49:43.435] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:43.435] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:43.435] |  :  .  |  :  .    ..$ conditions       : list()
[10:49:43.435] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:43.435] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:43.435] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:43.435] |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:43.435] |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:43.435] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:43.435] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:43.435] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.435] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.435] |  :  .  |  :  .    ..$ session_uuid     : chr "694f4f5dc0f33d01aba962aff4b8d915"
[10:49:43.435] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:43.435] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:43.435] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:43.435] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:43.435] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:43.435] |  :  .  |  :  .    .. .. ..$ pid   : int 64177
[10:49:43.435] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.435] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:43.435] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:43.435] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:43.435] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:43.435] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:43.435] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:43.435] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:43.435] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:43.435] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:43.435] |  :  .  |  :  .   $ success: logi TRUE
[10:49:43.435] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.049 0.003 0.052 0 0
[10:49:43.435] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:43.435] |  :  .  |  :  .   $ tag    : NULL
[10:49:43.446] |  :  .  |  :  .  Received FutureResult
[10:49:43.446] |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ...
[10:49:43.446] |  :  .  |  :  .  |  Removed future from position #1
[10:49:43.446] |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:43.446] |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ... done
[10:49:43.447] |  :  .  |  :  .  Erased future from future backend
[10:49:43.447] |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.447] |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.447] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.447] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:43.447] |  :  .  |  isFutureResolved() ... done
[10:49:43.447] |  :  .  |  MultisessionFuture #2
[10:49:43.447] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:43.447] |  :  .  |  :  nx: 2
[10:49:43.447] |  :  .  |  :  relay: TRUE
[10:49:43.447] |  :  .  |  :  stdout: TRUE
[10:49:43.448] |  :  .  |  :  signal: TRUE
[10:49:43.448] |  :  .  |  :  resignal: FALSE
[10:49:43.448] |  :  .  |  :  force: TRUE
[10:49:43.448] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:43.448] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:43.448] |  :  .  |  :  until=2
[10:49:43.448] |  :  .  |  :  relaying element #2
[10:49:43.448] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.448] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.448] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.448] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.449] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.449] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.449] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.449] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.449] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.449] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.449] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.449] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.449] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:43.449] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:43.450] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:43.450] |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:43.450] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.450] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.450] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.450] |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.450] |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.450] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.450] |  :  .  |  :  value: <list>
[10:49:43.450] |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:43.451] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:43.451] |  :  .  |  :  nx: 2
[10:49:43.451] |  :  .  |  :  relay: TRUE
[10:49:43.451] |  :  .  |  :  stdout: TRUE
[10:49:43.451] |  :  .  |  :  signal: TRUE
[10:49:43.451] |  :  .  |  :  resignal: FALSE
[10:49:43.451] |  :  .  |  :  force: TRUE
[10:49:43.451] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:43.451] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:43.451] |  :  .  |  :  until=2
[10:49:43.451] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:43.451] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:43.452] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:43.452] |  :  .  |  length: 0 (resolved future 2)
[10:49:43.452] |  :  .  checking value #2 ... done
[10:49:43.452] |  :  .  Relaying remaining futures ...
[10:49:43.452] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:49:43.452] |  :  .  |  :  nx: 2
[10:49:43.452] |  :  .  |  :  relay: TRUE
[10:49:43.452] |  :  .  |  :  stdout: TRUE
[10:49:43.452] |  :  .  |  :  signal: TRUE
[10:49:43.452] |  :  .  |  :  resignal: FALSE
[10:49:43.452] |  :  .  |  :  force: TRUE
[10:49:43.453] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:43.453] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:43.453] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:43.453] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:43.453] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:49:43.453] |  :  .  Relaying remaining futures ... done
[10:49:43.453] |  :  value() on list ... done
[10:49:43.453]  - Number of value chunks collected: 2
[10:49:43.453] Resolving 2 futures (chunks) ... DONE
[10:49:43.453] Reducing values from 2 chunks ...
[10:49:43.454]  - Number of values collected after concatenation: 3
[10:49:43.454]  - Number of values expected: 3
[10:49:43.454] Reducing values from 2 chunks ... DONE
[10:49:43.454] future_lapply() ... DONE
[10:49:43.454] future_lapply() ...
[10:49:43.455] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.455] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:43.455] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.456] Number of chunks: 2
[10:49:43.456] getGlobalsAndPackagesXApply() ...
[10:49:43.456]  - future.globals: TRUE
[10:49:43.456] |  :  getGlobalsAndPackages() ...
[10:49:43.456] |  :  .  Searching for globals ...
[10:49:43.457] |  :  .  |  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:43.457] |  :  .  Searching for globals ... DONE
[10:49:43.458] |  :  .  Resolving globals: FALSE
[10:49:43.458] |  :  .  Search for packages associated with the globals ...
[10:49:43.458] |  :  .  |  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:43.458] |  :  .  |  Packages: [2] ‘stats’, ‘base’
[10:49:43.458] |  :  .  Search for packages associated with the globals ... DONE
[10:49:43.458] |  :  .  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:43.459] |  :  .  The total size of the 1 globals exported for future expression (‘FUN(probs = c(0.25, 0.5, 0.75))’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:43.459] |  :  .  Packages after dropping 'base': [1] ‘stats’
[10:49:43.459] |  :  .  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:43.459] |  :  .  globals: [1] ‘FUN’
[10:49:43.459] |  :  .  packages: [1] ‘stats’
[10:49:43.459] |  :  getGlobalsAndPackages() ... done
[10:49:43.459]  - globals found/used: [n=1] ‘FUN’
[10:49:43.459]  - needed namespaces: [n=1] ‘stats’
[10:49:43.460] Finding globals ... DONE
[10:49:43.460]  - use_args: TRUE
[10:49:43.460]  - Getting '...' globals ...
[10:49:43.460] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:43.460] |  :  .  recursive: 0
[10:49:43.460] |  :  .  length: 1
[10:49:43.460] |  :  .  elements: ‘...’
[10:49:43.461] |  :  .  'obj' is DotDotDotList
[10:49:43.461] |  :  .  resolve(obj, ...) ...
[10:49:43.461] |  :  .  resolve(obj, ...) ... done
[10:49:43.461] |  :  .  length: 0 (resolved future 1)
[10:49:43.461] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:43.461]    - '...' content: [n=1] ‘probs’
[10:49:43.461] List of 1
[10:49:43.461]  $ ...:List of 1
[10:49:43.461]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:49:43.461]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:43.461]  - attr(*, "where")=List of 1
[10:49:43.461]   ..$ ...:<environment: 0x555d04684be0> 
[10:49:43.461]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:43.461]  - attr(*, "resolved")= logi TRUE
[10:49:43.461]  - attr(*, "total_size")= num NA
[10:49:43.464]  - Getting '...' globals ... DONE
[10:49:43.464] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:43.464] List of 2
[10:49:43.464]  $ ...future.FUN:function (x, ...)  
[10:49:43.464]  $ ...          :List of 1
[10:49:43.464]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:49:43.464]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:43.464]  - attr(*, "where")=List of 2
[10:49:43.464]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:43.464]   ..$ ...          :<environment: 0x555d04684be0> 
[10:49:43.464]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:43.464]  - attr(*, "resolved")= logi FALSE
[10:49:43.464]  - attr(*, "total_size")= num 6525
[10:49:43.468] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:43.468] getGlobalsAndPackagesXApply() ... DONE
[10:49:43.468] Number of futures (= number of chunks): 2
[10:49:43.468] Launching 2 futures (chunks) ...
[10:49:43.468] Chunk #1 of 2 ...
[10:49:43.468]  - Finding globals in 'X' for chunk #1 ...
[10:49:43.468] |  :  getGlobalsAndPackages() ...
[10:49:43.468] |  :  .  Searching for globals ...
[10:49:43.469] |  :  .  |  globals found: [0] 
[10:49:43.469] |  :  .  Searching for globals ... DONE
[10:49:43.469] |  :  .  globals: [0] <none>
[10:49:43.469] |  :  .  packages: [0] <none>
[10:49:43.469] |  :  getGlobalsAndPackages() ... done
[10:49:43.469]    + additional globals found: [n=0] 
[10:49:43.469]    + additional namespaces needed: [n=0] 
[10:49:43.469]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:43.469]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:43.469]  - seeds: <none>
[10:49:43.470]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.470] |  :  getGlobalsAndPackages() ...
[10:49:43.470] |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.470] |  :  .  Resolving globals: FALSE
[10:49:43.470] |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:43.470] |  :  .  |  {
[10:49:43.470] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.470] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:43.470] |  :  .  |      "# as a global variable                                         "
[10:49:43.470] |  :  .  |      do.call(function(...) {
[10:49:43.470] |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.470] |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.470] |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.470] |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:49:43.470] |  :  .  |          }
[10:49:43.470] |  :  .  |          {
[10:49:43.470] |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.470] |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.470] |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:49:43.470] |  :  .  |              })
[10:49:43.470] |  :  .  |          }
[10:49:43.470] |  :  .  |      }, args = future.call.arguments)
[10:49:43.470] |  :  .  |  }
[10:49:43.470] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:43.470] |  :  .  Search for packages associated with the globals ...
[10:49:43.471] |  :  .  |  Packages associated with globals: [1] ‘stats’
[10:49:43.471] |  :  .  |  Packages: [1] ‘stats’
[10:49:43.471] |  :  .  Search for packages associated with the globals ... DONE
[10:49:43.471] |  :  .  Packages after dropping 'base': [1] ‘stats’
[10:49:43.471] |  :  .  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:43.471] |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.472] |  :  .  packages: [1] ‘stats’
[10:49:43.472] |  :  getGlobalsAndPackages() ... done
[10:49:43.472] |  :  run() for Future (‘Future’) ...
[10:49:43.472] |  :  .  state: ‘created’
[10:49:43.472] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.472] |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.472] |  :  .  Using MultisessionFutureBackend ...
[10:49:43.472] |  :  .  |  Launching futures ...
[10:49:43.473] |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:43.473] |  :  .  |  :  .  Workers: [n=2]
[10:49:43.473] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:43.474] |  :  .  |  :  .  FutureRegistry: ‘workers-dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:43.474] |  :  .  |  :  .  requestWorker() ...
[10:49:43.475] |  :  .  |  :  .  |  requestNode() ...
[10:49:43.475] |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:43.475] |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:43.475] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.475] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:43.475] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:43.475] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.475] |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:43.475] |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:43.475] |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.476] |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:43.476] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:43.476] |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.476] |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:49:43.476] |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:43.515] |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:43.515] |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:43.515] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:43.515] |  :  .  |  :  .  |  requestWorker() ... done
[10:49:43.515] |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:43.516] |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:43.516] |  :  .  |  :  .  |  launchFuture() ...
[10:49:43.516] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:43.516] |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:43.516] |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:43.516] |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘stats’
[10:49:43.516] |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:43.516] |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:43.516] |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:43.516] |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:43.517] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.517] |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:43.517] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.517] |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:43.517] |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:43.517] |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:43.517] |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ...
[10:49:43.518] |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:49:43.518] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:43.518] |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ... done
[10:49:43.518] |  :  .  |  :  .  |  launchFuture() ... done
[10:49:43.518] |  :  .  |  :  .  |  MultisessionFuture started
[10:49:43.518] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:43.518] |  :  .  |  :  Launching futures ... done
[10:49:43.518] |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.518] |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:43.518] |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:43.519] Created future:
[10:49:43.519] |  :  .  isFutureResolved() ...
[10:49:43.520] |  :  .  |  assertValidConnection() ...
[10:49:43.520] |  :  .  |  :  cluster node index: 1
[10:49:43.520] |  :  .  |  assertValidConnection() ... done
[10:49:43.530] |  :  .  isFutureResolved() ... done
[10:49:43.519] MultisessionFuture:
[10:49:43.519] Label: ‘future_eapply-1’
[10:49:43.519] Expression:
[10:49:43.519] {
[10:49:43.519]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.519]     "# expression in do.call(), because function called uses '...'  "
[10:49:43.519]     "# as a global variable                                         "
[10:49:43.519]     do.call(function(...) {
[10:49:43.519]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.519]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.519]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.519]             on.exit(options(oopts), add = TRUE)
[10:49:43.519]         }
[10:49:43.519]         {
[10:49:43.519]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.519]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.519]                 ...future.FUN(...future.X_jj, ...)
[10:49:43.519]             })
[10:49:43.519]         }
[10:49:43.519]     }, args = future.call.arguments)
[10:49:43.519] }
[10:49:43.519] Lazy evaluation: FALSE
[10:49:43.519] Asynchronous evaluation: TRUE
[10:49:43.519] Local evaluation: TRUE
[10:49:43.519] Environment: R_GlobalEnv
[10:49:43.519] Capture standard output: TRUE
[10:49:43.519] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:43.519] Immediate condition classes: ‘immediateCondition’
[10:49:43.519] Globals: 5 objects totaling 637 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 171 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:43.519] Packages: 1 packages (‘stats’)
[10:49:43.519] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:43.519] Resolved: FALSE
[10:49:43.519] Value: <not collected>
[10:49:43.519] Conditions captured: <none>
[10:49:43.519] Early signaling: FALSE
[10:49:43.519] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:43.519] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.531] Chunk #1 of 2 ... DONE
[10:49:43.531] Chunk #2 of 2 ...
[10:49:43.531]  - Finding globals in 'X' for chunk #2 ...
[10:49:43.531] |  :  .  getGlobalsAndPackages() ...
[10:49:43.531] |  :  .  |  Searching for globals ...
[10:49:43.532] |  :  .  |  :  globals found: [0] 
[10:49:43.532] |  :  .  |  Searching for globals ... DONE
[10:49:43.532] |  :  .  |  globals: [0] <none>
[10:49:43.532] |  :  .  |  packages: [0] <none>
[10:49:43.532] |  :  .  getGlobalsAndPackages() ... done
[10:49:43.532]    + additional globals found: [n=0] 
[10:49:43.532]    + additional namespaces needed: [n=0] 
[10:49:43.532]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:43.532]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:43.532]  - seeds: <none>
[10:49:43.532]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.533] |  :  .  getGlobalsAndPackages() ...
[10:49:43.533] |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.533] |  :  .  |  Resolving globals: FALSE
[10:49:43.533] |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:43.533] |  :  .  |  :  {
[10:49:43.533] |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.533] |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:43.533] |  :  .  |  :      "# as a global variable                                         "
[10:49:43.533] |  :  .  |  :      do.call(function(...) {
[10:49:43.533] |  :  .  |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.533] |  :  .  |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.533] |  :  .  |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.533] |  :  .  |  :              on.exit(options(oopts), add = TRUE)
[10:49:43.533] |  :  .  |  :          }
[10:49:43.533] |  :  .  |  :          {
[10:49:43.533] |  :  .  |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.533] |  :  .  |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.533] |  :  .  |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:43.533] |  :  .  |  :              })
[10:49:43.533] |  :  .  |  :          }
[10:49:43.533] |  :  .  |  :      }, args = future.call.arguments)
[10:49:43.533] |  :  .  |  :  }
[10:49:43.533] |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:43.533] |  :  .  |  Search for packages associated with the globals ...
[10:49:43.534] |  :  .  |  :  Packages associated with globals: [1] ‘stats’
[10:49:43.534] |  :  .  |  :  Packages: [1] ‘stats’
[10:49:43.534] |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:43.534] |  :  .  |  Packages after dropping 'base': [1] ‘stats’
[10:49:43.534] |  :  .  |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:43.534] |  :  .  |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.535] |  :  .  |  packages: [1] ‘stats’
[10:49:43.535] |  :  .  getGlobalsAndPackages() ... done
[10:49:43.535] |  :  .  run() for Future (‘Future’) ...
[10:49:43.535] |  :  .  |  state: ‘created’
[10:49:43.535] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.535] |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.535] |  :  .  |  Using MultisessionFutureBackend ...
[10:49:43.535] |  :  .  |  :  Launching futures ...
[10:49:43.536] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:43.536] |  :  .  |  :  .  |  Workers: [n=2]
[10:49:43.536] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:43.537] |  :  .  |  :  .  |  FutureRegistry: ‘workers-dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:43.537] |  :  .  |  :  .  |  requestWorker() ...
[10:49:43.538] |  :  .  |  :  .  |  :  requestNode() ...
[10:49:43.538] |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:43.538] |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:43.538] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.538] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:43.538] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:43.538] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.538] |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:43.538] |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:43.538] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.539] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:43.539] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:43.539] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.539] |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:49:43.539] |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:43.577] |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:43.577] |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:43.577] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:43.577] |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:43.577] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:43.578] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:43.578] |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:43.578] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:43.578] |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:43.578] |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:43.578] |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘stats’
[10:49:43.578] |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:43.578] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:43.579] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:43.579] |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:43.579] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.579] |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:43.579] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.579] |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:43.579] |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:43.579] |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:43.580] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ...
[10:49:43.580] |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:49:43.580] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:49:43.580] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ... done
[10:49:43.580] |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:43.580] |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:43.580] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:43.580] |  :  .  |  :  .  Launching futures ... done
[10:49:43.580] |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.580] |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:43.581] |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:43.581] Created future:
[10:49:43.581] |  :  .  |  isFutureResolved() ...
[10:49:43.582] |  :  .  |  :  assertValidConnection() ...
[10:49:43.582] |  :  .  |  :  .  cluster node index: 2
[10:49:43.582] |  :  .  |  :  assertValidConnection() ... done
[10:49:43.593] |  :  .  |  isFutureResolved() ... done
[10:49:43.581] MultisessionFuture:
[10:49:43.581] Label: ‘future_eapply-2’
[10:49:43.581] Expression:
[10:49:43.581] {
[10:49:43.581]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.581]     "# expression in do.call(), because function called uses '...'  "
[10:49:43.581]     "# as a global variable                                         "
[10:49:43.581]     do.call(function(...) {
[10:49:43.581]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.581]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.581]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.581]             on.exit(options(oopts), add = TRUE)
[10:49:43.581]         }
[10:49:43.581]         {
[10:49:43.581]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.581]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.581]                 ...future.FUN(...future.X_jj, ...)
[10:49:43.581]             })
[10:49:43.581]         }
[10:49:43.581]     }, args = future.call.arguments)
[10:49:43.581] }
[10:49:43.581] Lazy evaluation: FALSE
[10:49:43.581] Asynchronous evaluation: TRUE
[10:49:43.581] Local evaluation: TRUE
[10:49:43.581] Environment: R_GlobalEnv
[10:49:43.581] Capture standard output: TRUE
[10:49:43.581] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:43.581] Immediate condition classes: ‘immediateCondition’
[10:49:43.581] Globals: 5 objects totaling 795 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 171 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:43.581] Packages: 1 packages (‘stats’)
[10:49:43.581] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:43.581] Resolved: FALSE
[10:49:43.581] Value: <not collected>
[10:49:43.581] Conditions captured: <none>
[10:49:43.581] Early signaling: FALSE
[10:49:43.581] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:43.581] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.593] Chunk #2 of 2 ... DONE
[10:49:43.593] Launching 2 futures (chunks) ... DONE
[10:49:43.593] Resolving 2 futures (chunks) ...
[10:49:43.593] |  :  .  |  value() on list ...
[10:49:43.593] |  :  .  |  :  recursive: 0
[10:49:43.594] |  :  .  |  :  length: 2
[10:49:43.594] |  :  .  |  :  
[10:49:43.594] |  :  .  |  :  Number of remaining objects: 2
[10:49:43.594] |  :  .  |  :  checking value #1 ...
[10:49:43.594] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:43.594] |  :  .  |  :  .  isFutureResolved() ...
[10:49:43.594] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:43.594] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:43.595] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:43.595] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:43.595] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:43.595] |  :  .  |  :  .  |  :  [1] TRUE
[10:49:43.595] |  :  .  |  :  .  |  :  received data:
[10:49:43.595] |  :  .  |  :  .  |  :  List of 5
[10:49:43.595] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:43.595] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:49:43.595] |  :  .  |  :  .  |  :    .. ..$ : Named num [1:3] 0 0.5 1
[10:49:43.595] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:3] "25%" "50%" "75%"
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:43.595] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:43.595] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:43.595] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "2dcd7b8c091ae79fc425586593ad7b28"
[10:49:43.595] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:43.595] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:43.595] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:43.595] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:43.595] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:43.595] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 64176
[10:49:43.595] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.595] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:43.595] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:43.595] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:43.595] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:43.595] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:43.595] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:43.595] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:43.595] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:43.595] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:43.595] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:49:43.595] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:43.595] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:43.608] |  :  .  |  :  .  |  :  Received FutureResult
[10:49:43.608] |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ...
[10:49:43.608] |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:43.608] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:43.608] |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ... done
[10:49:43.608] |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:43.608] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.609] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.609] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.609] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:43.609] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:43.609] |  :  .  |  :  .  MultisessionFuture #1
[10:49:43.609] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:43.609] |  :  .  |  :  .  |  nx: 2
[10:49:43.609] |  :  .  |  :  .  |  relay: TRUE
[10:49:43.609] |  :  .  |  :  .  |  stdout: TRUE
[10:49:43.609] |  :  .  |  :  .  |  signal: TRUE
[10:49:43.609] |  :  .  |  :  .  |  resignal: FALSE
[10:49:43.609] |  :  .  |  :  .  |  force: TRUE
[10:49:43.610] |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:49:43.610] |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:49:43.610] |  :  .  |  :  .  |  until=1
[10:49:43.610] |  :  .  |  :  .  |  relaying element #1
[10:49:43.610] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.610] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.610] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.610] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.610] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.610] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.611] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.611] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.611] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.611] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.611] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.611] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.611] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:43.611] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:43.611] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:43.611] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:43.611] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.612] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.612] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.612] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.612] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.612] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.612] |  :  .  |  :  .  |  value: <list>
[10:49:43.612] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:43.612] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:43.612] |  :  .  |  :  .  |  nx: 2
[10:49:43.612] |  :  .  |  :  .  |  relay: TRUE
[10:49:43.612] |  :  .  |  :  .  |  stdout: TRUE
[10:49:43.612] |  :  .  |  :  .  |  signal: TRUE
[10:49:43.613] |  :  .  |  :  .  |  resignal: FALSE
[10:49:43.613] |  :  .  |  :  .  |  force: TRUE
[10:49:43.613] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:43.613] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:43.613] |  :  .  |  :  .  |  until=2
[10:49:43.613] |  :  .  |  :  .  |  relaying element #2
[10:49:43.613] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:43.613] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:43.613] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:49:43.613] |  :  .  |  :  .  length: 1 (resolved future 1)
[10:49:43.613] |  :  .  |  :  checking value #1 ... done
[10:49:43.614] |  :  .  |  :  checking value #2 ...
[10:49:43.614] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:43.614] |  :  .  |  :  .  isFutureResolved() ...
[10:49:43.614] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:43.614] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:43.614] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:43.625] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:43.625] |  :  .  |  :  checking value #2 ... done
[10:49:43.635] |  :  .  |  :  Number of remaining objects: 1
[10:49:43.635] |  :  .  |  :  checking value #2 ...
[10:49:43.635] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:43.635] |  :  .  |  :  .  isFutureResolved() ...
[10:49:43.636] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:43.636] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:43.636] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:43.636] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:43.636] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:43.636] |  :  .  |  :  .  |  :  [1] TRUE
[10:49:43.637] |  :  .  |  :  .  |  :  received data:
[10:49:43.637] |  :  .  |  :  .  |  :  List of 5
[10:49:43.637] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:43.637] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ value            :List of 2
[10:49:43.637] |  :  .  |  :  .  |  :    .. ..$ : Named num [1:3] 0.252 1 5.054
[10:49:43.637] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:3] "25%" "50%" "75%"
[10:49:43.637] |  :  .  |  :  .  |  :    .. ..$ : Named num [1:3] 3.25 5.5 7.75
[10:49:43.637] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:3] "25%" "50%" "75%"
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:43.637] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:43.637] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:43.637] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "694f4f5dc0f33d01aba962aff4b8d915"
[10:49:43.637] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:43.637] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:43.637] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:43.637] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:43.637] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:43.637] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 64177
[10:49:43.637] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.637] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:43.637] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:43.637] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:43.637] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:43.637] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:43.637] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:43.637] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:43.637] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:43.637] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:43.637] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[10:49:43.637] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:43.637] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:43.648] |  :  .  |  :  .  |  :  Received FutureResult
[10:49:43.648] |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ...
[10:49:43.648] |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:43.648] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:43.648] |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ... done
[10:49:43.648] |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:43.648] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:43.648] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:43.648] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:43.649] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:43.649] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:43.649] |  :  .  |  :  .  MultisessionFuture #2
[10:49:43.649] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:43.649] |  :  .  |  :  .  |  nx: 2
[10:49:43.649] |  :  .  |  :  .  |  relay: TRUE
[10:49:43.649] |  :  .  |  :  .  |  stdout: TRUE
[10:49:43.649] |  :  .  |  :  .  |  signal: TRUE
[10:49:43.649] |  :  .  |  :  .  |  resignal: FALSE
[10:49:43.649] |  :  .  |  :  .  |  force: TRUE
[10:49:43.649] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:43.650] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:43.650] |  :  .  |  :  .  |  until=2
[10:49:43.650] |  :  .  |  :  .  |  relaying element #2
[10:49:43.650] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.650] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.650] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.650] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.650] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.650] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.650] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.651] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.651] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.651] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.651] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.651] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.651] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:43.651] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:43.651] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:43.651] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:43.651] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.651] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.652] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.652] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.652] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.652] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.652] |  :  .  |  :  .  |  value: <list>
[10:49:43.652] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:43.652] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:43.652] |  :  .  |  :  .  |  nx: 2
[10:49:43.652] |  :  .  |  :  .  |  relay: TRUE
[10:49:43.652] |  :  .  |  :  .  |  stdout: TRUE
[10:49:43.652] |  :  .  |  :  .  |  signal: TRUE
[10:49:43.652] |  :  .  |  :  .  |  resignal: FALSE
[10:49:43.653] |  :  .  |  :  .  |  force: TRUE
[10:49:43.653] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:43.653] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:43.653] |  :  .  |  :  .  |  until=2
[10:49:43.653] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:43.653] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:43.653] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:43.653] |  :  .  |  :  .  length: 0 (resolved future 2)
[10:49:43.653] |  :  .  |  :  checking value #2 ... done
[10:49:43.653] |  :  .  |  :  Relaying remaining futures ...
[10:49:43.654] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:49:43.654] |  :  .  |  :  .  |  nx: 2
[10:49:43.654] |  :  .  |  :  .  |  relay: TRUE
[10:49:43.654] |  :  .  |  :  .  |  stdout: TRUE
[10:49:43.654] |  :  .  |  :  .  |  signal: TRUE
[10:49:43.654] |  :  .  |  :  .  |  resignal: FALSE
[10:49:43.654] |  :  .  |  :  .  |  force: TRUE
[10:49:43.654] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:43.654] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:43.654] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:43.654] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:43.655] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:49:43.655] |  :  .  |  :  Relaying remaining futures ... done
[10:49:43.655] |  :  .  |  value() on list ... done
[10:49:43.655]  - Number of value chunks collected: 2
[10:49:43.655] Resolving 2 futures (chunks) ... DONE
[10:49:43.655] Reducing values from 2 chunks ...
[10:49:43.655]  - Number of values collected after concatenation: 3
[10:49:43.655]  - Number of values expected: 3
[10:49:43.655] Reducing values from 2 chunks ... DONE
[10:49:43.655] future_lapply() ... DONE
[10:49:43.656] future_lapply() ...
[10:49:43.657] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.657] |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:43.657] |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.657] Number of chunks: 2
[10:49:43.657] getGlobalsAndPackagesXApply() ...
[10:49:43.657]  - future.globals: TRUE
[10:49:43.658] |  :  .  |  getGlobalsAndPackages() ...
[10:49:43.658] |  :  .  |  :  Searching for globals ...
[10:49:43.659] |  :  .  |  :  .  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:43.659] |  :  .  |  :  Searching for globals ... DONE
[10:49:43.659] |  :  .  |  :  Resolving globals: FALSE
[10:49:43.659] |  :  .  |  :  Search for packages associated with the globals ...
[10:49:43.659] |  :  .  |  :  .  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:43.660] |  :  .  |  :  .  Packages: [2] ‘stats’, ‘base’
[10:49:43.660] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:43.660] |  :  .  |  :  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:43.660] |  :  .  |  :  The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:43.660] |  :  .  |  :  Packages after dropping 'base': [1] ‘stats’
[10:49:43.660] |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:43.661] |  :  .  |  :  globals: [1] ‘FUN’
[10:49:43.661] |  :  .  |  :  packages: [1] ‘stats’
[10:49:43.661] |  :  .  |  getGlobalsAndPackages() ... done
[10:49:43.661]  - globals found/used: [n=1] ‘FUN’
[10:49:43.661]  - needed namespaces: [n=1] ‘stats’
[10:49:43.661] Finding globals ... DONE
[10:49:43.661]  - use_args: TRUE
[10:49:43.661]  - Getting '...' globals ...
[10:49:43.662] |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:43.662] |  :  .  |  :  recursive: 0
[10:49:43.662] |  :  .  |  :  length: 1
[10:49:43.662] |  :  .  |  :  elements: ‘...’
[10:49:43.662] |  :  .  |  :  'obj' is DotDotDotList
[10:49:43.662] |  :  .  |  :  resolve(obj, ...) ...
[10:49:43.662] |  :  .  |  :  resolve(obj, ...) ... done
[10:49:43.662] |  :  .  |  :  length: 0 (resolved future 1)
[10:49:43.662] |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:43.663]    - '...' content: [n=0] 
[10:49:43.663] List of 1
[10:49:43.663]  $ ...: list()
[10:49:43.663]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:43.663]  - attr(*, "where")=List of 1
[10:49:43.663]   ..$ ...:<environment: 0x555d04f939e8> 
[10:49:43.663]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:43.663]  - attr(*, "resolved")= logi TRUE
[10:49:43.663]  - attr(*, "total_size")= num NA
[10:49:43.665]  - Getting '...' globals ... DONE
[10:49:43.665] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:43.665] List of 2
[10:49:43.665]  $ ...future.FUN:function (x, ...)  
[10:49:43.665]  $ ...          : list()
[10:49:43.665]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:43.665]  - attr(*, "where")=List of 2
[10:49:43.665]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:43.665]   ..$ ...          :<environment: 0x555d04f939e8> 
[10:49:43.665]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:43.665]  - attr(*, "resolved")= logi FALSE
[10:49:43.665]  - attr(*, "total_size")= num 5433
[10:49:43.668] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:43.668] getGlobalsAndPackagesXApply() ... DONE
[10:49:43.668] Number of futures (= number of chunks): 2
[10:49:43.668] Launching 2 futures (chunks) ...
[10:49:43.669] Chunk #1 of 2 ...
[10:49:43.669]  - Finding globals in 'X' for chunk #1 ...
[10:49:43.669] |  :  .  |  getGlobalsAndPackages() ...
[10:49:43.669] |  :  .  |  :  Searching for globals ...
[10:49:43.669] |  :  .  |  :  .  globals found: [0] 
[10:49:43.669] |  :  .  |  :  Searching for globals ... DONE
[10:49:43.669] |  :  .  |  :  globals: [0] <none>
[10:49:43.669] |  :  .  |  :  packages: [0] <none>
[10:49:43.669] |  :  .  |  getGlobalsAndPackages() ... done
[10:49:43.670]    + additional globals found: [n=0] 
[10:49:43.670]    + additional namespaces needed: [n=0] 
[10:49:43.670]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:43.670]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:43.670]  - seeds: <none>
[10:49:43.670]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.670] |  :  .  |  getGlobalsAndPackages() ...
[10:49:43.670] |  :  .  |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.670] |  :  .  |  :  Resolving globals: FALSE
[10:49:43.670] |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:43.671] |  :  .  |  :  .  {
[10:49:43.671] |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.671] |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:43.671] |  :  .  |  :  .      "# as a global variable                                         "
[10:49:43.671] |  :  .  |  :  .      do.call(function(...) {
[10:49:43.671] |  :  .  |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.671] |  :  .  |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.671] |  :  .  |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.671] |  :  .  |  :  .              on.exit(options(oopts), add = TRUE)
[10:49:43.671] |  :  .  |  :  .          }
[10:49:43.671] |  :  .  |  :  .          {
[10:49:43.671] |  :  .  |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.671] |  :  .  |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.671] |  :  .  |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:49:43.671] |  :  .  |  :  .              })
[10:49:43.671] |  :  .  |  :  .          }
[10:49:43.671] |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:43.671] |  :  .  |  :  .  }
[10:49:43.671] |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:43.671] |  :  .  |  :  Search for packages associated with the globals ...
[10:49:43.671] |  :  .  |  :  .  Packages associated with globals: [1] ‘stats’
[10:49:43.671] |  :  .  |  :  .  Packages: [1] ‘stats’
[10:49:43.672] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:43.672] |  :  .  |  :  Packages after dropping 'base': [1] ‘stats’
[10:49:43.672] |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:43.672] |  :  .  |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.672] |  :  .  |  :  packages: [1] ‘stats’
[10:49:43.672] |  :  .  |  getGlobalsAndPackages() ... done
[10:49:43.672] |  :  .  |  run() for Future (‘Future’) ...
[10:49:43.672] |  :  .  |  :  state: ‘created’
[10:49:43.673] |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.673] |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.673] |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:43.673] |  :  .  |  :  .  Launching futures ...
[10:49:43.673] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:43.673] |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:43.673] |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:43.675] |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:43.675] |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:43.675] |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:43.675] |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:43.675] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:43.675] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.675] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:43.675] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:43.676] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.676] |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:43.676] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:43.676] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.676] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:43.676] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:43.676] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.676] |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:49:43.676] |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:43.755] |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:43.755] |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:43.755] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:43.755] |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:43.755] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:43.756] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:43.756] |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:43.756] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:43.756] |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:43.756] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:43.756] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:43.756] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:43.756] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:43.756] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:43.757] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:43.757] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.757] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:43.757] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.757] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:43.757] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:43.757] |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:43.758] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ...
[10:49:43.758] |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:49:43.758] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:43.758] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ... done
[10:49:43.758] |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:43.758] |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:43.758] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:43.758] |  :  .  |  :  .  |  Launching futures ... done
[10:49:43.758] |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.758] |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:43.759] |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:43.759] Created future:
[10:49:43.760] |  :  .  |  :  isFutureResolved() ...
[10:49:43.760] |  :  .  |  :  .  assertValidConnection() ...
[10:49:43.760] |  :  .  |  :  .  |  cluster node index: 1
[10:49:43.760] |  :  .  |  :  .  assertValidConnection() ... done
[10:49:43.771] |  :  .  |  :  isFutureResolved() ... done
[10:49:43.759] MultisessionFuture:
[10:49:43.759] Label: ‘future_eapply-1’
[10:49:43.759] Expression:
[10:49:43.759] {
[10:49:43.759]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.759]     "# expression in do.call(), because function called uses '...'  "
[10:49:43.759]     "# as a global variable                                         "
[10:49:43.759]     do.call(function(...) {
[10:49:43.759]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.759]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.759]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.759]             on.exit(options(oopts), add = TRUE)
[10:49:43.759]         }
[10:49:43.759]         {
[10:49:43.759]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.759]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.759]                 ...future.FUN(...future.X_jj, ...)
[10:49:43.759]             })
[10:49:43.759]         }
[10:49:43.759]     }, args = future.call.arguments)
[10:49:43.759] }
[10:49:43.759] Lazy evaluation: FALSE
[10:49:43.759] Asynchronous evaluation: TRUE
[10:49:43.759] Local evaluation: TRUE
[10:49:43.759] Environment: R_GlobalEnv
[10:49:43.759] Capture standard output: TRUE
[10:49:43.759] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:43.759] Immediate condition classes: ‘immediateCondition’
[10:49:43.759] Globals: 5 objects totaling 563 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:43.759] Packages: 1 packages (‘stats’)
[10:49:43.759] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:43.759] Resolved: FALSE
[10:49:43.759] Value: <not collected>
[10:49:43.759] Conditions captured: <none>
[10:49:43.759] Early signaling: FALSE
[10:49:43.759] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:43.759] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.771] Chunk #1 of 2 ... DONE
[10:49:43.771] Chunk #2 of 2 ...
[10:49:43.771]  - Finding globals in 'X' for chunk #2 ...
[10:49:43.771] |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:43.772] |  :  .  |  :  .  Searching for globals ...
[10:49:43.772] |  :  .  |  :  .  |  globals found: [0] 
[10:49:43.772] |  :  .  |  :  .  Searching for globals ... DONE
[10:49:43.772] |  :  .  |  :  .  globals: [0] <none>
[10:49:43.772] |  :  .  |  :  .  packages: [0] <none>
[10:49:43.772] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:43.772]    + additional globals found: [n=0] 
[10:49:43.772]    + additional namespaces needed: [n=0] 
[10:49:43.773]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:43.773]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:43.773]  - seeds: <none>
[10:49:43.773]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.773] |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:43.773] |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.773] |  :  .  |  :  .  Resolving globals: FALSE
[10:49:43.773] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:43.773] |  :  .  |  :  .  |  {
[10:49:43.773] |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.773] |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:43.773] |  :  .  |  :  .  |      "# as a global variable                                         "
[10:49:43.773] |  :  .  |  :  .  |      do.call(function(...) {
[10:49:43.773] |  :  .  |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.773] |  :  .  |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.773] |  :  .  |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.773] |  :  .  |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:49:43.773] |  :  .  |  :  .  |          }
[10:49:43.773] |  :  .  |  :  .  |          {
[10:49:43.773] |  :  .  |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.773] |  :  .  |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.773] |  :  .  |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:49:43.773] |  :  .  |  :  .  |              })
[10:49:43.773] |  :  .  |  :  .  |          }
[10:49:43.773] |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:49:43.773] |  :  .  |  :  .  |  }
[10:49:43.774] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:43.774] |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:43.774] |  :  .  |  :  .  |  Packages associated with globals: [1] ‘stats’
[10:49:43.774] |  :  .  |  :  .  |  Packages: [1] ‘stats’
[10:49:43.774] |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:43.775] |  :  .  |  :  .  Packages after dropping 'base': [1] ‘stats’
[10:49:43.775] |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:43.775] |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.775] |  :  .  |  :  .  packages: [1] ‘stats’
[10:49:43.775] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:43.775] |  :  .  |  :  run() for Future (‘Future’) ...
[10:49:43.775] |  :  .  |  :  .  state: ‘created’
[10:49:43.775] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.776] |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.776] |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:49:43.776] |  :  .  |  :  .  |  Launching futures ...
[10:49:43.776] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:43.776] |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:49:43.776] |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:43.780] |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:43.780] |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:49:43.780] |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:49:43.780] |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:43.780] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:43.780] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.780] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:43.780] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:43.780] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.781] |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:43.781] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:43.781] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.781] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:43.781] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:43.781] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.781] |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:49:43.781] |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:43.861] |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:43.862] |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:43.862] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:43.862] |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:49:43.862] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:43.862] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:43.863] |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:49:43.863] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:43.863] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:43.863] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:43.863] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘stats’
[10:49:43.863] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:43.863] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:43.863] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:43.863] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:43.863] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.864] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:43.864] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:43.864] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:43.864] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ...
[10:49:43.864] |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:49:43.865] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:49:43.865] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ... done
[10:49:43.865] |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:49:43.865] |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:49:43.865] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:43.865] |  :  .  |  :  .  |  :  Launching futures ... done
[10:49:43.865] |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.865] |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:43.865] |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:43.865] Created future:
[10:49:43.866] |  :  .  |  :  .  isFutureResolved() ...
[10:49:43.867] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:43.867] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:43.867] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:43.878] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:43.866] MultisessionFuture:
[10:49:43.866] Label: ‘future_eapply-2’
[10:49:43.866] Expression:
[10:49:43.866] {
[10:49:43.866]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.866]     "# expression in do.call(), because function called uses '...'  "
[10:49:43.866]     "# as a global variable                                         "
[10:49:43.866]     do.call(function(...) {
[10:49:43.866]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.866]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.866]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.866]             on.exit(options(oopts), add = TRUE)
[10:49:43.866]         }
[10:49:43.866]         {
[10:49:43.866]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.866]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.866]                 ...future.FUN(...future.X_jj, ...)
[10:49:43.866]             })
[10:49:43.866]         }
[10:49:43.866]     }, args = future.call.arguments)
[10:49:43.866] }
[10:49:43.866] Lazy evaluation: FALSE
[10:49:43.866] Asynchronous evaluation: TRUE
[10:49:43.866] Local evaluation: TRUE
[10:49:43.866] Environment: R_GlobalEnv
[10:49:43.866] Capture standard output: TRUE
[10:49:43.866] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:43.866] Immediate condition classes: ‘immediateCondition’
[10:49:43.866] Globals: 5 objects totaling 721 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:43.866] Packages: 1 packages (‘stats’)
[10:49:43.866] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:43.866] Resolved: FALSE
[10:49:43.866] Value: <not collected>
[10:49:43.866] Conditions captured: <none>
[10:49:43.866] Early signaling: FALSE
[10:49:43.866] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:43.866] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:43.878] Chunk #2 of 2 ... DONE
[10:49:43.878] Launching 2 futures (chunks) ... DONE
[10:49:43.878] Resolving 2 futures (chunks) ...
[10:49:43.878] |  :  .  |  :  .  value() on list ...
[10:49:43.878] |  :  .  |  :  .  |  recursive: 0
[10:49:43.878] |  :  .  |  :  .  |  length: 2
[10:49:43.879] |  :  .  |  :  .  |  
[10:49:43.879] |  :  .  |  :  .  |  Number of remaining objects: 2
[10:49:43.879] |  :  .  |  :  .  |  checking value #1 ...
[10:49:43.879] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:43.879] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:43.879] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:43.879] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:43.880] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:43.880] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:43.880] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:43.880] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:43.880] |  :  .  |  :  .  |  :  .  |  received data:
[10:49:43.880] |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:43.880] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. ..$ : Named num [1:5] 0 0 0.5 1 1
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "2dcd7b8c091ae79fc425586593ad7b28"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 64176
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:43.880] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:43.880] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[10:49:43.880] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:43.880] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:43.891] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:43.891] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ...
[10:49:43.891] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:43.891] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:43.891] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ... done
[10:49:43.892] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:43.892] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.892] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.892] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.892] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:43.892] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:43.892] |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:49:43.892] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:43.892] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:43.892] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:43.893] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:43.893] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:43.893] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:43.893] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:43.893] |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:43.893] |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:43.893] |  :  .  |  :  .  |  :  .  until=1
[10:49:43.893] |  :  .  |  :  .  |  :  .  relaying element #1
[10:49:43.893] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.893] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.893] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.894] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.894] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.894] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.894] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.894] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.894] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.894] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.894] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.894] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.894] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:43.895] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:43.895] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:43.895] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:43.895] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.895] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.895] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.895] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.895] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.895] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.895] |  :  .  |  :  .  |  :  .  value: <list>
[10:49:43.896] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:43.896] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:43.896] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:43.896] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:43.896] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:43.896] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:43.896] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:43.896] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:43.896] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:43.896] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:43.896] |  :  .  |  :  .  |  :  .  until=2
[10:49:43.896] |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:43.897] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:43.897] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:43.897] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:43.897] |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:49:43.897] |  :  .  |  :  .  |  checking value #1 ... done
[10:49:43.897] |  :  .  |  :  .  |  checking value #2 ...
[10:49:43.897] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:43.897] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:43.898] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:43.898] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:43.898] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:43.908] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:43.908] |  :  .  |  :  .  |  checking value #2 ... done
[10:49:43.918] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:49:43.919] |  :  .  |  :  .  |  checking value #2 ...
[10:49:43.919] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:43.919] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:43.919] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:43.919] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:43.920] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:43.920] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:43.920] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:43.920] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:43.920] |  :  .  |  :  .  |  :  .  |  received data:
[10:49:43.920] |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:43.920] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 2
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. ..$ : Named num [1:5] 0.0498 0.2516 1 5.0537 20.0855
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. ..$ : Named num [1:5] 1 3.25 5.5 7.75 10
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "694f4f5dc0f33d01aba962aff4b8d915"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 64177
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:43.920] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:43.920] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[10:49:43.920] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:43.920] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:43.931] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:43.931] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ...
[10:49:43.932] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:43.932] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:43.932] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ... done
[10:49:43.932] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:43.932] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:43.932] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:43.932] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:43.932] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:43.932] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:43.932] |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:49:43.933] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:43.933] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:43.933] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:43.933] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:43.933] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:43.933] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:43.933] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:43.933] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:43.933] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:43.933] |  :  .  |  :  .  |  :  .  until=2
[10:49:43.933] |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:43.934] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.934] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.934] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.934] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.934] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.934] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.934] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.934] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.934] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.934] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.934] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.935] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.935] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:43.935] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:43.935] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:43.935] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:43.935] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.935] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.935] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.935] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:43.935] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:43.935] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:43.936] |  :  .  |  :  .  |  :  .  value: <list>
[10:49:43.936] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:43.936] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:43.936] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:43.936] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:43.936] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:43.936] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:43.936] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:43.936] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:43.936] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:43.936] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:43.937] |  :  .  |  :  .  |  :  .  until=2
[10:49:43.937] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:43.937] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:43.937] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:43.937] |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:49:43.937] |  :  .  |  :  .  |  checking value #2 ... done
[10:49:43.937] |  :  .  |  :  .  |  Relaying remaining futures ...
[10:49:43.937] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:43.937] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:43.937] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:43.937] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:43.938] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:43.938] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:43.938] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:43.938] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:43.938] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:43.938] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:43.938] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:43.938] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:43.938] |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:49:43.938] |  :  .  |  :  .  value() on list ... done
[10:49:43.938]  - Number of value chunks collected: 2
[10:49:43.939] Resolving 2 futures (chunks) ... DONE
[10:49:43.939] Reducing values from 2 chunks ...
[10:49:43.939]  - Number of values collected after concatenation: 3
[10:49:43.939]  - Number of values expected: 3
[10:49:43.939] Reducing values from 2 chunks ... DONE
[10:49:43.939] future_lapply() ... DONE
[10:49:43.939] future_lapply() ...
[10:49:43.940] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.940] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:43.940] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.940] Number of chunks: 2
[10:49:43.941] getGlobalsAndPackagesXApply() ...
[10:49:43.941]  - future.globals: TRUE
[10:49:43.941] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:43.941] |  :  .  |  :  .  |  Searching for globals ...
[10:49:43.942] |  :  .  |  :  .  |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:43.942] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:49:43.942] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:43.942] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:43.943] |  :  .  |  :  .  |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:43.943] |  :  .  |  :  .  |  :  Packages: [2] ‘stats’, ‘base’
[10:49:43.943] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:43.943] |  :  .  |  :  .  |  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:43.943] |  :  .  |  :  .  |  The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:43.943] |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘stats’
[10:49:43.944] |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:43.944] |  :  .  |  :  .  |  globals: [1] ‘FUN’
[10:49:43.944] |  :  .  |  :  .  |  packages: [1] ‘stats’
[10:49:43.944] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:43.944]  - globals found/used: [n=1] ‘FUN’
[10:49:43.944]  - needed namespaces: [n=1] ‘stats’
[10:49:43.944] Finding globals ... DONE
[10:49:43.944]  - use_args: TRUE
[10:49:43.944]  - Getting '...' globals ...
[10:49:43.945] |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:43.945] |  :  .  |  :  .  |  recursive: 0
[10:49:43.945] |  :  .  |  :  .  |  length: 1
[10:49:43.945] |  :  .  |  :  .  |  elements: ‘...’
[10:49:43.945] |  :  .  |  :  .  |  'obj' is DotDotDotList
[10:49:43.945] |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:49:43.945] |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:49:43.946] |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:49:43.946] |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:43.946]    - '...' content: [n=0] 
[10:49:43.946] List of 1
[10:49:43.946]  $ ...: list()
[10:49:43.946]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:43.946]  - attr(*, "where")=List of 1
[10:49:43.946]   ..$ ...:<environment: 0x555d0576b078> 
[10:49:43.946]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:43.946]  - attr(*, "resolved")= logi TRUE
[10:49:43.946]  - attr(*, "total_size")= num NA
[10:49:43.948]  - Getting '...' globals ... DONE
[10:49:43.948] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:43.949] List of 2
[10:49:43.949]  $ ...future.FUN:function (x, ...)  
[10:49:43.949]  $ ...          : list()
[10:49:43.949]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:43.949]  - attr(*, "where")=List of 2
[10:49:43.949]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:43.949]   ..$ ...          :<environment: 0x555d0576b078> 
[10:49:43.949]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:43.949]  - attr(*, "resolved")= logi FALSE
[10:49:43.949]  - attr(*, "total_size")= num 5437
[10:49:43.951] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:43.951] getGlobalsAndPackagesXApply() ... DONE
[10:49:43.952] Number of futures (= number of chunks): 2
[10:49:43.952] Launching 2 futures (chunks) ...
[10:49:43.952] Chunk #1 of 2 ...
[10:49:43.952]  - Finding globals in 'X' for chunk #1 ...
[10:49:43.952] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:43.952] |  :  .  |  :  .  |  Searching for globals ...
[10:49:43.952] |  :  .  |  :  .  |  :  globals found: [0] 
[10:49:43.953] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:49:43.953] |  :  .  |  :  .  |  globals: [0] <none>
[10:49:43.953] |  :  .  |  :  .  |  packages: [0] <none>
[10:49:43.953] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:43.953]    + additional globals found: [n=0] 
[10:49:43.953]    + additional namespaces needed: [n=0] 
[10:49:43.953]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:43.953]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:43.953]  - seeds: <none>
[10:49:43.953]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.953] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:43.954] |  :  .  |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.954] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:43.954] |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:43.954] |  :  .  |  :  .  |  :  {
[10:49:43.954] |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:43.954] |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:43.954] |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:49:43.954] |  :  .  |  :  .  |  :      do.call(function(...) {
[10:49:43.954] |  :  .  |  :  .  |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:43.954] |  :  .  |  :  .  |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:43.954] |  :  .  |  :  .  |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:43.954] |  :  .  |  :  .  |  :              on.exit(options(oopts), add = TRUE)
[10:49:43.954] |  :  .  |  :  .  |  :          }
[10:49:43.954] |  :  .  |  :  .  |  :          {
[10:49:43.954] |  :  .  |  :  .  |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:43.954] |  :  .  |  :  .  |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:43.954] |  :  .  |  :  .  |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:43.954] |  :  .  |  :  .  |  :              })
[10:49:43.954] |  :  .  |  :  .  |  :          }
[10:49:43.954] |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:49:43.954] |  :  .  |  :  .  |  :  }
[10:49:43.954] |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:43.954] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:43.955] |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘stats’
[10:49:43.955] |  :  .  |  :  .  |  :  Packages: [1] ‘stats’
[10:49:43.955] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:43.955] |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘stats’
[10:49:43.955] |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:43.955] |  :  .  |  :  .  |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:43.955] |  :  .  |  :  .  |  packages: [1] ‘stats’
[10:49:43.955] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:43.956] |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:49:43.956] |  :  .  |  :  .  |  state: ‘created’
[10:49:43.956] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:43.956] |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:43.956] |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:49:43.956] |  :  .  |  :  .  |  :  Launching futures ...
[10:49:43.956] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:43.956] |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:49:43.957] |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:43.958] |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:43.958] |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:49:43.958] |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:49:43.958] |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:43.959] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:43.959] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.959] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:43.961] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:43.961] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:43.961] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:43.961] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:43.961] |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:49:43.962] |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:44.040] |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:44.040] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:44.041] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:44.041] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:44.041] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:44.041] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:44.041] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:44.041] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:44.042] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘stats’
[10:49:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:44.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:44.043] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:44.043] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ...
[10:49:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:49:44.043] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:44.043] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ... done
[10:49:44.044] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:44.044] |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:44.044] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:44.044] |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:49:44.044] |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:44.044] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:44.044] |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:44.044] Created future:
[10:49:44.045] |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:44.045] |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:44.045] |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:44.046] |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:44.056] |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:44.044] MultisessionFuture:
[10:49:44.044] Label: ‘future_eapply-1’
[10:49:44.044] Expression:
[10:49:44.044] {
[10:49:44.044]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:44.044]     "# expression in do.call(), because function called uses '...'  "
[10:49:44.044]     "# as a global variable                                         "
[10:49:44.044]     do.call(function(...) {
[10:49:44.044]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:44.044]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:44.044]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:44.044]             on.exit(options(oopts), add = TRUE)
[10:49:44.044]         }
[10:49:44.044]         {
[10:49:44.044]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:44.044]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:44.044]                 ...future.FUN(...future.X_jj, ...)
[10:49:44.044]             })
[10:49:44.044]         }
[10:49:44.044]     }, args = future.call.arguments)
[10:49:44.044] }
[10:49:44.044] Lazy evaluation: FALSE
[10:49:44.044] Asynchronous evaluation: TRUE
[10:49:44.044] Local evaluation: TRUE
[10:49:44.044] Environment: R_GlobalEnv
[10:49:44.044] Capture standard output: TRUE
[10:49:44.044] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:44.044] Immediate condition classes: ‘immediateCondition’
[10:49:44.044] Globals: 5 objects totaling 563 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:44.044] Packages: 1 packages (‘stats’)
[10:49:44.044] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:44.044] Resolved: FALSE
[10:49:44.044] Value: <not collected>
[10:49:44.044] Conditions captured: <none>
[10:49:44.044] Early signaling: FALSE
[10:49:44.044] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:44.044] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:44.057] Chunk #1 of 2 ... DONE
[10:49:44.057] Chunk #2 of 2 ...
[10:49:44.057]  - Finding globals in 'X' for chunk #2 ...
[10:49:44.057] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:44.057] |  :  .  |  :  .  |  :  Searching for globals ...
[10:49:44.057] |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:49:44.057] |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:49:44.057] |  :  .  |  :  .  |  :  globals: [0] <none>
[10:49:44.058] |  :  .  |  :  .  |  :  packages: [0] <none>
[10:49:44.058] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:44.058]    + additional globals found: [n=0] 
[10:49:44.058]    + additional namespaces needed: [n=0] 
[10:49:44.058]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:44.058]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:44.058]  - seeds: <none>
[10:49:44.058]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:44.058] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:44.058] |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:44.058] |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:44.059] |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:44.059] |  :  .  |  :  .  |  :  .  {
[10:49:44.059] |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:44.059] |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:44.059] |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:49:44.059] |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:49:44.059] |  :  .  |  :  .  |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:44.059] |  :  .  |  :  .  |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:44.059] |  :  .  |  :  .  |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:44.059] |  :  .  |  :  .  |  :  .              on.exit(options(oopts), add = TRUE)
[10:49:44.059] |  :  .  |  :  .  |  :  .          }
[10:49:44.059] |  :  .  |  :  .  |  :  .          {
[10:49:44.059] |  :  .  |  :  .  |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:44.059] |  :  .  |  :  .  |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:44.059] |  :  .  |  :  .  |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:49:44.059] |  :  .  |  :  .  |  :  .              })
[10:49:44.059] |  :  .  |  :  .  |  :  .          }
[10:49:44.059] |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:44.059] |  :  .  |  :  .  |  :  .  }
[10:49:44.059] |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:44.059] |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:44.059] |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘stats’
[10:49:44.060] |  :  .  |  :  .  |  :  .  Packages: [1] ‘stats’
[10:49:44.060] |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:44.060] |  :  .  |  :  .  |  :  Packages after dropping 'base': [1] ‘stats’
[10:49:44.060] |  :  .  |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:44.060] |  :  .  |  :  .  |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:44.060] |  :  .  |  :  .  |  :  packages: [1] ‘stats’
[10:49:44.060] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:44.061] |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:49:44.061] |  :  .  |  :  .  |  :  state: ‘created’
[10:49:44.061] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:44.061] |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:44.061] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:44.061] |  :  .  |  :  .  |  :  .  Launching futures ...
[10:49:44.061] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:44.061] |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:44.062] |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:44.063] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-dea2a273aebbf36fbaf463f4afc2ccb1’
[10:49:44.063] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:44.063] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ...
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:44.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'list', earlySignal = 0) ... done
[10:49:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 2
[10:49:44.065] |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:44.146] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:44.147] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:44.147] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:44.147] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:44.147] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:44.148] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:44.148] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:44.148] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:44.149] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:44.149] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:44.149] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:44.149] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:44.149] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:44.149] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:44.149] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:44.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:44.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:44.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:44.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:44.150] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:44.151] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ...
[10:49:44.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:49:44.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:49:44.151] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'add', earlySignal = 0) ... done
[10:49:44.152] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:44.152] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:44.152] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:44.152] |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:49:44.152] |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:44.153] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:44.153] |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:44.153] Created future:
[10:49:44.155] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:44.155] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:44.155] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:44.156] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:44.167] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:44.153] MultisessionFuture:
[10:49:44.153] Label: ‘future_eapply-2’
[10:49:44.153] Expression:
[10:49:44.153] {
[10:49:44.153]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:44.153]     "# expression in do.call(), because function called uses '...'  "
[10:49:44.153]     "# as a global variable                                         "
[10:49:44.153]     do.call(function(...) {
[10:49:44.153]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:44.153]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:44.153]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:44.153]             on.exit(options(oopts), add = TRUE)
[10:49:44.153]         }
[10:49:44.153]         {
[10:49:44.153]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:44.153]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:44.153]                 ...future.FUN(...future.X_jj, ...)
[10:49:44.153]             })
[10:49:44.153]         }
[10:49:44.153]     }, args = future.call.arguments)
[10:49:44.153] }
[10:49:44.153] Lazy evaluation: FALSE
[10:49:44.153] Asynchronous evaluation: TRUE
[10:49:44.153] Local evaluation: TRUE
[10:49:44.153] Environment: R_GlobalEnv
[10:49:44.153] Capture standard output: TRUE
[10:49:44.153] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:44.153] Immediate condition classes: ‘immediateCondition’
[10:49:44.153] Globals: 5 objects totaling 721 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:44.153] Packages: 1 packages (‘stats’)
[10:49:44.153] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:44.153] Resolved: FALSE
[10:49:44.153] Value: <not collected>
[10:49:44.153] Conditions captured: <none>
[10:49:44.153] Early signaling: FALSE
[10:49:44.153] Owner process: d1c4a7fcb4aac55cdf2cf7c599d24724
[10:49:44.153] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:44.167] Chunk #2 of 2 ... DONE
[10:49:44.167] Launching 2 futures (chunks) ... DONE
[10:49:44.167] Resolving 2 futures (chunks) ...
[10:49:44.168] |  :  .  |  :  .  |  :  value() on list ...
[10:49:44.168] |  :  .  |  :  .  |  :  .  recursive: 0
[10:49:44.168] |  :  .  |  :  .  |  :  .  length: 2
[10:49:44.168] |  :  .  |  :  .  |  :  .  
[10:49:44.168] |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:49:44.168] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:49:44.169] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:44.169] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:44.169] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:44.169] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:44.169] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:44.169] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : Named num [1:5] 0 0 0.5 1 1
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:44"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:44"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "2dcd7b8c091ae79fc425586593ad7b28"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 64176
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.004 0.001 0.004 0 0
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:44.170] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:49:44.181] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:49:44.181] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ...
[10:49:44.181] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:49:44.181] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:44.181] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ... done
[10:49:44.181] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:49:44.181] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:44.181] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:44.181] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:44.182] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:49:44.183] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:49:44.183] |  :  .  |  :  .  |  :  .  |  :  until=1
[10:49:44.183] |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:49:44.183] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.183] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.183] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.183] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.183] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.183] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.183] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.184] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:44.185] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:44.186] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:44.186] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:44.186] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:44.186] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:44.186] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:49:44.186] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:44.186] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:44.186] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:49:44.186] |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 1)
[10:49:44.186] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:49:44.186] |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:49:44.187] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:44.187] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:44.187] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:44.187] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:44.187] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:44.195] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:44.195] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:44.195] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:49:44.195] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 2
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : Named num [1:5] 0.0498 0.2516 1 5.0537 20.0855
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : Named num [1:5] 1 3.25 5.5 7.75 10
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:44"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:44"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "694f4f5dc0f33d01aba962aff4b8d915"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 64177
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:43"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.003 0 0
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:44.196] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:49:44.207] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:49:44.207] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ...
[10:49:44.207] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:49:44.207] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:44.207] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-dea2a273aebbf36fbaf463f4afc2ccb1', action = 'remove', earlySignal = 0) ... done
[10:49:44.207] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:49:44.207] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:44.207] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:44.208] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:44.209] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:44.209] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:44.209] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:49:44.209] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.209] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.209] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.209] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.209] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.209] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.209] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.210] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:44.211] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:44.212] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:44.212] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:44.212] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:44.212] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:44.212] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:44.212] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:44.212] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:44.212] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:44.212] |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 2)
[10:49:44.212] |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:49:44.212] |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:44.213] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:44.214] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:49:44.214] |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:49:44.214] |  :  .  |  :  .  |  :  value() on list ... done
[10:49:44.214]  - Number of value chunks collected: 2
[10:49:44.214] Resolving 2 futures (chunks) ... DONE
[10:49:44.214] Reducing values from 2 chunks ...
[10:49:44.214]  - Number of values collected after concatenation: 3
[10:49:44.214]  - Number of values expected: 3
[10:49:44.214] Reducing values from 2 chunks ... DONE
[10:49:44.214] future_lapply() ... DONE
[10:49:44.215] |  :  .  |  :  .  |  :  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:44.215] |  :  .  |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:44.215] |  :  .  |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:44.215] |  :  .  |  :  .  |  :  .  |  :  New stack:
[10:49:44.215] |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:49:44.215] |  :  .  |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:44.215] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:44.215] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:44.215] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.215] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.215] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:44.215] |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :  Old stack:
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0355d9f8> 
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:44.217] |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  Not identical
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .  List of 2
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x555d0355d9f8> 
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:44.223] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:44.228] |  :  .  |  :  .  |  :  .  |  :  .  Formals differ
[10:49:44.228] |  :  .  |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:44.228] |  :  .  |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:44.228] |  :  .  |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:44.228] |  :  .  |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:44.228] |  :  .  |  :  .  |  :  .  |  List of future strategies:
[10:49:44.228] |  :  .  |  :  .  |  :  .  |  1. sequential:
[10:49:44.228] |  :  .  |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:44.228] |  :  .  |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:44.228] |  :  .  |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:44.229] |  :  .  |  :  .  |  :  .  |  List of 1
[10:49:44.229] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:44.229] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:44.229] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:44.229] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.229] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.229] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:44.229] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:44.231] |  :  .  |  :  .  |  :  .  |  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:44.231] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:44.231] |  :  .  |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:44.231] |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:44.231] |  :  .  |  :  .  |  :  .  |  :  stopWorkers() for MultisessionFutureBackend ...
[10:49:44.231] |  :  .  |  :  .  |  :  .  |  :  .  Interrupt active futures ...
[10:49:44.232] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of futures: 0
[10:49:44.232] |  :  .  |  :  .  |  :  .  |  :  .  Interrupt active futures ... done
[10:49:44.232] |  :  .  |  :  .  |  :  .  |  :  .  Clear future registry ...
[10:49:44.233] |  :  .  |  :  .  |  :  .  |  :  .  Clear future registry ... done
[10:49:44.233] |  :  .  |  :  .  |  :  .  |  :  .  Stop cluster workers ...
[10:49:44.233] |  :  .  |  :  .  |  :  .  |  :  .  |  Stopping existing cluster ...
[10:49:44.233] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Cluster to shut down:
[10:49:44.233] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:44.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Stopped cluster: ‘NULL’
[10:49:44.246] |  :  .  |  :  .  |  :  .  |  :  .  |  Stopping existing cluster ... done
[10:49:44.246] |  :  .  |  :  .  |  :  .  |  :  .  Stop cluster workers ... done
[10:49:44.246] |  :  .  |  :  .  |  :  .  |  :  stopWorkers() for MultisessionFutureBackend ... done
[10:49:44.246] |  :  .  |  :  .  |  :  .  |  :  Legacy shutdown of cluster workers ...
[10:49:44.246] |  :  .  |  :  .  |  :  .  |  :  .  Stopping existing cluster ...
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  :  .  |  No pre-existing cluster. Skipping
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  :  .  Stopping existing cluster ... done
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  :  Legacy shutdown of cluster workers ... done
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  :  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  :   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  :   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.247] |  :  .  |  :  .  |  :  .  |  :   - attr(*, "call")= language plan(sequential)
[10:49:44.249] |  :  .  |  :  .  |  :  .  |  :  init: NULL
[10:49:44.249] |  :  .  |  :  .  |  :  .  |  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:49:44.249] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:44.249] |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:44.249] |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:44.249] |  :  .  |  :  .  |  :  .  |  Backend function: <‘NULL’>
[10:49:44.250] |  :  .  |  :  .  |  :  .  |  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:44.250] |  :  .  |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:44.250] |  :  .  |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:44.250] |  :  .  |  :  .  |  :  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘multisession’ ... done
> 
> message("*** future_eapply() ... DONE")
*** future_eapply() ... DONE
> 
> source("incl/end.R")
[10:49:44.251] |  :  .  |  :  .  |  :  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:44.251] |  :  .  |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:44.251] |  :  .  |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:44.251] |  :  .  |  :  .  |  :  .  |  :  New stack:
[10:49:44.251] |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:49:44.251] |  :  .  |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:44.251] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:49:44.251] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:44.251] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.251] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.251] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:44.251] |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:44.253] |  :  .  |  :  .  |  :  .  |  :  Old stack:
[10:49:44.254] |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:49:44.254] |  :  .  |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:44.254] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:44.254] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:44.254] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.254] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.254] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:44.254] |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  Not identical
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .  List of 2
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:44.256] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:44.260] |  :  .  |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:44.260] |  :  .  |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:44.260] |  :  .  |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:44.260] |  :  .  |  :  .  |  :  .  |  List of future strategies:
[10:49:44.260] |  :  .  |  :  .  |  :  .  |  1. sequential:
[10:49:44.260] |  :  .  |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:44.260] |  :  .  |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:44.260] |  :  .  |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:44.260] |  :  .  |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:44.260] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
