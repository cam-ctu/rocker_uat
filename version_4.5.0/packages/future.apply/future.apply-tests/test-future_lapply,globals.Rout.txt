
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-future_lapply,globals.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future.apply:::testme("future_lapply,globals")
Test ‘future_lapply,globals’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future.apply/testme/test-future_lapply,globals.R’

> library(future.apply)
Loading required package: future

> library(tools)

> options(future.debug = FALSE)

> options(future.apply.debug = TRUE)

> message("*** future_lapply() - globals ...")
*** future_lapply() - globals ...

> plan(cluster, workers = "localhost")

> a <- 1

> b <- 2

> globals_set <- list(A = FALSE, B = TRUE, C = c("a", 
+     "b"), D = list(a = 2, b = 3))

> x <- list(1)

> y_truth <- list(A = NULL, B = list(1), C = list(1), 
+     D = list(2))

> str(y_truth)
List of 4
 $ A: NULL
 $ B:List of 1
  ..$ : num 1
 $ C:List of 1
  ..$ : num 1
 $ D:List of 1
  ..$ : num 2

> for (name in names(globals_set)) {
+     globals <- globals_set[[name]]
+     message("Globals set ", sQuote(name))
+     y <- tryCatch({
+          .... [TRUNCATED] 
Globals set ‘A’
[08:05:29.615] future_lapply() ...
[08:05:29.621] | Globals in FUN(): [n=5] ‘{’, ‘median’, ‘c’, ‘a’, ‘b’
[08:05:29.621] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:29.622] | future_lapply() -> future_xapply() ...
[08:05:29.622] | : Number of chunks: 1
[08:05:29.622] | : getGlobalsAndPackagesXApply() ...
[08:05:29.623] | : . future.globals: FALSE
[08:05:29.625] | : . globals found/used: [n=2] ‘FUN’, ‘future.call.arguments’
[08:05:29.625] | : . needed namespaces: [n=0] 
[08:05:29.625] | : . use_args: TRUE
[08:05:29.626] | : . Getting '...' globals ...
[08:05:29.627] | : . ' '...' content: [n=0] 
[08:05:29.627] | : . ' List of 1
[08:05:29.627] | : . '  $ ...: list()
[08:05:29.627] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:29.627] | : . '  - attr(*, "where")=List of 1
[08:05:29.627] | : . '   ..$ ...:<environment: 0x56342bfbde08> 
[08:05:29.627] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:29.627] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:29.627] | : . '  - attr(*, "total_size")= num NA
[08:05:29.629] | : . Getting '...' globals ... done
[08:05:29.630] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘future.call.arguments’, ‘...’
[08:05:29.630] | : . List of 3
[08:05:29.630] | : .  $ ...future.FUN        :function (x)  
[08:05:29.630] | : .  $ future.call.arguments: list()
[08:05:29.630] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:29.630] | : .  $ ...                  : list()
[08:05:29.630] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:29.630] | : .  - attr(*, "where")=List of 3
[08:05:29.630] | : .   ..$ ...future.FUN        :<environment: 0x56342bfbde08> 
[08:05:29.630] | : .   ..$ future.call.arguments:<environment: 0x56342bfbde08> 
[08:05:29.630] | : .   ..$ ...                  :<environment: 0x56342bfbde08> 
[08:05:29.630] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:29.630] | : .  - attr(*, "resolved")= logi FALSE
[08:05:29.630] | : .  - attr(*, "total_size")= num 5448
[08:05:29.634] | : . Packages to be attached in all futures: [n=1] ‘utils’
[08:05:29.635] | : getGlobalsAndPackagesXApply() ... done
[08:05:29.635] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:29.635] | : List of 6
[08:05:29.635] | :  $ ...future.FUN            :function (x)  
[08:05:29.635] | :  $ future.call.arguments    : list()
[08:05:29.635] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:29.635] | :  $ ...                      : list()
[08:05:29.635] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:29.635] | :  $ ...future.elements_ii    : NULL
[08:05:29.635] | :  $ ...future.seeds_ii       : NULL
[08:05:29.635] | :  $ ...future.globals.maxSize: NULL
[08:05:29.635] | :  - attr(*, "where")=List of 6
[08:05:29.635] | :   ..$ ...future.FUN            :<environment: 0x56342bfbde08> 
[08:05:29.635] | :   ..$ future.call.arguments    :<environment: 0x56342bfbde08> 
[08:05:29.635] | :   ..$ ...                      :<environment: 0x56342bfbde08> 
[08:05:29.635] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:29.635] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:29.635] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:29.635] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:29.635] | :  - attr(*, "resolved")= logi FALSE
[08:05:29.635] | :  - attr(*, "total_size")= num 5448
[08:05:29.641] | : Number of futures (= number of chunks): 1
[08:05:29.641] | : Launching 1 futures (chunks) ...
[08:05:29.642] | : Chunk #1 of 1 ...
[08:05:29.642] | :  - seeds: <none>
[08:05:29.642] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:29.712] | : Created future:
[08:05:29.712] | : ClusterFuture:
[08:05:29.712] | : Label: ‘future_lapply-1’
[08:05:29.712] | : Expression:
[08:05:29.712] | : {
[08:05:29.712] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:29.712] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:29.712] | :     "# as a global variable                                         "
[08:05:29.712] | :     do.call(function(...) {
[08:05:29.712] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:29.712] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:29.712] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:29.712] | :         "# anonymous function.                                          "
[08:05:29.712] | :         "#                                                              "
[08:05:29.712] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:29.712] | :         "# function environment of FUN() to the calling environment.    "
[08:05:29.712] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:29.712] | :         "# global environment, which is where globals are written.      "
[08:05:29.712] | :         penv <- env <- environment(...future.FUN)
[08:05:29.712] | :         repeat {
[08:05:29.712] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:29.712] | :                 emptyenv())) 
[08:05:29.712] | :                 break
[08:05:29.712] | :             penv <- env
[08:05:29.712] | :             env <- parent.env(env)
[08:05:29.712] | :         }
[08:05:29.712] | :         if (identical(penv, globalenv())) {
[08:05:29.712] | :             environment(...future.FUN) <- environment()
[08:05:29.712] | :         }
[08:05:29.712] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:29.712] | :             !isNamespace(penv)) {
[08:05:29.712] | :             parent.env(penv) <- environment()
[08:05:29.712] | :         }
[08:05:29.712] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:29.712] | :         {
[08:05:29.712] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:29.712] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:29.712] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:29.712] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:29.712] | :                 on.exit(options(oopts), add = TRUE)
[08:05:29.712] | :             }
[08:05:29.712] | :             {
[08:05:29.712] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:29.712] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:29.712] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:29.712] | :                   {
[08:05:29.712] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:29.712] | :                   }
[08:05:29.712] | :                 })
[08:05:29.712] | :             }
[08:05:29.712] | :         }
[08:05:29.712] | :     }, args = future.call.arguments)
[08:05:29.712] | : }
[08:05:29.712] | : Globals: 5 objects totaling 5.48 KiB (function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:29.712] | : Packages: 1 packages (‘utils’)
[08:05:29.712] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:29.712] | : Capture standard output: TRUE
[08:05:29.712] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:29.712] | : Immediate condition classes: ‘immediateCondition’
[08:05:29.712] | : Lazy evaluation: FALSE
[08:05:29.712] | : Local evaluation: TRUE
[08:05:29.712] | : Asynchronous evaluation: TRUE
[08:05:29.712] | : Early signaling: FALSE
[08:05:29.712] | : Environment: R_GlobalEnv
[08:05:29.712] | : State: ‘running’
[08:05:29.712] | : Resolved: FALSE
[08:05:29.712] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-1
[08:05:29.712] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:29.712] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:29.712] | : Value: <not collected>
[08:05:29.712] | : Conditions captured: <none>
[08:05:29.726] | : Chunk #1 of 1 ... DONE
[08:05:29.726] | : Launching 1 futures (chunks) ... DONE
[08:05:29.726] | : Resolving 1 futures (chunks) ...
[08:05:29.817] | : onError() ...
[08:05:29.817] | : . Received <simpleError>
Warning: Caught simpleError. Canceling all iterations ...
[08:05:29.818] | : . Signaling: <simpleError>
[08:05:29.818] | : onError() ... done
[08:05:29.818] | future_lapply() -> future_xapply() ... done
[08:05:29.818] future_lapply() ... done
<simpleError in ...future.FUN(...future.X_jj, ...): object 'a' not found>
Globals set ‘B’
[08:05:29.822] future_lapply() ...
[08:05:29.823] | Globals in FUN(): [n=5] ‘{’, ‘median’, ‘c’, ‘a’, ‘b’
[08:05:29.823] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:29.823] | future_lapply() -> future_xapply() ...
[08:05:29.824] | : Number of chunks: 1
[08:05:29.824] | : getGlobalsAndPackagesXApply() ...
[08:05:29.824] | : . future.globals: TRUE
[08:05:29.832] | : . globals found/used: [n=3] ‘FUN’, ‘a’, ‘b’
[08:05:29.832] | : . needed namespaces: [n=1] ‘stats’
[08:05:29.832] | : . use_args: TRUE
[08:05:29.832] | : . Getting '...' globals ...
[08:05:29.833] | : . ' '...' content: [n=0] 
[08:05:29.833] | : . ' List of 1
[08:05:29.833] | : . '  $ ...: list()
[08:05:29.833] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:29.833] | : . '  - attr(*, "where")=List of 1
[08:05:29.833] | : . '   ..$ ...:<environment: 0x56342d430688> 
[08:05:29.833] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:29.833] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:29.833] | : . '  - attr(*, "total_size")= num NA
[08:05:29.836] | : . Getting '...' globals ... done
[08:05:29.836] | : . Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘a’, ‘b’, ‘...’
[08:05:29.836] | : . List of 4
[08:05:29.836] | : .  $ ...future.FUN:function (x)  
[08:05:29.836] | : .  $ a            : num 1
[08:05:29.836] | : .  $ b            : num 2
[08:05:29.836] | : .  $ ...          : list()
[08:05:29.836] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:29.836] | : .  - attr(*, "where")=List of 4
[08:05:29.836] | : .   ..$ ...future.FUN:<environment: 0x56342d430688> 
[08:05:29.836] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:29.836] | : .   ..$ b            :<environment: R_GlobalEnv> 
[08:05:29.836] | : .   ..$ ...          :<environment: 0x56342d430688> 
[08:05:29.836] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:29.836] | : .  - attr(*, "resolved")= logi FALSE
[08:05:29.836] | : .  - attr(*, "total_size")= num 5429
[08:05:29.840] | : . Packages to be attached in all futures: [n=2] ‘stats’, ‘utils’
[08:05:29.840] | : getGlobalsAndPackagesXApply() ... done
[08:05:29.840] | : Globals pass to each chunk: [n=7] ‘...future.FUN’, ‘a’, ‘b’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:29.840] | : List of 7
[08:05:29.840] | :  $ ...future.FUN            :function (x)  
[08:05:29.840] | :  $ a                        : num 1
[08:05:29.840] | :  $ b                        : num 2
[08:05:29.840] | :  $ ...                      : list()
[08:05:29.840] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:29.840] | :  $ ...future.elements_ii    : NULL
[08:05:29.840] | :  $ ...future.seeds_ii       : NULL
[08:05:29.840] | :  $ ...future.globals.maxSize: NULL
[08:05:29.840] | :  - attr(*, "where")=List of 7
[08:05:29.840] | :   ..$ ...future.FUN            :<environment: 0x56342d430688> 
[08:05:29.840] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:29.840] | :   ..$ b                        :<environment: R_GlobalEnv> 
[08:05:29.840] | :   ..$ ...                      :<environment: 0x56342d430688> 
[08:05:29.840] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:29.840] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:29.840] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:29.840] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:29.840] | :  - attr(*, "resolved")= logi FALSE
[08:05:29.840] | :  - attr(*, "total_size")= num 5429
[08:05:29.846] | : Number of futures (= number of chunks): 1
[08:05:29.846] | : Launching 1 futures (chunks) ...
[08:05:29.846] | : Chunk #1 of 1 ...
[08:05:29.846] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:29.847] | :    + additional globals found: [n=0] 
[08:05:29.847] | :    + additional namespaces needed: [n=0] 
[08:05:29.847] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:29.847] | :  - seeds: <none>
[08:05:29.847] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘a’, ‘b’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:29.882] | : Created future:
[08:05:29.882] | : ClusterFuture:
[08:05:29.882] | : Label: ‘future_lapply-1’
[08:05:29.882] | : Expression:
[08:05:29.882] | : {
[08:05:29.882] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:29.882] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:29.882] | :     "# as a global variable                                         "
[08:05:29.882] | :     do.call(function(...) {
[08:05:29.882] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:29.882] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:29.882] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:29.882] | :         "# anonymous function.                                          "
[08:05:29.882] | :         "#                                                              "
[08:05:29.882] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:29.882] | :         "# function environment of FUN() to the calling environment.    "
[08:05:29.882] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:29.882] | :         "# global environment, which is where globals are written.      "
[08:05:29.882] | :         penv <- env <- environment(...future.FUN)
[08:05:29.882] | :         repeat {
[08:05:29.882] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:29.882] | :                 emptyenv())) 
[08:05:29.882] | :                 break
[08:05:29.882] | :             penv <- env
[08:05:29.882] | :             env <- parent.env(env)
[08:05:29.882] | :         }
[08:05:29.882] | :         if (identical(penv, globalenv())) {
[08:05:29.882] | :             environment(...future.FUN) <- environment()
[08:05:29.882] | :         }
[08:05:29.882] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:29.882] | :             !isNamespace(penv)) {
[08:05:29.882] | :             parent.env(penv) <- environment()
[08:05:29.882] | :         }
[08:05:29.882] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:29.882] | :         {
[08:05:29.882] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:29.882] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:29.882] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:29.882] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:29.882] | :                 on.exit(options(oopts), add = TRUE)
[08:05:29.882] | :             }
[08:05:29.882] | :             {
[08:05:29.882] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:29.882] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:29.882] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:29.882] | :                   {
[08:05:29.882] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:29.882] | :                   }
[08:05:29.882] | :                 })
[08:05:29.882] | :             }
[08:05:29.882] | :         }
[08:05:29.882] | :     }, args = future.call.arguments)
[08:05:29.882] | : }
[08:05:29.882] | : Globals: 7 objects totaling 5.55 KiB (function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:29.882] | : Packages: 2 packages (‘stats’, ‘utils’)
[08:05:29.882] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:29.882] | : Capture standard output: TRUE
[08:05:29.882] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:29.882] | : Immediate condition classes: ‘immediateCondition’
[08:05:29.882] | : Lazy evaluation: FALSE
[08:05:29.882] | : Local evaluation: TRUE
[08:05:29.882] | : Asynchronous evaluation: TRUE
[08:05:29.882] | : Early signaling: FALSE
[08:05:29.882] | : Environment: R_GlobalEnv
[08:05:29.882] | : State: ‘running’
[08:05:29.882] | : Resolved: FALSE
[08:05:29.882] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-2
[08:05:29.882] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:29.882] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:29.882] | : Value: <not collected>
[08:05:29.882] | : Conditions captured: <none>
[08:05:29.894] | : Chunk #1 of 1 ... DONE
[08:05:29.895] | : Launching 1 futures (chunks) ... DONE
[08:05:29.895] | : Resolving 1 futures (chunks) ...
[08:05:29.937] | :  - Number of value chunks collected: 1
[08:05:29.937] | : Resolving 1 futures (chunks) ... DONE
[08:05:29.938] | : Reducing values from 1 chunks ...
[08:05:29.938] | :  - Number of values collected after concatenation: 1
[08:05:29.938] | :  - Number of values expected: 1
[08:05:29.938] | : Reducing values from 1 chunks ... DONE
[08:05:29.938] | future_lapply() -> future_xapply() ... done
[08:05:29.938] future_lapply() ... done
[[1]]
[1] 1

Globals set ‘C’
[08:05:29.938] future_lapply() ...
[08:05:29.939] | Globals in FUN(): [n=5] ‘{’, ‘median’, ‘c’, ‘a’, ‘b’
[08:05:29.939] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:29.939] | future_lapply() -> future_xapply() ...
[08:05:29.940] | : Number of chunks: 1
[08:05:29.940] | : getGlobalsAndPackagesXApply() ...
[08:05:29.940] | : . future.globals: ‘a’, ‘b’
[08:05:29.940] | : . use_args: TRUE
[08:05:29.940] | : . Globals to be used in all futures (chunks): [n=4] ‘a’, ‘b’, ‘...future.FUN’, ‘...’
[08:05:29.940] | : . List of 4
[08:05:29.940] | : .  $ a            : num 1
[08:05:29.940] | : .  $ b            : num 2
[08:05:29.940] | : .  $ ...future.FUN:function (x)  
[08:05:29.940] | : .  $ ...          : list()
[08:05:29.940] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:29.940] | : .  - attr(*, "where")=List of 4
[08:05:29.940] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:29.940] | : .   ..$ b            :<environment: R_GlobalEnv> 
[08:05:29.940] | : .   ..$ ...future.FUN:<environment: 0x56342de280d0> 
[08:05:29.940] | : .   ..$ ...          :<environment: 0x56342de280d0> 
[08:05:29.940] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:29.940] | : .  - attr(*, "resolved")= logi FALSE
[08:05:29.940] | : .  - attr(*, "total_size")= num NA
[08:05:29.945] | : . Packages to be attached in all futures: [n=1] ‘utils’
[08:05:29.945] | : getGlobalsAndPackagesXApply() ... done
[08:05:29.945] | : Globals pass to each chunk: [n=7] ‘a’, ‘b’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:29.945] | : List of 7
[08:05:29.945] | :  $ a                        : num 1
[08:05:29.945] | :  $ b                        : num 2
[08:05:29.945] | :  $ ...future.FUN            :function (x)  
[08:05:29.945] | :  $ ...                      : list()
[08:05:29.945] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:29.945] | :  $ ...future.elements_ii    : NULL
[08:05:29.945] | :  $ ...future.seeds_ii       : NULL
[08:05:29.945] | :  $ ...future.globals.maxSize: NULL
[08:05:29.945] | :  - attr(*, "where")=List of 7
[08:05:29.945] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:29.945] | :   ..$ b                        :<environment: R_GlobalEnv> 
[08:05:29.945] | :   ..$ ...future.FUN            :<environment: 0x56342de280d0> 
[08:05:29.945] | :   ..$ ...                      :<environment: 0x56342de280d0> 
[08:05:29.945] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:29.945] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:29.945] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:29.945] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:29.945] | :  - attr(*, "resolved")= logi FALSE
[08:05:29.945] | :  - attr(*, "total_size")= num NA
[08:05:29.950] | : Number of futures (= number of chunks): 1
[08:05:29.950] | : Launching 1 futures (chunks) ...
[08:05:29.951] | : Chunk #1 of 1 ...
[08:05:29.951] | :  - seeds: <none>
[08:05:29.951] | :  - All globals exported: [n=7] ‘a’, ‘b’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.026] | : Created future:
[08:05:30.026] | : ClusterFuture:
[08:05:30.026] | : Label: ‘future_lapply-1’
[08:05:30.026] | : Expression:
[08:05:30.026] | : {
[08:05:30.026] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:30.026] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:30.026] | :     "# as a global variable                                         "
[08:05:30.026] | :     do.call(function(...) {
[08:05:30.026] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:30.026] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:30.026] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:30.026] | :         "# anonymous function.                                          "
[08:05:30.026] | :         "#                                                              "
[08:05:30.026] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:30.026] | :         "# function environment of FUN() to the calling environment.    "
[08:05:30.026] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:30.026] | :         "# global environment, which is where globals are written.      "
[08:05:30.026] | :         penv <- env <- environment(...future.FUN)
[08:05:30.026] | :         repeat {
[08:05:30.026] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:30.026] | :                 emptyenv())) 
[08:05:30.026] | :                 break
[08:05:30.026] | :             penv <- env
[08:05:30.026] | :             env <- parent.env(env)
[08:05:30.026] | :         }
[08:05:30.026] | :         if (identical(penv, globalenv())) {
[08:05:30.026] | :             environment(...future.FUN) <- environment()
[08:05:30.026] | :         }
[08:05:30.026] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:30.026] | :             !isNamespace(penv)) {
[08:05:30.026] | :             parent.env(penv) <- environment()
[08:05:30.026] | :         }
[08:05:30.026] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:30.026] | :         {
[08:05:30.026] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:30.026] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:30.026] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:30.026] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:30.026] | :                 on.exit(options(oopts), add = TRUE)
[08:05:30.026] | :             }
[08:05:30.026] | :             {
[08:05:30.026] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:30.026] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:30.026] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:30.026] | :                   {
[08:05:30.026] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:30.026] | :                   }
[08:05:30.026] | :                 })
[08:05:30.026] | :             }
[08:05:30.026] | :         }
[08:05:30.026] | :     }, args = future.call.arguments)
[08:05:30.026] | : }
[08:05:30.026] | : Globals: 7 objects totaling 5.57 KiB (function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:30.026] | : Packages: 1 packages (‘utils’)
[08:05:30.026] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:30.026] | : Capture standard output: TRUE
[08:05:30.026] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:30.026] | : Immediate condition classes: ‘immediateCondition’
[08:05:30.026] | : Lazy evaluation: FALSE
[08:05:30.026] | : Local evaluation: TRUE
[08:05:30.026] | : Asynchronous evaluation: TRUE
[08:05:30.026] | : Early signaling: FALSE
[08:05:30.026] | : Environment: R_GlobalEnv
[08:05:30.026] | : State: ‘running’
[08:05:30.026] | : Resolved: FALSE
[08:05:30.026] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-3
[08:05:30.026] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.026] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:30.026] | : Value: <not collected>
[08:05:30.026] | : Conditions captured: <none>
[08:05:30.038] | : Chunk #1 of 1 ... DONE
[08:05:30.039] | : Launching 1 futures (chunks) ... DONE
[08:05:30.039] | : Resolving 1 futures (chunks) ...
[08:05:30.081] | :  - Number of value chunks collected: 1
[08:05:30.081] | : Resolving 1 futures (chunks) ... DONE
[08:05:30.081] | : Reducing values from 1 chunks ...
[08:05:30.082] | :  - Number of values collected after concatenation: 1
[08:05:30.082] | :  - Number of values expected: 1
[08:05:30.082] | : Reducing values from 1 chunks ... DONE
[08:05:30.082] | future_lapply() -> future_xapply() ... done
[08:05:30.082] future_lapply() ... done
[[1]]
[1] 1

Globals set ‘D’
[08:05:30.082] future_lapply() ...
[08:05:30.083] | Globals in FUN(): [n=5] ‘{’, ‘median’, ‘c’, ‘a’, ‘b’
[08:05:30.083] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:30.083] | future_lapply() -> future_xapply() ...
[08:05:30.084] | : Number of chunks: 1
[08:05:30.084] | : getGlobalsAndPackagesXApply() ...
[08:05:30.084] | : . future.globals: <name-value list> with names ‘a’, ‘b’
[08:05:30.084] | : . use_args: TRUE
[08:05:30.084] | : . Getting '...' globals ...
[08:05:30.085] | : . ' '...' content: [n=0] 
[08:05:30.085] | : . ' List of 1
[08:05:30.085] | : . '  $ ...: list()
[08:05:30.085] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.085] | : . '  - attr(*, "where")=List of 1
[08:05:30.085] | : . '   ..$ ...:<environment: 0x56342cb31c48> 
[08:05:30.085] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.085] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:30.085] | : . '  - attr(*, "total_size")= num NA
[08:05:30.087] | : . Getting '...' globals ... done
[08:05:30.087] | : . Globals to be used in all futures (chunks): [n=4] ‘a’, ‘b’, ‘...future.FUN’, ‘...’
[08:05:30.087] | : . List of 4
[08:05:30.087] | : .  $ a            : num 2
[08:05:30.087] | : .  $ b            : num 3
[08:05:30.087] | : .  $ ...future.FUN:function (x)  
[08:05:30.087] | : .  $ ...          : list()
[08:05:30.087] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.087] | : .  - attr(*, "where")=List of 4
[08:05:30.087] | : .   ..$ a            :<environment: R_EmptyEnv> 
[08:05:30.087] | : .   ..$ b            :<environment: R_EmptyEnv> 
[08:05:30.087] | : .   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[08:05:30.087] | : .   ..$ ...          :<environment: 0x56342cb31c48> 
[08:05:30.087] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.087] | : .  - attr(*, "resolved")= logi FALSE
[08:05:30.087] | : .  - attr(*, "total_size")= num NA
[08:05:30.091] | : . Packages to be attached in all futures: [n=1] ‘utils’
[08:05:30.092] | : getGlobalsAndPackagesXApply() ... done
[08:05:30.092] | : Globals pass to each chunk: [n=7] ‘a’, ‘b’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.092] | : List of 7
[08:05:30.092] | :  $ a                        : num 2
[08:05:30.092] | :  $ b                        : num 3
[08:05:30.092] | :  $ ...future.FUN            :function (x)  
[08:05:30.092] | :  $ ...                      : list()
[08:05:30.092] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.092] | :  $ ...future.elements_ii    : NULL
[08:05:30.092] | :  $ ...future.seeds_ii       : NULL
[08:05:30.092] | :  $ ...future.globals.maxSize: NULL
[08:05:30.092] | :  - attr(*, "where")=List of 7
[08:05:30.092] | :   ..$ a                        :<environment: R_EmptyEnv> 
[08:05:30.092] | :   ..$ b                        :<environment: R_EmptyEnv> 
[08:05:30.092] | :   ..$ ...future.FUN            :<environment: R_GlobalEnv> 
[08:05:30.092] | :   ..$ ...                      :<environment: 0x56342cb31c48> 
[08:05:30.092] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:30.092] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:30.092] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:30.092] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.092] | :  - attr(*, "resolved")= logi FALSE
[08:05:30.092] | :  - attr(*, "total_size")= num NA
[08:05:30.098] | : Number of futures (= number of chunks): 1
[08:05:30.098] | : Launching 1 futures (chunks) ...
[08:05:30.098] | : Chunk #1 of 1 ...
[08:05:30.099] | :  - seeds: <none>
[08:05:30.099] | :  - All globals exported: [n=7] ‘a’, ‘b’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.174] | : Created future:
[08:05:30.174] | : ClusterFuture:
[08:05:30.174] | : Label: ‘future_lapply-1’
[08:05:30.174] | : Expression:
[08:05:30.174] | : {
[08:05:30.174] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:30.174] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:30.174] | :     "# as a global variable                                         "
[08:05:30.174] | :     do.call(function(...) {
[08:05:30.174] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:30.174] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:30.174] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:30.174] | :         "# anonymous function.                                          "
[08:05:30.174] | :         "#                                                              "
[08:05:30.174] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:30.174] | :         "# function environment of FUN() to the calling environment.    "
[08:05:30.174] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:30.174] | :         "# global environment, which is where globals are written.      "
[08:05:30.174] | :         penv <- env <- environment(...future.FUN)
[08:05:30.174] | :         repeat {
[08:05:30.174] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:30.174] | :                 emptyenv())) 
[08:05:30.174] | :                 break
[08:05:30.174] | :             penv <- env
[08:05:30.174] | :             env <- parent.env(env)
[08:05:30.174] | :         }
[08:05:30.174] | :         if (identical(penv, globalenv())) {
[08:05:30.174] | :             environment(...future.FUN) <- environment()
[08:05:30.174] | :         }
[08:05:30.174] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:30.174] | :             !isNamespace(penv)) {
[08:05:30.174] | :             parent.env(penv) <- environment()
[08:05:30.174] | :         }
[08:05:30.174] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:30.174] | :         {
[08:05:30.174] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:30.174] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:30.174] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:30.174] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:30.174] | :                 on.exit(options(oopts), add = TRUE)
[08:05:30.174] | :             }
[08:05:30.174] | :             {
[08:05:30.174] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:30.174] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:30.174] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:30.174] | :                   {
[08:05:30.174] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:30.174] | :                   }
[08:05:30.174] | :                 })
[08:05:30.174] | :             }
[08:05:30.174] | :         }
[08:05:30.174] | :     }, args = future.call.arguments)
[08:05:30.174] | : }
[08:05:30.174] | : Globals: 7 objects totaling 5.62 KiB (function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:30.174] | : Packages: 1 packages (‘utils’)
[08:05:30.174] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:30.174] | : Capture standard output: TRUE
[08:05:30.174] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:30.174] | : Immediate condition classes: ‘immediateCondition’
[08:05:30.174] | : Lazy evaluation: FALSE
[08:05:30.174] | : Local evaluation: TRUE
[08:05:30.174] | : Asynchronous evaluation: TRUE
[08:05:30.174] | : Early signaling: FALSE
[08:05:30.174] | : Environment: R_GlobalEnv
[08:05:30.174] | : State: ‘running’
[08:05:30.174] | : Resolved: FALSE
[08:05:30.174] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-4
[08:05:30.174] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.174] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:30.174] | : Value: <not collected>
[08:05:30.174] | : Conditions captured: <none>
[08:05:30.186] | : Chunk #1 of 1 ... DONE
[08:05:30.187] | : Launching 1 futures (chunks) ... DONE
[08:05:30.187] | : Resolving 1 futures (chunks) ...
[08:05:30.229] | :  - Number of value chunks collected: 1
[08:05:30.229] | : Resolving 1 futures (chunks) ... DONE
[08:05:30.229] | : Reducing values from 1 chunks ...
[08:05:30.230] | :  - Number of values collected after concatenation: 1
[08:05:30.230] | :  - Number of values expected: 1
[08:05:30.230] | : Reducing values from 1 chunks ... DONE
[08:05:30.230] | future_lapply() -> future_xapply() ... done
[08:05:30.230] future_lapply() ... done
[[1]]
[1] 2


> message("*** future_lapply() - globals ... DONE")
*** future_lapply() - globals ... DONE

> message("*** future_lapply() - manual globals ...")
*** future_lapply() - manual globals ...

> d <- 42

> y <- future_lapply(1:2, FUN = function(x) {
+     x * d
+ }, future.globals = structure(FALSE, add = "d"))
[08:05:30.231] future_lapply() ...
[08:05:30.231] | Globals in FUN(): [n=3] ‘{’, ‘*’, ‘d’
[08:05:30.231] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:30.232] | future_lapply() -> future_xapply() ...
[08:05:30.232] | : Number of chunks: 1
[08:05:30.232] | : getGlobalsAndPackagesXApply() ...
[08:05:30.232] | : . future.globals: FALSE
[08:05:30.233] | : . globals found/used: [n=3] ‘d’, ‘FUN’, ‘future.call.arguments’
[08:05:30.233] | : . needed namespaces: [n=0] 
[08:05:30.233] | : . use_args: TRUE
[08:05:30.233] | : . Getting '...' globals ...
[08:05:30.234] | : . ' '...' content: [n=0] 
[08:05:30.234] | : . ' List of 1
[08:05:30.234] | : . '  $ ...: list()
[08:05:30.234] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.234] | : . '  - attr(*, "where")=List of 1
[08:05:30.234] | : . '   ..$ ...:<environment: 0x56342dd6fc18> 
[08:05:30.234] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.234] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:30.234] | : . '  - attr(*, "total_size")= num NA
[08:05:30.236] | : . Getting '...' globals ... done
[08:05:30.237] | : . Globals to be used in all futures (chunks): [n=4] ‘d’, ‘...future.FUN’, ‘future.call.arguments’, ‘...’
[08:05:30.237] | : . List of 4
[08:05:30.237] | : .  $ d                    : num 42
[08:05:30.237] | : .  $ ...future.FUN        :function (x)  
[08:05:30.237] | : .  $ future.call.arguments: list()
[08:05:30.237] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.237] | : .  $ ...                  : list()
[08:05:30.237] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.237] | : .  - attr(*, "where")=List of 4
[08:05:30.237] | : .   ..$ d                    :<environment: R_GlobalEnv> 
[08:05:30.237] | : .   ..$ ...future.FUN        :<environment: 0x56342dd6fc18> 
[08:05:30.237] | : .   ..$ future.call.arguments:<environment: 0x56342dd6fc18> 
[08:05:30.237] | : .   ..$ ...                  :<environment: 0x56342dd6fc18> 
[08:05:30.237] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.237] | : .  - attr(*, "resolved")= logi FALSE
[08:05:30.237] | : .  - attr(*, "total_size")= num 3723
[08:05:30.241] | : . Packages to be attached in all futures: [n=0] 
[08:05:30.241] | : getGlobalsAndPackagesXApply() ... done
[08:05:30.241] | : Globals pass to each chunk: [n=7] ‘d’, ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.241] | : List of 7
[08:05:30.241] | :  $ d                        : num 42
[08:05:30.241] | :  $ ...future.FUN            :function (x)  
[08:05:30.241] | :  $ future.call.arguments    : list()
[08:05:30.241] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.241] | :  $ ...                      : list()
[08:05:30.241] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.241] | :  $ ...future.elements_ii    : NULL
[08:05:30.241] | :  $ ...future.seeds_ii       : NULL
[08:05:30.241] | :  $ ...future.globals.maxSize: NULL
[08:05:30.241] | :  - attr(*, "where")=List of 7
[08:05:30.241] | :   ..$ d                        :<environment: R_GlobalEnv> 
[08:05:30.241] | :   ..$ ...future.FUN            :<environment: 0x56342dd6fc18> 
[08:05:30.241] | :   ..$ future.call.arguments    :<environment: 0x56342dd6fc18> 
[08:05:30.241] | :   ..$ ...                      :<environment: 0x56342dd6fc18> 
[08:05:30.241] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:30.241] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:30.241] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:30.241] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.241] | :  - attr(*, "resolved")= logi FALSE
[08:05:30.241] | :  - attr(*, "total_size")= num 3723
[08:05:30.248] | : Number of futures (= number of chunks): 1
[08:05:30.248] | : Launching 1 futures (chunks) ...
[08:05:30.249] | : Chunk #1 of 1 ...
[08:05:30.249] | :  - seeds: <none>
[08:05:30.249] | :  - All globals exported: [n=7] ‘d’, ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.323] | : Created future:
[08:05:30.323] | : ClusterFuture:
[08:05:30.323] | : Label: ‘future_lapply-1’
[08:05:30.323] | : Expression:
[08:05:30.323] | : {
[08:05:30.323] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:30.323] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:30.323] | :     "# as a global variable                                         "
[08:05:30.323] | :     do.call(function(...) {
[08:05:30.323] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:30.323] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:30.323] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:30.323] | :         "# anonymous function.                                          "
[08:05:30.323] | :         "#                                                              "
[08:05:30.323] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:30.323] | :         "# function environment of FUN() to the calling environment.    "
[08:05:30.323] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:30.323] | :         "# global environment, which is where globals are written.      "
[08:05:30.323] | :         penv <- env <- environment(...future.FUN)
[08:05:30.323] | :         repeat {
[08:05:30.323] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:30.323] | :                 emptyenv())) 
[08:05:30.323] | :                 break
[08:05:30.323] | :             penv <- env
[08:05:30.323] | :             env <- parent.env(env)
[08:05:30.323] | :         }
[08:05:30.323] | :         if (identical(penv, globalenv())) {
[08:05:30.323] | :             environment(...future.FUN) <- environment()
[08:05:30.323] | :         }
[08:05:30.323] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:30.323] | :             !isNamespace(penv)) {
[08:05:30.323] | :             parent.env(penv) <- environment()
[08:05:30.323] | :         }
[08:05:30.323] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:30.323] | :         {
[08:05:30.323] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:30.323] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:30.323] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:30.323] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:30.323] | :                 on.exit(options(oopts), add = TRUE)
[08:05:30.323] | :             }
[08:05:30.323] | :             {
[08:05:30.323] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:30.323] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:30.323] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:30.323] | :                   {
[08:05:30.323] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:30.323] | :                   }
[08:05:30.323] | :                 })
[08:05:30.323] | :             }
[08:05:30.323] | :         }
[08:05:30.323] | :     }, args = future.call.arguments)
[08:05:30.323] | : }
[08:05:30.323] | : Globals: 6 objects totaling 3.83 KiB (function ‘...future.FUN’ of 127 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, numeric ‘d’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:30.323] | : Packages: <none>
[08:05:30.323] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:30.323] | : Capture standard output: TRUE
[08:05:30.323] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:30.323] | : Immediate condition classes: ‘immediateCondition’
[08:05:30.323] | : Lazy evaluation: FALSE
[08:05:30.323] | : Local evaluation: TRUE
[08:05:30.323] | : Asynchronous evaluation: TRUE
[08:05:30.323] | : Early signaling: FALSE
[08:05:30.323] | : Environment: R_GlobalEnv
[08:05:30.323] | : State: ‘running’
[08:05:30.323] | : Resolved: FALSE
[08:05:30.323] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-5
[08:05:30.323] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.323] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:30.323] | : Value: <not collected>
[08:05:30.323] | : Conditions captured: <none>
[08:05:30.335] | : Chunk #1 of 1 ... DONE
[08:05:30.336] | : Launching 1 futures (chunks) ... DONE
[08:05:30.336] | : Resolving 1 futures (chunks) ...
[08:05:30.378] | :  - Number of value chunks collected: 1
[08:05:30.378] | : Resolving 1 futures (chunks) ... DONE
[08:05:30.378] | : Reducing values from 1 chunks ...
[08:05:30.379] | :  - Number of values collected after concatenation: 2
[08:05:30.379] | :  - Number of values expected: 2
[08:05:30.379] | : Reducing values from 1 chunks ... DONE
[08:05:30.379] | future_lapply() -> future_xapply() ... done
[08:05:30.379] future_lapply() ... done

> stopifnot(identical(y, list(42, 84)))

> e <- 42

> res <- tryCatch({
+     future_lapply(1:2, FUN = function(x) {
+         2 * e
+     }, future.globals = structure(TRUE, ignore = "e"))
+ }, error = .... [TRUNCATED] 
[08:05:30.379] future_lapply() ...
[08:05:30.380] | Globals in FUN(): [n=3] ‘{’, ‘*’, ‘e’
[08:05:30.380] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:30.380] | future_lapply() -> future_xapply() ...
[08:05:30.380] | : Number of chunks: 1
[08:05:30.381] | : getGlobalsAndPackagesXApply() ...
[08:05:30.381] | : . future.globals: TRUE
[08:05:30.386] | : . globals found/used: [n=1] ‘FUN’
[08:05:30.387] | : . needed namespaces: [n=0] 
[08:05:30.387] | : . use_args: TRUE
[08:05:30.387] | : . Getting '...' globals ...
[08:05:30.387] | : . ' '...' content: [n=0] 
[08:05:30.387] | : . ' List of 1
[08:05:30.387] | : . '  $ ...: list()
[08:05:30.387] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.387] | : . '  - attr(*, "where")=List of 1
[08:05:30.387] | : . '   ..$ ...:<environment: 0x56342c604490> 
[08:05:30.387] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.387] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:30.387] | : . '  - attr(*, "total_size")= num NA
[08:05:30.390] | : . Getting '...' globals ... done
[08:05:30.390] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:30.390] | : . List of 2
[08:05:30.390] | : .  $ ...future.FUN:function (x)  
[08:05:30.390] | : .  $ ...          : list()
[08:05:30.390] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.390] | : .  - attr(*, "where")=List of 2
[08:05:30.390] | : .   ..$ ...future.FUN:<environment: 0x56342c604490> 
[08:05:30.390] | : .   ..$ ...          :<environment: 0x56342c604490> 
[08:05:30.390] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.390] | : .  - attr(*, "resolved")= logi FALSE
[08:05:30.390] | : .  - attr(*, "total_size")= num 3614
[08:05:30.393] | : . Packages to be attached in all futures: [n=0] 
[08:05:30.393] | : getGlobalsAndPackagesXApply() ... done
[08:05:30.393] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.393] | : List of 5
[08:05:30.393] | :  $ ...future.FUN            :function (x)  
[08:05:30.393] | :  $ ...                      : list()
[08:05:30.393] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.393] | :  $ ...future.elements_ii    : NULL
[08:05:30.393] | :  $ ...future.seeds_ii       : NULL
[08:05:30.393] | :  $ ...future.globals.maxSize: NULL
[08:05:30.393] | :  - attr(*, "where")=List of 5
[08:05:30.393] | :   ..$ ...future.FUN            :<environment: 0x56342c604490> 
[08:05:30.393] | :   ..$ ...                      :<environment: 0x56342c604490> 
[08:05:30.393] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:30.393] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:30.393] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:30.393] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.393] | :  - attr(*, "resolved")= logi FALSE
[08:05:30.393] | :  - attr(*, "total_size")= num 3614
[08:05:30.398] | : Number of futures (= number of chunks): 1
[08:05:30.398] | : Launching 1 futures (chunks) ...
[08:05:30.398] | : Chunk #1 of 1 ...
[08:05:30.398] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:30.398] | :    + additional globals found: [n=0] 
[08:05:30.398] | :    + additional namespaces needed: [n=0] 
[08:05:30.399] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:30.399] | :  - seeds: <none>
[08:05:30.399] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.471] | : Created future:
[08:05:30.471] | : ClusterFuture:
[08:05:30.471] | : Label: ‘future_lapply-1’
[08:05:30.471] | : Expression:
[08:05:30.471] | : {
[08:05:30.471] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:30.471] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:30.471] | :     "# as a global variable                                         "
[08:05:30.471] | :     do.call(function(...) {
[08:05:30.471] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:30.471] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:30.471] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:30.471] | :         "# anonymous function.                                          "
[08:05:30.471] | :         "#                                                              "
[08:05:30.471] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:30.471] | :         "# function environment of FUN() to the calling environment.    "
[08:05:30.471] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:30.471] | :         "# global environment, which is where globals are written.      "
[08:05:30.471] | :         penv <- env <- environment(...future.FUN)
[08:05:30.471] | :         repeat {
[08:05:30.471] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:30.471] | :                 emptyenv())) 
[08:05:30.471] | :                 break
[08:05:30.471] | :             penv <- env
[08:05:30.471] | :             env <- parent.env(env)
[08:05:30.471] | :         }
[08:05:30.471] | :         if (identical(penv, globalenv())) {
[08:05:30.471] | :             environment(...future.FUN) <- environment()
[08:05:30.471] | :         }
[08:05:30.471] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:30.471] | :             !isNamespace(penv)) {
[08:05:30.471] | :             parent.env(penv) <- environment()
[08:05:30.471] | :         }
[08:05:30.471] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:30.471] | :         {
[08:05:30.471] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:30.471] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:30.471] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:30.471] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:30.471] | :                 on.exit(options(oopts), add = TRUE)
[08:05:30.471] | :             }
[08:05:30.471] | :             {
[08:05:30.471] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:30.471] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:30.471] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:30.471] | :                   {
[08:05:30.471] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:30.471] | :                   }
[08:05:30.471] | :                 })
[08:05:30.471] | :             }
[08:05:30.471] | :         }
[08:05:30.471] | :     }, args = future.call.arguments)
[08:05:30.471] | : }
[08:05:30.471] | : Globals: 5 objects totaling 3.82 KiB (function ‘...future.FUN’ of 139 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:30.471] | : Packages: <none>
[08:05:30.471] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:30.471] | : Capture standard output: TRUE
[08:05:30.471] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:30.471] | : Immediate condition classes: ‘immediateCondition’
[08:05:30.471] | : Lazy evaluation: FALSE
[08:05:30.471] | : Local evaluation: TRUE
[08:05:30.471] | : Asynchronous evaluation: TRUE
[08:05:30.471] | : Early signaling: FALSE
[08:05:30.471] | : Environment: R_GlobalEnv
[08:05:30.471] | : State: ‘running’
[08:05:30.471] | : Resolved: FALSE
[08:05:30.471] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-6
[08:05:30.471] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.471] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:30.471] | : Value: <not collected>
[08:05:30.471] | : Conditions captured: <none>
[08:05:30.483] | : Chunk #1 of 1 ... DONE
[08:05:30.483] | : Launching 1 futures (chunks) ... DONE
[08:05:30.483] | : Resolving 1 futures (chunks) ...
[08:05:30.526] | : onError() ...
[08:05:30.526] | : . Received <simpleError>
Warning: Caught simpleError. Canceling all iterations ...
[08:05:30.527] | : . Signaling: <simpleError>
[08:05:30.527] | : onError() ... done
[08:05:30.527] | future_lapply() -> future_xapply() ... done
[08:05:30.527] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> message("*** future_lapply() - manual globals ... DONE")
*** future_lapply() - manual globals ... DONE

> message("*** future_lapply() - tricky globals ...")
*** future_lapply() - tricky globals ...

> my_add <- function(a, b) a + b

> call_my_add <- function(a, b) {
+     do.call(my_add, args = list(a = a, b = b))
+ }

> call_my_add_caller <- function(a, b, FUN = call_my_add) {
+     do.call(FUN, args = list(a = a, b = b))
+ }

> main <- function(x = 1:2, caller = call_my_add_caller, 
+     args = list(FUN = call_my_add)) {
+     results <- future_lapply(x, FUN = function(i)  .... [TRUNCATED] 

> x <- list(list(1:2))

> z_length <- lapply(x, FUN = do.call, what = length)

> fun <- function(...) sum(...)

> z_fun <- lapply(x, FUN = do.call, what = fun)

> y0 <- NULL

> for (strategy in supportedStrategies()) {
+     plan(strategy)
+     y <- main(1:3)
+     if (is.null(y0)) 
+         y0 <- y
+     stopifnot(identi .... [TRUNCATED] 
[08:05:30.617] future_lapply() ...
[08:05:30.618] | Globals in FUN(): [n=7] ‘{’, ‘do.call’, ‘caller’, ‘c’, ‘list’, ‘+’, ‘args’
[08:05:30.618] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:30.618] | future_lapply() -> future_xapply() ...
[08:05:30.618] | : Number of chunks: 1
[08:05:30.618] | : getGlobalsAndPackagesXApply() ...
[08:05:30.618] | : . future.globals: TRUE
[08:05:30.639] | : . globals found/used: [n=5] ‘FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’
[08:05:30.639] | : . needed namespaces: [n=0] 
[08:05:30.639] | : . use_args: TRUE
[08:05:30.640] | : . Getting '...' globals ...
[08:05:30.640] | : . ' '...' content: [n=0] 
[08:05:30.640] | : . ' List of 1
[08:05:30.640] | : . '  $ ...: list()
[08:05:30.640] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.640] | : . '  - attr(*, "where")=List of 1
[08:05:30.640] | : . '   ..$ ...:<environment: 0x56342e895700> 
[08:05:30.640] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.640] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:30.640] | : . '  - attr(*, "total_size")= num NA
[08:05:30.643] | : . Getting '...' globals ... done
[08:05:30.643] | : . Globals to be used in all futures (chunks): [n=6] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’
[08:05:30.643] | : . List of 6
[08:05:30.643] | : .  $ ...future.FUN:function (i)  
[08:05:30.643] | : .  $ caller       :function (a, b, FUN = call_my_add)  
[08:05:30.643] | : .  $ args         :List of 1
[08:05:30.643] | : .   ..$ FUN:function (a, b)  
[08:05:30.643] | : .  $ call_my_add  :function (a, b)  
[08:05:30.643] | : .  $ my_add       :function (a, b)  
[08:05:30.643] | : .  $ ...          : list()
[08:05:30.643] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.643] | : .  - attr(*, "where")=List of 6
[08:05:30.643] | : .   ..$ ...future.FUN:<environment: 0x56342e895700> 
[08:05:30.643] | : .   ..$ caller       :<environment: 0x56342e899700> 
[08:05:30.643] | : .   ..$ args         :<environment: 0x56342e899700> 
[08:05:30.643] | : .   ..$ call_my_add  :<environment: R_GlobalEnv> 
[08:05:30.643] | : .   ..$ my_add       :<environment: R_GlobalEnv> 
[08:05:30.643] | : .   ..$ ...          :<environment: 0x56342e895700> 
[08:05:30.643] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.643] | : .  - attr(*, "resolved")= logi FALSE
[08:05:30.643] | : .  - attr(*, "total_size")= num 6429
[08:05:30.648] | : . Packages to be attached in all futures: [n=0] 
[08:05:30.648] | : getGlobalsAndPackagesXApply() ... done
[08:05:30.648] | : Globals pass to each chunk: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.648] | : List of 9
[08:05:30.648] | :  $ ...future.FUN            :function (i)  
[08:05:30.648] | :  $ caller                   :function (a, b, FUN = call_my_add)  
[08:05:30.648] | :  $ args                     :List of 1
[08:05:30.648] | :   ..$ FUN:function (a, b)  
[08:05:30.648] | :  $ call_my_add              :function (a, b)  
[08:05:30.648] | :  $ my_add                   :function (a, b)  
[08:05:30.648] | :  $ ...                      : list()
[08:05:30.648] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.648] | :  $ ...future.elements_ii    : NULL
[08:05:30.648] | :  $ ...future.seeds_ii       : NULL
[08:05:30.648] | :  $ ...future.globals.maxSize: NULL
[08:05:30.648] | :  - attr(*, "where")=List of 9
[08:05:30.648] | :   ..$ ...future.FUN            :<environment: 0x56342e895700> 
[08:05:30.648] | :   ..$ caller                   :<environment: 0x56342e899700> 
[08:05:30.648] | :   ..$ args                     :<environment: 0x56342e899700> 
[08:05:30.648] | :   ..$ call_my_add              :<environment: R_GlobalEnv> 
[08:05:30.648] | :   ..$ my_add                   :<environment: R_GlobalEnv> 
[08:05:30.648] | :   ..$ ...                      :<environment: 0x56342e895700> 
[08:05:30.648] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:30.648] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:30.648] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:30.648] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.648] | :  - attr(*, "resolved")= logi FALSE
[08:05:30.648] | :  - attr(*, "total_size")= num 6429
[08:05:30.655] | : Number of futures (= number of chunks): 1
[08:05:30.655] | : Launching 1 futures (chunks) ...
[08:05:30.655] | : Chunk #1 of 1 ...
[08:05:30.655] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:30.655] | :    + additional globals found: [n=0] 
[08:05:30.656] | :    + additional namespaces needed: [n=0] 
[08:05:30.656] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:30.656] | :  - seeds: <none>
[08:05:30.656] | :  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.667] | : Created future:
[08:05:30.667] | : SequentialFuture:
[08:05:30.667] | : Label: ‘future_lapply-1’
[08:05:30.667] | : Expression:
[08:05:30.667] | : {
[08:05:30.667] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:30.667] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:30.667] | :     "# as a global variable                                         "
[08:05:30.667] | :     do.call(function(...) {
[08:05:30.667] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:30.667] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:30.667] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:30.667] | :         "# anonymous function.                                          "
[08:05:30.667] | :         "#                                                              "
[08:05:30.667] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:30.667] | :         "# function environment of FUN() to the calling environment.    "
[08:05:30.667] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:30.667] | :         "# global environment, which is where globals are written.      "
[08:05:30.667] | :         penv <- env <- environment(...future.FUN)
[08:05:30.667] | :         repeat {
[08:05:30.667] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:30.667] | :                 emptyenv())) 
[08:05:30.667] | :                 break
[08:05:30.667] | :             penv <- env
[08:05:30.667] | :             env <- parent.env(env)
[08:05:30.667] | :         }
[08:05:30.667] | :         if (identical(penv, globalenv())) {
[08:05:30.667] | :             environment(...future.FUN) <- environment()
[08:05:30.667] | :         }
[08:05:30.667] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:30.667] | :             !isNamespace(penv)) {
[08:05:30.667] | :             parent.env(penv) <- environment()
[08:05:30.667] | :         }
[08:05:30.667] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:30.667] | :         {
[08:05:30.667] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:30.667] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:30.667] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:30.667] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:30.667] | :                 on.exit(options(oopts), add = TRUE)
[08:05:30.667] | :             }
[08:05:30.667] | :             {
[08:05:30.667] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:30.667] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:30.667] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:30.667] | :                   {
[08:05:30.667] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:30.667] | :                   }
[08:05:30.667] | :                 })
[08:05:30.667] | :             }
[08:05:30.667] | :         }
[08:05:30.667] | :     }, args = future.call.arguments)
[08:05:30.667] | : }
[08:05:30.667] | : Globals: 9 objects totaling 8.83 KiB (function ‘...future.FUN’ of 2.77 KiB, list ‘args’ of 928 bytes, function ‘caller’ of 904 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 114 bytes, ...)
[08:05:30.667] | : Packages: <none>
[08:05:30.667] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:30.667] | : Capture standard output: TRUE
[08:05:30.667] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:30.667] | : Immediate condition classes: ‘immediateCondition’
[08:05:30.667] | : Lazy evaluation: FALSE
[08:05:30.667] | : Local evaluation: TRUE
[08:05:30.667] | : Asynchronous evaluation: TRUE
[08:05:30.667] | : Early signaling: FALSE
[08:05:30.667] | : Environment: 0x56342e899700
[08:05:30.667] | : State: ‘finished’
[08:05:30.667] | : Resolved: TRUE
[08:05:30.667] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-7
[08:05:30.667] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.667] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:30.667] | : Value: 67 bytes of class ‘list’
[08:05:30.667] | : Duration: 0.006721258 secs (started 2025-06-17 08:05:30.660074)
[08:05:30.667] | : Worker process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.669] | : Chunk #1 of 1 ... DONE
[08:05:30.669] | : Launching 1 futures (chunks) ... DONE
[08:05:30.669] | : Resolving 1 futures (chunks) ...
[08:05:30.670] | :  - Number of value chunks collected: 1
[08:05:30.670] | : Resolving 1 futures (chunks) ... DONE
[08:05:30.670] | : Reducing values from 1 chunks ...
[08:05:30.670] | :  - Number of values collected after concatenation: 3
[08:05:30.670] | :  - Number of values expected: 3
[08:05:30.670] | : Reducing values from 1 chunks ... DONE
[08:05:30.670] | future_lapply() -> future_xapply() ... done
[08:05:30.670] future_lapply() ... done
- future_lapply(x, FUN = do.call, ...) ...
[08:05:30.670] future_lapply() ...
[08:05:30.672] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:30.672] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:30.672] | future_lapply() -> future_xapply() ...
[08:05:30.673] | : Number of chunks: 1
[08:05:30.673] | : getGlobalsAndPackagesXApply() ...
[08:05:30.673] | : . future.globals: TRUE
[08:05:30.690] | : . globals found/used: [n=1] ‘FUN’
[08:05:30.690] | : . needed namespaces: [n=0] 
[08:05:30.690] | : . use_args: TRUE
[08:05:30.690] | : . Getting '...' globals ...
[08:05:30.690] | : . ' '...' content: [n=1] ‘what’
[08:05:30.691] | : . ' List of 1
[08:05:30.691] | : . '  $ ...:List of 1
[08:05:30.691] | : . '   ..$ what:function (x)  
[08:05:30.691] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.691] | : . '  - attr(*, "where")=List of 1
[08:05:30.691] | : . '   ..$ ...:<environment: 0x56342c66ef60> 
[08:05:30.691] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.691] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:30.691] | : . '  - attr(*, "total_size")= num NA
[08:05:30.693] | : . Getting '...' globals ... done
[08:05:30.694] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:30.694] | : . List of 2
[08:05:30.694] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:30.694] | : .  $ ...          :List of 1
[08:05:30.694] | : .   ..$ what:function (x)  
[08:05:30.694] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.694] | : .  - attr(*, "where")=List of 2
[08:05:30.694] | : .   ..$ ...future.FUN:<environment: 0x56342c66ef60> 
[08:05:30.694] | : .   ..$ ...          :<environment: 0x56342c66ef60> 
[08:05:30.694] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.694] | : .  - attr(*, "resolved")= logi FALSE
[08:05:30.694] | : .  - attr(*, "total_size")= num 7368
[08:05:30.697] | : . Packages to be attached in all futures: [n=0] 
[08:05:30.697] | : getGlobalsAndPackagesXApply() ... done
[08:05:30.697] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.697] | : List of 5
[08:05:30.697] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:30.697] | :  $ ...                      :List of 1
[08:05:30.697] | :   ..$ what:function (x)  
[08:05:30.697] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.697] | :  $ ...future.elements_ii    : NULL
[08:05:30.697] | :  $ ...future.seeds_ii       : NULL
[08:05:30.697] | :  $ ...future.globals.maxSize: NULL
[08:05:30.697] | :  - attr(*, "where")=List of 5
[08:05:30.697] | :   ..$ ...future.FUN            :<environment: 0x56342c66ef60> 
[08:05:30.697] | :   ..$ ...                      :<environment: 0x56342c66ef60> 
[08:05:30.697] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:30.697] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:30.697] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:30.697] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.697] | :  - attr(*, "resolved")= logi FALSE
[08:05:30.697] | :  - attr(*, "total_size")= num 7368
[08:05:30.702] | : Number of futures (= number of chunks): 1
[08:05:30.704] | : Launching 1 futures (chunks) ...
[08:05:30.704] | : Chunk #1 of 1 ...
[08:05:30.704] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:30.704] | :    + additional globals found: [n=0] 
[08:05:30.705] | :    + additional namespaces needed: [n=0] 
[08:05:30.705] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:30.705] | :  - seeds: <none>
[08:05:30.705] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.709] | : Created future:
[08:05:30.709] | : SequentialFuture:
[08:05:30.709] | : Label: ‘future_lapply-1’
[08:05:30.709] | : Expression:
[08:05:30.709] | : {
[08:05:30.709] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:30.709] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:30.709] | :     "# as a global variable                                         "
[08:05:30.709] | :     do.call(function(...) {
[08:05:30.709] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:30.709] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:30.709] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:30.709] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:30.709] | :             on.exit(options(oopts), add = TRUE)
[08:05:30.709] | :         }
[08:05:30.709] | :         {
[08:05:30.709] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:30.709] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:30.709] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:30.709] | :                 {
[08:05:30.709] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:30.709] | :                 }
[08:05:30.709] | :             })
[08:05:30.709] | :         }
[08:05:30.709] | :     }, args = future.call.arguments)
[08:05:30.709] | : }
[08:05:30.709] | : Globals: 5 objects totaling 7.38 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:30.709] | : Packages: <none>
[08:05:30.709] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:30.709] | : Capture standard output: TRUE
[08:05:30.709] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:30.709] | : Immediate condition classes: ‘immediateCondition’
[08:05:30.709] | : Lazy evaluation: FALSE
[08:05:30.709] | : Local evaluation: TRUE
[08:05:30.709] | : Asynchronous evaluation: TRUE
[08:05:30.709] | : Early signaling: FALSE
[08:05:30.709] | : Environment: R_GlobalEnv
[08:05:30.709] | : State: ‘finished’
[08:05:30.709] | : Resolved: TRUE
[08:05:30.709] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-8
[08:05:30.709] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.709] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:30.709] | : Value: 43 bytes of class ‘list’
[08:05:30.709] | : Duration: 0.002304792 secs (started 2025-06-17 08:05:30.706232)
[08:05:30.709] | : Worker process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.710] | : Chunk #1 of 1 ... DONE
[08:05:30.710] | : Launching 1 futures (chunks) ... DONE
[08:05:30.710] | : Resolving 1 futures (chunks) ...
[08:05:30.711] | :  - Number of value chunks collected: 1
[08:05:30.711] | : Resolving 1 futures (chunks) ... DONE
[08:05:30.711] | : Reducing values from 1 chunks ...
[08:05:30.711] | :  - Number of values collected after concatenation: 1
[08:05:30.711] | :  - Number of values expected: 1
[08:05:30.711] | : Reducing values from 1 chunks ... DONE
[08:05:30.711] | future_lapply() -> future_xapply() ... done
[08:05:30.711] future_lapply() ... done
[08:05:30.711] future_lapply() ...
[08:05:30.713] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:30.713] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:30.713] | future_lapply() -> future_xapply() ...
[08:05:30.713] | : Number of chunks: 1
[08:05:30.713] | : getGlobalsAndPackagesXApply() ...
[08:05:30.713] | : . future.globals: TRUE
[08:05:30.732] | : . globals found/used: [n=1] ‘FUN’
[08:05:30.732] | : . needed namespaces: [n=0] 
[08:05:30.732] | : . use_args: TRUE
[08:05:30.732] | : . Getting '...' globals ...
[08:05:30.732] | : . ' '...' content: [n=1] ‘what’
[08:05:30.733] | : . ' List of 1
[08:05:30.733] | : . '  $ ...:List of 1
[08:05:30.733] | : . '   ..$ what:function (...)  
[08:05:30.733] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.733] | : . '  - attr(*, "where")=List of 1
[08:05:30.733] | : . '   ..$ ...:<environment: 0x56342cbf6bc0> 
[08:05:30.733] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.733] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:30.733] | : . '  - attr(*, "total_size")= num NA
[08:05:30.735] | : . Getting '...' globals ... done
[08:05:30.735] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:30.736] | : . List of 2
[08:05:30.736] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:30.736] | : .  $ ...          :List of 1
[08:05:30.736] | : .   ..$ what:function (...)  
[08:05:30.736] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.736] | : .  - attr(*, "where")=List of 2
[08:05:30.736] | : .   ..$ ...future.FUN:<environment: 0x56342cbf6bc0> 
[08:05:30.736] | : .   ..$ ...          :<environment: 0x56342cbf6bc0> 
[08:05:30.736] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.736] | : .  - attr(*, "resolved")= logi FALSE
[08:05:30.736] | : .  - attr(*, "total_size")= num 7436
[08:05:30.739] | : . Packages to be attached in all futures: [n=0] 
[08:05:30.739] | : getGlobalsAndPackagesXApply() ... done
[08:05:30.739] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.739] | : List of 5
[08:05:30.739] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:30.739] | :  $ ...                      :List of 1
[08:05:30.739] | :   ..$ what:function (...)  
[08:05:30.739] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.739] | :  $ ...future.elements_ii    : NULL
[08:05:30.739] | :  $ ...future.seeds_ii       : NULL
[08:05:30.739] | :  $ ...future.globals.maxSize: NULL
[08:05:30.739] | :  - attr(*, "where")=List of 5
[08:05:30.739] | :   ..$ ...future.FUN            :<environment: 0x56342cbf6bc0> 
[08:05:30.739] | :   ..$ ...                      :<environment: 0x56342cbf6bc0> 
[08:05:30.739] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:30.739] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:30.739] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:30.739] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.739] | :  - attr(*, "resolved")= logi FALSE
[08:05:30.739] | :  - attr(*, "total_size")= num 7436
[08:05:30.743] | : Number of futures (= number of chunks): 1
[08:05:30.744] | : Launching 1 futures (chunks) ...
[08:05:30.744] | : Chunk #1 of 1 ...
[08:05:30.744] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:30.746] | :    + additional globals found: [n=0] 
[08:05:30.746] | :    + additional namespaces needed: [n=0] 
[08:05:30.746] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:30.746] | :  - seeds: <none>
[08:05:30.746] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.751] | : Created future:
[08:05:30.751] | : SequentialFuture:
[08:05:30.751] | : Label: ‘future_lapply-1’
[08:05:30.751] | : Expression:
[08:05:30.751] | : {
[08:05:30.751] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:30.751] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:30.751] | :     "# as a global variable                                         "
[08:05:30.751] | :     do.call(function(...) {
[08:05:30.751] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:30.751] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:30.751] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:30.751] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:30.751] | :             on.exit(options(oopts), add = TRUE)
[08:05:30.751] | :         }
[08:05:30.751] | :         {
[08:05:30.751] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:30.751] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:30.751] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:30.751] | :                 {
[08:05:30.751] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:30.751] | :                 }
[08:05:30.751] | :             })
[08:05:30.751] | :         }
[08:05:30.751] | :     }, args = future.call.arguments)
[08:05:30.751] | : }
[08:05:30.751] | : Globals: 5 objects totaling 7.80 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 388 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:30.751] | : Packages: <none>
[08:05:30.751] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:30.751] | : Capture standard output: TRUE
[08:05:30.751] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:30.751] | : Immediate condition classes: ‘immediateCondition’
[08:05:30.751] | : Lazy evaluation: FALSE
[08:05:30.751] | : Local evaluation: TRUE
[08:05:30.751] | : Asynchronous evaluation: TRUE
[08:05:30.751] | : Early signaling: FALSE
[08:05:30.751] | : Environment: R_GlobalEnv
[08:05:30.751] | : State: ‘finished’
[08:05:30.751] | : Resolved: TRUE
[08:05:30.751] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-9
[08:05:30.751] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.751] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:30.751] | : Value: 43 bytes of class ‘list’
[08:05:30.751] | : Duration: 0.003212929 secs (started 2025-06-17 08:05:30.747594)
[08:05:30.751] | : Worker process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.752] | : Chunk #1 of 1 ... DONE
[08:05:30.752] | : Launching 1 futures (chunks) ... DONE
[08:05:30.752] | : Resolving 1 futures (chunks) ...
[08:05:30.753] | :  - Number of value chunks collected: 1
[08:05:30.753] | : Resolving 1 futures (chunks) ... DONE
[08:05:30.753] | : Reducing values from 1 chunks ...
[08:05:30.753] | :  - Number of values collected after concatenation: 1
[08:05:30.753] | :  - Number of values expected: 1
[08:05:30.753] | : Reducing values from 1 chunks ... DONE
[08:05:30.753] | future_lapply() -> future_xapply() ... done
[08:05:30.753] future_lapply() ... done
- future_lapply(x, ...) - passing arguments via '...' ...
[08:05:30.754] future_lapply() ...
[08:05:30.754] | Globals in FUN(): [n=1] ‘typeof’
[08:05:30.754] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:30.755] | future_lapply() -> future_xapply() ...
[08:05:30.755] | : Number of chunks: 1
[08:05:30.755] | : getGlobalsAndPackagesXApply() ...
[08:05:30.755] | : . future.globals: TRUE
[08:05:30.761] | : . globals found/used: [n=1] ‘FUN’
[08:05:30.761] | : . needed namespaces: [n=0] 
[08:05:30.761] | : . use_args: TRUE
[08:05:30.761] | : . Getting '...' globals ...
[08:05:30.761] | : . ' '...' content: [n=1] ‘b’
[08:05:30.761] | : . ' List of 1
[08:05:30.761] | : . '  $ ...:List of 1
[08:05:30.761] | : . '   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:30.761] | : . '   .. ..$ a: int [1:2] 1 2
[08:05:30.761] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.761] | : . '  - attr(*, "where")=List of 1
[08:05:30.761] | : . '   ..$ ...:<environment: 0x56342cb4beb0> 
[08:05:30.761] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.761] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:30.761] | : . '  - attr(*, "total_size")= num NA
[08:05:30.765] | : . Getting '...' globals ... done
[08:05:30.765] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:30.765] | : . List of 2
[08:05:30.765] | : .  $ ...future.FUN:function (a, b)  
[08:05:30.765] | : .  $ ...          :List of 1
[08:05:30.765] | : .   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:30.765] | : .   .. ..$ a: int [1:2] 1 2
[08:05:30.765] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.765] | : .  - attr(*, "where")=List of 2
[08:05:30.765] | : .   ..$ ...future.FUN:<environment: 0x56342cb4beb0> 
[08:05:30.765] | : .   ..$ ...          :<environment: 0x56342cb4beb0> 
[08:05:30.765] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.765] | : .  - attr(*, "resolved")= logi FALSE
[08:05:30.765] | : .  - attr(*, "total_size")= num 4505
[08:05:30.769] | : . Packages to be attached in all futures: [n=0] 
[08:05:30.769] | : getGlobalsAndPackagesXApply() ... done
[08:05:30.769] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.769] | : List of 5
[08:05:30.769] | :  $ ...future.FUN            :function (a, b)  
[08:05:30.769] | :  $ ...                      :List of 1
[08:05:30.769] | :   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:30.769] | :   .. ..$ a: int [1:2] 1 2
[08:05:30.769] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.769] | :  $ ...future.elements_ii    : NULL
[08:05:30.769] | :  $ ...future.seeds_ii       : NULL
[08:05:30.769] | :  $ ...future.globals.maxSize: NULL
[08:05:30.769] | :  - attr(*, "where")=List of 5
[08:05:30.769] | :   ..$ ...future.FUN            :<environment: 0x56342cb4beb0> 
[08:05:30.769] | :   ..$ ...                      :<environment: 0x56342cb4beb0> 
[08:05:30.769] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:30.769] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:30.769] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:30.769] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.769] | :  - attr(*, "resolved")= logi FALSE
[08:05:30.769] | :  - attr(*, "total_size")= num 4505
[08:05:30.774] | : Number of futures (= number of chunks): 1
[08:05:30.774] | : Launching 1 futures (chunks) ...
[08:05:30.774] | : Chunk #1 of 1 ...
[08:05:30.774] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:30.775] | :    + additional globals found: [n=0] 
[08:05:30.775] | :    + additional namespaces needed: [n=0] 
[08:05:30.775] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:30.775] | :  - seeds: <none>
[08:05:30.775] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.779] | : Created future:
[08:05:30.779] | : SequentialFuture:
[08:05:30.779] | : Label: ‘future_lapply-1’
[08:05:30.779] | : Expression:
[08:05:30.779] | : {
[08:05:30.779] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:30.779] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:30.779] | :     "# as a global variable                                         "
[08:05:30.779] | :     do.call(function(...) {
[08:05:30.779] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:30.779] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:30.779] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:30.779] | :         "# anonymous function.                                          "
[08:05:30.779] | :         "#                                                              "
[08:05:30.779] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:30.779] | :         "# function environment of FUN() to the calling environment.    "
[08:05:30.779] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:30.779] | :         "# global environment, which is where globals are written.      "
[08:05:30.779] | :         penv <- env <- environment(...future.FUN)
[08:05:30.779] | :         repeat {
[08:05:30.779] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:30.779] | :                 emptyenv())) 
[08:05:30.779] | :                 break
[08:05:30.779] | :             penv <- env
[08:05:30.779] | :             env <- parent.env(env)
[08:05:30.779] | :         }
[08:05:30.779] | :         if (identical(penv, globalenv())) {
[08:05:30.779] | :             environment(...future.FUN) <- environment()
[08:05:30.779] | :         }
[08:05:30.779] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:30.779] | :             !isNamespace(penv)) {
[08:05:30.779] | :             parent.env(penv) <- environment()
[08:05:30.779] | :         }
[08:05:30.779] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:30.779] | :         {
[08:05:30.779] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:30.779] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:30.779] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:30.779] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:30.779] | :                 on.exit(options(oopts), add = TRUE)
[08:05:30.779] | :             }
[08:05:30.779] | :             {
[08:05:30.779] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:30.779] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:30.779] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:30.779] | :                   {
[08:05:30.779] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:30.779] | :                   }
[08:05:30.779] | :                 })
[08:05:30.779] | :             }
[08:05:30.779] | :         }
[08:05:30.779] | :     }, args = future.call.arguments)
[08:05:30.779] | : }
[08:05:30.779] | : Globals: 5 objects totaling 4.67 KiB (DotDotDotList ‘future.call.arguments’ of 357 bytes, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:30.779] | : Packages: <none>
[08:05:30.779] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:30.779] | : Capture standard output: TRUE
[08:05:30.779] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:30.779] | : Immediate condition classes: ‘immediateCondition’
[08:05:30.779] | : Lazy evaluation: FALSE
[08:05:30.779] | : Local evaluation: TRUE
[08:05:30.779] | : Asynchronous evaluation: TRUE
[08:05:30.779] | : Early signaling: FALSE
[08:05:30.779] | : Environment: R_GlobalEnv
[08:05:30.779] | : State: ‘finished’
[08:05:30.779] | : Resolved: TRUE
[08:05:30.779] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-10
[08:05:30.779] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.779] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:30.779] | : Value: 51 bytes of class ‘list’
[08:05:30.779] | : Duration: 0.002273321 secs (started 2025-06-17 08:05:30.776313)
[08:05:30.779] | : Worker process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.780] | : Chunk #1 of 1 ... DONE
[08:05:30.780] | : Launching 1 futures (chunks) ... DONE
[08:05:30.780] | : Resolving 1 futures (chunks) ...
[08:05:30.781] | :  - Number of value chunks collected: 1
[08:05:30.781] | : Resolving 1 futures (chunks) ... DONE
[08:05:30.781] | : Reducing values from 1 chunks ...
[08:05:30.781] | :  - Number of values collected after concatenation: 1
[08:05:30.781] | :  - Number of values expected: 1
[08:05:30.781] | : Reducing values from 1 chunks ... DONE
[08:05:30.781] | future_lapply() -> future_xapply() ... done
[08:05:30.781] future_lapply() ... done
[08:05:30.781] future_lapply() ...
[08:05:30.782] | Globals in FUN(): [n=1] ‘typeof’
[08:05:30.782] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:30.782] | future_lapply() -> future_xapply() ...
[08:05:30.782] | : Number of chunks: 1
[08:05:30.782] | : getGlobalsAndPackagesXApply() ...
[08:05:30.783] | : . future.globals: TRUE
[08:05:30.788] | : . globals found/used: [n=1] ‘FUN’
[08:05:30.789] | : . needed namespaces: [n=0] 
[08:05:30.789] | : . use_args: TRUE
[08:05:30.789] | : . Getting '...' globals ...
[08:05:30.789] | : . ' '...' content: [n=1] ‘b’
[08:05:30.789] | : . ' List of 1
[08:05:30.789] | : . '  $ ...:List of 1
[08:05:30.789] | : . '   ..$ b:<environment: 0x56342deb9770> 
[08:05:30.789] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.789] | : . '  - attr(*, "where")=List of 1
[08:05:30.789] | : . '   ..$ ...:<environment: 0x56342deb8cb8> 
[08:05:30.789] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.789] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:30.789] | : . '  - attr(*, "total_size")= num NA
[08:05:30.794] | : . Getting '...' globals ... done
[08:05:30.794] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:30.794] | : . List of 2
[08:05:30.794] | : .  $ ...future.FUN:function (a, b)  
[08:05:30.794] | : .  $ ...          :List of 1
[08:05:30.794] | : .   ..$ b:<environment: 0x56342deb9770> 
[08:05:30.794] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.794] | : .  - attr(*, "where")=List of 2
[08:05:30.794] | : .   ..$ ...future.FUN:<environment: 0x56342deb8cb8> 
[08:05:30.794] | : .   ..$ ...          :<environment: 0x56342deb8cb8> 
[08:05:30.794] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.794] | : .  - attr(*, "resolved")= logi FALSE
[08:05:30.794] | : .  - attr(*, "total_size")= num 4260
[08:05:30.797] | : . Packages to be attached in all futures: [n=0] 
[08:05:30.797] | : getGlobalsAndPackagesXApply() ... done
[08:05:30.797] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.798] | : List of 5
[08:05:30.798] | :  $ ...future.FUN            :function (a, b)  
[08:05:30.798] | :  $ ...                      :List of 1
[08:05:30.798] | :   ..$ b:<environment: 0x56342deb9770> 
[08:05:30.798] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.798] | :  $ ...future.elements_ii    : NULL
[08:05:30.798] | :  $ ...future.seeds_ii       : NULL
[08:05:30.798] | :  $ ...future.globals.maxSize: NULL
[08:05:30.798] | :  - attr(*, "where")=List of 5
[08:05:30.798] | :   ..$ ...future.FUN            :<environment: 0x56342deb8cb8> 
[08:05:30.798] | :   ..$ ...                      :<environment: 0x56342deb8cb8> 
[08:05:30.798] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:30.798] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:30.798] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:30.798] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.798] | :  - attr(*, "resolved")= logi FALSE
[08:05:30.798] | :  - attr(*, "total_size")= num 4260
[08:05:30.802] | : Number of futures (= number of chunks): 1
[08:05:30.802] | : Launching 1 futures (chunks) ...
[08:05:30.802] | : Chunk #1 of 1 ...
[08:05:30.802] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:30.803] | :    + additional globals found: [n=0] 
[08:05:30.803] | :    + additional namespaces needed: [n=0] 
[08:05:30.803] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:30.803] | :  - seeds: <none>
[08:05:30.803] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.807] | : Created future:
[08:05:30.807] | : SequentialFuture:
[08:05:30.807] | : Label: ‘future_lapply-1’
[08:05:30.807] | : Expression:
[08:05:30.807] | : {
[08:05:30.807] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:30.807] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:30.807] | :     "# as a global variable                                         "
[08:05:30.807] | :     do.call(function(...) {
[08:05:30.807] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:30.807] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:30.807] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:30.807] | :         "# anonymous function.                                          "
[08:05:30.807] | :         "#                                                              "
[08:05:30.807] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:30.807] | :         "# function environment of FUN() to the calling environment.    "
[08:05:30.807] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:30.807] | :         "# global environment, which is where globals are written.      "
[08:05:30.807] | :         penv <- env <- environment(...future.FUN)
[08:05:30.807] | :         repeat {
[08:05:30.807] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:30.807] | :                 emptyenv())) 
[08:05:30.807] | :                 break
[08:05:30.807] | :             penv <- env
[08:05:30.807] | :             env <- parent.env(env)
[08:05:30.807] | :         }
[08:05:30.807] | :         if (identical(penv, globalenv())) {
[08:05:30.807] | :             environment(...future.FUN) <- environment()
[08:05:30.807] | :         }
[08:05:30.807] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:30.807] | :             !isNamespace(penv)) {
[08:05:30.807] | :             parent.env(penv) <- environment()
[08:05:30.807] | :         }
[08:05:30.807] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:30.807] | :         {
[08:05:30.807] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:30.807] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:30.807] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:30.807] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:30.807] | :                 on.exit(options(oopts), add = TRUE)
[08:05:30.807] | :             }
[08:05:30.807] | :             {
[08:05:30.807] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:30.807] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:30.807] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:30.807] | :                   {
[08:05:30.807] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:30.807] | :                   }
[08:05:30.807] | :                 })
[08:05:30.807] | :             }
[08:05:30.807] | :         }
[08:05:30.807] | :     }, args = future.call.arguments)
[08:05:30.807] | : }
[08:05:30.807] | : Globals: 5 objects totaling 4.43 KiB (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 279 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:30.807] | : Packages: <none>
[08:05:30.807] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:30.807] | : Capture standard output: TRUE
[08:05:30.807] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:30.807] | : Immediate condition classes: ‘immediateCondition’
[08:05:30.807] | : Lazy evaluation: FALSE
[08:05:30.807] | : Local evaluation: TRUE
[08:05:30.807] | : Asynchronous evaluation: TRUE
[08:05:30.807] | : Early signaling: FALSE
[08:05:30.807] | : Environment: R_GlobalEnv
[08:05:30.807] | : State: ‘finished’
[08:05:30.807] | : Resolved: TRUE
[08:05:30.807] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-11
[08:05:30.807] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.807] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:30.807] | : Value: 58 bytes of class ‘list’
[08:05:30.807] | : Duration: 0.002424717 secs (started 2025-06-17 08:05:30.804635)
[08:05:30.807] | : Worker process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.809] | : Chunk #1 of 1 ... DONE
[08:05:30.809] | : Launching 1 futures (chunks) ... DONE
[08:05:30.809] | : Resolving 1 futures (chunks) ...
[08:05:30.809] | :  - Number of value chunks collected: 1
[08:05:30.809] | : Resolving 1 futures (chunks) ... DONE
[08:05:30.809] | : Reducing values from 1 chunks ...
[08:05:30.810] | :  - Number of values collected after concatenation: 1
[08:05:30.810] | :  - Number of values expected: 1
[08:05:30.810] | : Reducing values from 1 chunks ... DONE
[08:05:30.810] | future_lapply() -> future_xapply() ... done
[08:05:30.810] future_lapply() ... done
[08:05:30.810] future_lapply() ...
[08:05:30.811] | Globals in FUN(): [n=1] ‘typeof’
[08:05:30.811] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:30.811] | future_lapply() -> future_xapply() ...
[08:05:30.811] | : Number of chunks: 1
[08:05:30.811] | : getGlobalsAndPackagesXApply() ...
[08:05:30.811] | : . future.globals: TRUE
[08:05:30.818] | : . globals found/used: [n=1] ‘FUN’
[08:05:30.818] | : . needed namespaces: [n=0] 
[08:05:30.818] | : . use_args: TRUE
[08:05:30.818] | : . Getting '...' globals ...
[08:05:30.819] | : . ' '...' content: [n=1] ‘b’
[08:05:30.819] | : . ' List of 1
[08:05:30.819] | : . '  $ ...:List of 1
[08:05:30.819] | : . '   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:30.819] | : . '   .. .. ..@ slots     :List of 4
[08:05:30.819] | : . '   .. .. .. ..$ .Data  : chr "function"
[08:05:30.819] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. ..$ target : chr "signature"
[08:05:30.819] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. ..$ defined: chr "signature"
[08:05:30.819] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. ..$ generic: chr "character"
[08:05:30.819] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. ..@ contains  :List of 4
[08:05:30.819] | : . '   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.819] | : . '   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.819] | : . '   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.819] | : . '   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 3
[08:05:30.819] | : . '   .. .. ..@ virtual   : logi FALSE
[08:05:30.819] | : . '   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:30.819] | : . '  list()
[08:05:30.819] | : . '   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:30.819] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:30.819] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:30.819] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:30.819] | : . '   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:30.819] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:30.819] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:30.819] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:30.819] | : . '   .. .. .. .. ..$ generic: chr(0) 
[08:05:30.819] | : . '   .. .. ..@ validity  : NULL
[08:05:30.819] | : . '   .. .. ..@ access    : list()
[08:05:30.819] | : . '   .. .. ..@ className : chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. ..@ subclasses:List of 7
[08:05:30.819] | : . '   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.819] | : . '   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.819] | : . '   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.819] | : . '   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.819] | : . '   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.819] | : . '   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.819] | : . '   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.819] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.819] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:30.819] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.819] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.819] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.819] | : . '   .. .. ..@ versionKey:<externalptr> 
[08:05:30.819] | : . '   .. .. ..@ sealed    : logi TRUE
[08:05:30.819] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.819] | : . '  - attr(*, "where")=List of 1
[08:05:30.819] | : . '   ..$ ...:<environment: 0x56342bf4b020> 
[08:05:30.819] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.819] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:30.819] | : . '  - attr(*, "total_size")= num NA
[08:05:30.875] | : . Getting '...' globals ... done
[08:05:30.876] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:30.876] | : . List of 2
[08:05:30.876] | : .  $ ...future.FUN:function (a, b)  
[08:05:30.876] | : .  $ ...          :List of 1
[08:05:30.876] | : .   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:30.876] | : .   .. .. ..@ slots     :List of 4
[08:05:30.876] | : .   .. .. .. ..$ .Data  : chr "function"
[08:05:30.876] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. ..$ target : chr "signature"
[08:05:30.876] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. ..$ defined: chr "signature"
[08:05:30.876] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. ..$ generic: chr "character"
[08:05:30.876] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. ..@ contains  :List of 4
[08:05:30.876] | : .   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.876] | : .   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.876] | : .   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.876] | : .   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 3
[08:05:30.876] | : .   .. .. ..@ virtual   : logi FALSE
[08:05:30.876] | : .   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:30.876] | : .  list()
[08:05:30.876] | : .   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:30.876] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:30.876] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:30.876] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:30.876] | : .   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:30.876] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:30.876] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:30.876] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:30.876] | : .   .. .. .. .. ..$ generic: chr(0) 
[08:05:30.876] | : .   .. .. ..@ validity  : NULL
[08:05:30.876] | : .   .. .. ..@ access    : list()
[08:05:30.876] | : .   .. .. ..@ className : chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. ..@ subclasses:List of 7
[08:05:30.876] | : .   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.876] | : .   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.876] | : .   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.876] | : .   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.876] | : .   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.876] | : .   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.876] | : .   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.876] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.876] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.876] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:30.876] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.876] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.876] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.876] | : .   .. .. ..@ versionKey:<externalptr> 
[08:05:30.876] | : .   .. .. ..@ sealed    : logi TRUE
[08:05:30.876] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.876] | : .  - attr(*, "where")=List of 2
[08:05:30.876] | : .   ..$ ...future.FUN:<environment: 0x56342bf4b020> 
[08:05:30.876] | : .   ..$ ...          :<environment: 0x56342bf4b020> 
[08:05:30.876] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.876] | : .  - attr(*, "resolved")= logi FALSE
[08:05:30.876] | : .  - attr(*, "total_size")= num 106127
[08:05:30.932] | : . Packages to be attached in all futures: [n=0] 
[08:05:30.932] | : getGlobalsAndPackagesXApply() ... done
[08:05:30.932] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.932] | : List of 5
[08:05:30.932] | :  $ ...future.FUN            :function (a, b)  
[08:05:30.932] | :  $ ...                      :List of 1
[08:05:30.932] | :   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:30.932] | :   .. .. ..@ slots     :List of 4
[08:05:30.932] | :   .. .. .. ..$ .Data  : chr "function"
[08:05:30.932] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. ..$ target : chr "signature"
[08:05:30.932] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. ..$ defined: chr "signature"
[08:05:30.932] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. ..$ generic: chr "character"
[08:05:30.932] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. ..@ contains  :List of 4
[08:05:30.932] | :   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.932] | :   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.932] | :   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.932] | :   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 3
[08:05:30.932] | :   .. .. ..@ virtual   : logi FALSE
[08:05:30.932] | :   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:30.932] | :  list()
[08:05:30.932] | :   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:30.932] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:30.932] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:30.932] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:30.932] | :   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:30.932] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:30.932] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:30.932] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:30.932] | :   .. .. .. .. ..$ generic: chr(0) 
[08:05:30.932] | :   .. .. ..@ validity  : NULL
[08:05:30.932] | :   .. .. ..@ access    : list()
[08:05:30.932] | :   .. .. ..@ className : chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. ..@ subclasses:List of 7
[08:05:30.932] | :   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.932] | :   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.932] | :   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.932] | :   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:30.932] | :   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.932] | :   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.932] | :   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:30.932] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:30.932] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:30.932] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:30.932] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:30.932] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:30.932] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:30.932] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:30.932] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:30.932] | :   .. .. ..@ versionKey:<externalptr> 
[08:05:30.932] | :   .. .. ..@ sealed    : logi TRUE
[08:05:30.932] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:30.932] | :  $ ...future.elements_ii    : NULL
[08:05:30.932] | :  $ ...future.seeds_ii       : NULL
[08:05:30.932] | :  $ ...future.globals.maxSize: NULL
[08:05:30.932] | :  - attr(*, "where")=List of 5
[08:05:30.932] | :   ..$ ...future.FUN            :<environment: 0x56342bf4b020> 
[08:05:30.932] | :   ..$ ...                      :<environment: 0x56342bf4b020> 
[08:05:30.932] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:30.932] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:30.932] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:30.932] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:30.932] | :  - attr(*, "resolved")= logi FALSE
[08:05:30.932] | :  - attr(*, "total_size")= num 106127
[08:05:30.988] | : Number of futures (= number of chunks): 1
[08:05:30.988] | : Launching 1 futures (chunks) ...
[08:05:30.988] | : Chunk #1 of 1 ...
[08:05:30.988] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:30.989] | :    + additional globals found: [n=0] 
[08:05:30.989] | :    + additional namespaces needed: [n=0] 
[08:05:30.989] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:30.989] | :  - seeds: <none>
[08:05:30.989] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:30.993] | : Created future:
[08:05:30.993] | : SequentialFuture:
[08:05:30.993] | : Label: ‘future_lapply-1’
[08:05:30.993] | : Expression:
[08:05:30.993] | : {
[08:05:30.993] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:30.993] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:30.993] | :     "# as a global variable                                         "
[08:05:30.993] | :     do.call(function(...) {
[08:05:30.993] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:30.993] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:30.993] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:30.993] | :         "# anonymous function.                                          "
[08:05:30.993] | :         "#                                                              "
[08:05:30.993] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:30.993] | :         "# function environment of FUN() to the calling environment.    "
[08:05:30.993] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:30.993] | :         "# global environment, which is where globals are written.      "
[08:05:30.993] | :         penv <- env <- environment(...future.FUN)
[08:05:30.993] | :         repeat {
[08:05:30.993] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:30.993] | :                 emptyenv())) 
[08:05:30.993] | :                 break
[08:05:30.993] | :             penv <- env
[08:05:30.993] | :             env <- parent.env(env)
[08:05:30.993] | :         }
[08:05:30.993] | :         if (identical(penv, globalenv())) {
[08:05:30.993] | :             environment(...future.FUN) <- environment()
[08:05:30.993] | :         }
[08:05:30.993] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:30.993] | :             !isNamespace(penv)) {
[08:05:30.993] | :             parent.env(penv) <- environment()
[08:05:30.993] | :         }
[08:05:30.993] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:30.993] | :         {
[08:05:30.993] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:30.993] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:30.993] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:30.993] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:30.993] | :                 on.exit(options(oopts), add = TRUE)
[08:05:30.993] | :             }
[08:05:30.993] | :             {
[08:05:30.993] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:30.993] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:30.993] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:30.993] | :                   {
[08:05:30.993] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:30.993] | :                   }
[08:05:30.993] | :                 })
[08:05:30.993] | :             }
[08:05:30.993] | :         }
[08:05:30.993] | :     }, args = future.call.arguments)
[08:05:30.993] | : }
[08:05:30.993] | : Globals: 5 objects totaling 103.91 KiB (DotDotDotList ‘future.call.arguments’ of 50.30 KiB, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:30.993] | : Packages: <none>
[08:05:30.993] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:30.993] | : Capture standard output: TRUE
[08:05:30.993] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:30.993] | : Immediate condition classes: ‘immediateCondition’
[08:05:30.993] | : Lazy evaluation: FALSE
[08:05:30.993] | : Local evaluation: TRUE
[08:05:30.993] | : Asynchronous evaluation: TRUE
[08:05:30.993] | : Early signaling: FALSE
[08:05:30.993] | : Environment: R_GlobalEnv
[08:05:30.993] | : State: ‘finished’
[08:05:30.993] | : Resolved: TRUE
[08:05:30.993] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-12
[08:05:30.993] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.993] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:30.993] | : Value: 49 bytes of class ‘list’
[08:05:30.993] | : Duration: 0.002477407 secs (started 2025-06-17 08:05:30.990611)
[08:05:30.993] | : Worker process: 3cc614720d08b81d052793a8fb885c31
[08:05:30.995] | : Chunk #1 of 1 ... DONE
[08:05:30.995] | : Launching 1 futures (chunks) ... DONE
[08:05:30.995] | : Resolving 1 futures (chunks) ...
[08:05:30.996] | :  - Number of value chunks collected: 1
[08:05:30.996] | : Resolving 1 futures (chunks) ... DONE
[08:05:30.996] | : Reducing values from 1 chunks ...
[08:05:30.996] | :  - Number of values collected after concatenation: 1
[08:05:30.996] | :  - Number of values expected: 1
[08:05:30.996] | : Reducing values from 1 chunks ... DONE
[08:05:30.997] | future_lapply() -> future_xapply() ... done
[08:05:30.997] future_lapply() ... done
- future_lapply(X, ...) - 'X' containing globals ...
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
[08:05:30.999] future_lapply() ...
[08:05:30.999] | Globals in FUN(): [n=0] 
[08:05:30.999] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:30.999] | future_lapply() -> future_xapply() ...
[08:05:31.000] | : Number of chunks: 1
[08:05:31.000] | : getGlobalsAndPackagesXApply() ...
[08:05:31.000] | : . future.globals: TRUE
[08:05:31.003] | : . globals found/used: [n=1] ‘FUN’
[08:05:31.003] | : . needed namespaces: [n=0] 
[08:05:31.004] | : . use_args: TRUE
[08:05:31.004] | : . Getting '...' globals ...
[08:05:31.004] | : . ' '...' content: [n=0] 
[08:05:31.004] | : . ' List of 1
[08:05:31.004] | : . '  $ ...: list()
[08:05:31.004] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.004] | : . '  - attr(*, "where")=List of 1
[08:05:31.004] | : . '   ..$ ...:<environment: 0x56342de88c10> 
[08:05:31.004] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.004] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.004] | : . '  - attr(*, "total_size")= num NA
[08:05:31.008] | : . Getting '...' globals ... done
[08:05:31.009] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:31.009] | : . List of 2
[08:05:31.009] | : .  $ ...future.FUN:function (f)  
[08:05:31.009] | : .  $ ...          : list()
[08:05:31.009] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.009] | : .  - attr(*, "where")=List of 2
[08:05:31.009] | : .   ..$ ...future.FUN:<environment: 0x56342de88c10> 
[08:05:31.009] | : .   ..$ ...          :<environment: 0x56342de88c10> 
[08:05:31.009] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.009] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.009] | : .  - attr(*, "total_size")= num 5165
[08:05:31.012] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.012] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.012] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.012] | : List of 5
[08:05:31.012] | :  $ ...future.FUN            :function (f)  
[08:05:31.012] | :  $ ...                      : list()
[08:05:31.012] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.012] | :  $ ...future.elements_ii    : NULL
[08:05:31.012] | :  $ ...future.seeds_ii       : NULL
[08:05:31.012] | :  $ ...future.globals.maxSize: NULL
[08:05:31.012] | :  - attr(*, "where")=List of 5
[08:05:31.012] | :   ..$ ...future.FUN            :<environment: 0x56342de88c10> 
[08:05:31.012] | :   ..$ ...                      :<environment: 0x56342de88c10> 
[08:05:31.012] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.012] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.012] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.012] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.012] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.012] | :  - attr(*, "total_size")= num 5165
[08:05:31.016] | : Number of futures (= number of chunks): 1
[08:05:31.016] | : Launching 1 futures (chunks) ...
[08:05:31.016] | : Chunk #1 of 1 ...
[08:05:31.016] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.036] | :    + additional globals found: [n=2] ‘a’, ‘b’
[08:05:31.036] | :    + additional namespaces needed: [n=1] ‘tools’
[08:05:31.036] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.037] | :  - seeds: <none>
[08:05:31.037] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[08:05:31.041] | : Created future:
[08:05:31.041] | : SequentialFuture:
[08:05:31.041] | : Label: ‘future_lapply-1’
[08:05:31.041] | : Expression:
[08:05:31.041] | : {
[08:05:31.041] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.041] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.041] | :     "# as a global variable                                         "
[08:05:31.041] | :     do.call(function(...) {
[08:05:31.041] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.041] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.041] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.041] | :         "# anonymous function.                                          "
[08:05:31.041] | :         "#                                                              "
[08:05:31.041] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.041] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.041] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.041] | :         "# global environment, which is where globals are written.      "
[08:05:31.041] | :         penv <- env <- environment(...future.FUN)
[08:05:31.041] | :         repeat {
[08:05:31.041] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.041] | :                 emptyenv())) 
[08:05:31.041] | :                 break
[08:05:31.041] | :             penv <- env
[08:05:31.041] | :             env <- parent.env(env)
[08:05:31.041] | :         }
[08:05:31.041] | :         if (identical(penv, globalenv())) {
[08:05:31.041] | :             environment(...future.FUN) <- environment()
[08:05:31.041] | :         }
[08:05:31.041] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.041] | :             !isNamespace(penv)) {
[08:05:31.041] | :             parent.env(penv) <- environment()
[08:05:31.041] | :         }
[08:05:31.041] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.041] | :         {
[08:05:31.041] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.041] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.041] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.041] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.041] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.041] | :             }
[08:05:31.041] | :             {
[08:05:31.041] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.041] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.041] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.041] | :                   {
[08:05:31.041] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.041] | :                   }
[08:05:31.041] | :                 })
[08:05:31.041] | :             }
[08:05:31.041] | :         }
[08:05:31.041] | :     }, args = future.call.arguments)
[08:05:31.041] | : }
[08:05:31.041] | : Globals: 7 objects totaling 6.68 KiB (list ‘...future.elements_ii’ of 1.40 KiB, function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:31.041] | : Packages: 1 packages (‘tools’)
[08:05:31.041] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.041] | : Capture standard output: TRUE
[08:05:31.041] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.041] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.041] | : Lazy evaluation: FALSE
[08:05:31.041] | : Local evaluation: TRUE
[08:05:31.041] | : Asynchronous evaluation: TRUE
[08:05:31.041] | : Early signaling: FALSE
[08:05:31.041] | : Environment: R_GlobalEnv
[08:05:31.041] | : State: ‘finished’
[08:05:31.041] | : Resolved: TRUE
[08:05:31.041] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-13
[08:05:31.041] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.041] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:31.041] | : Value: 91 bytes of class ‘list’
[08:05:31.041] | : Duration: 0.002809286 secs (started 2025-06-17 08:05:31.038123)
[08:05:31.041] | : Worker process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.043] | : Chunk #1 of 1 ... DONE
[08:05:31.043] | : Launching 1 futures (chunks) ... DONE
[08:05:31.043] | : Resolving 1 futures (chunks) ...
[08:05:31.043] | :  - Number of value chunks collected: 1
[08:05:31.043] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.043] | : Reducing values from 1 chunks ...
[08:05:31.044] | :  - Number of values collected after concatenation: 4
[08:05:31.044] | :  - Number of values expected: 4
[08:05:31.044] | : Reducing values from 1 chunks ... DONE
[08:05:31.044] | future_lapply() -> future_xapply() ... done
[08:05:31.044] future_lapply() ... done
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
- future_lapply(X, ...) - '{ a <- a + 1; a }' ...
[08:05:31.046] future_lapply() ...
[08:05:31.048] | Globals in FUN(): [n=4] ‘{’, ‘<-’, ‘a’, ‘+’
[08:05:31.049] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.049] | future_lapply() -> future_xapply() ...
[08:05:31.049] | : Number of chunks: 1
[08:05:31.049] | : getGlobalsAndPackagesXApply() ...
[08:05:31.049] | : . future.globals: TRUE
[08:05:31.056] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:31.056] | : . needed namespaces: [n=0] 
[08:05:31.057] | : . use_args: TRUE
[08:05:31.057] | : . Getting '...' globals ...
[08:05:31.057] | : . ' '...' content: [n=0] 
[08:05:31.057] | : . ' List of 1
[08:05:31.057] | : . '  $ ...: list()
[08:05:31.057] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.057] | : . '  - attr(*, "where")=List of 1
[08:05:31.057] | : . '   ..$ ...:<environment: 0x56342e6829d0> 
[08:05:31.057] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.057] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.057] | : . '  - attr(*, "total_size")= num NA
[08:05:31.060] | : . Getting '...' globals ... done
[08:05:31.060] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:31.060] | : . List of 3
[08:05:31.060] | : .  $ ...future.FUN:function (ii)  
[08:05:31.060] | : .  $ a            : num 1
[08:05:31.060] | : .  $ ...          : list()
[08:05:31.060] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.060] | : .  - attr(*, "where")=List of 3
[08:05:31.060] | : .   ..$ ...future.FUN:<environment: 0x56342e6829d0> 
[08:05:31.060] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:31.060] | : .   ..$ ...          :<environment: 0x56342e6829d0> 
[08:05:31.060] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.060] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.060] | : .  - attr(*, "total_size")= num 4124
[08:05:31.063] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.063] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.064] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.064] | : List of 6
[08:05:31.064] | :  $ ...future.FUN            :function (ii)  
[08:05:31.064] | :  $ a                        : num 1
[08:05:31.064] | :  $ ...                      : list()
[08:05:31.064] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.064] | :  $ ...future.elements_ii    : NULL
[08:05:31.064] | :  $ ...future.seeds_ii       : NULL
[08:05:31.064] | :  $ ...future.globals.maxSize: NULL
[08:05:31.064] | :  - attr(*, "where")=List of 6
[08:05:31.064] | :   ..$ ...future.FUN            :<environment: 0x56342e6829d0> 
[08:05:31.064] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:31.064] | :   ..$ ...                      :<environment: 0x56342e6829d0> 
[08:05:31.064] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.064] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.064] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.064] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.064] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.064] | :  - attr(*, "total_size")= num 4124
[08:05:31.068] | : Number of futures (= number of chunks): 1
[08:05:31.069] | : Launching 1 futures (chunks) ...
[08:05:31.069] | : Chunk #1 of 1 ...
[08:05:31.069] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.069] | :    + additional globals found: [n=0] 
[08:05:31.069] | :    + additional namespaces needed: [n=0] 
[08:05:31.069] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.069] | :  - seeds: <none>
[08:05:31.070] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.073] | : Created future:
[08:05:31.074] | : SequentialFuture:
[08:05:31.074] | : Label: ‘future_lapply-1’
[08:05:31.074] | : Expression:
[08:05:31.074] | : {
[08:05:31.074] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.074] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.074] | :     "# as a global variable                                         "
[08:05:31.074] | :     do.call(function(...) {
[08:05:31.074] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.074] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.074] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.074] | :         "# anonymous function.                                          "
[08:05:31.074] | :         "#                                                              "
[08:05:31.074] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.074] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.074] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.074] | :         "# global environment, which is where globals are written.      "
[08:05:31.074] | :         penv <- env <- environment(...future.FUN)
[08:05:31.074] | :         repeat {
[08:05:31.074] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.074] | :                 emptyenv())) 
[08:05:31.074] | :                 break
[08:05:31.074] | :             penv <- env
[08:05:31.074] | :             env <- parent.env(env)
[08:05:31.074] | :         }
[08:05:31.074] | :         if (identical(penv, globalenv())) {
[08:05:31.074] | :             environment(...future.FUN) <- environment()
[08:05:31.074] | :         }
[08:05:31.074] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.074] | :             !isNamespace(penv)) {
[08:05:31.074] | :             parent.env(penv) <- environment()
[08:05:31.074] | :         }
[08:05:31.074] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.074] | :         {
[08:05:31.074] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.074] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.074] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.074] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.074] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.074] | :             }
[08:05:31.074] | :             {
[08:05:31.074] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.074] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.074] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.074] | :                   {
[08:05:31.074] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.074] | :                   }
[08:05:31.074] | :                 })
[08:05:31.074] | :             }
[08:05:31.074] | :         }
[08:05:31.074] | :     }, args = future.call.arguments)
[08:05:31.074] | : }
[08:05:31.074] | : Globals: 6 objects totaling 4.29 KiB (function ‘...future.FUN’ of 511 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:31.074] | : Packages: <none>
[08:05:31.074] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.074] | : Capture standard output: TRUE
[08:05:31.074] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.074] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.074] | : Lazy evaluation: FALSE
[08:05:31.074] | : Local evaluation: TRUE
[08:05:31.074] | : Asynchronous evaluation: TRUE
[08:05:31.074] | : Early signaling: FALSE
[08:05:31.074] | : Environment: R_GlobalEnv
[08:05:31.074] | : State: ‘finished’
[08:05:31.074] | : Resolved: TRUE
[08:05:31.074] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-14
[08:05:31.074] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.074] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:31.074] | : Value: 47 bytes of class ‘list’
[08:05:31.074] | : Duration: 0.002379417 secs (started 2025-06-17 08:05:31.070929)
[08:05:31.074] | : Worker process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.075] | : Chunk #1 of 1 ... DONE
[08:05:31.075] | : Launching 1 futures (chunks) ... DONE
[08:05:31.075] | : Resolving 1 futures (chunks) ...
[08:05:31.076] | :  - Number of value chunks collected: 1
[08:05:31.076] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.076] | : Reducing values from 1 chunks ...
[08:05:31.076] | :  - Number of values collected after concatenation: 1
[08:05:31.076] | :  - Number of values expected: 1
[08:05:31.076] | : Reducing values from 1 chunks ... DONE
[08:05:31.076] | future_lapply() -> future_xapply() ... done
[08:05:31.076] future_lapply() ... done
- future_lapply(X, ...) - '{ a; a <- a + 1 }' ...
[08:05:31.076] future_lapply() ...
[08:05:31.077] | Globals in FUN(): [n=4] ‘{’, ‘a’, ‘<-’, ‘+’
[08:05:31.077] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.077] | future_lapply() -> future_xapply() ...
[08:05:31.078] | : Number of chunks: 1
[08:05:31.078] | : getGlobalsAndPackagesXApply() ...
[08:05:31.078] | : . future.globals: TRUE
[08:05:31.085] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:31.085] | : . needed namespaces: [n=0] 
[08:05:31.085] | : . use_args: TRUE
[08:05:31.086] | : . Getting '...' globals ...
[08:05:31.086] | : . ' '...' content: [n=0] 
[08:05:31.086] | : . ' List of 1
[08:05:31.086] | : . '  $ ...: list()
[08:05:31.086] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.086] | : . '  - attr(*, "where")=List of 1
[08:05:31.086] | : . '   ..$ ...:<environment: 0x56342e64e480> 
[08:05:31.086] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.086] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.086] | : . '  - attr(*, "total_size")= num NA
[08:05:31.089] | : . Getting '...' globals ... done
[08:05:31.089] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:31.089] | : . List of 3
[08:05:31.089] | : .  $ ...future.FUN:function (ii)  
[08:05:31.089] | : .  $ a            : num 1
[08:05:31.089] | : .  $ ...          : list()
[08:05:31.089] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.089] | : .  - attr(*, "where")=List of 3
[08:05:31.089] | : .   ..$ ...future.FUN:<environment: 0x56342e64e480> 
[08:05:31.089] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:31.089] | : .   ..$ ...          :<environment: 0x56342e64e480> 
[08:05:31.089] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.089] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.089] | : .  - attr(*, "total_size")= num 4140
[08:05:31.094] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.094] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.094] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.095] | : List of 6
[08:05:31.095] | :  $ ...future.FUN            :function (ii)  
[08:05:31.095] | :  $ a                        : num 1
[08:05:31.095] | :  $ ...                      : list()
[08:05:31.095] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.095] | :  $ ...future.elements_ii    : NULL
[08:05:31.095] | :  $ ...future.seeds_ii       : NULL
[08:05:31.095] | :  $ ...future.globals.maxSize: NULL
[08:05:31.095] | :  - attr(*, "where")=List of 6
[08:05:31.095] | :   ..$ ...future.FUN            :<environment: 0x56342e64e480> 
[08:05:31.095] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:31.095] | :   ..$ ...                      :<environment: 0x56342e64e480> 
[08:05:31.095] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.095] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.095] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.095] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.095] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.095] | :  - attr(*, "total_size")= num 4140
[08:05:31.099] | : Number of futures (= number of chunks): 1
[08:05:31.099] | : Launching 1 futures (chunks) ...
[08:05:31.099] | : Chunk #1 of 1 ...
[08:05:31.100] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.100] | :    + additional globals found: [n=0] 
[08:05:31.100] | :    + additional namespaces needed: [n=0] 
[08:05:31.100] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.100] | :  - seeds: <none>
[08:05:31.100] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.104] | : Created future:
[08:05:31.104] | : SequentialFuture:
[08:05:31.104] | : Label: ‘future_lapply-1’
[08:05:31.104] | : Expression:
[08:05:31.104] | : {
[08:05:31.104] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.104] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.104] | :     "# as a global variable                                         "
[08:05:31.104] | :     do.call(function(...) {
[08:05:31.104] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.104] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.104] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.104] | :         "# anonymous function.                                          "
[08:05:31.104] | :         "#                                                              "
[08:05:31.104] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.104] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.104] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.104] | :         "# global environment, which is where globals are written.      "
[08:05:31.104] | :         penv <- env <- environment(...future.FUN)
[08:05:31.104] | :         repeat {
[08:05:31.104] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.104] | :                 emptyenv())) 
[08:05:31.104] | :                 break
[08:05:31.104] | :             penv <- env
[08:05:31.104] | :             env <- parent.env(env)
[08:05:31.104] | :         }
[08:05:31.104] | :         if (identical(penv, globalenv())) {
[08:05:31.104] | :             environment(...future.FUN) <- environment()
[08:05:31.104] | :         }
[08:05:31.104] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.104] | :             !isNamespace(penv)) {
[08:05:31.104] | :             parent.env(penv) <- environment()
[08:05:31.104] | :         }
[08:05:31.104] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.104] | :         {
[08:05:31.104] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.104] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.104] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.104] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.104] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.104] | :             }
[08:05:31.104] | :             {
[08:05:31.104] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.104] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.104] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.104] | :                   {
[08:05:31.104] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.104] | :                   }
[08:05:31.104] | :                 })
[08:05:31.104] | :             }
[08:05:31.104] | :         }
[08:05:31.104] | :     }, args = future.call.arguments)
[08:05:31.104] | : }
[08:05:31.104] | : Globals: 6 objects totaling 4.30 KiB (function ‘...future.FUN’ of 519 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:31.104] | : Packages: <none>
[08:05:31.104] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.104] | : Capture standard output: TRUE
[08:05:31.104] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.104] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.104] | : Lazy evaluation: FALSE
[08:05:31.104] | : Local evaluation: TRUE
[08:05:31.104] | : Asynchronous evaluation: TRUE
[08:05:31.104] | : Early signaling: FALSE
[08:05:31.104] | : Environment: R_GlobalEnv
[08:05:31.104] | : State: ‘finished’
[08:05:31.104] | : Resolved: TRUE
[08:05:31.104] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-15
[08:05:31.104] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.104] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:31.104] | : Value: 47 bytes of class ‘list’
[08:05:31.104] | : Duration: 0.002354145 secs (started 2025-06-17 08:05:31.101754)
[08:05:31.104] | : Worker process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.106] | : Chunk #1 of 1 ... DONE
[08:05:31.106] | : Launching 1 futures (chunks) ... DONE
[08:05:31.106] | : Resolving 1 futures (chunks) ...
[08:05:31.106] | :  - Number of value chunks collected: 1
[08:05:31.106] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.106] | : Reducing values from 1 chunks ...
[08:05:31.107] | :  - Number of values collected after concatenation: 1
[08:05:31.107] | :  - Number of values expected: 1
[08:05:31.107] | : Reducing values from 1 chunks ... DONE
[08:05:31.107] | future_lapply() -> future_xapply() ... done
[08:05:31.107] future_lapply() ... done
- future_lapply(..., future.globals = <list>) ...
[08:05:31.107] future_lapply() ...
[08:05:31.107] | Globals in FUN(): [n=1] ‘a’
[08:05:31.108] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.108] | future_lapply() -> future_xapply() ...
[08:05:31.108] | : Number of chunks: 1
[08:05:31.108] | : getGlobalsAndPackagesXApply() ...
[08:05:31.108] | : . future.globals: <name-value list> with names ‘a’
[08:05:31.108] | : . use_args: TRUE
[08:05:31.108] | : . Getting '...' globals ...
[08:05:31.109] | : . ' '...' content: [n=0] 
[08:05:31.109] | : . ' List of 1
[08:05:31.109] | : . '  $ ...: list()
[08:05:31.109] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.109] | : . '  - attr(*, "where")=List of 1
[08:05:31.109] | : . '   ..$ ...:<environment: 0x56342c1387b8> 
[08:05:31.109] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.109] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.109] | : . '  - attr(*, "total_size")= num NA
[08:05:31.111] | : . Getting '...' globals ... done
[08:05:31.112] | : . Globals to be used in all futures (chunks): [n=3] ‘a’, ‘...future.FUN’, ‘...’
[08:05:31.112] | : . List of 3
[08:05:31.112] | : .  $ a            : num 42
[08:05:31.112] | : .  $ ...future.FUN:function (x)  
[08:05:31.112] | : .  $ ...          : list()
[08:05:31.112] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.112] | : .  - attr(*, "where")=List of 3
[08:05:31.112] | : .   ..$ a            :<environment: R_EmptyEnv> 
[08:05:31.112] | : .   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[08:05:31.112] | : .   ..$ ...          :<environment: 0x56342c1387b8> 
[08:05:31.112] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.112] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.112] | : .  - attr(*, "total_size")= num NA
[08:05:31.115] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.115] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.115] | : Globals pass to each chunk: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.115] | : List of 6
[08:05:31.115] | :  $ a                        : num 42
[08:05:31.115] | :  $ ...future.FUN            :function (x)  
[08:05:31.115] | :  $ ...                      : list()
[08:05:31.115] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.115] | :  $ ...future.elements_ii    : NULL
[08:05:31.115] | :  $ ...future.seeds_ii       : NULL
[08:05:31.115] | :  $ ...future.globals.maxSize: NULL
[08:05:31.115] | :  - attr(*, "where")=List of 6
[08:05:31.115] | :   ..$ a                        :<environment: R_EmptyEnv> 
[08:05:31.115] | :   ..$ ...future.FUN            :<environment: R_GlobalEnv> 
[08:05:31.115] | :   ..$ ...                      :<environment: 0x56342c1387b8> 
[08:05:31.115] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.115] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.115] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.115] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.115] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.115] | :  - attr(*, "total_size")= num NA
[08:05:31.120] | : Number of futures (= number of chunks): 1
[08:05:31.120] | : Launching 1 futures (chunks) ...
[08:05:31.120] | : Chunk #1 of 1 ...
[08:05:31.120] | :  - seeds: <none>
[08:05:31.121] | :  - All globals exported: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.124] | : Created future:
[08:05:31.124] | : SequentialFuture:
[08:05:31.124] | : Label: ‘future_lapply-1’
[08:05:31.124] | : Expression:
[08:05:31.124] | : {
[08:05:31.124] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.124] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.124] | :     "# as a global variable                                         "
[08:05:31.124] | :     do.call(function(...) {
[08:05:31.124] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.124] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.124] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.124] | :         "# anonymous function.                                          "
[08:05:31.124] | :         "#                                                              "
[08:05:31.124] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.124] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.124] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.124] | :         "# global environment, which is where globals are written.      "
[08:05:31.124] | :         penv <- env <- environment(...future.FUN)
[08:05:31.124] | :         repeat {
[08:05:31.124] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.124] | :                 emptyenv())) 
[08:05:31.124] | :                 break
[08:05:31.124] | :             penv <- env
[08:05:31.124] | :             env <- parent.env(env)
[08:05:31.124] | :         }
[08:05:31.124] | :         if (identical(penv, globalenv())) {
[08:05:31.124] | :             environment(...future.FUN) <- environment()
[08:05:31.124] | :         }
[08:05:31.124] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.124] | :             !isNamespace(penv)) {
[08:05:31.124] | :             parent.env(penv) <- environment()
[08:05:31.124] | :         }
[08:05:31.124] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.124] | :         {
[08:05:31.124] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.124] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.124] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.124] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.124] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.124] | :             }
[08:05:31.124] | :             {
[08:05:31.124] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.124] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.124] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.124] | :                   {
[08:05:31.124] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.124] | :                   }
[08:05:31.124] | :                 })
[08:05:31.124] | :             }
[08:05:31.124] | :         }
[08:05:31.124] | :     }, args = future.call.arguments)
[08:05:31.124] | : }
[08:05:31.124] | : Globals: 6 objects totaling 4.16 KiB (function ‘...future.FUN’ of 298 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:31.124] | : Packages: <none>
[08:05:31.124] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.124] | : Capture standard output: TRUE
[08:05:31.124] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.124] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.124] | : Lazy evaluation: FALSE
[08:05:31.124] | : Local evaluation: TRUE
[08:05:31.124] | : Asynchronous evaluation: TRUE
[08:05:31.124] | : Early signaling: FALSE
[08:05:31.124] | : Environment: R_GlobalEnv
[08:05:31.124] | : State: ‘finished’
[08:05:31.124] | : Resolved: TRUE
[08:05:31.124] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-16
[08:05:31.124] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.124] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:31.124] | : Value: 47 bytes of class ‘list’
[08:05:31.124] | : Duration: 0.002317905 secs (started 2025-06-17 08:05:31.121952)
[08:05:31.124] | : Worker process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.126] | : Chunk #1 of 1 ... DONE
[08:05:31.126] | : Launching 1 futures (chunks) ... DONE
[08:05:31.126] | : Resolving 1 futures (chunks) ...
[08:05:31.126] | :  - Number of value chunks collected: 1
[08:05:31.126] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.127] | : Reducing values from 1 chunks ...
[08:05:31.127] | :  - Number of values collected after concatenation: 1
[08:05:31.127] | :  - Number of values expected: 1
[08:05:31.127] | : Reducing values from 1 chunks ... DONE
[08:05:31.127] | future_lapply() -> future_xapply() ... done
[08:05:31.127] future_lapply() ... done
List of 1
 $ : num 42
[08:05:31.133] future_lapply() ...
[08:05:31.134] | Globals in FUN(): [n=7] ‘{’, ‘do.call’, ‘caller’, ‘c’, ‘list’, ‘+’, ‘args’
[08:05:31.134] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.134] | future_lapply() -> future_xapply() ...
[08:05:31.136] | : Number of chunks: 2
[08:05:31.136] | : getGlobalsAndPackagesXApply() ...
[08:05:31.136] | : . future.globals: TRUE
[08:05:31.159] | : . globals found/used: [n=5] ‘FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’
[08:05:31.159] | : . needed namespaces: [n=0] 
[08:05:31.159] | : . use_args: TRUE
[08:05:31.160] | : . Getting '...' globals ...
[08:05:31.160] | : . ' '...' content: [n=0] 
[08:05:31.160] | : . ' List of 1
[08:05:31.160] | : . '  $ ...: list()
[08:05:31.160] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.160] | : . '  - attr(*, "where")=List of 1
[08:05:31.160] | : . '   ..$ ...:<environment: 0x56342c7509b0> 
[08:05:31.160] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.160] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.160] | : . '  - attr(*, "total_size")= num NA
[08:05:31.163] | : . Getting '...' globals ... done
[08:05:31.163] | : . Globals to be used in all futures (chunks): [n=6] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’
[08:05:31.163] | : . List of 6
[08:05:31.163] | : .  $ ...future.FUN:function (i)  
[08:05:31.163] | : .  $ caller       :function (a, b, FUN = call_my_add)  
[08:05:31.163] | : .  $ args         :List of 1
[08:05:31.163] | : .   ..$ FUN:function (a, b)  
[08:05:31.163] | : .  $ call_my_add  :function (a, b)  
[08:05:31.163] | : .  $ my_add       :function (a, b)  
[08:05:31.163] | : .  $ ...          : list()
[08:05:31.163] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.163] | : .  - attr(*, "where")=List of 6
[08:05:31.163] | : .   ..$ ...future.FUN:<environment: 0x56342c7509b0> 
[08:05:31.163] | : .   ..$ caller       :<environment: 0x56342df99d30> 
[08:05:31.163] | : .   ..$ args         :<environment: 0x56342df99d30> 
[08:05:31.163] | : .   ..$ call_my_add  :<environment: R_GlobalEnv> 
[08:05:31.163] | : .   ..$ my_add       :<environment: R_GlobalEnv> 
[08:05:31.163] | : .   ..$ ...          :<environment: 0x56342c7509b0> 
[08:05:31.163] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.163] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.163] | : .  - attr(*, "total_size")= num 13245
[08:05:31.168] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.168] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.168] | : Globals pass to each chunk: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.168] | : List of 9
[08:05:31.168] | :  $ ...future.FUN            :function (i)  
[08:05:31.168] | :  $ caller                   :function (a, b, FUN = call_my_add)  
[08:05:31.168] | :  $ args                     :List of 1
[08:05:31.168] | :   ..$ FUN:function (a, b)  
[08:05:31.168] | :  $ call_my_add              :function (a, b)  
[08:05:31.168] | :  $ my_add                   :function (a, b)  
[08:05:31.168] | :  $ ...                      : list()
[08:05:31.168] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.168] | :  $ ...future.elements_ii    : NULL
[08:05:31.168] | :  $ ...future.seeds_ii       : NULL
[08:05:31.168] | :  $ ...future.globals.maxSize: NULL
[08:05:31.168] | :  - attr(*, "where")=List of 9
[08:05:31.168] | :   ..$ ...future.FUN            :<environment: 0x56342c7509b0> 
[08:05:31.168] | :   ..$ caller                   :<environment: 0x56342df99d30> 
[08:05:31.168] | :   ..$ args                     :<environment: 0x56342df99d30> 
[08:05:31.168] | :   ..$ call_my_add              :<environment: R_GlobalEnv> 
[08:05:31.168] | :   ..$ my_add                   :<environment: R_GlobalEnv> 
[08:05:31.168] | :   ..$ ...                      :<environment: 0x56342c7509b0> 
[08:05:31.168] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.168] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.168] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.168] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.168] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.168] | :  - attr(*, "total_size")= num 13245
[08:05:31.174] | : Number of futures (= number of chunks): 2
[08:05:31.174] | : Launching 2 futures (chunks) ...
[08:05:31.175] | : Chunk #1 of 2 ...
[08:05:31.175] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.175] | :    + additional globals found: [n=0] 
[08:05:31.175] | :    + additional namespaces needed: [n=0] 
[08:05:31.175] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.175] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:31.176] | :  - seeds: <none>
[08:05:31.176] | :  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.182] | : Created future:
[08:05:31.183] | : MulticoreFuture:
[08:05:31.183] | : Label: ‘future_lapply-1’
[08:05:31.183] | : Expression:
[08:05:31.183] | : {
[08:05:31.183] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.183] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.183] | :     "# as a global variable                                         "
[08:05:31.183] | :     do.call(function(...) {
[08:05:31.183] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.183] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.183] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.183] | :         "# anonymous function.                                          "
[08:05:31.183] | :         "#                                                              "
[08:05:31.183] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.183] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.183] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.183] | :         "# global environment, which is where globals are written.      "
[08:05:31.183] | :         penv <- env <- environment(...future.FUN)
[08:05:31.183] | :         repeat {
[08:05:31.183] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.183] | :                 emptyenv())) 
[08:05:31.183] | :                 break
[08:05:31.183] | :             penv <- env
[08:05:31.183] | :             env <- parent.env(env)
[08:05:31.183] | :         }
[08:05:31.183] | :         if (identical(penv, globalenv())) {
[08:05:31.183] | :             environment(...future.FUN) <- environment()
[08:05:31.183] | :         }
[08:05:31.183] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.183] | :             !isNamespace(penv)) {
[08:05:31.183] | :             parent.env(penv) <- environment()
[08:05:31.183] | :         }
[08:05:31.183] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.183] | :         {
[08:05:31.183] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.183] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.183] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.183] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.183] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.183] | :             }
[08:05:31.183] | :             {
[08:05:31.183] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.183] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.183] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.183] | :                   {
[08:05:31.183] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.183] | :                   }
[08:05:31.183] | :                 })
[08:05:31.183] | :             }
[08:05:31.183] | :         }
[08:05:31.183] | :     }, args = future.call.arguments)
[08:05:31.183] | : }
[08:05:31.183] | : Globals: 9 objects totaling 10.71 KiB (function ‘...future.FUN’ of 3.30 KiB, list ‘args’ of 928 bytes, function ‘caller’ of 904 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 114 bytes, ...)
[08:05:31.183] | : Packages: <none>
[08:05:31.183] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.183] | : Capture standard output: TRUE
[08:05:31.183] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.183] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.183] | : Lazy evaluation: FALSE
[08:05:31.183] | : Local evaluation: TRUE
[08:05:31.183] | : Asynchronous evaluation: TRUE
[08:05:31.183] | : Early signaling: FALSE
[08:05:31.183] | : Environment: 0x56342df99d30
[08:05:31.183] | : State: ‘running’
[08:05:31.183] | : Resolved: TRUE
[08:05:31.183] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-17
[08:05:31.183] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.183] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.183] | : Value: <not collected>
[08:05:31.183] | : Conditions captured: <none>
[08:05:31.192] | : Chunk #1 of 2 ... DONE
[08:05:31.192] | : Chunk #2 of 2 ...
[08:05:31.192] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:31.193] | :    + additional globals found: [n=0] 
[08:05:31.193] | :    + additional namespaces needed: [n=0] 
[08:05:31.193] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:31.194] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:31.194] | :  - seeds: <none>
[08:05:31.194] | :  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.199] | : Created future:
[08:05:31.200] | : MulticoreFuture:
[08:05:31.200] | : Label: ‘future_lapply-2’
[08:05:31.200] | : Expression:
[08:05:31.200] | : {
[08:05:31.200] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.200] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.200] | :     "# as a global variable                                         "
[08:05:31.200] | :     do.call(function(...) {
[08:05:31.200] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.200] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.200] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.200] | :         "# anonymous function.                                          "
[08:05:31.200] | :         "#                                                              "
[08:05:31.200] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.200] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.200] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.200] | :         "# global environment, which is where globals are written.      "
[08:05:31.200] | :         penv <- env <- environment(...future.FUN)
[08:05:31.200] | :         repeat {
[08:05:31.200] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.200] | :                 emptyenv())) 
[08:05:31.200] | :                 break
[08:05:31.200] | :             penv <- env
[08:05:31.200] | :             env <- parent.env(env)
[08:05:31.200] | :         }
[08:05:31.200] | :         if (identical(penv, globalenv())) {
[08:05:31.200] | :             environment(...future.FUN) <- environment()
[08:05:31.200] | :         }
[08:05:31.200] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.200] | :             !isNamespace(penv)) {
[08:05:31.200] | :             parent.env(penv) <- environment()
[08:05:31.200] | :         }
[08:05:31.200] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.200] | :         {
[08:05:31.200] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.200] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.200] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.200] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.200] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.200] | :             }
[08:05:31.200] | :             {
[08:05:31.200] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.200] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.200] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.200] | :                   {
[08:05:31.200] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.200] | :                   }
[08:05:31.200] | :                 })
[08:05:31.200] | :             }
[08:05:31.200] | :         }
[08:05:31.200] | :     }, args = future.call.arguments)
[08:05:31.200] | : }
[08:05:31.200] | : Globals: 9 objects totaling 10.72 KiB (function ‘...future.FUN’ of 3.30 KiB, list ‘args’ of 928 bytes, function ‘caller’ of 904 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 114 bytes, ...)
[08:05:31.200] | : Packages: <none>
[08:05:31.200] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.200] | : Capture standard output: TRUE
[08:05:31.200] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.200] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.200] | : Lazy evaluation: FALSE
[08:05:31.200] | : Local evaluation: TRUE
[08:05:31.200] | : Asynchronous evaluation: TRUE
[08:05:31.200] | : Early signaling: FALSE
[08:05:31.200] | : Environment: 0x56342df99d30
[08:05:31.200] | : State: ‘running’
[08:05:31.200] | : Resolved: TRUE
[08:05:31.200] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-18
[08:05:31.200] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.200] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.200] | : Value: <not collected>
[08:05:31.200] | : Conditions captured: <none>
[08:05:31.208] | : Chunk #2 of 2 ... DONE
[08:05:31.208] | : Launching 2 futures (chunks) ... DONE
[08:05:31.209] | : Resolving 2 futures (chunks) ...
[08:05:31.214] | :  - Number of value chunks collected: 2
[08:05:31.214] | : Resolving 2 futures (chunks) ... DONE
[08:05:31.215] | : Reducing values from 2 chunks ...
[08:05:31.215] | :  - Number of values collected after concatenation: 3
[08:05:31.215] | :  - Number of values expected: 3
[08:05:31.215] | : Reducing values from 2 chunks ... DONE
[08:05:31.215] | future_lapply() -> future_xapply() ... done
[08:05:31.216] future_lapply() ... done
- future_lapply(x, FUN = do.call, ...) ...
[08:05:31.216] future_lapply() ...
[08:05:31.218] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:31.219] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.219] | future_lapply() -> future_xapply() ...
[08:05:31.219] | : Number of chunks: 1
[08:05:31.219] | : getGlobalsAndPackagesXApply() ...
[08:05:31.219] | : . future.globals: TRUE
[08:05:31.242] | : . globals found/used: [n=1] ‘FUN’
[08:05:31.242] | : . needed namespaces: [n=0] 
[08:05:31.242] | : . use_args: TRUE
[08:05:31.242] | : . Getting '...' globals ...
[08:05:31.243] | : . ' '...' content: [n=1] ‘what’
[08:05:31.243] | : . ' List of 1
[08:05:31.243] | : . '  $ ...:List of 1
[08:05:31.243] | : . '   ..$ what:function (x)  
[08:05:31.243] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.243] | : . '  - attr(*, "where")=List of 1
[08:05:31.243] | : . '   ..$ ...:<environment: 0x56342caf5b20> 
[08:05:31.243] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.243] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.243] | : . '  - attr(*, "total_size")= num NA
[08:05:31.246] | : . Getting '...' globals ... done
[08:05:31.247] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:31.247] | : . List of 2
[08:05:31.247] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:31.247] | : .  $ ...          :List of 1
[08:05:31.247] | : .   ..$ what:function (x)  
[08:05:31.247] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.247] | : .  - attr(*, "where")=List of 2
[08:05:31.247] | : .   ..$ ...future.FUN:<environment: 0x56342caf5b20> 
[08:05:31.247] | : .   ..$ ...          :<environment: 0x56342caf5b20> 
[08:05:31.247] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.247] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.247] | : .  - attr(*, "total_size")= num 7368
[08:05:31.250] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.251] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.251] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.251] | : List of 5
[08:05:31.251] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:31.251] | :  $ ...                      :List of 1
[08:05:31.251] | :   ..$ what:function (x)  
[08:05:31.251] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.251] | :  $ ...future.elements_ii    : NULL
[08:05:31.251] | :  $ ...future.seeds_ii       : NULL
[08:05:31.251] | :  $ ...future.globals.maxSize: NULL
[08:05:31.251] | :  - attr(*, "where")=List of 5
[08:05:31.251] | :   ..$ ...future.FUN            :<environment: 0x56342caf5b20> 
[08:05:31.251] | :   ..$ ...                      :<environment: 0x56342caf5b20> 
[08:05:31.251] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.251] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.251] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.251] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.251] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.251] | :  - attr(*, "total_size")= num 7368
[08:05:31.261] | : Number of futures (= number of chunks): 1
[08:05:31.262] | : Launching 1 futures (chunks) ...
[08:05:31.262] | : Chunk #1 of 1 ...
[08:05:31.262] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.263] | :    + additional globals found: [n=0] 
[08:05:31.263] | :    + additional namespaces needed: [n=0] 
[08:05:31.263] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.263] | :  - seeds: <none>
[08:05:31.263] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.266] | : Created future:
[08:05:31.267] | : MulticoreFuture:
[08:05:31.267] | : Label: ‘future_lapply-1’
[08:05:31.267] | : Expression:
[08:05:31.267] | : {
[08:05:31.267] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.267] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.267] | :     "# as a global variable                                         "
[08:05:31.267] | :     do.call(function(...) {
[08:05:31.267] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:31.267] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.267] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.267] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.267] | :             on.exit(options(oopts), add = TRUE)
[08:05:31.267] | :         }
[08:05:31.267] | :         {
[08:05:31.267] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.267] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.267] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.267] | :                 {
[08:05:31.267] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:31.267] | :                 }
[08:05:31.267] | :             })
[08:05:31.267] | :         }
[08:05:31.267] | :     }, args = future.call.arguments)
[08:05:31.267] | : }
[08:05:31.267] | : Globals: 5 objects totaling 7.38 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:31.267] | : Packages: <none>
[08:05:31.267] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.267] | : Capture standard output: TRUE
[08:05:31.267] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.267] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.267] | : Lazy evaluation: FALSE
[08:05:31.267] | : Local evaluation: TRUE
[08:05:31.267] | : Asynchronous evaluation: TRUE
[08:05:31.267] | : Early signaling: FALSE
[08:05:31.267] | : Environment: R_GlobalEnv
[08:05:31.267] | : State: ‘running’
[08:05:31.267] | : Resolved: TRUE
[08:05:31.267] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-19
[08:05:31.267] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.267] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.267] | : Value: <not collected>
[08:05:31.267] | : Conditions captured: <none>
[08:05:31.275] | : Chunk #1 of 1 ... DONE
[08:05:31.275] | : Launching 1 futures (chunks) ... DONE
[08:05:31.275] | : Resolving 1 futures (chunks) ...
[08:05:31.277] | :  - Number of value chunks collected: 1
[08:05:31.277] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.278] | : Reducing values from 1 chunks ...
[08:05:31.278] | :  - Number of values collected after concatenation: 1
[08:05:31.278] | :  - Number of values expected: 1
[08:05:31.278] | : Reducing values from 1 chunks ... DONE
[08:05:31.278] | future_lapply() -> future_xapply() ... done
[08:05:31.278] future_lapply() ... done
[08:05:31.278] future_lapply() ...
[08:05:31.281] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:31.281] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.281] | future_lapply() -> future_xapply() ...
[08:05:31.281] | : Number of chunks: 1
[08:05:31.281] | : getGlobalsAndPackagesXApply() ...
[08:05:31.282] | : . future.globals: TRUE
[08:05:31.306] | : . globals found/used: [n=1] ‘FUN’
[08:05:31.306] | : . needed namespaces: [n=0] 
[08:05:31.306] | : . use_args: TRUE
[08:05:31.306] | : . Getting '...' globals ...
[08:05:31.307] | : . ' '...' content: [n=1] ‘what’
[08:05:31.307] | : . ' List of 1
[08:05:31.307] | : . '  $ ...:List of 1
[08:05:31.307] | : . '   ..$ what:function (...)  
[08:05:31.307] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.307] | : . '  - attr(*, "where")=List of 1
[08:05:31.307] | : . '   ..$ ...:<environment: 0x56342d16d608> 
[08:05:31.307] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.307] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.307] | : . '  - attr(*, "total_size")= num NA
[08:05:31.311] | : . Getting '...' globals ... done
[08:05:31.311] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:31.311] | : . List of 2
[08:05:31.311] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:31.311] | : .  $ ...          :List of 1
[08:05:31.311] | : .   ..$ what:function (...)  
[08:05:31.311] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.311] | : .  - attr(*, "where")=List of 2
[08:05:31.311] | : .   ..$ ...future.FUN:<environment: 0x56342d16d608> 
[08:05:31.311] | : .   ..$ ...          :<environment: 0x56342d16d608> 
[08:05:31.311] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.311] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.311] | : .  - attr(*, "total_size")= num 7804
[08:05:31.315] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.315] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.315] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.315] | : List of 5
[08:05:31.315] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:31.315] | :  $ ...                      :List of 1
[08:05:31.315] | :   ..$ what:function (...)  
[08:05:31.315] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.315] | :  $ ...future.elements_ii    : NULL
[08:05:31.315] | :  $ ...future.seeds_ii       : NULL
[08:05:31.315] | :  $ ...future.globals.maxSize: NULL
[08:05:31.315] | :  - attr(*, "where")=List of 5
[08:05:31.315] | :   ..$ ...future.FUN            :<environment: 0x56342d16d608> 
[08:05:31.315] | :   ..$ ...                      :<environment: 0x56342d16d608> 
[08:05:31.315] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.315] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.315] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.315] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.315] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.315] | :  - attr(*, "total_size")= num 7804
[08:05:31.321] | : Number of futures (= number of chunks): 1
[08:05:31.323] | : Launching 1 futures (chunks) ...
[08:05:31.323] | : Chunk #1 of 1 ...
[08:05:31.323] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.324] | :    + additional globals found: [n=0] 
[08:05:31.324] | :    + additional namespaces needed: [n=0] 
[08:05:31.324] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.324] | :  - seeds: <none>
[08:05:31.324] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.328] | : Created future:
[08:05:31.328] | : MulticoreFuture:
[08:05:31.328] | : Label: ‘future_lapply-1’
[08:05:31.328] | : Expression:
[08:05:31.328] | : {
[08:05:31.328] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.328] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.328] | :     "# as a global variable                                         "
[08:05:31.328] | :     do.call(function(...) {
[08:05:31.328] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:31.328] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.328] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.328] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.328] | :             on.exit(options(oopts), add = TRUE)
[08:05:31.328] | :         }
[08:05:31.328] | :         {
[08:05:31.328] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.328] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.328] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.328] | :                 {
[08:05:31.328] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:31.328] | :                 }
[08:05:31.328] | :             })
[08:05:31.328] | :         }
[08:05:31.328] | :     }, args = future.call.arguments)
[08:05:31.328] | : }
[08:05:31.328] | : Globals: 5 objects totaling 7.80 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 388 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:31.328] | : Packages: <none>
[08:05:31.328] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.328] | : Capture standard output: TRUE
[08:05:31.328] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.328] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.328] | : Lazy evaluation: FALSE
[08:05:31.328] | : Local evaluation: TRUE
[08:05:31.328] | : Asynchronous evaluation: TRUE
[08:05:31.328] | : Early signaling: FALSE
[08:05:31.328] | : Environment: R_GlobalEnv
[08:05:31.328] | : State: ‘running’
[08:05:31.328] | : Resolved: TRUE
[08:05:31.328] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-20
[08:05:31.328] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.328] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.328] | : Value: <not collected>
[08:05:31.328] | : Conditions captured: <none>
[08:05:31.337] | : Chunk #1 of 1 ... DONE
[08:05:31.337] | : Launching 1 futures (chunks) ... DONE
[08:05:31.337] | : Resolving 1 futures (chunks) ...
[08:05:31.339] | :  - Number of value chunks collected: 1
[08:05:31.339] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.339] | : Reducing values from 1 chunks ...
[08:05:31.339] | :  - Number of values collected after concatenation: 1
[08:05:31.340] | :  - Number of values expected: 1
[08:05:31.340] | : Reducing values from 1 chunks ... DONE
[08:05:31.340] | future_lapply() -> future_xapply() ... done
[08:05:31.340] future_lapply() ... done
- future_lapply(x, ...) - passing arguments via '...' ...
[08:05:31.340] future_lapply() ...
[08:05:31.341] | Globals in FUN(): [n=1] ‘typeof’
[08:05:31.341] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.342] | future_lapply() -> future_xapply() ...
[08:05:31.342] | : Number of chunks: 1
[08:05:31.342] | : getGlobalsAndPackagesXApply() ...
[08:05:31.342] | : . future.globals: TRUE
[08:05:31.350] | : . globals found/used: [n=1] ‘FUN’
[08:05:31.350] | : . needed namespaces: [n=0] 
[08:05:31.350] | : . use_args: TRUE
[08:05:31.350] | : . Getting '...' globals ...
[08:05:31.351] | : . ' '...' content: [n=1] ‘b’
[08:05:31.351] | : . ' List of 1
[08:05:31.351] | : . '  $ ...:List of 1
[08:05:31.351] | : . '   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:31.351] | : . '   .. ..$ a: int [1:2] 1 2
[08:05:31.351] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.351] | : . '  - attr(*, "where")=List of 1
[08:05:31.351] | : . '   ..$ ...:<environment: 0x56342d31aa80> 
[08:05:31.351] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.351] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.351] | : . '  - attr(*, "total_size")= num NA
[08:05:31.355] | : . Getting '...' globals ... done
[08:05:31.356] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:31.356] | : . List of 2
[08:05:31.356] | : .  $ ...future.FUN:function (a, b)  
[08:05:31.356] | : .  $ ...          :List of 1
[08:05:31.356] | : .   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:31.356] | : .   .. ..$ a: int [1:2] 1 2
[08:05:31.356] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.356] | : .  - attr(*, "where")=List of 2
[08:05:31.356] | : .   ..$ ...future.FUN:<environment: 0x56342d31aa80> 
[08:05:31.356] | : .   ..$ ...          :<environment: 0x56342d31aa80> 
[08:05:31.356] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.356] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.356] | : .  - attr(*, "total_size")= num 4505
[08:05:31.360] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.360] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.360] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.361] | : List of 5
[08:05:31.361] | :  $ ...future.FUN            :function (a, b)  
[08:05:31.361] | :  $ ...                      :List of 1
[08:05:31.361] | :   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:31.361] | :   .. ..$ a: int [1:2] 1 2
[08:05:31.361] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.361] | :  $ ...future.elements_ii    : NULL
[08:05:31.361] | :  $ ...future.seeds_ii       : NULL
[08:05:31.361] | :  $ ...future.globals.maxSize: NULL
[08:05:31.361] | :  - attr(*, "where")=List of 5
[08:05:31.361] | :   ..$ ...future.FUN            :<environment: 0x56342d31aa80> 
[08:05:31.361] | :   ..$ ...                      :<environment: 0x56342d31aa80> 
[08:05:31.361] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.361] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.361] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.361] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.361] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.361] | :  - attr(*, "total_size")= num 4505
[08:05:31.367] | : Number of futures (= number of chunks): 1
[08:05:31.367] | : Launching 1 futures (chunks) ...
[08:05:31.367] | : Chunk #1 of 1 ...
[08:05:31.367] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.368] | :    + additional globals found: [n=0] 
[08:05:31.368] | :    + additional namespaces needed: [n=0] 
[08:05:31.368] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.368] | :  - seeds: <none>
[08:05:31.368] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.372] | : Created future:
[08:05:31.372] | : MulticoreFuture:
[08:05:31.372] | : Label: ‘future_lapply-1’
[08:05:31.372] | : Expression:
[08:05:31.372] | : {
[08:05:31.372] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.372] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.372] | :     "# as a global variable                                         "
[08:05:31.372] | :     do.call(function(...) {
[08:05:31.372] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.372] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.372] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.372] | :         "# anonymous function.                                          "
[08:05:31.372] | :         "#                                                              "
[08:05:31.372] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.372] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.372] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.372] | :         "# global environment, which is where globals are written.      "
[08:05:31.372] | :         penv <- env <- environment(...future.FUN)
[08:05:31.372] | :         repeat {
[08:05:31.372] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.372] | :                 emptyenv())) 
[08:05:31.372] | :                 break
[08:05:31.372] | :             penv <- env
[08:05:31.372] | :             env <- parent.env(env)
[08:05:31.372] | :         }
[08:05:31.372] | :         if (identical(penv, globalenv())) {
[08:05:31.372] | :             environment(...future.FUN) <- environment()
[08:05:31.372] | :         }
[08:05:31.372] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.372] | :             !isNamespace(penv)) {
[08:05:31.372] | :             parent.env(penv) <- environment()
[08:05:31.372] | :         }
[08:05:31.372] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.372] | :         {
[08:05:31.372] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.372] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.372] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.372] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.372] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.372] | :             }
[08:05:31.372] | :             {
[08:05:31.372] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.372] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.372] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.372] | :                   {
[08:05:31.372] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.372] | :                   }
[08:05:31.372] | :                 })
[08:05:31.372] | :             }
[08:05:31.372] | :         }
[08:05:31.372] | :     }, args = future.call.arguments)
[08:05:31.372] | : }
[08:05:31.372] | : Globals: 5 objects totaling 4.67 KiB (DotDotDotList ‘future.call.arguments’ of 357 bytes, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:31.372] | : Packages: <none>
[08:05:31.372] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.372] | : Capture standard output: TRUE
[08:05:31.372] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.372] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.372] | : Lazy evaluation: FALSE
[08:05:31.372] | : Local evaluation: TRUE
[08:05:31.372] | : Asynchronous evaluation: TRUE
[08:05:31.372] | : Early signaling: FALSE
[08:05:31.372] | : Environment: R_GlobalEnv
[08:05:31.372] | : State: ‘running’
[08:05:31.372] | : Resolved: TRUE
[08:05:31.372] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-21
[08:05:31.372] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.372] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.372] | : Value: <not collected>
[08:05:31.372] | : Conditions captured: <none>
[08:05:31.381] | : Chunk #1 of 1 ... DONE
[08:05:31.381] | : Launching 1 futures (chunks) ... DONE
[08:05:31.381] | : Resolving 1 futures (chunks) ...
[08:05:31.383] | :  - Number of value chunks collected: 1
[08:05:31.383] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.384] | : Reducing values from 1 chunks ...
[08:05:31.384] | :  - Number of values collected after concatenation: 1
[08:05:31.384] | :  - Number of values expected: 1
[08:05:31.384] | : Reducing values from 1 chunks ... DONE
[08:05:31.384] | future_lapply() -> future_xapply() ... done
[08:05:31.384] future_lapply() ... done
[08:05:31.384] future_lapply() ...
[08:05:31.385] | Globals in FUN(): [n=1] ‘typeof’
[08:05:31.385] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.386] | future_lapply() -> future_xapply() ...
[08:05:31.386] | : Number of chunks: 1
[08:05:31.386] | : getGlobalsAndPackagesXApply() ...
[08:05:31.386] | : . future.globals: TRUE
[08:05:31.394] | : . globals found/used: [n=1] ‘FUN’
[08:05:31.394] | : . needed namespaces: [n=0] 
[08:05:31.394] | : . use_args: TRUE
[08:05:31.394] | : . Getting '...' globals ...
[08:05:31.395] | : . ' '...' content: [n=1] ‘b’
[08:05:31.395] | : . ' List of 1
[08:05:31.395] | : . '  $ ...:List of 1
[08:05:31.395] | : . '   ..$ b:<environment: 0x56342d191c30> 
[08:05:31.395] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.395] | : . '  - attr(*, "where")=List of 1
[08:05:31.395] | : . '   ..$ ...:<environment: 0x56342d191178> 
[08:05:31.395] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.395] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.395] | : . '  - attr(*, "total_size")= num NA
[08:05:31.399] | : . Getting '...' globals ... done
[08:05:31.399] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:31.399] | : . List of 2
[08:05:31.399] | : .  $ ...future.FUN:function (a, b)  
[08:05:31.399] | : .  $ ...          :List of 1
[08:05:31.399] | : .   ..$ b:<environment: 0x56342d191c30> 
[08:05:31.399] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.399] | : .  - attr(*, "where")=List of 2
[08:05:31.399] | : .   ..$ ...future.FUN:<environment: 0x56342d191178> 
[08:05:31.399] | : .   ..$ ...          :<environment: 0x56342d191178> 
[08:05:31.399] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.399] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.399] | : .  - attr(*, "total_size")= num 4260
[08:05:31.406] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.406] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.407] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.407] | : List of 5
[08:05:31.407] | :  $ ...future.FUN            :function (a, b)  
[08:05:31.407] | :  $ ...                      :List of 1
[08:05:31.407] | :   ..$ b:<environment: 0x56342d191c30> 
[08:05:31.407] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.407] | :  $ ...future.elements_ii    : NULL
[08:05:31.407] | :  $ ...future.seeds_ii       : NULL
[08:05:31.407] | :  $ ...future.globals.maxSize: NULL
[08:05:31.407] | :  - attr(*, "where")=List of 5
[08:05:31.407] | :   ..$ ...future.FUN            :<environment: 0x56342d191178> 
[08:05:31.407] | :   ..$ ...                      :<environment: 0x56342d191178> 
[08:05:31.407] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.407] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.407] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.407] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.407] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.407] | :  - attr(*, "total_size")= num 4260
[08:05:31.412] | : Number of futures (= number of chunks): 1
[08:05:31.412] | : Launching 1 futures (chunks) ...
[08:05:31.412] | : Chunk #1 of 1 ...
[08:05:31.412] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.413] | :    + additional globals found: [n=0] 
[08:05:31.413] | :    + additional namespaces needed: [n=0] 
[08:05:31.413] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.413] | :  - seeds: <none>
[08:05:31.413] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.417] | : Created future:
[08:05:31.417] | : MulticoreFuture:
[08:05:31.417] | : Label: ‘future_lapply-1’
[08:05:31.417] | : Expression:
[08:05:31.417] | : {
[08:05:31.417] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.417] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.417] | :     "# as a global variable                                         "
[08:05:31.417] | :     do.call(function(...) {
[08:05:31.417] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.417] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.417] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.417] | :         "# anonymous function.                                          "
[08:05:31.417] | :         "#                                                              "
[08:05:31.417] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.417] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.417] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.417] | :         "# global environment, which is where globals are written.      "
[08:05:31.417] | :         penv <- env <- environment(...future.FUN)
[08:05:31.417] | :         repeat {
[08:05:31.417] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.417] | :                 emptyenv())) 
[08:05:31.417] | :                 break
[08:05:31.417] | :             penv <- env
[08:05:31.417] | :             env <- parent.env(env)
[08:05:31.417] | :         }
[08:05:31.417] | :         if (identical(penv, globalenv())) {
[08:05:31.417] | :             environment(...future.FUN) <- environment()
[08:05:31.417] | :         }
[08:05:31.417] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.417] | :             !isNamespace(penv)) {
[08:05:31.417] | :             parent.env(penv) <- environment()
[08:05:31.417] | :         }
[08:05:31.417] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.417] | :         {
[08:05:31.417] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.417] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.417] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.417] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.417] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.417] | :             }
[08:05:31.417] | :             {
[08:05:31.417] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.417] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.417] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.417] | :                   {
[08:05:31.417] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.417] | :                   }
[08:05:31.417] | :                 })
[08:05:31.417] | :             }
[08:05:31.417] | :         }
[08:05:31.417] | :     }, args = future.call.arguments)
[08:05:31.417] | : }
[08:05:31.417] | : Globals: 5 objects totaling 4.43 KiB (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 279 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:31.417] | : Packages: <none>
[08:05:31.417] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.417] | : Capture standard output: TRUE
[08:05:31.417] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.417] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.417] | : Lazy evaluation: FALSE
[08:05:31.417] | : Local evaluation: TRUE
[08:05:31.417] | : Asynchronous evaluation: TRUE
[08:05:31.417] | : Early signaling: FALSE
[08:05:31.417] | : Environment: R_GlobalEnv
[08:05:31.417] | : State: ‘running’
[08:05:31.417] | : Resolved: TRUE
[08:05:31.417] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-22
[08:05:31.417] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.417] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.417] | : Value: <not collected>
[08:05:31.417] | : Conditions captured: <none>
[08:05:31.425] | : Chunk #1 of 1 ... DONE
[08:05:31.425] | : Launching 1 futures (chunks) ... DONE
[08:05:31.425] | : Resolving 1 futures (chunks) ...
[08:05:31.427] | :  - Number of value chunks collected: 1
[08:05:31.428] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.428] | : Reducing values from 1 chunks ...
[08:05:31.428] | :  - Number of values collected after concatenation: 1
[08:05:31.428] | :  - Number of values expected: 1
[08:05:31.428] | : Reducing values from 1 chunks ... DONE
[08:05:31.428] | future_lapply() -> future_xapply() ... done
[08:05:31.428] future_lapply() ... done
[08:05:31.429] future_lapply() ...
[08:05:31.429] | Globals in FUN(): [n=1] ‘typeof’
[08:05:31.429] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.430] | future_lapply() -> future_xapply() ...
[08:05:31.430] | : Number of chunks: 1
[08:05:31.430] | : getGlobalsAndPackagesXApply() ...
[08:05:31.430] | : . future.globals: TRUE
[08:05:31.438] | : . globals found/used: [n=1] ‘FUN’
[08:05:31.438] | : . needed namespaces: [n=0] 
[08:05:31.439] | : . use_args: TRUE
[08:05:31.439] | : . Getting '...' globals ...
[08:05:31.439] | : . ' '...' content: [n=1] ‘b’
[08:05:31.439] | : . ' List of 1
[08:05:31.439] | : . '  $ ...:List of 1
[08:05:31.439] | : . '   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:31.439] | : . '   .. .. ..@ slots     :List of 4
[08:05:31.439] | : . '   .. .. .. ..$ .Data  : chr "function"
[08:05:31.439] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. ..$ target : chr "signature"
[08:05:31.439] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. ..$ defined: chr "signature"
[08:05:31.439] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. ..$ generic: chr "character"
[08:05:31.439] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. ..@ contains  :List of 4
[08:05:31.439] | : . '   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.439] | : . '   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.439] | : . '   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.439] | : . '   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 3
[08:05:31.439] | : . '   .. .. ..@ virtual   : logi FALSE
[08:05:31.439] | : . '   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:31.439] | : . '  list()
[08:05:31.439] | : . '   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:31.439] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:31.439] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:31.439] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:31.439] | : . '   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:31.439] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:31.439] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:31.439] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:31.439] | : . '   .. .. .. .. ..$ generic: chr(0) 
[08:05:31.439] | : . '   .. .. ..@ validity  : NULL
[08:05:31.439] | : . '   .. .. ..@ access    : list()
[08:05:31.439] | : . '   .. .. ..@ className : chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. ..@ subclasses:List of 7
[08:05:31.439] | : . '   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.439] | : . '   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.439] | : . '   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.439] | : . '   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.439] | : . '   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.439] | : . '   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.439] | : . '   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.439] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.439] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:31.439] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.439] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.439] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.439] | : . '   .. .. ..@ versionKey:<externalptr> 
[08:05:31.439] | : . '   .. .. ..@ sealed    : logi TRUE
[08:05:31.439] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.439] | : . '  - attr(*, "where")=List of 1
[08:05:31.439] | : . '   ..$ ...:<environment: 0x56342c53f838> 
[08:05:31.439] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.439] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.439] | : . '  - attr(*, "total_size")= num NA
[08:05:31.502] | : . Getting '...' globals ... done
[08:05:31.502] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:31.502] | : . List of 2
[08:05:31.502] | : .  $ ...future.FUN:function (a, b)  
[08:05:31.502] | : .  $ ...          :List of 1
[08:05:31.502] | : .   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:31.502] | : .   .. .. ..@ slots     :List of 4
[08:05:31.502] | : .   .. .. .. ..$ .Data  : chr "function"
[08:05:31.502] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. ..$ target : chr "signature"
[08:05:31.502] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. ..$ defined: chr "signature"
[08:05:31.502] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. ..$ generic: chr "character"
[08:05:31.502] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. ..@ contains  :List of 4
[08:05:31.502] | : .   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.502] | : .   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.502] | : .   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.502] | : .   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 3
[08:05:31.502] | : .   .. .. ..@ virtual   : logi FALSE
[08:05:31.502] | : .   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:31.502] | : .  list()
[08:05:31.502] | : .   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:31.502] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:31.502] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:31.502] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:31.502] | : .   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:31.502] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:31.502] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:31.502] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:31.502] | : .   .. .. .. .. ..$ generic: chr(0) 
[08:05:31.502] | : .   .. .. ..@ validity  : NULL
[08:05:31.502] | : .   .. .. ..@ access    : list()
[08:05:31.502] | : .   .. .. ..@ className : chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. ..@ subclasses:List of 7
[08:05:31.502] | : .   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.502] | : .   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.502] | : .   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.502] | : .   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.502] | : .   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.502] | : .   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.502] | : .   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.502] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.502] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.502] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:31.502] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.502] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.502] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.502] | : .   .. .. ..@ versionKey:<externalptr> 
[08:05:31.502] | : .   .. .. ..@ sealed    : logi TRUE
[08:05:31.502] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.502] | : .  - attr(*, "where")=List of 2
[08:05:31.502] | : .   ..$ ...future.FUN:<environment: 0x56342c53f838> 
[08:05:31.502] | : .   ..$ ...          :<environment: 0x56342c53f838> 
[08:05:31.502] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.502] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.502] | : .  - attr(*, "total_size")= num 106127
[08:05:31.559] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.559] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.560] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.560] | : List of 5
[08:05:31.560] | :  $ ...future.FUN            :function (a, b)  
[08:05:31.560] | :  $ ...                      :List of 1
[08:05:31.560] | :   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:31.560] | :   .. .. ..@ slots     :List of 4
[08:05:31.560] | :   .. .. .. ..$ .Data  : chr "function"
[08:05:31.560] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. ..$ target : chr "signature"
[08:05:31.560] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. ..$ defined: chr "signature"
[08:05:31.560] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. ..$ generic: chr "character"
[08:05:31.560] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. ..@ contains  :List of 4
[08:05:31.560] | :   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.560] | :   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.560] | :   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.560] | :   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 3
[08:05:31.560] | :   .. .. ..@ virtual   : logi FALSE
[08:05:31.560] | :   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:31.560] | :  list()
[08:05:31.560] | :   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:31.560] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:31.560] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:31.560] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:31.560] | :   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:31.560] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:31.560] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:31.560] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:31.560] | :   .. .. .. .. ..$ generic: chr(0) 
[08:05:31.560] | :   .. .. ..@ validity  : NULL
[08:05:31.560] | :   .. .. ..@ access    : list()
[08:05:31.560] | :   .. .. ..@ className : chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. ..@ subclasses:List of 7
[08:05:31.560] | :   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.560] | :   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.560] | :   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.560] | :   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:31.560] | :   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.560] | :   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.560] | :   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:31.560] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:31.560] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:31.560] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:31.560] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:31.560] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:31.560] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:31.560] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:31.560] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:31.560] | :   .. .. ..@ versionKey:<externalptr> 
[08:05:31.560] | :   .. .. ..@ sealed    : logi TRUE
[08:05:31.560] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.560] | :  $ ...future.elements_ii    : NULL
[08:05:31.560] | :  $ ...future.seeds_ii       : NULL
[08:05:31.560] | :  $ ...future.globals.maxSize: NULL
[08:05:31.560] | :  - attr(*, "where")=List of 5
[08:05:31.560] | :   ..$ ...future.FUN            :<environment: 0x56342c53f838> 
[08:05:31.560] | :   ..$ ...                      :<environment: 0x56342c53f838> 
[08:05:31.560] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.560] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.560] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.560] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.560] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.560] | :  - attr(*, "total_size")= num 106127
[08:05:31.615] | : Number of futures (= number of chunks): 1
[08:05:31.615] | : Launching 1 futures (chunks) ...
[08:05:31.616] | : Chunk #1 of 1 ...
[08:05:31.616] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.616] | :    + additional globals found: [n=0] 
[08:05:31.616] | :    + additional namespaces needed: [n=0] 
[08:05:31.616] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.616] | :  - seeds: <none>
[08:05:31.617] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.620] | : Created future:
[08:05:31.621] | : MulticoreFuture:
[08:05:31.621] | : Label: ‘future_lapply-1’
[08:05:31.621] | : Expression:
[08:05:31.621] | : {
[08:05:31.621] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.621] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.621] | :     "# as a global variable                                         "
[08:05:31.621] | :     do.call(function(...) {
[08:05:31.621] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.621] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.621] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.621] | :         "# anonymous function.                                          "
[08:05:31.621] | :         "#                                                              "
[08:05:31.621] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.621] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.621] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.621] | :         "# global environment, which is where globals are written.      "
[08:05:31.621] | :         penv <- env <- environment(...future.FUN)
[08:05:31.621] | :         repeat {
[08:05:31.621] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.621] | :                 emptyenv())) 
[08:05:31.621] | :                 break
[08:05:31.621] | :             penv <- env
[08:05:31.621] | :             env <- parent.env(env)
[08:05:31.621] | :         }
[08:05:31.621] | :         if (identical(penv, globalenv())) {
[08:05:31.621] | :             environment(...future.FUN) <- environment()
[08:05:31.621] | :         }
[08:05:31.621] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.621] | :             !isNamespace(penv)) {
[08:05:31.621] | :             parent.env(penv) <- environment()
[08:05:31.621] | :         }
[08:05:31.621] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.621] | :         {
[08:05:31.621] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.621] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.621] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.621] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.621] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.621] | :             }
[08:05:31.621] | :             {
[08:05:31.621] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.621] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.621] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.621] | :                   {
[08:05:31.621] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.621] | :                   }
[08:05:31.621] | :                 })
[08:05:31.621] | :             }
[08:05:31.621] | :         }
[08:05:31.621] | :     }, args = future.call.arguments)
[08:05:31.621] | : }
[08:05:31.621] | : Globals: 5 objects totaling 103.91 KiB (DotDotDotList ‘future.call.arguments’ of 50.30 KiB, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:31.621] | : Packages: <none>
[08:05:31.621] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.621] | : Capture standard output: TRUE
[08:05:31.621] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.621] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.621] | : Lazy evaluation: FALSE
[08:05:31.621] | : Local evaluation: TRUE
[08:05:31.621] | : Asynchronous evaluation: TRUE
[08:05:31.621] | : Early signaling: FALSE
[08:05:31.621] | : Environment: R_GlobalEnv
[08:05:31.621] | : State: ‘running’
[08:05:31.621] | : Resolved: TRUE
[08:05:31.621] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-23
[08:05:31.621] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.621] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.621] | : Value: <not collected>
[08:05:31.621] | : Conditions captured: <none>
[08:05:31.629] | : Chunk #1 of 1 ... DONE
[08:05:31.629] | : Launching 1 futures (chunks) ... DONE
[08:05:31.629] | : Resolving 1 futures (chunks) ...
[08:05:31.631] | :  - Number of value chunks collected: 1
[08:05:31.631] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.631] | : Reducing values from 1 chunks ...
[08:05:31.631] | :  - Number of values collected after concatenation: 1
[08:05:31.632] | :  - Number of values expected: 1
[08:05:31.632] | : Reducing values from 1 chunks ... DONE
[08:05:31.632] | future_lapply() -> future_xapply() ... done
[08:05:31.632] future_lapply() ... done
- future_lapply(X, ...) - 'X' containing globals ...
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
[08:05:31.635] future_lapply() ...
[08:05:31.636] | Globals in FUN(): [n=0] 
[08:05:31.636] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.636] | future_lapply() -> future_xapply() ...
[08:05:31.637] | : Number of chunks: 2
[08:05:31.637] | : getGlobalsAndPackagesXApply() ...
[08:05:31.637] | : . future.globals: TRUE
[08:05:31.641] | : . globals found/used: [n=1] ‘FUN’
[08:05:31.641] | : . needed namespaces: [n=0] 
[08:05:31.642] | : . use_args: TRUE
[08:05:31.642] | : . Getting '...' globals ...
[08:05:31.645] | : . ' '...' content: [n=0] 
[08:05:31.645] | : . ' List of 1
[08:05:31.645] | : . '  $ ...: list()
[08:05:31.645] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.645] | : . '  - attr(*, "where")=List of 1
[08:05:31.645] | : . '   ..$ ...:<environment: 0x56342e3e2248> 
[08:05:31.645] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.645] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.645] | : . '  - attr(*, "total_size")= num NA
[08:05:31.649] | : . Getting '...' globals ... done
[08:05:31.649] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:31.649] | : . List of 2
[08:05:31.649] | : .  $ ...future.FUN:function (f)  
[08:05:31.649] | : .  $ ...          : list()
[08:05:31.649] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.649] | : .  - attr(*, "where")=List of 2
[08:05:31.649] | : .   ..$ ...future.FUN:<environment: 0x56342e3e2248> 
[08:05:31.649] | : .   ..$ ...          :<environment: 0x56342e3e2248> 
[08:05:31.649] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.649] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.649] | : .  - attr(*, "total_size")= num 5165
[08:05:31.652] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.652] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.653] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.653] | : List of 5
[08:05:31.653] | :  $ ...future.FUN            :function (f)  
[08:05:31.653] | :  $ ...                      : list()
[08:05:31.653] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.653] | :  $ ...future.elements_ii    : NULL
[08:05:31.653] | :  $ ...future.seeds_ii       : NULL
[08:05:31.653] | :  $ ...future.globals.maxSize: NULL
[08:05:31.653] | :  - attr(*, "where")=List of 5
[08:05:31.653] | :   ..$ ...future.FUN            :<environment: 0x56342e3e2248> 
[08:05:31.653] | :   ..$ ...                      :<environment: 0x56342e3e2248> 
[08:05:31.653] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.653] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.653] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.653] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.653] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.653] | :  - attr(*, "total_size")= num 5165
[08:05:31.657] | : Number of futures (= number of chunks): 2
[08:05:31.658] | : Launching 2 futures (chunks) ...
[08:05:31.658] | : Chunk #1 of 2 ...
[08:05:31.658] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.670] | :    + additional globals found: [n=2] ‘a’, ‘b’
[08:05:31.670] | :    + additional namespaces needed: [n=0] 
[08:05:31.671] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.671] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:31.671] | :  - seeds: <none>
[08:05:31.671] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[08:05:31.674] | : Created future:
[08:05:31.675] | : MulticoreFuture:
[08:05:31.675] | : Label: ‘future_lapply-1’
[08:05:31.675] | : Expression:
[08:05:31.675] | : {
[08:05:31.675] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.675] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.675] | :     "# as a global variable                                         "
[08:05:31.675] | :     do.call(function(...) {
[08:05:31.675] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.675] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.675] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.675] | :         "# anonymous function.                                          "
[08:05:31.675] | :         "#                                                              "
[08:05:31.675] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.675] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.675] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.675] | :         "# global environment, which is where globals are written.      "
[08:05:31.675] | :         penv <- env <- environment(...future.FUN)
[08:05:31.675] | :         repeat {
[08:05:31.675] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.675] | :                 emptyenv())) 
[08:05:31.675] | :                 break
[08:05:31.675] | :             penv <- env
[08:05:31.675] | :             env <- parent.env(env)
[08:05:31.675] | :         }
[08:05:31.675] | :         if (identical(penv, globalenv())) {
[08:05:31.675] | :             environment(...future.FUN) <- environment()
[08:05:31.675] | :         }
[08:05:31.675] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.675] | :             !isNamespace(penv)) {
[08:05:31.675] | :             parent.env(penv) <- environment()
[08:05:31.675] | :         }
[08:05:31.675] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.675] | :         {
[08:05:31.675] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.675] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.675] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.675] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.675] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.675] | :             }
[08:05:31.675] | :             {
[08:05:31.675] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.675] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.675] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.675] | :                   {
[08:05:31.675] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.675] | :                   }
[08:05:31.675] | :                 })
[08:05:31.675] | :             }
[08:05:31.675] | :         }
[08:05:31.675] | :     }, args = future.call.arguments)
[08:05:31.675] | : }
[08:05:31.675] | : Globals: 7 objects totaling 5.90 KiB (list ‘...future.elements_ii’ of 588 bytes, function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:31.675] | : Packages: <none>
[08:05:31.675] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.675] | : Capture standard output: TRUE
[08:05:31.675] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.675] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.675] | : Lazy evaluation: FALSE
[08:05:31.675] | : Local evaluation: TRUE
[08:05:31.675] | : Asynchronous evaluation: TRUE
[08:05:31.675] | : Early signaling: FALSE
[08:05:31.675] | : Environment: R_GlobalEnv
[08:05:31.675] | : State: ‘running’
[08:05:31.675] | : Resolved: TRUE
[08:05:31.675] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-24
[08:05:31.675] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.675] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.675] | : Value: <not collected>
[08:05:31.675] | : Conditions captured: <none>
[08:05:31.683] | : Chunk #1 of 2 ... DONE
[08:05:31.684] | : Chunk #2 of 2 ...
[08:05:31.684] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:31.702] | :    + additional globals found: [n=2] ‘a’, ‘b’
[08:05:31.702] | :    + additional namespaces needed: [n=1] ‘tools’
[08:05:31.702] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:31.702] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:31.703] | :  - seeds: <none>
[08:05:31.703] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[08:05:31.707] | : Created future:
[08:05:31.707] | : MulticoreFuture:
[08:05:31.707] | : Label: ‘future_lapply-2’
[08:05:31.707] | : Expression:
[08:05:31.707] | : {
[08:05:31.707] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.707] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.707] | :     "# as a global variable                                         "
[08:05:31.707] | :     do.call(function(...) {
[08:05:31.707] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.707] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.707] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.707] | :         "# anonymous function.                                          "
[08:05:31.707] | :         "#                                                              "
[08:05:31.707] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.707] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.707] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.707] | :         "# global environment, which is where globals are written.      "
[08:05:31.707] | :         penv <- env <- environment(...future.FUN)
[08:05:31.707] | :         repeat {
[08:05:31.707] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.707] | :                 emptyenv())) 
[08:05:31.707] | :                 break
[08:05:31.707] | :             penv <- env
[08:05:31.707] | :             env <- parent.env(env)
[08:05:31.707] | :         }
[08:05:31.707] | :         if (identical(penv, globalenv())) {
[08:05:31.707] | :             environment(...future.FUN) <- environment()
[08:05:31.707] | :         }
[08:05:31.707] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.707] | :             !isNamespace(penv)) {
[08:05:31.707] | :             parent.env(penv) <- environment()
[08:05:31.707] | :         }
[08:05:31.707] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.707] | :         {
[08:05:31.707] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.707] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.707] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.707] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.707] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.707] | :             }
[08:05:31.707] | :             {
[08:05:31.707] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.707] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.707] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.707] | :                   {
[08:05:31.707] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.707] | :                   }
[08:05:31.707] | :                 })
[08:05:31.707] | :             }
[08:05:31.707] | :         }
[08:05:31.707] | :     }, args = future.call.arguments)
[08:05:31.707] | : }
[08:05:31.707] | : Globals: 7 objects totaling 6.18 KiB (list ‘...future.elements_ii’ of 903 bytes, function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:31.707] | : Packages: 1 packages (‘tools’)
[08:05:31.707] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.707] | : Capture standard output: TRUE
[08:05:31.707] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.707] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.707] | : Lazy evaluation: FALSE
[08:05:31.707] | : Local evaluation: TRUE
[08:05:31.707] | : Asynchronous evaluation: TRUE
[08:05:31.707] | : Early signaling: FALSE
[08:05:31.707] | : Environment: R_GlobalEnv
[08:05:31.707] | : State: ‘running’
[08:05:31.707] | : Resolved: FALSE
[08:05:31.707] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-25
[08:05:31.707] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.707] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.707] | : Value: <not collected>
[08:05:31.707] | : Conditions captured: <none>
[08:05:31.720] | : Chunk #2 of 2 ... DONE
[08:05:31.721] | : Launching 2 futures (chunks) ... DONE
[08:05:31.721] | : Resolving 2 futures (chunks) ...
[08:05:31.727] | :  - Number of value chunks collected: 2
[08:05:31.727] | : Resolving 2 futures (chunks) ... DONE
[08:05:31.727] | : Reducing values from 2 chunks ...
[08:05:31.727] | :  - Number of values collected after concatenation: 4
[08:05:31.727] | :  - Number of values expected: 4
[08:05:31.728] | : Reducing values from 2 chunks ... DONE
[08:05:31.728] | future_lapply() -> future_xapply() ... done
[08:05:31.728] future_lapply() ... done
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
- future_lapply(X, ...) - '{ a <- a + 1; a }' ...
[08:05:31.731] future_lapply() ...
[08:05:31.732] | Globals in FUN(): [n=4] ‘{’, ‘<-’, ‘a’, ‘+’
[08:05:31.732] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.732] | future_lapply() -> future_xapply() ...
[08:05:31.732] | : Number of chunks: 1
[08:05:31.733] | : getGlobalsAndPackagesXApply() ...
[08:05:31.733] | : . future.globals: TRUE
[08:05:31.742] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:31.742] | : . needed namespaces: [n=0] 
[08:05:31.742] | : . use_args: TRUE
[08:05:31.742] | : . Getting '...' globals ...
[08:05:31.743] | : . ' '...' content: [n=0] 
[08:05:31.743] | : . ' List of 1
[08:05:31.743] | : . '  $ ...: list()
[08:05:31.743] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.743] | : . '  - attr(*, "where")=List of 1
[08:05:31.743] | : . '   ..$ ...:<environment: 0x56342e2dd328> 
[08:05:31.743] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.743] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.743] | : . '  - attr(*, "total_size")= num NA
[08:05:31.746] | : . Getting '...' globals ... done
[08:05:31.746] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:31.746] | : . List of 3
[08:05:31.746] | : .  $ ...future.FUN:function (ii)  
[08:05:31.746] | : .  $ a            : num 1
[08:05:31.746] | : .  $ ...          : list()
[08:05:31.746] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.746] | : .  - attr(*, "where")=List of 3
[08:05:31.746] | : .   ..$ ...future.FUN:<environment: 0x56342e2dd328> 
[08:05:31.746] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:31.746] | : .   ..$ ...          :<environment: 0x56342e2dd328> 
[08:05:31.746] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.746] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.746] | : .  - attr(*, "total_size")= num 4124
[08:05:31.750] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.751] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.751] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.751] | : List of 6
[08:05:31.751] | :  $ ...future.FUN            :function (ii)  
[08:05:31.751] | :  $ a                        : num 1
[08:05:31.751] | :  $ ...                      : list()
[08:05:31.751] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.751] | :  $ ...future.elements_ii    : NULL
[08:05:31.751] | :  $ ...future.seeds_ii       : NULL
[08:05:31.751] | :  $ ...future.globals.maxSize: NULL
[08:05:31.751] | :  - attr(*, "where")=List of 6
[08:05:31.751] | :   ..$ ...future.FUN            :<environment: 0x56342e2dd328> 
[08:05:31.751] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:31.751] | :   ..$ ...                      :<environment: 0x56342e2dd328> 
[08:05:31.751] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.751] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.751] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.751] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.751] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.751] | :  - attr(*, "total_size")= num 4124
[08:05:31.757] | : Number of futures (= number of chunks): 1
[08:05:31.757] | : Launching 1 futures (chunks) ...
[08:05:31.757] | : Chunk #1 of 1 ...
[08:05:31.757] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.758] | :    + additional globals found: [n=0] 
[08:05:31.758] | :    + additional namespaces needed: [n=0] 
[08:05:31.758] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.758] | :  - seeds: <none>
[08:05:31.758] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.762] | : Created future:
[08:05:31.762] | : MulticoreFuture:
[08:05:31.762] | : Label: ‘future_lapply-1’
[08:05:31.762] | : Expression:
[08:05:31.762] | : {
[08:05:31.762] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.762] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.762] | :     "# as a global variable                                         "
[08:05:31.762] | :     do.call(function(...) {
[08:05:31.762] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.762] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.762] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.762] | :         "# anonymous function.                                          "
[08:05:31.762] | :         "#                                                              "
[08:05:31.762] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.762] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.762] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.762] | :         "# global environment, which is where globals are written.      "
[08:05:31.762] | :         penv <- env <- environment(...future.FUN)
[08:05:31.762] | :         repeat {
[08:05:31.762] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.762] | :                 emptyenv())) 
[08:05:31.762] | :                 break
[08:05:31.762] | :             penv <- env
[08:05:31.762] | :             env <- parent.env(env)
[08:05:31.762] | :         }
[08:05:31.762] | :         if (identical(penv, globalenv())) {
[08:05:31.762] | :             environment(...future.FUN) <- environment()
[08:05:31.762] | :         }
[08:05:31.762] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.762] | :             !isNamespace(penv)) {
[08:05:31.762] | :             parent.env(penv) <- environment()
[08:05:31.762] | :         }
[08:05:31.762] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.762] | :         {
[08:05:31.762] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.762] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.762] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.762] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.762] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.762] | :             }
[08:05:31.762] | :             {
[08:05:31.762] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.762] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.762] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.762] | :                   {
[08:05:31.762] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.762] | :                   }
[08:05:31.762] | :                 })
[08:05:31.762] | :             }
[08:05:31.762] | :         }
[08:05:31.762] | :     }, args = future.call.arguments)
[08:05:31.762] | : }
[08:05:31.762] | : Globals: 6 objects totaling 4.29 KiB (function ‘...future.FUN’ of 511 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:31.762] | : Packages: <none>
[08:05:31.762] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.762] | : Capture standard output: TRUE
[08:05:31.762] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.762] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.762] | : Lazy evaluation: FALSE
[08:05:31.762] | : Local evaluation: TRUE
[08:05:31.762] | : Asynchronous evaluation: TRUE
[08:05:31.762] | : Early signaling: FALSE
[08:05:31.762] | : Environment: R_GlobalEnv
[08:05:31.762] | : State: ‘running’
[08:05:31.762] | : Resolved: TRUE
[08:05:31.762] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-26
[08:05:31.762] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.762] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.762] | : Value: <not collected>
[08:05:31.762] | : Conditions captured: <none>
[08:05:31.771] | : Chunk #1 of 1 ... DONE
[08:05:31.771] | : Launching 1 futures (chunks) ... DONE
[08:05:31.771] | : Resolving 1 futures (chunks) ...
[08:05:31.773] | :  - Number of value chunks collected: 1
[08:05:31.773] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.773] | : Reducing values from 1 chunks ...
[08:05:31.773] | :  - Number of values collected after concatenation: 1
[08:05:31.773] | :  - Number of values expected: 1
[08:05:31.774] | : Reducing values from 1 chunks ... DONE
[08:05:31.774] | future_lapply() -> future_xapply() ... done
[08:05:31.774] future_lapply() ... done
- future_lapply(X, ...) - '{ a; a <- a + 1 }' ...
[08:05:31.774] future_lapply() ...
[08:05:31.775] | Globals in FUN(): [n=4] ‘{’, ‘a’, ‘<-’, ‘+’
[08:05:31.776] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.776] | future_lapply() -> future_xapply() ...
[08:05:31.776] | : Number of chunks: 1
[08:05:31.776] | : getGlobalsAndPackagesXApply() ...
[08:05:31.776] | : . future.globals: TRUE
[08:05:31.788] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:31.788] | : . needed namespaces: [n=0] 
[08:05:31.788] | : . use_args: TRUE
[08:05:31.788] | : . Getting '...' globals ...
[08:05:31.789] | : . ' '...' content: [n=0] 
[08:05:31.789] | : . ' List of 1
[08:05:31.789] | : . '  $ ...: list()
[08:05:31.789] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.789] | : . '  - attr(*, "where")=List of 1
[08:05:31.789] | : . '   ..$ ...:<environment: 0x56342cc59ce0> 
[08:05:31.789] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.789] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.789] | : . '  - attr(*, "total_size")= num NA
[08:05:31.796] | : . Getting '...' globals ... done
[08:05:31.797] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:31.797] | : . List of 3
[08:05:31.797] | : .  $ ...future.FUN:function (ii)  
[08:05:31.797] | : .  $ a            : num 1
[08:05:31.797] | : .  $ ...          : list()
[08:05:31.797] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.797] | : .  - attr(*, "where")=List of 3
[08:05:31.797] | : .   ..$ ...future.FUN:<environment: 0x56342cc59ce0> 
[08:05:31.797] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:31.797] | : .   ..$ ...          :<environment: 0x56342cc59ce0> 
[08:05:31.797] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.797] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.797] | : .  - attr(*, "total_size")= num 4140
[08:05:31.801] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.801] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.801] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.801] | : List of 6
[08:05:31.801] | :  $ ...future.FUN            :function (ii)  
[08:05:31.801] | :  $ a                        : num 1
[08:05:31.801] | :  $ ...                      : list()
[08:05:31.801] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.801] | :  $ ...future.elements_ii    : NULL
[08:05:31.801] | :  $ ...future.seeds_ii       : NULL
[08:05:31.801] | :  $ ...future.globals.maxSize: NULL
[08:05:31.801] | :  - attr(*, "where")=List of 6
[08:05:31.801] | :   ..$ ...future.FUN            :<environment: 0x56342cc59ce0> 
[08:05:31.801] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:31.801] | :   ..$ ...                      :<environment: 0x56342cc59ce0> 
[08:05:31.801] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.801] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.801] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.801] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.801] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.801] | :  - attr(*, "total_size")= num 4140
[08:05:31.807] | : Number of futures (= number of chunks): 1
[08:05:31.807] | : Launching 1 futures (chunks) ...
[08:05:31.807] | : Chunk #1 of 1 ...
[08:05:31.807] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:31.808] | :    + additional globals found: [n=0] 
[08:05:31.808] | :    + additional namespaces needed: [n=0] 
[08:05:31.808] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:31.808] | :  - seeds: <none>
[08:05:31.808] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.812] | : Created future:
[08:05:31.813] | : MulticoreFuture:
[08:05:31.813] | : Label: ‘future_lapply-1’
[08:05:31.813] | : Expression:
[08:05:31.813] | : {
[08:05:31.813] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.813] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.813] | :     "# as a global variable                                         "
[08:05:31.813] | :     do.call(function(...) {
[08:05:31.813] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.813] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.813] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.813] | :         "# anonymous function.                                          "
[08:05:31.813] | :         "#                                                              "
[08:05:31.813] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.813] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.813] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.813] | :         "# global environment, which is where globals are written.      "
[08:05:31.813] | :         penv <- env <- environment(...future.FUN)
[08:05:31.813] | :         repeat {
[08:05:31.813] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.813] | :                 emptyenv())) 
[08:05:31.813] | :                 break
[08:05:31.813] | :             penv <- env
[08:05:31.813] | :             env <- parent.env(env)
[08:05:31.813] | :         }
[08:05:31.813] | :         if (identical(penv, globalenv())) {
[08:05:31.813] | :             environment(...future.FUN) <- environment()
[08:05:31.813] | :         }
[08:05:31.813] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.813] | :             !isNamespace(penv)) {
[08:05:31.813] | :             parent.env(penv) <- environment()
[08:05:31.813] | :         }
[08:05:31.813] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.813] | :         {
[08:05:31.813] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.813] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.813] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.813] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.813] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.813] | :             }
[08:05:31.813] | :             {
[08:05:31.813] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.813] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.813] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.813] | :                   {
[08:05:31.813] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.813] | :                   }
[08:05:31.813] | :                 })
[08:05:31.813] | :             }
[08:05:31.813] | :         }
[08:05:31.813] | :     }, args = future.call.arguments)
[08:05:31.813] | : }
[08:05:31.813] | : Globals: 6 objects totaling 4.30 KiB (function ‘...future.FUN’ of 519 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:31.813] | : Packages: <none>
[08:05:31.813] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.813] | : Capture standard output: TRUE
[08:05:31.813] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.813] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.813] | : Lazy evaluation: FALSE
[08:05:31.813] | : Local evaluation: TRUE
[08:05:31.813] | : Asynchronous evaluation: TRUE
[08:05:31.813] | : Early signaling: FALSE
[08:05:31.813] | : Environment: R_GlobalEnv
[08:05:31.813] | : State: ‘running’
[08:05:31.813] | : Resolved: TRUE
[08:05:31.813] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-27
[08:05:31.813] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.813] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.813] | : Value: <not collected>
[08:05:31.813] | : Conditions captured: <none>
[08:05:31.821] | : Chunk #1 of 1 ... DONE
[08:05:31.822] | : Launching 1 futures (chunks) ... DONE
[08:05:31.822] | : Resolving 1 futures (chunks) ...
[08:05:31.824] | :  - Number of value chunks collected: 1
[08:05:31.824] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.824] | : Reducing values from 1 chunks ...
[08:05:31.824] | :  - Number of values collected after concatenation: 1
[08:05:31.824] | :  - Number of values expected: 1
[08:05:31.825] | : Reducing values from 1 chunks ... DONE
[08:05:31.825] | future_lapply() -> future_xapply() ... done
[08:05:31.825] future_lapply() ... done
- future_lapply(..., future.globals = <list>) ...
[08:05:31.825] future_lapply() ...
[08:05:31.826] | Globals in FUN(): [n=1] ‘a’
[08:05:31.826] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:31.826] | future_lapply() -> future_xapply() ...
[08:05:31.826] | : Number of chunks: 1
[08:05:31.827] | : getGlobalsAndPackagesXApply() ...
[08:05:31.827] | : . future.globals: <name-value list> with names ‘a’
[08:05:31.827] | : . use_args: TRUE
[08:05:31.827] | : . Getting '...' globals ...
[08:05:31.828] | : . ' '...' content: [n=0] 
[08:05:31.828] | : . ' List of 1
[08:05:31.828] | : . '  $ ...: list()
[08:05:31.828] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.828] | : . '  - attr(*, "where")=List of 1
[08:05:31.828] | : . '   ..$ ...:<environment: 0x56342c121970> 
[08:05:31.828] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.828] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:31.828] | : . '  - attr(*, "total_size")= num NA
[08:05:31.831] | : . Getting '...' globals ... done
[08:05:31.832] | : . Globals to be used in all futures (chunks): [n=3] ‘a’, ‘...future.FUN’, ‘...’
[08:05:31.832] | : . List of 3
[08:05:31.832] | : .  $ a            : num 42
[08:05:31.832] | : .  $ ...future.FUN:function (x)  
[08:05:31.832] | : .  $ ...          : list()
[08:05:31.832] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.832] | : .  - attr(*, "where")=List of 3
[08:05:31.832] | : .   ..$ a            :<environment: R_EmptyEnv> 
[08:05:31.832] | : .   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[08:05:31.832] | : .   ..$ ...          :<environment: 0x56342c121970> 
[08:05:31.832] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.832] | : .  - attr(*, "resolved")= logi FALSE
[08:05:31.832] | : .  - attr(*, "total_size")= num NA
[08:05:31.836] | : . Packages to be attached in all futures: [n=0] 
[08:05:31.836] | : getGlobalsAndPackagesXApply() ... done
[08:05:31.837] | : Globals pass to each chunk: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.837] | : List of 6
[08:05:31.837] | :  $ a                        : num 42
[08:05:31.837] | :  $ ...future.FUN            :function (x)  
[08:05:31.837] | :  $ ...                      : list()
[08:05:31.837] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:31.837] | :  $ ...future.elements_ii    : NULL
[08:05:31.837] | :  $ ...future.seeds_ii       : NULL
[08:05:31.837] | :  $ ...future.globals.maxSize: NULL
[08:05:31.837] | :  - attr(*, "where")=List of 6
[08:05:31.837] | :   ..$ a                        :<environment: R_EmptyEnv> 
[08:05:31.837] | :   ..$ ...future.FUN            :<environment: R_GlobalEnv> 
[08:05:31.837] | :   ..$ ...                      :<environment: 0x56342c121970> 
[08:05:31.837] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:31.837] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:31.837] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:31.837] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:31.837] | :  - attr(*, "resolved")= logi FALSE
[08:05:31.837] | :  - attr(*, "total_size")= num NA
[08:05:31.843] | : Number of futures (= number of chunks): 1
[08:05:31.843] | : Launching 1 futures (chunks) ...
[08:05:31.843] | : Chunk #1 of 1 ...
[08:05:31.843] | :  - seeds: <none>
[08:05:31.843] | :  - All globals exported: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:31.848] | : Created future:
[08:05:31.848] | : MulticoreFuture:
[08:05:31.848] | : Label: ‘future_lapply-1’
[08:05:31.848] | : Expression:
[08:05:31.848] | : {
[08:05:31.848] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:31.848] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:31.848] | :     "# as a global variable                                         "
[08:05:31.848] | :     do.call(function(...) {
[08:05:31.848] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:31.848] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:31.848] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:31.848] | :         "# anonymous function.                                          "
[08:05:31.848] | :         "#                                                              "
[08:05:31.848] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:31.848] | :         "# function environment of FUN() to the calling environment.    "
[08:05:31.848] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:31.848] | :         "# global environment, which is where globals are written.      "
[08:05:31.848] | :         penv <- env <- environment(...future.FUN)
[08:05:31.848] | :         repeat {
[08:05:31.848] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:31.848] | :                 emptyenv())) 
[08:05:31.848] | :                 break
[08:05:31.848] | :             penv <- env
[08:05:31.848] | :             env <- parent.env(env)
[08:05:31.848] | :         }
[08:05:31.848] | :         if (identical(penv, globalenv())) {
[08:05:31.848] | :             environment(...future.FUN) <- environment()
[08:05:31.848] | :         }
[08:05:31.848] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:31.848] | :             !isNamespace(penv)) {
[08:05:31.848] | :             parent.env(penv) <- environment()
[08:05:31.848] | :         }
[08:05:31.848] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:31.848] | :         {
[08:05:31.848] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:31.848] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:31.848] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:31.848] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:31.848] | :                 on.exit(options(oopts), add = TRUE)
[08:05:31.848] | :             }
[08:05:31.848] | :             {
[08:05:31.848] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:31.848] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:31.848] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:31.848] | :                   {
[08:05:31.848] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:31.848] | :                   }
[08:05:31.848] | :                 })
[08:05:31.848] | :             }
[08:05:31.848] | :         }
[08:05:31.848] | :     }, args = future.call.arguments)
[08:05:31.848] | : }
[08:05:31.848] | : Globals: 6 objects totaling 4.16 KiB (function ‘...future.FUN’ of 298 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:31.848] | : Packages: <none>
[08:05:31.848] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:31.848] | : Capture standard output: TRUE
[08:05:31.848] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:31.848] | : Immediate condition classes: ‘immediateCondition’
[08:05:31.848] | : Lazy evaluation: FALSE
[08:05:31.848] | : Local evaluation: TRUE
[08:05:31.848] | : Asynchronous evaluation: TRUE
[08:05:31.848] | : Early signaling: FALSE
[08:05:31.848] | : Environment: R_GlobalEnv
[08:05:31.848] | : State: ‘running’
[08:05:31.848] | : Resolved: TRUE
[08:05:31.848] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-28
[08:05:31.848] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:31.848] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:31.848] | : Value: <not collected>
[08:05:31.848] | : Conditions captured: <none>
[08:05:31.857] | : Chunk #1 of 1 ... DONE
[08:05:31.857] | : Launching 1 futures (chunks) ... DONE
[08:05:31.857] | : Resolving 1 futures (chunks) ...
[08:05:31.859] | :  - Number of value chunks collected: 1
[08:05:31.860] | : Resolving 1 futures (chunks) ... DONE
[08:05:31.860] | : Reducing values from 1 chunks ...
[08:05:31.860] | :  - Number of values collected after concatenation: 1
[08:05:31.860] | :  - Number of values expected: 1
[08:05:31.860] | : Reducing values from 1 chunks ... DONE
[08:05:31.860] | future_lapply() -> future_xapply() ... done
[08:05:31.860] future_lapply() ... done
List of 1
 $ : num 42
[08:05:32.140] future_lapply() ...
[08:05:32.141] | Globals in FUN(): [n=7] ‘{’, ‘do.call’, ‘caller’, ‘c’, ‘list’, ‘+’, ‘args’
[08:05:32.141] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:32.141] | future_lapply() -> future_xapply() ...
[08:05:32.142] | : Number of chunks: 2
[08:05:32.142] | : getGlobalsAndPackagesXApply() ...
[08:05:32.145] | : . future.globals: TRUE
[08:05:32.172] | : . globals found/used: [n=5] ‘FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’
[08:05:32.172] | : . needed namespaces: [n=0] 
[08:05:32.172] | : . use_args: TRUE
[08:05:32.172] | : . Getting '...' globals ...
[08:05:32.173] | : . ' '...' content: [n=0] 
[08:05:32.173] | : . ' List of 1
[08:05:32.173] | : . '  $ ...: list()
[08:05:32.173] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.173] | : . '  - attr(*, "where")=List of 1
[08:05:32.173] | : . '   ..$ ...:<environment: 0x56342dc20e20> 
[08:05:32.173] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.173] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:32.173] | : . '  - attr(*, "total_size")= num NA
[08:05:32.176] | : . Getting '...' globals ... done
[08:05:32.176] | : . Globals to be used in all futures (chunks): [n=6] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’
[08:05:32.176] | : . List of 6
[08:05:32.176] | : .  $ ...future.FUN:function (i)  
[08:05:32.176] | : .  $ caller       :function (a, b, FUN = call_my_add)  
[08:05:32.176] | : .  $ args         :List of 1
[08:05:32.176] | : .   ..$ FUN:function (a, b)  
[08:05:32.176] | : .  $ call_my_add  :function (a, b)  
[08:05:32.176] | : .  $ my_add       :function (a, b)  
[08:05:32.176] | : .  $ ...          : list()
[08:05:32.176] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.176] | : .  - attr(*, "where")=List of 6
[08:05:32.176] | : .   ..$ ...future.FUN:<environment: 0x56342dc20e20> 
[08:05:32.176] | : .   ..$ caller       :<environment: 0x56342dc21248> 
[08:05:32.176] | : .   ..$ args         :<environment: 0x56342dc21248> 
[08:05:32.176] | : .   ..$ call_my_add  :<environment: R_GlobalEnv> 
[08:05:32.176] | : .   ..$ my_add       :<environment: R_GlobalEnv> 
[08:05:32.176] | : .   ..$ ...          :<environment: 0x56342dc20e20> 
[08:05:32.176] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.176] | : .  - attr(*, "resolved")= logi FALSE
[08:05:32.176] | : .  - attr(*, "total_size")= num 13245
[08:05:32.181] | : . Packages to be attached in all futures: [n=0] 
[08:05:32.181] | : getGlobalsAndPackagesXApply() ... done
[08:05:32.181] | : Globals pass to each chunk: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:32.182] | : List of 9
[08:05:32.182] | :  $ ...future.FUN            :function (i)  
[08:05:32.182] | :  $ caller                   :function (a, b, FUN = call_my_add)  
[08:05:32.182] | :  $ args                     :List of 1
[08:05:32.182] | :   ..$ FUN:function (a, b)  
[08:05:32.182] | :  $ call_my_add              :function (a, b)  
[08:05:32.182] | :  $ my_add                   :function (a, b)  
[08:05:32.182] | :  $ ...                      : list()
[08:05:32.182] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.182] | :  $ ...future.elements_ii    : NULL
[08:05:32.182] | :  $ ...future.seeds_ii       : NULL
[08:05:32.182] | :  $ ...future.globals.maxSize: NULL
[08:05:32.182] | :  - attr(*, "where")=List of 9
[08:05:32.182] | :   ..$ ...future.FUN            :<environment: 0x56342dc20e20> 
[08:05:32.182] | :   ..$ caller                   :<environment: 0x56342dc21248> 
[08:05:32.182] | :   ..$ args                     :<environment: 0x56342dc21248> 
[08:05:32.182] | :   ..$ call_my_add              :<environment: R_GlobalEnv> 
[08:05:32.182] | :   ..$ my_add                   :<environment: R_GlobalEnv> 
[08:05:32.182] | :   ..$ ...                      :<environment: 0x56342dc20e20> 
[08:05:32.182] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:32.182] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:32.182] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:32.182] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.182] | :  - attr(*, "resolved")= logi FALSE
[08:05:32.182] | :  - attr(*, "total_size")= num 13245
[08:05:32.190] | : Number of futures (= number of chunks): 2
[08:05:32.190] | : Launching 2 futures (chunks) ...
[08:05:32.190] | : Chunk #1 of 2 ...
[08:05:32.191] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:32.191] | :    + additional globals found: [n=0] 
[08:05:32.191] | :    + additional namespaces needed: [n=0] 
[08:05:32.191] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:32.191] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:32.191] | :  - seeds: <none>
[08:05:32.192] | :  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:32.267] | : Created future:
[08:05:32.267] | : MultisessionFuture:
[08:05:32.267] | : Label: ‘future_lapply-1’
[08:05:32.267] | : Expression:
[08:05:32.267] | : {
[08:05:32.267] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:32.267] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:32.267] | :     "# as a global variable                                         "
[08:05:32.267] | :     do.call(function(...) {
[08:05:32.267] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:32.267] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:32.267] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:32.267] | :         "# anonymous function.                                          "
[08:05:32.267] | :         "#                                                              "
[08:05:32.267] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:32.267] | :         "# function environment of FUN() to the calling environment.    "
[08:05:32.267] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:32.267] | :         "# global environment, which is where globals are written.      "
[08:05:32.267] | :         penv <- env <- environment(...future.FUN)
[08:05:32.267] | :         repeat {
[08:05:32.267] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:32.267] | :                 emptyenv())) 
[08:05:32.267] | :                 break
[08:05:32.267] | :             penv <- env
[08:05:32.267] | :             env <- parent.env(env)
[08:05:32.267] | :         }
[08:05:32.267] | :         if (identical(penv, globalenv())) {
[08:05:32.267] | :             environment(...future.FUN) <- environment()
[08:05:32.267] | :         }
[08:05:32.267] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:32.267] | :             !isNamespace(penv)) {
[08:05:32.267] | :             parent.env(penv) <- environment()
[08:05:32.267] | :         }
[08:05:32.267] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:32.267] | :         {
[08:05:32.267] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:32.267] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:32.267] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:32.267] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:32.267] | :                 on.exit(options(oopts), add = TRUE)
[08:05:32.267] | :             }
[08:05:32.267] | :             {
[08:05:32.267] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:32.267] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:32.267] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:32.267] | :                   {
[08:05:32.267] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:32.267] | :                   }
[08:05:32.267] | :                 })
[08:05:32.267] | :             }
[08:05:32.267] | :         }
[08:05:32.267] | :     }, args = future.call.arguments)
[08:05:32.267] | : }
[08:05:32.267] | : Globals: 9 objects totaling 10.71 KiB (function ‘...future.FUN’ of 3.30 KiB, list ‘args’ of 928 bytes, function ‘caller’ of 904 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 114 bytes, ...)
[08:05:32.267] | : Packages: <none>
[08:05:32.267] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:32.267] | : Capture standard output: TRUE
[08:05:32.267] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:32.267] | : Immediate condition classes: ‘immediateCondition’
[08:05:32.267] | : Lazy evaluation: FALSE
[08:05:32.267] | : Local evaluation: TRUE
[08:05:32.267] | : Asynchronous evaluation: TRUE
[08:05:32.267] | : Early signaling: FALSE
[08:05:32.267] | : Environment: 0x56342dc21248
[08:05:32.267] | : State: ‘running’
[08:05:32.267] | : Resolved: FALSE
[08:05:32.267] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-29
[08:05:32.267] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:32.267] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:32.267] | : Value: <not collected>
[08:05:32.267] | : Conditions captured: <none>
[08:05:32.279] | : Chunk #1 of 2 ... DONE
[08:05:32.280] | : Chunk #2 of 2 ...
[08:05:32.280] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:32.280] | :    + additional globals found: [n=0] 
[08:05:32.280] | :    + additional namespaces needed: [n=0] 
[08:05:32.280] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:32.280] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:32.281] | :  - seeds: <none>
[08:05:32.281] | :  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:32.360] | : Created future:
[08:05:32.360] | : MultisessionFuture:
[08:05:32.360] | : Label: ‘future_lapply-2’
[08:05:32.360] | : Expression:
[08:05:32.360] | : {
[08:05:32.360] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:32.360] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:32.360] | :     "# as a global variable                                         "
[08:05:32.360] | :     do.call(function(...) {
[08:05:32.360] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:32.360] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:32.360] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:32.360] | :         "# anonymous function.                                          "
[08:05:32.360] | :         "#                                                              "
[08:05:32.360] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:32.360] | :         "# function environment of FUN() to the calling environment.    "
[08:05:32.360] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:32.360] | :         "# global environment, which is where globals are written.      "
[08:05:32.360] | :         penv <- env <- environment(...future.FUN)
[08:05:32.360] | :         repeat {
[08:05:32.360] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:32.360] | :                 emptyenv())) 
[08:05:32.360] | :                 break
[08:05:32.360] | :             penv <- env
[08:05:32.360] | :             env <- parent.env(env)
[08:05:32.360] | :         }
[08:05:32.360] | :         if (identical(penv, globalenv())) {
[08:05:32.360] | :             environment(...future.FUN) <- environment()
[08:05:32.360] | :         }
[08:05:32.360] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:32.360] | :             !isNamespace(penv)) {
[08:05:32.360] | :             parent.env(penv) <- environment()
[08:05:32.360] | :         }
[08:05:32.360] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:32.360] | :         {
[08:05:32.360] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:32.360] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:32.360] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:32.360] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:32.360] | :                 on.exit(options(oopts), add = TRUE)
[08:05:32.360] | :             }
[08:05:32.360] | :             {
[08:05:32.360] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:32.360] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:32.360] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:32.360] | :                   {
[08:05:32.360] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:32.360] | :                   }
[08:05:32.360] | :                 })
[08:05:32.360] | :             }
[08:05:32.360] | :         }
[08:05:32.360] | :     }, args = future.call.arguments)
[08:05:32.360] | : }
[08:05:32.360] | : Globals: 9 objects totaling 10.72 KiB (function ‘...future.FUN’ of 3.30 KiB, list ‘args’ of 928 bytes, function ‘caller’ of 904 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 114 bytes, ...)
[08:05:32.360] | : Packages: <none>
[08:05:32.360] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:32.360] | : Capture standard output: TRUE
[08:05:32.360] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:32.360] | : Immediate condition classes: ‘immediateCondition’
[08:05:32.360] | : Lazy evaluation: FALSE
[08:05:32.360] | : Local evaluation: TRUE
[08:05:32.360] | : Asynchronous evaluation: TRUE
[08:05:32.360] | : Early signaling: FALSE
[08:05:32.360] | : Environment: 0x56342dc21248
[08:05:32.360] | : State: ‘running’
[08:05:32.360] | : Resolved: FALSE
[08:05:32.360] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-30
[08:05:32.360] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:32.360] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:32.360] | : Value: <not collected>
[08:05:32.360] | : Conditions captured: <none>
[08:05:32.373] | : Chunk #2 of 2 ... DONE
[08:05:32.374] | : Launching 2 futures (chunks) ... DONE
[08:05:32.374] | : Resolving 2 futures (chunks) ...
[08:05:32.455] | :  - Number of value chunks collected: 2
[08:05:32.455] | : Resolving 2 futures (chunks) ... DONE
[08:05:32.455] | : Reducing values from 2 chunks ...
[08:05:32.455] | :  - Number of values collected after concatenation: 3
[08:05:32.455] | :  - Number of values expected: 3
[08:05:32.456] | : Reducing values from 2 chunks ... DONE
[08:05:32.456] | future_lapply() -> future_xapply() ... done
[08:05:32.456] future_lapply() ... done
- future_lapply(x, FUN = do.call, ...) ...
[08:05:32.456] future_lapply() ...
[08:05:32.458] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:32.458] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:32.458] | future_lapply() -> future_xapply() ...
[08:05:32.458] | : Number of chunks: 1
[08:05:32.458] | : getGlobalsAndPackagesXApply() ...
[08:05:32.458] | : . future.globals: TRUE
[08:05:32.479] | : . globals found/used: [n=1] ‘FUN’
[08:05:32.479] | : . needed namespaces: [n=0] 
[08:05:32.479] | : . use_args: TRUE
[08:05:32.479] | : . Getting '...' globals ...
[08:05:32.480] | : . ' '...' content: [n=1] ‘what’
[08:05:32.480] | : . ' List of 1
[08:05:32.480] | : . '  $ ...:List of 1
[08:05:32.480] | : . '   ..$ what:function (x)  
[08:05:32.480] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.480] | : . '  - attr(*, "where")=List of 1
[08:05:32.480] | : . '   ..$ ...:<environment: 0x56342a3df7a8> 
[08:05:32.480] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.480] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:32.480] | : . '  - attr(*, "total_size")= num NA
[08:05:32.483] | : . Getting '...' globals ... done
[08:05:32.483] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:32.483] | : . List of 2
[08:05:32.483] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:32.483] | : .  $ ...          :List of 1
[08:05:32.483] | : .   ..$ what:function (x)  
[08:05:32.483] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.483] | : .  - attr(*, "where")=List of 2
[08:05:32.483] | : .   ..$ ...future.FUN:<environment: 0x56342a3df7a8> 
[08:05:32.483] | : .   ..$ ...          :<environment: 0x56342a3df7a8> 
[08:05:32.483] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.483] | : .  - attr(*, "resolved")= logi FALSE
[08:05:32.483] | : .  - attr(*, "total_size")= num 7368
[08:05:32.486] | : . Packages to be attached in all futures: [n=0] 
[08:05:32.486] | : getGlobalsAndPackagesXApply() ... done
[08:05:32.487] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:32.487] | : List of 5
[08:05:32.487] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:32.487] | :  $ ...                      :List of 1
[08:05:32.487] | :   ..$ what:function (x)  
[08:05:32.487] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.487] | :  $ ...future.elements_ii    : NULL
[08:05:32.487] | :  $ ...future.seeds_ii       : NULL
[08:05:32.487] | :  $ ...future.globals.maxSize: NULL
[08:05:32.487] | :  - attr(*, "where")=List of 5
[08:05:32.487] | :   ..$ ...future.FUN            :<environment: 0x56342a3df7a8> 
[08:05:32.487] | :   ..$ ...                      :<environment: 0x56342a3df7a8> 
[08:05:32.487] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:32.487] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:32.487] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:32.487] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.487] | :  - attr(*, "resolved")= logi FALSE
[08:05:32.487] | :  - attr(*, "total_size")= num 7368
[08:05:32.491] | : Number of futures (= number of chunks): 1
[08:05:32.491] | : Launching 1 futures (chunks) ...
[08:05:32.491] | : Chunk #1 of 1 ...
[08:05:32.492] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:32.492] | :    + additional globals found: [n=0] 
[08:05:32.492] | :    + additional namespaces needed: [n=0] 
[08:05:32.492] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:32.492] | :  - seeds: <none>
[08:05:32.493] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:32.555] | : Created future:
[08:05:32.555] | : MultisessionFuture:
[08:05:32.555] | : Label: ‘future_lapply-1’
[08:05:32.555] | : Expression:
[08:05:32.555] | : {
[08:05:32.555] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:32.555] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:32.555] | :     "# as a global variable                                         "
[08:05:32.555] | :     do.call(function(...) {
[08:05:32.555] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:32.555] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:32.555] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:32.555] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:32.555] | :             on.exit(options(oopts), add = TRUE)
[08:05:32.555] | :         }
[08:05:32.555] | :         {
[08:05:32.555] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:32.555] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:32.555] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:32.555] | :                 {
[08:05:32.555] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:32.555] | :                 }
[08:05:32.555] | :             })
[08:05:32.555] | :         }
[08:05:32.555] | :     }, args = future.call.arguments)
[08:05:32.555] | : }
[08:05:32.555] | : Globals: 5 objects totaling 7.38 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:32.555] | : Packages: <none>
[08:05:32.555] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:32.555] | : Capture standard output: TRUE
[08:05:32.555] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:32.555] | : Immediate condition classes: ‘immediateCondition’
[08:05:32.555] | : Lazy evaluation: FALSE
[08:05:32.555] | : Local evaluation: TRUE
[08:05:32.555] | : Asynchronous evaluation: TRUE
[08:05:32.555] | : Early signaling: FALSE
[08:05:32.555] | : Environment: R_GlobalEnv
[08:05:32.555] | : State: ‘running’
[08:05:32.555] | : Resolved: FALSE
[08:05:32.555] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-31
[08:05:32.555] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:32.555] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:32.555] | : Value: <not collected>
[08:05:32.555] | : Conditions captured: <none>
[08:05:32.567] | : Chunk #1 of 1 ... DONE
[08:05:32.567] | : Launching 1 futures (chunks) ... DONE
[08:05:32.567] | : Resolving 1 futures (chunks) ...
[08:05:32.610] | :  - Number of value chunks collected: 1
[08:05:32.611] | : Resolving 1 futures (chunks) ... DONE
[08:05:32.611] | : Reducing values from 1 chunks ...
[08:05:32.611] | :  - Number of values collected after concatenation: 1
[08:05:32.611] | :  - Number of values expected: 1
[08:05:32.611] | : Reducing values from 1 chunks ... DONE
[08:05:32.611] | future_lapply() -> future_xapply() ... done
[08:05:32.611] future_lapply() ... done
[08:05:32.611] future_lapply() ...
[08:05:32.613] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:32.613] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:32.613] | future_lapply() -> future_xapply() ...
[08:05:32.613] | : Number of chunks: 1
[08:05:32.614] | : getGlobalsAndPackagesXApply() ...
[08:05:32.614] | : . future.globals: TRUE
[08:05:32.635] | : . globals found/used: [n=1] ‘FUN’
[08:05:32.635] | : . needed namespaces: [n=0] 
[08:05:32.635] | : . use_args: TRUE
[08:05:32.635] | : . Getting '...' globals ...
[08:05:32.636] | : . ' '...' content: [n=1] ‘what’
[08:05:32.636] | : . ' List of 1
[08:05:32.636] | : . '  $ ...:List of 1
[08:05:32.636] | : . '   ..$ what:function (...)  
[08:05:32.636] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.636] | : . '  - attr(*, "where")=List of 1
[08:05:32.636] | : . '   ..$ ...:<environment: 0x56342e273710> 
[08:05:32.636] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.636] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:32.636] | : . '  - attr(*, "total_size")= num NA
[08:05:32.639] | : . Getting '...' globals ... done
[08:05:32.639] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:32.639] | : . List of 2
[08:05:32.639] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:32.639] | : .  $ ...          :List of 1
[08:05:32.639] | : .   ..$ what:function (...)  
[08:05:32.639] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.639] | : .  - attr(*, "where")=List of 2
[08:05:32.639] | : .   ..$ ...future.FUN:<environment: 0x56342e273710> 
[08:05:32.639] | : .   ..$ ...          :<environment: 0x56342e273710> 
[08:05:32.639] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.639] | : .  - attr(*, "resolved")= logi FALSE
[08:05:32.639] | : .  - attr(*, "total_size")= num 7804
[08:05:32.642] | : . Packages to be attached in all futures: [n=0] 
[08:05:32.643] | : getGlobalsAndPackagesXApply() ... done
[08:05:32.643] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:32.643] | : List of 5
[08:05:32.643] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:32.643] | :  $ ...                      :List of 1
[08:05:32.643] | :   ..$ what:function (...)  
[08:05:32.643] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.643] | :  $ ...future.elements_ii    : NULL
[08:05:32.643] | :  $ ...future.seeds_ii       : NULL
[08:05:32.643] | :  $ ...future.globals.maxSize: NULL
[08:05:32.643] | :  - attr(*, "where")=List of 5
[08:05:32.643] | :   ..$ ...future.FUN            :<environment: 0x56342e273710> 
[08:05:32.643] | :   ..$ ...                      :<environment: 0x56342e273710> 
[08:05:32.643] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:32.643] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:32.643] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:32.643] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.643] | :  - attr(*, "resolved")= logi FALSE
[08:05:32.643] | :  - attr(*, "total_size")= num 7804
[08:05:32.647] | : Number of futures (= number of chunks): 1
[08:05:32.647] | : Launching 1 futures (chunks) ...
[08:05:32.648] | : Chunk #1 of 1 ...
[08:05:32.648] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:32.648] | :    + additional globals found: [n=0] 
[08:05:32.648] | :    + additional namespaces needed: [n=0] 
[08:05:32.648] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:32.649] | :  - seeds: <none>
[08:05:32.649] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:32.744] | : Created future:
[08:05:32.744] | : MultisessionFuture:
[08:05:32.744] | : Label: ‘future_lapply-1’
[08:05:32.744] | : Expression:
[08:05:32.744] | : {
[08:05:32.744] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:32.744] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:32.744] | :     "# as a global variable                                         "
[08:05:32.744] | :     do.call(function(...) {
[08:05:32.744] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:32.744] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:32.744] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:32.744] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:32.744] | :             on.exit(options(oopts), add = TRUE)
[08:05:32.744] | :         }
[08:05:32.744] | :         {
[08:05:32.744] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:32.744] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:32.744] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:32.744] | :                 {
[08:05:32.744] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:32.744] | :                 }
[08:05:32.744] | :             })
[08:05:32.744] | :         }
[08:05:32.744] | :     }, args = future.call.arguments)
[08:05:32.744] | : }
[08:05:32.744] | : Globals: 5 objects totaling 7.80 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 388 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:32.744] | : Packages: <none>
[08:05:32.744] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:32.744] | : Capture standard output: TRUE
[08:05:32.744] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:32.744] | : Immediate condition classes: ‘immediateCondition’
[08:05:32.744] | : Lazy evaluation: FALSE
[08:05:32.744] | : Local evaluation: TRUE
[08:05:32.744] | : Asynchronous evaluation: TRUE
[08:05:32.744] | : Early signaling: FALSE
[08:05:32.744] | : Environment: R_GlobalEnv
[08:05:32.744] | : State: ‘running’
[08:05:32.744] | : Resolved: FALSE
[08:05:32.744] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-32
[08:05:32.744] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:32.744] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:32.744] | : Value: <not collected>
[08:05:32.744] | : Conditions captured: <none>
[08:05:32.756] | : Chunk #1 of 1 ... DONE
[08:05:32.756] | : Launching 1 futures (chunks) ... DONE
[08:05:32.756] | : Resolving 1 futures (chunks) ...
[08:05:32.799] | :  - Number of value chunks collected: 1
[08:05:32.799] | : Resolving 1 futures (chunks) ... DONE
[08:05:32.799] | : Reducing values from 1 chunks ...
[08:05:32.799] | :  - Number of values collected after concatenation: 1
[08:05:32.800] | :  - Number of values expected: 1
[08:05:32.800] | : Reducing values from 1 chunks ... DONE
[08:05:32.800] | future_lapply() -> future_xapply() ... done
[08:05:32.802] future_lapply() ... done
- future_lapply(x, ...) - passing arguments via '...' ...
[08:05:32.802] future_lapply() ...
[08:05:32.803] | Globals in FUN(): [n=1] ‘typeof’
[08:05:32.803] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:32.803] | future_lapply() -> future_xapply() ...
[08:05:32.804] | : Number of chunks: 1
[08:05:32.804] | : getGlobalsAndPackagesXApply() ...
[08:05:32.804] | : . future.globals: TRUE
[08:05:32.810] | : . globals found/used: [n=1] ‘FUN’
[08:05:32.810] | : . needed namespaces: [n=0] 
[08:05:32.810] | : . use_args: TRUE
[08:05:32.810] | : . Getting '...' globals ...
[08:05:32.811] | : . ' '...' content: [n=1] ‘b’
[08:05:32.811] | : . ' List of 1
[08:05:32.811] | : . '  $ ...:List of 1
[08:05:32.811] | : . '   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:32.811] | : . '   .. ..$ a: int [1:2] 1 2
[08:05:32.811] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.811] | : . '  - attr(*, "where")=List of 1
[08:05:32.811] | : . '   ..$ ...:<environment: 0x56342cbc1560> 
[08:05:32.811] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.811] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:32.811] | : . '  - attr(*, "total_size")= num NA
[08:05:32.814] | : . Getting '...' globals ... done
[08:05:32.814] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:32.814] | : . List of 2
[08:05:32.814] | : .  $ ...future.FUN:function (a, b)  
[08:05:32.814] | : .  $ ...          :List of 1
[08:05:32.814] | : .   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:32.814] | : .   .. ..$ a: int [1:2] 1 2
[08:05:32.814] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.814] | : .  - attr(*, "where")=List of 2
[08:05:32.814] | : .   ..$ ...future.FUN:<environment: 0x56342cbc1560> 
[08:05:32.814] | : .   ..$ ...          :<environment: 0x56342cbc1560> 
[08:05:32.814] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.814] | : .  - attr(*, "resolved")= logi FALSE
[08:05:32.814] | : .  - attr(*, "total_size")= num 4505
[08:05:32.818] | : . Packages to be attached in all futures: [n=0] 
[08:05:32.818] | : getGlobalsAndPackagesXApply() ... done
[08:05:32.818] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:32.818] | : List of 5
[08:05:32.818] | :  $ ...future.FUN            :function (a, b)  
[08:05:32.818] | :  $ ...                      :List of 1
[08:05:32.818] | :   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:32.818] | :   .. ..$ a: int [1:2] 1 2
[08:05:32.818] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.818] | :  $ ...future.elements_ii    : NULL
[08:05:32.818] | :  $ ...future.seeds_ii       : NULL
[08:05:32.818] | :  $ ...future.globals.maxSize: NULL
[08:05:32.818] | :  - attr(*, "where")=List of 5
[08:05:32.818] | :   ..$ ...future.FUN            :<environment: 0x56342cbc1560> 
[08:05:32.818] | :   ..$ ...                      :<environment: 0x56342cbc1560> 
[08:05:32.818] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:32.818] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:32.818] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:32.818] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.818] | :  - attr(*, "resolved")= logi FALSE
[08:05:32.818] | :  - attr(*, "total_size")= num 4505
[08:05:32.823] | : Number of futures (= number of chunks): 1
[08:05:32.824] | : Launching 1 futures (chunks) ...
[08:05:32.824] | : Chunk #1 of 1 ...
[08:05:32.824] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:32.824] | :    + additional globals found: [n=0] 
[08:05:32.824] | :    + additional namespaces needed: [n=0] 
[08:05:32.824] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:32.825] | :  - seeds: <none>
[08:05:32.825] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:32.923] | : Created future:
[08:05:32.923] | : MultisessionFuture:
[08:05:32.923] | : Label: ‘future_lapply-1’
[08:05:32.923] | : Expression:
[08:05:32.923] | : {
[08:05:32.923] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:32.923] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:32.923] | :     "# as a global variable                                         "
[08:05:32.923] | :     do.call(function(...) {
[08:05:32.923] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:32.923] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:32.923] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:32.923] | :         "# anonymous function.                                          "
[08:05:32.923] | :         "#                                                              "
[08:05:32.923] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:32.923] | :         "# function environment of FUN() to the calling environment.    "
[08:05:32.923] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:32.923] | :         "# global environment, which is where globals are written.      "
[08:05:32.923] | :         penv <- env <- environment(...future.FUN)
[08:05:32.923] | :         repeat {
[08:05:32.923] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:32.923] | :                 emptyenv())) 
[08:05:32.923] | :                 break
[08:05:32.923] | :             penv <- env
[08:05:32.923] | :             env <- parent.env(env)
[08:05:32.923] | :         }
[08:05:32.923] | :         if (identical(penv, globalenv())) {
[08:05:32.923] | :             environment(...future.FUN) <- environment()
[08:05:32.923] | :         }
[08:05:32.923] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:32.923] | :             !isNamespace(penv)) {
[08:05:32.923] | :             parent.env(penv) <- environment()
[08:05:32.923] | :         }
[08:05:32.923] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:32.923] | :         {
[08:05:32.923] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:32.923] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:32.923] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:32.923] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:32.923] | :                 on.exit(options(oopts), add = TRUE)
[08:05:32.923] | :             }
[08:05:32.923] | :             {
[08:05:32.923] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:32.923] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:32.923] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:32.923] | :                   {
[08:05:32.923] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:32.923] | :                   }
[08:05:32.923] | :                 })
[08:05:32.923] | :             }
[08:05:32.923] | :         }
[08:05:32.923] | :     }, args = future.call.arguments)
[08:05:32.923] | : }
[08:05:32.923] | : Globals: 5 objects totaling 4.67 KiB (DotDotDotList ‘future.call.arguments’ of 357 bytes, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:32.923] | : Packages: <none>
[08:05:32.923] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:32.923] | : Capture standard output: TRUE
[08:05:32.923] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:32.923] | : Immediate condition classes: ‘immediateCondition’
[08:05:32.923] | : Lazy evaluation: FALSE
[08:05:32.923] | : Local evaluation: TRUE
[08:05:32.923] | : Asynchronous evaluation: TRUE
[08:05:32.923] | : Early signaling: FALSE
[08:05:32.923] | : Environment: R_GlobalEnv
[08:05:32.923] | : State: ‘running’
[08:05:32.923] | : Resolved: FALSE
[08:05:32.923] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-33
[08:05:32.923] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:32.923] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:32.923] | : Value: <not collected>
[08:05:32.923] | : Conditions captured: <none>
[08:05:32.935] | : Chunk #1 of 1 ... DONE
[08:05:32.935] | : Launching 1 futures (chunks) ... DONE
[08:05:32.936] | : Resolving 1 futures (chunks) ...
[08:05:32.978] | :  - Number of value chunks collected: 1
[08:05:32.978] | : Resolving 1 futures (chunks) ... DONE
[08:05:32.979] | : Reducing values from 1 chunks ...
[08:05:32.979] | :  - Number of values collected after concatenation: 1
[08:05:32.979] | :  - Number of values expected: 1
[08:05:32.979] | : Reducing values from 1 chunks ... DONE
[08:05:32.979] | future_lapply() -> future_xapply() ... done
[08:05:32.979] future_lapply() ... done
[08:05:32.979] future_lapply() ...
[08:05:32.980] | Globals in FUN(): [n=1] ‘typeof’
[08:05:32.980] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:32.980] | future_lapply() -> future_xapply() ...
[08:05:32.980] | : Number of chunks: 1
[08:05:32.980] | : getGlobalsAndPackagesXApply() ...
[08:05:32.981] | : . future.globals: TRUE
[08:05:32.988] | : . globals found/used: [n=1] ‘FUN’
[08:05:32.989] | : . needed namespaces: [n=0] 
[08:05:32.989] | : . use_args: TRUE
[08:05:32.989] | : . Getting '...' globals ...
[08:05:32.990] | : . ' '...' content: [n=1] ‘b’
[08:05:32.990] | : . ' List of 1
[08:05:32.990] | : . '  $ ...:List of 1
[08:05:32.990] | : . '   ..$ b:<environment: 0x56342d950b40> 
[08:05:32.990] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.990] | : . '  - attr(*, "where")=List of 1
[08:05:32.990] | : . '   ..$ ...:<environment: 0x56342e3cb0f8> 
[08:05:32.990] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.990] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:32.990] | : . '  - attr(*, "total_size")= num NA
[08:05:32.993] | : . Getting '...' globals ... done
[08:05:32.993] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:32.993] | : . List of 2
[08:05:32.993] | : .  $ ...future.FUN:function (a, b)  
[08:05:32.993] | : .  $ ...          :List of 1
[08:05:32.993] | : .   ..$ b:<environment: 0x56342d950b40> 
[08:05:32.993] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.993] | : .  - attr(*, "where")=List of 2
[08:05:32.993] | : .   ..$ ...future.FUN:<environment: 0x56342e3cb0f8> 
[08:05:32.993] | : .   ..$ ...          :<environment: 0x56342e3cb0f8> 
[08:05:32.993] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.993] | : .  - attr(*, "resolved")= logi FALSE
[08:05:32.993] | : .  - attr(*, "total_size")= num 4260
[08:05:32.996] | : . Packages to be attached in all futures: [n=0] 
[08:05:32.996] | : getGlobalsAndPackagesXApply() ... done
[08:05:32.996] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:32.997] | : List of 5
[08:05:32.997] | :  $ ...future.FUN            :function (a, b)  
[08:05:32.997] | :  $ ...                      :List of 1
[08:05:32.997] | :   ..$ b:<environment: 0x56342d950b40> 
[08:05:32.997] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:32.997] | :  $ ...future.elements_ii    : NULL
[08:05:32.997] | :  $ ...future.seeds_ii       : NULL
[08:05:32.997] | :  $ ...future.globals.maxSize: NULL
[08:05:32.997] | :  - attr(*, "where")=List of 5
[08:05:32.997] | :   ..$ ...future.FUN            :<environment: 0x56342e3cb0f8> 
[08:05:32.997] | :   ..$ ...                      :<environment: 0x56342e3cb0f8> 
[08:05:32.997] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:32.997] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:32.997] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:32.997] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:32.997] | :  - attr(*, "resolved")= logi FALSE
[08:05:32.997] | :  - attr(*, "total_size")= num 4260
[08:05:33.001] | : Number of futures (= number of chunks): 1
[08:05:33.001] | : Launching 1 futures (chunks) ...
[08:05:33.001] | : Chunk #1 of 1 ...
[08:05:33.001] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:33.002] | :    + additional globals found: [n=0] 
[08:05:33.002] | :    + additional namespaces needed: [n=0] 
[08:05:33.002] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:33.002] | :  - seeds: <none>
[08:05:33.002] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:33.100] | : Created future:
[08:05:33.100] | : MultisessionFuture:
[08:05:33.100] | : Label: ‘future_lapply-1’
[08:05:33.100] | : Expression:
[08:05:33.100] | : {
[08:05:33.100] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:33.100] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:33.100] | :     "# as a global variable                                         "
[08:05:33.100] | :     do.call(function(...) {
[08:05:33.100] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:33.100] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:33.100] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:33.100] | :         "# anonymous function.                                          "
[08:05:33.100] | :         "#                                                              "
[08:05:33.100] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:33.100] | :         "# function environment of FUN() to the calling environment.    "
[08:05:33.100] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:33.100] | :         "# global environment, which is where globals are written.      "
[08:05:33.100] | :         penv <- env <- environment(...future.FUN)
[08:05:33.100] | :         repeat {
[08:05:33.100] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:33.100] | :                 emptyenv())) 
[08:05:33.100] | :                 break
[08:05:33.100] | :             penv <- env
[08:05:33.100] | :             env <- parent.env(env)
[08:05:33.100] | :         }
[08:05:33.100] | :         if (identical(penv, globalenv())) {
[08:05:33.100] | :             environment(...future.FUN) <- environment()
[08:05:33.100] | :         }
[08:05:33.100] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:33.100] | :             !isNamespace(penv)) {
[08:05:33.100] | :             parent.env(penv) <- environment()
[08:05:33.100] | :         }
[08:05:33.100] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:33.100] | :         {
[08:05:33.100] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:33.100] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:33.100] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:33.100] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:33.100] | :                 on.exit(options(oopts), add = TRUE)
[08:05:33.100] | :             }
[08:05:33.100] | :             {
[08:05:33.100] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:33.100] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:33.100] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:33.100] | :                   {
[08:05:33.100] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:33.100] | :                   }
[08:05:33.100] | :                 })
[08:05:33.100] | :             }
[08:05:33.100] | :         }
[08:05:33.100] | :     }, args = future.call.arguments)
[08:05:33.100] | : }
[08:05:33.100] | : Globals: 5 objects totaling 4.43 KiB (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 279 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:33.100] | : Packages: <none>
[08:05:33.100] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:33.100] | : Capture standard output: TRUE
[08:05:33.100] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:33.100] | : Immediate condition classes: ‘immediateCondition’
[08:05:33.100] | : Lazy evaluation: FALSE
[08:05:33.100] | : Local evaluation: TRUE
[08:05:33.100] | : Asynchronous evaluation: TRUE
[08:05:33.100] | : Early signaling: FALSE
[08:05:33.100] | : Environment: R_GlobalEnv
[08:05:33.100] | : State: ‘running’
[08:05:33.100] | : Resolved: FALSE
[08:05:33.100] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-34
[08:05:33.100] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:33.100] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:33.100] | : Value: <not collected>
[08:05:33.100] | : Conditions captured: <none>
[08:05:33.112] | : Chunk #1 of 1 ... DONE
[08:05:33.112] | : Launching 1 futures (chunks) ... DONE
[08:05:33.113] | : Resolving 1 futures (chunks) ...
[08:05:33.155] | :  - Number of value chunks collected: 1
[08:05:33.155] | : Resolving 1 futures (chunks) ... DONE
[08:05:33.156] | : Reducing values from 1 chunks ...
[08:05:33.156] | :  - Number of values collected after concatenation: 1
[08:05:33.156] | :  - Number of values expected: 1
[08:05:33.156] | : Reducing values from 1 chunks ... DONE
[08:05:33.156] | future_lapply() -> future_xapply() ... done
[08:05:33.156] future_lapply() ... done
[08:05:33.156] future_lapply() ...
[08:05:33.157] | Globals in FUN(): [n=1] ‘typeof’
[08:05:33.157] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:33.157] | future_lapply() -> future_xapply() ...
[08:05:33.157] | : Number of chunks: 1
[08:05:33.157] | : getGlobalsAndPackagesXApply() ...
[08:05:33.158] | : . future.globals: TRUE
[08:05:33.164] | : . globals found/used: [n=1] ‘FUN’
[08:05:33.164] | : . needed namespaces: [n=0] 
[08:05:33.164] | : . use_args: TRUE
[08:05:33.164] | : . Getting '...' globals ...
[08:05:33.165] | : . ' '...' content: [n=1] ‘b’
[08:05:33.165] | : . ' List of 1
[08:05:33.165] | : . '  $ ...:List of 1
[08:05:33.165] | : . '   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:33.165] | : . '   .. .. ..@ slots     :List of 4
[08:05:33.165] | : . '   .. .. .. ..$ .Data  : chr "function"
[08:05:33.165] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. ..$ target : chr "signature"
[08:05:33.165] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. ..$ defined: chr "signature"
[08:05:33.165] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. ..$ generic: chr "character"
[08:05:33.165] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. ..@ contains  :List of 4
[08:05:33.165] | : . '   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.165] | : . '   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.165] | : . '   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.165] | : . '   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 3
[08:05:33.165] | : . '   .. .. ..@ virtual   : logi FALSE
[08:05:33.165] | : . '   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:33.165] | : . '  list()
[08:05:33.165] | : . '   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:33.165] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:33.165] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:33.165] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:33.165] | : . '   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:33.165] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:33.165] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:33.165] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:33.165] | : . '   .. .. .. .. ..$ generic: chr(0) 
[08:05:33.165] | : . '   .. .. ..@ validity  : NULL
[08:05:33.165] | : . '   .. .. ..@ access    : list()
[08:05:33.165] | : . '   .. .. ..@ className : chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. ..@ subclasses:List of 7
[08:05:33.165] | : . '   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.165] | : . '   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.165] | : . '   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.165] | : . '   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.165] | : . '   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.165] | : . '   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.165] | : . '   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.165] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.165] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:33.165] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.165] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.165] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.165] | : . '   .. .. ..@ versionKey:<externalptr> 
[08:05:33.165] | : . '   .. .. ..@ sealed    : logi TRUE
[08:05:33.165] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.165] | : . '  - attr(*, "where")=List of 1
[08:05:33.165] | : . '   ..$ ...:<environment: 0x56342df4cb70> 
[08:05:33.165] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.165] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:33.165] | : . '  - attr(*, "total_size")= num NA
[08:05:33.224] | : . Getting '...' globals ... done
[08:05:33.224] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:33.225] | : . List of 2
[08:05:33.225] | : .  $ ...future.FUN:function (a, b)  
[08:05:33.225] | : .  $ ...          :List of 1
[08:05:33.225] | : .   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:33.225] | : .   .. .. ..@ slots     :List of 4
[08:05:33.225] | : .   .. .. .. ..$ .Data  : chr "function"
[08:05:33.225] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. ..$ target : chr "signature"
[08:05:33.225] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. ..$ defined: chr "signature"
[08:05:33.225] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. ..$ generic: chr "character"
[08:05:33.225] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. ..@ contains  :List of 4
[08:05:33.225] | : .   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.225] | : .   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.225] | : .   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.225] | : .   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 3
[08:05:33.225] | : .   .. .. ..@ virtual   : logi FALSE
[08:05:33.225] | : .   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:33.225] | : .  list()
[08:05:33.225] | : .   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:33.225] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:33.225] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:33.225] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:33.225] | : .   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:33.225] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:33.225] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:33.225] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:33.225] | : .   .. .. .. .. ..$ generic: chr(0) 
[08:05:33.225] | : .   .. .. ..@ validity  : NULL
[08:05:33.225] | : .   .. .. ..@ access    : list()
[08:05:33.225] | : .   .. .. ..@ className : chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. ..@ subclasses:List of 7
[08:05:33.225] | : .   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.225] | : .   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.225] | : .   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.225] | : .   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.225] | : .   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.225] | : .   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.225] | : .   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.225] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.225] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.225] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:33.225] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.225] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.225] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.225] | : .   .. .. ..@ versionKey:<externalptr> 
[08:05:33.225] | : .   .. .. ..@ sealed    : logi TRUE
[08:05:33.225] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.225] | : .  - attr(*, "where")=List of 2
[08:05:33.225] | : .   ..$ ...future.FUN:<environment: 0x56342df4cb70> 
[08:05:33.225] | : .   ..$ ...          :<environment: 0x56342df4cb70> 
[08:05:33.225] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.225] | : .  - attr(*, "resolved")= logi FALSE
[08:05:33.225] | : .  - attr(*, "total_size")= num 106127
[08:05:33.280] | : . Packages to be attached in all futures: [n=0] 
[08:05:33.280] | : getGlobalsAndPackagesXApply() ... done
[08:05:33.280] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:33.281] | : List of 5
[08:05:33.281] | :  $ ...future.FUN            :function (a, b)  
[08:05:33.281] | :  $ ...                      :List of 1
[08:05:33.281] | :   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:33.281] | :   .. .. ..@ slots     :List of 4
[08:05:33.281] | :   .. .. .. ..$ .Data  : chr "function"
[08:05:33.281] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. ..$ target : chr "signature"
[08:05:33.281] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. ..$ defined: chr "signature"
[08:05:33.281] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. ..$ generic: chr "character"
[08:05:33.281] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. ..@ contains  :List of 4
[08:05:33.281] | :   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.281] | :   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.281] | :   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.281] | :   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 3
[08:05:33.281] | :   .. .. ..@ virtual   : logi FALSE
[08:05:33.281] | :   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:33.281] | :  list()
[08:05:33.281] | :   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:33.281] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:33.281] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:33.281] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:33.281] | :   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:33.281] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:33.281] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:33.281] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:33.281] | :   .. .. .. .. ..$ generic: chr(0) 
[08:05:33.281] | :   .. .. ..@ validity  : NULL
[08:05:33.281] | :   .. .. ..@ access    : list()
[08:05:33.281] | :   .. .. ..@ className : chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. ..@ subclasses:List of 7
[08:05:33.281] | :   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.281] | :   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.281] | :   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.281] | :   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:33.281] | :   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.281] | :   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.281] | :   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:33.281] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:33.281] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:33.281] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:33.281] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:33.281] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:33.281] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:33.281] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:33.281] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:33.281] | :   .. .. ..@ versionKey:<externalptr> 
[08:05:33.281] | :   .. .. ..@ sealed    : logi TRUE
[08:05:33.281] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.281] | :  $ ...future.elements_ii    : NULL
[08:05:33.281] | :  $ ...future.seeds_ii       : NULL
[08:05:33.281] | :  $ ...future.globals.maxSize: NULL
[08:05:33.281] | :  - attr(*, "where")=List of 5
[08:05:33.281] | :   ..$ ...future.FUN            :<environment: 0x56342df4cb70> 
[08:05:33.281] | :   ..$ ...                      :<environment: 0x56342df4cb70> 
[08:05:33.281] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:33.281] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:33.281] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:33.281] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.281] | :  - attr(*, "resolved")= logi FALSE
[08:05:33.281] | :  - attr(*, "total_size")= num 106127
[08:05:33.341] | : Number of futures (= number of chunks): 1
[08:05:33.341] | : Launching 1 futures (chunks) ...
[08:05:33.341] | : Chunk #1 of 1 ...
[08:05:33.341] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:33.342] | :    + additional globals found: [n=0] 
[08:05:33.342] | :    + additional namespaces needed: [n=0] 
[08:05:33.342] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:33.342] | :  - seeds: <none>
[08:05:33.342] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:33.442] | : Created future:
[08:05:33.442] | : MultisessionFuture:
[08:05:33.442] | : Label: ‘future_lapply-1’
[08:05:33.442] | : Expression:
[08:05:33.442] | : {
[08:05:33.442] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:33.442] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:33.442] | :     "# as a global variable                                         "
[08:05:33.442] | :     do.call(function(...) {
[08:05:33.442] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:33.442] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:33.442] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:33.442] | :         "# anonymous function.                                          "
[08:05:33.442] | :         "#                                                              "
[08:05:33.442] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:33.442] | :         "# function environment of FUN() to the calling environment.    "
[08:05:33.442] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:33.442] | :         "# global environment, which is where globals are written.      "
[08:05:33.442] | :         penv <- env <- environment(...future.FUN)
[08:05:33.442] | :         repeat {
[08:05:33.442] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:33.442] | :                 emptyenv())) 
[08:05:33.442] | :                 break
[08:05:33.442] | :             penv <- env
[08:05:33.442] | :             env <- parent.env(env)
[08:05:33.442] | :         }
[08:05:33.442] | :         if (identical(penv, globalenv())) {
[08:05:33.442] | :             environment(...future.FUN) <- environment()
[08:05:33.442] | :         }
[08:05:33.442] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:33.442] | :             !isNamespace(penv)) {
[08:05:33.442] | :             parent.env(penv) <- environment()
[08:05:33.442] | :         }
[08:05:33.442] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:33.442] | :         {
[08:05:33.442] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:33.442] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:33.442] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:33.442] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:33.442] | :                 on.exit(options(oopts), add = TRUE)
[08:05:33.442] | :             }
[08:05:33.442] | :             {
[08:05:33.442] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:33.442] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:33.442] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:33.442] | :                   {
[08:05:33.442] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:33.442] | :                   }
[08:05:33.442] | :                 })
[08:05:33.442] | :             }
[08:05:33.442] | :         }
[08:05:33.442] | :     }, args = future.call.arguments)
[08:05:33.442] | : }
[08:05:33.442] | : Globals: 5 objects totaling 103.91 KiB (DotDotDotList ‘future.call.arguments’ of 50.30 KiB, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:33.442] | : Packages: <none>
[08:05:33.442] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:33.442] | : Capture standard output: TRUE
[08:05:33.442] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:33.442] | : Immediate condition classes: ‘immediateCondition’
[08:05:33.442] | : Lazy evaluation: FALSE
[08:05:33.442] | : Local evaluation: TRUE
[08:05:33.442] | : Asynchronous evaluation: TRUE
[08:05:33.442] | : Early signaling: FALSE
[08:05:33.442] | : Environment: R_GlobalEnv
[08:05:33.442] | : State: ‘running’
[08:05:33.442] | : Resolved: FALSE
[08:05:33.442] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-35
[08:05:33.442] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:33.442] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:33.442] | : Value: <not collected>
[08:05:33.442] | : Conditions captured: <none>
[08:05:33.455] | : Chunk #1 of 1 ... DONE
[08:05:33.455] | : Launching 1 futures (chunks) ... DONE
[08:05:33.455] | : Resolving 1 futures (chunks) ...
[08:05:33.487] | :  - Number of value chunks collected: 1
[08:05:33.487] | : Resolving 1 futures (chunks) ... DONE
[08:05:33.488] | : Reducing values from 1 chunks ...
[08:05:33.488] | :  - Number of values collected after concatenation: 1
[08:05:33.488] | :  - Number of values expected: 1
[08:05:33.488] | : Reducing values from 1 chunks ... DONE
[08:05:33.488] | future_lapply() -> future_xapply() ... done
[08:05:33.488] future_lapply() ... done
- future_lapply(X, ...) - 'X' containing globals ...
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
[08:05:33.490] future_lapply() ...
[08:05:33.491] | Globals in FUN(): [n=0] 
[08:05:33.491] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:33.491] | future_lapply() -> future_xapply() ...
[08:05:33.492] | : Number of chunks: 2
[08:05:33.492] | : getGlobalsAndPackagesXApply() ...
[08:05:33.492] | : . future.globals: TRUE
[08:05:33.495] | : . globals found/used: [n=1] ‘FUN’
[08:05:33.495] | : . needed namespaces: [n=0] 
[08:05:33.496] | : . use_args: TRUE
[08:05:33.496] | : . Getting '...' globals ...
[08:05:33.496] | : . ' '...' content: [n=0] 
[08:05:33.496] | : . ' List of 1
[08:05:33.496] | : . '  $ ...: list()
[08:05:33.496] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.496] | : . '  - attr(*, "where")=List of 1
[08:05:33.496] | : . '   ..$ ...:<environment: 0x56342a6a10d0> 
[08:05:33.496] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.496] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:33.496] | : . '  - attr(*, "total_size")= num NA
[08:05:33.499] | : . Getting '...' globals ... done
[08:05:33.499] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:33.499] | : . List of 2
[08:05:33.499] | : .  $ ...future.FUN:function (f)  
[08:05:33.499] | : .  $ ...          : list()
[08:05:33.499] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.499] | : .  - attr(*, "where")=List of 2
[08:05:33.499] | : .   ..$ ...future.FUN:<environment: 0x56342a6a10d0> 
[08:05:33.499] | : .   ..$ ...          :<environment: 0x56342a6a10d0> 
[08:05:33.499] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.499] | : .  - attr(*, "resolved")= logi FALSE
[08:05:33.499] | : .  - attr(*, "total_size")= num 5165
[08:05:33.502] | : . Packages to be attached in all futures: [n=0] 
[08:05:33.502] | : getGlobalsAndPackagesXApply() ... done
[08:05:33.502] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:33.502] | : List of 5
[08:05:33.502] | :  $ ...future.FUN            :function (f)  
[08:05:33.502] | :  $ ...                      : list()
[08:05:33.502] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.502] | :  $ ...future.elements_ii    : NULL
[08:05:33.502] | :  $ ...future.seeds_ii       : NULL
[08:05:33.502] | :  $ ...future.globals.maxSize: NULL
[08:05:33.502] | :  - attr(*, "where")=List of 5
[08:05:33.502] | :   ..$ ...future.FUN            :<environment: 0x56342a6a10d0> 
[08:05:33.502] | :   ..$ ...                      :<environment: 0x56342a6a10d0> 
[08:05:33.502] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:33.502] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:33.502] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:33.502] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.502] | :  - attr(*, "resolved")= logi FALSE
[08:05:33.502] | :  - attr(*, "total_size")= num 5165
[08:05:33.512] | : Number of futures (= number of chunks): 2
[08:05:33.513] | : Launching 2 futures (chunks) ...
[08:05:33.513] | : Chunk #1 of 2 ...
[08:05:33.513] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:33.523] | :    + additional globals found: [n=2] ‘a’, ‘b’
[08:05:33.523] | :    + additional namespaces needed: [n=0] 
[08:05:33.523] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:33.524] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:33.524] | :  - seeds: <none>
[08:05:33.524] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[08:05:33.624] | : Created future:
[08:05:33.624] | : MultisessionFuture:
[08:05:33.624] | : Label: ‘future_lapply-1’
[08:05:33.624] | : Expression:
[08:05:33.624] | : {
[08:05:33.624] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:33.624] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:33.624] | :     "# as a global variable                                         "
[08:05:33.624] | :     do.call(function(...) {
[08:05:33.624] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:33.624] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:33.624] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:33.624] | :         "# anonymous function.                                          "
[08:05:33.624] | :         "#                                                              "
[08:05:33.624] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:33.624] | :         "# function environment of FUN() to the calling environment.    "
[08:05:33.624] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:33.624] | :         "# global environment, which is where globals are written.      "
[08:05:33.624] | :         penv <- env <- environment(...future.FUN)
[08:05:33.624] | :         repeat {
[08:05:33.624] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:33.624] | :                 emptyenv())) 
[08:05:33.624] | :                 break
[08:05:33.624] | :             penv <- env
[08:05:33.624] | :             env <- parent.env(env)
[08:05:33.624] | :         }
[08:05:33.624] | :         if (identical(penv, globalenv())) {
[08:05:33.624] | :             environment(...future.FUN) <- environment()
[08:05:33.624] | :         }
[08:05:33.624] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:33.624] | :             !isNamespace(penv)) {
[08:05:33.624] | :             parent.env(penv) <- environment()
[08:05:33.624] | :         }
[08:05:33.624] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:33.624] | :         {
[08:05:33.624] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:33.624] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:33.624] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:33.624] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:33.624] | :                 on.exit(options(oopts), add = TRUE)
[08:05:33.624] | :             }
[08:05:33.624] | :             {
[08:05:33.624] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:33.624] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:33.624] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:33.624] | :                   {
[08:05:33.624] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:33.624] | :                   }
[08:05:33.624] | :                 })
[08:05:33.624] | :             }
[08:05:33.624] | :         }
[08:05:33.624] | :     }, args = future.call.arguments)
[08:05:33.624] | : }
[08:05:33.624] | : Globals: 7 objects totaling 5.90 KiB (list ‘...future.elements_ii’ of 588 bytes, function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:33.624] | : Packages: <none>
[08:05:33.624] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:33.624] | : Capture standard output: TRUE
[08:05:33.624] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:33.624] | : Immediate condition classes: ‘immediateCondition’
[08:05:33.624] | : Lazy evaluation: FALSE
[08:05:33.624] | : Local evaluation: TRUE
[08:05:33.624] | : Asynchronous evaluation: TRUE
[08:05:33.624] | : Early signaling: FALSE
[08:05:33.624] | : Environment: R_GlobalEnv
[08:05:33.624] | : State: ‘running’
[08:05:33.624] | : Resolved: FALSE
[08:05:33.624] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-36
[08:05:33.624] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:33.624] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:33.624] | : Value: <not collected>
[08:05:33.624] | : Conditions captured: <none>
[08:05:33.637] | : Chunk #1 of 2 ... DONE
[08:05:33.637] | : Chunk #2 of 2 ...
[08:05:33.637] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:33.648] | :    + additional globals found: [n=2] ‘a’, ‘b’
[08:05:33.649] | :    + additional namespaces needed: [n=1] ‘tools’
[08:05:33.649] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:33.649] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:33.649] | :  - seeds: <none>
[08:05:33.649] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[08:05:33.725] | : Created future:
[08:05:33.725] | : MultisessionFuture:
[08:05:33.725] | : Label: ‘future_lapply-2’
[08:05:33.725] | : Expression:
[08:05:33.725] | : {
[08:05:33.725] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:33.725] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:33.725] | :     "# as a global variable                                         "
[08:05:33.725] | :     do.call(function(...) {
[08:05:33.725] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:33.725] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:33.725] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:33.725] | :         "# anonymous function.                                          "
[08:05:33.725] | :         "#                                                              "
[08:05:33.725] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:33.725] | :         "# function environment of FUN() to the calling environment.    "
[08:05:33.725] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:33.725] | :         "# global environment, which is where globals are written.      "
[08:05:33.725] | :         penv <- env <- environment(...future.FUN)
[08:05:33.725] | :         repeat {
[08:05:33.725] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:33.725] | :                 emptyenv())) 
[08:05:33.725] | :                 break
[08:05:33.725] | :             penv <- env
[08:05:33.725] | :             env <- parent.env(env)
[08:05:33.725] | :         }
[08:05:33.725] | :         if (identical(penv, globalenv())) {
[08:05:33.725] | :             environment(...future.FUN) <- environment()
[08:05:33.725] | :         }
[08:05:33.725] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:33.725] | :             !isNamespace(penv)) {
[08:05:33.725] | :             parent.env(penv) <- environment()
[08:05:33.725] | :         }
[08:05:33.725] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:33.725] | :         {
[08:05:33.725] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:33.725] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:33.725] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:33.725] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:33.725] | :                 on.exit(options(oopts), add = TRUE)
[08:05:33.725] | :             }
[08:05:33.725] | :             {
[08:05:33.725] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:33.725] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:33.725] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:33.725] | :                   {
[08:05:33.725] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:33.725] | :                   }
[08:05:33.725] | :                 })
[08:05:33.725] | :             }
[08:05:33.725] | :         }
[08:05:33.725] | :     }, args = future.call.arguments)
[08:05:33.725] | : }
[08:05:33.725] | : Globals: 7 objects totaling 6.18 KiB (list ‘...future.elements_ii’ of 903 bytes, function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:33.725] | : Packages: 1 packages (‘tools’)
[08:05:33.725] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:33.725] | : Capture standard output: TRUE
[08:05:33.725] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:33.725] | : Immediate condition classes: ‘immediateCondition’
[08:05:33.725] | : Lazy evaluation: FALSE
[08:05:33.725] | : Local evaluation: TRUE
[08:05:33.725] | : Asynchronous evaluation: TRUE
[08:05:33.725] | : Early signaling: FALSE
[08:05:33.725] | : Environment: R_GlobalEnv
[08:05:33.725] | : State: ‘running’
[08:05:33.725] | : Resolved: FALSE
[08:05:33.725] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-37
[08:05:33.725] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:33.725] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:33.725] | : Value: <not collected>
[08:05:33.725] | : Conditions captured: <none>
[08:05:33.738] | : Chunk #2 of 2 ... DONE
[08:05:33.738] | : Launching 2 futures (chunks) ... DONE
[08:05:33.738] | : Resolving 2 futures (chunks) ...
[08:05:33.782] | :  - Number of value chunks collected: 2
[08:05:33.782] | : Resolving 2 futures (chunks) ... DONE
[08:05:33.782] | : Reducing values from 2 chunks ...
[08:05:33.782] | :  - Number of values collected after concatenation: 4
[08:05:33.782] | :  - Number of values expected: 4
[08:05:33.782] | : Reducing values from 2 chunks ... DONE
[08:05:33.782] | future_lapply() -> future_xapply() ... done
[08:05:33.782] future_lapply() ... done
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
- future_lapply(X, ...) - '{ a <- a + 1; a }' ...
[08:05:33.784] future_lapply() ...
[08:05:33.785] | Globals in FUN(): [n=4] ‘{’, ‘<-’, ‘a’, ‘+’
[08:05:33.785] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:33.785] | future_lapply() -> future_xapply() ...
[08:05:33.786] | : Number of chunks: 1
[08:05:33.786] | : getGlobalsAndPackagesXApply() ...
[08:05:33.786] | : . future.globals: TRUE
[08:05:33.793] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:33.794] | : . needed namespaces: [n=0] 
[08:05:33.794] | : . use_args: TRUE
[08:05:33.794] | : . Getting '...' globals ...
[08:05:33.794] | : . ' '...' content: [n=0] 
[08:05:33.794] | : . ' List of 1
[08:05:33.794] | : . '  $ ...: list()
[08:05:33.794] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.794] | : . '  - attr(*, "where")=List of 1
[08:05:33.794] | : . '   ..$ ...:<environment: 0x56342c693dd0> 
[08:05:33.794] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.794] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:33.794] | : . '  - attr(*, "total_size")= num NA
[08:05:33.797] | : . Getting '...' globals ... done
[08:05:33.797] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:33.797] | : . List of 3
[08:05:33.797] | : .  $ ...future.FUN:function (ii)  
[08:05:33.797] | : .  $ a            : num 1
[08:05:33.797] | : .  $ ...          : list()
[08:05:33.797] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.797] | : .  - attr(*, "where")=List of 3
[08:05:33.797] | : .   ..$ ...future.FUN:<environment: 0x56342c693dd0> 
[08:05:33.797] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:33.797] | : .   ..$ ...          :<environment: 0x56342c693dd0> 
[08:05:33.797] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.797] | : .  - attr(*, "resolved")= logi FALSE
[08:05:33.797] | : .  - attr(*, "total_size")= num 4124
[08:05:33.801] | : . Packages to be attached in all futures: [n=0] 
[08:05:33.801] | : getGlobalsAndPackagesXApply() ... done
[08:05:33.801] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:33.801] | : List of 6
[08:05:33.801] | :  $ ...future.FUN            :function (ii)  
[08:05:33.801] | :  $ a                        : num 1
[08:05:33.801] | :  $ ...                      : list()
[08:05:33.801] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.801] | :  $ ...future.elements_ii    : NULL
[08:05:33.801] | :  $ ...future.seeds_ii       : NULL
[08:05:33.801] | :  $ ...future.globals.maxSize: NULL
[08:05:33.801] | :  - attr(*, "where")=List of 6
[08:05:33.801] | :   ..$ ...future.FUN            :<environment: 0x56342c693dd0> 
[08:05:33.801] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:33.801] | :   ..$ ...                      :<environment: 0x56342c693dd0> 
[08:05:33.801] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:33.801] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:33.801] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:33.801] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.801] | :  - attr(*, "resolved")= logi FALSE
[08:05:33.801] | :  - attr(*, "total_size")= num 4124
[08:05:33.806] | : Number of futures (= number of chunks): 1
[08:05:33.806] | : Launching 1 futures (chunks) ...
[08:05:33.806] | : Chunk #1 of 1 ...
[08:05:33.806] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:33.807] | :    + additional globals found: [n=0] 
[08:05:33.807] | :    + additional namespaces needed: [n=0] 
[08:05:33.807] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:33.807] | :  - seeds: <none>
[08:05:33.807] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:33.902] | : Created future:
[08:05:33.902] | : MultisessionFuture:
[08:05:33.902] | : Label: ‘future_lapply-1’
[08:05:33.902] | : Expression:
[08:05:33.902] | : {
[08:05:33.902] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:33.902] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:33.902] | :     "# as a global variable                                         "
[08:05:33.902] | :     do.call(function(...) {
[08:05:33.902] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:33.902] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:33.902] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:33.902] | :         "# anonymous function.                                          "
[08:05:33.902] | :         "#                                                              "
[08:05:33.902] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:33.902] | :         "# function environment of FUN() to the calling environment.    "
[08:05:33.902] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:33.902] | :         "# global environment, which is where globals are written.      "
[08:05:33.902] | :         penv <- env <- environment(...future.FUN)
[08:05:33.902] | :         repeat {
[08:05:33.902] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:33.902] | :                 emptyenv())) 
[08:05:33.902] | :                 break
[08:05:33.902] | :             penv <- env
[08:05:33.902] | :             env <- parent.env(env)
[08:05:33.902] | :         }
[08:05:33.902] | :         if (identical(penv, globalenv())) {
[08:05:33.902] | :             environment(...future.FUN) <- environment()
[08:05:33.902] | :         }
[08:05:33.902] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:33.902] | :             !isNamespace(penv)) {
[08:05:33.902] | :             parent.env(penv) <- environment()
[08:05:33.902] | :         }
[08:05:33.902] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:33.902] | :         {
[08:05:33.902] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:33.902] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:33.902] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:33.902] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:33.902] | :                 on.exit(options(oopts), add = TRUE)
[08:05:33.902] | :             }
[08:05:33.902] | :             {
[08:05:33.902] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:33.902] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:33.902] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:33.902] | :                   {
[08:05:33.902] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:33.902] | :                   }
[08:05:33.902] | :                 })
[08:05:33.902] | :             }
[08:05:33.902] | :         }
[08:05:33.902] | :     }, args = future.call.arguments)
[08:05:33.902] | : }
[08:05:33.902] | : Globals: 6 objects totaling 4.29 KiB (function ‘...future.FUN’ of 511 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:33.902] | : Packages: <none>
[08:05:33.902] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:33.902] | : Capture standard output: TRUE
[08:05:33.902] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:33.902] | : Immediate condition classes: ‘immediateCondition’
[08:05:33.902] | : Lazy evaluation: FALSE
[08:05:33.902] | : Local evaluation: TRUE
[08:05:33.902] | : Asynchronous evaluation: TRUE
[08:05:33.902] | : Early signaling: FALSE
[08:05:33.902] | : Environment: R_GlobalEnv
[08:05:33.902] | : State: ‘running’
[08:05:33.902] | : Resolved: FALSE
[08:05:33.902] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-38
[08:05:33.902] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:33.902] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:33.902] | : Value: <not collected>
[08:05:33.902] | : Conditions captured: <none>
[08:05:33.917] | : Chunk #1 of 1 ... DONE
[08:05:33.917] | : Launching 1 futures (chunks) ... DONE
[08:05:33.917] | : Resolving 1 futures (chunks) ...
[08:05:33.947] | :  - Number of value chunks collected: 1
[08:05:33.947] | : Resolving 1 futures (chunks) ... DONE
[08:05:33.947] | : Reducing values from 1 chunks ...
[08:05:33.947] | :  - Number of values collected after concatenation: 1
[08:05:33.948] | :  - Number of values expected: 1
[08:05:33.948] | : Reducing values from 1 chunks ... DONE
[08:05:33.948] | future_lapply() -> future_xapply() ... done
[08:05:33.948] future_lapply() ... done
- future_lapply(X, ...) - '{ a; a <- a + 1 }' ...
[08:05:33.948] future_lapply() ...
[08:05:33.949] | Globals in FUN(): [n=4] ‘{’, ‘a’, ‘<-’, ‘+’
[08:05:33.949] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:33.949] | future_lapply() -> future_xapply() ...
[08:05:33.950] | : Number of chunks: 1
[08:05:33.950] | : getGlobalsAndPackagesXApply() ...
[08:05:33.950] | : . future.globals: TRUE
[08:05:33.957] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:33.957] | : . needed namespaces: [n=0] 
[08:05:33.958] | : . use_args: TRUE
[08:05:33.958] | : . Getting '...' globals ...
[08:05:33.958] | : . ' '...' content: [n=0] 
[08:05:33.958] | : . ' List of 1
[08:05:33.958] | : . '  $ ...: list()
[08:05:33.958] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.958] | : . '  - attr(*, "where")=List of 1
[08:05:33.958] | : . '   ..$ ...:<environment: 0x56342e2fe220> 
[08:05:33.958] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.958] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:33.958] | : . '  - attr(*, "total_size")= num NA
[08:05:33.961] | : . Getting '...' globals ... done
[08:05:33.961] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:33.961] | : . List of 3
[08:05:33.961] | : .  $ ...future.FUN:function (ii)  
[08:05:33.961] | : .  $ a            : num 1
[08:05:33.961] | : .  $ ...          : list()
[08:05:33.961] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.961] | : .  - attr(*, "where")=List of 3
[08:05:33.961] | : .   ..$ ...future.FUN:<environment: 0x56342e2fe220> 
[08:05:33.961] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:33.961] | : .   ..$ ...          :<environment: 0x56342e2fe220> 
[08:05:33.961] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.961] | : .  - attr(*, "resolved")= logi FALSE
[08:05:33.961] | : .  - attr(*, "total_size")= num 4140
[08:05:33.964] | : . Packages to be attached in all futures: [n=0] 
[08:05:33.965] | : getGlobalsAndPackagesXApply() ... done
[08:05:33.965] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:33.965] | : List of 6
[08:05:33.965] | :  $ ...future.FUN            :function (ii)  
[08:05:33.965] | :  $ a                        : num 1
[08:05:33.965] | :  $ ...                      : list()
[08:05:33.965] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:33.965] | :  $ ...future.elements_ii    : NULL
[08:05:33.965] | :  $ ...future.seeds_ii       : NULL
[08:05:33.965] | :  $ ...future.globals.maxSize: NULL
[08:05:33.965] | :  - attr(*, "where")=List of 6
[08:05:33.965] | :   ..$ ...future.FUN            :<environment: 0x56342e2fe220> 
[08:05:33.965] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:33.965] | :   ..$ ...                      :<environment: 0x56342e2fe220> 
[08:05:33.965] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:33.965] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:33.965] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:33.965] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:33.965] | :  - attr(*, "resolved")= logi FALSE
[08:05:33.965] | :  - attr(*, "total_size")= num 4140
[08:05:33.970] | : Number of futures (= number of chunks): 1
[08:05:33.970] | : Launching 1 futures (chunks) ...
[08:05:33.970] | : Chunk #1 of 1 ...
[08:05:33.970] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:33.970] | :    + additional globals found: [n=0] 
[08:05:33.971] | :    + additional namespaces needed: [n=0] 
[08:05:33.971] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:33.971] | :  - seeds: <none>
[08:05:33.971] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:34.067] | : Created future:
[08:05:34.067] | : MultisessionFuture:
[08:05:34.067] | : Label: ‘future_lapply-1’
[08:05:34.067] | : Expression:
[08:05:34.067] | : {
[08:05:34.067] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:34.067] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:34.067] | :     "# as a global variable                                         "
[08:05:34.067] | :     do.call(function(...) {
[08:05:34.067] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:34.067] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:34.067] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:34.067] | :         "# anonymous function.                                          "
[08:05:34.067] | :         "#                                                              "
[08:05:34.067] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:34.067] | :         "# function environment of FUN() to the calling environment.    "
[08:05:34.067] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:34.067] | :         "# global environment, which is where globals are written.      "
[08:05:34.067] | :         penv <- env <- environment(...future.FUN)
[08:05:34.067] | :         repeat {
[08:05:34.067] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:34.067] | :                 emptyenv())) 
[08:05:34.067] | :                 break
[08:05:34.067] | :             penv <- env
[08:05:34.067] | :             env <- parent.env(env)
[08:05:34.067] | :         }
[08:05:34.067] | :         if (identical(penv, globalenv())) {
[08:05:34.067] | :             environment(...future.FUN) <- environment()
[08:05:34.067] | :         }
[08:05:34.067] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:34.067] | :             !isNamespace(penv)) {
[08:05:34.067] | :             parent.env(penv) <- environment()
[08:05:34.067] | :         }
[08:05:34.067] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:34.067] | :         {
[08:05:34.067] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:34.067] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:34.067] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:34.067] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:34.067] | :                 on.exit(options(oopts), add = TRUE)
[08:05:34.067] | :             }
[08:05:34.067] | :             {
[08:05:34.067] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:34.067] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:34.067] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:34.067] | :                   {
[08:05:34.067] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:34.067] | :                   }
[08:05:34.067] | :                 })
[08:05:34.067] | :             }
[08:05:34.067] | :         }
[08:05:34.067] | :     }, args = future.call.arguments)
[08:05:34.067] | : }
[08:05:34.067] | : Globals: 6 objects totaling 4.30 KiB (function ‘...future.FUN’ of 519 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:34.067] | : Packages: <none>
[08:05:34.067] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:34.067] | : Capture standard output: TRUE
[08:05:34.067] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:34.067] | : Immediate condition classes: ‘immediateCondition’
[08:05:34.067] | : Lazy evaluation: FALSE
[08:05:34.067] | : Local evaluation: TRUE
[08:05:34.067] | : Asynchronous evaluation: TRUE
[08:05:34.067] | : Early signaling: FALSE
[08:05:34.067] | : Environment: R_GlobalEnv
[08:05:34.067] | : State: ‘running’
[08:05:34.067] | : Resolved: FALSE
[08:05:34.067] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-39
[08:05:34.067] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:34.067] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:34.067] | : Value: <not collected>
[08:05:34.067] | : Conditions captured: <none>
[08:05:34.079] | : Chunk #1 of 1 ... DONE
[08:05:34.080] | : Launching 1 futures (chunks) ... DONE
[08:05:34.080] | : Resolving 1 futures (chunks) ...
[08:05:34.122] | :  - Number of value chunks collected: 1
[08:05:34.122] | : Resolving 1 futures (chunks) ... DONE
[08:05:34.123] | : Reducing values from 1 chunks ...
[08:05:34.123] | :  - Number of values collected after concatenation: 1
[08:05:34.123] | :  - Number of values expected: 1
[08:05:34.123] | : Reducing values from 1 chunks ... DONE
[08:05:34.123] | future_lapply() -> future_xapply() ... done
[08:05:34.123] future_lapply() ... done
- future_lapply(..., future.globals = <list>) ...
[08:05:34.123] future_lapply() ...
[08:05:34.124] | Globals in FUN(): [n=1] ‘a’
[08:05:34.124] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:34.124] | future_lapply() -> future_xapply() ...
[08:05:34.124] | : Number of chunks: 1
[08:05:34.124] | : getGlobalsAndPackagesXApply() ...
[08:05:34.124] | : . future.globals: <name-value list> with names ‘a’
[08:05:34.125] | : . use_args: TRUE
[08:05:34.125] | : . Getting '...' globals ...
[08:05:34.125] | : . ' '...' content: [n=0] 
[08:05:34.125] | : . ' List of 1
[08:05:34.125] | : . '  $ ...: list()
[08:05:34.125] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.125] | : . '  - attr(*, "where")=List of 1
[08:05:34.125] | : . '   ..$ ...:<environment: 0x56342ea50810> 
[08:05:34.125] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.125] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:34.125] | : . '  - attr(*, "total_size")= num NA
[08:05:34.130] | : . Getting '...' globals ... done
[08:05:34.130] | : . Globals to be used in all futures (chunks): [n=3] ‘a’, ‘...future.FUN’, ‘...’
[08:05:34.131] | : . List of 3
[08:05:34.131] | : .  $ a            : num 42
[08:05:34.131] | : .  $ ...future.FUN:function (x)  
[08:05:34.131] | : .  $ ...          : list()
[08:05:34.131] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.131] | : .  - attr(*, "where")=List of 3
[08:05:34.131] | : .   ..$ a            :<environment: R_EmptyEnv> 
[08:05:34.131] | : .   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[08:05:34.131] | : .   ..$ ...          :<environment: 0x56342ea50810> 
[08:05:34.131] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.131] | : .  - attr(*, "resolved")= logi FALSE
[08:05:34.131] | : .  - attr(*, "total_size")= num NA
[08:05:34.134] | : . Packages to be attached in all futures: [n=0] 
[08:05:34.135] | : getGlobalsAndPackagesXApply() ... done
[08:05:34.135] | : Globals pass to each chunk: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:34.135] | : List of 6
[08:05:34.135] | :  $ a                        : num 42
[08:05:34.135] | :  $ ...future.FUN            :function (x)  
[08:05:34.135] | :  $ ...                      : list()
[08:05:34.135] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.135] | :  $ ...future.elements_ii    : NULL
[08:05:34.135] | :  $ ...future.seeds_ii       : NULL
[08:05:34.135] | :  $ ...future.globals.maxSize: NULL
[08:05:34.135] | :  - attr(*, "where")=List of 6
[08:05:34.135] | :   ..$ a                        :<environment: R_EmptyEnv> 
[08:05:34.135] | :   ..$ ...future.FUN            :<environment: R_GlobalEnv> 
[08:05:34.135] | :   ..$ ...                      :<environment: 0x56342ea50810> 
[08:05:34.135] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:34.135] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:34.135] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:34.135] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.135] | :  - attr(*, "resolved")= logi FALSE
[08:05:34.135] | :  - attr(*, "total_size")= num NA
[08:05:34.139] | : Number of futures (= number of chunks): 1
[08:05:34.140] | : Launching 1 futures (chunks) ...
[08:05:34.140] | : Chunk #1 of 1 ...
[08:05:34.140] | :  - seeds: <none>
[08:05:34.140] | :  - All globals exported: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:34.240] | : Created future:
[08:05:34.240] | : MultisessionFuture:
[08:05:34.240] | : Label: ‘future_lapply-1’
[08:05:34.240] | : Expression:
[08:05:34.240] | : {
[08:05:34.240] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:34.240] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:34.240] | :     "# as a global variable                                         "
[08:05:34.240] | :     do.call(function(...) {
[08:05:34.240] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:34.240] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:34.240] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:34.240] | :         "# anonymous function.                                          "
[08:05:34.240] | :         "#                                                              "
[08:05:34.240] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:34.240] | :         "# function environment of FUN() to the calling environment.    "
[08:05:34.240] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:34.240] | :         "# global environment, which is where globals are written.      "
[08:05:34.240] | :         penv <- env <- environment(...future.FUN)
[08:05:34.240] | :         repeat {
[08:05:34.240] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:34.240] | :                 emptyenv())) 
[08:05:34.240] | :                 break
[08:05:34.240] | :             penv <- env
[08:05:34.240] | :             env <- parent.env(env)
[08:05:34.240] | :         }
[08:05:34.240] | :         if (identical(penv, globalenv())) {
[08:05:34.240] | :             environment(...future.FUN) <- environment()
[08:05:34.240] | :         }
[08:05:34.240] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:34.240] | :             !isNamespace(penv)) {
[08:05:34.240] | :             parent.env(penv) <- environment()
[08:05:34.240] | :         }
[08:05:34.240] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:34.240] | :         {
[08:05:34.240] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:34.240] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:34.240] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:34.240] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:34.240] | :                 on.exit(options(oopts), add = TRUE)
[08:05:34.240] | :             }
[08:05:34.240] | :             {
[08:05:34.240] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:34.240] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:34.240] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:34.240] | :                   {
[08:05:34.240] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:34.240] | :                   }
[08:05:34.240] | :                 })
[08:05:34.240] | :             }
[08:05:34.240] | :         }
[08:05:34.240] | :     }, args = future.call.arguments)
[08:05:34.240] | : }
[08:05:34.240] | : Globals: 6 objects totaling 4.16 KiB (function ‘...future.FUN’ of 298 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:34.240] | : Packages: <none>
[08:05:34.240] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:34.240] | : Capture standard output: TRUE
[08:05:34.240] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:34.240] | : Immediate condition classes: ‘immediateCondition’
[08:05:34.240] | : Lazy evaluation: FALSE
[08:05:34.240] | : Local evaluation: TRUE
[08:05:34.240] | : Asynchronous evaluation: TRUE
[08:05:34.240] | : Early signaling: FALSE
[08:05:34.240] | : Environment: R_GlobalEnv
[08:05:34.240] | : State: ‘running’
[08:05:34.240] | : Resolved: FALSE
[08:05:34.240] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-40
[08:05:34.240] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:34.240] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:34.240] | : Value: <not collected>
[08:05:34.240] | : Conditions captured: <none>
[08:05:34.252] | : Chunk #1 of 1 ... DONE
[08:05:34.252] | : Launching 1 futures (chunks) ... DONE
[08:05:34.252] | : Resolving 1 futures (chunks) ...
[08:05:34.316] | :  - Number of value chunks collected: 1
[08:05:34.316] | : Resolving 1 futures (chunks) ... DONE
[08:05:34.316] | : Reducing values from 1 chunks ...
[08:05:34.316] | :  - Number of values collected after concatenation: 1
[08:05:34.316] | :  - Number of values expected: 1
[08:05:34.317] | : Reducing values from 1 chunks ... DONE
[08:05:34.317] | future_lapply() -> future_xapply() ... done
[08:05:34.317] future_lapply() ... done
List of 1
 $ : num 42

> message("*** future_lapply() - tricky globals ... DONE")
*** future_lapply() - tricky globals ... DONE

> message("*** future_lapply() - missing arguments ...")
*** future_lapply() - missing arguments ...

> foo <- function(x, abc) future_lapply(x, FUN = function(y) y)

> y <- foo(1:2)
[08:05:34.318] future_lapply() ...
[08:05:34.318] | Globals in FUN(): [n=0] 
[08:05:34.319] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:34.319] | future_lapply() -> future_xapply() ...
[08:05:34.319] | : Number of chunks: 2
[08:05:34.319] | : getGlobalsAndPackagesXApply() ...
[08:05:34.319] | : . future.globals: TRUE
[08:05:34.323] | : . globals found/used: [n=1] ‘FUN’
[08:05:34.323] | : . needed namespaces: [n=0] 
[08:05:34.323] | : . use_args: TRUE
[08:05:34.323] | : . Getting '...' globals ...
[08:05:34.324] | : . ' '...' content: [n=0] 
[08:05:34.324] | : . ' List of 1
[08:05:34.324] | : . '  $ ...: list()
[08:05:34.324] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.324] | : . '  - attr(*, "where")=List of 1
[08:05:34.324] | : . '   ..$ ...:<environment: 0x56342aba7ad8> 
[08:05:34.324] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.324] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:34.324] | : . '  - attr(*, "total_size")= num NA
[08:05:34.326] | : . Getting '...' globals ... done
[08:05:34.327] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:34.327] | : . List of 2
[08:05:34.327] | : .  $ ...future.FUN:function (y)  
[08:05:34.327] | : .  $ ...          : list()
[08:05:34.327] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.327] | : .  - attr(*, "where")=List of 2
[08:05:34.327] | : .   ..$ ...future.FUN:<environment: 0x56342aba7ad8> 
[08:05:34.327] | : .   ..$ ...          :<environment: 0x56342aba7ad8> 
[08:05:34.327] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.327] | : .  - attr(*, "resolved")= logi FALSE
[08:05:34.327] | : .  - attr(*, "total_size")= num 3716
[08:05:34.329] | : . Packages to be attached in all futures: [n=0] 
[08:05:34.330] | : getGlobalsAndPackagesXApply() ... done
[08:05:34.330] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:34.330] | : List of 5
[08:05:34.330] | :  $ ...future.FUN            :function (y)  
[08:05:34.330] | :  $ ...                      : list()
[08:05:34.330] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.330] | :  $ ...future.elements_ii    : NULL
[08:05:34.330] | :  $ ...future.seeds_ii       : NULL
[08:05:34.330] | :  $ ...future.globals.maxSize: NULL
[08:05:34.330] | :  - attr(*, "where")=List of 5
[08:05:34.330] | :   ..$ ...future.FUN            :<environment: 0x56342aba7ad8> 
[08:05:34.330] | :   ..$ ...                      :<environment: 0x56342aba7ad8> 
[08:05:34.330] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:34.330] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:34.330] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:34.330] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.330] | :  - attr(*, "resolved")= logi FALSE
[08:05:34.330] | :  - attr(*, "total_size")= num 3716
[08:05:34.334] | : Number of futures (= number of chunks): 2
[08:05:34.334] | : Launching 2 futures (chunks) ...
[08:05:34.335] | : Chunk #1 of 2 ...
[08:05:34.335] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:34.335] | :    + additional globals found: [n=0] 
[08:05:34.335] | :    + additional namespaces needed: [n=0] 
[08:05:34.335] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:34.336] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:34.336] | :  - seeds: <none>
[08:05:34.336] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:34.448] | : Created future:
[08:05:34.448] | : MultisessionFuture:
[08:05:34.448] | : Label: ‘future_lapply-1’
[08:05:34.448] | : Expression:
[08:05:34.448] | : {
[08:05:34.448] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:34.448] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:34.448] | :     "# as a global variable                                         "
[08:05:34.448] | :     do.call(function(...) {
[08:05:34.448] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:34.448] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:34.448] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:34.448] | :         "# anonymous function.                                          "
[08:05:34.448] | :         "#                                                              "
[08:05:34.448] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:34.448] | :         "# function environment of FUN() to the calling environment.    "
[08:05:34.448] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:34.448] | :         "# global environment, which is where globals are written.      "
[08:05:34.448] | :         penv <- env <- environment(...future.FUN)
[08:05:34.448] | :         repeat {
[08:05:34.448] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:34.448] | :                 emptyenv())) 
[08:05:34.448] | :                 break
[08:05:34.448] | :             penv <- env
[08:05:34.448] | :             env <- parent.env(env)
[08:05:34.448] | :         }
[08:05:34.448] | :         if (identical(penv, globalenv())) {
[08:05:34.448] | :             environment(...future.FUN) <- environment()
[08:05:34.448] | :         }
[08:05:34.448] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:34.448] | :             !isNamespace(penv)) {
[08:05:34.448] | :             parent.env(penv) <- environment()
[08:05:34.448] | :         }
[08:05:34.448] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:34.448] | :         {
[08:05:34.448] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:34.448] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:34.448] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:34.448] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:34.448] | :                 on.exit(options(oopts), add = TRUE)
[08:05:34.448] | :             }
[08:05:34.448] | :             {
[08:05:34.448] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:34.448] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:34.448] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:34.448] | :                   {
[08:05:34.448] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:34.448] | :                   }
[08:05:34.448] | :                 })
[08:05:34.448] | :             }
[08:05:34.448] | :         }
[08:05:34.448] | :     }, args = future.call.arguments)
[08:05:34.448] | : }
[08:05:34.448] | : Globals: 5 objects totaling 3.71 KiB (function ‘...future.FUN’ of 295 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:34.448] | : Packages: <none>
[08:05:34.448] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:34.448] | : Capture standard output: TRUE
[08:05:34.448] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:34.448] | : Immediate condition classes: ‘immediateCondition’
[08:05:34.448] | : Lazy evaluation: FALSE
[08:05:34.448] | : Local evaluation: TRUE
[08:05:34.448] | : Asynchronous evaluation: TRUE
[08:05:34.448] | : Early signaling: FALSE
[08:05:34.448] | : Environment: 0x56342aba7598
[08:05:34.448] | : State: ‘running’
[08:05:34.448] | : Resolved: FALSE
[08:05:34.448] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-41
[08:05:34.448] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:34.448] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:34.448] | : Value: <not collected>
[08:05:34.448] | : Conditions captured: <none>
[08:05:34.460] | : Chunk #1 of 2 ... DONE
[08:05:34.460] | : Chunk #2 of 2 ...
[08:05:34.461] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:34.461] | :    + additional globals found: [n=0] 
[08:05:34.461] | :    + additional namespaces needed: [n=0] 
[08:05:34.461] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:34.461] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:34.462] | :  - seeds: <none>
[08:05:34.462] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:34.563] | : Created future:
[08:05:34.563] | : MultisessionFuture:
[08:05:34.563] | : Label: ‘future_lapply-2’
[08:05:34.563] | : Expression:
[08:05:34.563] | : {
[08:05:34.563] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:34.563] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:34.563] | :     "# as a global variable                                         "
[08:05:34.563] | :     do.call(function(...) {
[08:05:34.563] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:34.563] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:34.563] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:34.563] | :         "# anonymous function.                                          "
[08:05:34.563] | :         "#                                                              "
[08:05:34.563] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:34.563] | :         "# function environment of FUN() to the calling environment.    "
[08:05:34.563] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:34.563] | :         "# global environment, which is where globals are written.      "
[08:05:34.563] | :         penv <- env <- environment(...future.FUN)
[08:05:34.563] | :         repeat {
[08:05:34.563] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:34.563] | :                 emptyenv())) 
[08:05:34.563] | :                 break
[08:05:34.563] | :             penv <- env
[08:05:34.563] | :             env <- parent.env(env)
[08:05:34.563] | :         }
[08:05:34.563] | :         if (identical(penv, globalenv())) {
[08:05:34.563] | :             environment(...future.FUN) <- environment()
[08:05:34.563] | :         }
[08:05:34.563] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:34.563] | :             !isNamespace(penv)) {
[08:05:34.563] | :             parent.env(penv) <- environment()
[08:05:34.563] | :         }
[08:05:34.563] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:34.563] | :         {
[08:05:34.563] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:34.563] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:34.563] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:34.563] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:34.563] | :                 on.exit(options(oopts), add = TRUE)
[08:05:34.563] | :             }
[08:05:34.563] | :             {
[08:05:34.563] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:34.563] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:34.563] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:34.563] | :                   {
[08:05:34.563] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:34.563] | :                   }
[08:05:34.563] | :                 })
[08:05:34.563] | :             }
[08:05:34.563] | :         }
[08:05:34.563] | :     }, args = future.call.arguments)
[08:05:34.563] | : }
[08:05:34.563] | : Globals: 5 objects totaling 3.71 KiB (function ‘...future.FUN’ of 295 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:34.563] | : Packages: <none>
[08:05:34.563] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:34.563] | : Capture standard output: TRUE
[08:05:34.563] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:34.563] | : Immediate condition classes: ‘immediateCondition’
[08:05:34.563] | : Lazy evaluation: FALSE
[08:05:34.563] | : Local evaluation: TRUE
[08:05:34.563] | : Asynchronous evaluation: TRUE
[08:05:34.563] | : Early signaling: FALSE
[08:05:34.563] | : Environment: 0x56342aba7598
[08:05:34.563] | : State: ‘running’
[08:05:34.563] | : Resolved: FALSE
[08:05:34.563] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-42
[08:05:34.563] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:34.563] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:34.563] | : Value: <not collected>
[08:05:34.563] | : Conditions captured: <none>
[08:05:34.576] | : Chunk #2 of 2 ... DONE
[08:05:34.576] | : Launching 2 futures (chunks) ... DONE
[08:05:34.576] | : Resolving 2 futures (chunks) ...
[08:05:34.608] | :  - Number of value chunks collected: 2
[08:05:34.608] | : Resolving 2 futures (chunks) ... DONE
[08:05:34.608] | : Reducing values from 2 chunks ...
[08:05:34.608] | :  - Number of values collected after concatenation: 2
[08:05:34.608] | :  - Number of values expected: 2
[08:05:34.608] | : Reducing values from 2 chunks ... DONE
[08:05:34.608] | future_lapply() -> future_xapply() ... done
[08:05:34.609] future_lapply() ... done

> stopifnot(identical(y, as.list(1:2)))

> message("*** future_lapply() - missing arguments ... DONE")
*** future_lapply() - missing arguments ... DONE

> message("*** future_lapply() - false positives ...")
*** future_lapply() - false positives ...

> suppressWarnings(rm(list = "xyz"))

> foo <- function(x, abc) future_lapply(x, FUN = function(y) y)

> y <- foo(1:2, abc = (xyz >= 3.14))
[08:05:34.609] future_lapply() ...
[08:05:34.610] | Globals in FUN(): [n=0] 
[08:05:34.610] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:34.610] | future_lapply() -> future_xapply() ...
[08:05:34.610] | : Number of chunks: 2
[08:05:34.611] | : getGlobalsAndPackagesXApply() ...
[08:05:34.611] | : . future.globals: TRUE
[08:05:34.614] | : . globals found/used: [n=1] ‘FUN’
[08:05:34.614] | : . needed namespaces: [n=0] 
[08:05:34.615] | : . use_args: TRUE
[08:05:34.615] | : . Getting '...' globals ...
[08:05:34.615] | : . ' '...' content: [n=0] 
[08:05:34.615] | : . ' List of 1
[08:05:34.615] | : . '  $ ...: list()
[08:05:34.615] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.615] | : . '  - attr(*, "where")=List of 1
[08:05:34.615] | : . '   ..$ ...:<environment: 0x56342b00b9e0> 
[08:05:34.615] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.615] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:34.615] | : . '  - attr(*, "total_size")= num NA
[08:05:34.618] | : . Getting '...' globals ... done
[08:05:34.618] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:34.618] | : . List of 2
[08:05:34.618] | : .  $ ...future.FUN:function (y)  
[08:05:34.618] | : .  $ ...          : list()
[08:05:34.618] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.618] | : .  - attr(*, "where")=List of 2
[08:05:34.618] | : .   ..$ ...future.FUN:<environment: 0x56342b00b9e0> 
[08:05:34.618] | : .   ..$ ...          :<environment: 0x56342b00b9e0> 
[08:05:34.618] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.618] | : .  - attr(*, "resolved")= logi FALSE
[08:05:34.618] | : .  - attr(*, "total_size")= num 3904
[08:05:34.621] | : . Packages to be attached in all futures: [n=0] 
[08:05:34.621] | : getGlobalsAndPackagesXApply() ... done
[08:05:34.621] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:34.621] | : List of 5
[08:05:34.621] | :  $ ...future.FUN            :function (y)  
[08:05:34.621] | :  $ ...                      : list()
[08:05:34.621] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.621] | :  $ ...future.elements_ii    : NULL
[08:05:34.621] | :  $ ...future.seeds_ii       : NULL
[08:05:34.621] | :  $ ...future.globals.maxSize: NULL
[08:05:34.621] | :  - attr(*, "where")=List of 5
[08:05:34.621] | :   ..$ ...future.FUN            :<environment: 0x56342b00b9e0> 
[08:05:34.621] | :   ..$ ...                      :<environment: 0x56342b00b9e0> 
[08:05:34.621] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:34.621] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:34.621] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:34.621] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.621] | :  - attr(*, "resolved")= logi FALSE
[08:05:34.621] | :  - attr(*, "total_size")= num 3904
[08:05:34.625] | : Number of futures (= number of chunks): 2
[08:05:34.626] | : Launching 2 futures (chunks) ...
[08:05:34.626] | : Chunk #1 of 2 ...
[08:05:34.626] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:34.626] | :    + additional globals found: [n=0] 
[08:05:34.626] | :    + additional namespaces needed: [n=0] 
[08:05:34.627] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:34.627] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:34.627] | :  - seeds: <none>
[08:05:34.627] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:34.738] | : Created future:
[08:05:34.738] | : MultisessionFuture:
[08:05:34.738] | : Label: ‘future_lapply-1’
[08:05:34.738] | : Expression:
[08:05:34.738] | : {
[08:05:34.738] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:34.738] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:34.738] | :     "# as a global variable                                         "
[08:05:34.738] | :     do.call(function(...) {
[08:05:34.738] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:34.738] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:34.738] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:34.738] | :         "# anonymous function.                                          "
[08:05:34.738] | :         "#                                                              "
[08:05:34.738] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:34.738] | :         "# function environment of FUN() to the calling environment.    "
[08:05:34.738] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:34.738] | :         "# global environment, which is where globals are written.      "
[08:05:34.738] | :         penv <- env <- environment(...future.FUN)
[08:05:34.738] | :         repeat {
[08:05:34.738] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:34.738] | :                 emptyenv())) 
[08:05:34.738] | :                 break
[08:05:34.738] | :             penv <- env
[08:05:34.738] | :             env <- parent.env(env)
[08:05:34.738] | :         }
[08:05:34.738] | :         if (identical(penv, globalenv())) {
[08:05:34.738] | :             environment(...future.FUN) <- environment()
[08:05:34.738] | :         }
[08:05:34.738] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:34.738] | :             !isNamespace(penv)) {
[08:05:34.738] | :             parent.env(penv) <- environment()
[08:05:34.738] | :         }
[08:05:34.738] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:34.738] | :         {
[08:05:34.738] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:34.738] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:34.738] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:34.738] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:34.738] | :                 on.exit(options(oopts), add = TRUE)
[08:05:34.738] | :             }
[08:05:34.738] | :             {
[08:05:34.738] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:34.738] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:34.738] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:34.738] | :                   {
[08:05:34.738] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:34.738] | :                   }
[08:05:34.738] | :                 })
[08:05:34.738] | :             }
[08:05:34.738] | :         }
[08:05:34.738] | :     }, args = future.call.arguments)
[08:05:34.738] | : }
[08:05:34.738] | : Globals: 5 objects totaling 3.80 KiB (function ‘...future.FUN’ of 389 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:34.738] | : Packages: <none>
[08:05:34.738] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:34.738] | : Capture standard output: TRUE
[08:05:34.738] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:34.738] | : Immediate condition classes: ‘immediateCondition’
[08:05:34.738] | : Lazy evaluation: FALSE
[08:05:34.738] | : Local evaluation: TRUE
[08:05:34.738] | : Asynchronous evaluation: TRUE
[08:05:34.738] | : Early signaling: FALSE
[08:05:34.738] | : Environment: 0x56342b00b5f0
[08:05:34.738] | : State: ‘running’
[08:05:34.738] | : Resolved: FALSE
[08:05:34.738] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-43
[08:05:34.738] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:34.738] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:34.738] | : Value: <not collected>
[08:05:34.738] | : Conditions captured: <none>
[08:05:34.750] | : Chunk #1 of 2 ... DONE
[08:05:34.750] | : Chunk #2 of 2 ...
[08:05:34.751] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:34.751] | :    + additional globals found: [n=0] 
[08:05:34.751] | :    + additional namespaces needed: [n=0] 
[08:05:34.751] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:34.751] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:34.751] | :  - seeds: <none>
[08:05:34.751] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:34.848] | : Created future:
[08:05:34.848] | : MultisessionFuture:
[08:05:34.848] | : Label: ‘future_lapply-2’
[08:05:34.848] | : Expression:
[08:05:34.848] | : {
[08:05:34.848] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:34.848] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:34.848] | :     "# as a global variable                                         "
[08:05:34.848] | :     do.call(function(...) {
[08:05:34.848] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:34.848] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:34.848] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:34.848] | :         "# anonymous function.                                          "
[08:05:34.848] | :         "#                                                              "
[08:05:34.848] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:34.848] | :         "# function environment of FUN() to the calling environment.    "
[08:05:34.848] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:34.848] | :         "# global environment, which is where globals are written.      "
[08:05:34.848] | :         penv <- env <- environment(...future.FUN)
[08:05:34.848] | :         repeat {
[08:05:34.848] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:34.848] | :                 emptyenv())) 
[08:05:34.848] | :                 break
[08:05:34.848] | :             penv <- env
[08:05:34.848] | :             env <- parent.env(env)
[08:05:34.848] | :         }
[08:05:34.848] | :         if (identical(penv, globalenv())) {
[08:05:34.848] | :             environment(...future.FUN) <- environment()
[08:05:34.848] | :         }
[08:05:34.848] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:34.848] | :             !isNamespace(penv)) {
[08:05:34.848] | :             parent.env(penv) <- environment()
[08:05:34.848] | :         }
[08:05:34.848] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:34.848] | :         {
[08:05:34.848] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:34.848] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:34.848] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:34.848] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:34.848] | :                 on.exit(options(oopts), add = TRUE)
[08:05:34.848] | :             }
[08:05:34.848] | :             {
[08:05:34.848] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:34.848] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:34.848] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:34.848] | :                   {
[08:05:34.848] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:34.848] | :                   }
[08:05:34.848] | :                 })
[08:05:34.848] | :             }
[08:05:34.848] | :         }
[08:05:34.848] | :     }, args = future.call.arguments)
[08:05:34.848] | : }
[08:05:34.848] | : Globals: 5 objects totaling 3.80 KiB (function ‘...future.FUN’ of 389 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:34.848] | : Packages: <none>
[08:05:34.848] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:34.848] | : Capture standard output: TRUE
[08:05:34.848] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:34.848] | : Immediate condition classes: ‘immediateCondition’
[08:05:34.848] | : Lazy evaluation: FALSE
[08:05:34.848] | : Local evaluation: TRUE
[08:05:34.848] | : Asynchronous evaluation: TRUE
[08:05:34.848] | : Early signaling: FALSE
[08:05:34.848] | : Environment: 0x56342b00b5f0
[08:05:34.848] | : State: ‘running’
[08:05:34.848] | : Resolved: FALSE
[08:05:34.848] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-44
[08:05:34.848] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:34.848] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:34.848] | : Value: <not collected>
[08:05:34.848] | : Conditions captured: <none>
[08:05:34.860] | : Chunk #2 of 2 ... DONE
[08:05:34.861] | : Launching 2 futures (chunks) ... DONE
[08:05:34.861] | : Resolving 2 futures (chunks) ...
[08:05:34.925] | :  - Number of value chunks collected: 2
[08:05:34.926] | : Resolving 2 futures (chunks) ... DONE
[08:05:34.926] | : Reducing values from 2 chunks ...
[08:05:34.926] | :  - Number of values collected after concatenation: 2
[08:05:34.926] | :  - Number of values expected: 2
[08:05:34.926] | : Reducing values from 2 chunks ... DONE
[08:05:34.926] | future_lapply() -> future_xapply() ... done
[08:05:34.926] future_lapply() ... done

> stopifnot(identical(y, as.list(1:2)))

> message("*** future_lapply() - false positives ... DONE")
*** future_lapply() - false positives ... DONE

> message("*** future_lapply() - too large ...")
*** future_lapply() - too large ...

> oMaxSize <- getOption("future.globals.maxSize")

> X <- replicate(10, 1:100, simplify = FALSE)

> FUN <- function(x) {
+     getOption("future.globals.maxSize")
+ }

> y0 <- lapply(X, FUN = FUN)

> stopifnot(all(sapply(y0, FUN = identical, oMaxSize)))

> sizes <- unclass(c(FUN = object.size(FUN), X = object.size(X)))

> cat(sprintf("Baseline size of globals: %.2f KiB\n", 
+     sizes[["FUN"]]/1024))
Baseline size of globals: 1.80 KiB

> message("- true positive ...")
- true positive ...

> options(future.globals.maxSize = 1)

> res <- tryCatch({
+     y <- future_lapply(X, FUN = FUN)
+ }, error = identity)
[08:05:34.929] future_lapply() ...
[08:05:34.930] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:34.930] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:34.930] | future_lapply() -> future_xapply() ...
[08:05:34.931] | : Number of chunks: 2
[08:05:34.931] | : getGlobalsAndPackagesXApply() ...
[08:05:34.931] | : . future.globals: TRUE
[08:05:34.936] | : getGlobalsAndPackagesXApply() ... done
[08:05:34.936] | future_lapply() -> future_xapply() ... done
[08:05:34.937] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> res <- NULL

> options(future.globals.maxSize = oMaxSize)

> maxSize <- getOption("future.globals.maxSize")

> y <- future_lapply(X, FUN = FUN)
[08:05:34.937] future_lapply() ...
[08:05:34.937] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:34.938] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:34.938] | future_lapply() -> future_xapply() ...
[08:05:34.938] | : Number of chunks: 2
[08:05:34.938] | : getGlobalsAndPackagesXApply() ...
[08:05:34.938] | : . future.globals: TRUE
[08:05:34.943] | : . globals found/used: [n=1] ‘FUN’
[08:05:34.944] | : . needed namespaces: [n=0] 
[08:05:34.944] | : . use_args: TRUE
[08:05:34.944] | : . Getting '...' globals ...
[08:05:34.944] | : . ' '...' content: [n=0] 
[08:05:34.944] | : . ' List of 1
[08:05:34.944] | : . '  $ ...: list()
[08:05:34.944] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.944] | : . '  - attr(*, "where")=List of 1
[08:05:34.944] | : . '   ..$ ...:<environment: 0x56342dd2bbb8> 
[08:05:34.944] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.944] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:34.944] | : . '  - attr(*, "total_size")= num NA
[08:05:34.947] | : . Getting '...' globals ... done
[08:05:34.947] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:34.947] | : . List of 2
[08:05:34.947] | : .  $ ...future.FUN:function (x)  
[08:05:34.947] | : .  $ ...          : list()
[08:05:34.947] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.947] | : .  - attr(*, "where")=List of 2
[08:05:34.947] | : .   ..$ ...future.FUN:<environment: 0x56342dd2bbb8> 
[08:05:34.947] | : .   ..$ ...          :<environment: 0x56342dd2bbb8> 
[08:05:34.947] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.947] | : .  - attr(*, "resolved")= logi FALSE
[08:05:34.947] | : .  - attr(*, "total_size")= num 4670
[08:05:34.953] | : . Packages to be attached in all futures: [n=0] 
[08:05:34.953] | : getGlobalsAndPackagesXApply() ... done
[08:05:34.953] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:34.953] | : List of 5
[08:05:34.953] | :  $ ...future.FUN            :function (x)  
[08:05:34.953] | :  $ ...                      : list()
[08:05:34.953] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:34.953] | :  $ ...future.elements_ii    : NULL
[08:05:34.953] | :  $ ...future.seeds_ii       : NULL
[08:05:34.953] | :  $ ...future.globals.maxSize: NULL
[08:05:34.953] | :  - attr(*, "where")=List of 5
[08:05:34.953] | :   ..$ ...future.FUN            :<environment: 0x56342dd2bbb8> 
[08:05:34.953] | :   ..$ ...                      :<environment: 0x56342dd2bbb8> 
[08:05:34.953] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:34.953] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:34.953] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:34.953] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:34.953] | :  - attr(*, "resolved")= logi FALSE
[08:05:34.953] | :  - attr(*, "total_size")= num 4670
[08:05:34.957] | : Number of futures (= number of chunks): 2
[08:05:34.957] | : Launching 2 futures (chunks) ...
[08:05:34.957] | : Chunk #1 of 2 ...
[08:05:34.958] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:34.958] | :    + additional globals found: [n=0] 
[08:05:34.958] | :    + additional namespaces needed: [n=0] 
[08:05:34.958] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:34.958] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:34.958] | :  - seeds: <none>
[08:05:34.958] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:35.060] | : Created future:
[08:05:35.060] | : MultisessionFuture:
[08:05:35.060] | : Label: ‘future_lapply-1’
[08:05:35.060] | : Expression:
[08:05:35.060] | : {
[08:05:35.060] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:35.060] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:35.060] | :     "# as a global variable                                         "
[08:05:35.060] | :     do.call(function(...) {
[08:05:35.060] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:35.060] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:35.060] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:35.060] | :         "# anonymous function.                                          "
[08:05:35.060] | :         "#                                                              "
[08:05:35.060] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:35.060] | :         "# function environment of FUN() to the calling environment.    "
[08:05:35.060] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:35.060] | :         "# global environment, which is where globals are written.      "
[08:05:35.060] | :         penv <- env <- environment(...future.FUN)
[08:05:35.060] | :         repeat {
[08:05:35.060] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:35.060] | :                 emptyenv())) 
[08:05:35.060] | :                 break
[08:05:35.060] | :             penv <- env
[08:05:35.060] | :             env <- parent.env(env)
[08:05:35.060] | :         }
[08:05:35.060] | :         if (identical(penv, globalenv())) {
[08:05:35.060] | :             environment(...future.FUN) <- environment()
[08:05:35.060] | :         }
[08:05:35.060] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:35.060] | :             !isNamespace(penv)) {
[08:05:35.060] | :             parent.env(penv) <- environment()
[08:05:35.060] | :         }
[08:05:35.060] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:35.060] | :         {
[08:05:35.060] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:35.060] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:35.060] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:35.060] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:35.060] | :                 on.exit(options(oopts), add = TRUE)
[08:05:35.060] | :             }
[08:05:35.060] | :             {
[08:05:35.060] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:35.060] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:35.060] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:35.060] | :                   {
[08:05:35.060] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:35.060] | :                   }
[08:05:35.060] | :                 })
[08:05:35.060] | :             }
[08:05:35.060] | :         }
[08:05:35.060] | :     }, args = future.call.arguments)
[08:05:35.060] | : }
[08:05:35.060] | : Globals: 5 objects totaling 5.19 KiB (list ‘...future.elements_ii’ of 445 bytes, function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:35.060] | : Packages: <none>
[08:05:35.060] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:35.060] | : Capture standard output: TRUE
[08:05:35.060] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:35.060] | : Immediate condition classes: ‘immediateCondition’
[08:05:35.060] | : Lazy evaluation: FALSE
[08:05:35.060] | : Local evaluation: TRUE
[08:05:35.060] | : Asynchronous evaluation: TRUE
[08:05:35.060] | : Early signaling: FALSE
[08:05:35.060] | : Environment: R_GlobalEnv
[08:05:35.060] | : State: ‘running’
[08:05:35.060] | : Resolved: FALSE
[08:05:35.060] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-45
[08:05:35.060] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:35.060] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:35.060] | : Value: <not collected>
[08:05:35.060] | : Conditions captured: <none>
[08:05:35.072] | : Chunk #1 of 2 ... DONE
[08:05:35.072] | : Chunk #2 of 2 ...
[08:05:35.073] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:35.073] | :    + additional globals found: [n=0] 
[08:05:35.073] | :    + additional namespaces needed: [n=0] 
[08:05:35.073] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:35.073] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:35.074] | :  - seeds: <none>
[08:05:35.074] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:35.176] | : Created future:
[08:05:35.176] | : MultisessionFuture:
[08:05:35.176] | : Label: ‘future_lapply-2’
[08:05:35.176] | : Expression:
[08:05:35.176] | : {
[08:05:35.176] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:35.176] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:35.176] | :     "# as a global variable                                         "
[08:05:35.176] | :     do.call(function(...) {
[08:05:35.176] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:35.176] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:35.176] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:35.176] | :         "# anonymous function.                                          "
[08:05:35.176] | :         "#                                                              "
[08:05:35.176] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:35.176] | :         "# function environment of FUN() to the calling environment.    "
[08:05:35.176] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:35.176] | :         "# global environment, which is where globals are written.      "
[08:05:35.176] | :         penv <- env <- environment(...future.FUN)
[08:05:35.176] | :         repeat {
[08:05:35.176] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:35.176] | :                 emptyenv())) 
[08:05:35.176] | :                 break
[08:05:35.176] | :             penv <- env
[08:05:35.176] | :             env <- parent.env(env)
[08:05:35.176] | :         }
[08:05:35.176] | :         if (identical(penv, globalenv())) {
[08:05:35.176] | :             environment(...future.FUN) <- environment()
[08:05:35.176] | :         }
[08:05:35.176] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:35.176] | :             !isNamespace(penv)) {
[08:05:35.176] | :             parent.env(penv) <- environment()
[08:05:35.176] | :         }
[08:05:35.176] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:35.176] | :         {
[08:05:35.176] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:35.176] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:35.176] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:35.176] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:35.176] | :                 on.exit(options(oopts), add = TRUE)
[08:05:35.176] | :             }
[08:05:35.176] | :             {
[08:05:35.176] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:35.176] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:35.176] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:35.176] | :                   {
[08:05:35.176] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:35.176] | :                   }
[08:05:35.176] | :                 })
[08:05:35.176] | :             }
[08:05:35.176] | :         }
[08:05:35.176] | :     }, args = future.call.arguments)
[08:05:35.176] | : }
[08:05:35.176] | : Globals: 5 objects totaling 5.19 KiB (list ‘...future.elements_ii’ of 445 bytes, function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:35.176] | : Packages: <none>
[08:05:35.176] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:35.176] | : Capture standard output: TRUE
[08:05:35.176] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:35.176] | : Immediate condition classes: ‘immediateCondition’
[08:05:35.176] | : Lazy evaluation: FALSE
[08:05:35.176] | : Local evaluation: TRUE
[08:05:35.176] | : Asynchronous evaluation: TRUE
[08:05:35.176] | : Early signaling: FALSE
[08:05:35.176] | : Environment: R_GlobalEnv
[08:05:35.176] | : State: ‘running’
[08:05:35.176] | : Resolved: FALSE
[08:05:35.176] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-46
[08:05:35.176] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:35.176] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:35.176] | : Value: <not collected>
[08:05:35.176] | : Conditions captured: <none>
[08:05:35.188] | : Chunk #2 of 2 ... DONE
[08:05:35.189] | : Launching 2 futures (chunks) ... DONE
[08:05:35.189] | : Resolving 2 futures (chunks) ...
[08:05:35.221] | :  - Number of value chunks collected: 2
[08:05:35.221] | : Resolving 2 futures (chunks) ... DONE
[08:05:35.221] | : Reducing values from 2 chunks ...
[08:05:35.221] | :  - Number of values collected after concatenation: 10
[08:05:35.221] | :  - Number of values expected: 10
[08:05:35.222] | : Reducing values from 2 chunks ... DONE
[08:05:35.222] | future_lapply() -> future_xapply() ... done
[08:05:35.222] future_lapply() ... done

> str(y)
List of 10
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL

> stopifnot(all(sapply(y, FUN = identical, oMaxSize)))

> message("- approximately invariant to chunk size ...")
- approximately invariant to chunk size ...

> maxSize <- sizes[["FUN"]] + sizes[["X"]]/length(X)

> options(future.globals.maxSize = maxSize)

> for (chunk.size in c(1, 2, 5, 10)) {
+     y <- future_lapply(X, FUN = FUN, future.chunk.size = chunk.size)
+     str(y)
+     stopifnot(all(unlist( .... [TRUNCATED] 
[08:05:35.230] future_lapply() ...
[08:05:35.230] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:35.230] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:35.230] | future_lapply() -> future_xapply() ...
[08:05:35.231] | : Number of chunks: 10
[08:05:35.231] | : getGlobalsAndPackagesXApply() ...
[08:05:35.231] | : . future.globals: TRUE
[08:05:35.239] | : . globals found/used: [n=1] ‘FUN’
[08:05:35.239] | : . needed namespaces: [n=0] 
[08:05:35.239] | : . use_args: TRUE
[08:05:35.239] | : . Getting '...' globals ...
[08:05:35.240] | : . ' '...' content: [n=0] 
[08:05:35.240] | : . ' List of 1
[08:05:35.240] | : . '  $ ...: list()
[08:05:35.240] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:35.240] | : . '  - attr(*, "where")=List of 1
[08:05:35.240] | : . '   ..$ ...:<environment: 0x56342e7a7918> 
[08:05:35.240] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:35.240] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:35.240] | : . '  - attr(*, "total_size")= num NA
[08:05:35.242] | : . Getting '...' globals ... done
[08:05:35.242] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:35.242] | : . List of 2
[08:05:35.242] | : .  $ ...future.FUN:function (x)  
[08:05:35.242] | : .  $ ...          : list()
[08:05:35.242] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:35.242] | : .  - attr(*, "where")=List of 2
[08:05:35.242] | : .   ..$ ...future.FUN:<environment: 0x56342e7a7918> 
[08:05:35.242] | : .   ..$ ...          :<environment: 0x56342e7a7918> 
[08:05:35.242] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:35.242] | : .  - attr(*, "resolved")= logi FALSE
[08:05:35.242] | : .  - attr(*, "total_size")= num 5085
[08:05:35.245] | : . Packages to be attached in all futures: [n=0] 
[08:05:35.245] | : getGlobalsAndPackagesXApply() ... done
[08:05:35.246] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:35.246] | : List of 5
[08:05:35.246] | :  $ ...future.FUN            :function (x)  
[08:05:35.246] | :  $ ...                      : list()
[08:05:35.246] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:35.246] | :  $ ...future.elements_ii    : NULL
[08:05:35.246] | :  $ ...future.seeds_ii       : NULL
[08:05:35.246] | :  $ ...future.globals.maxSize: NULL
[08:05:35.246] | :  - attr(*, "where")=List of 5
[08:05:35.246] | :   ..$ ...future.FUN            :<environment: 0x56342e7a7918> 
[08:05:35.246] | :   ..$ ...                      :<environment: 0x56342e7a7918> 
[08:05:35.246] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:35.246] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:35.246] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:35.246] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:35.246] | :  - attr(*, "resolved")= logi FALSE
[08:05:35.246] | :  - attr(*, "total_size")= num 5085
[08:05:35.250] | : Number of futures (= number of chunks): 10
[08:05:35.250] | : Launching 10 futures (chunks) ...
[08:05:35.250] | : Chunk #1 of 10 ...
[08:05:35.250] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:35.250] | :    + additional globals found: [n=0] 
[08:05:35.251] | :    + additional namespaces needed: [n=0] 
[08:05:35.251] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:35.251] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:35.251] | :  - seeds: <none>
[08:05:35.251] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:35.353] | : Created future:
[08:05:35.353] | : MultisessionFuture:
[08:05:35.353] | : Label: ‘future_lapply-1’
[08:05:35.353] | : Expression:
[08:05:35.353] | : {
[08:05:35.353] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:35.353] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:35.353] | :     "# as a global variable                                         "
[08:05:35.353] | :     do.call(function(...) {
[08:05:35.353] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:35.353] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:35.353] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:35.353] | :         "# anonymous function.                                          "
[08:05:35.353] | :         "#                                                              "
[08:05:35.353] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:35.353] | :         "# function environment of FUN() to the calling environment.    "
[08:05:35.353] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:35.353] | :         "# global environment, which is where globals are written.      "
[08:05:35.353] | :         penv <- env <- environment(...future.FUN)
[08:05:35.353] | :         repeat {
[08:05:35.353] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:35.353] | :                 emptyenv())) 
[08:05:35.353] | :                 break
[08:05:35.353] | :             penv <- env
[08:05:35.353] | :             env <- parent.env(env)
[08:05:35.353] | :         }
[08:05:35.353] | :         if (identical(penv, globalenv())) {
[08:05:35.353] | :             environment(...future.FUN) <- environment()
[08:05:35.353] | :         }
[08:05:35.353] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:35.353] | :             !isNamespace(penv)) {
[08:05:35.353] | :             parent.env(penv) <- environment()
[08:05:35.353] | :         }
[08:05:35.353] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:35.353] | :         {
[08:05:35.353] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:35.353] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:35.353] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:35.353] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:35.353] | :                 on.exit(options(oopts), add = TRUE)
[08:05:35.353] | :             }
[08:05:35.353] | :             {
[08:05:35.353] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:35.353] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:35.353] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:35.353] | :                   {
[08:05:35.353] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:35.353] | :                   }
[08:05:35.353] | :                 })
[08:05:35.353] | :             }
[08:05:35.353] | :         }
[08:05:35.353] | :     }, args = future.call.arguments)
[08:05:35.353] | : }
[08:05:35.353] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:35.353] | : Packages: <none>
[08:05:35.353] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:35.353] | : Capture standard output: TRUE
[08:05:35.353] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:35.353] | : Immediate condition classes: ‘immediateCondition’
[08:05:35.353] | : Lazy evaluation: FALSE
[08:05:35.353] | : Local evaluation: TRUE
[08:05:35.353] | : Asynchronous evaluation: TRUE
[08:05:35.353] | : Early signaling: FALSE
[08:05:35.353] | : Environment: R_GlobalEnv
[08:05:35.353] | : State: ‘running’
[08:05:35.353] | : Resolved: FALSE
[08:05:35.353] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-47
[08:05:35.353] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:35.353] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:35.353] | : Value: <not collected>
[08:05:35.353] | : Conditions captured: <none>
[08:05:35.365] | : Chunk #1 of 10 ... DONE
[08:05:35.365] | : Chunk #2 of 10 ...
[08:05:35.366] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:35.366] | :    + additional globals found: [n=0] 
[08:05:35.366] | :    + additional namespaces needed: [n=0] 
[08:05:35.366] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:35.366] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:35.366] | :  - seeds: <none>
[08:05:35.367] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:35.461] | : Created future:
[08:05:35.461] | : MultisessionFuture:
[08:05:35.461] | : Label: ‘future_lapply-2’
[08:05:35.461] | : Expression:
[08:05:35.461] | : {
[08:05:35.461] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:35.461] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:35.461] | :     "# as a global variable                                         "
[08:05:35.461] | :     do.call(function(...) {
[08:05:35.461] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:35.461] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:35.461] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:35.461] | :         "# anonymous function.                                          "
[08:05:35.461] | :         "#                                                              "
[08:05:35.461] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:35.461] | :         "# function environment of FUN() to the calling environment.    "
[08:05:35.461] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:35.461] | :         "# global environment, which is where globals are written.      "
[08:05:35.461] | :         penv <- env <- environment(...future.FUN)
[08:05:35.461] | :         repeat {
[08:05:35.461] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:35.461] | :                 emptyenv())) 
[08:05:35.461] | :                 break
[08:05:35.461] | :             penv <- env
[08:05:35.461] | :             env <- parent.env(env)
[08:05:35.461] | :         }
[08:05:35.461] | :         if (identical(penv, globalenv())) {
[08:05:35.461] | :             environment(...future.FUN) <- environment()
[08:05:35.461] | :         }
[08:05:35.461] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:35.461] | :             !isNamespace(penv)) {
[08:05:35.461] | :             parent.env(penv) <- environment()
[08:05:35.461] | :         }
[08:05:35.461] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:35.461] | :         {
[08:05:35.461] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:35.461] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:35.461] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:35.461] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:35.461] | :                 on.exit(options(oopts), add = TRUE)
[08:05:35.461] | :             }
[08:05:35.461] | :             {
[08:05:35.461] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:35.461] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:35.461] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:35.461] | :                   {
[08:05:35.461] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:35.461] | :                   }
[08:05:35.461] | :                 })
[08:05:35.461] | :             }
[08:05:35.461] | :         }
[08:05:35.461] | :     }, args = future.call.arguments)
[08:05:35.461] | : }
[08:05:35.461] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:35.461] | : Packages: <none>
[08:05:35.461] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:35.461] | : Capture standard output: TRUE
[08:05:35.461] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:35.461] | : Immediate condition classes: ‘immediateCondition’
[08:05:35.461] | : Lazy evaluation: FALSE
[08:05:35.461] | : Local evaluation: TRUE
[08:05:35.461] | : Asynchronous evaluation: TRUE
[08:05:35.461] | : Early signaling: FALSE
[08:05:35.461] | : Environment: R_GlobalEnv
[08:05:35.461] | : State: ‘running’
[08:05:35.461] | : Resolved: FALSE
[08:05:35.461] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-48
[08:05:35.461] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:35.461] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:35.461] | : Value: <not collected>
[08:05:35.461] | : Conditions captured: <none>
[08:05:35.474] | : Chunk #2 of 10 ... DONE
[08:05:35.474] | : Chunk #3 of 10 ...
[08:05:35.474] | :  - Finding globals in 'X' for chunk #3 ...
[08:05:35.474] | :    + additional globals found: [n=0] 
[08:05:35.474] | :    + additional namespaces needed: [n=0] 
[08:05:35.475] | :  - Finding globals in 'X' for chunk #3 ... DONE
[08:05:35.475] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:35.475] | :  - seeds: <none>
[08:05:35.475] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:35.598] | : Created future:
[08:05:35.598] | : MultisessionFuture:
[08:05:35.598] | : Label: ‘future_lapply-3’
[08:05:35.598] | : Expression:
[08:05:35.598] | : {
[08:05:35.598] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:35.598] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:35.598] | :     "# as a global variable                                         "
[08:05:35.598] | :     do.call(function(...) {
[08:05:35.598] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:35.598] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:35.598] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:35.598] | :         "# anonymous function.                                          "
[08:05:35.598] | :         "#                                                              "
[08:05:35.598] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:35.598] | :         "# function environment of FUN() to the calling environment.    "
[08:05:35.598] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:35.598] | :         "# global environment, which is where globals are written.      "
[08:05:35.598] | :         penv <- env <- environment(...future.FUN)
[08:05:35.598] | :         repeat {
[08:05:35.598] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:35.598] | :                 emptyenv())) 
[08:05:35.598] | :                 break
[08:05:35.598] | :             penv <- env
[08:05:35.598] | :             env <- parent.env(env)
[08:05:35.598] | :         }
[08:05:35.598] | :         if (identical(penv, globalenv())) {
[08:05:35.598] | :             environment(...future.FUN) <- environment()
[08:05:35.598] | :         }
[08:05:35.598] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:35.598] | :             !isNamespace(penv)) {
[08:05:35.598] | :             parent.env(penv) <- environment()
[08:05:35.598] | :         }
[08:05:35.598] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:35.598] | :         {
[08:05:35.598] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:35.598] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:35.598] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:35.598] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:35.598] | :                 on.exit(options(oopts), add = TRUE)
[08:05:35.598] | :             }
[08:05:35.598] | :             {
[08:05:35.598] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:35.598] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:35.598] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:35.598] | :                   {
[08:05:35.598] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:35.598] | :                   }
[08:05:35.598] | :                 })
[08:05:35.598] | :             }
[08:05:35.598] | :         }
[08:05:35.598] | :     }, args = future.call.arguments)
[08:05:35.598] | : }
[08:05:35.598] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:35.598] | : Packages: <none>
[08:05:35.598] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:35.598] | : Capture standard output: TRUE
[08:05:35.598] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:35.598] | : Immediate condition classes: ‘immediateCondition’
[08:05:35.598] | : Lazy evaluation: FALSE
[08:05:35.598] | : Local evaluation: TRUE
[08:05:35.598] | : Asynchronous evaluation: TRUE
[08:05:35.598] | : Early signaling: FALSE
[08:05:35.598] | : Environment: R_GlobalEnv
[08:05:35.598] | : State: ‘running’
[08:05:35.598] | : Resolved: FALSE
[08:05:35.598] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-49
[08:05:35.598] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:35.598] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:35.598] | : Value: <not collected>
[08:05:35.598] | : Conditions captured: <none>
[08:05:35.611] | : Chunk #3 of 10 ... DONE
[08:05:35.611] | : Chunk #4 of 10 ...
[08:05:35.611] | :  - Finding globals in 'X' for chunk #4 ...
[08:05:35.611] | :    + additional globals found: [n=0] 
[08:05:35.611] | :    + additional namespaces needed: [n=0] 
[08:05:35.612] | :  - Finding globals in 'X' for chunk #4 ... DONE
[08:05:35.612] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:35.612] | :  - seeds: <none>
[08:05:35.612] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:35.754] | : Created future:
[08:05:35.754] | : MultisessionFuture:
[08:05:35.754] | : Label: ‘future_lapply-4’
[08:05:35.754] | : Expression:
[08:05:35.754] | : {
[08:05:35.754] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:35.754] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:35.754] | :     "# as a global variable                                         "
[08:05:35.754] | :     do.call(function(...) {
[08:05:35.754] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:35.754] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:35.754] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:35.754] | :         "# anonymous function.                                          "
[08:05:35.754] | :         "#                                                              "
[08:05:35.754] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:35.754] | :         "# function environment of FUN() to the calling environment.    "
[08:05:35.754] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:35.754] | :         "# global environment, which is where globals are written.      "
[08:05:35.754] | :         penv <- env <- environment(...future.FUN)
[08:05:35.754] | :         repeat {
[08:05:35.754] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:35.754] | :                 emptyenv())) 
[08:05:35.754] | :                 break
[08:05:35.754] | :             penv <- env
[08:05:35.754] | :             env <- parent.env(env)
[08:05:35.754] | :         }
[08:05:35.754] | :         if (identical(penv, globalenv())) {
[08:05:35.754] | :             environment(...future.FUN) <- environment()
[08:05:35.754] | :         }
[08:05:35.754] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:35.754] | :             !isNamespace(penv)) {
[08:05:35.754] | :             parent.env(penv) <- environment()
[08:05:35.754] | :         }
[08:05:35.754] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:35.754] | :         {
[08:05:35.754] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:35.754] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:35.754] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:35.754] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:35.754] | :                 on.exit(options(oopts), add = TRUE)
[08:05:35.754] | :             }
[08:05:35.754] | :             {
[08:05:35.754] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:35.754] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:35.754] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:35.754] | :                   {
[08:05:35.754] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:35.754] | :                   }
[08:05:35.754] | :                 })
[08:05:35.754] | :             }
[08:05:35.754] | :         }
[08:05:35.754] | :     }, args = future.call.arguments)
[08:05:35.754] | : }
[08:05:35.754] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:35.754] | : Packages: <none>
[08:05:35.754] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:35.754] | : Capture standard output: TRUE
[08:05:35.754] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:35.754] | : Immediate condition classes: ‘immediateCondition’
[08:05:35.754] | : Lazy evaluation: FALSE
[08:05:35.754] | : Local evaluation: TRUE
[08:05:35.754] | : Asynchronous evaluation: TRUE
[08:05:35.754] | : Early signaling: FALSE
[08:05:35.754] | : Environment: R_GlobalEnv
[08:05:35.754] | : State: ‘running’
[08:05:35.754] | : Resolved: FALSE
[08:05:35.754] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-50
[08:05:35.754] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:35.754] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:35.754] | : Value: <not collected>
[08:05:35.754] | : Conditions captured: <none>
[08:05:35.767] | : Chunk #4 of 10 ... DONE
[08:05:35.767] | : Chunk #5 of 10 ...
[08:05:35.767] | :  - Finding globals in 'X' for chunk #5 ...
[08:05:35.767] | :    + additional globals found: [n=0] 
[08:05:35.767] | :    + additional namespaces needed: [n=0] 
[08:05:35.768] | :  - Finding globals in 'X' for chunk #5 ... DONE
[08:05:35.768] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:35.768] | :  - seeds: <none>
[08:05:35.768] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:35.878] | : Created future:
[08:05:35.878] | : MultisessionFuture:
[08:05:35.878] | : Label: ‘future_lapply-5’
[08:05:35.878] | : Expression:
[08:05:35.878] | : {
[08:05:35.878] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:35.878] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:35.878] | :     "# as a global variable                                         "
[08:05:35.878] | :     do.call(function(...) {
[08:05:35.878] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:35.878] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:35.878] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:35.878] | :         "# anonymous function.                                          "
[08:05:35.878] | :         "#                                                              "
[08:05:35.878] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:35.878] | :         "# function environment of FUN() to the calling environment.    "
[08:05:35.878] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:35.878] | :         "# global environment, which is where globals are written.      "
[08:05:35.878] | :         penv <- env <- environment(...future.FUN)
[08:05:35.878] | :         repeat {
[08:05:35.878] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:35.878] | :                 emptyenv())) 
[08:05:35.878] | :                 break
[08:05:35.878] | :             penv <- env
[08:05:35.878] | :             env <- parent.env(env)
[08:05:35.878] | :         }
[08:05:35.878] | :         if (identical(penv, globalenv())) {
[08:05:35.878] | :             environment(...future.FUN) <- environment()
[08:05:35.878] | :         }
[08:05:35.878] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:35.878] | :             !isNamespace(penv)) {
[08:05:35.878] | :             parent.env(penv) <- environment()
[08:05:35.878] | :         }
[08:05:35.878] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:35.878] | :         {
[08:05:35.878] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:35.878] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:35.878] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:35.878] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:35.878] | :                 on.exit(options(oopts), add = TRUE)
[08:05:35.878] | :             }
[08:05:35.878] | :             {
[08:05:35.878] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:35.878] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:35.878] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:35.878] | :                   {
[08:05:35.878] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:35.878] | :                   }
[08:05:35.878] | :                 })
[08:05:35.878] | :             }
[08:05:35.878] | :         }
[08:05:35.878] | :     }, args = future.call.arguments)
[08:05:35.878] | : }
[08:05:35.878] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:35.878] | : Packages: <none>
[08:05:35.878] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:35.878] | : Capture standard output: TRUE
[08:05:35.878] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:35.878] | : Immediate condition classes: ‘immediateCondition’
[08:05:35.878] | : Lazy evaluation: FALSE
[08:05:35.878] | : Local evaluation: TRUE
[08:05:35.878] | : Asynchronous evaluation: TRUE
[08:05:35.878] | : Early signaling: FALSE
[08:05:35.878] | : Environment: R_GlobalEnv
[08:05:35.878] | : State: ‘running’
[08:05:35.878] | : Resolved: FALSE
[08:05:35.878] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-51
[08:05:35.878] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:35.878] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:35.878] | : Value: <not collected>
[08:05:35.878] | : Conditions captured: <none>
[08:05:35.891] | : Chunk #5 of 10 ... DONE
[08:05:35.891] | : Chunk #6 of 10 ...
[08:05:35.891] | :  - Finding globals in 'X' for chunk #6 ...
[08:05:35.891] | :    + additional globals found: [n=0] 
[08:05:35.891] | :    + additional namespaces needed: [n=0] 
[08:05:35.892] | :  - Finding globals in 'X' for chunk #6 ... DONE
[08:05:35.892] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:35.892] | :  - seeds: <none>
[08:05:35.892] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:36.009] | : Created future:
[08:05:36.009] | : MultisessionFuture:
[08:05:36.009] | : Label: ‘future_lapply-6’
[08:05:36.009] | : Expression:
[08:05:36.009] | : {
[08:05:36.009] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:36.009] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:36.009] | :     "# as a global variable                                         "
[08:05:36.009] | :     do.call(function(...) {
[08:05:36.009] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:36.009] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:36.009] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:36.009] | :         "# anonymous function.                                          "
[08:05:36.009] | :         "#                                                              "
[08:05:36.009] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:36.009] | :         "# function environment of FUN() to the calling environment.    "
[08:05:36.009] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:36.009] | :         "# global environment, which is where globals are written.      "
[08:05:36.009] | :         penv <- env <- environment(...future.FUN)
[08:05:36.009] | :         repeat {
[08:05:36.009] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:36.009] | :                 emptyenv())) 
[08:05:36.009] | :                 break
[08:05:36.009] | :             penv <- env
[08:05:36.009] | :             env <- parent.env(env)
[08:05:36.009] | :         }
[08:05:36.009] | :         if (identical(penv, globalenv())) {
[08:05:36.009] | :             environment(...future.FUN) <- environment()
[08:05:36.009] | :         }
[08:05:36.009] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:36.009] | :             !isNamespace(penv)) {
[08:05:36.009] | :             parent.env(penv) <- environment()
[08:05:36.009] | :         }
[08:05:36.009] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:36.009] | :         {
[08:05:36.009] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:36.009] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:36.009] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:36.009] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:36.009] | :                 on.exit(options(oopts), add = TRUE)
[08:05:36.009] | :             }
[08:05:36.009] | :             {
[08:05:36.009] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:36.009] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:36.009] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:36.009] | :                   {
[08:05:36.009] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:36.009] | :                   }
[08:05:36.009] | :                 })
[08:05:36.009] | :             }
[08:05:36.009] | :         }
[08:05:36.009] | :     }, args = future.call.arguments)
[08:05:36.009] | : }
[08:05:36.009] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:36.009] | : Packages: <none>
[08:05:36.009] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:36.009] | : Capture standard output: TRUE
[08:05:36.009] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:36.009] | : Immediate condition classes: ‘immediateCondition’
[08:05:36.009] | : Lazy evaluation: FALSE
[08:05:36.009] | : Local evaluation: TRUE
[08:05:36.009] | : Asynchronous evaluation: TRUE
[08:05:36.009] | : Early signaling: FALSE
[08:05:36.009] | : Environment: R_GlobalEnv
[08:05:36.009] | : State: ‘running’
[08:05:36.009] | : Resolved: FALSE
[08:05:36.009] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-52
[08:05:36.009] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:36.009] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:36.009] | : Value: <not collected>
[08:05:36.009] | : Conditions captured: <none>
[08:05:36.022] | : Chunk #6 of 10 ... DONE
[08:05:36.022] | : Chunk #7 of 10 ...
[08:05:36.022] | :  - Finding globals in 'X' for chunk #7 ...
[08:05:36.022] | :    + additional globals found: [n=0] 
[08:05:36.022] | :    + additional namespaces needed: [n=0] 
[08:05:36.022] | :  - Finding globals in 'X' for chunk #7 ... DONE
[08:05:36.023] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:36.023] | :  - seeds: <none>
[08:05:36.023] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:36.131] | : Created future:
[08:05:36.131] | : MultisessionFuture:
[08:05:36.131] | : Label: ‘future_lapply-7’
[08:05:36.131] | : Expression:
[08:05:36.131] | : {
[08:05:36.131] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:36.131] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:36.131] | :     "# as a global variable                                         "
[08:05:36.131] | :     do.call(function(...) {
[08:05:36.131] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:36.131] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:36.131] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:36.131] | :         "# anonymous function.                                          "
[08:05:36.131] | :         "#                                                              "
[08:05:36.131] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:36.131] | :         "# function environment of FUN() to the calling environment.    "
[08:05:36.131] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:36.131] | :         "# global environment, which is where globals are written.      "
[08:05:36.131] | :         penv <- env <- environment(...future.FUN)
[08:05:36.131] | :         repeat {
[08:05:36.131] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:36.131] | :                 emptyenv())) 
[08:05:36.131] | :                 break
[08:05:36.131] | :             penv <- env
[08:05:36.131] | :             env <- parent.env(env)
[08:05:36.131] | :         }
[08:05:36.131] | :         if (identical(penv, globalenv())) {
[08:05:36.131] | :             environment(...future.FUN) <- environment()
[08:05:36.131] | :         }
[08:05:36.131] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:36.131] | :             !isNamespace(penv)) {
[08:05:36.131] | :             parent.env(penv) <- environment()
[08:05:36.131] | :         }
[08:05:36.131] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:36.131] | :         {
[08:05:36.131] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:36.131] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:36.131] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:36.131] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:36.131] | :                 on.exit(options(oopts), add = TRUE)
[08:05:36.131] | :             }
[08:05:36.131] | :             {
[08:05:36.131] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:36.131] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:36.131] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:36.131] | :                   {
[08:05:36.131] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:36.131] | :                   }
[08:05:36.131] | :                 })
[08:05:36.131] | :             }
[08:05:36.131] | :         }
[08:05:36.131] | :     }, args = future.call.arguments)
[08:05:36.131] | : }
[08:05:36.131] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:36.131] | : Packages: <none>
[08:05:36.131] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:36.131] | : Capture standard output: TRUE
[08:05:36.131] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:36.131] | : Immediate condition classes: ‘immediateCondition’
[08:05:36.131] | : Lazy evaluation: FALSE
[08:05:36.131] | : Local evaluation: TRUE
[08:05:36.131] | : Asynchronous evaluation: TRUE
[08:05:36.131] | : Early signaling: FALSE
[08:05:36.131] | : Environment: R_GlobalEnv
[08:05:36.131] | : State: ‘running’
[08:05:36.131] | : Resolved: FALSE
[08:05:36.131] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-53
[08:05:36.131] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:36.131] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:36.131] | : Value: <not collected>
[08:05:36.131] | : Conditions captured: <none>
[08:05:36.144] | : Chunk #7 of 10 ... DONE
[08:05:36.144] | : Chunk #8 of 10 ...
[08:05:36.144] | :  - Finding globals in 'X' for chunk #8 ...
[08:05:36.144] | :    + additional globals found: [n=0] 
[08:05:36.144] | :    + additional namespaces needed: [n=0] 
[08:05:36.145] | :  - Finding globals in 'X' for chunk #8 ... DONE
[08:05:36.145] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:36.147] | :  - seeds: <none>
[08:05:36.147] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:36.259] | : Created future:
[08:05:36.259] | : MultisessionFuture:
[08:05:36.259] | : Label: ‘future_lapply-8’
[08:05:36.259] | : Expression:
[08:05:36.259] | : {
[08:05:36.259] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:36.259] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:36.259] | :     "# as a global variable                                         "
[08:05:36.259] | :     do.call(function(...) {
[08:05:36.259] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:36.259] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:36.259] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:36.259] | :         "# anonymous function.                                          "
[08:05:36.259] | :         "#                                                              "
[08:05:36.259] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:36.259] | :         "# function environment of FUN() to the calling environment.    "
[08:05:36.259] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:36.259] | :         "# global environment, which is where globals are written.      "
[08:05:36.259] | :         penv <- env <- environment(...future.FUN)
[08:05:36.259] | :         repeat {
[08:05:36.259] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:36.259] | :                 emptyenv())) 
[08:05:36.259] | :                 break
[08:05:36.259] | :             penv <- env
[08:05:36.259] | :             env <- parent.env(env)
[08:05:36.259] | :         }
[08:05:36.259] | :         if (identical(penv, globalenv())) {
[08:05:36.259] | :             environment(...future.FUN) <- environment()
[08:05:36.259] | :         }
[08:05:36.259] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:36.259] | :             !isNamespace(penv)) {
[08:05:36.259] | :             parent.env(penv) <- environment()
[08:05:36.259] | :         }
[08:05:36.259] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:36.259] | :         {
[08:05:36.259] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:36.259] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:36.259] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:36.259] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:36.259] | :                 on.exit(options(oopts), add = TRUE)
[08:05:36.259] | :             }
[08:05:36.259] | :             {
[08:05:36.259] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:36.259] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:36.259] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:36.259] | :                   {
[08:05:36.259] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:36.259] | :                   }
[08:05:36.259] | :                 })
[08:05:36.259] | :             }
[08:05:36.259] | :         }
[08:05:36.259] | :     }, args = future.call.arguments)
[08:05:36.259] | : }
[08:05:36.259] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:36.259] | : Packages: <none>
[08:05:36.259] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:36.259] | : Capture standard output: TRUE
[08:05:36.259] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:36.259] | : Immediate condition classes: ‘immediateCondition’
[08:05:36.259] | : Lazy evaluation: FALSE
[08:05:36.259] | : Local evaluation: TRUE
[08:05:36.259] | : Asynchronous evaluation: TRUE
[08:05:36.259] | : Early signaling: FALSE
[08:05:36.259] | : Environment: R_GlobalEnv
[08:05:36.259] | : State: ‘running’
[08:05:36.259] | : Resolved: FALSE
[08:05:36.259] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-54
[08:05:36.259] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:36.259] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:36.259] | : Value: <not collected>
[08:05:36.259] | : Conditions captured: <none>
[08:05:36.272] | : Chunk #8 of 10 ... DONE
[08:05:36.272] | : Chunk #9 of 10 ...
[08:05:36.272] | :  - Finding globals in 'X' for chunk #9 ...
[08:05:36.272] | :    + additional globals found: [n=0] 
[08:05:36.273] | :    + additional namespaces needed: [n=0] 
[08:05:36.273] | :  - Finding globals in 'X' for chunk #9 ... DONE
[08:05:36.273] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:36.273] | :  - seeds: <none>
[08:05:36.273] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:36.383] | : Created future:
[08:05:36.383] | : MultisessionFuture:
[08:05:36.383] | : Label: ‘future_lapply-9’
[08:05:36.383] | : Expression:
[08:05:36.383] | : {
[08:05:36.383] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:36.383] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:36.383] | :     "# as a global variable                                         "
[08:05:36.383] | :     do.call(function(...) {
[08:05:36.383] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:36.383] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:36.383] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:36.383] | :         "# anonymous function.                                          "
[08:05:36.383] | :         "#                                                              "
[08:05:36.383] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:36.383] | :         "# function environment of FUN() to the calling environment.    "
[08:05:36.383] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:36.383] | :         "# global environment, which is where globals are written.      "
[08:05:36.383] | :         penv <- env <- environment(...future.FUN)
[08:05:36.383] | :         repeat {
[08:05:36.383] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:36.383] | :                 emptyenv())) 
[08:05:36.383] | :                 break
[08:05:36.383] | :             penv <- env
[08:05:36.383] | :             env <- parent.env(env)
[08:05:36.383] | :         }
[08:05:36.383] | :         if (identical(penv, globalenv())) {
[08:05:36.383] | :             environment(...future.FUN) <- environment()
[08:05:36.383] | :         }
[08:05:36.383] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:36.383] | :             !isNamespace(penv)) {
[08:05:36.383] | :             parent.env(penv) <- environment()
[08:05:36.383] | :         }
[08:05:36.383] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:36.383] | :         {
[08:05:36.383] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:36.383] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:36.383] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:36.383] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:36.383] | :                 on.exit(options(oopts), add = TRUE)
[08:05:36.383] | :             }
[08:05:36.383] | :             {
[08:05:36.383] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:36.383] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:36.383] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:36.383] | :                   {
[08:05:36.383] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:36.383] | :                   }
[08:05:36.383] | :                 })
[08:05:36.383] | :             }
[08:05:36.383] | :         }
[08:05:36.383] | :     }, args = future.call.arguments)
[08:05:36.383] | : }
[08:05:36.383] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:36.383] | : Packages: <none>
[08:05:36.383] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:36.383] | : Capture standard output: TRUE
[08:05:36.383] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:36.383] | : Immediate condition classes: ‘immediateCondition’
[08:05:36.383] | : Lazy evaluation: FALSE
[08:05:36.383] | : Local evaluation: TRUE
[08:05:36.383] | : Asynchronous evaluation: TRUE
[08:05:36.383] | : Early signaling: FALSE
[08:05:36.383] | : Environment: R_GlobalEnv
[08:05:36.383] | : State: ‘running’
[08:05:36.383] | : Resolved: FALSE
[08:05:36.383] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-55
[08:05:36.383] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:36.383] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:36.383] | : Value: <not collected>
[08:05:36.383] | : Conditions captured: <none>
[08:05:36.396] | : Chunk #9 of 10 ... DONE
[08:05:36.396] | : Chunk #10 of 10 ...
[08:05:36.396] | :  - Finding globals in 'X' for chunk #10 ...
[08:05:36.397] | :    + additional globals found: [n=0] 
[08:05:36.397] | :    + additional namespaces needed: [n=0] 
[08:05:36.397] | :  - Finding globals in 'X' for chunk #10 ... DONE
[08:05:36.397] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:36.397] | :  - seeds: <none>
[08:05:36.397] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:36.506] | : Created future:
[08:05:36.506] | : MultisessionFuture:
[08:05:36.506] | : Label: ‘future_lapply-10’
[08:05:36.506] | : Expression:
[08:05:36.506] | : {
[08:05:36.506] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:36.506] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:36.506] | :     "# as a global variable                                         "
[08:05:36.506] | :     do.call(function(...) {
[08:05:36.506] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:36.506] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:36.506] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:36.506] | :         "# anonymous function.                                          "
[08:05:36.506] | :         "#                                                              "
[08:05:36.506] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:36.506] | :         "# function environment of FUN() to the calling environment.    "
[08:05:36.506] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:36.506] | :         "# global environment, which is where globals are written.      "
[08:05:36.506] | :         penv <- env <- environment(...future.FUN)
[08:05:36.506] | :         repeat {
[08:05:36.506] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:36.506] | :                 emptyenv())) 
[08:05:36.506] | :                 break
[08:05:36.506] | :             penv <- env
[08:05:36.506] | :             env <- parent.env(env)
[08:05:36.506] | :         }
[08:05:36.506] | :         if (identical(penv, globalenv())) {
[08:05:36.506] | :             environment(...future.FUN) <- environment()
[08:05:36.506] | :         }
[08:05:36.506] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:36.506] | :             !isNamespace(penv)) {
[08:05:36.506] | :             parent.env(penv) <- environment()
[08:05:36.506] | :         }
[08:05:36.506] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:36.506] | :         {
[08:05:36.506] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:36.506] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:36.506] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:36.506] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:36.506] | :                 on.exit(options(oopts), add = TRUE)
[08:05:36.506] | :             }
[08:05:36.506] | :             {
[08:05:36.506] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:36.506] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:36.506] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:36.506] | :                   {
[08:05:36.506] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:36.506] | :                   }
[08:05:36.506] | :                 })
[08:05:36.506] | :             }
[08:05:36.506] | :         }
[08:05:36.506] | :     }, args = future.call.arguments)
[08:05:36.506] | : }
[08:05:36.506] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:36.506] | : Packages: <none>
[08:05:36.506] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:36.506] | : Capture standard output: TRUE
[08:05:36.506] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:36.506] | : Immediate condition classes: ‘immediateCondition’
[08:05:36.506] | : Lazy evaluation: FALSE
[08:05:36.506] | : Local evaluation: TRUE
[08:05:36.506] | : Asynchronous evaluation: TRUE
[08:05:36.506] | : Early signaling: FALSE
[08:05:36.506] | : Environment: R_GlobalEnv
[08:05:36.506] | : State: ‘running’
[08:05:36.506] | : Resolved: FALSE
[08:05:36.506] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-56
[08:05:36.506] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:36.506] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:36.506] | : Value: <not collected>
[08:05:36.506] | : Conditions captured: <none>
[08:05:36.519] | : Chunk #10 of 10 ... DONE
[08:05:36.519] | : Launching 10 futures (chunks) ... DONE
[08:05:36.519] | : Resolving 10 futures (chunks) ...
[08:05:36.551] | :  - Number of value chunks collected: 10
[08:05:36.552] | : Resolving 10 futures (chunks) ... DONE
[08:05:36.552] | : Reducing values from 10 chunks ...
[08:05:36.552] | :  - Number of values collected after concatenation: 10
[08:05:36.552] | :  - Number of values expected: 10
[08:05:36.552] | : Reducing values from 10 chunks ... DONE
[08:05:36.552] | future_lapply() -> future_xapply() ... done
[08:05:36.552] future_lapply() ... done
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes
[08:05:36.559] future_lapply() ...
[08:05:36.559] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:36.559] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:36.560] | future_lapply() -> future_xapply() ...
[08:05:36.560] | : Number of chunks: 5
[08:05:36.560] | : getGlobalsAndPackagesXApply() ...
[08:05:36.560] | : . future.globals: TRUE
[08:05:36.565] | : . globals found/used: [n=1] ‘FUN’
[08:05:36.566] | : . needed namespaces: [n=0] 
[08:05:36.566] | : . use_args: TRUE
[08:05:36.566] | : . Getting '...' globals ...
[08:05:36.566] | : . ' '...' content: [n=0] 
[08:05:36.566] | : . ' List of 1
[08:05:36.566] | : . '  $ ...: list()
[08:05:36.566] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:36.566] | : . '  - attr(*, "where")=List of 1
[08:05:36.566] | : . '   ..$ ...:<environment: 0x56342e3d6248> 
[08:05:36.566] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:36.566] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:36.566] | : . '  - attr(*, "total_size")= num NA
[08:05:36.569] | : . Getting '...' globals ... done
[08:05:36.569] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:36.569] | : . List of 2
[08:05:36.569] | : .  $ ...future.FUN:function (x)  
[08:05:36.569] | : .  $ ...          : list()
[08:05:36.569] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:36.569] | : .  - attr(*, "where")=List of 2
[08:05:36.569] | : .   ..$ ...future.FUN:<environment: 0x56342e3d6248> 
[08:05:36.569] | : .   ..$ ...          :<environment: 0x56342e3d6248> 
[08:05:36.569] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:36.569] | : .  - attr(*, "resolved")= logi FALSE
[08:05:36.569] | : .  - attr(*, "total_size")= num 5085
[08:05:36.572] | : . Packages to be attached in all futures: [n=0] 
[08:05:36.572] | : getGlobalsAndPackagesXApply() ... done
[08:05:36.572] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:36.572] | : List of 5
[08:05:36.572] | :  $ ...future.FUN            :function (x)  
[08:05:36.572] | :  $ ...                      : list()
[08:05:36.572] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:36.572] | :  $ ...future.elements_ii    : NULL
[08:05:36.572] | :  $ ...future.seeds_ii       : NULL
[08:05:36.572] | :  $ ...future.globals.maxSize: NULL
[08:05:36.572] | :  - attr(*, "where")=List of 5
[08:05:36.572] | :   ..$ ...future.FUN            :<environment: 0x56342e3d6248> 
[08:05:36.572] | :   ..$ ...                      :<environment: 0x56342e3d6248> 
[08:05:36.572] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:36.572] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:36.572] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:36.572] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:36.572] | :  - attr(*, "resolved")= logi FALSE
[08:05:36.572] | :  - attr(*, "total_size")= num 5085
[08:05:36.577] | : Number of futures (= number of chunks): 5
[08:05:36.577] | : Launching 5 futures (chunks) ...
[08:05:36.577] | : Chunk #1 of 5 ...
[08:05:36.577] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:36.577] | :    + additional globals found: [n=0] 
[08:05:36.577] | :    + additional namespaces needed: [n=0] 
[08:05:36.578] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:36.578] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[08:05:36.578] | :  - seeds: <none>
[08:05:36.578] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:36.685] | : Created future:
[08:05:36.685] | : MultisessionFuture:
[08:05:36.685] | : Label: ‘future_lapply-1’
[08:05:36.685] | : Expression:
[08:05:36.685] | : {
[08:05:36.685] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:36.685] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:36.685] | :     "# as a global variable                                         "
[08:05:36.685] | :     do.call(function(...) {
[08:05:36.685] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:36.685] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:36.685] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:36.685] | :         "# anonymous function.                                          "
[08:05:36.685] | :         "#                                                              "
[08:05:36.685] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:36.685] | :         "# function environment of FUN() to the calling environment.    "
[08:05:36.685] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:36.685] | :         "# global environment, which is where globals are written.      "
[08:05:36.685] | :         penv <- env <- environment(...future.FUN)
[08:05:36.685] | :         repeat {
[08:05:36.685] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:36.685] | :                 emptyenv())) 
[08:05:36.685] | :                 break
[08:05:36.685] | :             penv <- env
[08:05:36.685] | :             env <- parent.env(env)
[08:05:36.685] | :         }
[08:05:36.685] | :         if (identical(penv, globalenv())) {
[08:05:36.685] | :             environment(...future.FUN) <- environment()
[08:05:36.685] | :         }
[08:05:36.685] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:36.685] | :             !isNamespace(penv)) {
[08:05:36.685] | :             parent.env(penv) <- environment()
[08:05:36.685] | :         }
[08:05:36.685] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:36.685] | :         {
[08:05:36.685] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:36.685] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:36.685] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:36.685] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:36.685] | :                 on.exit(options(oopts), add = TRUE)
[08:05:36.685] | :             }
[08:05:36.685] | :             {
[08:05:36.685] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:36.685] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:36.685] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:36.685] | :                   {
[08:05:36.685] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:36.685] | :                   }
[08:05:36.685] | :                 })
[08:05:36.685] | :             }
[08:05:36.685] | :         }
[08:05:36.685] | :     }, args = future.call.arguments)
[08:05:36.685] | : }
[08:05:36.685] | : Globals: 5 objects totaling 5.38 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 217 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:36.685] | : Packages: <none>
[08:05:36.685] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:36.685] | : Capture standard output: TRUE
[08:05:36.685] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:36.685] | : Immediate condition classes: ‘immediateCondition’
[08:05:36.685] | : Lazy evaluation: FALSE
[08:05:36.685] | : Local evaluation: TRUE
[08:05:36.685] | : Asynchronous evaluation: TRUE
[08:05:36.685] | : Early signaling: FALSE
[08:05:36.685] | : Environment: R_GlobalEnv
[08:05:36.685] | : State: ‘running’
[08:05:36.685] | : Resolved: FALSE
[08:05:36.685] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-57
[08:05:36.685] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:36.685] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:36.685] | : Value: <not collected>
[08:05:36.685] | : Conditions captured: <none>
[08:05:36.697] | : Chunk #1 of 5 ... DONE
[08:05:36.697] | : Chunk #2 of 5 ...
[08:05:36.698] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:36.698] | :    + additional globals found: [n=0] 
[08:05:36.698] | :    + additional namespaces needed: [n=0] 
[08:05:36.698] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:36.699] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[08:05:36.699] | :  - seeds: <none>
[08:05:36.699] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:36.797] | : Created future:
[08:05:36.797] | : MultisessionFuture:
[08:05:36.797] | : Label: ‘future_lapply-2’
[08:05:36.797] | : Expression:
[08:05:36.797] | : {
[08:05:36.797] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:36.797] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:36.797] | :     "# as a global variable                                         "
[08:05:36.797] | :     do.call(function(...) {
[08:05:36.797] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:36.797] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:36.797] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:36.797] | :         "# anonymous function.                                          "
[08:05:36.797] | :         "#                                                              "
[08:05:36.797] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:36.797] | :         "# function environment of FUN() to the calling environment.    "
[08:05:36.797] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:36.797] | :         "# global environment, which is where globals are written.      "
[08:05:36.797] | :         penv <- env <- environment(...future.FUN)
[08:05:36.797] | :         repeat {
[08:05:36.797] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:36.797] | :                 emptyenv())) 
[08:05:36.797] | :                 break
[08:05:36.797] | :             penv <- env
[08:05:36.797] | :             env <- parent.env(env)
[08:05:36.797] | :         }
[08:05:36.797] | :         if (identical(penv, globalenv())) {
[08:05:36.797] | :             environment(...future.FUN) <- environment()
[08:05:36.797] | :         }
[08:05:36.797] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:36.797] | :             !isNamespace(penv)) {
[08:05:36.797] | :             parent.env(penv) <- environment()
[08:05:36.797] | :         }
[08:05:36.797] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:36.797] | :         {
[08:05:36.797] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:36.797] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:36.797] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:36.797] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:36.797] | :                 on.exit(options(oopts), add = TRUE)
[08:05:36.797] | :             }
[08:05:36.797] | :             {
[08:05:36.797] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:36.797] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:36.797] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:36.797] | :                   {
[08:05:36.797] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:36.797] | :                   }
[08:05:36.797] | :                 })
[08:05:36.797] | :             }
[08:05:36.797] | :         }
[08:05:36.797] | :     }, args = future.call.arguments)
[08:05:36.797] | : }
[08:05:36.797] | : Globals: 5 objects totaling 5.38 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 217 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:36.797] | : Packages: <none>
[08:05:36.797] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:36.797] | : Capture standard output: TRUE
[08:05:36.797] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:36.797] | : Immediate condition classes: ‘immediateCondition’
[08:05:36.797] | : Lazy evaluation: FALSE
[08:05:36.797] | : Local evaluation: TRUE
[08:05:36.797] | : Asynchronous evaluation: TRUE
[08:05:36.797] | : Early signaling: FALSE
[08:05:36.797] | : Environment: R_GlobalEnv
[08:05:36.797] | : State: ‘running’
[08:05:36.797] | : Resolved: FALSE
[08:05:36.797] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-58
[08:05:36.797] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:36.797] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:36.797] | : Value: <not collected>
[08:05:36.797] | : Conditions captured: <none>
[08:05:36.810] | : Chunk #2 of 5 ... DONE
[08:05:36.810] | : Chunk #3 of 5 ...
[08:05:36.810] | :  - Finding globals in 'X' for chunk #3 ...
[08:05:36.810] | :    + additional globals found: [n=0] 
[08:05:36.810] | :    + additional namespaces needed: [n=0] 
[08:05:36.811] | :  - Finding globals in 'X' for chunk #3 ... DONE
[08:05:36.811] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[08:05:36.811] | :  - seeds: <none>
[08:05:36.811] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:36.922] | : Created future:
[08:05:36.922] | : MultisessionFuture:
[08:05:36.922] | : Label: ‘future_lapply-3’
[08:05:36.922] | : Expression:
[08:05:36.922] | : {
[08:05:36.922] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:36.922] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:36.922] | :     "# as a global variable                                         "
[08:05:36.922] | :     do.call(function(...) {
[08:05:36.922] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:36.922] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:36.922] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:36.922] | :         "# anonymous function.                                          "
[08:05:36.922] | :         "#                                                              "
[08:05:36.922] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:36.922] | :         "# function environment of FUN() to the calling environment.    "
[08:05:36.922] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:36.922] | :         "# global environment, which is where globals are written.      "
[08:05:36.922] | :         penv <- env <- environment(...future.FUN)
[08:05:36.922] | :         repeat {
[08:05:36.922] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:36.922] | :                 emptyenv())) 
[08:05:36.922] | :                 break
[08:05:36.922] | :             penv <- env
[08:05:36.922] | :             env <- parent.env(env)
[08:05:36.922] | :         }
[08:05:36.922] | :         if (identical(penv, globalenv())) {
[08:05:36.922] | :             environment(...future.FUN) <- environment()
[08:05:36.922] | :         }
[08:05:36.922] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:36.922] | :             !isNamespace(penv)) {
[08:05:36.922] | :             parent.env(penv) <- environment()
[08:05:36.922] | :         }
[08:05:36.922] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:36.922] | :         {
[08:05:36.922] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:36.922] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:36.922] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:36.922] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:36.922] | :                 on.exit(options(oopts), add = TRUE)
[08:05:36.922] | :             }
[08:05:36.922] | :             {
[08:05:36.922] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:36.922] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:36.922] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:36.922] | :                   {
[08:05:36.922] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:36.922] | :                   }
[08:05:36.922] | :                 })
[08:05:36.922] | :             }
[08:05:36.922] | :         }
[08:05:36.922] | :     }, args = future.call.arguments)
[08:05:36.922] | : }
[08:05:36.922] | : Globals: 5 objects totaling 5.38 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 217 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:36.922] | : Packages: <none>
[08:05:36.922] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:36.922] | : Capture standard output: TRUE
[08:05:36.922] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:36.922] | : Immediate condition classes: ‘immediateCondition’
[08:05:36.922] | : Lazy evaluation: FALSE
[08:05:36.922] | : Local evaluation: TRUE
[08:05:36.922] | : Asynchronous evaluation: TRUE
[08:05:36.922] | : Early signaling: FALSE
[08:05:36.922] | : Environment: R_GlobalEnv
[08:05:36.922] | : State: ‘running’
[08:05:36.922] | : Resolved: FALSE
[08:05:36.922] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-59
[08:05:36.922] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:36.922] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:36.922] | : Value: <not collected>
[08:05:36.922] | : Conditions captured: <none>
[08:05:36.934] | : Chunk #3 of 5 ... DONE
[08:05:36.934] | : Chunk #4 of 5 ...
[08:05:36.935] | :  - Finding globals in 'X' for chunk #4 ...
[08:05:36.935] | :    + additional globals found: [n=0] 
[08:05:36.935] | :    + additional namespaces needed: [n=0] 
[08:05:36.935] | :  - Finding globals in 'X' for chunk #4 ... DONE
[08:05:36.935] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[08:05:36.936] | :  - seeds: <none>
[08:05:36.936] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:37.047] | : Created future:
[08:05:37.047] | : MultisessionFuture:
[08:05:37.047] | : Label: ‘future_lapply-4’
[08:05:37.047] | : Expression:
[08:05:37.047] | : {
[08:05:37.047] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:37.047] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:37.047] | :     "# as a global variable                                         "
[08:05:37.047] | :     do.call(function(...) {
[08:05:37.047] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:37.047] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:37.047] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:37.047] | :         "# anonymous function.                                          "
[08:05:37.047] | :         "#                                                              "
[08:05:37.047] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:37.047] | :         "# function environment of FUN() to the calling environment.    "
[08:05:37.047] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:37.047] | :         "# global environment, which is where globals are written.      "
[08:05:37.047] | :         penv <- env <- environment(...future.FUN)
[08:05:37.047] | :         repeat {
[08:05:37.047] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:37.047] | :                 emptyenv())) 
[08:05:37.047] | :                 break
[08:05:37.047] | :             penv <- env
[08:05:37.047] | :             env <- parent.env(env)
[08:05:37.047] | :         }
[08:05:37.047] | :         if (identical(penv, globalenv())) {
[08:05:37.047] | :             environment(...future.FUN) <- environment()
[08:05:37.047] | :         }
[08:05:37.047] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:37.047] | :             !isNamespace(penv)) {
[08:05:37.047] | :             parent.env(penv) <- environment()
[08:05:37.047] | :         }
[08:05:37.047] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:37.047] | :         {
[08:05:37.047] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:37.047] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:37.047] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:37.047] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:37.047] | :                 on.exit(options(oopts), add = TRUE)
[08:05:37.047] | :             }
[08:05:37.047] | :             {
[08:05:37.047] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:37.047] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:37.047] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:37.047] | :                   {
[08:05:37.047] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:37.047] | :                   }
[08:05:37.047] | :                 })
[08:05:37.047] | :             }
[08:05:37.047] | :         }
[08:05:37.047] | :     }, args = future.call.arguments)
[08:05:37.047] | : }
[08:05:37.047] | : Globals: 5 objects totaling 5.38 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 217 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:37.047] | : Packages: <none>
[08:05:37.047] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:37.047] | : Capture standard output: TRUE
[08:05:37.047] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:37.047] | : Immediate condition classes: ‘immediateCondition’
[08:05:37.047] | : Lazy evaluation: FALSE
[08:05:37.047] | : Local evaluation: TRUE
[08:05:37.047] | : Asynchronous evaluation: TRUE
[08:05:37.047] | : Early signaling: FALSE
[08:05:37.047] | : Environment: R_GlobalEnv
[08:05:37.047] | : State: ‘running’
[08:05:37.047] | : Resolved: FALSE
[08:05:37.047] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-60
[08:05:37.047] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:37.047] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:37.047] | : Value: <not collected>
[08:05:37.047] | : Conditions captured: <none>
[08:05:37.059] | : Chunk #4 of 5 ... DONE
[08:05:37.060] | : Chunk #5 of 5 ...
[08:05:37.060] | :  - Finding globals in 'X' for chunk #5 ...
[08:05:37.060] | :    + additional globals found: [n=0] 
[08:05:37.060] | :    + additional namespaces needed: [n=0] 
[08:05:37.060] | :  - Finding globals in 'X' for chunk #5 ... DONE
[08:05:37.061] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[08:05:37.061] | :  - seeds: <none>
[08:05:37.061] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:37.168] | : Created future:
[08:05:37.168] | : MultisessionFuture:
[08:05:37.168] | : Label: ‘future_lapply-5’
[08:05:37.168] | : Expression:
[08:05:37.168] | : {
[08:05:37.168] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:37.168] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:37.168] | :     "# as a global variable                                         "
[08:05:37.168] | :     do.call(function(...) {
[08:05:37.168] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:37.168] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:37.168] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:37.168] | :         "# anonymous function.                                          "
[08:05:37.168] | :         "#                                                              "
[08:05:37.168] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:37.168] | :         "# function environment of FUN() to the calling environment.    "
[08:05:37.168] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:37.168] | :         "# global environment, which is where globals are written.      "
[08:05:37.168] | :         penv <- env <- environment(...future.FUN)
[08:05:37.168] | :         repeat {
[08:05:37.168] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:37.168] | :                 emptyenv())) 
[08:05:37.168] | :                 break
[08:05:37.168] | :             penv <- env
[08:05:37.168] | :             env <- parent.env(env)
[08:05:37.168] | :         }
[08:05:37.168] | :         if (identical(penv, globalenv())) {
[08:05:37.168] | :             environment(...future.FUN) <- environment()
[08:05:37.168] | :         }
[08:05:37.168] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:37.168] | :             !isNamespace(penv)) {
[08:05:37.168] | :             parent.env(penv) <- environment()
[08:05:37.168] | :         }
[08:05:37.168] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:37.168] | :         {
[08:05:37.168] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:37.168] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:37.168] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:37.168] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:37.168] | :                 on.exit(options(oopts), add = TRUE)
[08:05:37.168] | :             }
[08:05:37.168] | :             {
[08:05:37.168] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:37.168] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:37.168] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:37.168] | :                   {
[08:05:37.168] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:37.168] | :                   }
[08:05:37.168] | :                 })
[08:05:37.168] | :             }
[08:05:37.168] | :         }
[08:05:37.168] | :     }, args = future.call.arguments)
[08:05:37.168] | : }
[08:05:37.168] | : Globals: 5 objects totaling 5.38 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 217 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:37.168] | : Packages: <none>
[08:05:37.168] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:37.168] | : Capture standard output: TRUE
[08:05:37.168] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:37.168] | : Immediate condition classes: ‘immediateCondition’
[08:05:37.168] | : Lazy evaluation: FALSE
[08:05:37.168] | : Local evaluation: TRUE
[08:05:37.168] | : Asynchronous evaluation: TRUE
[08:05:37.168] | : Early signaling: FALSE
[08:05:37.168] | : Environment: R_GlobalEnv
[08:05:37.168] | : State: ‘running’
[08:05:37.168] | : Resolved: FALSE
[08:05:37.168] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-61
[08:05:37.168] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:37.168] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:37.168] | : Value: <not collected>
[08:05:37.168] | : Conditions captured: <none>
[08:05:37.180] | : Chunk #5 of 5 ... DONE
[08:05:37.181] | : Launching 5 futures (chunks) ... DONE
[08:05:37.181] | : Resolving 5 futures (chunks) ...
[08:05:37.214] | :  - Number of value chunks collected: 5
[08:05:37.215] | : Resolving 5 futures (chunks) ... DONE
[08:05:37.215] | : Reducing values from 5 chunks ...
[08:05:37.215] | :  - Number of values collected after concatenation: 10
[08:05:37.215] | :  - Number of values expected: 10
[08:05:37.215] | : Reducing values from 5 chunks ... DONE
[08:05:37.215] | future_lapply() -> future_xapply() ... done
[08:05:37.215] future_lapply() ... done
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes
[08:05:37.221] future_lapply() ...
[08:05:37.222] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:37.222] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:37.222] | future_lapply() -> future_xapply() ...
[08:05:37.223] | : Number of chunks: 2
[08:05:37.223] | : getGlobalsAndPackagesXApply() ...
[08:05:37.223] | : . future.globals: TRUE
[08:05:37.228] | : . globals found/used: [n=1] ‘FUN’
[08:05:37.228] | : . needed namespaces: [n=0] 
[08:05:37.228] | : . use_args: TRUE
[08:05:37.228] | : . Getting '...' globals ...
[08:05:37.229] | : . ' '...' content: [n=0] 
[08:05:37.229] | : . ' List of 1
[08:05:37.229] | : . '  $ ...: list()
[08:05:37.229] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:37.229] | : . '  - attr(*, "where")=List of 1
[08:05:37.229] | : . '   ..$ ...:<environment: 0x56342d3b8168> 
[08:05:37.229] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:37.229] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:37.229] | : . '  - attr(*, "total_size")= num NA
[08:05:37.231] | : . Getting '...' globals ... done
[08:05:37.231] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:37.232] | : . List of 2
[08:05:37.232] | : .  $ ...future.FUN:function (x)  
[08:05:37.232] | : .  $ ...          : list()
[08:05:37.232] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:37.232] | : .  - attr(*, "where")=List of 2
[08:05:37.232] | : .   ..$ ...future.FUN:<environment: 0x56342d3b8168> 
[08:05:37.232] | : .   ..$ ...          :<environment: 0x56342d3b8168> 
[08:05:37.232] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:37.232] | : .  - attr(*, "resolved")= logi FALSE
[08:05:37.232] | : .  - attr(*, "total_size")= num 5085
[08:05:37.234] | : . Packages to be attached in all futures: [n=0] 
[08:05:37.235] | : getGlobalsAndPackagesXApply() ... done
[08:05:37.235] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:37.235] | : List of 5
[08:05:37.235] | :  $ ...future.FUN            :function (x)  
[08:05:37.235] | :  $ ...                      : list()
[08:05:37.235] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:37.235] | :  $ ...future.elements_ii    : NULL
[08:05:37.235] | :  $ ...future.seeds_ii       : NULL
[08:05:37.235] | :  $ ...future.globals.maxSize: NULL
[08:05:37.235] | :  - attr(*, "where")=List of 5
[08:05:37.235] | :   ..$ ...future.FUN            :<environment: 0x56342d3b8168> 
[08:05:37.235] | :   ..$ ...                      :<environment: 0x56342d3b8168> 
[08:05:37.235] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:37.235] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:37.235] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:37.235] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:37.235] | :  - attr(*, "resolved")= logi FALSE
[08:05:37.235] | :  - attr(*, "total_size")= num 5085
[08:05:37.239] | : Number of futures (= number of chunks): 2
[08:05:37.239] | : Launching 2 futures (chunks) ...
[08:05:37.239] | : Chunk #1 of 2 ...
[08:05:37.239] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:37.240] | :    + additional globals found: [n=0] 
[08:05:37.240] | :    + additional namespaces needed: [n=0] 
[08:05:37.240] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:37.240] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 2 * 2306 = 4611 (bytes)
[08:05:37.240] | :  - seeds: <none>
[08:05:37.240] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:37.336] | : Created future:
[08:05:37.336] | : MultisessionFuture:
[08:05:37.336] | : Label: ‘future_lapply-1’
[08:05:37.336] | : Expression:
[08:05:37.336] | : {
[08:05:37.336] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:37.336] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:37.336] | :     "# as a global variable                                         "
[08:05:37.336] | :     do.call(function(...) {
[08:05:37.336] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:37.336] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:37.336] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:37.336] | :         "# anonymous function.                                          "
[08:05:37.336] | :         "#                                                              "
[08:05:37.336] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:37.336] | :         "# function environment of FUN() to the calling environment.    "
[08:05:37.336] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:37.336] | :         "# global environment, which is where globals are written.      "
[08:05:37.336] | :         penv <- env <- environment(...future.FUN)
[08:05:37.336] | :         repeat {
[08:05:37.336] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:37.336] | :                 emptyenv())) 
[08:05:37.336] | :                 break
[08:05:37.336] | :             penv <- env
[08:05:37.336] | :             env <- parent.env(env)
[08:05:37.336] | :         }
[08:05:37.336] | :         if (identical(penv, globalenv())) {
[08:05:37.336] | :             environment(...future.FUN) <- environment()
[08:05:37.336] | :         }
[08:05:37.336] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:37.336] | :             !isNamespace(penv)) {
[08:05:37.336] | :             parent.env(penv) <- environment()
[08:05:37.336] | :         }
[08:05:37.336] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:37.336] | :         {
[08:05:37.336] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:37.336] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:37.336] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:37.336] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:37.336] | :                 on.exit(options(oopts), add = TRUE)
[08:05:37.336] | :             }
[08:05:37.336] | :             {
[08:05:37.336] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:37.336] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:37.336] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:37.336] | :                   {
[08:05:37.336] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:37.336] | :                   }
[08:05:37.336] | :                 })
[08:05:37.336] | :             }
[08:05:37.336] | :         }
[08:05:37.336] | :     }, args = future.call.arguments)
[08:05:37.336] | : }
[08:05:37.336] | : Globals: 5 objects totaling 5.61 KiB (list ‘...future.elements_ii’ of 445 bytes, function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:37.336] | : Packages: <none>
[08:05:37.336] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:37.336] | : Capture standard output: TRUE
[08:05:37.336] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:37.336] | : Immediate condition classes: ‘immediateCondition’
[08:05:37.336] | : Lazy evaluation: FALSE
[08:05:37.336] | : Local evaluation: TRUE
[08:05:37.336] | : Asynchronous evaluation: TRUE
[08:05:37.336] | : Early signaling: FALSE
[08:05:37.336] | : Environment: R_GlobalEnv
[08:05:37.336] | : State: ‘running’
[08:05:37.336] | : Resolved: FALSE
[08:05:37.336] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-62
[08:05:37.336] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:37.336] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:37.336] | : Value: <not collected>
[08:05:37.336] | : Conditions captured: <none>
[08:05:37.348] | : Chunk #1 of 2 ... DONE
[08:05:37.348] | : Chunk #2 of 2 ...
[08:05:37.349] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:37.349] | :    + additional globals found: [n=0] 
[08:05:37.349] | :    + additional namespaces needed: [n=0] 
[08:05:37.349] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:37.349] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 2 * 2306 = 4611 (bytes)
[08:05:37.350] | :  - seeds: <none>
[08:05:37.350] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:37.460] | : Created future:
[08:05:37.460] | : MultisessionFuture:
[08:05:37.460] | : Label: ‘future_lapply-2’
[08:05:37.460] | : Expression:
[08:05:37.460] | : {
[08:05:37.460] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:37.460] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:37.460] | :     "# as a global variable                                         "
[08:05:37.460] | :     do.call(function(...) {
[08:05:37.460] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:37.460] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:37.460] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:37.460] | :         "# anonymous function.                                          "
[08:05:37.460] | :         "#                                                              "
[08:05:37.460] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:37.460] | :         "# function environment of FUN() to the calling environment.    "
[08:05:37.460] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:37.460] | :         "# global environment, which is where globals are written.      "
[08:05:37.460] | :         penv <- env <- environment(...future.FUN)
[08:05:37.460] | :         repeat {
[08:05:37.460] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:37.460] | :                 emptyenv())) 
[08:05:37.460] | :                 break
[08:05:37.460] | :             penv <- env
[08:05:37.460] | :             env <- parent.env(env)
[08:05:37.460] | :         }
[08:05:37.460] | :         if (identical(penv, globalenv())) {
[08:05:37.460] | :             environment(...future.FUN) <- environment()
[08:05:37.460] | :         }
[08:05:37.460] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:37.460] | :             !isNamespace(penv)) {
[08:05:37.460] | :             parent.env(penv) <- environment()
[08:05:37.460] | :         }
[08:05:37.460] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:37.460] | :         {
[08:05:37.460] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:37.460] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:37.460] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:37.460] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:37.460] | :                 on.exit(options(oopts), add = TRUE)
[08:05:37.460] | :             }
[08:05:37.460] | :             {
[08:05:37.460] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:37.460] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:37.460] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:37.460] | :                   {
[08:05:37.460] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:37.460] | :                   }
[08:05:37.460] | :                 })
[08:05:37.460] | :             }
[08:05:37.460] | :         }
[08:05:37.460] | :     }, args = future.call.arguments)
[08:05:37.460] | : }
[08:05:37.460] | : Globals: 5 objects totaling 5.61 KiB (list ‘...future.elements_ii’ of 445 bytes, function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:37.460] | : Packages: <none>
[08:05:37.460] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:37.460] | : Capture standard output: TRUE
[08:05:37.460] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:37.460] | : Immediate condition classes: ‘immediateCondition’
[08:05:37.460] | : Lazy evaluation: FALSE
[08:05:37.460] | : Local evaluation: TRUE
[08:05:37.460] | : Asynchronous evaluation: TRUE
[08:05:37.460] | : Early signaling: FALSE
[08:05:37.460] | : Environment: R_GlobalEnv
[08:05:37.460] | : State: ‘running’
[08:05:37.460] | : Resolved: FALSE
[08:05:37.460] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-63
[08:05:37.460] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:37.460] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:37.460] | : Value: <not collected>
[08:05:37.460] | : Conditions captured: <none>
[08:05:37.472] | : Chunk #2 of 2 ... DONE
[08:05:37.472] | : Launching 2 futures (chunks) ... DONE
[08:05:37.473] | : Resolving 2 futures (chunks) ...
[08:05:37.505] | :  - Number of value chunks collected: 2
[08:05:37.506] | : Resolving 2 futures (chunks) ... DONE
[08:05:37.506] | : Reducing values from 2 chunks ...
[08:05:37.506] | :  - Number of values collected after concatenation: 10
[08:05:37.506] | :  - Number of values expected: 10
[08:05:37.506] | : Reducing values from 2 chunks ... DONE
[08:05:37.506] | future_lapply() -> future_xapply() ... done
[08:05:37.506] future_lapply() ... done
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes
[08:05:37.510] future_lapply() ...
[08:05:37.510] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:37.511] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:37.511] | future_lapply() -> future_xapply() ...
[08:05:37.511] | : Number of chunks: 1
[08:05:37.511] | : getGlobalsAndPackagesXApply() ...
[08:05:37.511] | : . future.globals: TRUE
[08:05:37.516] | : . globals found/used: [n=1] ‘FUN’
[08:05:37.517] | : . needed namespaces: [n=0] 
[08:05:37.517] | : . use_args: TRUE
[08:05:37.517] | : . Getting '...' globals ...
[08:05:37.517] | : . ' '...' content: [n=0] 
[08:05:37.517] | : . ' List of 1
[08:05:37.517] | : . '  $ ...: list()
[08:05:37.517] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:37.517] | : . '  - attr(*, "where")=List of 1
[08:05:37.517] | : . '   ..$ ...:<environment: 0x56342c5a33e8> 
[08:05:37.517] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:37.517] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:37.517] | : . '  - attr(*, "total_size")= num NA
[08:05:37.520] | : . Getting '...' globals ... done
[08:05:37.520] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:37.520] | : . List of 2
[08:05:37.520] | : .  $ ...future.FUN:function (x)  
[08:05:37.520] | : .  $ ...          : list()
[08:05:37.520] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:37.520] | : .  - attr(*, "where")=List of 2
[08:05:37.520] | : .   ..$ ...future.FUN:<environment: 0x56342c5a33e8> 
[08:05:37.520] | : .   ..$ ...          :<environment: 0x56342c5a33e8> 
[08:05:37.520] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:37.520] | : .  - attr(*, "resolved")= logi FALSE
[08:05:37.520] | : .  - attr(*, "total_size")= num 5085
[08:05:37.523] | : . Packages to be attached in all futures: [n=0] 
[08:05:37.523] | : getGlobalsAndPackagesXApply() ... done
[08:05:37.523] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:37.524] | : List of 5
[08:05:37.524] | :  $ ...future.FUN            :function (x)  
[08:05:37.524] | :  $ ...                      : list()
[08:05:37.524] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:37.524] | :  $ ...future.elements_ii    : NULL
[08:05:37.524] | :  $ ...future.seeds_ii       : NULL
[08:05:37.524] | :  $ ...future.globals.maxSize: NULL
[08:05:37.524] | :  - attr(*, "where")=List of 5
[08:05:37.524] | :   ..$ ...future.FUN            :<environment: 0x56342c5a33e8> 
[08:05:37.524] | :   ..$ ...                      :<environment: 0x56342c5a33e8> 
[08:05:37.524] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:37.524] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:37.524] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:37.524] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:37.524] | :  - attr(*, "resolved")= logi FALSE
[08:05:37.524] | :  - attr(*, "total_size")= num 5085
[08:05:37.528] | : Number of futures (= number of chunks): 1
[08:05:37.528] | : Launching 1 futures (chunks) ...
[08:05:37.528] | : Chunk #1 of 1 ...
[08:05:37.528] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:37.528] | :    + additional globals found: [n=0] 
[08:05:37.529] | :    + additional namespaces needed: [n=0] 
[08:05:37.529] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:37.529] | :  - seeds: <none>
[08:05:37.529] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:37.625] | : Created future:
[08:05:37.625] | : MultisessionFuture:
[08:05:37.625] | : Label: ‘future_lapply-1’
[08:05:37.625] | : Expression:
[08:05:37.625] | : {
[08:05:37.625] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:37.625] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:37.625] | :     "# as a global variable                                         "
[08:05:37.625] | :     do.call(function(...) {
[08:05:37.625] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:37.625] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:37.625] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:37.625] | :         "# anonymous function.                                          "
[08:05:37.625] | :         "#                                                              "
[08:05:37.625] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:37.625] | :         "# function environment of FUN() to the calling environment.    "
[08:05:37.625] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:37.625] | :         "# global environment, which is where globals are written.      "
[08:05:37.625] | :         penv <- env <- environment(...future.FUN)
[08:05:37.625] | :         repeat {
[08:05:37.625] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:37.625] | :                 emptyenv())) 
[08:05:37.625] | :                 break
[08:05:37.625] | :             penv <- env
[08:05:37.625] | :             env <- parent.env(env)
[08:05:37.625] | :         }
[08:05:37.625] | :         if (identical(penv, globalenv())) {
[08:05:37.625] | :             environment(...future.FUN) <- environment()
[08:05:37.625] | :         }
[08:05:37.625] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:37.625] | :             !isNamespace(penv)) {
[08:05:37.625] | :             parent.env(penv) <- environment()
[08:05:37.625] | :         }
[08:05:37.625] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:37.625] | :         {
[08:05:37.625] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:37.625] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:37.625] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:37.625] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:37.625] | :                 on.exit(options(oopts), add = TRUE)
[08:05:37.625] | :             }
[08:05:37.625] | :             {
[08:05:37.625] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:37.625] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:37.625] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:37.625] | :                   {
[08:05:37.625] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:37.625] | :                   }
[08:05:37.625] | :                 })
[08:05:37.625] | :             }
[08:05:37.625] | :         }
[08:05:37.625] | :     }, args = future.call.arguments)
[08:05:37.625] | : }
[08:05:37.625] | : Globals: 5 objects totaling 5.98 KiB (list ‘...future.elements_ii’ of 825 bytes, function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:37.625] | : Packages: <none>
[08:05:37.625] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:37.625] | : Capture standard output: TRUE
[08:05:37.625] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:37.625] | : Immediate condition classes: ‘immediateCondition’
[08:05:37.625] | : Lazy evaluation: FALSE
[08:05:37.625] | : Local evaluation: TRUE
[08:05:37.625] | : Asynchronous evaluation: TRUE
[08:05:37.625] | : Early signaling: FALSE
[08:05:37.625] | : Environment: R_GlobalEnv
[08:05:37.625] | : State: ‘running’
[08:05:37.625] | : Resolved: FALSE
[08:05:37.625] | : Unique identifier: 3cc614720d08b81d052793a8fb885c31-64
[08:05:37.625] | : Owner process: 3cc614720d08b81d052793a8fb885c31
[08:05:37.625] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:37.625] | : Value: <not collected>
[08:05:37.625] | : Conditions captured: <none>
[08:05:37.640] | : Chunk #1 of 1 ... DONE
[08:05:37.640] | : Launching 1 futures (chunks) ... DONE
[08:05:37.640] | : Resolving 1 futures (chunks) ...
[08:05:37.670] | :  - Number of value chunks collected: 1
[08:05:37.670] | : Resolving 1 futures (chunks) ... DONE
[08:05:37.671] | : Reducing values from 1 chunks ...
[08:05:37.671] | :  - Number of values collected after concatenation: 10
[08:05:37.671] | :  - Number of values expected: 10
[08:05:37.671] | : Reducing values from 1 chunks ... DONE
[08:05:37.671] | future_lapply() -> future_xapply() ... done
[08:05:37.671] future_lapply() ... done
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes

> y <- NULL

> options(future.globals.maxSize = oMaxSize)

> message("*** future_lapply() - too large ... DONE")
*** future_lapply() - too large ... DONE

> message("*** future_lapply() - globals exceptions ...")
*** future_lapply() - globals exceptions ...

> res <- tryCatch({
+     y <- future_lapply(1, FUN = function(x) x, future.globals = 42)
+ }, error = identity)
[08:05:37.675] future_lapply() ...
[08:05:37.676] | Globals in FUN(): [n=0] 
[08:05:37.676] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:37.676] | future_lapply() -> future_xapply() ...
[08:05:37.676] | : Number of chunks: 1
[08:05:37.676] | : getGlobalsAndPackagesXApply() ...
[08:05:37.676] | : getGlobalsAndPackagesXApply() ... done
[08:05:37.677] | future_lapply() -> future_xapply() ... done
[08:05:37.677] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> res <- tryCatch({
+     y <- future_lapply(1, FUN = function(x) x, future.globals = list(1))
+ }, error = identity)
[08:05:37.677] future_lapply() ...
[08:05:37.677] | Globals in FUN(): [n=0] 
[08:05:37.677] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:37.678] | future_lapply() -> future_xapply() ...
[08:05:37.678] | : Number of chunks: 1
[08:05:37.678] | : getGlobalsAndPackagesXApply() ...
[08:05:37.678] | : . future.globals: <name-value list> with names 
[08:05:37.678] | : getGlobalsAndPackagesXApply() ... done
[08:05:37.678] | future_lapply() -> future_xapply() ... done
[08:05:37.678] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> res <- tryCatch({
+     y <- future_lapply(1, FUN = function(x) x, future.globals = "...future.FUN")
+ }, error = identity)
[08:05:37.679] future_lapply() ...
[08:05:37.679] | Globals in FUN(): [n=0] 
[08:05:37.679] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:37.679] | future_lapply() -> future_xapply() ...
[08:05:37.679] | : Number of chunks: 1
[08:05:37.679] | : getGlobalsAndPackagesXApply() ...
[08:05:37.680] | : . future.globals: ‘...future.FUN’
[08:05:37.680] | : . use_args: TRUE
[08:05:37.680] | : getGlobalsAndPackagesXApply() ... done
[08:05:37.680] | future_lapply() -> future_xapply() ... done
[08:05:37.680] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> res <- tryCatch({
+     y <- future_lapply(1, FUN = function(x) x, future.globals = "...future.FUN")
+ }, error = identity)
[08:05:37.680] future_lapply() ...
[08:05:37.681] | Globals in FUN(): [n=0] 
[08:05:37.681] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:37.681] | future_lapply() -> future_xapply() ...
[08:05:37.681] | : Number of chunks: 1
[08:05:37.681] | : getGlobalsAndPackagesXApply() ...
[08:05:37.681] | : . future.globals: ‘...future.FUN’
[08:05:37.682] | : . use_args: TRUE
[08:05:37.682] | : getGlobalsAndPackagesXApply() ... done
[08:05:37.682] | future_lapply() -> future_xapply() ... done
[08:05:37.682] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> ...future.elements_ii <- 42

> X <- list(function() 2 * ...future.elements_ii)

> res <- tryCatch({
+     y <- future_lapply(X, FUN = function(f) f())
+ }, error = identity)
[08:05:37.682] future_lapply() ...
[08:05:37.683] | Globals in FUN(): [n=0] 
[08:05:37.683] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:37.683] | future_lapply() -> future_xapply() ...
[08:05:37.683] | : Number of chunks: 1
[08:05:37.683] | : getGlobalsAndPackagesXApply() ...
[08:05:37.684] | : . future.globals: TRUE
[08:05:37.687] | : . globals found/used: [n=1] ‘FUN’
[08:05:37.687] | : . needed namespaces: [n=0] 
[08:05:37.687] | : . use_args: TRUE
[08:05:37.687] | : . Getting '...' globals ...
[08:05:37.688] | : . ' '...' content: [n=0] 
[08:05:37.688] | : . ' List of 1
[08:05:37.688] | : . '  $ ...: list()
[08:05:37.688] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:37.688] | : . '  - attr(*, "where")=List of 1
[08:05:37.688] | : . '   ..$ ...:<environment: 0x56342c0c8798> 
[08:05:37.688] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:37.688] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:37.688] | : . '  - attr(*, "total_size")= num NA
[08:05:37.690] | : . Getting '...' globals ... done
[08:05:37.691] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:37.691] | : . List of 2
[08:05:37.691] | : .  $ ...future.FUN:function (f)  
[08:05:37.691] | : .  $ ...          : list()
[08:05:37.691] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:37.691] | : .  - attr(*, "where")=List of 2
[08:05:37.691] | : .   ..$ ...future.FUN:<environment: 0x56342c0c8798> 
[08:05:37.691] | : .   ..$ ...          :<environment: 0x56342c0c8798> 
[08:05:37.691] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:37.691] | : .  - attr(*, "resolved")= logi FALSE
[08:05:37.691] | : .  - attr(*, "total_size")= num 3255
[08:05:37.694] | : . Packages to be attached in all futures: [n=0] 
[08:05:37.694] | : getGlobalsAndPackagesXApply() ... done
[08:05:37.694] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:37.694] | : List of 5
[08:05:37.694] | :  $ ...future.FUN            :function (f)  
[08:05:37.694] | :  $ ...                      : list()
[08:05:37.694] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:37.694] | :  $ ...future.elements_ii    : NULL
[08:05:37.694] | :  $ ...future.seeds_ii       : NULL
[08:05:37.694] | :  $ ...future.globals.maxSize: NULL
[08:05:37.694] | :  - attr(*, "where")=List of 5
[08:05:37.694] | :   ..$ ...future.FUN            :<environment: 0x56342c0c8798> 
[08:05:37.694] | :   ..$ ...                      :<environment: 0x56342c0c8798> 
[08:05:37.694] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:37.694] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:37.694] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:37.694] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:37.694] | :  - attr(*, "resolved")= logi FALSE
[08:05:37.694] | :  - attr(*, "total_size")= num 3255
[08:05:37.698] | : Number of futures (= number of chunks): 1
[08:05:37.698] | : Launching 1 futures (chunks) ...
[08:05:37.699] | : Chunk #1 of 1 ...
[08:05:37.699] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:37.704] | :    + additional globals found: [n=1] ‘...future.elements_ii’
[08:05:37.704] | :    + additional namespaces needed: [n=0] 
[08:05:37.705] | : onError() ...
[08:05:37.705] | : . Received <simpleError>
Warning: Caught simpleError. Canceling all iterations ...
[08:05:37.705] | : . Signaling: <simpleError>
[08:05:37.707] | : onError() ... done
[08:05:37.707] | future_lapply() -> future_xapply() ... done
[08:05:37.708] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> message("*** future_lapply() - globals exceptions ... DONE")
*** future_lapply() - globals exceptions ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=5s, sys.self=0.3s, elapsed=9s, user.child=0.2s, sys.child=0.4s
Test ‘future_lapply,globals’ ... success
> 
