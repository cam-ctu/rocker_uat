
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:49:36.188] plan(<NULL>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.188] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.189] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.189] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.227] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:36.227] |  :  all.equal() for FutureStrategyList ...
[10:49:36.227] |  :  .  New stack:
[10:49:36.227] |  :  .  List of 1
[10:49:36.227] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.227] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.227] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.227] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.227] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.227] |  :  .    ..- attr(*, "call")= language future::plan("sequential")
[10:49:36.227] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.231] |  :  .  Old stack:
[10:49:36.231] |  :  .  List of 1
[10:49:36.231] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.231] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.231] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.231] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.231] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.231] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:36.231] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.233] |  :  .  Not identical
[10:49:36.233] |  :  .  all.equal() for future ...
[10:49:36.234] |  :  .  |  List of 2
[10:49:36.234] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.234] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.234] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.234] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.234] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.234] |  :  .  |    ..- attr(*, "call")= language future::plan("sequential")
[10:49:36.234] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.234] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.234] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.234] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.234] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.234] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:36.238] |  :  .  all.equal() for future ... done
[10:49:36.238] |  :  all.equal() for FutureStrategyList ... done
[10:49:36.238] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.238] |  :  List of future strategies:
[10:49:36.238] |  :  1. sequential:
[10:49:36.238] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.238] |  :     - tweaked: FALSE
[10:49:36.238] |  :     - call: plan(sequential)
[10:49:36.238] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:36.239] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> library("listenv")
> 
> all_equal_but_call <- function(target, current, ...) {
+   attr(target, "call") <- NULL
+   attr(current, "call") <- NULL
+   all.equal(target = target, current = current, ...)
+ }
> 
> message("*** future_by() ...")
*** future_by() ...
> 
> ## ---------------------------------------------------------
> ## by()
> ## ---------------------------------------------------------
> if (require("datasets") && require("stats")) { ## warpbreaks & lm()
+   ## Use a local variable to test that it is properly exported, because
+   ## 'warpbreaks' is available in all R sessions
+   data <- warpbreaks
+   
+   y0 <- by(data[, 1:2], INDICES = data[,"tension"], FUN = summary)
+   y1 <- by(data[, 1], INDICES = data[, -1], FUN = summary, digits = 2L)
+   y2 <- by(data, INDICES = data[,"tension"], FUN = function(x, ...) {
+     lm(breaks ~ wool, data = x, ...)
+   }, singular.ok = FALSE)
+   
+   ## now suppose we want to extract the coefficients by group
+   tmp <- with(data, by(data, INDICES = tension, FUN = function(x) {
+     lm(breaks ~ wool, data = x)
+   }))
+   y3 <- sapply(tmp, coef)
+ 
+   ## Source: {r-source}/tests/reg-tests-1d.R
+   by2 <- function(data, INDICES, FUN) {
+     by(data, INDICES = INDICES, FUN = FUN)
+   }
+   future_by2 <- function(data, INDICES, FUN) {
+     future_by(data, INDICES = INDICES, FUN = FUN)
+   }
+   y4 <- by2(data, INDICES = data[,"tension"], FUN = summary)
+ 
+   for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     strategies <- supportedStrategies(cores)
+   
+     for (strategy in supportedStrategies()) {
+       message(sprintf("- plan('%s') ...", strategy))
+       plan(strategy)
+     
+       y0f <- future_by(data[, 1:2], INDICES = data[,"tension"], FUN = summary)
+       stopifnot(all_equal_but_call(y0f, y0, check.attributes = FALSE))
+       
+       y1f <- future_by(data[, 1], INDICES = data[, -1], FUN = summary, digits = 2L)
+       stopifnot(all_equal_but_call(y1f, y1))
+       
+       y2f <- future_by(data, INDICES = data[,"tension"], FUN = function(x, ...) {
+         lm(breaks ~ wool, data = x, ...)
+       }, singular.ok = FALSE)
+       stopifnot(all_equal_but_call(y2f, y2))
+       
+       ## now suppose we want to extract the coefficients by group
+       tmp <- with(data, future_by(data, INDICES = tension, FUN = function(x) {
+         lm(breaks ~ wool, data = x)
+       }))
+       y3f <- sapply(tmp, coef)
+       stopifnot(all_equal_but_call(y3f, y3))
+       
+       y4f <- future_by2(data, INDICES = data[,"tension"], FUN = summary)
+       stopifnot(all_equal_but_call(y4f, y4))
+ 
+       ## Deprecated /HB 2022-10-24
+       y4f2 <- future_by2(data, INDICES = data[,"tension"], FUN = "summary")
+       stopifnot(all_equal_but_call(y4f2, y4))
+ 
+       res <- tryCatch({
+         y4f2 <- future_by2(data, INDICES = data[,"tension"], FUN = "summary")
+       }, warning = identity)
+       stopifnot(inherits(res, "warning"))
+       if (getRversion() >= "3.6.0") {
+         stopifnot(inherits(res, "deprecatedWarning"))
+       }
+     } ## for (strategy ...)
+     
+     message(sprintf("Testing with %d cores ... DONE", cores))
+   } ## for (cores ...)
+ } ## if (require("stats"))
Testing with 1 cores ...
- plan('sequential') ...
[10:49:36.299] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.299] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:36.299] |  :  all.equal() for FutureStrategyList ...
[10:49:36.299] |  :  .  New stack:
[10:49:36.299] |  :  .  List of 1
[10:49:36.299] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.299] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.299] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.299] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.299] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.299] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:36.299] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.301] |  :  .  Old stack:
[10:49:36.301] |  :  .  List of 1
[10:49:36.301] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.301] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.301] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.301] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.301] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.301] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:36.301] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.304] |  :  .  Not identical
[10:49:36.304] |  :  .  all.equal() for future ...
[10:49:36.304] |  :  .  |  List of 2
[10:49:36.304] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.304] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.304] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.304] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.304] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.304] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:36.304] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.304] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.304] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.304] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.304] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.304] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:36.307] |  :  .  all.equal() for future ... done
[10:49:36.307] |  :  all.equal() for FutureStrategyList ... done
[10:49:36.308] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.308] |  :  List of future strategies:
[10:49:36.308] |  :  1. sequential:
[10:49:36.308] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.308] |  :     - tweaked: FALSE
[10:49:36.308] |  :     - call: plan(sequential)
[10:49:36.308] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:36.308] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.309] future_by_internal() ...
[10:49:36.309] future_lapply() ...
[10:49:36.316] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.316] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.316] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.316] Backend function: <‘NULL’>
[10:49:36.317] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:36.317] Number of chunks: 1
[10:49:36.317] getGlobalsAndPackagesXApply() ...
[10:49:36.317]  - future.globals: TRUE
[10:49:36.318] getGlobalsAndPackages() ...
[10:49:36.318] |  Searching for globals ...
[10:49:36.320] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:36.320] |  Searching for globals ... DONE
[10:49:36.320] |  Resolving globals: FALSE
[10:49:36.320] |  Search for packages associated with the globals ...
[10:49:36.320] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.321] |  :  Packages: [1] ‘base’
[10:49:36.321] |  Search for packages associated with the globals ... DONE
[10:49:36.321] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:36.322] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:36.322] |  Packages after dropping 'base': [0] 
[10:49:36.322] |  globals: [1] ‘FUN’
[10:49:36.322] |  packages: [0] 
[10:49:36.322] getGlobalsAndPackages() ... done
[10:49:36.322]  - globals found/used: [n=1] ‘FUN’
[10:49:36.322]  - needed namespaces: [n=0] 
[10:49:36.322] Finding globals ... DONE
[10:49:36.322]  - use_args: TRUE
[10:49:36.323]  - Getting '...' globals ...
[10:49:36.323] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:36.323] |  recursive: 0
[10:49:36.324] |  length: 1
[10:49:36.324] |  elements: ‘...’
[10:49:36.324] |  'obj' is DotDotDotList
[10:49:36.324] |  resolve(obj, ...) ...
[10:49:36.324] |  resolve(obj, ...) ... done
[10:49:36.324] |  length: 0 (resolved future 1)
[10:49:36.325] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:36.325]    - '...' content: [n=0] 
[10:49:36.325] List of 1
[10:49:36.325]  $ ...: list()
[10:49:36.325]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.325]  - attr(*, "where")=List of 1
[10:49:36.325]   ..$ ...:<environment: 0x5564a6636648> 
[10:49:36.325]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.325]  - attr(*, "resolved")= logi TRUE
[10:49:36.325]  - attr(*, "total_size")= num NA
[10:49:36.327]  - Getting '...' globals ... DONE
[10:49:36.328] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:36.328] List of 2
[10:49:36.328]  $ ...future.FUN:function (object, ...)  
[10:49:36.328]  $ ...          : list()
[10:49:36.328]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.328]  - attr(*, "where")=List of 2
[10:49:36.328]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:36.328]   ..$ ...          :<environment: 0x5564a6636648> 
[10:49:36.328]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.328]  - attr(*, "resolved")= logi FALSE
[10:49:36.328]  - attr(*, "total_size")= num 15670
[10:49:36.330] Packages to be attached in all futures: [n=0] 
[10:49:36.330] getGlobalsAndPackagesXApply() ... DONE
[10:49:36.331] Number of futures (= number of chunks): 1
[10:49:36.331] Launching 1 futures (chunks) ...
[10:49:36.331] Chunk #1 of 1 ...
[10:49:36.331]  - Finding globals in 'X' for chunk #1 ...
[10:49:36.331] getGlobalsAndPackages() ...
[10:49:36.331] |  Searching for globals ...
[10:49:36.332] |  :  globals found: [0] 
[10:49:36.332] |  Searching for globals ... DONE
[10:49:36.332] |  globals: [0] <none>
[10:49:36.332] |  packages: [0] <none>
[10:49:36.332] getGlobalsAndPackages() ... done
[10:49:36.332]    + additional globals found: [n=0] 
[10:49:36.332]    + additional namespaces needed: [n=0] 
[10:49:36.332]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:36.333]  - seeds: <none>
[10:49:36.333]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.333] getGlobalsAndPackages() ...
[10:49:36.333] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.333] |  Resolving globals: FALSE
[10:49:36.333] |  Tweak future expression to call with '...' arguments ...
[10:49:36.333] |  :  {
[10:49:36.333] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.333] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:36.333] |  :      "# as a global variable                                         "
[10:49:36.333] |  :      do.call(function(...) {
[10:49:36.333] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.333] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.333] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.333] |  :              on.exit(options(oopts), add = TRUE)
[10:49:36.333] |  :          }
[10:49:36.333] |  :          {
[10:49:36.333] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.333] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.333] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:36.333] |  :              })
[10:49:36.333] |  :          }
[10:49:36.333] |  :      }, args = future.call.arguments)
[10:49:36.333] |  :  }
[10:49:36.333] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:36.334] |  Search for packages associated with the globals ...
[10:49:36.334] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.334] |  :  Packages: [1] ‘base’
[10:49:36.334] |  Search for packages associated with the globals ... DONE
[10:49:36.334] |  Packages after dropping 'base': [0] 
[10:49:36.334] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.334] |  packages: [0] 
[10:49:36.334] getGlobalsAndPackages() ... done
[10:49:36.335] run() for Future (‘Future’) ...
[10:49:36.335] |  state: ‘created’
[10:49:36.335] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.335] |  :  makeFutureBackend(<sequential>) ...
[10:49:36.336] |  :  .  Backend function: <‘NULL’>
[10:49:36.336] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:36.336] |  :  makeFutureBackend(<sequential>) ... done
[10:49:36.336] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.336] |  Using SequentialFutureBackend ...
[10:49:36.336] |  :  Launching futures ...
[10:49:36.336] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:36.337] |  :  .  |  getFutureData() ...
[10:49:36.337] |  :  .  |  :  getFutureCore() ...
[10:49:36.337] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:36.337] |  :  .  |  :  getFutureCore() ... done
[10:49:36.337] |  :  .  |  :  getFutureCapture() ...
[10:49:36.337] |  :  .  |  :  getFutureCapture() ... done
[10:49:36.337] |  :  .  |  :  getFutureContext() ...
[10:49:36.337] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.338] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:36.339] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.339] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:36.339] |  :  .  |  :  getFutureContext() ... done
[10:49:36.340] |  :  .  |  getFutureData() ... done
[10:49:36.341] |  :  .  |  attachPackages() ...
[10:49:36.341] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:36.341] |  :  .  |  attachPackages() ... DONE
[10:49:36.341] |  :  .  |  attachPackages() ...
[10:49:36.341] |  :  .  |  :  packages: [n=0] 
[10:49:36.341] |  :  .  |  attachPackages() ... DONE
[10:49:36.342] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.342] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.342] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.342] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.342] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.343] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:36.343] |  :  .  |  :  .  |  New stack:
[10:49:36.343] |  :  .  |  :  .  |  List of 1
[10:49:36.343] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.343] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.343] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.343] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.343] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.343] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.343] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.345] |  :  .  |  :  .  |  Old stack:
[10:49:36.345] |  :  .  |  :  .  |  List of 1
[10:49:36.345] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.345] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.345] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.345] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.345] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.345] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:36.345] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.345] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.345] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.345] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.348] |  :  .  |  :  .  |  Not identical
[10:49:36.348] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:36.348] |  :  .  |  :  .  |  :  List of 2
[10:49:36.348] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.348] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.348] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.348] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.348] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.348] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.348] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.348] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.348] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.348] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.348] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.348] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.348] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.348] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.348] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.352] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:36.352] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:36.353] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.353] |  :  .  |  :  .  List of future strategies:
[10:49:36.353] |  :  .  |  :  .  1. sequential:
[10:49:36.353] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.353] |  :  .  |  :  .     - tweaked: FALSE
[10:49:36.353] |  :  .  |  :  .     - call: plan(sequential)
[10:49:36.353] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.353] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.353] |  :  .  |  assign_globals() ...
[10:49:36.353] |  :  .  |  List of 5
[10:49:36.353] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:36.353] |  :  .  |   $ future.call.arguments    : list()
[10:49:36.353] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.353] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:36.353] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:36.353] |  :  .  |    .. ..$ breaks: num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:36.353] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.353] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:36.353] |  :  .  |    .. ..$ breaks: num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:36.353] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.353] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:36.353] |  :  .  |    .. ..$ breaks: num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:36.353] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.353] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:36.353] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:36.353] |  :  .  |   - attr(*, "where")=List of 5
[10:49:36.353] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:36.353] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:36.353] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:36.353] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:36.353] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:36.353] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:36.353] |  :  .  |   - attr(*, "total_size")= num 15670
[10:49:36.353] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.353] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:36.362] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:36.362] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:36.362] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:36.362] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:36.362] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:36.362] |  :  .  |  assign_globals() ... done
[10:49:36.366] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.366] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.367] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.367] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:36.367] |  :  .  |  :  .  |  :  New stack:
[10:49:36.367] |  :  .  |  :  .  |  :  List of 1
[10:49:36.367] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.367] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.367] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.367] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.367] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.367] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.367] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.367] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.367] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.367] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.370] |  :  .  |  :  .  |  :  Old stack:
[10:49:36.370] |  :  .  |  :  .  |  :  List of 1
[10:49:36.370] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.370] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.370] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.370] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.370] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.370] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.370] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.370] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.370] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.370] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.372] |  :  .  |  :  .  |  :  Identical
[10:49:36.373] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:36.373] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.373] |  :  .  |  :  .  |  List of future strategies:
[10:49:36.373] |  :  .  |  :  .  |  1. sequential:
[10:49:36.373] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.373] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:36.373] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:36.373] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.373] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.373] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.374] |  :  .  |  SequentialFuture started (and completed)
[10:49:36.374] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:36.374] |  :  Launching futures ... done
[10:49:36.374] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.374] |  Using SequentialFutureBackend ... done
[10:49:36.374] run() for Future (‘SequentialFuture’) ... done
[10:49:36.374] Created future:
[10:49:36.375] SequentialFuture:
[10:49:36.375] Label: ‘future_by-1’
[10:49:36.375] Expression:
[10:49:36.375] {
[10:49:36.375]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.375]     "# expression in do.call(), because function called uses '...'  "
[10:49:36.375]     "# as a global variable                                         "
[10:49:36.375]     do.call(function(...) {
[10:49:36.375]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.375]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.375]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.375]             on.exit(options(oopts), add = TRUE)
[10:49:36.375]         }
[10:49:36.375]         {
[10:49:36.375]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.375]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.375]                 ...future.FUN(...future.X_jj, ...)
[10:49:36.375]             })
[10:49:36.375]         }
[10:49:36.375]     }, args = future.call.arguments)
[10:49:36.375] }
[10:49:36.375] Lazy evaluation: FALSE
[10:49:36.375] Asynchronous evaluation: TRUE
[10:49:36.375] Local evaluation: TRUE
[10:49:36.375] Environment: R_GlobalEnv
[10:49:36.375] Capture standard output: TRUE
[10:49:36.375] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:36.375] Immediate condition classes: ‘immediateCondition’
[10:49:36.375] Globals: 5 objects totaling 1.90 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.48 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:36.375] Packages: <none>
[10:49:36.375] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:36.375] Resolved: TRUE
[10:49:36.375] Value: 1.16 KiB of class ‘list’
[10:49:36.375] Early signaling: FALSE
[10:49:36.375] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:36.375] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.376] Chunk #1 of 1 ... DONE
[10:49:36.376] Launching 1 futures (chunks) ... DONE
[10:49:36.376] Resolving 1 futures (chunks) ...
[10:49:36.376] value() on list ...
[10:49:36.377] |  recursive: 0
[10:49:36.377] |  length: 1
[10:49:36.377] |  
[10:49:36.377] |  Number of remaining objects: 1
[10:49:36.377] |  checking value #1 ...
[10:49:36.377] |  :  'obj' is SequentialFuture
[10:49:36.377] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:36.377] |  :  .  state: ‘finished’
[10:49:36.377] |  :  .  run: TRUE
[10:49:36.377] |  :  .  result: ‘FutureResult’
[10:49:36.378] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:36.378] |  :  SequentialFuture #1
[10:49:36.378] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.378] |  :  .  nx: 1
[10:49:36.378] |  :  .  relay: TRUE
[10:49:36.378] |  :  .  stdout: TRUE
[10:49:36.378] |  :  .  signal: TRUE
[10:49:36.378] |  :  .  resignal: FALSE
[10:49:36.378] |  :  .  force: TRUE
[10:49:36.378] |  :  .  relayed: [n=1] FALSE
[10:49:36.378] |  :  .  queued futures: [n=1] FALSE
[10:49:36.379] |  :  .  until=1
[10:49:36.379] |  :  .  relaying element #1
[10:49:36.380] |  :  .  relayed: [n=1] TRUE
[10:49:36.380] |  :  .  queued futures: [n=1] TRUE
[10:49:36.380] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.380] |  :  value(<SequentialFuture>, ...) ...
[10:49:36.380] |  :  .  value: <list>
[10:49:36.381] |  :  value(<SequentialFuture>, ...) ... done
[10:49:36.381] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.381] |  :  .  nx: 1
[10:49:36.381] |  :  .  relay: TRUE
[10:49:36.381] |  :  .  stdout: TRUE
[10:49:36.381] |  :  .  signal: TRUE
[10:49:36.381] |  :  .  resignal: FALSE
[10:49:36.381] |  :  .  force: TRUE
[10:49:36.381] |  :  .  relayed: [n=1] TRUE
[10:49:36.381] |  :  .  queued futures: [n=1] TRUE
[10:49:36.381] |  :  .  until=1
[10:49:36.381] |  :  .  relayed: [n=1] TRUE
[10:49:36.382] |  :  .  queued futures: [n=1] TRUE
[10:49:36.382] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.382] |  :  length: 0 (resolved future 1)
[10:49:36.382] |  checking value #1 ... done
[10:49:36.382] |  Relaying remaining futures ...
[10:49:36.382] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:36.382] |  :  .  nx: 1
[10:49:36.382] |  :  .  relay: TRUE
[10:49:36.382] |  :  .  stdout: TRUE
[10:49:36.382] |  :  .  signal: TRUE
[10:49:36.383] |  :  .  resignal: FALSE
[10:49:36.383] |  :  .  force: TRUE
[10:49:36.383] |  :  .  relayed: [n=1] TRUE
[10:49:36.383] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:36.383] |  :  .  relayed: [n=1] TRUE
[10:49:36.383] |  :  .  queued futures: [n=1] TRUE
[10:49:36.383] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:36.383] |  Relaying remaining futures ... done
[10:49:36.383] value() on list ... done
[10:49:36.383]  - Number of value chunks collected: 1
[10:49:36.383] Resolving 1 futures (chunks) ... DONE
[10:49:36.383] Reducing values from 1 chunks ...
[10:49:36.384]  - Number of values collected after concatenation: 3
[10:49:36.384]  - Number of values expected: 3
[10:49:36.384] Reducing values from 1 chunks ... DONE
[10:49:36.384] future_lapply() ... DONE
[10:49:36.384] future_by_internal() ... DONE
[10:49:36.384] future_by_internal() ...
[10:49:36.385] future_lapply() ...
[10:49:36.385] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.385] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.385] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.385] Number of chunks: 1
[10:49:36.385] getGlobalsAndPackagesXApply() ...
[10:49:36.386]  - future.globals: TRUE
[10:49:36.386] getGlobalsAndPackages() ...
[10:49:36.386] |  Searching for globals ...
[10:49:36.387] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:36.387] |  Searching for globals ... DONE
[10:49:36.387] |  Resolving globals: FALSE
[10:49:36.387] |  Search for packages associated with the globals ...
[10:49:36.387] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.388] |  :  Packages: [1] ‘base’
[10:49:36.388] |  Search for packages associated with the globals ... DONE
[10:49:36.388] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:36.388] |  The total size of the 1 globals exported for future expression (‘FUN(digits = 2L)’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:36.388] |  Packages after dropping 'base': [0] 
[10:49:36.388] |  globals: [1] ‘FUN’
[10:49:36.388] |  packages: [0] 
[10:49:36.388] getGlobalsAndPackages() ... done
[10:49:36.389]  - globals found/used: [n=1] ‘FUN’
[10:49:36.389]  - needed namespaces: [n=0] 
[10:49:36.389] Finding globals ... DONE
[10:49:36.389]  - use_args: TRUE
[10:49:36.389]  - Getting '...' globals ...
[10:49:36.389] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:36.389] |  recursive: 0
[10:49:36.389] |  length: 1
[10:49:36.390] |  elements: ‘...’
[10:49:36.390] |  'obj' is DotDotDotList
[10:49:36.390] |  resolve(obj, ...) ...
[10:49:36.390] |  resolve(obj, ...) ... done
[10:49:36.390] |  length: 0 (resolved future 1)
[10:49:36.390] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:36.390]    - '...' content: [n=1] ‘digits’
[10:49:36.390] List of 1
[10:49:36.390]  $ ...:List of 1
[10:49:36.390]   ..$ digits: int 2
[10:49:36.390]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.390]  - attr(*, "where")=List of 1
[10:49:36.390]   ..$ ...:<environment: 0x5564a54271d0> 
[10:49:36.390]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.390]  - attr(*, "resolved")= logi TRUE
[10:49:36.390]  - attr(*, "total_size")= num NA
[10:49:36.393]  - Getting '...' globals ... DONE
[10:49:36.393] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:36.393] List of 2
[10:49:36.393]  $ ...future.FUN:function (object, ...)  
[10:49:36.393]  $ ...          :List of 1
[10:49:36.393]   ..$ digits: int 2
[10:49:36.393]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.393]  - attr(*, "where")=List of 2
[10:49:36.393]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:36.393]   ..$ ...          :<environment: 0x5564a54271d0> 
[10:49:36.393]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.393]  - attr(*, "resolved")= logi FALSE
[10:49:36.393]  - attr(*, "total_size")= num 13284
[10:49:36.396] Packages to be attached in all futures: [n=0] 
[10:49:36.396] getGlobalsAndPackagesXApply() ... DONE
[10:49:36.397] Number of futures (= number of chunks): 1
[10:49:36.397] Launching 1 futures (chunks) ...
[10:49:36.397] Chunk #1 of 1 ...
[10:49:36.398]  - Finding globals in 'X' for chunk #1 ...
[10:49:36.398] getGlobalsAndPackages() ...
[10:49:36.398] |  Searching for globals ...
[10:49:36.398] |  :  globals found: [0] 
[10:49:36.398] |  Searching for globals ... DONE
[10:49:36.398] |  globals: [0] <none>
[10:49:36.398] |  packages: [0] <none>
[10:49:36.398] getGlobalsAndPackages() ... done
[10:49:36.399]    + additional globals found: [n=0] 
[10:49:36.399]    + additional namespaces needed: [n=0] 
[10:49:36.399]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:36.399]  - seeds: <none>
[10:49:36.399]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.399] getGlobalsAndPackages() ...
[10:49:36.399] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.399] |  Resolving globals: FALSE
[10:49:36.399] |  Tweak future expression to call with '...' arguments ...
[10:49:36.399] |  :  {
[10:49:36.399] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.399] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:36.399] |  :      "# as a global variable                                         "
[10:49:36.399] |  :      do.call(function(...) {
[10:49:36.399] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.399] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.399] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.399] |  :              on.exit(options(oopts), add = TRUE)
[10:49:36.399] |  :          }
[10:49:36.399] |  :          {
[10:49:36.399] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.399] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.399] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:36.399] |  :              })
[10:49:36.399] |  :          }
[10:49:36.399] |  :      }, args = future.call.arguments)
[10:49:36.399] |  :  }
[10:49:36.400] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:36.400] |  Search for packages associated with the globals ...
[10:49:36.400] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.400] |  :  Packages: [1] ‘base’
[10:49:36.400] |  Search for packages associated with the globals ... DONE
[10:49:36.400] |  Packages after dropping 'base': [0] 
[10:49:36.400] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.401] |  packages: [0] 
[10:49:36.401] getGlobalsAndPackages() ... done
[10:49:36.401] run() for Future (‘Future’) ...
[10:49:36.401] |  state: ‘created’
[10:49:36.401] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.401] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.401] |  Using SequentialFutureBackend ...
[10:49:36.401] |  :  Launching futures ...
[10:49:36.401] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:36.402] |  :  .  |  getFutureData() ...
[10:49:36.402] |  :  .  |  :  getFutureCore() ...
[10:49:36.402] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:36.402] |  :  .  |  :  getFutureCore() ... done
[10:49:36.402] |  :  .  |  :  getFutureCapture() ...
[10:49:36.402] |  :  .  |  :  getFutureCapture() ... done
[10:49:36.402] |  :  .  |  :  getFutureContext() ...
[10:49:36.402] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.402] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:36.402] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.403] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:36.403] |  :  .  |  :  getFutureContext() ... done
[10:49:36.403] |  :  .  |  getFutureData() ... done
[10:49:36.403] |  :  .  |  attachPackages() ...
[10:49:36.403] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:36.403] |  :  .  |  attachPackages() ... DONE
[10:49:36.403] |  :  .  |  attachPackages() ...
[10:49:36.403] |  :  .  |  :  packages: [n=0] 
[10:49:36.403] |  :  .  |  attachPackages() ... DONE
[10:49:36.404] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.404] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.404] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.404] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.404] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.404] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:36.404] |  :  .  |  :  .  |  New stack:
[10:49:36.405] |  :  .  |  :  .  |  List of 1
[10:49:36.405] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.405] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.405] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.405] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.405] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.405] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.405] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.407] |  :  .  |  :  .  |  Old stack:
[10:49:36.407] |  :  .  |  :  .  |  List of 1
[10:49:36.407] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.407] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.407] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.407] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.407] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.407] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:36.407] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.407] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.407] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.407] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.410] |  :  .  |  :  .  |  Not identical
[10:49:36.410] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:36.410] |  :  .  |  :  .  |  :  List of 2
[10:49:36.410] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.410] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.410] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.410] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.410] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.410] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.410] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.410] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.410] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.410] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.410] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.410] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.410] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.410] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.410] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.415] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:36.415] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:36.415] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.415] |  :  .  |  :  .  List of future strategies:
[10:49:36.415] |  :  .  |  :  .  1. sequential:
[10:49:36.415] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.415] |  :  .  |  :  .     - tweaked: FALSE
[10:49:36.415] |  :  .  |  :  .     - call: plan(sequential)
[10:49:36.416] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.416] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.416] |  :  .  |  assign_globals() ...
[10:49:36.416] |  :  .  |  List of 5
[10:49:36.416] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:36.416] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:36.416] |  :  .  |    ..$ digits: int 2
[10:49:36.416] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.416] |  :  .  |   $ ...future.elements_ii    :List of 6
[10:49:36.416] |  :  .  |    ..$ : num [1:9] 26 30 54 25 70 52 51 26 67
[10:49:36.416] |  :  .  |    ..$ : num [1:9] 27 14 29 19 29 31 41 20 44
[10:49:36.416] |  :  .  |    ..$ : num [1:9] 18 21 29 17 12 18 35 30 36
[10:49:36.416] |  :  .  |    ..$ : num [1:9] 42 26 19 16 39 28 21 39 29
[10:49:36.416] |  :  .  |    ..$ : num [1:9] 36 21 24 18 10 43 28 15 26
[10:49:36.416] |  :  .  |    ..$ : num [1:9] 20 21 24 17 13 15 15 16 28
[10:49:36.416] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:36.416] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:36.416] |  :  .  |   - attr(*, "where")=List of 5
[10:49:36.416] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:36.416] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:36.416] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:36.416] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:36.416] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:36.416] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:36.416] |  :  .  |   - attr(*, "total_size")= num 13284
[10:49:36.416] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.416] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:36.422] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:36.423] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:36.423] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:36.423] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:36.423] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:36.423] |  :  .  |  assign_globals() ... done
[10:49:36.425] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.425] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.425] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.425] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:36.425] |  :  .  |  :  .  |  :  New stack:
[10:49:36.425] |  :  .  |  :  .  |  :  List of 1
[10:49:36.425] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.425] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.425] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.425] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.425] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.425] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.425] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.425] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.425] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.425] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.428] |  :  .  |  :  .  |  :  Old stack:
[10:49:36.428] |  :  .  |  :  .  |  :  List of 1
[10:49:36.428] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.428] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.428] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.428] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.428] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.428] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.428] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.428] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.428] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.428] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.432] |  :  .  |  :  .  |  :  Identical
[10:49:36.432] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:36.432] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.432] |  :  .  |  :  .  |  List of future strategies:
[10:49:36.432] |  :  .  |  :  .  |  1. sequential:
[10:49:36.432] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.432] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:36.432] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:36.433] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.433] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.433] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.433] |  :  .  |  SequentialFuture started (and completed)
[10:49:36.433] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:36.433] |  :  Launching futures ... done
[10:49:36.433] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.433] |  Using SequentialFutureBackend ... done
[10:49:36.433] run() for Future (‘SequentialFuture’) ... done
[10:49:36.434] Created future:
[10:49:36.434] SequentialFuture:
[10:49:36.434] Label: ‘future_by-1’
[10:49:36.434] Expression:
[10:49:36.434] {
[10:49:36.434]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.434]     "# expression in do.call(), because function called uses '...'  "
[10:49:36.434]     "# as a global variable                                         "
[10:49:36.434]     do.call(function(...) {
[10:49:36.434]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.434]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.434]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.434]             on.exit(options(oopts), add = TRUE)
[10:49:36.434]         }
[10:49:36.434]         {
[10:49:36.434]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.434]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.434]                 ...future.FUN(...future.X_jj, ...)
[10:49:36.434]             })
[10:49:36.434]         }
[10:49:36.434]     }, args = future.call.arguments)
[10:49:36.434] }
[10:49:36.434] Lazy evaluation: FALSE
[10:49:36.434] Asynchronous evaluation: TRUE
[10:49:36.434] Local evaluation: TRUE
[10:49:36.434] Environment: R_GlobalEnv
[10:49:36.434] Capture standard output: TRUE
[10:49:36.434] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:36.434] Immediate condition classes: ‘immediateCondition’
[10:49:36.434] Globals: 5 objects totaling 998 bytes (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 511 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:36.434] Packages: <none>
[10:49:36.434] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:36.434] Resolved: TRUE
[10:49:36.434] Value: 1.27 KiB of class ‘list’
[10:49:36.434] Early signaling: FALSE
[10:49:36.434] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:36.434] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.434] Chunk #1 of 1 ... DONE
[10:49:36.435] Launching 1 futures (chunks) ... DONE
[10:49:36.435] Resolving 1 futures (chunks) ...
[10:49:36.435] value() on list ...
[10:49:36.435] |  recursive: 0
[10:49:36.435] |  length: 1
[10:49:36.435] |  
[10:49:36.435] |  Number of remaining objects: 1
[10:49:36.435] |  checking value #1 ...
[10:49:36.435] |  :  'obj' is SequentialFuture
[10:49:36.435] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:36.435] |  :  .  state: ‘finished’
[10:49:36.436] |  :  .  run: TRUE
[10:49:36.436] |  :  .  result: ‘FutureResult’
[10:49:36.436] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:36.436] |  :  SequentialFuture #1
[10:49:36.436] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.436] |  :  .  nx: 1
[10:49:36.436] |  :  .  relay: TRUE
[10:49:36.436] |  :  .  stdout: TRUE
[10:49:36.436] |  :  .  signal: TRUE
[10:49:36.436] |  :  .  resignal: FALSE
[10:49:36.436] |  :  .  force: TRUE
[10:49:36.436] |  :  .  relayed: [n=1] FALSE
[10:49:36.437] |  :  .  queued futures: [n=1] FALSE
[10:49:36.437] |  :  .  until=1
[10:49:36.437] |  :  .  relaying element #1
[10:49:36.437] |  :  .  relayed: [n=1] TRUE
[10:49:36.437] |  :  .  queued futures: [n=1] TRUE
[10:49:36.437] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.437] |  :  value(<SequentialFuture>, ...) ...
[10:49:36.437] |  :  .  value: <list>
[10:49:36.437] |  :  value(<SequentialFuture>, ...) ... done
[10:49:36.437] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.438] |  :  .  nx: 1
[10:49:36.438] |  :  .  relay: TRUE
[10:49:36.438] |  :  .  stdout: TRUE
[10:49:36.438] |  :  .  signal: TRUE
[10:49:36.438] |  :  .  resignal: FALSE
[10:49:36.438] |  :  .  force: TRUE
[10:49:36.438] |  :  .  relayed: [n=1] TRUE
[10:49:36.438] |  :  .  queued futures: [n=1] TRUE
[10:49:36.438] |  :  .  until=1
[10:49:36.438] |  :  .  relayed: [n=1] TRUE
[10:49:36.438] |  :  .  queued futures: [n=1] TRUE
[10:49:36.438] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.439] |  :  length: 0 (resolved future 1)
[10:49:36.439] |  checking value #1 ... done
[10:49:36.439] |  Relaying remaining futures ...
[10:49:36.439] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:36.439] |  :  .  nx: 1
[10:49:36.439] |  :  .  relay: TRUE
[10:49:36.439] |  :  .  stdout: TRUE
[10:49:36.439] |  :  .  signal: TRUE
[10:49:36.439] |  :  .  resignal: FALSE
[10:49:36.439] |  :  .  force: TRUE
[10:49:36.439] |  :  .  relayed: [n=1] TRUE
[10:49:36.439] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:36.440] |  :  .  relayed: [n=1] TRUE
[10:49:36.440] |  :  .  queued futures: [n=1] TRUE
[10:49:36.440] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:36.440] |  Relaying remaining futures ... done
[10:49:36.440] value() on list ... done
[10:49:36.440]  - Number of value chunks collected: 1
[10:49:36.440] Resolving 1 futures (chunks) ... DONE
[10:49:36.440] Reducing values from 1 chunks ...
[10:49:36.440]  - Number of values collected after concatenation: 6
[10:49:36.440]  - Number of values expected: 6
[10:49:36.440] Reducing values from 1 chunks ... DONE
[10:49:36.440] future_lapply() ... DONE
[10:49:36.441] future_by_internal() ... DONE
[10:49:36.443] future_by_internal() ...
[10:49:36.444] future_lapply() ...
[10:49:36.445] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.445] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.445] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.445] Number of chunks: 1
[10:49:36.445] getGlobalsAndPackagesXApply() ...
[10:49:36.445]  - future.globals: TRUE
[10:49:36.445] getGlobalsAndPackages() ...
[10:49:36.445] |  Searching for globals ...
[10:49:36.448] |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:36.448] |  Searching for globals ... DONE
[10:49:36.448] |  Resolving globals: FALSE
[10:49:36.448] |  Search for packages associated with the globals ...
[10:49:36.448] |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:36.448] |  :  Packages: [2] ‘base’, ‘stats’
[10:49:36.449] |  Search for packages associated with the globals ... DONE
[10:49:36.449] |  The total size of the 1 globals is 762 bytes (762 bytes)
[10:49:36.449] |  The total size of the 1 globals exported for future expression (‘FUN(singular.ok = FALSE)’) is 762 bytes There is one global: ‘FUN’ (762 bytes of class ‘function’)
[10:49:36.449] |  Packages after dropping 'base': [1] ‘stats’
[10:49:36.449] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:36.449] |  globals: [1] ‘FUN’
[10:49:36.450] |  packages: [1] ‘stats’
[10:49:36.450] getGlobalsAndPackages() ... done
[10:49:36.450]  - globals found/used: [n=1] ‘FUN’
[10:49:36.450]  - needed namespaces: [n=1] ‘stats’
[10:49:36.450] Finding globals ... DONE
[10:49:36.450]  - use_args: TRUE
[10:49:36.450]  - Getting '...' globals ...
[10:49:36.450] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:36.450] |  recursive: 0
[10:49:36.451] |  length: 1
[10:49:36.451] |  elements: ‘...’
[10:49:36.451] |  'obj' is DotDotDotList
[10:49:36.451] |  resolve(obj, ...) ...
[10:49:36.451] |  resolve(obj, ...) ... done
[10:49:36.451] |  length: 0 (resolved future 1)
[10:49:36.451] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:36.451]    - '...' content: [n=1] ‘singular.ok’
[10:49:36.451] List of 1
[10:49:36.451]  $ ...:List of 1
[10:49:36.451]   ..$ singular.ok: logi FALSE
[10:49:36.451]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.451]  - attr(*, "where")=List of 1
[10:49:36.451]   ..$ ...:<environment: 0x5564a5f5ae58> 
[10:49:36.451]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.451]  - attr(*, "resolved")= logi TRUE
[10:49:36.451]  - attr(*, "total_size")= num NA
[10:49:36.454]  - Getting '...' globals ... DONE
[10:49:36.454] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:36.454] List of 2
[10:49:36.454]  $ ...future.FUN:function (x, ...)  
[10:49:36.454]  $ ...          :List of 1
[10:49:36.454]   ..$ singular.ok: logi FALSE
[10:49:36.454]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.454]  - attr(*, "where")=List of 2
[10:49:36.454]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:36.454]   ..$ ...          :<environment: 0x5564a5f5ae58> 
[10:49:36.454]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.454]  - attr(*, "resolved")= logi FALSE
[10:49:36.454]  - attr(*, "total_size")= num 19977
[10:49:36.457] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:36.457] getGlobalsAndPackagesXApply() ... DONE
[10:49:36.458] Number of futures (= number of chunks): 1
[10:49:36.458] Launching 1 futures (chunks) ...
[10:49:36.458] Chunk #1 of 1 ...
[10:49:36.458]  - Finding globals in 'X' for chunk #1 ...
[10:49:36.458] getGlobalsAndPackages() ...
[10:49:36.458] |  Searching for globals ...
[10:49:36.459] |  :  globals found: [0] 
[10:49:36.459] |  Searching for globals ... DONE
[10:49:36.459] |  globals: [0] <none>
[10:49:36.459] |  packages: [0] <none>
[10:49:36.459] getGlobalsAndPackages() ... done
[10:49:36.459]    + additional globals found: [n=0] 
[10:49:36.459]    + additional namespaces needed: [n=0] 
[10:49:36.459]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:36.459]  - seeds: <none>
[10:49:36.459]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.459] getGlobalsAndPackages() ...
[10:49:36.460] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.460] |  Resolving globals: FALSE
[10:49:36.460] |  Tweak future expression to call with '...' arguments ...
[10:49:36.460] |  :  {
[10:49:36.460] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.460] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:36.460] |  :      "# as a global variable                                         "
[10:49:36.460] |  :      do.call(function(...) {
[10:49:36.460] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:36.460] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:36.460] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:36.460] |  :          "# anonymous function.                                          "
[10:49:36.460] |  :          "#                                                              "
[10:49:36.460] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:36.460] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:36.460] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:36.460] |  :          "# global environment, which is where globals are written.      "
[10:49:36.460] |  :          penv <- env <- environment(...future.FUN)
[10:49:36.460] |  :          repeat {
[10:49:36.460] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:36.460] |  :                  emptyenv())) 
[10:49:36.460] |  :                  break
[10:49:36.460] |  :              penv <- env
[10:49:36.460] |  :              env <- parent.env(env)
[10:49:36.460] |  :          }
[10:49:36.460] |  :          if (identical(penv, globalenv())) {
[10:49:36.460] |  :              environment(...future.FUN) <- environment()
[10:49:36.460] |  :          }
[10:49:36.460] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:36.460] |  :              !isNamespace(penv)) {
[10:49:36.460] |  :              parent.env(penv) <- environment()
[10:49:36.460] |  :          }
[10:49:36.460] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:36.460] |  :          {
[10:49:36.460] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.460] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.460] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.460] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:36.460] |  :              }
[10:49:36.460] |  :              {
[10:49:36.460] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.460] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.460] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:36.460] |  :                  })
[10:49:36.460] |  :              }
[10:49:36.460] |  :          }
[10:49:36.460] |  :      }, args = future.call.arguments)
[10:49:36.460] |  :  }
[10:49:36.460] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:36.460] |  Search for packages associated with the globals ...
[10:49:36.461] |  :  Packages associated with globals: [0] 
[10:49:36.461] |  :  Packages: [0] 
[10:49:36.461] |  Search for packages associated with the globals ... DONE
[10:49:36.461] |  Packages after dropping 'base': [0] 
[10:49:36.461] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.461] |  packages: [0] 
[10:49:36.461] getGlobalsAndPackages() ... done
[10:49:36.462] run() for Future (‘Future’) ...
[10:49:36.462] |  state: ‘created’
[10:49:36.462] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.462] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.462] |  Using SequentialFutureBackend ...
[10:49:36.462] |  :  Launching futures ...
[10:49:36.462] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:36.462] |  :  .  |  getFutureData() ...
[10:49:36.462] |  :  .  |  :  getFutureCore() ...
[10:49:36.462] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:36.463] |  :  .  |  :  getFutureCore() ... done
[10:49:36.463] |  :  .  |  :  getFutureCapture() ...
[10:49:36.463] |  :  .  |  :  getFutureCapture() ... done
[10:49:36.463] |  :  .  |  :  getFutureContext() ...
[10:49:36.463] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.463] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:36.463] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.463] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:36.463] |  :  .  |  :  getFutureContext() ... done
[10:49:36.463] |  :  .  |  getFutureData() ... done
[10:49:36.464] |  :  .  |  attachPackages() ...
[10:49:36.464] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:36.465] |  :  .  |  attachPackages() ... DONE
[10:49:36.465] |  :  .  |  attachPackages() ...
[10:49:36.465] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:36.465] |  :  .  |  attachPackages() ... DONE
[10:49:36.465] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.465] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.465] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.466] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.466] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.466] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:36.466] |  :  .  |  :  .  |  New stack:
[10:49:36.466] |  :  .  |  :  .  |  List of 1
[10:49:36.466] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.466] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.466] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.466] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.466] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.466] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.466] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.468] |  :  .  |  :  .  |  Old stack:
[10:49:36.468] |  :  .  |  :  .  |  List of 1
[10:49:36.468] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.468] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.468] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.468] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.468] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.468] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:36.468] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.468] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.468] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.468] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.471] |  :  .  |  :  .  |  Not identical
[10:49:36.471] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:36.471] |  :  .  |  :  .  |  :  List of 2
[10:49:36.471] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.471] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.471] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.471] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.471] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.471] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.471] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.471] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.471] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.471] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.471] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.471] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.471] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.471] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.471] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.476] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:36.476] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:36.476] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.476] |  :  .  |  :  .  List of future strategies:
[10:49:36.476] |  :  .  |  :  .  1. sequential:
[10:49:36.476] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.476] |  :  .  |  :  .     - tweaked: FALSE
[10:49:36.476] |  :  .  |  :  .     - call: plan(sequential)
[10:49:36.476] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.476] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.477] |  :  .  |  assign_globals() ...
[10:49:36.477] |  :  .  |  List of 5
[10:49:36.477] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:36.477] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:36.477] |  :  .  |    ..$ singular.ok: logi FALSE
[10:49:36.477] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.477] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:36.477] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.477] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:36.477] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.477] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:36.477] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.477] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:36.477] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.477] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:36.477] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.477] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:36.477] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.477] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:36.477] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:36.477] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:36.477] |  :  .  |   - attr(*, "where")=List of 5
[10:49:36.477] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:36.477] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:36.477] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:36.477] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:36.477] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:36.477] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:36.477] |  :  .  |   - attr(*, "total_size")= num 19977
[10:49:36.477] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.477] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:36.486] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:36.486] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:36.486] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:36.486] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:36.487] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:36.487] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:36.487] |  :  .  |  assign_globals() ... done
[10:49:36.490] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.490] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.490] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.490] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:36.490] |  :  .  |  :  .  |  :  New stack:
[10:49:36.491] |  :  .  |  :  .  |  :  List of 1
[10:49:36.491] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.491] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.491] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.491] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.491] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.491] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.491] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.491] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.491] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.491] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.493] |  :  .  |  :  .  |  :  Old stack:
[10:49:36.493] |  :  .  |  :  .  |  :  List of 1
[10:49:36.493] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.493] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.493] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.493] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.493] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.493] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.493] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.493] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.493] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.493] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.497] |  :  .  |  :  .  |  :  Identical
[10:49:36.497] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:36.497] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.497] |  :  .  |  :  .  |  List of future strategies:
[10:49:36.497] |  :  .  |  :  .  |  1. sequential:
[10:49:36.497] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.497] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:36.497] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:36.498] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.498] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.498] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.498] |  :  .  |  SequentialFuture started (and completed)
[10:49:36.498] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:36.498] |  :  Launching futures ... done
[10:49:36.498] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.499] |  Using SequentialFutureBackend ... done
[10:49:36.499] run() for Future (‘SequentialFuture’) ... done
[10:49:36.499] Created future:
[10:49:36.499] SequentialFuture:
[10:49:36.499] Label: ‘future_by-1’
[10:49:36.499] Expression:
[10:49:36.499] {
[10:49:36.499]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.499]     "# expression in do.call(), because function called uses '...'  "
[10:49:36.499]     "# as a global variable                                         "
[10:49:36.499]     do.call(function(...) {
[10:49:36.499]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:36.499]         "# without having an '...' argument. This means '...' is treated"
[10:49:36.499]         "# as a global variable. This may happen when FUN() is an       "
[10:49:36.499]         "# anonymous function.                                          "
[10:49:36.499]         "#                                                              "
[10:49:36.499]         "# If an anonymous function, we will make sure to restore the   "
[10:49:36.499]         "# function environment of FUN() to the calling environment.    "
[10:49:36.499]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:36.499]         "# global environment, which is where globals are written.      "
[10:49:36.499]         penv <- env <- environment(...future.FUN)
[10:49:36.499]         repeat {
[10:49:36.499]             if (identical(env, globalenv()) || identical(env, 
[10:49:36.499]                 emptyenv())) 
[10:49:36.499]                 break
[10:49:36.499]             penv <- env
[10:49:36.499]             env <- parent.env(env)
[10:49:36.499]         }
[10:49:36.499]         if (identical(penv, globalenv())) {
[10:49:36.499]             environment(...future.FUN) <- environment()
[10:49:36.499]         }
[10:49:36.499]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:36.499]             !isNamespace(penv)) {
[10:49:36.499]             parent.env(penv) <- environment()
[10:49:36.499]         }
[10:49:36.499]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:36.499]         {
[10:49:36.499]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.499]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.499]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.499]                 on.exit(options(oopts), add = TRUE)
[10:49:36.499]             }
[10:49:36.499]             {
[10:49:36.499]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.499]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.499]                   ...future.FUN(...future.X_jj, ...)
[10:49:36.499]                 })
[10:49:36.499]             }
[10:49:36.499]         }
[10:49:36.499]     }, args = future.call.arguments)
[10:49:36.499] }
[10:49:36.499] Lazy evaluation: FALSE
[10:49:36.499] Asynchronous evaluation: TRUE
[10:49:36.499] Local evaluation: TRUE
[10:49:36.499] Environment: R_GlobalEnv
[10:49:36.499] Capture standard output: TRUE
[10:49:36.499] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:36.499] Immediate condition classes: ‘immediateCondition’
[10:49:36.499] Globals: 5 objects totaling 2.93 KiB (function ‘...future.FUN’ of 762 bytes, DotDotDotList ‘future.call.arguments’ of 157 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:36.499] Packages: 1 packages (‘stats’)
[10:49:36.499] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:36.499] Resolved: TRUE
[10:49:36.499] Value: 14.12 KiB of class ‘list’
[10:49:36.499] Early signaling: FALSE
[10:49:36.499] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:36.499] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.500] Chunk #1 of 1 ... DONE
[10:49:36.500] Launching 1 futures (chunks) ... DONE
[10:49:36.500] Resolving 1 futures (chunks) ...
[10:49:36.500] value() on list ...
[10:49:36.500] |  recursive: 0
[10:49:36.500] |  length: 1
[10:49:36.500] |  
[10:49:36.500] |  Number of remaining objects: 1
[10:49:36.501] |  checking value #1 ...
[10:49:36.501] |  :  'obj' is SequentialFuture
[10:49:36.501] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:36.501] |  :  .  state: ‘finished’
[10:49:36.501] |  :  .  run: TRUE
[10:49:36.501] |  :  .  result: ‘FutureResult’
[10:49:36.501] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:36.501] |  :  SequentialFuture #1
[10:49:36.501] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.501] |  :  .  nx: 1
[10:49:36.501] |  :  .  relay: TRUE
[10:49:36.502] |  :  .  stdout: TRUE
[10:49:36.502] |  :  .  signal: TRUE
[10:49:36.502] |  :  .  resignal: FALSE
[10:49:36.502] |  :  .  force: TRUE
[10:49:36.502] |  :  .  relayed: [n=1] FALSE
[10:49:36.502] |  :  .  queued futures: [n=1] FALSE
[10:49:36.502] |  :  .  until=1
[10:49:36.502] |  :  .  relaying element #1
[10:49:36.502] |  :  .  relayed: [n=1] TRUE
[10:49:36.502] |  :  .  queued futures: [n=1] TRUE
[10:49:36.502] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.503] |  :  value(<SequentialFuture>, ...) ...
[10:49:36.503] |  :  .  value: <list>
[10:49:36.503] |  :  value(<SequentialFuture>, ...) ... done
[10:49:36.503] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.503] |  :  .  nx: 1
[10:49:36.503] |  :  .  relay: TRUE
[10:49:36.503] |  :  .  stdout: TRUE
[10:49:36.503] |  :  .  signal: TRUE
[10:49:36.503] |  :  .  resignal: FALSE
[10:49:36.503] |  :  .  force: TRUE
[10:49:36.503] |  :  .  relayed: [n=1] TRUE
[10:49:36.503] |  :  .  queued futures: [n=1] TRUE
[10:49:36.504] |  :  .  until=1
[10:49:36.504] |  :  .  relayed: [n=1] TRUE
[10:49:36.504] |  :  .  queued futures: [n=1] TRUE
[10:49:36.504] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.504] |  :  length: 0 (resolved future 1)
[10:49:36.504] |  checking value #1 ... done
[10:49:36.504] |  Relaying remaining futures ...
[10:49:36.504] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:36.504] |  :  .  nx: 1
[10:49:36.504] |  :  .  relay: TRUE
[10:49:36.504] |  :  .  stdout: TRUE
[10:49:36.505] |  :  .  signal: TRUE
[10:49:36.505] |  :  .  resignal: FALSE
[10:49:36.505] |  :  .  force: TRUE
[10:49:36.505] |  :  .  relayed: [n=1] TRUE
[10:49:36.505] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:36.505] |  :  .  relayed: [n=1] TRUE
[10:49:36.505] |  :  .  queued futures: [n=1] TRUE
[10:49:36.505] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:36.505] |  Relaying remaining futures ... done
[10:49:36.505] value() on list ... done
[10:49:36.505]  - Number of value chunks collected: 1
[10:49:36.505] Resolving 1 futures (chunks) ... DONE
[10:49:36.506] Reducing values from 1 chunks ...
[10:49:36.506]  - Number of values collected after concatenation: 3
[10:49:36.506]  - Number of values expected: 3
[10:49:36.506] Reducing values from 1 chunks ... DONE
[10:49:36.506] future_lapply() ... DONE
[10:49:36.506] future_by_internal() ... DONE
[10:49:36.510] future_by_internal() ...
[10:49:36.510] future_lapply() ...
[10:49:36.512] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.512] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.512] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.512] Number of chunks: 1
[10:49:36.512] getGlobalsAndPackagesXApply() ...
[10:49:36.512]  - future.globals: TRUE
[10:49:36.512] getGlobalsAndPackages() ...
[10:49:36.513] |  Searching for globals ...
[10:49:36.514] |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:36.514] |  Searching for globals ... DONE
[10:49:36.515] |  Resolving globals: FALSE
[10:49:36.515] |  Search for packages associated with the globals ...
[10:49:36.515] |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:36.515] |  :  Packages: [2] ‘base’, ‘stats’
[10:49:36.515] |  Search for packages associated with the globals ... DONE
[10:49:36.515] |  The total size of the 3 globals is 2.07 KiB (2118 bytes)
[10:49:36.516] |  The total size of the 3 globals exported for future expression (‘FUN()’) is 2.07 KiB There are three globals: ‘FUN’ (1.28 KiB of class ‘function’), ‘breaks’ (463 bytes of class ‘numeric’) and ‘wool’ (342 bytes of class ‘numeric’)
[10:49:36.516] |  Packages after dropping 'base': [1] ‘stats’
[10:49:36.516] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:36.516] |  globals: [3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:36.516] |  packages: [1] ‘stats’
[10:49:36.516] getGlobalsAndPackages() ... done
[10:49:36.516]  - globals found/used: [n=3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:36.516]  - needed namespaces: [n=1] ‘stats’
[10:49:36.517] Finding globals ... DONE
[10:49:36.517]  - use_args: TRUE
[10:49:36.517]  - Getting '...' globals ...
[10:49:36.517] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:36.517] |  recursive: 0
[10:49:36.517] |  length: 1
[10:49:36.517] |  elements: ‘...’
[10:49:36.517] |  'obj' is DotDotDotList
[10:49:36.517] |  resolve(obj, ...) ...
[10:49:36.518] |  resolve(obj, ...) ... done
[10:49:36.518] |  length: 0 (resolved future 1)
[10:49:36.518] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:36.518]    - '...' content: [n=0] 
[10:49:36.518] List of 1
[10:49:36.518]  $ ...: list()
[10:49:36.518]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.518]  - attr(*, "where")=List of 1
[10:49:36.518]   ..$ ...:<environment: 0x5564a60e6e48> 
[10:49:36.518]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.518]  - attr(*, "resolved")= logi TRUE
[10:49:36.518]  - attr(*, "total_size")= num NA
[10:49:36.520]  - Getting '...' globals ... DONE
[10:49:36.521] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’
[10:49:36.521] List of 4
[10:49:36.521]  $ ...future.FUN:function (x)  
[10:49:36.521]  $ breaks       : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:36.521]  $ wool         : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:36.521]  $ ...          : list()
[10:49:36.521]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.521]  - attr(*, "where")=List of 4
[10:49:36.521]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:36.521]   ..$ breaks       :<environment: R_EmptyEnv> 
[10:49:36.521]   ..$ wool         :<environment: R_EmptyEnv> 
[10:49:36.521]   ..$ ...          :<environment: 0x5564a60e6e48> 
[10:49:36.521]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.521]  - attr(*, "resolved")= logi FALSE
[10:49:36.521]  - attr(*, "total_size")= num 18867
[10:49:36.524] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:36.525] getGlobalsAndPackagesXApply() ... DONE
[10:49:36.525] Number of futures (= number of chunks): 1
[10:49:36.525] Launching 1 futures (chunks) ...
[10:49:36.525] Chunk #1 of 1 ...
[10:49:36.525]  - Finding globals in 'X' for chunk #1 ...
[10:49:36.525] getGlobalsAndPackages() ...
[10:49:36.525] |  Searching for globals ...
[10:49:36.526] |  :  globals found: [0] 
[10:49:36.526] |  Searching for globals ... DONE
[10:49:36.526] |  globals: [0] <none>
[10:49:36.526] |  packages: [0] <none>
[10:49:36.526] getGlobalsAndPackages() ... done
[10:49:36.526]    + additional globals found: [n=0] 
[10:49:36.526]    + additional namespaces needed: [n=0] 
[10:49:36.526]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:36.526]  - seeds: <none>
[10:49:36.526]  - All globals exported: [n=7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.527] getGlobalsAndPackages() ...
[10:49:36.527] |  globals passed as-is: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.527] |  Resolving globals: FALSE
[10:49:36.527] |  Tweak future expression to call with '...' arguments ...
[10:49:36.527] |  :  {
[10:49:36.527] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.527] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:36.527] |  :      "# as a global variable                                         "
[10:49:36.527] |  :      do.call(function(...) {
[10:49:36.527] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:36.527] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:36.527] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:36.527] |  :          "# anonymous function.                                          "
[10:49:36.527] |  :          "#                                                              "
[10:49:36.527] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:36.527] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:36.527] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:36.527] |  :          "# global environment, which is where globals are written.      "
[10:49:36.527] |  :          penv <- env <- environment(...future.FUN)
[10:49:36.527] |  :          repeat {
[10:49:36.527] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:36.527] |  :                  emptyenv())) 
[10:49:36.527] |  :                  break
[10:49:36.527] |  :              penv <- env
[10:49:36.527] |  :              env <- parent.env(env)
[10:49:36.527] |  :          }
[10:49:36.527] |  :          if (identical(penv, globalenv())) {
[10:49:36.527] |  :              environment(...future.FUN) <- environment()
[10:49:36.527] |  :          }
[10:49:36.527] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:36.527] |  :              !isNamespace(penv)) {
[10:49:36.527] |  :              parent.env(penv) <- environment()
[10:49:36.527] |  :          }
[10:49:36.527] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:36.527] |  :          {
[10:49:36.527] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.527] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.527] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.527] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:36.527] |  :              }
[10:49:36.527] |  :              {
[10:49:36.527] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.527] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.527] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:36.527] |  :                  })
[10:49:36.527] |  :              }
[10:49:36.527] |  :          }
[10:49:36.527] |  :      }, args = future.call.arguments)
[10:49:36.527] |  :  }
[10:49:36.527] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:36.527] |  Search for packages associated with the globals ...
[10:49:36.528] |  :  Packages associated with globals: [0] 
[10:49:36.529] |  :  Packages: [0] 
[10:49:36.529] |  Search for packages associated with the globals ... DONE
[10:49:36.529] |  Packages after dropping 'base': [0] 
[10:49:36.529] |  globals: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.529] |  packages: [0] 
[10:49:36.529] getGlobalsAndPackages() ... done
[10:49:36.530] run() for Future (‘Future’) ...
[10:49:36.530] |  state: ‘created’
[10:49:36.530] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.530] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.530] |  Using SequentialFutureBackend ...
[10:49:36.530] |  :  Launching futures ...
[10:49:36.530] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:36.530] |  :  .  |  getFutureData() ...
[10:49:36.530] |  :  .  |  :  getFutureCore() ...
[10:49:36.530] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:36.531] |  :  .  |  :  getFutureCore() ... done
[10:49:36.531] |  :  .  |  :  getFutureCapture() ...
[10:49:36.531] |  :  .  |  :  getFutureCapture() ... done
[10:49:36.531] |  :  .  |  :  getFutureContext() ...
[10:49:36.531] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.531] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:36.531] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.531] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:36.531] |  :  .  |  :  getFutureContext() ... done
[10:49:36.531] |  :  .  |  getFutureData() ... done
[10:49:36.532] |  :  .  |  attachPackages() ...
[10:49:36.532] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:36.532] |  :  .  |  attachPackages() ... DONE
[10:49:36.532] |  :  .  |  attachPackages() ...
[10:49:36.532] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:36.532] |  :  .  |  attachPackages() ... DONE
[10:49:36.532] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.533] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.533] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.533] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.533] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.533] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:36.533] |  :  .  |  :  .  |  New stack:
[10:49:36.533] |  :  .  |  :  .  |  List of 1
[10:49:36.533] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.533] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.533] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.533] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.533] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.533] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.533] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.535] |  :  .  |  :  .  |  Old stack:
[10:49:36.536] |  :  .  |  :  .  |  List of 1
[10:49:36.536] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.536] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.536] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.536] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.536] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.536] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:36.536] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.536] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.536] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.536] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.538] |  :  .  |  :  .  |  Not identical
[10:49:36.538] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:36.538] |  :  .  |  :  .  |  :  List of 2
[10:49:36.538] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.538] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.538] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.538] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.538] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.538] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.538] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.538] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.538] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.538] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.538] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.538] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.538] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.538] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.538] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.543] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:36.543] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:36.543] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.543] |  :  .  |  :  .  List of future strategies:
[10:49:36.543] |  :  .  |  :  .  1. sequential:
[10:49:36.543] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.543] |  :  .  |  :  .     - tweaked: FALSE
[10:49:36.543] |  :  .  |  :  .     - call: plan(sequential)
[10:49:36.544] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.544] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.545] |  :  .  |  assign_globals() ...
[10:49:36.545] |  :  .  |  List of 7
[10:49:36.545] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:36.545] |  :  .  |   $ breaks                   : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:36.545] |  :  .  |   $ wool                     : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:36.545] |  :  .  |   $ future.call.arguments    : list()
[10:49:36.545] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.545] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:36.545] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.545] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:36.545] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.545] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:36.545] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.545] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:36.545] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.545] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:36.545] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.545] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:36.545] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.545] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:36.545] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:36.545] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:36.545] |  :  .  |   - attr(*, "where")=List of 7
[10:49:36.545] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:36.545] |  :  .  |    ..$ breaks                   :<environment: R_EmptyEnv> 
[10:49:36.545] |  :  .  |    ..$ wool                     :<environment: R_EmptyEnv> 
[10:49:36.545] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:36.545] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:36.545] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:36.545] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:36.545] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:36.545] |  :  .  |   - attr(*, "total_size")= num 18867
[10:49:36.545] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.545] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:36.554] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:36.554] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:36.554] |  :  .  |  - copied ‘breaks’ to environment
[10:49:36.554] |  :  .  |  - copied ‘wool’ to environment
[10:49:36.554] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:36.555] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:36.555] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:36.555] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:36.555] |  :  .  |  assign_globals() ... done
[10:49:36.558] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.558] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.558] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.558] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:36.559] |  :  .  |  :  .  |  :  New stack:
[10:49:36.559] |  :  .  |  :  .  |  :  List of 1
[10:49:36.559] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.559] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.559] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.559] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.559] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.559] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.559] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.559] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.559] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.559] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.562] |  :  .  |  :  .  |  :  Old stack:
[10:49:36.563] |  :  .  |  :  .  |  :  List of 1
[10:49:36.563] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.563] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.563] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.563] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.563] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.563] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.563] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.563] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.563] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.563] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.565] |  :  .  |  :  .  |  :  Identical
[10:49:36.565] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:36.566] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.566] |  :  .  |  :  .  |  List of future strategies:
[10:49:36.566] |  :  .  |  :  .  |  1. sequential:
[10:49:36.566] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.566] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:36.566] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:36.566] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.566] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.566] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.566] |  :  .  |  SequentialFuture started (and completed)
[10:49:36.567] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:36.567] |  :  Launching futures ... done
[10:49:36.567] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.567] |  Using SequentialFutureBackend ... done
[10:49:36.567] run() for Future (‘SequentialFuture’) ... done
[10:49:36.567] Created future:
[10:49:36.567] SequentialFuture:
[10:49:36.567] Label: ‘future_by-1’
[10:49:36.567] Expression:
[10:49:36.567] {
[10:49:36.567]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.567]     "# expression in do.call(), because function called uses '...'  "
[10:49:36.567]     "# as a global variable                                         "
[10:49:36.567]     do.call(function(...) {
[10:49:36.567]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:36.567]         "# without having an '...' argument. This means '...' is treated"
[10:49:36.567]         "# as a global variable. This may happen when FUN() is an       "
[10:49:36.567]         "# anonymous function.                                          "
[10:49:36.567]         "#                                                              "
[10:49:36.567]         "# If an anonymous function, we will make sure to restore the   "
[10:49:36.567]         "# function environment of FUN() to the calling environment.    "
[10:49:36.567]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:36.567]         "# global environment, which is where globals are written.      "
[10:49:36.567]         penv <- env <- environment(...future.FUN)
[10:49:36.567]         repeat {
[10:49:36.567]             if (identical(env, globalenv()) || identical(env, 
[10:49:36.567]                 emptyenv())) 
[10:49:36.567]                 break
[10:49:36.567]             penv <- env
[10:49:36.567]             env <- parent.env(env)
[10:49:36.567]         }
[10:49:36.567]         if (identical(penv, globalenv())) {
[10:49:36.567]             environment(...future.FUN) <- environment()
[10:49:36.567]         }
[10:49:36.567]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:36.567]             !isNamespace(penv)) {
[10:49:36.567]             parent.env(penv) <- environment()
[10:49:36.567]         }
[10:49:36.567]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:36.567]         {
[10:49:36.567]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.567]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.567]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.567]                 on.exit(options(oopts), add = TRUE)
[10:49:36.567]             }
[10:49:36.567]             {
[10:49:36.567]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.567]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.567]                   ...future.FUN(...future.X_jj, ...)
[10:49:36.567]                 })
[10:49:36.567]             }
[10:49:36.567]         }
[10:49:36.567]     }, args = future.call.arguments)
[10:49:36.567] }
[10:49:36.567] Lazy evaluation: FALSE
[10:49:36.567] Asynchronous evaluation: TRUE
[10:49:36.567] Local evaluation: TRUE
[10:49:36.567] Environment: 0x5564a601a580
[10:49:36.567] Capture standard output: TRUE
[10:49:36.567] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:36.567] Immediate condition classes: ‘immediateCondition’
[10:49:36.567] Globals: 7 objects totaling 4.20 KiB (function ‘...future.FUN’ of 1.28 KiB, numeric ‘breaks’ of 463 bytes, factor ‘wool’ of 342 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, ...)
[10:49:36.567] Packages: 1 packages (‘stats’)
[10:49:36.567] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:36.567] Resolved: TRUE
[10:49:36.567] Value: 13.80 KiB of class ‘list’
[10:49:36.567] Early signaling: FALSE
[10:49:36.567] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:36.567] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.568] Chunk #1 of 1 ... DONE
[10:49:36.568] Launching 1 futures (chunks) ... DONE
[10:49:36.568] Resolving 1 futures (chunks) ...
[10:49:36.569] value() on list ...
[10:49:36.569] |  recursive: 0
[10:49:36.569] |  length: 1
[10:49:36.569] |  
[10:49:36.569] |  Number of remaining objects: 1
[10:49:36.569] |  checking value #1 ...
[10:49:36.569] |  :  'obj' is SequentialFuture
[10:49:36.569] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:36.569] |  :  .  state: ‘finished’
[10:49:36.569] |  :  .  run: TRUE
[10:49:36.569] |  :  .  result: ‘FutureResult’
[10:49:36.570] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:36.570] |  :  SequentialFuture #1
[10:49:36.570] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.570] |  :  .  nx: 1
[10:49:36.570] |  :  .  relay: TRUE
[10:49:36.570] |  :  .  stdout: TRUE
[10:49:36.570] |  :  .  signal: TRUE
[10:49:36.570] |  :  .  resignal: FALSE
[10:49:36.570] |  :  .  force: TRUE
[10:49:36.570] |  :  .  relayed: [n=1] FALSE
[10:49:36.570] |  :  .  queued futures: [n=1] FALSE
[10:49:36.570] |  :  .  until=1
[10:49:36.571] |  :  .  relaying element #1
[10:49:36.571] |  :  .  relayed: [n=1] TRUE
[10:49:36.571] |  :  .  queued futures: [n=1] TRUE
[10:49:36.571] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.571] |  :  value(<SequentialFuture>, ...) ...
[10:49:36.571] |  :  .  value: <list>
[10:49:36.571] |  :  value(<SequentialFuture>, ...) ... done
[10:49:36.571] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.571] |  :  .  nx: 1
[10:49:36.571] |  :  .  relay: TRUE
[10:49:36.572] |  :  .  stdout: TRUE
[10:49:36.572] |  :  .  signal: TRUE
[10:49:36.572] |  :  .  resignal: FALSE
[10:49:36.572] |  :  .  force: TRUE
[10:49:36.572] |  :  .  relayed: [n=1] TRUE
[10:49:36.572] |  :  .  queued futures: [n=1] TRUE
[10:49:36.572] |  :  .  until=1
[10:49:36.572] |  :  .  relayed: [n=1] TRUE
[10:49:36.572] |  :  .  queued futures: [n=1] TRUE
[10:49:36.572] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.572] |  :  length: 0 (resolved future 1)
[10:49:36.573] |  checking value #1 ... done
[10:49:36.573] |  Relaying remaining futures ...
[10:49:36.573] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:36.573] |  :  .  nx: 1
[10:49:36.573] |  :  .  relay: TRUE
[10:49:36.573] |  :  .  stdout: TRUE
[10:49:36.573] |  :  .  signal: TRUE
[10:49:36.573] |  :  .  resignal: FALSE
[10:49:36.573] |  :  .  force: TRUE
[10:49:36.573] |  :  .  relayed: [n=1] TRUE
[10:49:36.573] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:36.573] |  :  .  relayed: [n=1] TRUE
[10:49:36.574] |  :  .  queued futures: [n=1] TRUE
[10:49:36.574] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:36.574] |  Relaying remaining futures ... done
[10:49:36.574] value() on list ... done
[10:49:36.574]  - Number of value chunks collected: 1
[10:49:36.574] Resolving 1 futures (chunks) ... DONE
[10:49:36.574] Reducing values from 1 chunks ...
[10:49:36.574]  - Number of values collected after concatenation: 3
[10:49:36.574]  - Number of values expected: 3
[10:49:36.574] Reducing values from 1 chunks ... DONE
[10:49:36.574] future_lapply() ... DONE
[10:49:36.574] future_by_internal() ... DONE
[10:49:36.575] future_by_internal() ...
[10:49:36.575] future_lapply() ...
[10:49:36.602] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.602] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.602] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.602] Number of chunks: 1
[10:49:36.603] getGlobalsAndPackagesXApply() ...
[10:49:36.603]  - future.globals: TRUE
[10:49:36.603] getGlobalsAndPackages() ...
[10:49:36.603] |  Searching for globals ...
[10:49:36.604] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:36.604] |  Searching for globals ... DONE
[10:49:36.604] |  Resolving globals: FALSE
[10:49:36.604] |  Search for packages associated with the globals ...
[10:49:36.605] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.605] |  :  Packages: [1] ‘base’
[10:49:36.605] |  Search for packages associated with the globals ... DONE
[10:49:36.605] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:36.605] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:36.606] |  Packages after dropping 'base': [0] 
[10:49:36.606] |  globals: [1] ‘FUN’
[10:49:36.606] |  packages: [0] 
[10:49:36.606] getGlobalsAndPackages() ... done
[10:49:36.606]  - globals found/used: [n=1] ‘FUN’
[10:49:36.606]  - needed namespaces: [n=0] 
[10:49:36.606] Finding globals ... DONE
[10:49:36.606]  - use_args: TRUE
[10:49:36.606]  - Getting '...' globals ...
[10:49:36.607] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:36.607] |  recursive: 0
[10:49:36.607] |  length: 1
[10:49:36.607] |  elements: ‘...’
[10:49:36.607] |  'obj' is DotDotDotList
[10:49:36.607] |  resolve(obj, ...) ...
[10:49:36.607] |  resolve(obj, ...) ... done
[10:49:36.607] |  length: 0 (resolved future 1)
[10:49:36.607] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:36.608]    - '...' content: [n=0] 
[10:49:36.608] List of 1
[10:49:36.608]  $ ...: list()
[10:49:36.608]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.608]  - attr(*, "where")=List of 1
[10:49:36.608]   ..$ ...:<environment: 0x5564a61c0920> 
[10:49:36.608]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.608]  - attr(*, "resolved")= logi TRUE
[10:49:36.608]  - attr(*, "total_size")= num NA
[10:49:36.610]  - Getting '...' globals ... DONE
[10:49:36.610] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:36.610] List of 2
[10:49:36.610]  $ ...future.FUN:function (object, ...)  
[10:49:36.610]  $ ...          : list()
[10:49:36.610]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.610]  - attr(*, "where")=List of 2
[10:49:36.610]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:36.610]   ..$ ...          :<environment: 0x5564a61c0920> 
[10:49:36.610]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.610]  - attr(*, "resolved")= logi FALSE
[10:49:36.610]  - attr(*, "total_size")= num 18709
[10:49:36.613] Packages to be attached in all futures: [n=0] 
[10:49:36.613] getGlobalsAndPackagesXApply() ... DONE
[10:49:36.613] Number of futures (= number of chunks): 1
[10:49:36.614] Launching 1 futures (chunks) ...
[10:49:36.614] Chunk #1 of 1 ...
[10:49:36.614]  - Finding globals in 'X' for chunk #1 ...
[10:49:36.614] getGlobalsAndPackages() ...
[10:49:36.614] |  Searching for globals ...
[10:49:36.614] |  :  globals found: [0] 
[10:49:36.615] |  Searching for globals ... DONE
[10:49:36.615] |  globals: [0] <none>
[10:49:36.615] |  packages: [0] <none>
[10:49:36.615] getGlobalsAndPackages() ... done
[10:49:36.615]    + additional globals found: [n=0] 
[10:49:36.615]    + additional namespaces needed: [n=0] 
[10:49:36.615]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:36.615]  - seeds: <none>
[10:49:36.615]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.615] getGlobalsAndPackages() ...
[10:49:36.615] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.616] |  Resolving globals: FALSE
[10:49:36.616] |  Tweak future expression to call with '...' arguments ...
[10:49:36.616] |  :  {
[10:49:36.616] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.616] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:36.616] |  :      "# as a global variable                                         "
[10:49:36.616] |  :      do.call(function(...) {
[10:49:36.616] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.616] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.616] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.616] |  :              on.exit(options(oopts), add = TRUE)
[10:49:36.616] |  :          }
[10:49:36.616] |  :          {
[10:49:36.616] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.616] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.616] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:36.616] |  :              })
[10:49:36.616] |  :          }
[10:49:36.616] |  :      }, args = future.call.arguments)
[10:49:36.616] |  :  }
[10:49:36.616] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:36.616] |  Search for packages associated with the globals ...
[10:49:36.616] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.617] |  :  Packages: [1] ‘base’
[10:49:36.617] |  Search for packages associated with the globals ... DONE
[10:49:36.617] |  Packages after dropping 'base': [0] 
[10:49:36.617] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.617] |  packages: [0] 
[10:49:36.617] getGlobalsAndPackages() ... done
[10:49:36.617] run() for Future (‘Future’) ...
[10:49:36.617] |  state: ‘created’
[10:49:36.618] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.618] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.618] |  Using SequentialFutureBackend ...
[10:49:36.618] |  :  Launching futures ...
[10:49:36.618] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:36.618] |  :  .  |  getFutureData() ...
[10:49:36.618] |  :  .  |  :  getFutureCore() ...
[10:49:36.618] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:36.618] |  :  .  |  :  getFutureCore() ... done
[10:49:36.619] |  :  .  |  :  getFutureCapture() ...
[10:49:36.619] |  :  .  |  :  getFutureCapture() ... done
[10:49:36.619] |  :  .  |  :  getFutureContext() ...
[10:49:36.619] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.619] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:36.619] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.619] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:36.619] |  :  .  |  :  getFutureContext() ... done
[10:49:36.619] |  :  .  |  getFutureData() ... done
[10:49:36.620] |  :  .  |  attachPackages() ...
[10:49:36.620] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:36.620] |  :  .  |  attachPackages() ... DONE
[10:49:36.620] |  :  .  |  attachPackages() ...
[10:49:36.620] |  :  .  |  :  packages: [n=0] 
[10:49:36.620] |  :  .  |  attachPackages() ... DONE
[10:49:36.620] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.620] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.621] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.621] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.622] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.622] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:36.622] |  :  .  |  :  .  |  New stack:
[10:49:36.622] |  :  .  |  :  .  |  List of 1
[10:49:36.622] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.622] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.622] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.622] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.622] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.622] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.622] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.624] |  :  .  |  :  .  |  Old stack:
[10:49:36.624] |  :  .  |  :  .  |  List of 1
[10:49:36.624] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.624] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.624] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.624] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.624] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.624] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:36.624] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.624] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.624] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.624] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.627] |  :  .  |  :  .  |  Not identical
[10:49:36.627] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:36.627] |  :  .  |  :  .  |  :  List of 2
[10:49:36.627] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.627] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.627] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.627] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.627] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.627] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.627] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.627] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.627] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.627] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.627] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.627] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.627] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.627] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.627] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.632] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:36.632] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:36.632] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.632] |  :  .  |  :  .  List of future strategies:
[10:49:36.632] |  :  .  |  :  .  1. sequential:
[10:49:36.632] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.632] |  :  .  |  :  .     - tweaked: FALSE
[10:49:36.632] |  :  .  |  :  .     - call: plan(sequential)
[10:49:36.632] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.633] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.633] |  :  .  |  assign_globals() ...
[10:49:36.633] |  :  .  |  List of 5
[10:49:36.633] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:36.633] |  :  .  |   $ future.call.arguments    : list()
[10:49:36.633] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.633] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:36.633] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.633] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:36.633] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.633] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:36.633] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.633] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:36.633] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.633] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:36.633] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.633] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:36.633] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.633] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:36.633] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:36.633] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:36.633] |  :  .  |   - attr(*, "where")=List of 5
[10:49:36.633] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:36.633] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:36.633] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:36.633] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:36.633] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:36.633] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:36.633] |  :  .  |   - attr(*, "total_size")= num 18709
[10:49:36.633] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.633] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:36.642] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:36.642] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:36.642] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:36.643] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:36.643] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:36.643] |  :  .  |  assign_globals() ... done
[10:49:36.646] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.646] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.646] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.646] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:36.646] |  :  .  |  :  .  |  :  New stack:
[10:49:36.646] |  :  .  |  :  .  |  :  List of 1
[10:49:36.646] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.646] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.646] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.646] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.646] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.646] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.646] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.646] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.646] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.646] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.649] |  :  .  |  :  .  |  :  Old stack:
[10:49:36.649] |  :  .  |  :  .  |  :  List of 1
[10:49:36.649] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.649] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.649] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.649] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.649] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.649] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.649] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.649] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.649] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.649] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.652] |  :  .  |  :  .  |  :  Identical
[10:49:36.652] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:36.652] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.652] |  :  .  |  :  .  |  List of future strategies:
[10:49:36.652] |  :  .  |  :  .  |  1. sequential:
[10:49:36.652] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.652] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:36.652] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:36.652] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.653] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.653] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.653] |  :  .  |  SequentialFuture started (and completed)
[10:49:36.653] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:36.653] |  :  Launching futures ... done
[10:49:36.653] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.653] |  Using SequentialFutureBackend ... done
[10:49:36.653] run() for Future (‘SequentialFuture’) ... done
[10:49:36.653] Created future:
[10:49:36.654] SequentialFuture:
[10:49:36.654] Label: ‘future_by-1’
[10:49:36.654] Expression:
[10:49:36.654] {
[10:49:36.654]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.654]     "# expression in do.call(), because function called uses '...'  "
[10:49:36.654]     "# as a global variable                                         "
[10:49:36.654]     do.call(function(...) {
[10:49:36.654]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.654]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.654]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.654]             on.exit(options(oopts), add = TRUE)
[10:49:36.654]         }
[10:49:36.654]         {
[10:49:36.654]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.654]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.654]                 ...future.FUN(...future.X_jj, ...)
[10:49:36.654]             })
[10:49:36.654]         }
[10:49:36.654]     }, args = future.call.arguments)
[10:49:36.654] }
[10:49:36.654] Lazy evaluation: FALSE
[10:49:36.654] Asynchronous evaluation: TRUE
[10:49:36.654] Local evaluation: TRUE
[10:49:36.654] Environment: 0x5564a6156108
[10:49:36.654] Capture standard output: TRUE
[10:49:36.654] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:36.654] Immediate condition classes: ‘immediateCondition’
[10:49:36.654] Globals: 5 objects totaling 2.41 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:36.654] Packages: <none>
[10:49:36.654] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:36.654] Resolved: TRUE
[10:49:36.654] Value: 1.39 KiB of class ‘list’
[10:49:36.654] Early signaling: FALSE
[10:49:36.654] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:36.654] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.654] Chunk #1 of 1 ... DONE
[10:49:36.655] Launching 1 futures (chunks) ... DONE
[10:49:36.655] Resolving 1 futures (chunks) ...
[10:49:36.655] value() on list ...
[10:49:36.655] |  recursive: 0
[10:49:36.655] |  length: 1
[10:49:36.655] |  
[10:49:36.655] |  Number of remaining objects: 1
[10:49:36.655] |  checking value #1 ...
[10:49:36.655] |  :  'obj' is SequentialFuture
[10:49:36.655] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:36.655] |  :  .  state: ‘finished’
[10:49:36.656] |  :  .  run: TRUE
[10:49:36.656] |  :  .  result: ‘FutureResult’
[10:49:36.656] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:36.656] |  :  SequentialFuture #1
[10:49:36.656] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.656] |  :  .  nx: 1
[10:49:36.656] |  :  .  relay: TRUE
[10:49:36.656] |  :  .  stdout: TRUE
[10:49:36.656] |  :  .  signal: TRUE
[10:49:36.656] |  :  .  resignal: FALSE
[10:49:36.656] |  :  .  force: TRUE
[10:49:36.656] |  :  .  relayed: [n=1] FALSE
[10:49:36.657] |  :  .  queued futures: [n=1] FALSE
[10:49:36.657] |  :  .  until=1
[10:49:36.657] |  :  .  relaying element #1
[10:49:36.658] |  :  .  relayed: [n=1] TRUE
[10:49:36.658] |  :  .  queued futures: [n=1] TRUE
[10:49:36.658] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.658] |  :  value(<SequentialFuture>, ...) ...
[10:49:36.658] |  :  .  value: <list>
[10:49:36.658] |  :  value(<SequentialFuture>, ...) ... done
[10:49:36.658] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.658] |  :  .  nx: 1
[10:49:36.658] |  :  .  relay: TRUE
[10:49:36.658] |  :  .  stdout: TRUE
[10:49:36.659] |  :  .  signal: TRUE
[10:49:36.659] |  :  .  resignal: FALSE
[10:49:36.659] |  :  .  force: TRUE
[10:49:36.659] |  :  .  relayed: [n=1] TRUE
[10:49:36.659] |  :  .  queued futures: [n=1] TRUE
[10:49:36.659] |  :  .  until=1
[10:49:36.659] |  :  .  relayed: [n=1] TRUE
[10:49:36.659] |  :  .  queued futures: [n=1] TRUE
[10:49:36.659] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.659] |  :  length: 0 (resolved future 1)
[10:49:36.659] |  checking value #1 ... done
[10:49:36.660] |  Relaying remaining futures ...
[10:49:36.660] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:36.660] |  :  .  nx: 1
[10:49:36.660] |  :  .  relay: TRUE
[10:49:36.660] |  :  .  stdout: TRUE
[10:49:36.660] |  :  .  signal: TRUE
[10:49:36.660] |  :  .  resignal: FALSE
[10:49:36.660] |  :  .  force: TRUE
[10:49:36.660] |  :  .  relayed: [n=1] TRUE
[10:49:36.660] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:36.660] |  :  .  relayed: [n=1] TRUE
[10:49:36.660] |  :  .  queued futures: [n=1] TRUE
[10:49:36.661] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:36.661] |  Relaying remaining futures ... done
[10:49:36.661] value() on list ... done
[10:49:36.661]  - Number of value chunks collected: 1
[10:49:36.661] Resolving 1 futures (chunks) ... DONE
[10:49:36.661] Reducing values from 1 chunks ...
[10:49:36.661]  - Number of values collected after concatenation: 3
[10:49:36.661]  - Number of values expected: 3
[10:49:36.661] Reducing values from 1 chunks ... DONE
[10:49:36.661] future_lapply() ... DONE
[10:49:36.661] future_by_internal() ... DONE
[10:49:36.663] future_by_internal() ...
Warning in future_by_match_FUN(FUN) :
  Specifying the function 'FUN' for future_by() as a character string is deprecated in future.apply (>= 1.10.0) [2022-11-04], because base::by() does not support it. Instead, specify it as a function, e.g. FUN = sqrt and FUN = `[[`. It is deprecated.
[10:49:36.664] future_lapply() ...
[10:49:36.664] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.664] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.664] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.665] Number of chunks: 1
[10:49:36.665] getGlobalsAndPackagesXApply() ...
[10:49:36.665]  - future.globals: TRUE
[10:49:36.665] getGlobalsAndPackages() ...
[10:49:36.665] |  Searching for globals ...
[10:49:36.666] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:36.666] |  Searching for globals ... DONE
[10:49:36.666] |  Resolving globals: FALSE
[10:49:36.666] |  Search for packages associated with the globals ...
[10:49:36.666] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.667] |  :  Packages: [1] ‘base’
[10:49:36.667] |  Search for packages associated with the globals ... DONE
[10:49:36.667] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:36.667] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:36.667] |  Packages after dropping 'base': [0] 
[10:49:36.667] |  globals: [1] ‘FUN’
[10:49:36.668] |  packages: [0] 
[10:49:36.668] getGlobalsAndPackages() ... done
[10:49:36.668]  - globals found/used: [n=1] ‘FUN’
[10:49:36.668]  - needed namespaces: [n=0] 
[10:49:36.668] Finding globals ... DONE
[10:49:36.668]  - use_args: TRUE
[10:49:36.668]  - Getting '...' globals ...
[10:49:36.668] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:36.668] |  recursive: 0
[10:49:36.669] |  length: 1
[10:49:36.669] |  elements: ‘...’
[10:49:36.669] |  'obj' is DotDotDotList
[10:49:36.669] |  resolve(obj, ...) ...
[10:49:36.669] |  resolve(obj, ...) ... done
[10:49:36.669] |  length: 0 (resolved future 1)
[10:49:36.669] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:36.669]    - '...' content: [n=0] 
[10:49:36.669] List of 1
[10:49:36.669]  $ ...: list()
[10:49:36.669]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.669]  - attr(*, "where")=List of 1
[10:49:36.669]   ..$ ...:<environment: 0x5564a54dbcf0> 
[10:49:36.669]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.669]  - attr(*, "resolved")= logi TRUE
[10:49:36.669]  - attr(*, "total_size")= num NA
[10:49:36.672]  - Getting '...' globals ... DONE
[10:49:36.672] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:36.672] List of 2
[10:49:36.672]  $ ...future.FUN:function (object, ...)  
[10:49:36.672]  $ ...          : list()
[10:49:36.672]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.672]  - attr(*, "where")=List of 2
[10:49:36.672]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:36.672]   ..$ ...          :<environment: 0x5564a54dbcf0> 
[10:49:36.672]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.672]  - attr(*, "resolved")= logi FALSE
[10:49:36.672]  - attr(*, "total_size")= num 18647
[10:49:36.675] Packages to be attached in all futures: [n=0] 
[10:49:36.675] getGlobalsAndPackagesXApply() ... DONE
[10:49:36.676] Number of futures (= number of chunks): 1
[10:49:36.676] Launching 1 futures (chunks) ...
[10:49:36.676] Chunk #1 of 1 ...
[10:49:36.676]  - Finding globals in 'X' for chunk #1 ...
[10:49:36.676] getGlobalsAndPackages() ...
[10:49:36.676] |  Searching for globals ...
[10:49:36.677] |  :  globals found: [0] 
[10:49:36.677] |  Searching for globals ... DONE
[10:49:36.677] |  globals: [0] <none>
[10:49:36.677] |  packages: [0] <none>
[10:49:36.677] getGlobalsAndPackages() ... done
[10:49:36.677]    + additional globals found: [n=0] 
[10:49:36.677]    + additional namespaces needed: [n=0] 
[10:49:36.677]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:36.677]  - seeds: <none>
[10:49:36.677]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.677] getGlobalsAndPackages() ...
[10:49:36.678] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.678] |  Resolving globals: FALSE
[10:49:36.678] |  Tweak future expression to call with '...' arguments ...
[10:49:36.678] |  :  {
[10:49:36.678] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.678] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:36.678] |  :      "# as a global variable                                         "
[10:49:36.678] |  :      do.call(function(...) {
[10:49:36.678] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.678] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.678] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.678] |  :              on.exit(options(oopts), add = TRUE)
[10:49:36.678] |  :          }
[10:49:36.678] |  :          {
[10:49:36.678] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.678] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.678] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:36.678] |  :              })
[10:49:36.678] |  :          }
[10:49:36.678] |  :      }, args = future.call.arguments)
[10:49:36.678] |  :  }
[10:49:36.678] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:36.678] |  Search for packages associated with the globals ...
[10:49:36.678] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.679] |  :  Packages: [1] ‘base’
[10:49:36.679] |  Search for packages associated with the globals ... DONE
[10:49:36.679] |  Packages after dropping 'base': [0] 
[10:49:36.679] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.679] |  packages: [0] 
[10:49:36.679] getGlobalsAndPackages() ... done
[10:49:36.679] run() for Future (‘Future’) ...
[10:49:36.679] |  state: ‘created’
[10:49:36.680] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.680] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.680] |  Using SequentialFutureBackend ...
[10:49:36.680] |  :  Launching futures ...
[10:49:36.680] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:36.680] |  :  .  |  getFutureData() ...
[10:49:36.680] |  :  .  |  :  getFutureCore() ...
[10:49:36.680] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:36.680] |  :  .  |  :  getFutureCore() ... done
[10:49:36.680] |  :  .  |  :  getFutureCapture() ...
[10:49:36.681] |  :  .  |  :  getFutureCapture() ... done
[10:49:36.681] |  :  .  |  :  getFutureContext() ...
[10:49:36.681] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.681] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:36.681] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.681] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:36.681] |  :  .  |  :  getFutureContext() ... done
[10:49:36.681] |  :  .  |  getFutureData() ... done
[10:49:36.681] |  :  .  |  attachPackages() ...
[10:49:36.681] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:36.682] |  :  .  |  attachPackages() ... DONE
[10:49:36.682] |  :  .  |  attachPackages() ...
[10:49:36.682] |  :  .  |  :  packages: [n=0] 
[10:49:36.682] |  :  .  |  attachPackages() ... DONE
[10:49:36.682] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.682] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.682] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.683] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.683] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.683] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:36.683] |  :  .  |  :  .  |  New stack:
[10:49:36.683] |  :  .  |  :  .  |  List of 1
[10:49:36.683] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.683] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.683] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.683] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.683] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.683] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.683] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.685] |  :  .  |  :  .  |  Old stack:
[10:49:36.685] |  :  .  |  :  .  |  List of 1
[10:49:36.685] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.685] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.685] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.685] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.685] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.685] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:36.685] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.685] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.685] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.685] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.688] |  :  .  |  :  .  |  Not identical
[10:49:36.688] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:36.688] |  :  .  |  :  .  |  :  List of 2
[10:49:36.688] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.688] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.688] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.688] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.688] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.688] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.688] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.688] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.688] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.688] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.688] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.688] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.688] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.688] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.688] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.693] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:36.693] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:36.694] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.694] |  :  .  |  :  .  List of future strategies:
[10:49:36.694] |  :  .  |  :  .  1. sequential:
[10:49:36.694] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.694] |  :  .  |  :  .     - tweaked: FALSE
[10:49:36.694] |  :  .  |  :  .     - call: plan(sequential)
[10:49:36.694] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.694] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.694] |  :  .  |  assign_globals() ...
[10:49:36.694] |  :  .  |  List of 5
[10:49:36.694] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:36.694] |  :  .  |   $ future.call.arguments    : list()
[10:49:36.694] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.694] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:36.694] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.694] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:36.694] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.694] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:36.694] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.694] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:36.694] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.694] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:36.694] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.694] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:36.694] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.694] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:36.694] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:36.694] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:36.694] |  :  .  |   - attr(*, "where")=List of 5
[10:49:36.694] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:36.694] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:36.694] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:36.694] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:36.694] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:36.694] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:36.694] |  :  .  |   - attr(*, "total_size")= num 18647
[10:49:36.694] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.694] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:36.703] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:36.703] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:36.703] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:36.703] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:36.703] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:36.703] |  :  .  |  assign_globals() ... done
[10:49:36.706] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.706] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.706] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.707] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:36.707] |  :  .  |  :  .  |  :  New stack:
[10:49:36.707] |  :  .  |  :  .  |  :  List of 1
[10:49:36.707] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.707] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.707] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.707] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.707] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.707] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.707] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.707] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.707] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.707] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.711] |  :  .  |  :  .  |  :  Old stack:
[10:49:36.711] |  :  .  |  :  .  |  :  List of 1
[10:49:36.711] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.711] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.711] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.711] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.711] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.711] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:36.711] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.711] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.711] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.711] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.714] |  :  .  |  :  .  |  :  Identical
[10:49:36.714] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:36.714] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:36.714] |  :  .  |  :  .  |  List of future strategies:
[10:49:36.714] |  :  .  |  :  .  |  1. sequential:
[10:49:36.714] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.714] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:36.714] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:36.714] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.714] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.714] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.715] |  :  .  |  SequentialFuture started (and completed)
[10:49:36.715] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:36.715] |  :  Launching futures ... done
[10:49:36.715] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.715] |  Using SequentialFutureBackend ... done
[10:49:36.715] run() for Future (‘SequentialFuture’) ... done
[10:49:36.715] Created future:
[10:49:36.715] SequentialFuture:
[10:49:36.715] Label: ‘future_by-1’
[10:49:36.715] Expression:
[10:49:36.715] {
[10:49:36.715]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.715]     "# expression in do.call(), because function called uses '...'  "
[10:49:36.715]     "# as a global variable                                         "
[10:49:36.715]     do.call(function(...) {
[10:49:36.715]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.715]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.715]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.715]             on.exit(options(oopts), add = TRUE)
[10:49:36.715]         }
[10:49:36.715]         {
[10:49:36.715]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.715]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.715]                 ...future.FUN(...future.X_jj, ...)
[10:49:36.715]             })
[10:49:36.715]         }
[10:49:36.715]     }, args = future.call.arguments)
[10:49:36.715] }
[10:49:36.715] Lazy evaluation: FALSE
[10:49:36.715] Asynchronous evaluation: TRUE
[10:49:36.715] Local evaluation: TRUE
[10:49:36.715] Environment: 0x5564a4935990
[10:49:36.715] Capture standard output: TRUE
[10:49:36.715] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:36.715] Immediate condition classes: ‘immediateCondition’
[10:49:36.715] Globals: 5 objects totaling 2.41 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:36.715] Packages: <none>
[10:49:36.715] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:36.715] Resolved: TRUE
[10:49:36.715] Value: 1.39 KiB of class ‘list’
[10:49:36.715] Early signaling: FALSE
[10:49:36.715] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:36.715] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.716] Chunk #1 of 1 ... DONE
[10:49:36.716] Launching 1 futures (chunks) ... DONE
[10:49:36.716] Resolving 1 futures (chunks) ...
[10:49:36.717] value() on list ...
[10:49:36.717] |  recursive: 0
[10:49:36.717] |  length: 1
[10:49:36.717] |  
[10:49:36.717] |  Number of remaining objects: 1
[10:49:36.717] |  checking value #1 ...
[10:49:36.717] |  :  'obj' is SequentialFuture
[10:49:36.717] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:36.717] |  :  .  state: ‘finished’
[10:49:36.717] |  :  .  run: TRUE
[10:49:36.717] |  :  .  result: ‘FutureResult’
[10:49:36.718] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:36.718] |  :  SequentialFuture #1
[10:49:36.718] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.718] |  :  .  nx: 1
[10:49:36.718] |  :  .  relay: TRUE
[10:49:36.718] |  :  .  stdout: TRUE
[10:49:36.718] |  :  .  signal: TRUE
[10:49:36.718] |  :  .  resignal: FALSE
[10:49:36.718] |  :  .  force: TRUE
[10:49:36.718] |  :  .  relayed: [n=1] FALSE
[10:49:36.718] |  :  .  queued futures: [n=1] FALSE
[10:49:36.718] |  :  .  until=1
[10:49:36.719] |  :  .  relaying element #1
[10:49:36.719] |  :  .  relayed: [n=1] TRUE
[10:49:36.719] |  :  .  queued futures: [n=1] TRUE
[10:49:36.719] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.719] |  :  value(<SequentialFuture>, ...) ...
[10:49:36.719] |  :  .  value: <list>
[10:49:36.719] |  :  value(<SequentialFuture>, ...) ... done
[10:49:36.719] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.719] |  :  .  nx: 1
[10:49:36.719] |  :  .  relay: TRUE
[10:49:36.720] |  :  .  stdout: TRUE
[10:49:36.720] |  :  .  signal: TRUE
[10:49:36.720] |  :  .  resignal: FALSE
[10:49:36.720] |  :  .  force: TRUE
[10:49:36.720] |  :  .  relayed: [n=1] TRUE
[10:49:36.720] |  :  .  queued futures: [n=1] TRUE
[10:49:36.720] |  :  .  until=1
[10:49:36.720] |  :  .  relayed: [n=1] TRUE
[10:49:36.720] |  :  .  queued futures: [n=1] TRUE
[10:49:36.720] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.720] |  :  length: 0 (resolved future 1)
[10:49:36.721] |  checking value #1 ... done
[10:49:36.721] |  Relaying remaining futures ...
[10:49:36.721] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:36.721] |  :  .  nx: 1
[10:49:36.721] |  :  .  relay: TRUE
[10:49:36.721] |  :  .  stdout: TRUE
[10:49:36.721] |  :  .  signal: TRUE
[10:49:36.721] |  :  .  resignal: FALSE
[10:49:36.721] |  :  .  force: TRUE
[10:49:36.721] |  :  .  relayed: [n=1] TRUE
[10:49:36.721] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:36.721] |  :  .  relayed: [n=1] TRUE
[10:49:36.722] |  :  .  queued futures: [n=1] TRUE
[10:49:36.722] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:36.722] |  Relaying remaining futures ... done
[10:49:36.722] value() on list ... done
[10:49:36.722]  - Number of value chunks collected: 1
[10:49:36.722] Resolving 1 futures (chunks) ... DONE
[10:49:36.722] Reducing values from 1 chunks ...
[10:49:36.722]  - Number of values collected after concatenation: 3
[10:49:36.722]  - Number of values expected: 3
[10:49:36.722] Reducing values from 1 chunks ... DONE
[10:49:36.722] future_lapply() ... DONE
[10:49:36.722] future_by_internal() ... DONE
[10:49:36.723] future_by_internal() ...
- plan('multicore') ...
[10:49:36.724] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.724] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:36.724] |  :  all.equal() for FutureStrategyList ...
[10:49:36.724] |  :  .  New stack:
[10:49:36.724] |  :  .  List of 1
[10:49:36.724] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.724] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.724] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.724] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.724] |  :  .      ...)  
[10:49:36.724] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.724] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.724] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:36.724] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.726] |  :  .  Old stack:
[10:49:36.726] |  :  .  List of 1
[10:49:36.726] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.726] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.726] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.726] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.726] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.726] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:36.726] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.726] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.726] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.726] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.730] |  :  .  Not identical
[10:49:36.730] |  :  .  all.equal() for future ...
[10:49:36.731] |  :  .  |  List of 2
[10:49:36.731] |  :  .  |   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.731] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.731] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.731] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.731] |  :  .  |      ...)  
[10:49:36.731] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.731] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.731] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:36.731] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.731] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.731] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.731] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.731] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.731] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:36.731] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a61987c8> 
[10:49:36.731] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.731] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.735] |  :  .  |  Formals differ
[10:49:36.735] |  :  .  all.equal() for future ... done
[10:49:36.735] |  :  .  Future strategies differ at level 1
[10:49:36.735] |  :  all.equal() for FutureStrategyList ... done
[10:49:36.735] |  :  plan(): Setting new future strategy stack:
[10:49:36.735] |  :  List of future strategies:
[10:49:36.735] |  :  1. multicore:
[10:49:36.735] |  :     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:36.735] |  :     - tweaked: FALSE
[10:49:36.735] |  :     - call: plan(strategy)
[10:49:36.736] |  :  List of 1
[10:49:36.736] |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.736] |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.736] |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.736] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.736] |  :      ...)  
[10:49:36.736] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.736] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.736] |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:36.736] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.738] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:36.738] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.738] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.738] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.739] |  :  .  Legacy shutdown of cluster workers ...
[10:49:36.739] |  :  .  |  Stopping existing cluster ...
[10:49:36.739] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:36.739] |  :  .  |  Stopping existing cluster ... done
[10:49:36.739] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:36.739] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:36.739] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:49:36.739] |  :  .  function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.739] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.739] |  :  .   - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.739] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.739] |  :  .      ...)  
[10:49:36.739] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.739] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.739] |  :  .   - attr(*, "call")= language plan(strategy)
[10:49:36.741] |  :  .  init: NULL
[10:49:36.741] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:49:36.741] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.742] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.742] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.742] |  :  Backend function: <‘NULL’>
[10:49:36.743] |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:36.744] |  :  plan(): nbrOfWorkers() = 1
[10:49:36.744] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:36.744] plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.744] future_by_internal() ...
[10:49:36.744] future_lapply() ...
[10:49:36.745] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.745] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.745] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.745] Backend function: <‘NULL’>
[10:49:36.757] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:36.757] Number of chunks: 1
[10:49:36.757] getGlobalsAndPackagesXApply() ...
[10:49:36.757]  - future.globals: TRUE
[10:49:36.757] getGlobalsAndPackages() ...
[10:49:36.757] |  Searching for globals ...
[10:49:36.758] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:36.758] |  Searching for globals ... DONE
[10:49:36.758] |  Resolving globals: FALSE
[10:49:36.759] |  Search for packages associated with the globals ...
[10:49:36.759] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.759] |  :  Packages: [1] ‘base’
[10:49:36.759] |  Search for packages associated with the globals ... DONE
[10:49:36.759] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:36.759] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:36.760] |  Packages after dropping 'base': [0] 
[10:49:36.760] |  globals: [1] ‘FUN’
[10:49:36.760] |  packages: [0] 
[10:49:36.760] getGlobalsAndPackages() ... done
[10:49:36.760]  - globals found/used: [n=1] ‘FUN’
[10:49:36.760]  - needed namespaces: [n=0] 
[10:49:36.760] Finding globals ... DONE
[10:49:36.760]  - use_args: TRUE
[10:49:36.760]  - Getting '...' globals ...
[10:49:36.761] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:36.761] |  recursive: 0
[10:49:36.761] |  length: 1
[10:49:36.761] |  elements: ‘...’
[10:49:36.761] |  'obj' is DotDotDotList
[10:49:36.761] |  resolve(obj, ...) ...
[10:49:36.761] |  resolve(obj, ...) ... done
[10:49:36.761] |  length: 0 (resolved future 1)
[10:49:36.761] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:36.762]    - '...' content: [n=0] 
[10:49:36.762] List of 1
[10:49:36.762]  $ ...: list()
[10:49:36.762]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.762]  - attr(*, "where")=List of 1
[10:49:36.762]   ..$ ...:<environment: 0x5564a6092588> 
[10:49:36.762]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.762]  - attr(*, "resolved")= logi TRUE
[10:49:36.762]  - attr(*, "total_size")= num NA
[10:49:36.765]  - Getting '...' globals ... DONE
[10:49:36.765] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:36.765] List of 2
[10:49:36.765]  $ ...future.FUN:function (object, ...)  
[10:49:36.765]  $ ...          : list()
[10:49:36.765]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.765]  - attr(*, "where")=List of 2
[10:49:36.765]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:36.765]   ..$ ...          :<environment: 0x5564a6092588> 
[10:49:36.765]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.765]  - attr(*, "resolved")= logi FALSE
[10:49:36.765]  - attr(*, "total_size")= num 15670
[10:49:36.768] Packages to be attached in all futures: [n=0] 
[10:49:36.768] getGlobalsAndPackagesXApply() ... DONE
[10:49:36.768] Number of futures (= number of chunks): 1
[10:49:36.768] Launching 1 futures (chunks) ...
[10:49:36.768] Chunk #1 of 1 ...
[10:49:36.768]  - Finding globals in 'X' for chunk #1 ...
[10:49:36.768] getGlobalsAndPackages() ...
[10:49:36.769] |  Searching for globals ...
[10:49:36.769] |  :  globals found: [0] 
[10:49:36.769] |  Searching for globals ... DONE
[10:49:36.769] |  globals: [0] <none>
[10:49:36.769] |  packages: [0] <none>
[10:49:36.769] getGlobalsAndPackages() ... done
[10:49:36.769]    + additional globals found: [n=0] 
[10:49:36.770]    + additional namespaces needed: [n=0] 
[10:49:36.770]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:36.770]  - seeds: <none>
[10:49:36.770]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.770] getGlobalsAndPackages() ...
[10:49:36.770] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.770] |  Resolving globals: FALSE
[10:49:36.770] |  Tweak future expression to call with '...' arguments ...
[10:49:36.770] |  :  {
[10:49:36.770] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.770] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:36.770] |  :      "# as a global variable                                         "
[10:49:36.770] |  :      do.call(function(...) {
[10:49:36.770] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.770] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.770] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.770] |  :              on.exit(options(oopts), add = TRUE)
[10:49:36.770] |  :          }
[10:49:36.770] |  :          {
[10:49:36.770] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.770] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.770] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:36.770] |  :              })
[10:49:36.770] |  :          }
[10:49:36.770] |  :      }, args = future.call.arguments)
[10:49:36.770] |  :  }
[10:49:36.771] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:36.771] |  Search for packages associated with the globals ...
[10:49:36.771] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.771] |  :  Packages: [1] ‘base’
[10:49:36.771] |  Search for packages associated with the globals ... DONE
[10:49:36.771] |  Packages after dropping 'base': [0] 
[10:49:36.771] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.772] |  packages: [0] 
[10:49:36.772] getGlobalsAndPackages() ... done
[10:49:36.772] run() for Future (‘Future’) ...
[10:49:36.772] |  state: ‘created’
[10:49:36.772] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.772] |  :  makeFutureBackend(<multicore>) ...
[10:49:36.772] |  :  .  Backend function: <‘NULL’>
[10:49:36.774] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:36.774] |  :  makeFutureBackend(<multicore>) ... done
[10:49:36.774] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.774] |  Using SequentialFutureBackend ...
[10:49:36.774] |  :  Launching futures ...
[10:49:36.774] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:36.774] |  :  .  |  getFutureData() ...
[10:49:36.774] |  :  .  |  :  getFutureCore() ...
[10:49:36.774] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:36.775] |  :  .  |  :  getFutureCore() ... done
[10:49:36.775] |  :  .  |  :  getFutureCapture() ...
[10:49:36.775] |  :  .  |  :  getFutureCapture() ... done
[10:49:36.775] |  :  .  |  :  getFutureContext() ...
[10:49:36.775] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.775] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:36.775] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.775] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:36.775] |  :  .  |  :  getFutureContext() ... done
[10:49:36.775] |  :  .  |  getFutureData() ... done
[10:49:36.776] |  :  .  |  attachPackages() ...
[10:49:36.776] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:36.776] |  :  .  |  attachPackages() ... DONE
[10:49:36.776] |  :  .  |  attachPackages() ...
[10:49:36.776] |  :  .  |  :  packages: [n=0] 
[10:49:36.776] |  :  .  |  attachPackages() ... DONE
[10:49:36.776] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.777] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.777] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.777] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.777] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.777] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:36.777] |  :  .  |  :  .  |  New stack:
[10:49:36.777] |  :  .  |  :  .  |  List of 1
[10:49:36.777] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.777] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.777] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.777] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.777] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.777] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.777] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.779] |  :  .  |  :  .  |  Old stack:
[10:49:36.780] |  :  .  |  :  .  |  List of 1
[10:49:36.780] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.780] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.780] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.780] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.780] |  :  .  |  :  .  |      ...)  
[10:49:36.780] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.780] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.780] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:36.780] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.780] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.780] |  :  .  |  :  .  |      ...)  
[10:49:36.780] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.780] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.784] |  :  .  |  :  .  |  Not identical
[10:49:36.784] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:36.784] |  :  .  |  :  .  |  :  List of 2
[10:49:36.784] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.784] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.784] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.784] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.784] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.784] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.784] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.784] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.784] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.784] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.784] |  :  .  |  :  .  |  :      ...)  
[10:49:36.784] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.784] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.784] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:36.784] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.784] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.784] |  :  .  |  :  .  |  :      ...)  
[10:49:36.784] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.788] |  :  .  |  :  .  |  :  Formals differ
[10:49:36.788] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:36.788] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:36.788] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:36.788] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:36.788] |  :  .  |  :  .  List of future strategies:
[10:49:36.788] |  :  .  |  :  .  1. sequential:
[10:49:36.788] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.788] |  :  .  |  :  .     - tweaked: FALSE
[10:49:36.788] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.789] |  :  .  |  :  .  List of 1
[10:49:36.789] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.789] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.789] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.789] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.789] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.789] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.789] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.791] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:36.791] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:36.791] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.791] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.791] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.792] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:36.792] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:36.792] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:36.792] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.792] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.792] |  :  .  |  assign_globals() ...
[10:49:36.792] |  :  .  |  List of 5
[10:49:36.792] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:36.792] |  :  .  |   $ future.call.arguments    : list()
[10:49:36.792] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.792] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:36.792] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:36.792] |  :  .  |    .. ..$ breaks: num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:36.792] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.792] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:36.792] |  :  .  |    .. ..$ breaks: num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:36.792] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.792] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:36.792] |  :  .  |    .. ..$ breaks: num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:36.792] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.792] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:36.792] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:36.792] |  :  .  |   - attr(*, "where")=List of 5
[10:49:36.792] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:36.792] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:36.792] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:36.792] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:36.792] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:36.792] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:36.792] |  :  .  |   - attr(*, "total_size")= num 15670
[10:49:36.792] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.792] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:36.801] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:36.801] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:36.801] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:36.801] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:36.801] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:36.801] |  :  .  |  assign_globals() ... done
[10:49:36.804] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.804] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.804] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.804] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:36.804] |  :  .  |  :  .  |  :  New stack:
[10:49:36.804] |  :  .  |  :  .  |  :  List of 1
[10:49:36.804] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.804] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.804] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.804] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.804] |  :  .  |  :  .  |  :      ...)  
[10:49:36.804] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.804] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.804] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:36.804] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.804] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.804] |  :  .  |  :  .  |  :      ...)  
[10:49:36.804] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.804] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.807] |  :  .  |  :  .  |  :  Old stack:
[10:49:36.807] |  :  .  |  :  .  |  :  List of 1
[10:49:36.807] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.807] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.807] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.807] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.807] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.807] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.807] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.809] |  :  .  |  :  .  |  :  Not identical
[10:49:36.809] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:36.809] |  :  .  |  :  .  |  :  .  List of 2
[10:49:36.809] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.809] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.809] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.809] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.809] |  :  .  |  :  .  |  :  .      ...)  
[10:49:36.809] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.809] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.809] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:36.809] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.809] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.809] |  :  .  |  :  .  |  :  .      ...)  
[10:49:36.809] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.809] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.809] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.809] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.809] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.809] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.809] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.814] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:36.814] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:36.815] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:36.815] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:36.815] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:36.815] |  :  .  |  :  .  |  List of future strategies:
[10:49:36.815] |  :  .  |  :  .  |  1. multicore:
[10:49:36.815] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:36.815] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:36.815] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:36.815] |  :  .  |  :  .  |  List of 1
[10:49:36.815] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.815] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.815] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.815] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.815] |  :  .  |  :  .  |      ...)  
[10:49:36.815] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.815] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.815] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:36.815] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.815] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.815] |  :  .  |  :  .  |      ...)  
[10:49:36.815] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.815] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.818] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:36.818] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:36.818] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.818] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.819] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.819] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:36.819] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.819] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.819] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.819] |  :  .  |  SequentialFuture started (and completed)
[10:49:36.819] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:36.819] |  :  Launching futures ... done
[10:49:36.819] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.819] |  Using SequentialFutureBackend ... done
[10:49:36.820] run() for Future (‘SequentialFuture’) ... done
[10:49:36.820] Created future:
[10:49:36.820] SequentialFuture:
[10:49:36.820] Label: ‘future_by-1’
[10:49:36.820] Expression:
[10:49:36.820] {
[10:49:36.820]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.820]     "# expression in do.call(), because function called uses '...'  "
[10:49:36.820]     "# as a global variable                                         "
[10:49:36.820]     do.call(function(...) {
[10:49:36.820]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.820]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.820]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.820]             on.exit(options(oopts), add = TRUE)
[10:49:36.820]         }
[10:49:36.820]         {
[10:49:36.820]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.820]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.820]                 ...future.FUN(...future.X_jj, ...)
[10:49:36.820]             })
[10:49:36.820]         }
[10:49:36.820]     }, args = future.call.arguments)
[10:49:36.820] }
[10:49:36.820] Lazy evaluation: FALSE
[10:49:36.820] Asynchronous evaluation: TRUE
[10:49:36.820] Local evaluation: TRUE
[10:49:36.820] Environment: R_GlobalEnv
[10:49:36.820] Capture standard output: TRUE
[10:49:36.820] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:36.820] Immediate condition classes: ‘immediateCondition’
[10:49:36.820] Globals: 5 objects totaling 1.90 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.48 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:36.820] Packages: <none>
[10:49:36.820] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:36.820] Resolved: TRUE
[10:49:36.820] Value: 1.16 KiB of class ‘list’
[10:49:36.820] Early signaling: FALSE
[10:49:36.820] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:36.820] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.821] Chunk #1 of 1 ... DONE
[10:49:36.821] Launching 1 futures (chunks) ... DONE
[10:49:36.821] Resolving 1 futures (chunks) ...
[10:49:36.821] value() on list ...
[10:49:36.821] |  recursive: 0
[10:49:36.821] |  length: 1
[10:49:36.821] |  
[10:49:36.821] |  Number of remaining objects: 1
[10:49:36.821] |  checking value #1 ...
[10:49:36.821] |  :  'obj' is SequentialFuture
[10:49:36.821] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:36.822] |  :  .  state: ‘finished’
[10:49:36.822] |  :  .  run: TRUE
[10:49:36.822] |  :  .  result: ‘FutureResult’
[10:49:36.822] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:36.822] |  :  SequentialFuture #1
[10:49:36.822] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.822] |  :  .  nx: 1
[10:49:36.822] |  :  .  relay: TRUE
[10:49:36.822] |  :  .  stdout: TRUE
[10:49:36.822] |  :  .  signal: TRUE
[10:49:36.822] |  :  .  resignal: FALSE
[10:49:36.822] |  :  .  force: TRUE
[10:49:36.823] |  :  .  relayed: [n=1] FALSE
[10:49:36.823] |  :  .  queued futures: [n=1] FALSE
[10:49:36.823] |  :  .  until=1
[10:49:36.823] |  :  .  relaying element #1
[10:49:36.823] |  :  .  relayed: [n=1] TRUE
[10:49:36.823] |  :  .  queued futures: [n=1] TRUE
[10:49:36.823] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.823] |  :  value(<SequentialFuture>, ...) ...
[10:49:36.823] |  :  .  value: <list>
[10:49:36.824] |  :  value(<SequentialFuture>, ...) ... done
[10:49:36.824] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.824] |  :  .  nx: 1
[10:49:36.824] |  :  .  relay: TRUE
[10:49:36.824] |  :  .  stdout: TRUE
[10:49:36.824] |  :  .  signal: TRUE
[10:49:36.824] |  :  .  resignal: FALSE
[10:49:36.824] |  :  .  force: TRUE
[10:49:36.824] |  :  .  relayed: [n=1] TRUE
[10:49:36.824] |  :  .  queued futures: [n=1] TRUE
[10:49:36.824] |  :  .  until=1
[10:49:36.824] |  :  .  relayed: [n=1] TRUE
[10:49:36.824] |  :  .  queued futures: [n=1] TRUE
[10:49:36.825] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.825] |  :  length: 0 (resolved future 1)
[10:49:36.825] |  checking value #1 ... done
[10:49:36.825] |  Relaying remaining futures ...
[10:49:36.825] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:36.825] |  :  .  nx: 1
[10:49:36.825] |  :  .  relay: TRUE
[10:49:36.825] |  :  .  stdout: TRUE
[10:49:36.825] |  :  .  signal: TRUE
[10:49:36.825] |  :  .  resignal: FALSE
[10:49:36.825] |  :  .  force: TRUE
[10:49:36.825] |  :  .  relayed: [n=1] TRUE
[10:49:36.826] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:36.826] |  :  .  relayed: [n=1] TRUE
[10:49:36.826] |  :  .  queued futures: [n=1] TRUE
[10:49:36.826] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:36.826] |  Relaying remaining futures ... done
[10:49:36.826] value() on list ... done
[10:49:36.826]  - Number of value chunks collected: 1
[10:49:36.826] Resolving 1 futures (chunks) ... DONE
[10:49:36.826] Reducing values from 1 chunks ...
[10:49:36.826]  - Number of values collected after concatenation: 3
[10:49:36.826]  - Number of values expected: 3
[10:49:36.827] Reducing values from 1 chunks ... DONE
[10:49:36.827] future_lapply() ... DONE
[10:49:36.827] future_by_internal() ... DONE
[10:49:36.827] future_by_internal() ...
[10:49:36.827] future_lapply() ...
[10:49:36.828] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.828] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.828] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.828] Number of chunks: 1
[10:49:36.828] getGlobalsAndPackagesXApply() ...
[10:49:36.828]  - future.globals: TRUE
[10:49:36.828] getGlobalsAndPackages() ...
[10:49:36.828] |  Searching for globals ...
[10:49:36.830] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:36.830] |  Searching for globals ... DONE
[10:49:36.830] |  Resolving globals: FALSE
[10:49:36.830] |  Search for packages associated with the globals ...
[10:49:36.830] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.830] |  :  Packages: [1] ‘base’
[10:49:36.830] |  Search for packages associated with the globals ... DONE
[10:49:36.831] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:36.832] |  The total size of the 1 globals exported for future expression (‘FUN(digits = 2L)’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:36.832] |  Packages after dropping 'base': [0] 
[10:49:36.832] |  globals: [1] ‘FUN’
[10:49:36.832] |  packages: [0] 
[10:49:36.832] getGlobalsAndPackages() ... done
[10:49:36.832]  - globals found/used: [n=1] ‘FUN’
[10:49:36.832]  - needed namespaces: [n=0] 
[10:49:36.832] Finding globals ... DONE
[10:49:36.832]  - use_args: TRUE
[10:49:36.832]  - Getting '...' globals ...
[10:49:36.833] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:36.833] |  recursive: 0
[10:49:36.833] |  length: 1
[10:49:36.833] |  elements: ‘...’
[10:49:36.833] |  'obj' is DotDotDotList
[10:49:36.833] |  resolve(obj, ...) ...
[10:49:36.833] |  resolve(obj, ...) ... done
[10:49:36.833] |  length: 0 (resolved future 1)
[10:49:36.834] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:36.834]    - '...' content: [n=1] ‘digits’
[10:49:36.834] List of 1
[10:49:36.834]  $ ...:List of 1
[10:49:36.834]   ..$ digits: int 2
[10:49:36.834]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.834]  - attr(*, "where")=List of 1
[10:49:36.834]   ..$ ...:<environment: 0x5564a5b13760> 
[10:49:36.834]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.834]  - attr(*, "resolved")= logi TRUE
[10:49:36.834]  - attr(*, "total_size")= num NA
[10:49:36.836]  - Getting '...' globals ... DONE
[10:49:36.837] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:36.837] List of 2
[10:49:36.837]  $ ...future.FUN:function (object, ...)  
[10:49:36.837]  $ ...          :List of 1
[10:49:36.837]   ..$ digits: int 2
[10:49:36.837]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.837]  - attr(*, "where")=List of 2
[10:49:36.837]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:36.837]   ..$ ...          :<environment: 0x5564a5b13760> 
[10:49:36.837]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.837]  - attr(*, "resolved")= logi FALSE
[10:49:36.837]  - attr(*, "total_size")= num 13284
[10:49:36.840] Packages to be attached in all futures: [n=0] 
[10:49:36.840] getGlobalsAndPackagesXApply() ... DONE
[10:49:36.840] Number of futures (= number of chunks): 1
[10:49:36.840] Launching 1 futures (chunks) ...
[10:49:36.840] Chunk #1 of 1 ...
[10:49:36.840]  - Finding globals in 'X' for chunk #1 ...
[10:49:36.840] getGlobalsAndPackages() ...
[10:49:36.840] |  Searching for globals ...
[10:49:36.841] |  :  globals found: [0] 
[10:49:36.841] |  Searching for globals ... DONE
[10:49:36.841] |  globals: [0] <none>
[10:49:36.841] |  packages: [0] <none>
[10:49:36.841] getGlobalsAndPackages() ... done
[10:49:36.841]    + additional globals found: [n=0] 
[10:49:36.841]    + additional namespaces needed: [n=0] 
[10:49:36.841]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:36.841]  - seeds: <none>
[10:49:36.841]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.842] getGlobalsAndPackages() ...
[10:49:36.842] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.842] |  Resolving globals: FALSE
[10:49:36.842] |  Tweak future expression to call with '...' arguments ...
[10:49:36.842] |  :  {
[10:49:36.842] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.842] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:36.842] |  :      "# as a global variable                                         "
[10:49:36.842] |  :      do.call(function(...) {
[10:49:36.842] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.842] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.842] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.842] |  :              on.exit(options(oopts), add = TRUE)
[10:49:36.842] |  :          }
[10:49:36.842] |  :          {
[10:49:36.842] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.842] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.842] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:36.842] |  :              })
[10:49:36.842] |  :          }
[10:49:36.842] |  :      }, args = future.call.arguments)
[10:49:36.842] |  :  }
[10:49:36.842] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:36.842] |  Search for packages associated with the globals ...
[10:49:36.843] |  :  Packages associated with globals: [1] ‘base’
[10:49:36.843] |  :  Packages: [1] ‘base’
[10:49:36.843] |  Search for packages associated with the globals ... DONE
[10:49:36.843] |  Packages after dropping 'base': [0] 
[10:49:36.843] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.843] |  packages: [0] 
[10:49:36.843] getGlobalsAndPackages() ... done
[10:49:36.844] run() for Future (‘Future’) ...
[10:49:36.844] |  state: ‘created’
[10:49:36.844] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.844] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.844] |  Using SequentialFutureBackend ...
[10:49:36.844] |  :  Launching futures ...
[10:49:36.844] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:36.844] |  :  .  |  getFutureData() ...
[10:49:36.844] |  :  .  |  :  getFutureCore() ...
[10:49:36.844] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:36.845] |  :  .  |  :  getFutureCore() ... done
[10:49:36.845] |  :  .  |  :  getFutureCapture() ...
[10:49:36.845] |  :  .  |  :  getFutureCapture() ... done
[10:49:36.845] |  :  .  |  :  getFutureContext() ...
[10:49:36.845] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.845] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:36.845] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.845] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:36.845] |  :  .  |  :  getFutureContext() ... done
[10:49:36.845] |  :  .  |  getFutureData() ... done
[10:49:36.845] |  :  .  |  attachPackages() ...
[10:49:36.846] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:36.846] |  :  .  |  attachPackages() ... DONE
[10:49:36.846] |  :  .  |  attachPackages() ...
[10:49:36.846] |  :  .  |  :  packages: [n=0] 
[10:49:36.846] |  :  .  |  attachPackages() ... DONE
[10:49:36.846] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.846] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.847] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.847] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.847] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.847] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:36.847] |  :  .  |  :  .  |  New stack:
[10:49:36.848] |  :  .  |  :  .  |  List of 1
[10:49:36.848] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.848] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.848] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.848] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.848] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.848] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.848] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.850] |  :  .  |  :  .  |  Old stack:
[10:49:36.850] |  :  .  |  :  .  |  List of 1
[10:49:36.850] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.850] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.850] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.850] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.850] |  :  .  |  :  .  |      ...)  
[10:49:36.850] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.850] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.850] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:36.850] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.850] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.850] |  :  .  |  :  .  |      ...)  
[10:49:36.850] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.850] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.853] |  :  .  |  :  .  |  Not identical
[10:49:36.853] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:36.853] |  :  .  |  :  .  |  :  List of 2
[10:49:36.853] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.853] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.853] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.853] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.853] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.853] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.853] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.853] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.853] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.853] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.853] |  :  .  |  :  .  |  :      ...)  
[10:49:36.853] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.853] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.853] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:36.853] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.853] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.853] |  :  .  |  :  .  |  :      ...)  
[10:49:36.853] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.857] |  :  .  |  :  .  |  :  Formals differ
[10:49:36.858] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:36.858] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:36.858] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:36.858] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:36.858] |  :  .  |  :  .  List of future strategies:
[10:49:36.858] |  :  .  |  :  .  1. sequential:
[10:49:36.858] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.858] |  :  .  |  :  .     - tweaked: FALSE
[10:49:36.858] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.858] |  :  .  |  :  .  List of 1
[10:49:36.858] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.858] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.858] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.858] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.858] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.858] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.858] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.860] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:36.860] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:36.861] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.861] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.861] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.861] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:36.861] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:36.861] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:36.861] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.861] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.861] |  :  .  |  assign_globals() ...
[10:49:36.862] |  :  .  |  List of 5
[10:49:36.862] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:36.862] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:36.862] |  :  .  |    ..$ digits: int 2
[10:49:36.862] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.862] |  :  .  |   $ ...future.elements_ii    :List of 6
[10:49:36.862] |  :  .  |    ..$ : num [1:9] 26 30 54 25 70 52 51 26 67
[10:49:36.862] |  :  .  |    ..$ : num [1:9] 27 14 29 19 29 31 41 20 44
[10:49:36.862] |  :  .  |    ..$ : num [1:9] 18 21 29 17 12 18 35 30 36
[10:49:36.862] |  :  .  |    ..$ : num [1:9] 42 26 19 16 39 28 21 39 29
[10:49:36.862] |  :  .  |    ..$ : num [1:9] 36 21 24 18 10 43 28 15 26
[10:49:36.862] |  :  .  |    ..$ : num [1:9] 20 21 24 17 13 15 15 16 28
[10:49:36.862] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:36.862] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:36.862] |  :  .  |   - attr(*, "where")=List of 5
[10:49:36.862] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:36.862] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:36.862] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:36.862] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:36.862] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:36.862] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:36.862] |  :  .  |   - attr(*, "total_size")= num 13284
[10:49:36.862] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.862] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:36.869] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:36.869] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:36.869] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:36.869] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:36.869] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:36.869] |  :  .  |  assign_globals() ... done
[10:49:36.871] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.872] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.872] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.872] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:36.872] |  :  .  |  :  .  |  :  New stack:
[10:49:36.872] |  :  .  |  :  .  |  :  List of 1
[10:49:36.872] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.872] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.872] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.872] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.872] |  :  .  |  :  .  |  :      ...)  
[10:49:36.872] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.872] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.872] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:36.872] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.872] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.872] |  :  .  |  :  .  |  :      ...)  
[10:49:36.872] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.872] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.875] |  :  .  |  :  .  |  :  Old stack:
[10:49:36.875] |  :  .  |  :  .  |  :  List of 1
[10:49:36.875] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.875] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.875] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.875] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.875] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.875] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.875] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.877] |  :  .  |  :  .  |  :  Not identical
[10:49:36.877] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:36.877] |  :  .  |  :  .  |  :  .  List of 2
[10:49:36.877] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.877] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.877] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.877] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.877] |  :  .  |  :  .  |  :  .      ...)  
[10:49:36.877] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.877] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.877] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:36.877] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.877] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.877] |  :  .  |  :  .  |  :  .      ...)  
[10:49:36.877] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.877] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.877] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.877] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.877] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.877] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.877] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.882] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:36.882] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:36.882] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:36.883] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:36.883] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:36.883] |  :  .  |  :  .  |  List of future strategies:
[10:49:36.883] |  :  .  |  :  .  |  1. multicore:
[10:49:36.883] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:36.883] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:36.883] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:36.883] |  :  .  |  :  .  |  List of 1
[10:49:36.883] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.883] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.883] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.883] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.883] |  :  .  |  :  .  |      ...)  
[10:49:36.883] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.883] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.883] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:36.883] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.883] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.883] |  :  .  |  :  .  |      ...)  
[10:49:36.883] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.883] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.886] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:36.886] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:36.886] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.886] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.886] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.886] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:36.886] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.887] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.887] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.887] |  :  .  |  SequentialFuture started (and completed)
[10:49:36.887] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:36.887] |  :  Launching futures ... done
[10:49:36.887] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.887] |  Using SequentialFutureBackend ... done
[10:49:36.887] run() for Future (‘SequentialFuture’) ... done
[10:49:36.887] Created future:
[10:49:36.888] SequentialFuture:
[10:49:36.888] Label: ‘future_by-1’
[10:49:36.888] Expression:
[10:49:36.888] {
[10:49:36.888]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.888]     "# expression in do.call(), because function called uses '...'  "
[10:49:36.888]     "# as a global variable                                         "
[10:49:36.888]     do.call(function(...) {
[10:49:36.888]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.888]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.888]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.888]             on.exit(options(oopts), add = TRUE)
[10:49:36.888]         }
[10:49:36.888]         {
[10:49:36.888]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.888]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.888]                 ...future.FUN(...future.X_jj, ...)
[10:49:36.888]             })
[10:49:36.888]         }
[10:49:36.888]     }, args = future.call.arguments)
[10:49:36.888] }
[10:49:36.888] Lazy evaluation: FALSE
[10:49:36.888] Asynchronous evaluation: TRUE
[10:49:36.888] Local evaluation: TRUE
[10:49:36.888] Environment: R_GlobalEnv
[10:49:36.888] Capture standard output: TRUE
[10:49:36.888] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:36.888] Immediate condition classes: ‘immediateCondition’
[10:49:36.888] Globals: 5 objects totaling 998 bytes (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 511 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:36.888] Packages: <none>
[10:49:36.888] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:36.888] Resolved: TRUE
[10:49:36.888] Value: 1.27 KiB of class ‘list’
[10:49:36.888] Early signaling: FALSE
[10:49:36.888] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:36.888] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.888] Chunk #1 of 1 ... DONE
[10:49:36.888] Launching 1 futures (chunks) ... DONE
[10:49:36.889] Resolving 1 futures (chunks) ...
[10:49:36.889] value() on list ...
[10:49:36.889] |  recursive: 0
[10:49:36.889] |  length: 1
[10:49:36.889] |  
[10:49:36.889] |  Number of remaining objects: 1
[10:49:36.889] |  checking value #1 ...
[10:49:36.889] |  :  'obj' is SequentialFuture
[10:49:36.889] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:36.889] |  :  .  state: ‘finished’
[10:49:36.889] |  :  .  run: TRUE
[10:49:36.890] |  :  .  result: ‘FutureResult’
[10:49:36.890] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:36.890] |  :  SequentialFuture #1
[10:49:36.890] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.890] |  :  .  nx: 1
[10:49:36.890] |  :  .  relay: TRUE
[10:49:36.890] |  :  .  stdout: TRUE
[10:49:36.890] |  :  .  signal: TRUE
[10:49:36.890] |  :  .  resignal: FALSE
[10:49:36.890] |  :  .  force: TRUE
[10:49:36.890] |  :  .  relayed: [n=1] FALSE
[10:49:36.890] |  :  .  queued futures: [n=1] FALSE
[10:49:36.891] |  :  .  until=1
[10:49:36.891] |  :  .  relaying element #1
[10:49:36.891] |  :  .  relayed: [n=1] TRUE
[10:49:36.891] |  :  .  queued futures: [n=1] TRUE
[10:49:36.891] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.891] |  :  value(<SequentialFuture>, ...) ...
[10:49:36.891] |  :  .  value: <list>
[10:49:36.891] |  :  value(<SequentialFuture>, ...) ... done
[10:49:36.891] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.891] |  :  .  nx: 1
[10:49:36.892] |  :  .  relay: TRUE
[10:49:36.892] |  :  .  stdout: TRUE
[10:49:36.892] |  :  .  signal: TRUE
[10:49:36.892] |  :  .  resignal: FALSE
[10:49:36.892] |  :  .  force: TRUE
[10:49:36.892] |  :  .  relayed: [n=1] TRUE
[10:49:36.892] |  :  .  queued futures: [n=1] TRUE
[10:49:36.892] |  :  .  until=1
[10:49:36.892] |  :  .  relayed: [n=1] TRUE
[10:49:36.892] |  :  .  queued futures: [n=1] TRUE
[10:49:36.892] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.892] |  :  length: 0 (resolved future 1)
[10:49:36.893] |  checking value #1 ... done
[10:49:36.893] |  Relaying remaining futures ...
[10:49:36.893] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:36.893] |  :  .  nx: 1
[10:49:36.893] |  :  .  relay: TRUE
[10:49:36.893] |  :  .  stdout: TRUE
[10:49:36.893] |  :  .  signal: TRUE
[10:49:36.893] |  :  .  resignal: FALSE
[10:49:36.893] |  :  .  force: TRUE
[10:49:36.893] |  :  .  relayed: [n=1] TRUE
[10:49:36.893] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:36.893] |  :  .  relayed: [n=1] TRUE
[10:49:36.894] |  :  .  queued futures: [n=1] TRUE
[10:49:36.894] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:36.894] |  Relaying remaining futures ... done
[10:49:36.894] value() on list ... done
[10:49:36.894]  - Number of value chunks collected: 1
[10:49:36.894] Resolving 1 futures (chunks) ... DONE
[10:49:36.894] Reducing values from 1 chunks ...
[10:49:36.894]  - Number of values collected after concatenation: 6
[10:49:36.894]  - Number of values expected: 6
[10:49:36.894] Reducing values from 1 chunks ... DONE
[10:49:36.895] future_lapply() ... DONE
[10:49:36.895] future_by_internal() ... DONE
[10:49:36.896] future_by_internal() ...
[10:49:36.897] future_lapply() ...
[10:49:36.897] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.898] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.898] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.898] Number of chunks: 1
[10:49:36.898] getGlobalsAndPackagesXApply() ...
[10:49:36.898]  - future.globals: TRUE
[10:49:36.898] getGlobalsAndPackages() ...
[10:49:36.898] |  Searching for globals ...
[10:49:36.900] |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:36.900] |  Searching for globals ... DONE
[10:49:36.900] |  Resolving globals: FALSE
[10:49:36.900] |  Search for packages associated with the globals ...
[10:49:36.900] |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:36.901] |  :  Packages: [2] ‘base’, ‘stats’
[10:49:36.901] |  Search for packages associated with the globals ... DONE
[10:49:36.901] |  The total size of the 1 globals is 762 bytes (762 bytes)
[10:49:36.901] |  The total size of the 1 globals exported for future expression (‘FUN(singular.ok = FALSE)’) is 762 bytes There is one global: ‘FUN’ (762 bytes of class ‘function’)
[10:49:36.901] |  Packages after dropping 'base': [1] ‘stats’
[10:49:36.901] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:36.901] |  globals: [1] ‘FUN’
[10:49:36.902] |  packages: [1] ‘stats’
[10:49:36.902] getGlobalsAndPackages() ... done
[10:49:36.902]  - globals found/used: [n=1] ‘FUN’
[10:49:36.902]  - needed namespaces: [n=1] ‘stats’
[10:49:36.902] Finding globals ... DONE
[10:49:36.902]  - use_args: TRUE
[10:49:36.902]  - Getting '...' globals ...
[10:49:36.902] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:36.903] |  recursive: 0
[10:49:36.903] |  length: 1
[10:49:36.903] |  elements: ‘...’
[10:49:36.903] |  'obj' is DotDotDotList
[10:49:36.903] |  resolve(obj, ...) ...
[10:49:36.903] |  resolve(obj, ...) ... done
[10:49:36.903] |  length: 0 (resolved future 1)
[10:49:36.903] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:36.903]    - '...' content: [n=1] ‘singular.ok’
[10:49:36.903] List of 1
[10:49:36.903]  $ ...:List of 1
[10:49:36.903]   ..$ singular.ok: logi FALSE
[10:49:36.903]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.903]  - attr(*, "where")=List of 1
[10:49:36.903]   ..$ ...:<environment: 0x5564a5172aa0> 
[10:49:36.903]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.903]  - attr(*, "resolved")= logi TRUE
[10:49:36.903]  - attr(*, "total_size")= num NA
[10:49:36.906]  - Getting '...' globals ... DONE
[10:49:36.906] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:36.906] List of 2
[10:49:36.906]  $ ...future.FUN:function (x, ...)  
[10:49:36.906]  $ ...          :List of 1
[10:49:36.906]   ..$ singular.ok: logi FALSE
[10:49:36.906]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.906]  - attr(*, "where")=List of 2
[10:49:36.906]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:36.906]   ..$ ...          :<environment: 0x5564a5172aa0> 
[10:49:36.906]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.906]  - attr(*, "resolved")= logi FALSE
[10:49:36.906]  - attr(*, "total_size")= num 19977
[10:49:36.909] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:36.910] getGlobalsAndPackagesXApply() ... DONE
[10:49:36.910] Number of futures (= number of chunks): 1
[10:49:36.910] Launching 1 futures (chunks) ...
[10:49:36.910] Chunk #1 of 1 ...
[10:49:36.910]  - Finding globals in 'X' for chunk #1 ...
[10:49:36.911] getGlobalsAndPackages() ...
[10:49:36.911] |  Searching for globals ...
[10:49:36.911] |  :  globals found: [0] 
[10:49:36.912] |  Searching for globals ... DONE
[10:49:36.912] |  globals: [0] <none>
[10:49:36.912] |  packages: [0] <none>
[10:49:36.912] getGlobalsAndPackages() ... done
[10:49:36.912]    + additional globals found: [n=0] 
[10:49:36.912]    + additional namespaces needed: [n=0] 
[10:49:36.912]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:36.912]  - seeds: <none>
[10:49:36.912]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.912] getGlobalsAndPackages() ...
[10:49:36.912] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.913] |  Resolving globals: FALSE
[10:49:36.913] |  Tweak future expression to call with '...' arguments ...
[10:49:36.913] |  :  {
[10:49:36.913] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.913] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:36.913] |  :      "# as a global variable                                         "
[10:49:36.913] |  :      do.call(function(...) {
[10:49:36.913] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:36.913] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:36.913] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:36.913] |  :          "# anonymous function.                                          "
[10:49:36.913] |  :          "#                                                              "
[10:49:36.913] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:36.913] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:36.913] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:36.913] |  :          "# global environment, which is where globals are written.      "
[10:49:36.913] |  :          penv <- env <- environment(...future.FUN)
[10:49:36.913] |  :          repeat {
[10:49:36.913] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:36.913] |  :                  emptyenv())) 
[10:49:36.913] |  :                  break
[10:49:36.913] |  :              penv <- env
[10:49:36.913] |  :              env <- parent.env(env)
[10:49:36.913] |  :          }
[10:49:36.913] |  :          if (identical(penv, globalenv())) {
[10:49:36.913] |  :              environment(...future.FUN) <- environment()
[10:49:36.913] |  :          }
[10:49:36.913] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:36.913] |  :              !isNamespace(penv)) {
[10:49:36.913] |  :              parent.env(penv) <- environment()
[10:49:36.913] |  :          }
[10:49:36.913] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:36.913] |  :          {
[10:49:36.913] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.913] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.913] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.913] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:36.913] |  :              }
[10:49:36.913] |  :              {
[10:49:36.913] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.913] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.913] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:36.913] |  :                  })
[10:49:36.913] |  :              }
[10:49:36.913] |  :          }
[10:49:36.913] |  :      }, args = future.call.arguments)
[10:49:36.913] |  :  }
[10:49:36.913] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:36.913] |  Search for packages associated with the globals ...
[10:49:36.914] |  :  Packages associated with globals: [0] 
[10:49:36.914] |  :  Packages: [0] 
[10:49:36.914] |  Search for packages associated with the globals ... DONE
[10:49:36.914] |  Packages after dropping 'base': [0] 
[10:49:36.914] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.914] |  packages: [0] 
[10:49:36.914] getGlobalsAndPackages() ... done
[10:49:36.914] run() for Future (‘Future’) ...
[10:49:36.915] |  state: ‘created’
[10:49:36.915] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.915] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.915] |  Using SequentialFutureBackend ...
[10:49:36.915] |  :  Launching futures ...
[10:49:36.915] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:36.915] |  :  .  |  getFutureData() ...
[10:49:36.915] |  :  .  |  :  getFutureCore() ...
[10:49:36.915] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:36.915] |  :  .  |  :  getFutureCore() ... done
[10:49:36.916] |  :  .  |  :  getFutureCapture() ...
[10:49:36.916] |  :  .  |  :  getFutureCapture() ... done
[10:49:36.916] |  :  .  |  :  getFutureContext() ...
[10:49:36.916] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.916] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:36.916] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.916] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:36.916] |  :  .  |  :  getFutureContext() ... done
[10:49:36.916] |  :  .  |  getFutureData() ... done
[10:49:36.916] |  :  .  |  attachPackages() ...
[10:49:36.917] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:36.917] |  :  .  |  attachPackages() ... DONE
[10:49:36.917] |  :  .  |  attachPackages() ...
[10:49:36.917] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:36.917] |  :  .  |  attachPackages() ... DONE
[10:49:36.917] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.917] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.918] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.918] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.918] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.918] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:36.918] |  :  .  |  :  .  |  New stack:
[10:49:36.918] |  :  .  |  :  .  |  List of 1
[10:49:36.918] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.918] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.918] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.918] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.918] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.918] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.918] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.920] |  :  .  |  :  .  |  Old stack:
[10:49:36.920] |  :  .  |  :  .  |  List of 1
[10:49:36.920] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.920] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.920] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.920] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.920] |  :  .  |  :  .  |      ...)  
[10:49:36.920] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.920] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.920] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:36.920] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.920] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.920] |  :  .  |  :  .  |      ...)  
[10:49:36.920] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.920] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.923] |  :  .  |  :  .  |  Not identical
[10:49:36.923] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:36.923] |  :  .  |  :  .  |  :  List of 2
[10:49:36.923] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.923] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.923] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.923] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.923] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.923] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.923] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.923] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.923] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.923] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.923] |  :  .  |  :  .  |  :      ...)  
[10:49:36.923] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.923] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.923] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:36.923] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.923] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.923] |  :  .  |  :  .  |  :      ...)  
[10:49:36.923] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.929] |  :  .  |  :  .  |  :  Formals differ
[10:49:36.929] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:36.929] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:36.929] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:36.930] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:36.930] |  :  .  |  :  .  List of future strategies:
[10:49:36.930] |  :  .  |  :  .  1. sequential:
[10:49:36.930] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:36.930] |  :  .  |  :  .     - tweaked: FALSE
[10:49:36.930] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.930] |  :  .  |  :  .  List of 1
[10:49:36.930] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.930] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.930] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.930] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.930] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.930] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.930] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.932] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:36.932] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:36.933] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.933] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:36.933] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.933] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:36.933] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:36.933] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:36.933] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.933] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.933] |  :  .  |  assign_globals() ...
[10:49:36.934] |  :  .  |  List of 5
[10:49:36.934] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:36.934] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:36.934] |  :  .  |    ..$ singular.ok: logi FALSE
[10:49:36.934] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.934] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:36.934] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.934] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:36.934] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.934] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:36.934] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.934] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:36.934] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.934] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:36.934] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:36.934] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:36.934] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:36.934] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:36.934] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:36.934] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:36.934] |  :  .  |   - attr(*, "where")=List of 5
[10:49:36.934] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:36.934] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:36.934] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:36.934] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:36.934] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:36.934] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:36.934] |  :  .  |   - attr(*, "total_size")= num 19977
[10:49:36.934] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.934] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:36.942] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:36.942] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:36.943] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:36.943] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:36.943] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:36.943] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:36.943] |  :  .  |  assign_globals() ... done
[10:49:36.947] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.948] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.948] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:36.948] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:36.948] |  :  .  |  :  .  |  :  New stack:
[10:49:36.948] |  :  .  |  :  .  |  :  List of 1
[10:49:36.948] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.948] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.948] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.948] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.948] |  :  .  |  :  .  |  :      ...)  
[10:49:36.948] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.948] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.948] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:36.948] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.948] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.948] |  :  .  |  :  .  |  :      ...)  
[10:49:36.948] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.948] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.951] |  :  .  |  :  .  |  :  Old stack:
[10:49:36.951] |  :  .  |  :  .  |  :  List of 1
[10:49:36.951] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.951] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.951] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.951] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.951] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.951] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.951] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.953] |  :  .  |  :  .  |  :  Not identical
[10:49:36.953] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:36.953] |  :  .  |  :  .  |  :  .  List of 2
[10:49:36.953] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.953] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.953] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.953] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.953] |  :  .  |  :  .  |  :  .      ...)  
[10:49:36.953] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.953] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.953] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:36.953] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.953] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.953] |  :  .  |  :  .  |  :  .      ...)  
[10:49:36.953] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.953] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:36.953] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:36.953] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:36.953] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.953] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:36.953] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:36.957] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:36.957] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:36.958] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:36.958] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:36.958] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:36.958] |  :  .  |  :  .  |  List of future strategies:
[10:49:36.958] |  :  .  |  :  .  |  1. multicore:
[10:49:36.958] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:36.958] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:36.958] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:36.958] |  :  .  |  :  .  |  List of 1
[10:49:36.958] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:36.958] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:36.958] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:36.958] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.958] |  :  .  |  :  .  |      ...)  
[10:49:36.958] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.958] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.958] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:36.958] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:36.958] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:36.958] |  :  .  |  :  .  |      ...)  
[10:49:36.958] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:36.958] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:36.962] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:36.962] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:36.962] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.962] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.963] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.963] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:36.963] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:36.963] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.963] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:36.963] |  :  .  |  SequentialFuture started (and completed)
[10:49:36.963] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:36.963] |  :  Launching futures ... done
[10:49:36.963] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.964] |  Using SequentialFutureBackend ... done
[10:49:36.964] run() for Future (‘SequentialFuture’) ... done
[10:49:36.964] Created future:
[10:49:36.964] SequentialFuture:
[10:49:36.964] Label: ‘future_by-1’
[10:49:36.964] Expression:
[10:49:36.964] {
[10:49:36.964]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.964]     "# expression in do.call(), because function called uses '...'  "
[10:49:36.964]     "# as a global variable                                         "
[10:49:36.964]     do.call(function(...) {
[10:49:36.964]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:36.964]         "# without having an '...' argument. This means '...' is treated"
[10:49:36.964]         "# as a global variable. This may happen when FUN() is an       "
[10:49:36.964]         "# anonymous function.                                          "
[10:49:36.964]         "#                                                              "
[10:49:36.964]         "# If an anonymous function, we will make sure to restore the   "
[10:49:36.964]         "# function environment of FUN() to the calling environment.    "
[10:49:36.964]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:36.964]         "# global environment, which is where globals are written.      "
[10:49:36.964]         penv <- env <- environment(...future.FUN)
[10:49:36.964]         repeat {
[10:49:36.964]             if (identical(env, globalenv()) || identical(env, 
[10:49:36.964]                 emptyenv())) 
[10:49:36.964]                 break
[10:49:36.964]             penv <- env
[10:49:36.964]             env <- parent.env(env)
[10:49:36.964]         }
[10:49:36.964]         if (identical(penv, globalenv())) {
[10:49:36.964]             environment(...future.FUN) <- environment()
[10:49:36.964]         }
[10:49:36.964]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:36.964]             !isNamespace(penv)) {
[10:49:36.964]             parent.env(penv) <- environment()
[10:49:36.964]         }
[10:49:36.964]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:36.964]         {
[10:49:36.964]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.964]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.964]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.964]                 on.exit(options(oopts), add = TRUE)
[10:49:36.964]             }
[10:49:36.964]             {
[10:49:36.964]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.964]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.964]                   ...future.FUN(...future.X_jj, ...)
[10:49:36.964]                 })
[10:49:36.964]             }
[10:49:36.964]         }
[10:49:36.964]     }, args = future.call.arguments)
[10:49:36.964] }
[10:49:36.964] Lazy evaluation: FALSE
[10:49:36.964] Asynchronous evaluation: TRUE
[10:49:36.964] Local evaluation: TRUE
[10:49:36.964] Environment: R_GlobalEnv
[10:49:36.964] Capture standard output: TRUE
[10:49:36.964] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:36.964] Immediate condition classes: ‘immediateCondition’
[10:49:36.964] Globals: 5 objects totaling 2.93 KiB (function ‘...future.FUN’ of 762 bytes, DotDotDotList ‘future.call.arguments’ of 157 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:36.964] Packages: 1 packages (‘stats’)
[10:49:36.964] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:36.964] Resolved: TRUE
[10:49:36.964] Value: 14.12 KiB of class ‘list’
[10:49:36.964] Early signaling: FALSE
[10:49:36.964] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:36.964] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:36.965] Chunk #1 of 1 ... DONE
[10:49:36.965] Launching 1 futures (chunks) ... DONE
[10:49:36.965] Resolving 1 futures (chunks) ...
[10:49:36.965] value() on list ...
[10:49:36.965] |  recursive: 0
[10:49:36.966] |  length: 1
[10:49:36.966] |  
[10:49:36.966] |  Number of remaining objects: 1
[10:49:36.966] |  checking value #1 ...
[10:49:36.966] |  :  'obj' is SequentialFuture
[10:49:36.966] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:36.966] |  :  .  state: ‘finished’
[10:49:36.966] |  :  .  run: TRUE
[10:49:36.966] |  :  .  result: ‘FutureResult’
[10:49:36.966] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:36.966] |  :  SequentialFuture #1
[10:49:36.967] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.967] |  :  .  nx: 1
[10:49:36.967] |  :  .  relay: TRUE
[10:49:36.967] |  :  .  stdout: TRUE
[10:49:36.967] |  :  .  signal: TRUE
[10:49:36.967] |  :  .  resignal: FALSE
[10:49:36.967] |  :  .  force: TRUE
[10:49:36.967] |  :  .  relayed: [n=1] FALSE
[10:49:36.967] |  :  .  queued futures: [n=1] FALSE
[10:49:36.967] |  :  .  until=1
[10:49:36.967] |  :  .  relaying element #1
[10:49:36.968] |  :  .  relayed: [n=1] TRUE
[10:49:36.968] |  :  .  queued futures: [n=1] TRUE
[10:49:36.968] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.968] |  :  value(<SequentialFuture>, ...) ...
[10:49:36.968] |  :  .  value: <list>
[10:49:36.968] |  :  value(<SequentialFuture>, ...) ... done
[10:49:36.968] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:36.968] |  :  .  nx: 1
[10:49:36.968] |  :  .  relay: TRUE
[10:49:36.968] |  :  .  stdout: TRUE
[10:49:36.968] |  :  .  signal: TRUE
[10:49:36.969] |  :  .  resignal: FALSE
[10:49:36.969] |  :  .  force: TRUE
[10:49:36.969] |  :  .  relayed: [n=1] TRUE
[10:49:36.969] |  :  .  queued futures: [n=1] TRUE
[10:49:36.969] |  :  .  until=1
[10:49:36.969] |  :  .  relayed: [n=1] TRUE
[10:49:36.969] |  :  .  queued futures: [n=1] TRUE
[10:49:36.969] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:36.969] |  :  length: 0 (resolved future 1)
[10:49:36.969] |  checking value #1 ... done
[10:49:36.969] |  Relaying remaining futures ...
[10:49:36.970] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:36.970] |  :  .  nx: 1
[10:49:36.970] |  :  .  relay: TRUE
[10:49:36.970] |  :  .  stdout: TRUE
[10:49:36.970] |  :  .  signal: TRUE
[10:49:36.970] |  :  .  resignal: FALSE
[10:49:36.970] |  :  .  force: TRUE
[10:49:36.970] |  :  .  relayed: [n=1] TRUE
[10:49:36.970] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:36.970] |  :  .  relayed: [n=1] TRUE
[10:49:36.970] |  :  .  queued futures: [n=1] TRUE
[10:49:36.970] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:36.971] |  Relaying remaining futures ... done
[10:49:36.971] value() on list ... done
[10:49:36.971]  - Number of value chunks collected: 1
[10:49:36.971] Resolving 1 futures (chunks) ... DONE
[10:49:36.971] Reducing values from 1 chunks ...
[10:49:36.971]  - Number of values collected after concatenation: 3
[10:49:36.971]  - Number of values expected: 3
[10:49:36.971] Reducing values from 1 chunks ... DONE
[10:49:36.971] future_lapply() ... DONE
[10:49:36.971] future_by_internal() ... DONE
[10:49:36.975] future_by_internal() ...
[10:49:36.975] future_lapply() ...
[10:49:36.976] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.976] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.977] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.977] Number of chunks: 1
[10:49:36.977] getGlobalsAndPackagesXApply() ...
[10:49:36.977]  - future.globals: TRUE
[10:49:36.977] getGlobalsAndPackages() ...
[10:49:36.977] |  Searching for globals ...
[10:49:36.980] |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:36.980] |  Searching for globals ... DONE
[10:49:36.980] |  Resolving globals: FALSE
[10:49:36.980] |  Search for packages associated with the globals ...
[10:49:36.980] |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:36.981] |  :  Packages: [2] ‘base’, ‘stats’
[10:49:36.981] |  Search for packages associated with the globals ... DONE
[10:49:36.981] |  The total size of the 3 globals is 2.07 KiB (2118 bytes)
[10:49:36.981] |  The total size of the 3 globals exported for future expression (‘FUN()’) is 2.07 KiB There are three globals: ‘FUN’ (1.28 KiB of class ‘function’), ‘breaks’ (463 bytes of class ‘numeric’) and ‘wool’ (342 bytes of class ‘numeric’)
[10:49:36.982] |  Packages after dropping 'base': [1] ‘stats’
[10:49:36.982] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:36.982] |  globals: [3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:36.982] |  packages: [1] ‘stats’
[10:49:36.982] getGlobalsAndPackages() ... done
[10:49:36.982]  - globals found/used: [n=3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:36.982]  - needed namespaces: [n=1] ‘stats’
[10:49:36.982] Finding globals ... DONE
[10:49:36.982]  - use_args: TRUE
[10:49:36.983]  - Getting '...' globals ...
[10:49:36.983] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:36.983] |  recursive: 0
[10:49:36.983] |  length: 1
[10:49:36.983] |  elements: ‘...’
[10:49:36.983] |  'obj' is DotDotDotList
[10:49:36.983] |  resolve(obj, ...) ...
[10:49:36.983] |  resolve(obj, ...) ... done
[10:49:36.984] |  length: 0 (resolved future 1)
[10:49:36.984] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:36.984]    - '...' content: [n=0] 
[10:49:36.984] List of 1
[10:49:36.984]  $ ...: list()
[10:49:36.984]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.984]  - attr(*, "where")=List of 1
[10:49:36.984]   ..$ ...:<environment: 0x5564a5b9e910> 
[10:49:36.984]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.984]  - attr(*, "resolved")= logi TRUE
[10:49:36.984]  - attr(*, "total_size")= num NA
[10:49:36.986]  - Getting '...' globals ... DONE
[10:49:36.986] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’
[10:49:36.987] List of 4
[10:49:36.987]  $ ...future.FUN:function (x)  
[10:49:36.987]  $ breaks       : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:36.987]  $ wool         : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:36.987]  $ ...          : list()
[10:49:36.987]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:36.987]  - attr(*, "where")=List of 4
[10:49:36.987]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:36.987]   ..$ breaks       :<environment: R_EmptyEnv> 
[10:49:36.987]   ..$ wool         :<environment: R_EmptyEnv> 
[10:49:36.987]   ..$ ...          :<environment: 0x5564a5b9e910> 
[10:49:36.987]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:36.987]  - attr(*, "resolved")= logi FALSE
[10:49:36.987]  - attr(*, "total_size")= num 18867
[10:49:36.990] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:36.991] getGlobalsAndPackagesXApply() ... DONE
[10:49:36.991] Number of futures (= number of chunks): 1
[10:49:36.991] Launching 1 futures (chunks) ...
[10:49:36.991] Chunk #1 of 1 ...
[10:49:36.991]  - Finding globals in 'X' for chunk #1 ...
[10:49:36.991] getGlobalsAndPackages() ...
[10:49:36.991] |  Searching for globals ...
[10:49:36.992] |  :  globals found: [0] 
[10:49:36.992] |  Searching for globals ... DONE
[10:49:36.992] |  globals: [0] <none>
[10:49:36.992] |  packages: [0] <none>
[10:49:36.992] getGlobalsAndPackages() ... done
[10:49:36.992]    + additional globals found: [n=0] 
[10:49:36.992]    + additional namespaces needed: [n=0] 
[10:49:36.992]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:36.992]  - seeds: <none>
[10:49:36.992]  - All globals exported: [n=7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.993] getGlobalsAndPackages() ...
[10:49:36.993] |  globals passed as-is: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.993] |  Resolving globals: FALSE
[10:49:36.993] |  Tweak future expression to call with '...' arguments ...
[10:49:36.993] |  :  {
[10:49:36.993] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:36.993] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:36.993] |  :      "# as a global variable                                         "
[10:49:36.993] |  :      do.call(function(...) {
[10:49:36.993] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:36.993] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:36.993] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:36.993] |  :          "# anonymous function.                                          "
[10:49:36.993] |  :          "#                                                              "
[10:49:36.993] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:36.993] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:36.993] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:36.993] |  :          "# global environment, which is where globals are written.      "
[10:49:36.993] |  :          penv <- env <- environment(...future.FUN)
[10:49:36.993] |  :          repeat {
[10:49:36.993] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:36.993] |  :                  emptyenv())) 
[10:49:36.993] |  :                  break
[10:49:36.993] |  :              penv <- env
[10:49:36.993] |  :              env <- parent.env(env)
[10:49:36.993] |  :          }
[10:49:36.993] |  :          if (identical(penv, globalenv())) {
[10:49:36.993] |  :              environment(...future.FUN) <- environment()
[10:49:36.993] |  :          }
[10:49:36.993] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:36.993] |  :              !isNamespace(penv)) {
[10:49:36.993] |  :              parent.env(penv) <- environment()
[10:49:36.993] |  :          }
[10:49:36.993] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:36.993] |  :          {
[10:49:36.993] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:36.993] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:36.993] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:36.993] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:36.993] |  :              }
[10:49:36.993] |  :              {
[10:49:36.993] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:36.993] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:36.993] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:36.993] |  :                  })
[10:49:36.993] |  :              }
[10:49:36.993] |  :          }
[10:49:36.993] |  :      }, args = future.call.arguments)
[10:49:36.993] |  :  }
[10:49:36.993] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:36.994] |  Search for packages associated with the globals ...
[10:49:36.994] |  :  Packages associated with globals: [0] 
[10:49:36.994] |  :  Packages: [0] 
[10:49:36.994] |  Search for packages associated with the globals ... DONE
[10:49:36.994] |  Packages after dropping 'base': [0] 
[10:49:36.994] |  globals: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:36.994] |  packages: [0] 
[10:49:36.995] getGlobalsAndPackages() ... done
[10:49:36.995] run() for Future (‘Future’) ...
[10:49:36.995] |  state: ‘created’
[10:49:36.995] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.995] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.995] |  Using SequentialFutureBackend ...
[10:49:36.995] |  :  Launching futures ...
[10:49:36.995] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:36.996] |  :  .  |  getFutureData() ...
[10:49:36.996] |  :  .  |  :  getFutureCore() ...
[10:49:36.997] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:36.997] |  :  .  |  :  getFutureCore() ... done
[10:49:36.997] |  :  .  |  :  getFutureCapture() ...
[10:49:36.997] |  :  .  |  :  getFutureCapture() ... done
[10:49:36.997] |  :  .  |  :  getFutureContext() ...
[10:49:36.997] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.997] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:36.997] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.997] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:36.998] |  :  .  |  :  getFutureContext() ... done
[10:49:36.998] |  :  .  |  getFutureData() ... done
[10:49:36.998] |  :  .  |  attachPackages() ...
[10:49:36.998] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:36.998] |  :  .  |  attachPackages() ... DONE
[10:49:36.998] |  :  .  |  attachPackages() ...
[10:49:36.998] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:36.998] |  :  .  |  attachPackages() ... DONE
[10:49:36.999] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:36.999] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:36.999] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:36.999] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:36.999] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.000] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.000] |  :  .  |  :  .  |  New stack:
[10:49:37.000] |  :  .  |  :  .  |  List of 1
[10:49:37.000] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.000] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.000] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.000] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.000] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.000] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.000] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.002] |  :  .  |  :  .  |  Old stack:
[10:49:37.002] |  :  .  |  :  .  |  List of 1
[10:49:37.002] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.002] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.002] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.002] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.002] |  :  .  |  :  .  |      ...)  
[10:49:37.002] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.002] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.002] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.002] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.002] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.002] |  :  .  |  :  .  |      ...)  
[10:49:37.002] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.002] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.005] |  :  .  |  :  .  |  Not identical
[10:49:37.005] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.005] |  :  .  |  :  .  |  :  List of 2
[10:49:37.005] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.005] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.005] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.005] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.005] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.005] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.005] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.005] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.005] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.005] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.005] |  :  .  |  :  .  |  :      ...)  
[10:49:37.005] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.005] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.005] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.005] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.005] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.005] |  :  .  |  :  .  |  :      ...)  
[10:49:37.005] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.009] |  :  .  |  :  .  |  :  Formals differ
[10:49:37.009] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.009] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:37.010] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.010] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:37.010] |  :  .  |  :  .  List of future strategies:
[10:49:37.010] |  :  .  |  :  .  1. sequential:
[10:49:37.010] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.010] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.010] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.010] |  :  .  |  :  .  List of 1
[10:49:37.010] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.010] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.010] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.010] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.010] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.010] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.010] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.012] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.012] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.013] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.013] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.014] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.014] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:37.014] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.014] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:37.014] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.014] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.014] |  :  .  |  assign_globals() ...
[10:49:37.015] |  :  .  |  List of 7
[10:49:37.015] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:37.015] |  :  .  |   $ breaks                   : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:37.015] |  :  .  |   $ wool                     : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.015] |  :  .  |   $ future.call.arguments    : list()
[10:49:37.015] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.015] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.015] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.015] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.015] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.015] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.015] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.015] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.015] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.015] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:37.015] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.015] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.015] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.015] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:37.015] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.015] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.015] |  :  .  |   - attr(*, "where")=List of 7
[10:49:37.015] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.015] |  :  .  |    ..$ breaks                   :<environment: R_EmptyEnv> 
[10:49:37.015] |  :  .  |    ..$ wool                     :<environment: R_EmptyEnv> 
[10:49:37.015] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.015] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.015] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.015] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.015] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.015] |  :  .  |   - attr(*, "total_size")= num 18867
[10:49:37.015] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.015] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.024] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:37.024] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.024] |  :  .  |  - copied ‘breaks’ to environment
[10:49:37.025] |  :  .  |  - copied ‘wool’ to environment
[10:49:37.025] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.025] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.025] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.025] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.025] |  :  .  |  assign_globals() ... done
[10:49:37.028] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.028] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.029] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.029] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.029] |  :  .  |  :  .  |  :  New stack:
[10:49:37.029] |  :  .  |  :  .  |  :  List of 1
[10:49:37.029] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.029] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.029] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.029] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.029] |  :  .  |  :  .  |  :      ...)  
[10:49:37.029] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.029] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.029] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.029] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.029] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.029] |  :  .  |  :  .  |  :      ...)  
[10:49:37.029] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.029] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.033] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.033] |  :  .  |  :  .  |  :  List of 1
[10:49:37.033] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.033] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.033] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.033] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.033] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.033] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.033] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.035] |  :  .  |  :  .  |  :  Not identical
[10:49:37.035] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:37.035] |  :  .  |  :  .  |  :  .  List of 2
[10:49:37.035] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.035] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.035] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.035] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.035] |  :  .  |  :  .  |  :  .      ...)  
[10:49:37.035] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.035] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.035] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.035] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.035] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.035] |  :  .  |  :  .  |  :  .      ...)  
[10:49:37.035] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.035] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.035] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.035] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.035] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.035] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.035] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.039] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:37.039] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:37.039] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:37.040] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.040] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:37.040] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.040] |  :  .  |  :  .  |  1. multicore:
[10:49:37.040] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:37.040] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.040] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.040] |  :  .  |  :  .  |  List of 1
[10:49:37.040] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.040] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.040] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.040] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.040] |  :  .  |  :  .  |      ...)  
[10:49:37.040] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.040] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.040] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.040] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.040] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.040] |  :  .  |  :  .  |      ...)  
[10:49:37.040] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.040] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.043] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.043] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.043] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.043] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.043] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.043] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:37.044] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.044] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.044] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.044] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.044] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.044] |  :  Launching futures ... done
[10:49:37.044] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.044] |  Using SequentialFutureBackend ... done
[10:49:37.044] run() for Future (‘SequentialFuture’) ... done
[10:49:37.045] Created future:
[10:49:37.045] SequentialFuture:
[10:49:37.045] Label: ‘future_by-1’
[10:49:37.045] Expression:
[10:49:37.045] {
[10:49:37.045]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.045]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.045]     "# as a global variable                                         "
[10:49:37.045]     do.call(function(...) {
[10:49:37.045]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:37.045]         "# without having an '...' argument. This means '...' is treated"
[10:49:37.045]         "# as a global variable. This may happen when FUN() is an       "
[10:49:37.045]         "# anonymous function.                                          "
[10:49:37.045]         "#                                                              "
[10:49:37.045]         "# If an anonymous function, we will make sure to restore the   "
[10:49:37.045]         "# function environment of FUN() to the calling environment.    "
[10:49:37.045]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:37.045]         "# global environment, which is where globals are written.      "
[10:49:37.045]         penv <- env <- environment(...future.FUN)
[10:49:37.045]         repeat {
[10:49:37.045]             if (identical(env, globalenv()) || identical(env, 
[10:49:37.045]                 emptyenv())) 
[10:49:37.045]                 break
[10:49:37.045]             penv <- env
[10:49:37.045]             env <- parent.env(env)
[10:49:37.045]         }
[10:49:37.045]         if (identical(penv, globalenv())) {
[10:49:37.045]             environment(...future.FUN) <- environment()
[10:49:37.045]         }
[10:49:37.045]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:37.045]             !isNamespace(penv)) {
[10:49:37.045]             parent.env(penv) <- environment()
[10:49:37.045]         }
[10:49:37.045]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:37.045]         {
[10:49:37.045]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.045]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.045]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.045]                 on.exit(options(oopts), add = TRUE)
[10:49:37.045]             }
[10:49:37.045]             {
[10:49:37.045]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.045]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.045]                   ...future.FUN(...future.X_jj, ...)
[10:49:37.045]                 })
[10:49:37.045]             }
[10:49:37.045]         }
[10:49:37.045]     }, args = future.call.arguments)
[10:49:37.045] }
[10:49:37.045] Lazy evaluation: FALSE
[10:49:37.045] Asynchronous evaluation: TRUE
[10:49:37.045] Local evaluation: TRUE
[10:49:37.045] Environment: 0x5564a5aea560
[10:49:37.045] Capture standard output: TRUE
[10:49:37.045] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.045] Immediate condition classes: ‘immediateCondition’
[10:49:37.045] Globals: 7 objects totaling 4.20 KiB (function ‘...future.FUN’ of 1.28 KiB, numeric ‘breaks’ of 463 bytes, factor ‘wool’ of 342 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, ...)
[10:49:37.045] Packages: 1 packages (‘stats’)
[10:49:37.045] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.045] Resolved: TRUE
[10:49:37.045] Value: 13.80 KiB of class ‘list’
[10:49:37.045] Early signaling: FALSE
[10:49:37.045] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.045] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.046] Chunk #1 of 1 ... DONE
[10:49:37.046] Launching 1 futures (chunks) ... DONE
[10:49:37.046] Resolving 1 futures (chunks) ...
[10:49:37.046] value() on list ...
[10:49:37.046] |  recursive: 0
[10:49:37.046] |  length: 1
[10:49:37.046] |  
[10:49:37.046] |  Number of remaining objects: 1
[10:49:37.047] |  checking value #1 ...
[10:49:37.047] |  :  'obj' is SequentialFuture
[10:49:37.047] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.047] |  :  .  state: ‘finished’
[10:49:37.048] |  :  .  run: TRUE
[10:49:37.048] |  :  .  result: ‘FutureResult’
[10:49:37.048] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.048] |  :  SequentialFuture #1
[10:49:37.048] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.048] |  :  .  nx: 1
[10:49:37.048] |  :  .  relay: TRUE
[10:49:37.049] |  :  .  stdout: TRUE
[10:49:37.049] |  :  .  signal: TRUE
[10:49:37.049] |  :  .  resignal: FALSE
[10:49:37.049] |  :  .  force: TRUE
[10:49:37.049] |  :  .  relayed: [n=1] FALSE
[10:49:37.049] |  :  .  queued futures: [n=1] FALSE
[10:49:37.049] |  :  .  until=1
[10:49:37.049] |  :  .  relaying element #1
[10:49:37.049] |  :  .  relayed: [n=1] TRUE
[10:49:37.049] |  :  .  queued futures: [n=1] TRUE
[10:49:37.050] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.050] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.050] |  :  .  value: <list>
[10:49:37.050] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.050] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.050] |  :  .  nx: 1
[10:49:37.050] |  :  .  relay: TRUE
[10:49:37.050] |  :  .  stdout: TRUE
[10:49:37.050] |  :  .  signal: TRUE
[10:49:37.050] |  :  .  resignal: FALSE
[10:49:37.050] |  :  .  force: TRUE
[10:49:37.051] |  :  .  relayed: [n=1] TRUE
[10:49:37.051] |  :  .  queued futures: [n=1] TRUE
[10:49:37.051] |  :  .  until=1
[10:49:37.051] |  :  .  relayed: [n=1] TRUE
[10:49:37.051] |  :  .  queued futures: [n=1] TRUE
[10:49:37.051] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.051] |  :  length: 0 (resolved future 1)
[10:49:37.051] |  checking value #1 ... done
[10:49:37.051] |  Relaying remaining futures ...
[10:49:37.051] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.052] |  :  .  nx: 1
[10:49:37.052] |  :  .  relay: TRUE
[10:49:37.052] |  :  .  stdout: TRUE
[10:49:37.052] |  :  .  signal: TRUE
[10:49:37.052] |  :  .  resignal: FALSE
[10:49:37.052] |  :  .  force: TRUE
[10:49:37.052] |  :  .  relayed: [n=1] TRUE
[10:49:37.052] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.052] |  :  .  relayed: [n=1] TRUE
[10:49:37.052] |  :  .  queued futures: [n=1] TRUE
[10:49:37.052] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.052] |  Relaying remaining futures ... done
[10:49:37.053] value() on list ... done
[10:49:37.053]  - Number of value chunks collected: 1
[10:49:37.053] Resolving 1 futures (chunks) ... DONE
[10:49:37.053] Reducing values from 1 chunks ...
[10:49:37.053]  - Number of values collected after concatenation: 3
[10:49:37.053]  - Number of values expected: 3
[10:49:37.053] Reducing values from 1 chunks ... DONE
[10:49:37.053] future_lapply() ... DONE
[10:49:37.053] future_by_internal() ... DONE
[10:49:37.054] future_by_internal() ...
[10:49:37.054] future_lapply() ...
[10:49:37.054] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.055] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.055] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.055] Number of chunks: 1
[10:49:37.055] getGlobalsAndPackagesXApply() ...
[10:49:37.055]  - future.globals: TRUE
[10:49:37.055] getGlobalsAndPackages() ...
[10:49:37.055] |  Searching for globals ...
[10:49:37.056] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:37.056] |  Searching for globals ... DONE
[10:49:37.057] |  Resolving globals: FALSE
[10:49:37.057] |  Search for packages associated with the globals ...
[10:49:37.057] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.057] |  :  Packages: [1] ‘base’
[10:49:37.057] |  Search for packages associated with the globals ... DONE
[10:49:37.057] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:37.058] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:37.058] |  Packages after dropping 'base': [0] 
[10:49:37.058] |  globals: [1] ‘FUN’
[10:49:37.058] |  packages: [0] 
[10:49:37.058] getGlobalsAndPackages() ... done
[10:49:37.058]  - globals found/used: [n=1] ‘FUN’
[10:49:37.058]  - needed namespaces: [n=0] 
[10:49:37.058] Finding globals ... DONE
[10:49:37.058]  - use_args: TRUE
[10:49:37.058]  - Getting '...' globals ...
[10:49:37.059] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.059] |  recursive: 0
[10:49:37.059] |  length: 1
[10:49:37.059] |  elements: ‘...’
[10:49:37.059] |  'obj' is DotDotDotList
[10:49:37.059] |  resolve(obj, ...) ...
[10:49:37.059] |  resolve(obj, ...) ... done
[10:49:37.059] |  length: 0 (resolved future 1)
[10:49:37.060] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.060]    - '...' content: [n=0] 
[10:49:37.060] List of 1
[10:49:37.060]  $ ...: list()
[10:49:37.060]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.060]  - attr(*, "where")=List of 1
[10:49:37.060]   ..$ ...:<environment: 0x5564a3796db8> 
[10:49:37.060]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.060]  - attr(*, "resolved")= logi TRUE
[10:49:37.060]  - attr(*, "total_size")= num NA
[10:49:37.062]  - Getting '...' globals ... DONE
[10:49:37.062] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:37.063] List of 2
[10:49:37.063]  $ ...future.FUN:function (object, ...)  
[10:49:37.063]  $ ...          : list()
[10:49:37.063]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.063]  - attr(*, "where")=List of 2
[10:49:37.063]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.063]   ..$ ...          :<environment: 0x5564a3796db8> 
[10:49:37.063]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.063]  - attr(*, "resolved")= logi FALSE
[10:49:37.063]  - attr(*, "total_size")= num 19278
[10:49:37.066] Packages to be attached in all futures: [n=0] 
[10:49:37.066] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.067] Number of futures (= number of chunks): 1
[10:49:37.067] Launching 1 futures (chunks) ...
[10:49:37.067] Chunk #1 of 1 ...
[10:49:37.067]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.067] getGlobalsAndPackages() ...
[10:49:37.067] |  Searching for globals ...
[10:49:37.068] |  :  globals found: [0] 
[10:49:37.068] |  Searching for globals ... DONE
[10:49:37.068] |  globals: [0] <none>
[10:49:37.068] |  packages: [0] <none>
[10:49:37.068] getGlobalsAndPackages() ... done
[10:49:37.068]    + additional globals found: [n=0] 
[10:49:37.068]    + additional namespaces needed: [n=0] 
[10:49:37.068]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.069]  - seeds: <none>
[10:49:37.069]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.069] getGlobalsAndPackages() ...
[10:49:37.069] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.069] |  Resolving globals: FALSE
[10:49:37.069] |  Tweak future expression to call with '...' arguments ...
[10:49:37.069] |  :  {
[10:49:37.069] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.069] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.069] |  :      "# as a global variable                                         "
[10:49:37.069] |  :      do.call(function(...) {
[10:49:37.069] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.069] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.069] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.069] |  :              on.exit(options(oopts), add = TRUE)
[10:49:37.069] |  :          }
[10:49:37.069] |  :          {
[10:49:37.069] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.069] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.069] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:37.069] |  :              })
[10:49:37.069] |  :          }
[10:49:37.069] |  :      }, args = future.call.arguments)
[10:49:37.069] |  :  }
[10:49:37.069] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.070] |  Search for packages associated with the globals ...
[10:49:37.070] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.070] |  :  Packages: [1] ‘base’
[10:49:37.070] |  Search for packages associated with the globals ... DONE
[10:49:37.070] |  Packages after dropping 'base': [0] 
[10:49:37.070] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.070] |  packages: [0] 
[10:49:37.071] getGlobalsAndPackages() ... done
[10:49:37.071] run() for Future (‘Future’) ...
[10:49:37.071] |  state: ‘created’
[10:49:37.071] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.071] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.071] |  Using SequentialFutureBackend ...
[10:49:37.071] |  :  Launching futures ...
[10:49:37.071] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.072] |  :  .  |  getFutureData() ...
[10:49:37.072] |  :  .  |  :  getFutureCore() ...
[10:49:37.072] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:37.072] |  :  .  |  :  getFutureCore() ... done
[10:49:37.072] |  :  .  |  :  getFutureCapture() ...
[10:49:37.072] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.072] |  :  .  |  :  getFutureContext() ...
[10:49:37.072] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.072] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.072] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.072] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.073] |  :  .  |  :  getFutureContext() ... done
[10:49:37.073] |  :  .  |  getFutureData() ... done
[10:49:37.073] |  :  .  |  attachPackages() ...
[10:49:37.073] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.073] |  :  .  |  attachPackages() ... DONE
[10:49:37.073] |  :  .  |  attachPackages() ...
[10:49:37.073] |  :  .  |  :  packages: [n=0] 
[10:49:37.073] |  :  .  |  attachPackages() ... DONE
[10:49:37.074] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.074] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.074] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.074] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.074] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.074] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.075] |  :  .  |  :  .  |  New stack:
[10:49:37.075] |  :  .  |  :  .  |  List of 1
[10:49:37.075] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.075] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.075] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.075] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.075] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.075] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.075] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.077] |  :  .  |  :  .  |  Old stack:
[10:49:37.077] |  :  .  |  :  .  |  List of 1
[10:49:37.077] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.077] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.077] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.077] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.077] |  :  .  |  :  .  |      ...)  
[10:49:37.077] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.077] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.077] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.077] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.077] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.077] |  :  .  |  :  .  |      ...)  
[10:49:37.077] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.077] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.080] |  :  .  |  :  .  |  Not identical
[10:49:37.080] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.080] |  :  .  |  :  .  |  :  List of 2
[10:49:37.080] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.080] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.080] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.080] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.080] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.080] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.080] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.080] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.080] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.080] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.080] |  :  .  |  :  .  |  :      ...)  
[10:49:37.080] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.080] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.080] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.080] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.080] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.080] |  :  .  |  :  .  |  :      ...)  
[10:49:37.080] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.085] |  :  .  |  :  .  |  :  Formals differ
[10:49:37.085] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.085] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:37.086] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.086] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:37.086] |  :  .  |  :  .  List of future strategies:
[10:49:37.086] |  :  .  |  :  .  1. sequential:
[10:49:37.086] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.086] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.086] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.086] |  :  .  |  :  .  List of 1
[10:49:37.086] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.086] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.086] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.086] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.086] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.086] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.086] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.088] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.089] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.089] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.089] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.089] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.089] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:37.089] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.089] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:37.089] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.090] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.090] |  :  .  |  assign_globals() ...
[10:49:37.090] |  :  .  |  List of 5
[10:49:37.090] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:37.090] |  :  .  |   $ future.call.arguments    : list()
[10:49:37.090] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.090] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.090] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.090] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.090] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.090] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.090] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.090] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.090] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.090] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:37.090] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.090] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.090] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.090] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:37.090] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.090] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.090] |  :  .  |   - attr(*, "where")=List of 5
[10:49:37.090] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.090] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.090] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.090] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.090] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.090] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.090] |  :  .  |   - attr(*, "total_size")= num 19278
[10:49:37.090] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.090] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.098] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.098] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.098] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.099] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.099] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.099] |  :  .  |  assign_globals() ... done
[10:49:37.102] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.103] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.103] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.103] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.103] |  :  .  |  :  .  |  :  New stack:
[10:49:37.103] |  :  .  |  :  .  |  :  List of 1
[10:49:37.103] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.103] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.103] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.103] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.103] |  :  .  |  :  .  |  :      ...)  
[10:49:37.103] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.103] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.103] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.103] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.103] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.103] |  :  .  |  :  .  |  :      ...)  
[10:49:37.103] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.103] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.106] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.106] |  :  .  |  :  .  |  :  List of 1
[10:49:37.106] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.106] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.106] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.106] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.106] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.106] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.106] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.108] |  :  .  |  :  .  |  :  Not identical
[10:49:37.108] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:37.108] |  :  .  |  :  .  |  :  .  List of 2
[10:49:37.108] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.108] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.108] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.108] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.108] |  :  .  |  :  .  |  :  .      ...)  
[10:49:37.108] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.108] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.108] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.108] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.108] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.108] |  :  .  |  :  .  |  :  .      ...)  
[10:49:37.108] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.108] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.108] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.108] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.108] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.108] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.108] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.112] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:37.113] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:37.113] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:37.113] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.113] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:37.113] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.113] |  :  .  |  :  .  |  1. multicore:
[10:49:37.113] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:37.113] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.113] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.113] |  :  .  |  :  .  |  List of 1
[10:49:37.113] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.113] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.113] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.113] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.113] |  :  .  |  :  .  |      ...)  
[10:49:37.113] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.113] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.113] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.113] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.113] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.113] |  :  .  |  :  .  |      ...)  
[10:49:37.113] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.113] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.117] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.117] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.117] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.117] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.117] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.118] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:37.118] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.118] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.118] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.118] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.118] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.118] |  :  Launching futures ... done
[10:49:37.118] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.118] |  Using SequentialFutureBackend ... done
[10:49:37.119] run() for Future (‘SequentialFuture’) ... done
[10:49:37.119] Created future:
[10:49:37.119] SequentialFuture:
[10:49:37.119] Label: ‘future_by-1’
[10:49:37.119] Expression:
[10:49:37.119] {
[10:49:37.119]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.119]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.119]     "# as a global variable                                         "
[10:49:37.119]     do.call(function(...) {
[10:49:37.119]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.119]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.119]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.119]             on.exit(options(oopts), add = TRUE)
[10:49:37.119]         }
[10:49:37.119]         {
[10:49:37.119]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.119]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.119]                 ...future.FUN(...future.X_jj, ...)
[10:49:37.119]             })
[10:49:37.119]         }
[10:49:37.119]     }, args = future.call.arguments)
[10:49:37.119] }
[10:49:37.119] Lazy evaluation: FALSE
[10:49:37.119] Asynchronous evaluation: TRUE
[10:49:37.119] Local evaluation: TRUE
[10:49:37.119] Environment: 0x5564a393bcd0
[10:49:37.119] Capture standard output: TRUE
[10:49:37.119] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.119] Immediate condition classes: ‘immediateCondition’
[10:49:37.119] Globals: 5 objects totaling 2.41 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:37.119] Packages: <none>
[10:49:37.119] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.119] Resolved: TRUE
[10:49:37.119] Value: 1.39 KiB of class ‘list’
[10:49:37.119] Early signaling: FALSE
[10:49:37.119] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.119] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.120] Chunk #1 of 1 ... DONE
[10:49:37.120] Launching 1 futures (chunks) ... DONE
[10:49:37.120] Resolving 1 futures (chunks) ...
[10:49:37.120] value() on list ...
[10:49:37.120] |  recursive: 0
[10:49:37.120] |  length: 1
[10:49:37.120] |  
[10:49:37.120] |  Number of remaining objects: 1
[10:49:37.120] |  checking value #1 ...
[10:49:37.120] |  :  'obj' is SequentialFuture
[10:49:37.121] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.121] |  :  .  state: ‘finished’
[10:49:37.121] |  :  .  run: TRUE
[10:49:37.121] |  :  .  result: ‘FutureResult’
[10:49:37.121] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.121] |  :  SequentialFuture #1
[10:49:37.121] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.121] |  :  .  nx: 1
[10:49:37.121] |  :  .  relay: TRUE
[10:49:37.121] |  :  .  stdout: TRUE
[10:49:37.121] |  :  .  signal: TRUE
[10:49:37.122] |  :  .  resignal: FALSE
[10:49:37.122] |  :  .  force: TRUE
[10:49:37.122] |  :  .  relayed: [n=1] FALSE
[10:49:37.122] |  :  .  queued futures: [n=1] FALSE
[10:49:37.122] |  :  .  until=1
[10:49:37.122] |  :  .  relaying element #1
[10:49:37.122] |  :  .  relayed: [n=1] TRUE
[10:49:37.122] |  :  .  queued futures: [n=1] TRUE
[10:49:37.122] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.122] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.123] |  :  .  value: <list>
[10:49:37.123] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.123] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.123] |  :  .  nx: 1
[10:49:37.123] |  :  .  relay: TRUE
[10:49:37.123] |  :  .  stdout: TRUE
[10:49:37.123] |  :  .  signal: TRUE
[10:49:37.123] |  :  .  resignal: FALSE
[10:49:37.123] |  :  .  force: TRUE
[10:49:37.123] |  :  .  relayed: [n=1] TRUE
[10:49:37.123] |  :  .  queued futures: [n=1] TRUE
[10:49:37.123] |  :  .  until=1
[10:49:37.124] |  :  .  relayed: [n=1] TRUE
[10:49:37.124] |  :  .  queued futures: [n=1] TRUE
[10:49:37.124] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.124] |  :  length: 0 (resolved future 1)
[10:49:37.124] |  checking value #1 ... done
[10:49:37.124] |  Relaying remaining futures ...
[10:49:37.124] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.124] |  :  .  nx: 1
[10:49:37.124] |  :  .  relay: TRUE
[10:49:37.124] |  :  .  stdout: TRUE
[10:49:37.124] |  :  .  signal: TRUE
[10:49:37.125] |  :  .  resignal: FALSE
[10:49:37.125] |  :  .  force: TRUE
[10:49:37.125] |  :  .  relayed: [n=1] TRUE
[10:49:37.125] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.125] |  :  .  relayed: [n=1] TRUE
[10:49:37.125] |  :  .  queued futures: [n=1] TRUE
[10:49:37.125] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.125] |  Relaying remaining futures ... done
[10:49:37.125] value() on list ... done
[10:49:37.125]  - Number of value chunks collected: 1
[10:49:37.125] Resolving 1 futures (chunks) ... DONE
[10:49:37.125] Reducing values from 1 chunks ...
[10:49:37.126]  - Number of values collected after concatenation: 3
[10:49:37.126]  - Number of values expected: 3
[10:49:37.126] Reducing values from 1 chunks ... DONE
[10:49:37.126] future_lapply() ... DONE
[10:49:37.126] future_by_internal() ... DONE
[10:49:37.127] future_by_internal() ...
Warning in future_by_match_FUN(FUN) :
  Specifying the function 'FUN' for future_by() as a character string is deprecated in future.apply (>= 1.10.0) [2022-11-04], because base::by() does not support it. Instead, specify it as a function, e.g. FUN = sqrt and FUN = `[[`. It is deprecated.
[10:49:37.127] future_lapply() ...
[10:49:37.128] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.128] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.128] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.128] Number of chunks: 1
[10:49:37.128] getGlobalsAndPackagesXApply() ...
[10:49:37.128]  - future.globals: TRUE
[10:49:37.128] getGlobalsAndPackages() ...
[10:49:37.128] |  Searching for globals ...
[10:49:37.129] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:37.129] |  Searching for globals ... DONE
[10:49:37.130] |  Resolving globals: FALSE
[10:49:37.130] |  Search for packages associated with the globals ...
[10:49:37.130] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.130] |  :  Packages: [1] ‘base’
[10:49:37.130] |  Search for packages associated with the globals ... DONE
[10:49:37.130] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:37.131] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:37.131] |  Packages after dropping 'base': [0] 
[10:49:37.131] |  globals: [1] ‘FUN’
[10:49:37.131] |  packages: [0] 
[10:49:37.131] getGlobalsAndPackages() ... done
[10:49:37.131]  - globals found/used: [n=1] ‘FUN’
[10:49:37.131]  - needed namespaces: [n=0] 
[10:49:37.131] Finding globals ... DONE
[10:49:37.131]  - use_args: TRUE
[10:49:37.131]  - Getting '...' globals ...
[10:49:37.132] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.132] |  recursive: 0
[10:49:37.132] |  length: 1
[10:49:37.132] |  elements: ‘...’
[10:49:37.132] |  'obj' is DotDotDotList
[10:49:37.132] |  resolve(obj, ...) ...
[10:49:37.133] |  resolve(obj, ...) ... done
[10:49:37.133] |  length: 0 (resolved future 1)
[10:49:37.133] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.133]    - '...' content: [n=0] 
[10:49:37.134] List of 1
[10:49:37.134]  $ ...: list()
[10:49:37.134]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.134]  - attr(*, "where")=List of 1
[10:49:37.134]   ..$ ...:<environment: 0x5564a5761c98> 
[10:49:37.134]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.134]  - attr(*, "resolved")= logi TRUE
[10:49:37.134]  - attr(*, "total_size")= num NA
[10:49:37.136]  - Getting '...' globals ... DONE
[10:49:37.136] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:37.136] List of 2
[10:49:37.136]  $ ...future.FUN:function (object, ...)  
[10:49:37.136]  $ ...          : list()
[10:49:37.136]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.136]  - attr(*, "where")=List of 2
[10:49:37.136]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.136]   ..$ ...          :<environment: 0x5564a5761c98> 
[10:49:37.136]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.136]  - attr(*, "resolved")= logi FALSE
[10:49:37.136]  - attr(*, "total_size")= num 18647
[10:49:37.139] Packages to be attached in all futures: [n=0] 
[10:49:37.139] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.139] Number of futures (= number of chunks): 1
[10:49:37.139] Launching 1 futures (chunks) ...
[10:49:37.139] Chunk #1 of 1 ...
[10:49:37.140]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.140] getGlobalsAndPackages() ...
[10:49:37.140] |  Searching for globals ...
[10:49:37.140] |  :  globals found: [0] 
[10:49:37.140] |  Searching for globals ... DONE
[10:49:37.140] |  globals: [0] <none>
[10:49:37.140] |  packages: [0] <none>
[10:49:37.141] getGlobalsAndPackages() ... done
[10:49:37.141]    + additional globals found: [n=0] 
[10:49:37.141]    + additional namespaces needed: [n=0] 
[10:49:37.141]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.141]  - seeds: <none>
[10:49:37.141]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.141] getGlobalsAndPackages() ...
[10:49:37.141] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.141] |  Resolving globals: FALSE
[10:49:37.141] |  Tweak future expression to call with '...' arguments ...
[10:49:37.141] |  :  {
[10:49:37.141] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.141] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.141] |  :      "# as a global variable                                         "
[10:49:37.141] |  :      do.call(function(...) {
[10:49:37.141] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.141] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.141] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.141] |  :              on.exit(options(oopts), add = TRUE)
[10:49:37.141] |  :          }
[10:49:37.141] |  :          {
[10:49:37.141] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.141] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.141] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:37.141] |  :              })
[10:49:37.141] |  :          }
[10:49:37.141] |  :      }, args = future.call.arguments)
[10:49:37.141] |  :  }
[10:49:37.142] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.142] |  Search for packages associated with the globals ...
[10:49:37.142] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.142] |  :  Packages: [1] ‘base’
[10:49:37.142] |  Search for packages associated with the globals ... DONE
[10:49:37.143] |  Packages after dropping 'base': [0] 
[10:49:37.143] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.143] |  packages: [0] 
[10:49:37.143] getGlobalsAndPackages() ... done
[10:49:37.143] run() for Future (‘Future’) ...
[10:49:37.143] |  state: ‘created’
[10:49:37.143] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.143] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.143] |  Using SequentialFutureBackend ...
[10:49:37.143] |  :  Launching futures ...
[10:49:37.144] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.144] |  :  .  |  getFutureData() ...
[10:49:37.144] |  :  .  |  :  getFutureCore() ...
[10:49:37.144] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:37.144] |  :  .  |  :  getFutureCore() ... done
[10:49:37.144] |  :  .  |  :  getFutureCapture() ...
[10:49:37.144] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.144] |  :  .  |  :  getFutureContext() ...
[10:49:37.144] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.144] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.145] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.145] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.145] |  :  .  |  :  getFutureContext() ... done
[10:49:37.145] |  :  .  |  getFutureData() ... done
[10:49:37.145] |  :  .  |  attachPackages() ...
[10:49:37.145] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.145] |  :  .  |  attachPackages() ... DONE
[10:49:37.145] |  :  .  |  attachPackages() ...
[10:49:37.145] |  :  .  |  :  packages: [n=0] 
[10:49:37.146] |  :  .  |  attachPackages() ... DONE
[10:49:37.146] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.146] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.146] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.146] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.146] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.147] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.147] |  :  .  |  :  .  |  New stack:
[10:49:37.147] |  :  .  |  :  .  |  List of 1
[10:49:37.147] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.147] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.147] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.147] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.147] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.147] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.147] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.149] |  :  .  |  :  .  |  Old stack:
[10:49:37.149] |  :  .  |  :  .  |  List of 1
[10:49:37.149] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.149] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.149] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.149] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.149] |  :  .  |  :  .  |      ...)  
[10:49:37.149] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.149] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.149] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.149] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.149] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.149] |  :  .  |  :  .  |      ...)  
[10:49:37.149] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.149] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.153] |  :  .  |  :  .  |  Not identical
[10:49:37.153] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.153] |  :  .  |  :  .  |  :  List of 2
[10:49:37.153] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.153] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.153] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.153] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.153] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.153] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.153] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.153] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.153] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.153] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.153] |  :  .  |  :  .  |  :      ...)  
[10:49:37.153] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.153] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.153] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.153] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.153] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.153] |  :  .  |  :  .  |  :      ...)  
[10:49:37.153] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.158] |  :  .  |  :  .  |  :  Formals differ
[10:49:37.158] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.158] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:37.158] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.158] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:37.158] |  :  .  |  :  .  List of future strategies:
[10:49:37.158] |  :  .  |  :  .  1. sequential:
[10:49:37.158] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.158] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.158] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.159] |  :  .  |  :  .  List of 1
[10:49:37.159] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.159] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.159] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.159] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.159] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.159] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.159] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.161] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.161] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.161] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.161] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.161] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.161] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:37.162] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.162] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:37.162] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.162] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.162] |  :  .  |  assign_globals() ...
[10:49:37.162] |  :  .  |  List of 5
[10:49:37.162] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:37.162] |  :  .  |   $ future.call.arguments    : list()
[10:49:37.162] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.162] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.162] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.162] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.162] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.162] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.162] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.162] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.162] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.162] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:37.162] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.162] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.162] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.162] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:37.162] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.162] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.162] |  :  .  |   - attr(*, "where")=List of 5
[10:49:37.162] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.162] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.162] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.162] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.162] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.162] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.162] |  :  .  |   - attr(*, "total_size")= num 18647
[10:49:37.162] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.162] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.172] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.172] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.172] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.172] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.172] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.172] |  :  .  |  assign_globals() ... done
[10:49:37.175] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.175] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.176] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.176] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.176] |  :  .  |  :  .  |  :  New stack:
[10:49:37.176] |  :  .  |  :  .  |  :  List of 1
[10:49:37.176] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.176] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.176] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.176] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.176] |  :  .  |  :  .  |  :      ...)  
[10:49:37.176] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.176] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.176] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.176] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.176] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.176] |  :  .  |  :  .  |  :      ...)  
[10:49:37.176] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.176] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.179] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.179] |  :  .  |  :  .  |  :  List of 1
[10:49:37.179] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.179] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.179] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.179] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.179] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.179] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.179] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.181] |  :  .  |  :  .  |  :  Not identical
[10:49:37.181] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:37.181] |  :  .  |  :  .  |  :  .  List of 2
[10:49:37.181] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.181] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.181] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.181] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.181] |  :  .  |  :  .  |  :  .      ...)  
[10:49:37.181] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.181] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.181] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.181] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.181] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.181] |  :  .  |  :  .  |  :  .      ...)  
[10:49:37.181] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.181] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.181] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.181] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.181] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.181] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.181] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.187] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:37.187] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:37.187] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:37.187] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.187] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:37.187] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.187] |  :  .  |  :  .  |  1. multicore:
[10:49:37.187] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:37.187] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.187] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.187] |  :  .  |  :  .  |  List of 1
[10:49:37.187] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.187] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.187] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.187] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.187] |  :  .  |  :  .  |      ...)  
[10:49:37.187] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.187] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.187] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.187] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.187] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.187] |  :  .  |  :  .  |      ...)  
[10:49:37.187] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.187] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.190] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.190] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.191] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.191] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.191] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.191] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:37.191] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.191] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.191] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.191] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.192] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.192] |  :  Launching futures ... done
[10:49:37.192] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.192] |  Using SequentialFutureBackend ... done
[10:49:37.192] run() for Future (‘SequentialFuture’) ... done
[10:49:37.192] Created future:
[10:49:37.192] SequentialFuture:
[10:49:37.192] Label: ‘future_by-1’
[10:49:37.192] Expression:
[10:49:37.192] {
[10:49:37.192]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.192]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.192]     "# as a global variable                                         "
[10:49:37.192]     do.call(function(...) {
[10:49:37.192]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.192]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.192]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.192]             on.exit(options(oopts), add = TRUE)
[10:49:37.192]         }
[10:49:37.192]         {
[10:49:37.192]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.192]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.192]                 ...future.FUN(...future.X_jj, ...)
[10:49:37.192]             })
[10:49:37.192]         }
[10:49:37.192]     }, args = future.call.arguments)
[10:49:37.192] }
[10:49:37.192] Lazy evaluation: FALSE
[10:49:37.192] Asynchronous evaluation: TRUE
[10:49:37.192] Local evaluation: TRUE
[10:49:37.192] Environment: 0x5564a572b908
[10:49:37.192] Capture standard output: TRUE
[10:49:37.192] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.192] Immediate condition classes: ‘immediateCondition’
[10:49:37.192] Globals: 5 objects totaling 2.41 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:37.192] Packages: <none>
[10:49:37.192] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.192] Resolved: TRUE
[10:49:37.192] Value: 1.39 KiB of class ‘list’
[10:49:37.192] Early signaling: FALSE
[10:49:37.192] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.192] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.193] Chunk #1 of 1 ... DONE
[10:49:37.193] Launching 1 futures (chunks) ... DONE
[10:49:37.193] Resolving 1 futures (chunks) ...
[10:49:37.193] value() on list ...
[10:49:37.193] |  recursive: 0
[10:49:37.194] |  length: 1
[10:49:37.194] |  
[10:49:37.194] |  Number of remaining objects: 1
[10:49:37.194] |  checking value #1 ...
[10:49:37.194] |  :  'obj' is SequentialFuture
[10:49:37.194] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.194] |  :  .  state: ‘finished’
[10:49:37.194] |  :  .  run: TRUE
[10:49:37.194] |  :  .  result: ‘FutureResult’
[10:49:37.194] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.194] |  :  SequentialFuture #1
[10:49:37.195] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.195] |  :  .  nx: 1
[10:49:37.195] |  :  .  relay: TRUE
[10:49:37.195] |  :  .  stdout: TRUE
[10:49:37.195] |  :  .  signal: TRUE
[10:49:37.195] |  :  .  resignal: FALSE
[10:49:37.195] |  :  .  force: TRUE
[10:49:37.195] |  :  .  relayed: [n=1] FALSE
[10:49:37.195] |  :  .  queued futures: [n=1] FALSE
[10:49:37.195] |  :  .  until=1
[10:49:37.195] |  :  .  relaying element #1
[10:49:37.196] |  :  .  relayed: [n=1] TRUE
[10:49:37.196] |  :  .  queued futures: [n=1] TRUE
[10:49:37.196] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.196] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.196] |  :  .  value: <list>
[10:49:37.196] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.196] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.196] |  :  .  nx: 1
[10:49:37.196] |  :  .  relay: TRUE
[10:49:37.196] |  :  .  stdout: TRUE
[10:49:37.196] |  :  .  signal: TRUE
[10:49:37.197] |  :  .  resignal: FALSE
[10:49:37.197] |  :  .  force: TRUE
[10:49:37.197] |  :  .  relayed: [n=1] TRUE
[10:49:37.197] |  :  .  queued futures: [n=1] TRUE
[10:49:37.197] |  :  .  until=1
[10:49:37.197] |  :  .  relayed: [n=1] TRUE
[10:49:37.197] |  :  .  queued futures: [n=1] TRUE
[10:49:37.197] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.197] |  :  length: 0 (resolved future 1)
[10:49:37.197] |  checking value #1 ... done
[10:49:37.197] |  Relaying remaining futures ...
[10:49:37.197] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.198] |  :  .  nx: 1
[10:49:37.198] |  :  .  relay: TRUE
[10:49:37.198] |  :  .  stdout: TRUE
[10:49:37.198] |  :  .  signal: TRUE
[10:49:37.198] |  :  .  resignal: FALSE
[10:49:37.198] |  :  .  force: TRUE
[10:49:37.198] |  :  .  relayed: [n=1] TRUE
[10:49:37.198] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.198] |  :  .  relayed: [n=1] TRUE
[10:49:37.198] |  :  .  queued futures: [n=1] TRUE
[10:49:37.198] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.199] |  Relaying remaining futures ... done
[10:49:37.199] value() on list ... done
[10:49:37.199]  - Number of value chunks collected: 1
[10:49:37.199] Resolving 1 futures (chunks) ... DONE
[10:49:37.199] Reducing values from 1 chunks ...
[10:49:37.199]  - Number of values collected after concatenation: 3
[10:49:37.199]  - Number of values expected: 3
[10:49:37.199] Reducing values from 1 chunks ... DONE
[10:49:37.200] future_lapply() ... DONE
[10:49:37.200] future_by_internal() ... DONE
[10:49:37.201] future_by_internal() ...
- plan('multisession') ...
[10:49:37.201] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.202] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:37.202] |  :  all.equal() for FutureStrategyList ...
[10:49:37.202] |  :  .  New stack:
[10:49:37.202] |  :  .  List of 1
[10:49:37.202] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.202] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.202] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.202] |  :  .    ..- attr(*, "init")= logi TRUE
[10:49:37.202] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.202] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.202] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.202] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.202] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.202] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.205] |  :  .  Old stack:
[10:49:37.205] |  :  .  List of 1
[10:49:37.205] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.205] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.205] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.205] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.205] |  :  .      ...)  
[10:49:37.205] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.205] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.205] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.205] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.205] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.205] |  :  .      ...)  
[10:49:37.205] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.205] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.208] |  :  .  Not identical
[10:49:37.208] |  :  .  all.equal() for future ...
[10:49:37.208] |  :  .  |  List of 2
[10:49:37.208] |  :  .  |   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.208] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.208] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.208] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:49:37.208] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.208] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.208] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.208] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.208] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.208] |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:37.208] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:37.208] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:37.208] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.208] |  :  .  |      ...)  
[10:49:37.208] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.208] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.208] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.208] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a575cc20> 
[10:49:37.208] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:37.208] |  :  .  |      ...)  
[10:49:37.208] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:37.213] |  :  .  |  Formals differ
[10:49:37.213] |  :  .  all.equal() for future ... done
[10:49:37.213] |  :  .  Future strategies differ at level 1
[10:49:37.213] |  :  all.equal() for FutureStrategyList ... done
[10:49:37.213] |  :  plan(): Setting new future strategy stack:
[10:49:37.213] |  :  List of future strategies:
[10:49:37.213] |  :  1. multisession:
[10:49:37.213] |  :     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:37.213] |  :     - tweaked: FALSE
[10:49:37.213] |  :     - call: plan(strategy)
[10:49:37.214] |  :  List of 1
[10:49:37.214] |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.214] |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.214] |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.214] |  :    ..- attr(*, "init")= logi TRUE
[10:49:37.214] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.214] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.214] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.214] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.214] |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.214] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.217] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:37.217] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.217] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.217] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.217] |  :  .  Legacy shutdown of cluster workers ...
[10:49:37.218] |  :  .  |  Stopping existing cluster ...
[10:49:37.218] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:37.218] |  :  .  |  Stopping existing cluster ... done
[10:49:37.218] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:37.218] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:37.218] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:49:37.218] |  :  .  function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.218] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.218] |  :  .   - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.218] |  :  .   - attr(*, "init")= logi TRUE
[10:49:37.218] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.218] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.218] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.218] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:49:37.218] |  :  .   - attr(*, "call")= language plan(strategy)
[10:49:37.220] |  :  .  init: TRUE
[10:49:37.220] |  :  .  makeFutureBackend(<multisession>) ...
[10:49:37.221] |  :  .  |  Backend function: <‘NULL’>
[10:49:37.222] |  :  .  |  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.222] |  :  .  makeFutureBackend(<multisession>) ... done
[10:49:37.222] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:49:37.222] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.222] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.223] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.223] |  :  plan(): nbrOfWorkers() = 1
[10:49:37.223] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:37.223] plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.223] future_by_internal() ...
[10:49:37.223] future_lapply() ...
[10:49:37.224] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.224] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.224] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.224] Number of chunks: 1
[10:49:37.224] getGlobalsAndPackagesXApply() ...
[10:49:37.224]  - future.globals: TRUE
[10:49:37.224] getGlobalsAndPackages() ...
[10:49:37.225] |  Searching for globals ...
[10:49:37.226] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:37.226] |  Searching for globals ... DONE
[10:49:37.226] |  Resolving globals: FALSE
[10:49:37.226] |  Search for packages associated with the globals ...
[10:49:37.226] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.226] |  :  Packages: [1] ‘base’
[10:49:37.226] |  Search for packages associated with the globals ... DONE
[10:49:37.227] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:37.227] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:37.227] |  Packages after dropping 'base': [0] 
[10:49:37.227] |  globals: [1] ‘FUN’
[10:49:37.227] |  packages: [0] 
[10:49:37.227] getGlobalsAndPackages() ... done
[10:49:37.227]  - globals found/used: [n=1] ‘FUN’
[10:49:37.227]  - needed namespaces: [n=0] 
[10:49:37.227] Finding globals ... DONE
[10:49:37.228]  - use_args: TRUE
[10:49:37.228]  - Getting '...' globals ...
[10:49:37.228] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.228] |  recursive: 0
[10:49:37.228] |  length: 1
[10:49:37.228] |  elements: ‘...’
[10:49:37.228] |  'obj' is DotDotDotList
[10:49:37.228] |  resolve(obj, ...) ...
[10:49:37.229] |  resolve(obj, ...) ... done
[10:49:37.229] |  length: 0 (resolved future 1)
[10:49:37.229] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.229]    - '...' content: [n=0] 
[10:49:37.229] List of 1
[10:49:37.229]  $ ...: list()
[10:49:37.229]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.229]  - attr(*, "where")=List of 1
[10:49:37.229]   ..$ ...:<environment: 0x5564a38ebd60> 
[10:49:37.229]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.229]  - attr(*, "resolved")= logi TRUE
[10:49:37.229]  - attr(*, "total_size")= num NA
[10:49:37.231]  - Getting '...' globals ... DONE
[10:49:37.231] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:37.232] List of 2
[10:49:37.232]  $ ...future.FUN:function (object, ...)  
[10:49:37.232]  $ ...          : list()
[10:49:37.232]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.232]  - attr(*, "where")=List of 2
[10:49:37.232]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.232]   ..$ ...          :<environment: 0x5564a38ebd60> 
[10:49:37.232]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.232]  - attr(*, "resolved")= logi FALSE
[10:49:37.232]  - attr(*, "total_size")= num 15670
[10:49:37.235] Packages to be attached in all futures: [n=0] 
[10:49:37.235] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.235] Number of futures (= number of chunks): 1
[10:49:37.236] Launching 1 futures (chunks) ...
[10:49:37.236] Chunk #1 of 1 ...
[10:49:37.236]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.236] getGlobalsAndPackages() ...
[10:49:37.236] |  Searching for globals ...
[10:49:37.236] |  :  globals found: [0] 
[10:49:37.237] |  Searching for globals ... DONE
[10:49:37.237] |  globals: [0] <none>
[10:49:37.237] |  packages: [0] <none>
[10:49:37.237] getGlobalsAndPackages() ... done
[10:49:37.237]    + additional globals found: [n=0] 
[10:49:37.237]    + additional namespaces needed: [n=0] 
[10:49:37.237]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.237]  - seeds: <none>
[10:49:37.237]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.237] getGlobalsAndPackages() ...
[10:49:37.237] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.238] |  Resolving globals: FALSE
[10:49:37.238] |  Tweak future expression to call with '...' arguments ...
[10:49:37.238] |  :  {
[10:49:37.238] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.238] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.238] |  :      "# as a global variable                                         "
[10:49:37.238] |  :      do.call(function(...) {
[10:49:37.238] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.238] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.238] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.238] |  :              on.exit(options(oopts), add = TRUE)
[10:49:37.238] |  :          }
[10:49:37.238] |  :          {
[10:49:37.238] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.238] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.238] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:37.238] |  :              })
[10:49:37.238] |  :          }
[10:49:37.238] |  :      }, args = future.call.arguments)
[10:49:37.238] |  :  }
[10:49:37.238] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.238] |  Search for packages associated with the globals ...
[10:49:37.238] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.239] |  :  Packages: [1] ‘base’
[10:49:37.239] |  Search for packages associated with the globals ... DONE
[10:49:37.239] |  Packages after dropping 'base': [0] 
[10:49:37.239] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.239] |  packages: [0] 
[10:49:37.239] getGlobalsAndPackages() ... done
[10:49:37.239] run() for Future (‘Future’) ...
[10:49:37.239] |  state: ‘created’
[10:49:37.240] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.240] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.240] |  Using SequentialFutureBackend ...
[10:49:37.240] |  :  Launching futures ...
[10:49:37.240] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.240] |  :  .  |  getFutureData() ...
[10:49:37.240] |  :  .  |  :  getFutureCore() ...
[10:49:37.240] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:37.240] |  :  .  |  :  getFutureCore() ... done
[10:49:37.240] |  :  .  |  :  getFutureCapture() ...
[10:49:37.240] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.241] |  :  .  |  :  getFutureContext() ...
[10:49:37.241] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.241] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.241] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.241] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.241] |  :  .  |  :  getFutureContext() ... done
[10:49:37.241] |  :  .  |  getFutureData() ... done
[10:49:37.241] |  :  .  |  attachPackages() ...
[10:49:37.241] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.242] |  :  .  |  attachPackages() ... DONE
[10:49:37.242] |  :  .  |  attachPackages() ...
[10:49:37.242] |  :  .  |  :  packages: [n=0] 
[10:49:37.242] |  :  .  |  attachPackages() ... DONE
[10:49:37.242] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.242] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.242] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.243] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.243] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.243] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.243] |  :  .  |  :  .  |  New stack:
[10:49:37.243] |  :  .  |  :  .  |  List of 1
[10:49:37.243] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.243] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.243] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.243] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.243] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.243] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.243] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.245] |  :  .  |  :  .  |  Old stack:
[10:49:37.245] |  :  .  |  :  .  |  List of 1
[10:49:37.245] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.245] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.245] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.245] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.245] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.245] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.245] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.245] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.245] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.245] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.245] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.245] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.245] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.248] |  :  .  |  :  .  |  Not identical
[10:49:37.249] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.249] |  :  .  |  :  .  |  :  List of 2
[10:49:37.249] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.249] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.249] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.249] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.249] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.249] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.249] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.249] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.254] |  :  .  |  :  .  |  :  Formals differ
[10:49:37.254] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.255] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:37.255] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.255] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:37.255] |  :  .  |  :  .  List of future strategies:
[10:49:37.255] |  :  .  |  :  .  1. sequential:
[10:49:37.255] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.255] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.255] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.255] |  :  .  |  :  .  List of 1
[10:49:37.255] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.255] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.255] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.255] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.255] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.255] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.255] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.257] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.257] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.258] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.258] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.258] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.258] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:37.258] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.258] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:37.258] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.258] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.258] |  :  .  |  assign_globals() ...
[10:49:37.259] |  :  .  |  List of 5
[10:49:37.259] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:37.259] |  :  .  |   $ future.call.arguments    : list()
[10:49:37.259] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.259] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.259] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:37.259] |  :  .  |    .. ..$ breaks: num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.259] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.259] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:37.259] |  :  .  |    .. ..$ breaks: num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.259] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.259] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:37.259] |  :  .  |    .. ..$ breaks: num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.259] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.259] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.259] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.259] |  :  .  |   - attr(*, "where")=List of 5
[10:49:37.259] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.259] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.259] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.259] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.259] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.259] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.259] |  :  .  |   - attr(*, "total_size")= num 15670
[10:49:37.259] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.259] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.267] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.267] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.267] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.267] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.267] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.267] |  :  .  |  assign_globals() ... done
[10:49:37.270] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.270] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.270] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.270] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.270] |  :  .  |  :  .  |  :  New stack:
[10:49:37.270] |  :  .  |  :  .  |  :  List of 1
[10:49:37.270] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.270] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.270] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.270] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.270] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.270] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.270] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.270] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.270] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.270] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.270] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.270] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.270] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.274] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.274] |  :  .  |  :  .  |  :  List of 1
[10:49:37.274] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.274] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.274] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.274] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.274] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.274] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.274] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.276] |  :  .  |  :  .  |  :  Not identical
[10:49:37.276] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:37.276] |  :  .  |  :  .  |  :  .  List of 2
[10:49:37.276] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.276] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.276] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.276] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.276] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.276] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.276] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.276] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.281] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:37.281] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:37.281] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:37.282] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.282] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:37.282] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.282] |  :  .  |  :  .  |  1. multisession:
[10:49:37.282] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:37.282] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.282] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.282] |  :  .  |  :  .  |  List of 1
[10:49:37.282] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.282] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.282] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.282] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.282] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.282] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.282] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.282] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.282] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.282] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.282] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.282] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.282] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.286] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.286] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.286] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.286] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.286] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.286] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:37.286] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.286] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.286] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.287] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.287] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.287] |  :  Launching futures ... done
[10:49:37.287] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.287] |  Using SequentialFutureBackend ... done
[10:49:37.287] run() for Future (‘SequentialFuture’) ... done
[10:49:37.287] Created future:
[10:49:37.287] SequentialFuture:
[10:49:37.287] Label: ‘future_by-1’
[10:49:37.287] Expression:
[10:49:37.287] {
[10:49:37.287]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.287]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.287]     "# as a global variable                                         "
[10:49:37.287]     do.call(function(...) {
[10:49:37.287]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.287]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.287]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.287]             on.exit(options(oopts), add = TRUE)
[10:49:37.287]         }
[10:49:37.287]         {
[10:49:37.287]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.287]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.287]                 ...future.FUN(...future.X_jj, ...)
[10:49:37.287]             })
[10:49:37.287]         }
[10:49:37.287]     }, args = future.call.arguments)
[10:49:37.287] }
[10:49:37.287] Lazy evaluation: FALSE
[10:49:37.287] Asynchronous evaluation: TRUE
[10:49:37.287] Local evaluation: TRUE
[10:49:37.287] Environment: R_GlobalEnv
[10:49:37.287] Capture standard output: TRUE
[10:49:37.287] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.287] Immediate condition classes: ‘immediateCondition’
[10:49:37.287] Globals: 5 objects totaling 1.90 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.48 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:37.287] Packages: <none>
[10:49:37.287] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.287] Resolved: TRUE
[10:49:37.287] Value: 1.16 KiB of class ‘list’
[10:49:37.287] Early signaling: FALSE
[10:49:37.287] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.287] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.288] Chunk #1 of 1 ... DONE
[10:49:37.288] Launching 1 futures (chunks) ... DONE
[10:49:37.288] Resolving 1 futures (chunks) ...
[10:49:37.288] value() on list ...
[10:49:37.289] |  recursive: 0
[10:49:37.289] |  length: 1
[10:49:37.289] |  
[10:49:37.289] |  Number of remaining objects: 1
[10:49:37.289] |  checking value #1 ...
[10:49:37.289] |  :  'obj' is SequentialFuture
[10:49:37.289] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.289] |  :  .  state: ‘finished’
[10:49:37.289] |  :  .  run: TRUE
[10:49:37.289] |  :  .  result: ‘FutureResult’
[10:49:37.289] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.290] |  :  SequentialFuture #1
[10:49:37.290] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.290] |  :  .  nx: 1
[10:49:37.290] |  :  .  relay: TRUE
[10:49:37.290] |  :  .  stdout: TRUE
[10:49:37.290] |  :  .  signal: TRUE
[10:49:37.290] |  :  .  resignal: FALSE
[10:49:37.290] |  :  .  force: TRUE
[10:49:37.290] |  :  .  relayed: [n=1] FALSE
[10:49:37.290] |  :  .  queued futures: [n=1] FALSE
[10:49:37.290] |  :  .  until=1
[10:49:37.290] |  :  .  relaying element #1
[10:49:37.291] |  :  .  relayed: [n=1] TRUE
[10:49:37.291] |  :  .  queued futures: [n=1] TRUE
[10:49:37.291] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.291] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.291] |  :  .  value: <list>
[10:49:37.291] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.291] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.291] |  :  .  nx: 1
[10:49:37.291] |  :  .  relay: TRUE
[10:49:37.291] |  :  .  stdout: TRUE
[10:49:37.292] |  :  .  signal: TRUE
[10:49:37.292] |  :  .  resignal: FALSE
[10:49:37.292] |  :  .  force: TRUE
[10:49:37.292] |  :  .  relayed: [n=1] TRUE
[10:49:37.292] |  :  .  queued futures: [n=1] TRUE
[10:49:37.292] |  :  .  until=1
[10:49:37.292] |  :  .  relayed: [n=1] TRUE
[10:49:37.292] |  :  .  queued futures: [n=1] TRUE
[10:49:37.292] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.292] |  :  length: 0 (resolved future 1)
[10:49:37.292] |  checking value #1 ... done
[10:49:37.292] |  Relaying remaining futures ...
[10:49:37.293] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.293] |  :  .  nx: 1
[10:49:37.293] |  :  .  relay: TRUE
[10:49:37.293] |  :  .  stdout: TRUE
[10:49:37.293] |  :  .  signal: TRUE
[10:49:37.293] |  :  .  resignal: FALSE
[10:49:37.293] |  :  .  force: TRUE
[10:49:37.293] |  :  .  relayed: [n=1] TRUE
[10:49:37.293] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.293] |  :  .  relayed: [n=1] TRUE
[10:49:37.293] |  :  .  queued futures: [n=1] TRUE
[10:49:37.293] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.294] |  Relaying remaining futures ... done
[10:49:37.294] value() on list ... done
[10:49:37.294]  - Number of value chunks collected: 1
[10:49:37.294] Resolving 1 futures (chunks) ... DONE
[10:49:37.294] Reducing values from 1 chunks ...
[10:49:37.294]  - Number of values collected after concatenation: 3
[10:49:37.294]  - Number of values expected: 3
[10:49:37.294] Reducing values from 1 chunks ... DONE
[10:49:37.294] future_lapply() ... DONE
[10:49:37.294] future_by_internal() ... DONE
[10:49:37.295] future_by_internal() ...
[10:49:37.295] future_lapply() ...
[10:49:37.295] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.295] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.296] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.296] Number of chunks: 1
[10:49:37.296] getGlobalsAndPackagesXApply() ...
[10:49:37.296]  - future.globals: TRUE
[10:49:37.296] getGlobalsAndPackages() ...
[10:49:37.296] |  Searching for globals ...
[10:49:37.327] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:37.327] |  Searching for globals ... DONE
[10:49:37.327] |  Resolving globals: FALSE
[10:49:37.328] |  Search for packages associated with the globals ...
[10:49:37.328] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.328] |  :  Packages: [1] ‘base’
[10:49:37.328] |  Search for packages associated with the globals ... DONE
[10:49:37.328] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:37.329] |  The total size of the 1 globals exported for future expression (‘FUN(digits = 2L)’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:37.329] |  Packages after dropping 'base': [0] 
[10:49:37.329] |  globals: [1] ‘FUN’
[10:49:37.329] |  packages: [0] 
[10:49:37.329] getGlobalsAndPackages() ... done
[10:49:37.329]  - globals found/used: [n=1] ‘FUN’
[10:49:37.329]  - needed namespaces: [n=0] 
[10:49:37.329] Finding globals ... DONE
[10:49:37.329]  - use_args: TRUE
[10:49:37.329]  - Getting '...' globals ...
[10:49:37.330] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.330] |  recursive: 0
[10:49:37.330] |  length: 1
[10:49:37.330] |  elements: ‘...’
[10:49:37.330] |  'obj' is DotDotDotList
[10:49:37.330] |  resolve(obj, ...) ...
[10:49:37.330] |  resolve(obj, ...) ... done
[10:49:37.330] |  length: 0 (resolved future 1)
[10:49:37.331] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.331]    - '...' content: [n=1] ‘digits’
[10:49:37.331] List of 1
[10:49:37.331]  $ ...:List of 1
[10:49:37.331]   ..$ digits: int 2
[10:49:37.331]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.331]  - attr(*, "where")=List of 1
[10:49:37.331]   ..$ ...:<environment: 0x5564a58e13d8> 
[10:49:37.331]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.331]  - attr(*, "resolved")= logi TRUE
[10:49:37.331]  - attr(*, "total_size")= num NA
[10:49:37.334]  - Getting '...' globals ... DONE
[10:49:37.334] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:37.334] List of 2
[10:49:37.334]  $ ...future.FUN:function (object, ...)  
[10:49:37.334]  $ ...          :List of 1
[10:49:37.334]   ..$ digits: int 2
[10:49:37.334]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.334]  - attr(*, "where")=List of 2
[10:49:37.334]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.334]   ..$ ...          :<environment: 0x5564a58e13d8> 
[10:49:37.334]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.334]  - attr(*, "resolved")= logi FALSE
[10:49:37.334]  - attr(*, "total_size")= num 13284
[10:49:37.337] Packages to be attached in all futures: [n=0] 
[10:49:37.337] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.337] Number of futures (= number of chunks): 1
[10:49:37.337] Launching 1 futures (chunks) ...
[10:49:37.337] Chunk #1 of 1 ...
[10:49:37.338]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.338] getGlobalsAndPackages() ...
[10:49:37.338] |  Searching for globals ...
[10:49:37.338] |  :  globals found: [0] 
[10:49:37.338] |  Searching for globals ... DONE
[10:49:37.338] |  globals: [0] <none>
[10:49:37.338] |  packages: [0] <none>
[10:49:37.338] getGlobalsAndPackages() ... done
[10:49:37.338]    + additional globals found: [n=0] 
[10:49:37.339]    + additional namespaces needed: [n=0] 
[10:49:37.339]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.339]  - seeds: <none>
[10:49:37.339]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.339] getGlobalsAndPackages() ...
[10:49:37.339] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.339] |  Resolving globals: FALSE
[10:49:37.339] |  Tweak future expression to call with '...' arguments ...
[10:49:37.339] |  :  {
[10:49:37.339] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.339] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.339] |  :      "# as a global variable                                         "
[10:49:37.339] |  :      do.call(function(...) {
[10:49:37.339] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.339] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.339] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.339] |  :              on.exit(options(oopts), add = TRUE)
[10:49:37.339] |  :          }
[10:49:37.339] |  :          {
[10:49:37.339] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.339] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.339] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:37.339] |  :              })
[10:49:37.339] |  :          }
[10:49:37.339] |  :      }, args = future.call.arguments)
[10:49:37.339] |  :  }
[10:49:37.340] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.340] |  Search for packages associated with the globals ...
[10:49:37.340] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.340] |  :  Packages: [1] ‘base’
[10:49:37.340] |  Search for packages associated with the globals ... DONE
[10:49:37.340] |  Packages after dropping 'base': [0] 
[10:49:37.340] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.341] |  packages: [0] 
[10:49:37.341] getGlobalsAndPackages() ... done
[10:49:37.341] run() for Future (‘Future’) ...
[10:49:37.341] |  state: ‘created’
[10:49:37.341] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.341] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.341] |  Using SequentialFutureBackend ...
[10:49:37.341] |  :  Launching futures ...
[10:49:37.342] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.342] |  :  .  |  getFutureData() ...
[10:49:37.342] |  :  .  |  :  getFutureCore() ...
[10:49:37.342] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:37.342] |  :  .  |  :  getFutureCore() ... done
[10:49:37.342] |  :  .  |  :  getFutureCapture() ...
[10:49:37.342] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.342] |  :  .  |  :  getFutureContext() ...
[10:49:37.342] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.342] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.343] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.343] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.343] |  :  .  |  :  getFutureContext() ... done
[10:49:37.343] |  :  .  |  getFutureData() ... done
[10:49:37.343] |  :  .  |  attachPackages() ...
[10:49:37.343] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.343] |  :  .  |  attachPackages() ... DONE
[10:49:37.343] |  :  .  |  attachPackages() ...
[10:49:37.343] |  :  .  |  :  packages: [n=0] 
[10:49:37.343] |  :  .  |  attachPackages() ... DONE
[10:49:37.344] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.344] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.344] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.344] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.344] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.345] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.345] |  :  .  |  :  .  |  New stack:
[10:49:37.345] |  :  .  |  :  .  |  List of 1
[10:49:37.345] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.345] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.345] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.345] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.345] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.345] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.345] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.347] |  :  .  |  :  .  |  Old stack:
[10:49:37.347] |  :  .  |  :  .  |  List of 1
[10:49:37.347] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.347] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.347] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.347] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.347] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.347] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.347] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.347] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.347] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.347] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.347] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.347] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.347] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.350] |  :  .  |  :  .  |  Not identical
[10:49:37.351] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.351] |  :  .  |  :  .  |  :  List of 2
[10:49:37.351] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.351] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.351] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.351] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.351] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.351] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.351] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.351] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.357] |  :  .  |  :  .  |  :  Formals differ
[10:49:37.357] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.357] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:37.357] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.357] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:37.357] |  :  .  |  :  .  List of future strategies:
[10:49:37.357] |  :  .  |  :  .  1. sequential:
[10:49:37.357] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.357] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.357] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.358] |  :  .  |  :  .  List of 1
[10:49:37.358] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.358] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.358] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.358] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.358] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.358] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.358] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.361] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.361] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.361] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.361] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.361] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.361] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:37.362] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.362] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:37.362] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.362] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.362] |  :  .  |  assign_globals() ...
[10:49:37.362] |  :  .  |  List of 5
[10:49:37.362] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:37.362] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:37.362] |  :  .  |    ..$ digits: int 2
[10:49:37.362] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.362] |  :  .  |   $ ...future.elements_ii    :List of 6
[10:49:37.362] |  :  .  |    ..$ : num [1:9] 26 30 54 25 70 52 51 26 67
[10:49:37.362] |  :  .  |    ..$ : num [1:9] 27 14 29 19 29 31 41 20 44
[10:49:37.362] |  :  .  |    ..$ : num [1:9] 18 21 29 17 12 18 35 30 36
[10:49:37.362] |  :  .  |    ..$ : num [1:9] 42 26 19 16 39 28 21 39 29
[10:49:37.362] |  :  .  |    ..$ : num [1:9] 36 21 24 18 10 43 28 15 26
[10:49:37.362] |  :  .  |    ..$ : num [1:9] 20 21 24 17 13 15 15 16 28
[10:49:37.362] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.362] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.362] |  :  .  |   - attr(*, "where")=List of 5
[10:49:37.362] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.362] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.362] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.362] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.362] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.362] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.362] |  :  .  |   - attr(*, "total_size")= num 13284
[10:49:37.362] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.362] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.371] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.371] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.371] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.372] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.372] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.372] |  :  .  |  assign_globals() ... done
[10:49:37.374] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.375] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.375] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.375] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.375] |  :  .  |  :  .  |  :  New stack:
[10:49:37.375] |  :  .  |  :  .  |  :  List of 1
[10:49:37.375] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.375] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.375] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.375] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.375] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.375] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.375] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.375] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.375] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.375] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.375] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.375] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.375] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.380] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.380] |  :  .  |  :  .  |  :  List of 1
[10:49:37.380] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.380] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.380] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.380] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.380] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.380] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.380] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.383] |  :  .  |  :  .  |  :  Not identical
[10:49:37.383] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:37.383] |  :  .  |  :  .  |  :  .  List of 2
[10:49:37.383] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.383] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.383] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.383] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.383] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.383] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.383] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.383] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.389] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:37.389] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:37.390] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:37.390] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.390] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:37.390] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.390] |  :  .  |  :  .  |  1. multisession:
[10:49:37.390] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:37.390] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.390] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.390] |  :  .  |  :  .  |  List of 1
[10:49:37.390] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.390] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.390] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.390] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.390] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.390] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.390] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.390] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.390] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.390] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.390] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.390] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.390] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.395] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.395] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.395] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.395] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.396] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.396] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:37.396] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.396] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.396] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.396] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.397] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.397] |  :  Launching futures ... done
[10:49:37.397] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.397] |  Using SequentialFutureBackend ... done
[10:49:37.397] run() for Future (‘SequentialFuture’) ... done
[10:49:37.397] Created future:
[10:49:37.397] SequentialFuture:
[10:49:37.397] Label: ‘future_by-1’
[10:49:37.397] Expression:
[10:49:37.397] {
[10:49:37.397]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.397]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.397]     "# as a global variable                                         "
[10:49:37.397]     do.call(function(...) {
[10:49:37.397]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.397]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.397]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.397]             on.exit(options(oopts), add = TRUE)
[10:49:37.397]         }
[10:49:37.397]         {
[10:49:37.397]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.397]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.397]                 ...future.FUN(...future.X_jj, ...)
[10:49:37.397]             })
[10:49:37.397]         }
[10:49:37.397]     }, args = future.call.arguments)
[10:49:37.397] }
[10:49:37.397] Lazy evaluation: FALSE
[10:49:37.397] Asynchronous evaluation: TRUE
[10:49:37.397] Local evaluation: TRUE
[10:49:37.397] Environment: R_GlobalEnv
[10:49:37.397] Capture standard output: TRUE
[10:49:37.397] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.397] Immediate condition classes: ‘immediateCondition’
[10:49:37.397] Globals: 5 objects totaling 998 bytes (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 511 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:37.397] Packages: <none>
[10:49:37.397] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.397] Resolved: TRUE
[10:49:37.397] Value: 1.27 KiB of class ‘list’
[10:49:37.397] Early signaling: FALSE
[10:49:37.397] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.397] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.398] Chunk #1 of 1 ... DONE
[10:49:37.398] Launching 1 futures (chunks) ... DONE
[10:49:37.399] Resolving 1 futures (chunks) ...
[10:49:37.399] value() on list ...
[10:49:37.399] |  recursive: 0
[10:49:37.399] |  length: 1
[10:49:37.399] |  
[10:49:37.399] |  Number of remaining objects: 1
[10:49:37.399] |  checking value #1 ...
[10:49:37.399] |  :  'obj' is SequentialFuture
[10:49:37.400] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.400] |  :  .  state: ‘finished’
[10:49:37.400] |  :  .  run: TRUE
[10:49:37.400] |  :  .  result: ‘FutureResult’
[10:49:37.400] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.400] |  :  SequentialFuture #1
[10:49:37.400] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.400] |  :  .  nx: 1
[10:49:37.401] |  :  .  relay: TRUE
[10:49:37.401] |  :  .  stdout: TRUE
[10:49:37.401] |  :  .  signal: TRUE
[10:49:37.401] |  :  .  resignal: FALSE
[10:49:37.401] |  :  .  force: TRUE
[10:49:37.401] |  :  .  relayed: [n=1] FALSE
[10:49:37.401] |  :  .  queued futures: [n=1] FALSE
[10:49:37.401] |  :  .  until=1
[10:49:37.401] |  :  .  relaying element #1
[10:49:37.402] |  :  .  relayed: [n=1] TRUE
[10:49:37.402] |  :  .  queued futures: [n=1] TRUE
[10:49:37.402] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.402] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.402] |  :  .  value: <list>
[10:49:37.402] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.403] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.403] |  :  .  nx: 1
[10:49:37.403] |  :  .  relay: TRUE
[10:49:37.403] |  :  .  stdout: TRUE
[10:49:37.403] |  :  .  signal: TRUE
[10:49:37.403] |  :  .  resignal: FALSE
[10:49:37.403] |  :  .  force: TRUE
[10:49:37.403] |  :  .  relayed: [n=1] TRUE
[10:49:37.403] |  :  .  queued futures: [n=1] TRUE
[10:49:37.404] |  :  .  until=1
[10:49:37.404] |  :  .  relayed: [n=1] TRUE
[10:49:37.404] |  :  .  queued futures: [n=1] TRUE
[10:49:37.404] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.404] |  :  length: 0 (resolved future 1)
[10:49:37.404] |  checking value #1 ... done
[10:49:37.404] |  Relaying remaining futures ...
[10:49:37.404] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.405] |  :  .  nx: 1
[10:49:37.405] |  :  .  relay: TRUE
[10:49:37.405] |  :  .  stdout: TRUE
[10:49:37.405] |  :  .  signal: TRUE
[10:49:37.405] |  :  .  resignal: FALSE
[10:49:37.405] |  :  .  force: TRUE
[10:49:37.405] |  :  .  relayed: [n=1] TRUE
[10:49:37.405] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.405] |  :  .  relayed: [n=1] TRUE
[10:49:37.406] |  :  .  queued futures: [n=1] TRUE
[10:49:37.406] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.406] |  Relaying remaining futures ... done
[10:49:37.406] value() on list ... done
[10:49:37.406]  - Number of value chunks collected: 1
[10:49:37.406] Resolving 1 futures (chunks) ... DONE
[10:49:37.406] Reducing values from 1 chunks ...
[10:49:37.406]  - Number of values collected after concatenation: 6
[10:49:37.406]  - Number of values expected: 6
[10:49:37.407] Reducing values from 1 chunks ... DONE
[10:49:37.407] future_lapply() ... DONE
[10:49:37.407] future_by_internal() ... DONE
[10:49:37.408] future_by_internal() ...
[10:49:37.409] future_lapply() ...
[10:49:37.410] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.410] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.410] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.410] Number of chunks: 1
[10:49:37.410] getGlobalsAndPackagesXApply() ...
[10:49:37.411]  - future.globals: TRUE
[10:49:37.411] getGlobalsAndPackages() ...
[10:49:37.411] |  Searching for globals ...
[10:49:37.413] |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:37.413] |  Searching for globals ... DONE
[10:49:37.413] |  Resolving globals: FALSE
[10:49:37.413] |  Search for packages associated with the globals ...
[10:49:37.414] |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:37.414] |  :  Packages: [2] ‘base’, ‘stats’
[10:49:37.414] |  Search for packages associated with the globals ... DONE
[10:49:37.416] |  The total size of the 1 globals is 762 bytes (762 bytes)
[10:49:37.416] |  The total size of the 1 globals exported for future expression (‘FUN(singular.ok = FALSE)’) is 762 bytes There is one global: ‘FUN’ (762 bytes of class ‘function’)
[10:49:37.416] |  Packages after dropping 'base': [1] ‘stats’
[10:49:37.416] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:37.417] |  globals: [1] ‘FUN’
[10:49:37.417] |  packages: [1] ‘stats’
[10:49:37.417] getGlobalsAndPackages() ... done
[10:49:37.417]  - globals found/used: [n=1] ‘FUN’
[10:49:37.417]  - needed namespaces: [n=1] ‘stats’
[10:49:37.417] Finding globals ... DONE
[10:49:37.417]  - use_args: TRUE
[10:49:37.417]  - Getting '...' globals ...
[10:49:37.418] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.418] |  recursive: 0
[10:49:37.418] |  length: 1
[10:49:37.418] |  elements: ‘...’
[10:49:37.418] |  'obj' is DotDotDotList
[10:49:37.418] |  resolve(obj, ...) ...
[10:49:37.418] |  resolve(obj, ...) ... done
[10:49:37.418] |  length: 0 (resolved future 1)
[10:49:37.418] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.418]    - '...' content: [n=1] ‘singular.ok’
[10:49:37.419] List of 1
[10:49:37.419]  $ ...:List of 1
[10:49:37.419]   ..$ singular.ok: logi FALSE
[10:49:37.419]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.419]  - attr(*, "where")=List of 1
[10:49:37.419]   ..$ ...:<environment: 0x5564a849a778> 
[10:49:37.419]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.419]  - attr(*, "resolved")= logi TRUE
[10:49:37.419]  - attr(*, "total_size")= num NA
[10:49:37.421]  - Getting '...' globals ... DONE
[10:49:37.422] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:37.422] List of 2
[10:49:37.422]  $ ...future.FUN:function (x, ...)  
[10:49:37.422]  $ ...          :List of 1
[10:49:37.422]   ..$ singular.ok: logi FALSE
[10:49:37.422]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.422]  - attr(*, "where")=List of 2
[10:49:37.422]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.422]   ..$ ...          :<environment: 0x5564a849a778> 
[10:49:37.422]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.422]  - attr(*, "resolved")= logi FALSE
[10:49:37.422]  - attr(*, "total_size")= num 19977
[10:49:37.425] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:37.425] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.425] Number of futures (= number of chunks): 1
[10:49:37.425] Launching 1 futures (chunks) ...
[10:49:37.425] Chunk #1 of 1 ...
[10:49:37.425]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.425] getGlobalsAndPackages() ...
[10:49:37.426] |  Searching for globals ...
[10:49:37.426] |  :  globals found: [0] 
[10:49:37.426] |  Searching for globals ... DONE
[10:49:37.426] |  globals: [0] <none>
[10:49:37.426] |  packages: [0] <none>
[10:49:37.426] getGlobalsAndPackages() ... done
[10:49:37.427]    + additional globals found: [n=0] 
[10:49:37.427]    + additional namespaces needed: [n=0] 
[10:49:37.427]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.427]  - seeds: <none>
[10:49:37.427]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.427] getGlobalsAndPackages() ...
[10:49:37.427] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.427] |  Resolving globals: FALSE
[10:49:37.427] |  Tweak future expression to call with '...' arguments ...
[10:49:37.427] |  :  {
[10:49:37.427] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.427] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.427] |  :      "# as a global variable                                         "
[10:49:37.427] |  :      do.call(function(...) {
[10:49:37.427] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:37.427] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:37.427] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:37.427] |  :          "# anonymous function.                                          "
[10:49:37.427] |  :          "#                                                              "
[10:49:37.427] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:37.427] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:37.427] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:37.427] |  :          "# global environment, which is where globals are written.      "
[10:49:37.427] |  :          penv <- env <- environment(...future.FUN)
[10:49:37.427] |  :          repeat {
[10:49:37.427] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:37.427] |  :                  emptyenv())) 
[10:49:37.427] |  :                  break
[10:49:37.427] |  :              penv <- env
[10:49:37.427] |  :              env <- parent.env(env)
[10:49:37.427] |  :          }
[10:49:37.427] |  :          if (identical(penv, globalenv())) {
[10:49:37.427] |  :              environment(...future.FUN) <- environment()
[10:49:37.427] |  :          }
[10:49:37.427] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:37.427] |  :              !isNamespace(penv)) {
[10:49:37.427] |  :              parent.env(penv) <- environment()
[10:49:37.427] |  :          }
[10:49:37.427] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:37.427] |  :          {
[10:49:37.427] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.427] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.427] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.427] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:37.427] |  :              }
[10:49:37.427] |  :              {
[10:49:37.427] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.427] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.427] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:37.427] |  :                  })
[10:49:37.427] |  :              }
[10:49:37.427] |  :          }
[10:49:37.427] |  :      }, args = future.call.arguments)
[10:49:37.427] |  :  }
[10:49:37.428] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.428] |  Search for packages associated with the globals ...
[10:49:37.428] |  :  Packages associated with globals: [0] 
[10:49:37.428] |  :  Packages: [0] 
[10:49:37.429] |  Search for packages associated with the globals ... DONE
[10:49:37.429] |  Packages after dropping 'base': [0] 
[10:49:37.429] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.429] |  packages: [0] 
[10:49:37.429] getGlobalsAndPackages() ... done
[10:49:37.429] run() for Future (‘Future’) ...
[10:49:37.429] |  state: ‘created’
[10:49:37.429] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.429] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.430] |  Using SequentialFutureBackend ...
[10:49:37.430] |  :  Launching futures ...
[10:49:37.430] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.430] |  :  .  |  getFutureData() ...
[10:49:37.430] |  :  .  |  :  getFutureCore() ...
[10:49:37.430] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:37.430] |  :  .  |  :  getFutureCore() ... done
[10:49:37.430] |  :  .  |  :  getFutureCapture() ...
[10:49:37.430] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.430] |  :  .  |  :  getFutureContext() ...
[10:49:37.431] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.431] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.431] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.431] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.431] |  :  .  |  :  getFutureContext() ... done
[10:49:37.431] |  :  .  |  getFutureData() ... done
[10:49:37.431] |  :  .  |  attachPackages() ...
[10:49:37.431] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.432] |  :  .  |  attachPackages() ... DONE
[10:49:37.432] |  :  .  |  attachPackages() ...
[10:49:37.432] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:37.432] |  :  .  |  attachPackages() ... DONE
[10:49:37.432] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.432] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.432] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.433] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.433] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.433] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.433] |  :  .  |  :  .  |  New stack:
[10:49:37.433] |  :  .  |  :  .  |  List of 1
[10:49:37.433] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.433] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.433] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.433] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.433] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.433] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.433] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.435] |  :  .  |  :  .  |  Old stack:
[10:49:37.435] |  :  .  |  :  .  |  List of 1
[10:49:37.435] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.435] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.435] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.435] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.435] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.435] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.435] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.435] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.435] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.435] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.435] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.435] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.435] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.439] |  :  .  |  :  .  |  Not identical
[10:49:37.439] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.439] |  :  .  |  :  .  |  :  List of 2
[10:49:37.439] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.439] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.439] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.439] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.439] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.439] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.439] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.439] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.444] |  :  .  |  :  .  |  :  Formals differ
[10:49:37.444] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.444] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:37.444] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.444] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:37.445] |  :  .  |  :  .  List of future strategies:
[10:49:37.445] |  :  .  |  :  .  1. sequential:
[10:49:37.445] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.445] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.445] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.445] |  :  .  |  :  .  List of 1
[10:49:37.445] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.445] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.445] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.445] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.445] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.445] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.445] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.447] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.447] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.447] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.448] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.448] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.448] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:37.448] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.448] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:37.448] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.448] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.448] |  :  .  |  assign_globals() ...
[10:49:37.449] |  :  .  |  List of 5
[10:49:37.449] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:37.449] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:37.449] |  :  .  |    ..$ singular.ok: logi FALSE
[10:49:37.449] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.449] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.449] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.449] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.449] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.449] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.449] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.449] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.449] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.449] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:37.449] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.449] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.449] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.449] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:37.449] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.449] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.449] |  :  .  |   - attr(*, "where")=List of 5
[10:49:37.449] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.449] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.449] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.449] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.449] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.449] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.449] |  :  .  |   - attr(*, "total_size")= num 19977
[10:49:37.449] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.449] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.458] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:37.458] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.458] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.458] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.458] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.458] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.458] |  :  .  |  assign_globals() ... done
[10:49:37.462] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.462] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.462] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.462] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.463] |  :  .  |  :  .  |  :  New stack:
[10:49:37.463] |  :  .  |  :  .  |  :  List of 1
[10:49:37.463] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.463] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.463] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.463] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.463] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.463] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.463] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.463] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.463] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.463] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.463] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.463] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.463] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.466] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.466] |  :  .  |  :  .  |  :  List of 1
[10:49:37.466] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.466] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.466] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.466] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.466] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.466] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.466] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.468] |  :  .  |  :  .  |  :  Not identical
[10:49:37.468] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:37.469] |  :  .  |  :  .  |  :  .  List of 2
[10:49:37.469] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.469] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.469] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.469] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.469] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.469] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.469] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.469] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.473] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:37.474] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:37.474] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:37.474] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.474] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:37.474] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.474] |  :  .  |  :  .  |  1. multisession:
[10:49:37.474] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:37.474] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.474] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.474] |  :  .  |  :  .  |  List of 1
[10:49:37.474] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.474] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.474] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.474] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.474] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.474] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.474] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.474] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.474] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.474] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.474] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.474] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.474] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.478] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.478] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.478] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.478] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.478] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.478] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:37.479] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.479] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.479] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.479] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.479] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.479] |  :  Launching futures ... done
[10:49:37.479] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.479] |  Using SequentialFutureBackend ... done
[10:49:37.480] run() for Future (‘SequentialFuture’) ... done
[10:49:37.480] Created future:
[10:49:37.480] SequentialFuture:
[10:49:37.480] Label: ‘future_by-1’
[10:49:37.480] Expression:
[10:49:37.480] {
[10:49:37.480]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.480]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.480]     "# as a global variable                                         "
[10:49:37.480]     do.call(function(...) {
[10:49:37.480]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:37.480]         "# without having an '...' argument. This means '...' is treated"
[10:49:37.480]         "# as a global variable. This may happen when FUN() is an       "
[10:49:37.480]         "# anonymous function.                                          "
[10:49:37.480]         "#                                                              "
[10:49:37.480]         "# If an anonymous function, we will make sure to restore the   "
[10:49:37.480]         "# function environment of FUN() to the calling environment.    "
[10:49:37.480]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:37.480]         "# global environment, which is where globals are written.      "
[10:49:37.480]         penv <- env <- environment(...future.FUN)
[10:49:37.480]         repeat {
[10:49:37.480]             if (identical(env, globalenv()) || identical(env, 
[10:49:37.480]                 emptyenv())) 
[10:49:37.480]                 break
[10:49:37.480]             penv <- env
[10:49:37.480]             env <- parent.env(env)
[10:49:37.480]         }
[10:49:37.480]         if (identical(penv, globalenv())) {
[10:49:37.480]             environment(...future.FUN) <- environment()
[10:49:37.480]         }
[10:49:37.480]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:37.480]             !isNamespace(penv)) {
[10:49:37.480]             parent.env(penv) <- environment()
[10:49:37.480]         }
[10:49:37.480]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:37.480]         {
[10:49:37.480]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.480]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.480]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.480]                 on.exit(options(oopts), add = TRUE)
[10:49:37.480]             }
[10:49:37.480]             {
[10:49:37.480]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.480]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.480]                   ...future.FUN(...future.X_jj, ...)
[10:49:37.480]                 })
[10:49:37.480]             }
[10:49:37.480]         }
[10:49:37.480]     }, args = future.call.arguments)
[10:49:37.480] }
[10:49:37.480] Lazy evaluation: FALSE
[10:49:37.480] Asynchronous evaluation: TRUE
[10:49:37.480] Local evaluation: TRUE
[10:49:37.480] Environment: R_GlobalEnv
[10:49:37.480] Capture standard output: TRUE
[10:49:37.480] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.480] Immediate condition classes: ‘immediateCondition’
[10:49:37.480] Globals: 5 objects totaling 2.93 KiB (function ‘...future.FUN’ of 762 bytes, DotDotDotList ‘future.call.arguments’ of 157 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:37.480] Packages: 1 packages (‘stats’)
[10:49:37.480] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.480] Resolved: TRUE
[10:49:37.480] Value: 14.12 KiB of class ‘list’
[10:49:37.480] Early signaling: FALSE
[10:49:37.480] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.480] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.481] Chunk #1 of 1 ... DONE
[10:49:37.481] Launching 1 futures (chunks) ... DONE
[10:49:37.481] Resolving 1 futures (chunks) ...
[10:49:37.481] value() on list ...
[10:49:37.481] |  recursive: 0
[10:49:37.481] |  length: 1
[10:49:37.482] |  
[10:49:37.482] |  Number of remaining objects: 1
[10:49:37.482] |  checking value #1 ...
[10:49:37.482] |  :  'obj' is SequentialFuture
[10:49:37.482] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.482] |  :  .  state: ‘finished’
[10:49:37.482] |  :  .  run: TRUE
[10:49:37.482] |  :  .  result: ‘FutureResult’
[10:49:37.482] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.482] |  :  SequentialFuture #1
[10:49:37.483] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.483] |  :  .  nx: 1
[10:49:37.483] |  :  .  relay: TRUE
[10:49:37.483] |  :  .  stdout: TRUE
[10:49:37.483] |  :  .  signal: TRUE
[10:49:37.483] |  :  .  resignal: FALSE
[10:49:37.483] |  :  .  force: TRUE
[10:49:37.483] |  :  .  relayed: [n=1] FALSE
[10:49:37.483] |  :  .  queued futures: [n=1] FALSE
[10:49:37.483] |  :  .  until=1
[10:49:37.483] |  :  .  relaying element #1
[10:49:37.484] |  :  .  relayed: [n=1] TRUE
[10:49:37.484] |  :  .  queued futures: [n=1] TRUE
[10:49:37.484] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.484] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.484] |  :  .  value: <list>
[10:49:37.484] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.484] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.484] |  :  .  nx: 1
[10:49:37.484] |  :  .  relay: TRUE
[10:49:37.485] |  :  .  stdout: TRUE
[10:49:37.485] |  :  .  signal: TRUE
[10:49:37.485] |  :  .  resignal: FALSE
[10:49:37.485] |  :  .  force: TRUE
[10:49:37.485] |  :  .  relayed: [n=1] TRUE
[10:49:37.485] |  :  .  queued futures: [n=1] TRUE
[10:49:37.485] |  :  .  until=1
[10:49:37.485] |  :  .  relayed: [n=1] TRUE
[10:49:37.485] |  :  .  queued futures: [n=1] TRUE
[10:49:37.485] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.485] |  :  length: 0 (resolved future 1)
[10:49:37.486] |  checking value #1 ... done
[10:49:37.486] |  Relaying remaining futures ...
[10:49:37.486] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.486] |  :  .  nx: 1
[10:49:37.486] |  :  .  relay: TRUE
[10:49:37.486] |  :  .  stdout: TRUE
[10:49:37.486] |  :  .  signal: TRUE
[10:49:37.486] |  :  .  resignal: FALSE
[10:49:37.486] |  :  .  force: TRUE
[10:49:37.486] |  :  .  relayed: [n=1] TRUE
[10:49:37.486] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.487] |  :  .  relayed: [n=1] TRUE
[10:49:37.487] |  :  .  queued futures: [n=1] TRUE
[10:49:37.487] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.487] |  Relaying remaining futures ... done
[10:49:37.487] value() on list ... done
[10:49:37.487]  - Number of value chunks collected: 1
[10:49:37.487] Resolving 1 futures (chunks) ... DONE
[10:49:37.487] Reducing values from 1 chunks ...
[10:49:37.487]  - Number of values collected after concatenation: 3
[10:49:37.487]  - Number of values expected: 3
[10:49:37.487] Reducing values from 1 chunks ... DONE
[10:49:37.488] future_lapply() ... DONE
[10:49:37.488] future_by_internal() ... DONE
[10:49:37.493] future_by_internal() ...
[10:49:37.494] future_lapply() ...
[10:49:37.495] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.495] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.495] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.495] Number of chunks: 1
[10:49:37.495] getGlobalsAndPackagesXApply() ...
[10:49:37.495]  - future.globals: TRUE
[10:49:37.495] getGlobalsAndPackages() ...
[10:49:37.496] |  Searching for globals ...
[10:49:37.497] |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:37.497] |  Searching for globals ... DONE
[10:49:37.498] |  Resolving globals: FALSE
[10:49:37.498] |  Search for packages associated with the globals ...
[10:49:37.498] |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:37.498] |  :  Packages: [2] ‘base’, ‘stats’
[10:49:37.498] |  Search for packages associated with the globals ... DONE
[10:49:37.498] |  The total size of the 3 globals is 2.07 KiB (2118 bytes)
[10:49:37.499] |  The total size of the 3 globals exported for future expression (‘FUN()’) is 2.07 KiB There are three globals: ‘FUN’ (1.28 KiB of class ‘function’), ‘breaks’ (463 bytes of class ‘numeric’) and ‘wool’ (342 bytes of class ‘numeric’)
[10:49:37.499] |  Packages after dropping 'base': [1] ‘stats’
[10:49:37.499] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:37.499] |  globals: [3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:37.499] |  packages: [1] ‘stats’
[10:49:37.499] getGlobalsAndPackages() ... done
[10:49:37.500]  - globals found/used: [n=3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:37.500]  - needed namespaces: [n=1] ‘stats’
[10:49:37.500] Finding globals ... DONE
[10:49:37.500]  - use_args: TRUE
[10:49:37.500]  - Getting '...' globals ...
[10:49:37.500] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.500] |  recursive: 0
[10:49:37.501] |  length: 1
[10:49:37.501] |  elements: ‘...’
[10:49:37.501] |  'obj' is DotDotDotList
[10:49:37.501] |  resolve(obj, ...) ...
[10:49:37.501] |  resolve(obj, ...) ... done
[10:49:37.501] |  length: 0 (resolved future 1)
[10:49:37.501] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.501]    - '...' content: [n=0] 
[10:49:37.501] List of 1
[10:49:37.501]  $ ...: list()
[10:49:37.501]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.501]  - attr(*, "where")=List of 1
[10:49:37.501]   ..$ ...:<environment: 0x5564a67970e8> 
[10:49:37.501]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.501]  - attr(*, "resolved")= logi TRUE
[10:49:37.501]  - attr(*, "total_size")= num NA
[10:49:37.504]  - Getting '...' globals ... DONE
[10:49:37.504] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’
[10:49:37.504] List of 4
[10:49:37.504]  $ ...future.FUN:function (x)  
[10:49:37.504]  $ breaks       : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:37.504]  $ wool         : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.504]  $ ...          : list()
[10:49:37.504]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.504]  - attr(*, "where")=List of 4
[10:49:37.504]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.504]   ..$ breaks       :<environment: R_EmptyEnv> 
[10:49:37.504]   ..$ wool         :<environment: R_EmptyEnv> 
[10:49:37.504]   ..$ ...          :<environment: 0x5564a67970e8> 
[10:49:37.504]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.504]  - attr(*, "resolved")= logi FALSE
[10:49:37.504]  - attr(*, "total_size")= num 18867
[10:49:37.508] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:37.508] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.508] Number of futures (= number of chunks): 1
[10:49:37.508] Launching 1 futures (chunks) ...
[10:49:37.509] Chunk #1 of 1 ...
[10:49:37.509]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.509] getGlobalsAndPackages() ...
[10:49:37.509] |  Searching for globals ...
[10:49:37.509] |  :  globals found: [0] 
[10:49:37.509] |  Searching for globals ... DONE
[10:49:37.510] |  globals: [0] <none>
[10:49:37.510] |  packages: [0] <none>
[10:49:37.510] getGlobalsAndPackages() ... done
[10:49:37.510]    + additional globals found: [n=0] 
[10:49:37.510]    + additional namespaces needed: [n=0] 
[10:49:37.510]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.510]  - seeds: <none>
[10:49:37.510]  - All globals exported: [n=7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.510] getGlobalsAndPackages() ...
[10:49:37.510] |  globals passed as-is: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.511] |  Resolving globals: FALSE
[10:49:37.511] |  Tweak future expression to call with '...' arguments ...
[10:49:37.511] |  :  {
[10:49:37.511] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.511] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.511] |  :      "# as a global variable                                         "
[10:49:37.511] |  :      do.call(function(...) {
[10:49:37.511] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:37.511] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:37.511] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:37.511] |  :          "# anonymous function.                                          "
[10:49:37.511] |  :          "#                                                              "
[10:49:37.511] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:37.511] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:37.511] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:37.511] |  :          "# global environment, which is where globals are written.      "
[10:49:37.511] |  :          penv <- env <- environment(...future.FUN)
[10:49:37.511] |  :          repeat {
[10:49:37.511] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:37.511] |  :                  emptyenv())) 
[10:49:37.511] |  :                  break
[10:49:37.511] |  :              penv <- env
[10:49:37.511] |  :              env <- parent.env(env)
[10:49:37.511] |  :          }
[10:49:37.511] |  :          if (identical(penv, globalenv())) {
[10:49:37.511] |  :              environment(...future.FUN) <- environment()
[10:49:37.511] |  :          }
[10:49:37.511] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:37.511] |  :              !isNamespace(penv)) {
[10:49:37.511] |  :              parent.env(penv) <- environment()
[10:49:37.511] |  :          }
[10:49:37.511] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:37.511] |  :          {
[10:49:37.511] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.511] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.511] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.511] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:37.511] |  :              }
[10:49:37.511] |  :              {
[10:49:37.511] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.511] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.511] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:37.511] |  :                  })
[10:49:37.511] |  :              }
[10:49:37.511] |  :          }
[10:49:37.511] |  :      }, args = future.call.arguments)
[10:49:37.511] |  :  }
[10:49:37.511] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.511] |  Search for packages associated with the globals ...
[10:49:37.512] |  :  Packages associated with globals: [0] 
[10:49:37.512] |  :  Packages: [0] 
[10:49:37.512] |  Search for packages associated with the globals ... DONE
[10:49:37.512] |  Packages after dropping 'base': [0] 
[10:49:37.512] |  globals: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.512] |  packages: [0] 
[10:49:37.512] getGlobalsAndPackages() ... done
[10:49:37.513] run() for Future (‘Future’) ...
[10:49:37.513] |  state: ‘created’
[10:49:37.513] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.513] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.513] |  Using SequentialFutureBackend ...
[10:49:37.513] |  :  Launching futures ...
[10:49:37.513] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.513] |  :  .  |  getFutureData() ...
[10:49:37.513] |  :  .  |  :  getFutureCore() ...
[10:49:37.514] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:37.514] |  :  .  |  :  getFutureCore() ... done
[10:49:37.514] |  :  .  |  :  getFutureCapture() ...
[10:49:37.514] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.514] |  :  .  |  :  getFutureContext() ...
[10:49:37.514] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.514] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.514] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.514] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.514] |  :  .  |  :  getFutureContext() ... done
[10:49:37.515] |  :  .  |  getFutureData() ... done
[10:49:37.515] |  :  .  |  attachPackages() ...
[10:49:37.515] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.515] |  :  .  |  attachPackages() ... DONE
[10:49:37.515] |  :  .  |  attachPackages() ...
[10:49:37.515] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:37.515] |  :  .  |  attachPackages() ... DONE
[10:49:37.516] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.516] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.516] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.516] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.516] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.516] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.517] |  :  .  |  :  .  |  New stack:
[10:49:37.517] |  :  .  |  :  .  |  List of 1
[10:49:37.517] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.517] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.517] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.517] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.517] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.517] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.517] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.519] |  :  .  |  :  .  |  Old stack:
[10:49:37.519] |  :  .  |  :  .  |  List of 1
[10:49:37.519] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.519] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.519] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.519] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.519] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.519] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.519] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.519] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.519] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.519] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.519] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.519] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.519] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.522] |  :  .  |  :  .  |  Not identical
[10:49:37.523] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.523] |  :  .  |  :  .  |  :  List of 2
[10:49:37.523] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.523] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.523] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.523] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.523] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.523] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.523] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.523] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.527] |  :  .  |  :  .  |  :  Formals differ
[10:49:37.528] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.528] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:37.528] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.528] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:37.528] |  :  .  |  :  .  List of future strategies:
[10:49:37.528] |  :  .  |  :  .  1. sequential:
[10:49:37.528] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.528] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.528] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.528] |  :  .  |  :  .  List of 1
[10:49:37.528] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.528] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.528] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.528] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.528] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.528] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.528] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.531] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.531] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.531] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.531] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.531] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.531] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:37.532] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.532] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:37.532] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.532] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.532] |  :  .  |  assign_globals() ...
[10:49:37.532] |  :  .  |  List of 7
[10:49:37.532] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:37.532] |  :  .  |   $ breaks                   : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:37.532] |  :  .  |   $ wool                     : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.532] |  :  .  |   $ future.call.arguments    : list()
[10:49:37.532] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.532] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.532] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.532] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.532] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.532] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.532] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.532] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.532] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.532] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:37.532] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.532] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.532] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.532] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:37.532] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.532] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.532] |  :  .  |   - attr(*, "where")=List of 7
[10:49:37.532] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.532] |  :  .  |    ..$ breaks                   :<environment: R_EmptyEnv> 
[10:49:37.532] |  :  .  |    ..$ wool                     :<environment: R_EmptyEnv> 
[10:49:37.532] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.532] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.532] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.532] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.532] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.532] |  :  .  |   - attr(*, "total_size")= num 18867
[10:49:37.532] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.532] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.542] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:37.542] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.542] |  :  .  |  - copied ‘breaks’ to environment
[10:49:37.542] |  :  .  |  - copied ‘wool’ to environment
[10:49:37.543] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.543] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.543] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.543] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.543] |  :  .  |  assign_globals() ... done
[10:49:37.546] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.547] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.547] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.547] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.547] |  :  .  |  :  .  |  :  New stack:
[10:49:37.547] |  :  .  |  :  .  |  :  List of 1
[10:49:37.547] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.547] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.547] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.547] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.547] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.547] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.547] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.547] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.547] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.547] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.547] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.547] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.547] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.551] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.551] |  :  .  |  :  .  |  :  List of 1
[10:49:37.551] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.551] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.551] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.551] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.551] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.551] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.551] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.553] |  :  .  |  :  .  |  :  Not identical
[10:49:37.553] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:37.553] |  :  .  |  :  .  |  :  .  List of 2
[10:49:37.553] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.553] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.553] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.553] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.553] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.553] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.553] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.553] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.558] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:37.558] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:37.558] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:37.558] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.558] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:37.558] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.558] |  :  .  |  :  .  |  1. multisession:
[10:49:37.558] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:37.558] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.558] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.559] |  :  .  |  :  .  |  List of 1
[10:49:37.559] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.559] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.559] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.559] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.559] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.559] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.559] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.559] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.559] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.559] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.559] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.559] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.559] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.562] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.562] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.563] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.563] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.563] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.563] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:37.563] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.563] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.563] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.563] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.564] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.564] |  :  Launching futures ... done
[10:49:37.564] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.564] |  Using SequentialFutureBackend ... done
[10:49:37.564] run() for Future (‘SequentialFuture’) ... done
[10:49:37.564] Created future:
[10:49:37.564] SequentialFuture:
[10:49:37.564] Label: ‘future_by-1’
[10:49:37.564] Expression:
[10:49:37.564] {
[10:49:37.564]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.564]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.564]     "# as a global variable                                         "
[10:49:37.564]     do.call(function(...) {
[10:49:37.564]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:37.564]         "# without having an '...' argument. This means '...' is treated"
[10:49:37.564]         "# as a global variable. This may happen when FUN() is an       "
[10:49:37.564]         "# anonymous function.                                          "
[10:49:37.564]         "#                                                              "
[10:49:37.564]         "# If an anonymous function, we will make sure to restore the   "
[10:49:37.564]         "# function environment of FUN() to the calling environment.    "
[10:49:37.564]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:37.564]         "# global environment, which is where globals are written.      "
[10:49:37.564]         penv <- env <- environment(...future.FUN)
[10:49:37.564]         repeat {
[10:49:37.564]             if (identical(env, globalenv()) || identical(env, 
[10:49:37.564]                 emptyenv())) 
[10:49:37.564]                 break
[10:49:37.564]             penv <- env
[10:49:37.564]             env <- parent.env(env)
[10:49:37.564]         }
[10:49:37.564]         if (identical(penv, globalenv())) {
[10:49:37.564]             environment(...future.FUN) <- environment()
[10:49:37.564]         }
[10:49:37.564]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:37.564]             !isNamespace(penv)) {
[10:49:37.564]             parent.env(penv) <- environment()
[10:49:37.564]         }
[10:49:37.564]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:37.564]         {
[10:49:37.564]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.564]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.564]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.564]                 on.exit(options(oopts), add = TRUE)
[10:49:37.564]             }
[10:49:37.564]             {
[10:49:37.564]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.564]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.564]                   ...future.FUN(...future.X_jj, ...)
[10:49:37.564]                 })
[10:49:37.564]             }
[10:49:37.564]         }
[10:49:37.564]     }, args = future.call.arguments)
[10:49:37.564] }
[10:49:37.564] Lazy evaluation: FALSE
[10:49:37.564] Asynchronous evaluation: TRUE
[10:49:37.564] Local evaluation: TRUE
[10:49:37.564] Environment: 0x5564a67c38d8
[10:49:37.564] Capture standard output: TRUE
[10:49:37.564] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.564] Immediate condition classes: ‘immediateCondition’
[10:49:37.564] Globals: 7 objects totaling 4.20 KiB (function ‘...future.FUN’ of 1.28 KiB, numeric ‘breaks’ of 463 bytes, factor ‘wool’ of 342 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, ...)
[10:49:37.564] Packages: 1 packages (‘stats’)
[10:49:37.564] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.564] Resolved: TRUE
[10:49:37.564] Value: 13.80 KiB of class ‘list’
[10:49:37.564] Early signaling: FALSE
[10:49:37.564] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.564] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.567] Chunk #1 of 1 ... DONE
[10:49:37.567] Launching 1 futures (chunks) ... DONE
[10:49:37.567] Resolving 1 futures (chunks) ...
[10:49:37.567] value() on list ...
[10:49:37.568] |  recursive: 0
[10:49:37.568] |  length: 1
[10:49:37.568] |  
[10:49:37.568] |  Number of remaining objects: 1
[10:49:37.568] |  checking value #1 ...
[10:49:37.568] |  :  'obj' is SequentialFuture
[10:49:37.568] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.568] |  :  .  state: ‘finished’
[10:49:37.568] |  :  .  run: TRUE
[10:49:37.568] |  :  .  result: ‘FutureResult’
[10:49:37.568] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.569] |  :  SequentialFuture #1
[10:49:37.569] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.569] |  :  .  nx: 1
[10:49:37.569] |  :  .  relay: TRUE
[10:49:37.569] |  :  .  stdout: TRUE
[10:49:37.569] |  :  .  signal: TRUE
[10:49:37.569] |  :  .  resignal: FALSE
[10:49:37.569] |  :  .  force: TRUE
[10:49:37.569] |  :  .  relayed: [n=1] FALSE
[10:49:37.569] |  :  .  queued futures: [n=1] FALSE
[10:49:37.569] |  :  .  until=1
[10:49:37.569] |  :  .  relaying element #1
[10:49:37.570] |  :  .  relayed: [n=1] TRUE
[10:49:37.570] |  :  .  queued futures: [n=1] TRUE
[10:49:37.570] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.570] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.570] |  :  .  value: <list>
[10:49:37.570] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.570] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.570] |  :  .  nx: 1
[10:49:37.570] |  :  .  relay: TRUE
[10:49:37.571] |  :  .  stdout: TRUE
[10:49:37.571] |  :  .  signal: TRUE
[10:49:37.571] |  :  .  resignal: FALSE
[10:49:37.571] |  :  .  force: TRUE
[10:49:37.571] |  :  .  relayed: [n=1] TRUE
[10:49:37.571] |  :  .  queued futures: [n=1] TRUE
[10:49:37.571] |  :  .  until=1
[10:49:37.571] |  :  .  relayed: [n=1] TRUE
[10:49:37.571] |  :  .  queued futures: [n=1] TRUE
[10:49:37.571] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.571] |  :  length: 0 (resolved future 1)
[10:49:37.572] |  checking value #1 ... done
[10:49:37.572] |  Relaying remaining futures ...
[10:49:37.572] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.572] |  :  .  nx: 1
[10:49:37.572] |  :  .  relay: TRUE
[10:49:37.572] |  :  .  stdout: TRUE
[10:49:37.572] |  :  .  signal: TRUE
[10:49:37.572] |  :  .  resignal: FALSE
[10:49:37.572] |  :  .  force: TRUE
[10:49:37.572] |  :  .  relayed: [n=1] TRUE
[10:49:37.572] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.573] |  :  .  relayed: [n=1] TRUE
[10:49:37.573] |  :  .  queued futures: [n=1] TRUE
[10:49:37.573] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.573] |  Relaying remaining futures ... done
[10:49:37.573] value() on list ... done
[10:49:37.573]  - Number of value chunks collected: 1
[10:49:37.573] Resolving 1 futures (chunks) ... DONE
[10:49:37.573] Reducing values from 1 chunks ...
[10:49:37.573]  - Number of values collected after concatenation: 3
[10:49:37.573]  - Number of values expected: 3
[10:49:37.573] Reducing values from 1 chunks ... DONE
[10:49:37.574] future_lapply() ... DONE
[10:49:37.574] future_by_internal() ... DONE
[10:49:37.574] future_by_internal() ...
[10:49:37.574] future_lapply() ...
[10:49:37.575] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.575] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.575] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.575] Number of chunks: 1
[10:49:37.575] getGlobalsAndPackagesXApply() ...
[10:49:37.576]  - future.globals: TRUE
[10:49:37.576] getGlobalsAndPackages() ...
[10:49:37.576] |  Searching for globals ...
[10:49:37.577] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:37.577] |  Searching for globals ... DONE
[10:49:37.577] |  Resolving globals: FALSE
[10:49:37.577] |  Search for packages associated with the globals ...
[10:49:37.577] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.578] |  :  Packages: [1] ‘base’
[10:49:37.578] |  Search for packages associated with the globals ... DONE
[10:49:37.578] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:37.578] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:37.578] |  Packages after dropping 'base': [0] 
[10:49:37.578] |  globals: [1] ‘FUN’
[10:49:37.578] |  packages: [0] 
[10:49:37.579] getGlobalsAndPackages() ... done
[10:49:37.579]  - globals found/used: [n=1] ‘FUN’
[10:49:37.579]  - needed namespaces: [n=0] 
[10:49:37.579] Finding globals ... DONE
[10:49:37.579]  - use_args: TRUE
[10:49:37.579]  - Getting '...' globals ...
[10:49:37.579] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.579] |  recursive: 0
[10:49:37.580] |  length: 1
[10:49:37.580] |  elements: ‘...’
[10:49:37.580] |  'obj' is DotDotDotList
[10:49:37.580] |  resolve(obj, ...) ...
[10:49:37.580] |  resolve(obj, ...) ... done
[10:49:37.580] |  length: 0 (resolved future 1)
[10:49:37.580] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.580]    - '...' content: [n=0] 
[10:49:37.580] List of 1
[10:49:37.580]  $ ...: list()
[10:49:37.580]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.580]  - attr(*, "where")=List of 1
[10:49:37.580]   ..$ ...:<environment: 0x5564a6011b70> 
[10:49:37.580]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.580]  - attr(*, "resolved")= logi TRUE
[10:49:37.580]  - attr(*, "total_size")= num NA
[10:49:37.583]  - Getting '...' globals ... DONE
[10:49:37.583] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:37.583] List of 2
[10:49:37.583]  $ ...future.FUN:function (object, ...)  
[10:49:37.583]  $ ...          : list()
[10:49:37.583]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.583]  - attr(*, "where")=List of 2
[10:49:37.583]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.583]   ..$ ...          :<environment: 0x5564a6011b70> 
[10:49:37.583]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.583]  - attr(*, "resolved")= logi FALSE
[10:49:37.583]  - attr(*, "total_size")= num 19278
[10:49:37.586] Packages to be attached in all futures: [n=0] 
[10:49:37.586] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.586] Number of futures (= number of chunks): 1
[10:49:37.586] Launching 1 futures (chunks) ...
[10:49:37.587] Chunk #1 of 1 ...
[10:49:37.587]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.587] getGlobalsAndPackages() ...
[10:49:37.587] |  Searching for globals ...
[10:49:37.587] |  :  globals found: [0] 
[10:49:37.587] |  Searching for globals ... DONE
[10:49:37.588] |  globals: [0] <none>
[10:49:37.588] |  packages: [0] <none>
[10:49:37.588] getGlobalsAndPackages() ... done
[10:49:37.588]    + additional globals found: [n=0] 
[10:49:37.588]    + additional namespaces needed: [n=0] 
[10:49:37.588]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.588]  - seeds: <none>
[10:49:37.588]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.588] getGlobalsAndPackages() ...
[10:49:37.588] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.588] |  Resolving globals: FALSE
[10:49:37.589] |  Tweak future expression to call with '...' arguments ...
[10:49:37.589] |  :  {
[10:49:37.589] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.589] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.589] |  :      "# as a global variable                                         "
[10:49:37.589] |  :      do.call(function(...) {
[10:49:37.589] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.589] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.589] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.589] |  :              on.exit(options(oopts), add = TRUE)
[10:49:37.589] |  :          }
[10:49:37.589] |  :          {
[10:49:37.589] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.589] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.589] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:37.589] |  :              })
[10:49:37.589] |  :          }
[10:49:37.589] |  :      }, args = future.call.arguments)
[10:49:37.589] |  :  }
[10:49:37.589] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.589] |  Search for packages associated with the globals ...
[10:49:37.589] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.590] |  :  Packages: [1] ‘base’
[10:49:37.590] |  Search for packages associated with the globals ... DONE
[10:49:37.590] |  Packages after dropping 'base': [0] 
[10:49:37.590] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.590] |  packages: [0] 
[10:49:37.590] getGlobalsAndPackages() ... done
[10:49:37.590] run() for Future (‘Future’) ...
[10:49:37.591] |  state: ‘created’
[10:49:37.591] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.591] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.591] |  Using SequentialFutureBackend ...
[10:49:37.591] |  :  Launching futures ...
[10:49:37.591] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.591] |  :  .  |  getFutureData() ...
[10:49:37.591] |  :  .  |  :  getFutureCore() ...
[10:49:37.591] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:37.591] |  :  .  |  :  getFutureCore() ... done
[10:49:37.592] |  :  .  |  :  getFutureCapture() ...
[10:49:37.592] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.592] |  :  .  |  :  getFutureContext() ...
[10:49:37.592] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.592] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.592] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.592] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.592] |  :  .  |  :  getFutureContext() ... done
[10:49:37.592] |  :  .  |  getFutureData() ... done
[10:49:37.593] |  :  .  |  attachPackages() ...
[10:49:37.593] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.593] |  :  .  |  attachPackages() ... DONE
[10:49:37.593] |  :  .  |  attachPackages() ...
[10:49:37.593] |  :  .  |  :  packages: [n=0] 
[10:49:37.593] |  :  .  |  attachPackages() ... DONE
[10:49:37.593] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.594] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.594] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.594] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.594] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.594] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.594] |  :  .  |  :  .  |  New stack:
[10:49:37.594] |  :  .  |  :  .  |  List of 1
[10:49:37.594] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.594] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.594] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.594] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.594] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.594] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.594] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.597] |  :  .  |  :  .  |  Old stack:
[10:49:37.597] |  :  .  |  :  .  |  List of 1
[10:49:37.597] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.597] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.597] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.597] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.597] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.597] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.597] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.597] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.597] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.597] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.597] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.597] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.597] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.600] |  :  .  |  :  .  |  Not identical
[10:49:37.600] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.600] |  :  .  |  :  .  |  :  List of 2
[10:49:37.600] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.600] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.600] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.600] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.600] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.600] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.600] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.600] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.605] |  :  .  |  :  .  |  :  Formals differ
[10:49:37.605] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.606] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:37.606] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.606] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:37.606] |  :  .  |  :  .  List of future strategies:
[10:49:37.606] |  :  .  |  :  .  1. sequential:
[10:49:37.606] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.606] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.606] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.606] |  :  .  |  :  .  List of 1
[10:49:37.606] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.606] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.606] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.606] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.606] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.606] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.606] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.608] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.609] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.609] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.609] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.609] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.609] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:37.609] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.609] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:37.610] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.610] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.610] |  :  .  |  assign_globals() ...
[10:49:37.610] |  :  .  |  List of 5
[10:49:37.610] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:37.610] |  :  .  |   $ future.call.arguments    : list()
[10:49:37.610] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.610] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.610] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.610] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.610] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.610] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.610] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.610] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.610] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.610] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:37.610] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.610] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.610] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.610] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:37.610] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.610] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.610] |  :  .  |   - attr(*, "where")=List of 5
[10:49:37.610] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.610] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.610] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.610] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.610] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.610] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.610] |  :  .  |   - attr(*, "total_size")= num 19278
[10:49:37.610] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.610] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.619] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.619] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.619] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.619] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.619] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.619] |  :  .  |  assign_globals() ... done
[10:49:37.622] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.623] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.623] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.623] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.623] |  :  .  |  :  .  |  :  New stack:
[10:49:37.623] |  :  .  |  :  .  |  :  List of 1
[10:49:37.623] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.623] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.623] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.623] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.623] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.623] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.623] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.623] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.623] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.623] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.623] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.623] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.623] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.627] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.627] |  :  .  |  :  .  |  :  List of 1
[10:49:37.627] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.627] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.627] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.627] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.627] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.627] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.627] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.629] |  :  .  |  :  .  |  :  Not identical
[10:49:37.629] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:37.629] |  :  .  |  :  .  |  :  .  List of 2
[10:49:37.629] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.629] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.629] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.629] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.629] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.629] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.629] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.629] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.634] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:37.634] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:37.634] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:37.634] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.634] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:37.634] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.634] |  :  .  |  :  .  |  1. multisession:
[10:49:37.634] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:37.634] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.634] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.635] |  :  .  |  :  .  |  List of 1
[10:49:37.635] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.635] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.635] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.635] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.635] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.635] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.635] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.635] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.635] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.635] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.635] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.635] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.635] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.638] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.638] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.638] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.639] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.639] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.639] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:37.639] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.639] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.639] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.639] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.639] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.640] |  :  Launching futures ... done
[10:49:37.640] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.640] |  Using SequentialFutureBackend ... done
[10:49:37.640] run() for Future (‘SequentialFuture’) ... done
[10:49:37.640] Created future:
[10:49:37.640] SequentialFuture:
[10:49:37.640] Label: ‘future_by-1’
[10:49:37.640] Expression:
[10:49:37.640] {
[10:49:37.640]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.640]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.640]     "# as a global variable                                         "
[10:49:37.640]     do.call(function(...) {
[10:49:37.640]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.640]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.640]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.640]             on.exit(options(oopts), add = TRUE)
[10:49:37.640]         }
[10:49:37.640]         {
[10:49:37.640]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.640]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.640]                 ...future.FUN(...future.X_jj, ...)
[10:49:37.640]             })
[10:49:37.640]         }
[10:49:37.640]     }, args = future.call.arguments)
[10:49:37.640] }
[10:49:37.640] Lazy evaluation: FALSE
[10:49:37.640] Asynchronous evaluation: TRUE
[10:49:37.640] Local evaluation: TRUE
[10:49:37.640] Environment: 0x5564a60a1e88
[10:49:37.640] Capture standard output: TRUE
[10:49:37.640] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.640] Immediate condition classes: ‘immediateCondition’
[10:49:37.640] Globals: 5 objects totaling 2.41 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:37.640] Packages: <none>
[10:49:37.640] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.640] Resolved: TRUE
[10:49:37.640] Value: 1.39 KiB of class ‘list’
[10:49:37.640] Early signaling: FALSE
[10:49:37.640] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.640] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.643] Chunk #1 of 1 ... DONE
[10:49:37.643] Launching 1 futures (chunks) ... DONE
[10:49:37.643] Resolving 1 futures (chunks) ...
[10:49:37.643] value() on list ...
[10:49:37.643] |  recursive: 0
[10:49:37.643] |  length: 1
[10:49:37.643] |  
[10:49:37.643] |  Number of remaining objects: 1
[10:49:37.644] |  checking value #1 ...
[10:49:37.644] |  :  'obj' is SequentialFuture
[10:49:37.644] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.644] |  :  .  state: ‘finished’
[10:49:37.644] |  :  .  run: TRUE
[10:49:37.644] |  :  .  result: ‘FutureResult’
[10:49:37.644] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.644] |  :  SequentialFuture #1
[10:49:37.644] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.644] |  :  .  nx: 1
[10:49:37.644] |  :  .  relay: TRUE
[10:49:37.645] |  :  .  stdout: TRUE
[10:49:37.645] |  :  .  signal: TRUE
[10:49:37.645] |  :  .  resignal: FALSE
[10:49:37.645] |  :  .  force: TRUE
[10:49:37.645] |  :  .  relayed: [n=1] FALSE
[10:49:37.645] |  :  .  queued futures: [n=1] FALSE
[10:49:37.645] |  :  .  until=1
[10:49:37.645] |  :  .  relaying element #1
[10:49:37.645] |  :  .  relayed: [n=1] TRUE
[10:49:37.645] |  :  .  queued futures: [n=1] TRUE
[10:49:37.646] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.646] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.646] |  :  .  value: <list>
[10:49:37.646] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.646] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.646] |  :  .  nx: 1
[10:49:37.646] |  :  .  relay: TRUE
[10:49:37.646] |  :  .  stdout: TRUE
[10:49:37.646] |  :  .  signal: TRUE
[10:49:37.646] |  :  .  resignal: FALSE
[10:49:37.646] |  :  .  force: TRUE
[10:49:37.646] |  :  .  relayed: [n=1] TRUE
[10:49:37.647] |  :  .  queued futures: [n=1] TRUE
[10:49:37.647] |  :  .  until=1
[10:49:37.647] |  :  .  relayed: [n=1] TRUE
[10:49:37.647] |  :  .  queued futures: [n=1] TRUE
[10:49:37.647] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.647] |  :  length: 0 (resolved future 1)
[10:49:37.647] |  checking value #1 ... done
[10:49:37.647] |  Relaying remaining futures ...
[10:49:37.647] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.647] |  :  .  nx: 1
[10:49:37.648] |  :  .  relay: TRUE
[10:49:37.648] |  :  .  stdout: TRUE
[10:49:37.648] |  :  .  signal: TRUE
[10:49:37.648] |  :  .  resignal: FALSE
[10:49:37.648] |  :  .  force: TRUE
[10:49:37.648] |  :  .  relayed: [n=1] TRUE
[10:49:37.648] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.648] |  :  .  relayed: [n=1] TRUE
[10:49:37.648] |  :  .  queued futures: [n=1] TRUE
[10:49:37.648] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.648] |  Relaying remaining futures ... done
[10:49:37.649] value() on list ... done
[10:49:37.649]  - Number of value chunks collected: 1
[10:49:37.649] Resolving 1 futures (chunks) ... DONE
[10:49:37.649] Reducing values from 1 chunks ...
[10:49:37.649]  - Number of values collected after concatenation: 3
[10:49:37.649]  - Number of values expected: 3
[10:49:37.649] Reducing values from 1 chunks ... DONE
[10:49:37.649] future_lapply() ... DONE
[10:49:37.649] future_by_internal() ... DONE
[10:49:37.650] future_by_internal() ...
Warning in future_by_match_FUN(FUN) :
  Specifying the function 'FUN' for future_by() as a character string is deprecated in future.apply (>= 1.10.0) [2022-11-04], because base::by() does not support it. Instead, specify it as a function, e.g. FUN = sqrt and FUN = `[[`. It is deprecated.
[10:49:37.650] future_lapply() ...
[10:49:37.651] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.651] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.651] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.651] Number of chunks: 1
[10:49:37.651] getGlobalsAndPackagesXApply() ...
[10:49:37.652]  - future.globals: TRUE
[10:49:37.652] getGlobalsAndPackages() ...
[10:49:37.652] |  Searching for globals ...
[10:49:37.653] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:37.653] |  Searching for globals ... DONE
[10:49:37.653] |  Resolving globals: FALSE
[10:49:37.653] |  Search for packages associated with the globals ...
[10:49:37.653] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.654] |  :  Packages: [1] ‘base’
[10:49:37.654] |  Search for packages associated with the globals ... DONE
[10:49:37.654] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:37.654] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:37.654] |  Packages after dropping 'base': [0] 
[10:49:37.654] |  globals: [1] ‘FUN’
[10:49:37.654] |  packages: [0] 
[10:49:37.655] getGlobalsAndPackages() ... done
[10:49:37.655]  - globals found/used: [n=1] ‘FUN’
[10:49:37.655]  - needed namespaces: [n=0] 
[10:49:37.655] Finding globals ... DONE
[10:49:37.655]  - use_args: TRUE
[10:49:37.655]  - Getting '...' globals ...
[10:49:37.655] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.655] |  recursive: 0
[10:49:37.656] |  length: 1
[10:49:37.656] |  elements: ‘...’
[10:49:37.656] |  'obj' is DotDotDotList
[10:49:37.656] |  resolve(obj, ...) ...
[10:49:37.656] |  resolve(obj, ...) ... done
[10:49:37.656] |  length: 0 (resolved future 1)
[10:49:37.656] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.656]    - '...' content: [n=0] 
[10:49:37.656] List of 1
[10:49:37.656]  $ ...: list()
[10:49:37.656]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.656]  - attr(*, "where")=List of 1
[10:49:37.656]   ..$ ...:<environment: 0x5564a5fdf378> 
[10:49:37.656]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.656]  - attr(*, "resolved")= logi TRUE
[10:49:37.656]  - attr(*, "total_size")= num NA
[10:49:37.659]  - Getting '...' globals ... DONE
[10:49:37.659] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:37.659] List of 2
[10:49:37.659]  $ ...future.FUN:function (object, ...)  
[10:49:37.659]  $ ...          : list()
[10:49:37.659]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.659]  - attr(*, "where")=List of 2
[10:49:37.659]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.659]   ..$ ...          :<environment: 0x5564a5fdf378> 
[10:49:37.659]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.659]  - attr(*, "resolved")= logi FALSE
[10:49:37.659]  - attr(*, "total_size")= num 18647
[10:49:37.662] Packages to be attached in all futures: [n=0] 
[10:49:37.662] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.662] Number of futures (= number of chunks): 1
[10:49:37.662] Launching 1 futures (chunks) ...
[10:49:37.662] Chunk #1 of 1 ...
[10:49:37.662]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.662] getGlobalsAndPackages() ...
[10:49:37.663] |  Searching for globals ...
[10:49:37.663] |  :  globals found: [0] 
[10:49:37.663] |  Searching for globals ... DONE
[10:49:37.663] |  globals: [0] <none>
[10:49:37.663] |  packages: [0] <none>
[10:49:37.663] getGlobalsAndPackages() ... done
[10:49:37.663]    + additional globals found: [n=0] 
[10:49:37.664]    + additional namespaces needed: [n=0] 
[10:49:37.664]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.664]  - seeds: <none>
[10:49:37.664]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.664] getGlobalsAndPackages() ...
[10:49:37.664] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.664] |  Resolving globals: FALSE
[10:49:37.664] |  Tweak future expression to call with '...' arguments ...
[10:49:37.664] |  :  {
[10:49:37.664] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.664] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.664] |  :      "# as a global variable                                         "
[10:49:37.664] |  :      do.call(function(...) {
[10:49:37.664] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.664] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.664] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.664] |  :              on.exit(options(oopts), add = TRUE)
[10:49:37.664] |  :          }
[10:49:37.664] |  :          {
[10:49:37.664] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.664] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.664] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:37.664] |  :              })
[10:49:37.664] |  :          }
[10:49:37.664] |  :      }, args = future.call.arguments)
[10:49:37.664] |  :  }
[10:49:37.665] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.665] |  Search for packages associated with the globals ...
[10:49:37.665] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.665] |  :  Packages: [1] ‘base’
[10:49:37.665] |  Search for packages associated with the globals ... DONE
[10:49:37.665] |  Packages after dropping 'base': [0] 
[10:49:37.666] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.666] |  packages: [0] 
[10:49:37.666] getGlobalsAndPackages() ... done
[10:49:37.666] run() for Future (‘Future’) ...
[10:49:37.666] |  state: ‘created’
[10:49:37.666] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.666] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.666] |  Using SequentialFutureBackend ...
[10:49:37.667] |  :  Launching futures ...
[10:49:37.667] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.667] |  :  .  |  getFutureData() ...
[10:49:37.667] |  :  .  |  :  getFutureCore() ...
[10:49:37.667] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:37.667] |  :  .  |  :  getFutureCore() ... done
[10:49:37.667] |  :  .  |  :  getFutureCapture() ...
[10:49:37.667] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.667] |  :  .  |  :  getFutureContext() ...
[10:49:37.667] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.668] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.668] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.668] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.668] |  :  .  |  :  getFutureContext() ... done
[10:49:37.668] |  :  .  |  getFutureData() ... done
[10:49:37.668] |  :  .  |  attachPackages() ...
[10:49:37.668] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.668] |  :  .  |  attachPackages() ... DONE
[10:49:37.668] |  :  .  |  attachPackages() ...
[10:49:37.669] |  :  .  |  :  packages: [n=0] 
[10:49:37.669] |  :  .  |  attachPackages() ... DONE
[10:49:37.669] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.669] |  :  .  |  :  Getting full stack: [n=1] ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.669] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.669] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.670] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.670] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.670] |  :  .  |  :  .  |  New stack:
[10:49:37.670] |  :  .  |  :  .  |  List of 1
[10:49:37.670] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.670] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.670] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.670] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.670] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.670] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.670] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.672] |  :  .  |  :  .  |  Old stack:
[10:49:37.672] |  :  .  |  :  .  |  List of 1
[10:49:37.672] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.672] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.672] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.672] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.672] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.672] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.672] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.672] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.672] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.672] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.672] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.672] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.672] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.676] |  :  .  |  :  .  |  Not identical
[10:49:37.676] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.676] |  :  .  |  :  .  |  :  List of 2
[10:49:37.676] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.676] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.676] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.676] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.676] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.676] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.676] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.676] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.681] |  :  .  |  :  .  |  :  Formals differ
[10:49:37.681] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.681] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:37.681] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.681] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:37.681] |  :  .  |  :  .  List of future strategies:
[10:49:37.681] |  :  .  |  :  .  1. sequential:
[10:49:37.681] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.681] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.681] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.682] |  :  .  |  :  .  List of 1
[10:49:37.682] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.682] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.682] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.682] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.682] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.682] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.682] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.684] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.684] |  :  .  |  :  .  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.684] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.684] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.684] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.685] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:37.685] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.685] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:37.685] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.685] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.685] |  :  .  |  assign_globals() ...
[10:49:37.685] |  :  .  |  List of 5
[10:49:37.685] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:37.685] |  :  .  |   $ future.call.arguments    : list()
[10:49:37.685] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.685] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.685] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.685] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.685] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.685] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.685] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.685] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.685] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.685] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:37.685] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.685] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.685] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.685] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:37.685] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.685] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.685] |  :  .  |   - attr(*, "where")=List of 5
[10:49:37.685] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.685] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.685] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.685] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.685] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.685] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.685] |  :  .  |   - attr(*, "total_size")= num 18647
[10:49:37.685] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.685] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.694] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.694] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.694] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.694] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.694] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.695] |  :  .  |  assign_globals() ... done
[10:49:37.698] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.698] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.698] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.698] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.698] |  :  .  |  :  .  |  :  New stack:
[10:49:37.698] |  :  .  |  :  .  |  :  List of 1
[10:49:37.698] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.698] |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.698] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.698] |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:37.698] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.698] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.698] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.698] |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.698] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.698] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.698] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.698] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.698] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.702] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.702] |  :  .  |  :  .  |  :  List of 1
[10:49:37.702] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.702] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.702] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.702] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.702] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.702] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.702] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.704] |  :  .  |  :  .  |  :  Not identical
[10:49:37.704] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:37.704] |  :  .  |  :  .  |  :  .  List of 2
[10:49:37.704] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.704] |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.704] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.704] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.704] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.704] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.704] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.704] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.709] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:37.709] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:37.709] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:37.709] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.709] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:37.709] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.709] |  :  .  |  :  .  |  1. multisession:
[10:49:37.709] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:37.709] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.709] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.710] |  :  .  |  :  .  |  List of 1
[10:49:37.710] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.710] |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.710] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.710] |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.710] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.710] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.710] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.710] |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.710] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.710] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.710] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.710] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.710] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.713] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:37.713] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:37.714] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.714] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.714] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.714] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:37.714] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.714] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.714] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.714] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.714] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.715] |  :  Launching futures ... done
[10:49:37.715] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.715] |  Using SequentialFutureBackend ... done
[10:49:37.715] run() for Future (‘SequentialFuture’) ... done
[10:49:37.715] Created future:
[10:49:37.715] SequentialFuture:
[10:49:37.715] Label: ‘future_by-1’
[10:49:37.715] Expression:
[10:49:37.715] {
[10:49:37.715]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.715]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.715]     "# as a global variable                                         "
[10:49:37.715]     do.call(function(...) {
[10:49:37.715]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.715]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.715]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.715]             on.exit(options(oopts), add = TRUE)
[10:49:37.715]         }
[10:49:37.715]         {
[10:49:37.715]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.715]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.715]                 ...future.FUN(...future.X_jj, ...)
[10:49:37.715]             })
[10:49:37.715]         }
[10:49:37.715]     }, args = future.call.arguments)
[10:49:37.715] }
[10:49:37.715] Lazy evaluation: FALSE
[10:49:37.715] Asynchronous evaluation: TRUE
[10:49:37.715] Local evaluation: TRUE
[10:49:37.715] Environment: 0x5564a60818c0
[10:49:37.715] Capture standard output: TRUE
[10:49:37.715] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.715] Immediate condition classes: ‘immediateCondition’
[10:49:37.715] Globals: 5 objects totaling 2.41 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:37.715] Packages: <none>
[10:49:37.715] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.715] Resolved: TRUE
[10:49:37.715] Value: 1.39 KiB of class ‘list’
[10:49:37.715] Early signaling: FALSE
[10:49:37.715] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.715] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.718] Chunk #1 of 1 ... DONE
[10:49:37.718] Launching 1 futures (chunks) ... DONE
[10:49:37.718] Resolving 1 futures (chunks) ...
[10:49:37.718] value() on list ...
[10:49:37.718] |  recursive: 0
[10:49:37.718] |  length: 1
[10:49:37.718] |  
[10:49:37.718] |  Number of remaining objects: 1
[10:49:37.718] |  checking value #1 ...
[10:49:37.718] |  :  'obj' is SequentialFuture
[10:49:37.719] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.719] |  :  .  state: ‘finished’
[10:49:37.719] |  :  .  run: TRUE
[10:49:37.719] |  :  .  result: ‘FutureResult’
[10:49:37.719] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.719] |  :  SequentialFuture #1
[10:49:37.719] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.719] |  :  .  nx: 1
[10:49:37.719] |  :  .  relay: TRUE
[10:49:37.719] |  :  .  stdout: TRUE
[10:49:37.719] |  :  .  signal: TRUE
[10:49:37.720] |  :  .  resignal: FALSE
[10:49:37.720] |  :  .  force: TRUE
[10:49:37.720] |  :  .  relayed: [n=1] FALSE
[10:49:37.720] |  :  .  queued futures: [n=1] FALSE
[10:49:37.720] |  :  .  until=1
[10:49:37.720] |  :  .  relaying element #1
[10:49:37.720] |  :  .  relayed: [n=1] TRUE
[10:49:37.720] |  :  .  queued futures: [n=1] TRUE
[10:49:37.720] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.720] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.721] |  :  .  value: <list>
[10:49:37.721] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.721] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.721] |  :  .  nx: 1
[10:49:37.721] |  :  .  relay: TRUE
[10:49:37.721] |  :  .  stdout: TRUE
[10:49:37.721] |  :  .  signal: TRUE
[10:49:37.721] |  :  .  resignal: FALSE
[10:49:37.721] |  :  .  force: TRUE
[10:49:37.721] |  :  .  relayed: [n=1] TRUE
[10:49:37.721] |  :  .  queued futures: [n=1] TRUE
[10:49:37.722] |  :  .  until=1
[10:49:37.722] |  :  .  relayed: [n=1] TRUE
[10:49:37.722] |  :  .  queued futures: [n=1] TRUE
[10:49:37.722] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.722] |  :  length: 0 (resolved future 1)
[10:49:37.722] |  checking value #1 ... done
[10:49:37.722] |  Relaying remaining futures ...
[10:49:37.722] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.722] |  :  .  nx: 1
[10:49:37.722] |  :  .  relay: TRUE
[10:49:37.722] |  :  .  stdout: TRUE
[10:49:37.723] |  :  .  signal: TRUE
[10:49:37.723] |  :  .  resignal: FALSE
[10:49:37.723] |  :  .  force: TRUE
[10:49:37.723] |  :  .  relayed: [n=1] TRUE
[10:49:37.723] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.723] |  :  .  relayed: [n=1] TRUE
[10:49:37.723] |  :  .  queued futures: [n=1] TRUE
[10:49:37.723] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.723] |  Relaying remaining futures ... done
[10:49:37.723] value() on list ... done
[10:49:37.723]  - Number of value chunks collected: 1
[10:49:37.724] Resolving 1 futures (chunks) ... DONE
[10:49:37.724] Reducing values from 1 chunks ...
[10:49:37.724]  - Number of values collected after concatenation: 3
[10:49:37.724]  - Number of values expected: 3
[10:49:37.724] Reducing values from 1 chunks ... DONE
[10:49:37.724] future_lapply() ... DONE
[10:49:37.724] future_by_internal() ... DONE
[10:49:37.725] future_by_internal() ...
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('sequential') ...
[10:49:37.726] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.726] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:37.726] |  :  all.equal() for FutureStrategyList ...
[10:49:37.726] |  :  .  New stack:
[10:49:37.726] |  :  .  List of 1
[10:49:37.726] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.726] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.726] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.726] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.726] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.726] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.726] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.728] |  :  .  Old stack:
[10:49:37.728] |  :  .  List of 1
[10:49:37.728] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.728] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.728] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.728] |  :  .    ..- attr(*, "init")= chr "done"
[10:49:37.728] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.728] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.728] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.728] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.728] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:37.728] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.728] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.728] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.728] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.732] |  :  .  Not identical
[10:49:37.732] |  :  .  all.equal() for future ...
[10:49:37.732] |  :  .  |  List of 2
[10:49:37.732] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.732] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.732] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.732] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.732] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.732] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.732] |  :  .  |   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:37.732] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.732] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:37.732] |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:37.732] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.732] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.732] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.732] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:37.732] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.732] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a434eb08> 
[10:49:37.732] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:37.732] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:37.737] |  :  .  |  Formals differ
[10:49:37.737] |  :  .  all.equal() for future ... done
[10:49:37.737] |  :  .  Future strategies differ at level 1
[10:49:37.737] |  :  all.equal() for FutureStrategyList ... done
[10:49:37.737] |  :  plan(): Setting new future strategy stack:
[10:49:37.737] |  :  List of future strategies:
[10:49:37.737] |  :  1. sequential:
[10:49:37.737] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.737] |  :     - tweaked: FALSE
[10:49:37.737] |  :     - call: plan(strategy)
[10:49:37.738] |  :  List of 1
[10:49:37.738] |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.738] |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.738] |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.738] |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.738] |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.738] |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.738] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.740] |  :  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:37.740] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.741] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:37.741] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.741] |  :  .  Legacy shutdown of cluster workers ...
[10:49:37.741] |  :  .  |  Stopping existing cluster ...
[10:49:37.741] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:37.741] |  :  .  |  Stopping existing cluster ... done
[10:49:37.741] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:37.741] |  :  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:37.742] |  :  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:49:37.742] |  :  .  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.742] |  :  .   - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.742] |  :  .   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.742] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.742] |  :  .   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.742] |  :  .   - attr(*, "call")= language plan(strategy)
[10:49:37.744] |  :  .  init: NULL
[10:49:37.744] |  :  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:49:37.744] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.745] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.745] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.745] |  :  Backend function: <‘NULL’>
[10:49:37.745] |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.745] |  :  plan(): nbrOfWorkers() = 1
[10:49:37.745] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:37.746] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.746] future_by_internal() ...
[10:49:37.746] future_lapply() ...
[10:49:37.747] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.747] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.747] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.747] Backend function: <‘NULL’>
[10:49:37.748] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.748] Number of chunks: 1
[10:49:37.748] getGlobalsAndPackagesXApply() ...
[10:49:37.748]  - future.globals: TRUE
[10:49:37.748] getGlobalsAndPackages() ...
[10:49:37.748] |  Searching for globals ...
[10:49:37.750] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:37.750] |  Searching for globals ... DONE
[10:49:37.750] |  Resolving globals: FALSE
[10:49:37.750] |  Search for packages associated with the globals ...
[10:49:37.751] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.751] |  :  Packages: [1] ‘base’
[10:49:37.751] |  Search for packages associated with the globals ... DONE
[10:49:37.751] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:37.752] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:37.752] |  Packages after dropping 'base': [0] 
[10:49:37.752] |  globals: [1] ‘FUN’
[10:49:37.752] |  packages: [0] 
[10:49:37.752] getGlobalsAndPackages() ... done
[10:49:37.752]  - globals found/used: [n=1] ‘FUN’
[10:49:37.752]  - needed namespaces: [n=0] 
[10:49:37.753] Finding globals ... DONE
[10:49:37.753]  - use_args: TRUE
[10:49:37.753]  - Getting '...' globals ...
[10:49:37.753] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.753] |  recursive: 0
[10:49:37.753] |  length: 1
[10:49:37.754] |  elements: ‘...’
[10:49:37.754] |  'obj' is DotDotDotList
[10:49:37.754] |  resolve(obj, ...) ...
[10:49:37.754] |  resolve(obj, ...) ... done
[10:49:37.754] |  length: 0 (resolved future 1)
[10:49:37.754] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.754]    - '...' content: [n=0] 
[10:49:37.755] List of 1
[10:49:37.755]  $ ...: list()
[10:49:37.755]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.755]  - attr(*, "where")=List of 1
[10:49:37.755]   ..$ ...:<environment: 0x5564a7067ca0> 
[10:49:37.755]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.755]  - attr(*, "resolved")= logi TRUE
[10:49:37.755]  - attr(*, "total_size")= num NA
[10:49:37.757]  - Getting '...' globals ... DONE
[10:49:37.757] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:37.758] List of 2
[10:49:37.758]  $ ...future.FUN:function (object, ...)  
[10:49:37.758]  $ ...          : list()
[10:49:37.758]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.758]  - attr(*, "where")=List of 2
[10:49:37.758]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.758]   ..$ ...          :<environment: 0x5564a7067ca0> 
[10:49:37.758]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.758]  - attr(*, "resolved")= logi FALSE
[10:49:37.758]  - attr(*, "total_size")= num 15670
[10:49:37.760] Packages to be attached in all futures: [n=0] 
[10:49:37.760] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.761] Number of futures (= number of chunks): 1
[10:49:37.761] Launching 1 futures (chunks) ...
[10:49:37.761] Chunk #1 of 1 ...
[10:49:37.761]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.761] getGlobalsAndPackages() ...
[10:49:37.761] |  Searching for globals ...
[10:49:37.762] |  :  globals found: [0] 
[10:49:37.762] |  Searching for globals ... DONE
[10:49:37.762] |  globals: [0] <none>
[10:49:37.762] |  packages: [0] <none>
[10:49:37.762] getGlobalsAndPackages() ... done
[10:49:37.762]    + additional globals found: [n=0] 
[10:49:37.762]    + additional namespaces needed: [n=0] 
[10:49:37.762]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.762]  - seeds: <none>
[10:49:37.762]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.763] getGlobalsAndPackages() ...
[10:49:37.763] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.763] |  Resolving globals: FALSE
[10:49:37.763] |  Tweak future expression to call with '...' arguments ...
[10:49:37.763] |  :  {
[10:49:37.763] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.763] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.763] |  :      "# as a global variable                                         "
[10:49:37.763] |  :      do.call(function(...) {
[10:49:37.763] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.763] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.763] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.763] |  :              on.exit(options(oopts), add = TRUE)
[10:49:37.763] |  :          }
[10:49:37.763] |  :          {
[10:49:37.763] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.763] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.763] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:37.763] |  :              })
[10:49:37.763] |  :          }
[10:49:37.763] |  :      }, args = future.call.arguments)
[10:49:37.763] |  :  }
[10:49:37.763] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.763] |  Search for packages associated with the globals ...
[10:49:37.764] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.764] |  :  Packages: [1] ‘base’
[10:49:37.764] |  Search for packages associated with the globals ... DONE
[10:49:37.764] |  Packages after dropping 'base': [0] 
[10:49:37.764] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.764] |  packages: [0] 
[10:49:37.764] getGlobalsAndPackages() ... done
[10:49:37.765] run() for Future (‘Future’) ...
[10:49:37.765] |  state: ‘created’
[10:49:37.765] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.765] |  :  makeFutureBackend(<sequential>) ...
[10:49:37.765] |  :  .  Backend function: <‘NULL’>
[10:49:37.765] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:37.765] |  :  makeFutureBackend(<sequential>) ... done
[10:49:37.765] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.766] |  Using SequentialFutureBackend ...
[10:49:37.766] |  :  Launching futures ...
[10:49:37.766] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.766] |  :  .  |  getFutureData() ...
[10:49:37.766] |  :  .  |  :  getFutureCore() ...
[10:49:37.766] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:37.766] |  :  .  |  :  getFutureCore() ... done
[10:49:37.766] |  :  .  |  :  getFutureCapture() ...
[10:49:37.766] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.766] |  :  .  |  :  getFutureContext() ...
[10:49:37.767] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.767] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.767] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.767] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.767] |  :  .  |  :  getFutureContext() ... done
[10:49:37.767] |  :  .  |  getFutureData() ... done
[10:49:37.767] |  :  .  |  attachPackages() ...
[10:49:37.767] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.768] |  :  .  |  attachPackages() ... DONE
[10:49:37.768] |  :  .  |  attachPackages() ...
[10:49:37.768] |  :  .  |  :  packages: [n=0] 
[10:49:37.768] |  :  .  |  attachPackages() ... DONE
[10:49:37.768] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.768] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.768] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.769] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.769] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.769] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.769] |  :  .  |  :  .  |  New stack:
[10:49:37.769] |  :  .  |  :  .  |  List of 1
[10:49:37.769] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.769] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.769] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.769] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.769] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.769] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.769] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.771] |  :  .  |  :  .  |  Old stack:
[10:49:37.771] |  :  .  |  :  .  |  List of 1
[10:49:37.771] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.771] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.771] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.771] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.771] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.771] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.771] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.771] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.771] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.771] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.774] |  :  .  |  :  .  |  Not identical
[10:49:37.775] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.775] |  :  .  |  :  .  |  :  List of 2
[10:49:37.775] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.775] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.775] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.775] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.775] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.775] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.775] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.775] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.775] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.775] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.775] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.775] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.775] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.775] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.775] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.779] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.779] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.779] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:37.780] |  :  .  |  :  .  List of future strategies:
[10:49:37.780] |  :  .  |  :  .  1. sequential:
[10:49:37.780] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.780] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.780] |  :  .  |  :  .     - call: plan(strategy)
[10:49:37.780] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.780] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.780] |  :  .  |  assign_globals() ...
[10:49:37.780] |  :  .  |  List of 5
[10:49:37.780] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:37.780] |  :  .  |   $ future.call.arguments    : list()
[10:49:37.780] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.780] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.780] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:37.780] |  :  .  |    .. ..$ breaks: num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.780] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.780] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:37.780] |  :  .  |    .. ..$ breaks: num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.780] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.780] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:37.780] |  :  .  |    .. ..$ breaks: num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.780] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.780] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.780] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.780] |  :  .  |   - attr(*, "where")=List of 5
[10:49:37.780] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.780] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.780] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.780] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.780] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.780] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.780] |  :  .  |   - attr(*, "total_size")= num 15670
[10:49:37.780] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.780] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.788] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.788] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.788] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.788] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.788] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.789] |  :  .  |  assign_globals() ... done
[10:49:37.791] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.791] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.792] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.792] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.792] |  :  .  |  :  .  |  :  New stack:
[10:49:37.792] |  :  .  |  :  .  |  :  List of 1
[10:49:37.792] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.792] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.792] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.792] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.792] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.792] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.792] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.792] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.792] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.792] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.798] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.798] |  :  .  |  :  .  |  :  List of 1
[10:49:37.798] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.798] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.798] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.798] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.798] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.798] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.798] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.798] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.798] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.798] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.801] |  :  .  |  :  .  |  :  Identical
[10:49:37.801] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.801] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:37.801] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.801] |  :  .  |  :  .  |  1. sequential:
[10:49:37.801] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.801] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.801] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.801] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.801] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.801] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.802] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.802] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.802] |  :  Launching futures ... done
[10:49:37.802] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.802] |  Using SequentialFutureBackend ... done
[10:49:37.802] run() for Future (‘SequentialFuture’) ... done
[10:49:37.802] Created future:
[10:49:37.802] SequentialFuture:
[10:49:37.802] Label: ‘future_by-1’
[10:49:37.802] Expression:
[10:49:37.802] {
[10:49:37.802]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.802]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.802]     "# as a global variable                                         "
[10:49:37.802]     do.call(function(...) {
[10:49:37.802]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.802]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.802]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.802]             on.exit(options(oopts), add = TRUE)
[10:49:37.802]         }
[10:49:37.802]         {
[10:49:37.802]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.802]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.802]                 ...future.FUN(...future.X_jj, ...)
[10:49:37.802]             })
[10:49:37.802]         }
[10:49:37.802]     }, args = future.call.arguments)
[10:49:37.802] }
[10:49:37.802] Lazy evaluation: FALSE
[10:49:37.802] Asynchronous evaluation: TRUE
[10:49:37.802] Local evaluation: TRUE
[10:49:37.802] Environment: R_GlobalEnv
[10:49:37.802] Capture standard output: TRUE
[10:49:37.802] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.802] Immediate condition classes: ‘immediateCondition’
[10:49:37.802] Globals: 5 objects totaling 1.90 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.48 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:37.802] Packages: <none>
[10:49:37.802] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.802] Resolved: TRUE
[10:49:37.802] Value: 1.16 KiB of class ‘list’
[10:49:37.802] Early signaling: FALSE
[10:49:37.802] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.802] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.803] Chunk #1 of 1 ... DONE
[10:49:37.803] Launching 1 futures (chunks) ... DONE
[10:49:37.803] Resolving 1 futures (chunks) ...
[10:49:37.804] value() on list ...
[10:49:37.804] |  recursive: 0
[10:49:37.804] |  length: 1
[10:49:37.804] |  
[10:49:37.804] |  Number of remaining objects: 1
[10:49:37.804] |  checking value #1 ...
[10:49:37.804] |  :  'obj' is SequentialFuture
[10:49:37.804] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.804] |  :  .  state: ‘finished’
[10:49:37.804] |  :  .  run: TRUE
[10:49:37.804] |  :  .  result: ‘FutureResult’
[10:49:37.805] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.805] |  :  SequentialFuture #1
[10:49:37.805] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.805] |  :  .  nx: 1
[10:49:37.805] |  :  .  relay: TRUE
[10:49:37.805] |  :  .  stdout: TRUE
[10:49:37.805] |  :  .  signal: TRUE
[10:49:37.805] |  :  .  resignal: FALSE
[10:49:37.805] |  :  .  force: TRUE
[10:49:37.805] |  :  .  relayed: [n=1] FALSE
[10:49:37.805] |  :  .  queued futures: [n=1] FALSE
[10:49:37.806] |  :  .  until=1
[10:49:37.806] |  :  .  relaying element #1
[10:49:37.806] |  :  .  relayed: [n=1] TRUE
[10:49:37.806] |  :  .  queued futures: [n=1] TRUE
[10:49:37.806] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.806] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.806] |  :  .  value: <list>
[10:49:37.806] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.806] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.807] |  :  .  nx: 1
[10:49:37.807] |  :  .  relay: TRUE
[10:49:37.807] |  :  .  stdout: TRUE
[10:49:37.807] |  :  .  signal: TRUE
[10:49:37.807] |  :  .  resignal: FALSE
[10:49:37.807] |  :  .  force: TRUE
[10:49:37.807] |  :  .  relayed: [n=1] TRUE
[10:49:37.807] |  :  .  queued futures: [n=1] TRUE
[10:49:37.807] |  :  .  until=1
[10:49:37.807] |  :  .  relayed: [n=1] TRUE
[10:49:37.807] |  :  .  queued futures: [n=1] TRUE
[10:49:37.807] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.808] |  :  length: 0 (resolved future 1)
[10:49:37.808] |  checking value #1 ... done
[10:49:37.808] |  Relaying remaining futures ...
[10:49:37.808] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.808] |  :  .  nx: 1
[10:49:37.808] |  :  .  relay: TRUE
[10:49:37.808] |  :  .  stdout: TRUE
[10:49:37.808] |  :  .  signal: TRUE
[10:49:37.808] |  :  .  resignal: FALSE
[10:49:37.808] |  :  .  force: TRUE
[10:49:37.808] |  :  .  relayed: [n=1] TRUE
[10:49:37.808] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.809] |  :  .  relayed: [n=1] TRUE
[10:49:37.809] |  :  .  queued futures: [n=1] TRUE
[10:49:37.809] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.809] |  Relaying remaining futures ... done
[10:49:37.809] value() on list ... done
[10:49:37.809]  - Number of value chunks collected: 1
[10:49:37.809] Resolving 1 futures (chunks) ... DONE
[10:49:37.809] Reducing values from 1 chunks ...
[10:49:37.809]  - Number of values collected after concatenation: 3
[10:49:37.809]  - Number of values expected: 3
[10:49:37.809] Reducing values from 1 chunks ... DONE
[10:49:37.810] future_lapply() ... DONE
[10:49:37.810] future_by_internal() ... DONE
[10:49:37.810] future_by_internal() ...
[10:49:37.810] future_lapply() ...
[10:49:37.811] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.811] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.811] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.811] Number of chunks: 1
[10:49:37.811] getGlobalsAndPackagesXApply() ...
[10:49:37.811]  - future.globals: TRUE
[10:49:37.811] getGlobalsAndPackages() ...
[10:49:37.811] |  Searching for globals ...
[10:49:37.813] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:37.813] |  Searching for globals ... DONE
[10:49:37.813] |  Resolving globals: FALSE
[10:49:37.813] |  Search for packages associated with the globals ...
[10:49:37.813] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.813] |  :  Packages: [1] ‘base’
[10:49:37.813] |  Search for packages associated with the globals ... DONE
[10:49:37.814] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:37.814] |  The total size of the 1 globals exported for future expression (‘FUN(digits = 2L)’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:37.814] |  Packages after dropping 'base': [0] 
[10:49:37.814] |  globals: [1] ‘FUN’
[10:49:37.814] |  packages: [0] 
[10:49:37.814] getGlobalsAndPackages() ... done
[10:49:37.814]  - globals found/used: [n=1] ‘FUN’
[10:49:37.814]  - needed namespaces: [n=0] 
[10:49:37.815] Finding globals ... DONE
[10:49:37.815]  - use_args: TRUE
[10:49:37.815]  - Getting '...' globals ...
[10:49:37.815] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.815] |  recursive: 0
[10:49:37.815] |  length: 1
[10:49:37.815] |  elements: ‘...’
[10:49:37.815] |  'obj' is DotDotDotList
[10:49:37.816] |  resolve(obj, ...) ...
[10:49:37.816] |  resolve(obj, ...) ... done
[10:49:37.816] |  length: 0 (resolved future 1)
[10:49:37.816] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.816]    - '...' content: [n=1] ‘digits’
[10:49:37.816] List of 1
[10:49:37.816]  $ ...:List of 1
[10:49:37.816]   ..$ digits: int 2
[10:49:37.816]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.816]  - attr(*, "where")=List of 1
[10:49:37.816]   ..$ ...:<environment: 0x5564a5873618> 
[10:49:37.816]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.816]  - attr(*, "resolved")= logi TRUE
[10:49:37.816]  - attr(*, "total_size")= num NA
[10:49:37.819]  - Getting '...' globals ... DONE
[10:49:37.819] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:37.819] List of 2
[10:49:37.819]  $ ...future.FUN:function (object, ...)  
[10:49:37.819]  $ ...          :List of 1
[10:49:37.819]   ..$ digits: int 2
[10:49:37.819]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.819]  - attr(*, "where")=List of 2
[10:49:37.819]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.819]   ..$ ...          :<environment: 0x5564a5873618> 
[10:49:37.819]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.819]  - attr(*, "resolved")= logi FALSE
[10:49:37.819]  - attr(*, "total_size")= num 13284
[10:49:37.822] Packages to be attached in all futures: [n=0] 
[10:49:37.823] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.823] Number of futures (= number of chunks): 1
[10:49:37.823] Launching 1 futures (chunks) ...
[10:49:37.823] Chunk #1 of 1 ...
[10:49:37.823]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.823] getGlobalsAndPackages() ...
[10:49:37.823] |  Searching for globals ...
[10:49:37.824] |  :  globals found: [0] 
[10:49:37.824] |  Searching for globals ... DONE
[10:49:37.824] |  globals: [0] <none>
[10:49:37.824] |  packages: [0] <none>
[10:49:37.824] getGlobalsAndPackages() ... done
[10:49:37.824]    + additional globals found: [n=0] 
[10:49:37.824]    + additional namespaces needed: [n=0] 
[10:49:37.824]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.824]  - seeds: <none>
[10:49:37.824]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.824] getGlobalsAndPackages() ...
[10:49:37.825] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.825] |  Resolving globals: FALSE
[10:49:37.825] |  Tweak future expression to call with '...' arguments ...
[10:49:37.825] |  :  {
[10:49:37.825] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.825] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.825] |  :      "# as a global variable                                         "
[10:49:37.825] |  :      do.call(function(...) {
[10:49:37.825] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.825] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.825] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.825] |  :              on.exit(options(oopts), add = TRUE)
[10:49:37.825] |  :          }
[10:49:37.825] |  :          {
[10:49:37.825] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.825] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.825] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:37.825] |  :              })
[10:49:37.825] |  :          }
[10:49:37.825] |  :      }, args = future.call.arguments)
[10:49:37.825] |  :  }
[10:49:37.825] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.825] |  Search for packages associated with the globals ...
[10:49:37.825] |  :  Packages associated with globals: [1] ‘base’
[10:49:37.826] |  :  Packages: [1] ‘base’
[10:49:37.826] |  Search for packages associated with the globals ... DONE
[10:49:37.826] |  Packages after dropping 'base': [0] 
[10:49:37.826] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.826] |  packages: [0] 
[10:49:37.826] getGlobalsAndPackages() ... done
[10:49:37.826] run() for Future (‘Future’) ...
[10:49:37.827] |  state: ‘created’
[10:49:37.827] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.827] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.827] |  Using SequentialFutureBackend ...
[10:49:37.827] |  :  Launching futures ...
[10:49:37.827] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.827] |  :  .  |  getFutureData() ...
[10:49:37.827] |  :  .  |  :  getFutureCore() ...
[10:49:37.827] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:37.828] |  :  .  |  :  getFutureCore() ... done
[10:49:37.828] |  :  .  |  :  getFutureCapture() ...
[10:49:37.828] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.828] |  :  .  |  :  getFutureContext() ...
[10:49:37.828] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.828] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.828] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.828] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.828] |  :  .  |  :  getFutureContext() ... done
[10:49:37.828] |  :  .  |  getFutureData() ... done
[10:49:37.829] |  :  .  |  attachPackages() ...
[10:49:37.829] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.829] |  :  .  |  attachPackages() ... DONE
[10:49:37.829] |  :  .  |  attachPackages() ...
[10:49:37.829] |  :  .  |  :  packages: [n=0] 
[10:49:37.829] |  :  .  |  attachPackages() ... DONE
[10:49:37.830] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.830] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.830] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.830] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.830] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.830] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.830] |  :  .  |  :  .  |  New stack:
[10:49:37.830] |  :  .  |  :  .  |  List of 1
[10:49:37.830] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.830] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.830] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.830] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.830] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.830] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.830] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.833] |  :  .  |  :  .  |  Old stack:
[10:49:37.833] |  :  .  |  :  .  |  List of 1
[10:49:37.833] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.833] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.833] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.833] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.833] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.833] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.833] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.833] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.833] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.833] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.836] |  :  .  |  :  .  |  Not identical
[10:49:37.836] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.836] |  :  .  |  :  .  |  :  List of 2
[10:49:37.836] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.836] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.836] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.836] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.836] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.836] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.836] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.836] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.836] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.836] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.836] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.836] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.836] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.836] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.836] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.841] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.841] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.841] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:37.841] |  :  .  |  :  .  List of future strategies:
[10:49:37.841] |  :  .  |  :  .  1. sequential:
[10:49:37.841] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.841] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.841] |  :  .  |  :  .     - call: plan(strategy)
[10:49:37.842] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.842] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.842] |  :  .  |  assign_globals() ...
[10:49:37.842] |  :  .  |  List of 5
[10:49:37.842] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:37.842] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:37.842] |  :  .  |    ..$ digits: int 2
[10:49:37.842] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.842] |  :  .  |   $ ...future.elements_ii    :List of 6
[10:49:37.842] |  :  .  |    ..$ : num [1:9] 26 30 54 25 70 52 51 26 67
[10:49:37.842] |  :  .  |    ..$ : num [1:9] 27 14 29 19 29 31 41 20 44
[10:49:37.842] |  :  .  |    ..$ : num [1:9] 18 21 29 17 12 18 35 30 36
[10:49:37.842] |  :  .  |    ..$ : num [1:9] 42 26 19 16 39 28 21 39 29
[10:49:37.842] |  :  .  |    ..$ : num [1:9] 36 21 24 18 10 43 28 15 26
[10:49:37.842] |  :  .  |    ..$ : num [1:9] 20 21 24 17 13 15 15 16 28
[10:49:37.842] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.842] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.842] |  :  .  |   - attr(*, "where")=List of 5
[10:49:37.842] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.842] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.842] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.842] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.842] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.842] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.842] |  :  .  |   - attr(*, "total_size")= num 13284
[10:49:37.842] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.842] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.849] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.849] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.849] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.849] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.849] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.849] |  :  .  |  assign_globals() ... done
[10:49:37.851] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.852] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.852] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.852] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.852] |  :  .  |  :  .  |  :  New stack:
[10:49:37.852] |  :  .  |  :  .  |  :  List of 1
[10:49:37.852] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.852] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.852] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.852] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.852] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.852] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.852] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.852] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.852] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.852] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.855] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.855] |  :  .  |  :  .  |  :  List of 1
[10:49:37.855] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.855] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.855] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.855] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.855] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.855] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.855] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.855] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.855] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.855] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.858] |  :  .  |  :  .  |  :  Identical
[10:49:37.858] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.858] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:37.858] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.858] |  :  .  |  :  .  |  1. sequential:
[10:49:37.858] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.858] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.858] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.859] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.859] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.859] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.859] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.859] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.859] |  :  Launching futures ... done
[10:49:37.859] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.860] |  Using SequentialFutureBackend ... done
[10:49:37.860] run() for Future (‘SequentialFuture’) ... done
[10:49:37.860] Created future:
[10:49:37.860] SequentialFuture:
[10:49:37.860] Label: ‘future_by-1’
[10:49:37.860] Expression:
[10:49:37.860] {
[10:49:37.860]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.860]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.860]     "# as a global variable                                         "
[10:49:37.860]     do.call(function(...) {
[10:49:37.860]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.860]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.860]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.860]             on.exit(options(oopts), add = TRUE)
[10:49:37.860]         }
[10:49:37.860]         {
[10:49:37.860]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.860]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.860]                 ...future.FUN(...future.X_jj, ...)
[10:49:37.860]             })
[10:49:37.860]         }
[10:49:37.860]     }, args = future.call.arguments)
[10:49:37.860] }
[10:49:37.860] Lazy evaluation: FALSE
[10:49:37.860] Asynchronous evaluation: TRUE
[10:49:37.860] Local evaluation: TRUE
[10:49:37.860] Environment: R_GlobalEnv
[10:49:37.860] Capture standard output: TRUE
[10:49:37.860] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.860] Immediate condition classes: ‘immediateCondition’
[10:49:37.860] Globals: 5 objects totaling 998 bytes (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 511 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:37.860] Packages: <none>
[10:49:37.860] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.860] Resolved: TRUE
[10:49:37.860] Value: 1.27 KiB of class ‘list’
[10:49:37.860] Early signaling: FALSE
[10:49:37.860] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.860] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.861] Chunk #1 of 1 ... DONE
[10:49:37.861] Launching 1 futures (chunks) ... DONE
[10:49:37.861] Resolving 1 futures (chunks) ...
[10:49:37.861] value() on list ...
[10:49:37.861] |  recursive: 0
[10:49:37.861] |  length: 1
[10:49:37.861] |  
[10:49:37.861] |  Number of remaining objects: 1
[10:49:37.862] |  checking value #1 ...
[10:49:37.862] |  :  'obj' is SequentialFuture
[10:49:37.862] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.862] |  :  .  state: ‘finished’
[10:49:37.862] |  :  .  run: TRUE
[10:49:37.862] |  :  .  result: ‘FutureResult’
[10:49:37.862] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.862] |  :  SequentialFuture #1
[10:49:37.862] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.862] |  :  .  nx: 1
[10:49:37.862] |  :  .  relay: TRUE
[10:49:37.863] |  :  .  stdout: TRUE
[10:49:37.863] |  :  .  signal: TRUE
[10:49:37.863] |  :  .  resignal: FALSE
[10:49:37.863] |  :  .  force: TRUE
[10:49:37.863] |  :  .  relayed: [n=1] FALSE
[10:49:37.863] |  :  .  queued futures: [n=1] FALSE
[10:49:37.863] |  :  .  until=1
[10:49:37.863] |  :  .  relaying element #1
[10:49:37.863] |  :  .  relayed: [n=1] TRUE
[10:49:37.863] |  :  .  queued futures: [n=1] TRUE
[10:49:37.864] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.864] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.864] |  :  .  value: <list>
[10:49:37.864] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.864] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.864] |  :  .  nx: 1
[10:49:37.864] |  :  .  relay: TRUE
[10:49:37.864] |  :  .  stdout: TRUE
[10:49:37.864] |  :  .  signal: TRUE
[10:49:37.864] |  :  .  resignal: FALSE
[10:49:37.865] |  :  .  force: TRUE
[10:49:37.865] |  :  .  relayed: [n=1] TRUE
[10:49:37.865] |  :  .  queued futures: [n=1] TRUE
[10:49:37.865] |  :  .  until=1
[10:49:37.865] |  :  .  relayed: [n=1] TRUE
[10:49:37.865] |  :  .  queued futures: [n=1] TRUE
[10:49:37.865] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.865] |  :  length: 0 (resolved future 1)
[10:49:37.865] |  checking value #1 ... done
[10:49:37.865] |  Relaying remaining futures ...
[10:49:37.866] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.866] |  :  .  nx: 1
[10:49:37.866] |  :  .  relay: TRUE
[10:49:37.866] |  :  .  stdout: TRUE
[10:49:37.866] |  :  .  signal: TRUE
[10:49:37.866] |  :  .  resignal: FALSE
[10:49:37.866] |  :  .  force: TRUE
[10:49:37.866] |  :  .  relayed: [n=1] TRUE
[10:49:37.866] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.866] |  :  .  relayed: [n=1] TRUE
[10:49:37.866] |  :  .  queued futures: [n=1] TRUE
[10:49:37.867] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.867] |  Relaying remaining futures ... done
[10:49:37.867] value() on list ... done
[10:49:37.867]  - Number of value chunks collected: 1
[10:49:37.867] Resolving 1 futures (chunks) ... DONE
[10:49:37.867] Reducing values from 1 chunks ...
[10:49:37.867]  - Number of values collected after concatenation: 6
[10:49:37.867]  - Number of values expected: 6
[10:49:37.867] Reducing values from 1 chunks ... DONE
[10:49:37.867] future_lapply() ... DONE
[10:49:37.867] future_by_internal() ... DONE
[10:49:37.868] future_by_internal() ...
[10:49:37.869] future_lapply() ...
[10:49:37.870] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.870] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.870] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.870] Number of chunks: 1
[10:49:37.870] getGlobalsAndPackagesXApply() ...
[10:49:37.870]  - future.globals: TRUE
[10:49:37.870] getGlobalsAndPackages() ...
[10:49:37.871] |  Searching for globals ...
[10:49:37.874] |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:37.874] |  Searching for globals ... DONE
[10:49:37.874] |  Resolving globals: FALSE
[10:49:37.874] |  Search for packages associated with the globals ...
[10:49:37.875] |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:37.875] |  :  Packages: [2] ‘base’, ‘stats’
[10:49:37.875] |  Search for packages associated with the globals ... DONE
[10:49:37.875] |  The total size of the 1 globals is 762 bytes (762 bytes)
[10:49:37.875] |  The total size of the 1 globals exported for future expression (‘FUN(singular.ok = FALSE)’) is 762 bytes There is one global: ‘FUN’ (762 bytes of class ‘function’)
[10:49:37.876] |  Packages after dropping 'base': [1] ‘stats’
[10:49:37.876] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:37.876] |  globals: [1] ‘FUN’
[10:49:37.876] |  packages: [1] ‘stats’
[10:49:37.876] getGlobalsAndPackages() ... done
[10:49:37.876]  - globals found/used: [n=1] ‘FUN’
[10:49:37.876]  - needed namespaces: [n=1] ‘stats’
[10:49:37.876] Finding globals ... DONE
[10:49:37.876]  - use_args: TRUE
[10:49:37.876]  - Getting '...' globals ...
[10:49:37.877] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.877] |  recursive: 0
[10:49:37.877] |  length: 1
[10:49:37.877] |  elements: ‘...’
[10:49:37.877] |  'obj' is DotDotDotList
[10:49:37.877] |  resolve(obj, ...) ...
[10:49:37.877] |  resolve(obj, ...) ... done
[10:49:37.878] |  length: 0 (resolved future 1)
[10:49:37.878] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.878]    - '...' content: [n=1] ‘singular.ok’
[10:49:37.878] List of 1
[10:49:37.878]  $ ...:List of 1
[10:49:37.878]   ..$ singular.ok: logi FALSE
[10:49:37.878]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.878]  - attr(*, "where")=List of 1
[10:49:37.878]   ..$ ...:<environment: 0x5564a84f8568> 
[10:49:37.878]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.878]  - attr(*, "resolved")= logi TRUE
[10:49:37.878]  - attr(*, "total_size")= num NA
[10:49:37.881]  - Getting '...' globals ... DONE
[10:49:37.881] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:37.881] List of 2
[10:49:37.881]  $ ...future.FUN:function (x, ...)  
[10:49:37.881]  $ ...          :List of 1
[10:49:37.881]   ..$ singular.ok: logi FALSE
[10:49:37.881]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.881]  - attr(*, "where")=List of 2
[10:49:37.881]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.881]   ..$ ...          :<environment: 0x5564a84f8568> 
[10:49:37.881]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.881]  - attr(*, "resolved")= logi FALSE
[10:49:37.881]  - attr(*, "total_size")= num 19977
[10:49:37.884] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:37.884] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.884] Number of futures (= number of chunks): 1
[10:49:37.884] Launching 1 futures (chunks) ...
[10:49:37.885] Chunk #1 of 1 ...
[10:49:37.885]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.885] getGlobalsAndPackages() ...
[10:49:37.885] |  Searching for globals ...
[10:49:37.885] |  :  globals found: [0] 
[10:49:37.885] |  Searching for globals ... DONE
[10:49:37.886] |  globals: [0] <none>
[10:49:37.886] |  packages: [0] <none>
[10:49:37.886] getGlobalsAndPackages() ... done
[10:49:37.886]    + additional globals found: [n=0] 
[10:49:37.886]    + additional namespaces needed: [n=0] 
[10:49:37.886]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.886]  - seeds: <none>
[10:49:37.886]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.886] getGlobalsAndPackages() ...
[10:49:37.886] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.886] |  Resolving globals: FALSE
[10:49:37.887] |  Tweak future expression to call with '...' arguments ...
[10:49:37.887] |  :  {
[10:49:37.887] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.887] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.887] |  :      "# as a global variable                                         "
[10:49:37.887] |  :      do.call(function(...) {
[10:49:37.887] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:37.887] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:37.887] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:37.887] |  :          "# anonymous function.                                          "
[10:49:37.887] |  :          "#                                                              "
[10:49:37.887] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:37.887] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:37.887] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:37.887] |  :          "# global environment, which is where globals are written.      "
[10:49:37.887] |  :          penv <- env <- environment(...future.FUN)
[10:49:37.887] |  :          repeat {
[10:49:37.887] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:37.887] |  :                  emptyenv())) 
[10:49:37.887] |  :                  break
[10:49:37.887] |  :              penv <- env
[10:49:37.887] |  :              env <- parent.env(env)
[10:49:37.887] |  :          }
[10:49:37.887] |  :          if (identical(penv, globalenv())) {
[10:49:37.887] |  :              environment(...future.FUN) <- environment()
[10:49:37.887] |  :          }
[10:49:37.887] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:37.887] |  :              !isNamespace(penv)) {
[10:49:37.887] |  :              parent.env(penv) <- environment()
[10:49:37.887] |  :          }
[10:49:37.887] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:37.887] |  :          {
[10:49:37.887] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.887] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.887] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.887] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:37.887] |  :              }
[10:49:37.887] |  :              {
[10:49:37.887] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.887] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.887] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:37.887] |  :                  })
[10:49:37.887] |  :              }
[10:49:37.887] |  :          }
[10:49:37.887] |  :      }, args = future.call.arguments)
[10:49:37.887] |  :  }
[10:49:37.887] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.887] |  Search for packages associated with the globals ...
[10:49:37.887] |  :  Packages associated with globals: [0] 
[10:49:37.888] |  :  Packages: [0] 
[10:49:37.888] |  Search for packages associated with the globals ... DONE
[10:49:37.888] |  Packages after dropping 'base': [0] 
[10:49:37.888] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.888] |  packages: [0] 
[10:49:37.888] getGlobalsAndPackages() ... done
[10:49:37.888] run() for Future (‘Future’) ...
[10:49:37.889] |  state: ‘created’
[10:49:37.889] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.889] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.889] |  Using SequentialFutureBackend ...
[10:49:37.889] |  :  Launching futures ...
[10:49:37.889] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.889] |  :  .  |  getFutureData() ...
[10:49:37.889] |  :  .  |  :  getFutureCore() ...
[10:49:37.889] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:37.889] |  :  .  |  :  getFutureCore() ... done
[10:49:37.890] |  :  .  |  :  getFutureCapture() ...
[10:49:37.890] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.890] |  :  .  |  :  getFutureContext() ...
[10:49:37.890] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.890] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.890] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.890] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.890] |  :  .  |  :  getFutureContext() ... done
[10:49:37.891] |  :  .  |  getFutureData() ... done
[10:49:37.891] |  :  .  |  attachPackages() ...
[10:49:37.891] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.891] |  :  .  |  attachPackages() ... DONE
[10:49:37.891] |  :  .  |  attachPackages() ...
[10:49:37.891] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:37.891] |  :  .  |  attachPackages() ... DONE
[10:49:37.892] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.892] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.892] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.892] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.892] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.892] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.893] |  :  .  |  :  .  |  New stack:
[10:49:37.893] |  :  .  |  :  .  |  List of 1
[10:49:37.893] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.893] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.893] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.893] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.893] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.893] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.893] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.895] |  :  .  |  :  .  |  Old stack:
[10:49:37.895] |  :  .  |  :  .  |  List of 1
[10:49:37.895] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.895] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.895] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.895] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.895] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.895] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.895] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.895] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.895] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.895] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.898] |  :  .  |  :  .  |  Not identical
[10:49:37.898] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.898] |  :  .  |  :  .  |  :  List of 2
[10:49:37.898] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.898] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.898] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.898] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.898] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.898] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.898] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.898] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.898] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.898] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.898] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.898] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.898] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.898] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.898] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.903] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.903] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.903] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:37.903] |  :  .  |  :  .  List of future strategies:
[10:49:37.903] |  :  .  |  :  .  1. sequential:
[10:49:37.903] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.903] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.903] |  :  .  |  :  .     - call: plan(strategy)
[10:49:37.903] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.903] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.904] |  :  .  |  assign_globals() ...
[10:49:37.904] |  :  .  |  List of 5
[10:49:37.904] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:37.904] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:37.904] |  :  .  |    ..$ singular.ok: logi FALSE
[10:49:37.904] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.904] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.904] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.904] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.904] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.904] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.904] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.904] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.904] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.904] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:37.904] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.904] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.904] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.904] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:37.904] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.904] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.904] |  :  .  |   - attr(*, "where")=List of 5
[10:49:37.904] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.904] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.904] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.904] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.904] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.904] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.904] |  :  .  |   - attr(*, "total_size")= num 19977
[10:49:37.904] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.904] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.913] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:37.913] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.913] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.913] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.913] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.913] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.914] |  :  .  |  assign_globals() ... done
[10:49:37.917] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.917] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.917] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.917] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.917] |  :  .  |  :  .  |  :  New stack:
[10:49:37.918] |  :  .  |  :  .  |  :  List of 1
[10:49:37.918] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.918] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.918] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.918] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.918] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.918] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.918] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.918] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.918] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.918] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.920] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.921] |  :  .  |  :  .  |  :  List of 1
[10:49:37.921] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.921] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.921] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.921] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.921] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.921] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.921] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.921] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.921] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.921] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.924] |  :  .  |  :  .  |  :  Identical
[10:49:37.924] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.924] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:37.924] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.924] |  :  .  |  :  .  |  1. sequential:
[10:49:37.924] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.924] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.924] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.924] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.924] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.924] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.925] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.925] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.925] |  :  Launching futures ... done
[10:49:37.925] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.925] |  Using SequentialFutureBackend ... done
[10:49:37.925] run() for Future (‘SequentialFuture’) ... done
[10:49:37.925] Created future:
[10:49:37.925] SequentialFuture:
[10:49:37.925] Label: ‘future_by-1’
[10:49:37.925] Expression:
[10:49:37.925] {
[10:49:37.925]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.925]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.925]     "# as a global variable                                         "
[10:49:37.925]     do.call(function(...) {
[10:49:37.925]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:37.925]         "# without having an '...' argument. This means '...' is treated"
[10:49:37.925]         "# as a global variable. This may happen when FUN() is an       "
[10:49:37.925]         "# anonymous function.                                          "
[10:49:37.925]         "#                                                              "
[10:49:37.925]         "# If an anonymous function, we will make sure to restore the   "
[10:49:37.925]         "# function environment of FUN() to the calling environment.    "
[10:49:37.925]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:37.925]         "# global environment, which is where globals are written.      "
[10:49:37.925]         penv <- env <- environment(...future.FUN)
[10:49:37.925]         repeat {
[10:49:37.925]             if (identical(env, globalenv()) || identical(env, 
[10:49:37.925]                 emptyenv())) 
[10:49:37.925]                 break
[10:49:37.925]             penv <- env
[10:49:37.925]             env <- parent.env(env)
[10:49:37.925]         }
[10:49:37.925]         if (identical(penv, globalenv())) {
[10:49:37.925]             environment(...future.FUN) <- environment()
[10:49:37.925]         }
[10:49:37.925]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:37.925]             !isNamespace(penv)) {
[10:49:37.925]             parent.env(penv) <- environment()
[10:49:37.925]         }
[10:49:37.925]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:37.925]         {
[10:49:37.925]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.925]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.925]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.925]                 on.exit(options(oopts), add = TRUE)
[10:49:37.925]             }
[10:49:37.925]             {
[10:49:37.925]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.925]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.925]                   ...future.FUN(...future.X_jj, ...)
[10:49:37.925]                 })
[10:49:37.925]             }
[10:49:37.925]         }
[10:49:37.925]     }, args = future.call.arguments)
[10:49:37.925] }
[10:49:37.925] Lazy evaluation: FALSE
[10:49:37.925] Asynchronous evaluation: TRUE
[10:49:37.925] Local evaluation: TRUE
[10:49:37.925] Environment: R_GlobalEnv
[10:49:37.925] Capture standard output: TRUE
[10:49:37.925] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.925] Immediate condition classes: ‘immediateCondition’
[10:49:37.925] Globals: 5 objects totaling 2.93 KiB (function ‘...future.FUN’ of 762 bytes, DotDotDotList ‘future.call.arguments’ of 157 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:37.925] Packages: 1 packages (‘stats’)
[10:49:37.925] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.925] Resolved: TRUE
[10:49:37.925] Value: 14.12 KiB of class ‘list’
[10:49:37.925] Early signaling: FALSE
[10:49:37.925] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.925] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.926] Chunk #1 of 1 ... DONE
[10:49:37.927] Launching 1 futures (chunks) ... DONE
[10:49:37.927] Resolving 1 futures (chunks) ...
[10:49:37.927] value() on list ...
[10:49:37.927] |  recursive: 0
[10:49:37.927] |  length: 1
[10:49:37.927] |  
[10:49:37.927] |  Number of remaining objects: 1
[10:49:37.927] |  checking value #1 ...
[10:49:37.927] |  :  'obj' is SequentialFuture
[10:49:37.927] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.928] |  :  .  state: ‘finished’
[10:49:37.928] |  :  .  run: TRUE
[10:49:37.928] |  :  .  result: ‘FutureResult’
[10:49:37.928] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.928] |  :  SequentialFuture #1
[10:49:37.928] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.928] |  :  .  nx: 1
[10:49:37.928] |  :  .  relay: TRUE
[10:49:37.928] |  :  .  stdout: TRUE
[10:49:37.928] |  :  .  signal: TRUE
[10:49:37.928] |  :  .  resignal: FALSE
[10:49:37.928] |  :  .  force: TRUE
[10:49:37.929] |  :  .  relayed: [n=1] FALSE
[10:49:37.929] |  :  .  queued futures: [n=1] FALSE
[10:49:37.929] |  :  .  until=1
[10:49:37.929] |  :  .  relaying element #1
[10:49:37.929] |  :  .  relayed: [n=1] TRUE
[10:49:37.929] |  :  .  queued futures: [n=1] TRUE
[10:49:37.929] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.929] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.929] |  :  .  value: <list>
[10:49:37.930] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.930] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.930] |  :  .  nx: 1
[10:49:37.930] |  :  .  relay: TRUE
[10:49:37.930] |  :  .  stdout: TRUE
[10:49:37.930] |  :  .  signal: TRUE
[10:49:37.930] |  :  .  resignal: FALSE
[10:49:37.930] |  :  .  force: TRUE
[10:49:37.930] |  :  .  relayed: [n=1] TRUE
[10:49:37.930] |  :  .  queued futures: [n=1] TRUE
[10:49:37.930] |  :  .  until=1
[10:49:37.930] |  :  .  relayed: [n=1] TRUE
[10:49:37.931] |  :  .  queued futures: [n=1] TRUE
[10:49:37.931] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.931] |  :  length: 0 (resolved future 1)
[10:49:37.931] |  checking value #1 ... done
[10:49:37.931] |  Relaying remaining futures ...
[10:49:37.931] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:37.931] |  :  .  nx: 1
[10:49:37.931] |  :  .  relay: TRUE
[10:49:37.931] |  :  .  stdout: TRUE
[10:49:37.931] |  :  .  signal: TRUE
[10:49:37.931] |  :  .  resignal: FALSE
[10:49:37.932] |  :  .  force: TRUE
[10:49:37.932] |  :  .  relayed: [n=1] TRUE
[10:49:37.932] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:37.932] |  :  .  relayed: [n=1] TRUE
[10:49:37.932] |  :  .  queued futures: [n=1] TRUE
[10:49:37.932] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:37.932] |  Relaying remaining futures ... done
[10:49:37.932] value() on list ... done
[10:49:37.932]  - Number of value chunks collected: 1
[10:49:37.932] Resolving 1 futures (chunks) ... DONE
[10:49:37.932] Reducing values from 1 chunks ...
[10:49:37.933]  - Number of values collected after concatenation: 3
[10:49:37.933]  - Number of values expected: 3
[10:49:37.933] Reducing values from 1 chunks ... DONE
[10:49:37.933] future_lapply() ... DONE
[10:49:37.933] future_by_internal() ... DONE
[10:49:37.937] future_by_internal() ...
[10:49:37.937] future_lapply() ...
[10:49:37.938] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.938] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.938] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.938] Number of chunks: 1
[10:49:37.938] getGlobalsAndPackagesXApply() ...
[10:49:37.939]  - future.globals: TRUE
[10:49:37.939] getGlobalsAndPackages() ...
[10:49:37.939] |  Searching for globals ...
[10:49:37.940] |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:37.941] |  Searching for globals ... DONE
[10:49:37.941] |  Resolving globals: FALSE
[10:49:37.941] |  Search for packages associated with the globals ...
[10:49:37.941] |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:37.941] |  :  Packages: [2] ‘base’, ‘stats’
[10:49:37.941] |  Search for packages associated with the globals ... DONE
[10:49:37.942] |  The total size of the 3 globals is 2.07 KiB (2118 bytes)
[10:49:37.942] |  The total size of the 3 globals exported for future expression (‘FUN()’) is 2.07 KiB There are three globals: ‘FUN’ (1.28 KiB of class ‘function’), ‘breaks’ (463 bytes of class ‘numeric’) and ‘wool’ (342 bytes of class ‘numeric’)
[10:49:37.942] |  Packages after dropping 'base': [1] ‘stats’
[10:49:37.942] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:37.942] |  globals: [3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:37.943] |  packages: [1] ‘stats’
[10:49:37.943] getGlobalsAndPackages() ... done
[10:49:37.943]  - globals found/used: [n=3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:37.943]  - needed namespaces: [n=1] ‘stats’
[10:49:37.943] Finding globals ... DONE
[10:49:37.943]  - use_args: TRUE
[10:49:37.943]  - Getting '...' globals ...
[10:49:37.943] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:37.944] |  recursive: 0
[10:49:37.944] |  length: 1
[10:49:37.944] |  elements: ‘...’
[10:49:37.944] |  'obj' is DotDotDotList
[10:49:37.944] |  resolve(obj, ...) ...
[10:49:37.944] |  resolve(obj, ...) ... done
[10:49:37.944] |  length: 0 (resolved future 1)
[10:49:37.944] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:37.944]    - '...' content: [n=0] 
[10:49:37.944] List of 1
[10:49:37.944]  $ ...: list()
[10:49:37.944]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.944]  - attr(*, "where")=List of 1
[10:49:37.944]   ..$ ...:<environment: 0x5564a8236a08> 
[10:49:37.944]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.944]  - attr(*, "resolved")= logi TRUE
[10:49:37.944]  - attr(*, "total_size")= num NA
[10:49:37.949]  - Getting '...' globals ... DONE
[10:49:37.949] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’
[10:49:37.949] List of 4
[10:49:37.949]  $ ...future.FUN:function (x)  
[10:49:37.949]  $ breaks       : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:37.949]  $ wool         : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.949]  $ ...          : list()
[10:49:37.949]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.949]  - attr(*, "where")=List of 4
[10:49:37.949]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:37.949]   ..$ breaks       :<environment: R_EmptyEnv> 
[10:49:37.949]   ..$ wool         :<environment: R_EmptyEnv> 
[10:49:37.949]   ..$ ...          :<environment: 0x5564a8236a08> 
[10:49:37.949]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.949]  - attr(*, "resolved")= logi FALSE
[10:49:37.949]  - attr(*, "total_size")= num 18867
[10:49:37.953] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:37.953] getGlobalsAndPackagesXApply() ... DONE
[10:49:37.953] Number of futures (= number of chunks): 1
[10:49:37.953] Launching 1 futures (chunks) ...
[10:49:37.953] Chunk #1 of 1 ...
[10:49:37.953]  - Finding globals in 'X' for chunk #1 ...
[10:49:37.954] getGlobalsAndPackages() ...
[10:49:37.954] |  Searching for globals ...
[10:49:37.954] |  :  globals found: [0] 
[10:49:37.954] |  Searching for globals ... DONE
[10:49:37.954] |  globals: [0] <none>
[10:49:37.954] |  packages: [0] <none>
[10:49:37.954] getGlobalsAndPackages() ... done
[10:49:37.955]    + additional globals found: [n=0] 
[10:49:37.955]    + additional namespaces needed: [n=0] 
[10:49:37.955]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:37.955]  - seeds: <none>
[10:49:37.955]  - All globals exported: [n=7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.955] getGlobalsAndPackages() ...
[10:49:37.955] |  globals passed as-is: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.955] |  Resolving globals: FALSE
[10:49:37.955] |  Tweak future expression to call with '...' arguments ...
[10:49:37.955] |  :  {
[10:49:37.955] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.955] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:37.955] |  :      "# as a global variable                                         "
[10:49:37.955] |  :      do.call(function(...) {
[10:49:37.955] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:37.955] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:37.955] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:37.955] |  :          "# anonymous function.                                          "
[10:49:37.955] |  :          "#                                                              "
[10:49:37.955] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:37.955] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:37.955] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:37.955] |  :          "# global environment, which is where globals are written.      "
[10:49:37.955] |  :          penv <- env <- environment(...future.FUN)
[10:49:37.955] |  :          repeat {
[10:49:37.955] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:37.955] |  :                  emptyenv())) 
[10:49:37.955] |  :                  break
[10:49:37.955] |  :              penv <- env
[10:49:37.955] |  :              env <- parent.env(env)
[10:49:37.955] |  :          }
[10:49:37.955] |  :          if (identical(penv, globalenv())) {
[10:49:37.955] |  :              environment(...future.FUN) <- environment()
[10:49:37.955] |  :          }
[10:49:37.955] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:37.955] |  :              !isNamespace(penv)) {
[10:49:37.955] |  :              parent.env(penv) <- environment()
[10:49:37.955] |  :          }
[10:49:37.955] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:37.955] |  :          {
[10:49:37.955] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.955] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.955] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.955] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:37.955] |  :              }
[10:49:37.955] |  :              {
[10:49:37.955] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.955] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.955] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:37.955] |  :                  })
[10:49:37.955] |  :              }
[10:49:37.955] |  :          }
[10:49:37.955] |  :      }, args = future.call.arguments)
[10:49:37.955] |  :  }
[10:49:37.956] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:37.956] |  Search for packages associated with the globals ...
[10:49:37.956] |  :  Packages associated with globals: [0] 
[10:49:37.956] |  :  Packages: [0] 
[10:49:37.957] |  Search for packages associated with the globals ... DONE
[10:49:37.957] |  Packages after dropping 'base': [0] 
[10:49:37.957] |  globals: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:37.957] |  packages: [0] 
[10:49:37.957] getGlobalsAndPackages() ... done
[10:49:37.957] run() for Future (‘Future’) ...
[10:49:37.957] |  state: ‘created’
[10:49:37.957] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.958] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.958] |  Using SequentialFutureBackend ...
[10:49:37.958] |  :  Launching futures ...
[10:49:37.958] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:37.958] |  :  .  |  getFutureData() ...
[10:49:37.958] |  :  .  |  :  getFutureCore() ...
[10:49:37.958] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:37.958] |  :  .  |  :  getFutureCore() ... done
[10:49:37.958] |  :  .  |  :  getFutureCapture() ...
[10:49:37.958] |  :  .  |  :  getFutureCapture() ... done
[10:49:37.959] |  :  .  |  :  getFutureContext() ...
[10:49:37.959] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.959] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:37.959] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.959] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:37.959] |  :  .  |  :  getFutureContext() ... done
[10:49:37.959] |  :  .  |  getFutureData() ... done
[10:49:37.959] |  :  .  |  attachPackages() ...
[10:49:37.959] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:37.960] |  :  .  |  attachPackages() ... DONE
[10:49:37.960] |  :  .  |  attachPackages() ...
[10:49:37.960] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:37.960] |  :  .  |  attachPackages() ... DONE
[10:49:37.960] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:37.960] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:37.960] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:37.961] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.961] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.961] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:37.961] |  :  .  |  :  .  |  New stack:
[10:49:37.961] |  :  .  |  :  .  |  List of 1
[10:49:37.961] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.961] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.961] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.961] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.961] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.961] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.961] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.963] |  :  .  |  :  .  |  Old stack:
[10:49:37.963] |  :  .  |  :  .  |  List of 1
[10:49:37.963] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.963] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.963] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.963] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.963] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.963] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:37.963] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.963] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.963] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.963] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.966] |  :  .  |  :  .  |  Not identical
[10:49:37.966] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:37.966] |  :  .  |  :  .  |  :  List of 2
[10:49:37.966] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.966] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.966] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.966] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.966] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.966] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:37.966] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.966] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.966] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.966] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.966] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.966] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.966] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.966] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.966] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.971] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:37.971] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:37.971] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:37.971] |  :  .  |  :  .  List of future strategies:
[10:49:37.971] |  :  .  |  :  .  1. sequential:
[10:49:37.971] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.971] |  :  .  |  :  .     - tweaked: FALSE
[10:49:37.971] |  :  .  |  :  .     - call: plan(strategy)
[10:49:37.972] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.972] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.972] |  :  .  |  assign_globals() ...
[10:49:37.972] |  :  .  |  List of 7
[10:49:37.972] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:37.972] |  :  .  |   $ breaks                   : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:37.972] |  :  .  |   $ wool                     : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.972] |  :  .  |   $ future.call.arguments    : list()
[10:49:37.972] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:37.972] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:37.972] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.972] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:37.972] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.972] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:37.972] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.972] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:37.972] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.972] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:37.972] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:37.972] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:37.972] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:37.972] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:37.972] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:37.972] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:37.972] |  :  .  |   - attr(*, "where")=List of 7
[10:49:37.972] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:37.972] |  :  .  |    ..$ breaks                   :<environment: R_EmptyEnv> 
[10:49:37.972] |  :  .  |    ..$ wool                     :<environment: R_EmptyEnv> 
[10:49:37.972] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:37.972] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:37.972] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:37.972] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:37.972] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:37.972] |  :  .  |   - attr(*, "total_size")= num 18867
[10:49:37.972] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:37.972] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:37.982] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:37.982] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:37.982] |  :  .  |  - copied ‘breaks’ to environment
[10:49:37.982] |  :  .  |  - copied ‘wool’ to environment
[10:49:37.983] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:37.983] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:37.983] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:37.983] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:37.983] |  :  .  |  assign_globals() ... done
[10:49:37.987] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.987] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:37.987] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:37.987] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:37.987] |  :  .  |  :  .  |  :  New stack:
[10:49:37.987] |  :  .  |  :  .  |  :  List of 1
[10:49:37.987] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.987] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.987] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.987] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.987] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.987] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.987] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.987] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.987] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.987] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.990] |  :  .  |  :  .  |  :  Old stack:
[10:49:37.990] |  :  .  |  :  .  |  :  List of 1
[10:49:37.990] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:37.990] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:37.990] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.990] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.990] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.990] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:37.990] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:37.990] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:37.990] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:37.990] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:37.993] |  :  .  |  :  .  |  :  Identical
[10:49:37.993] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:37.993] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:37.993] |  :  .  |  :  .  |  List of future strategies:
[10:49:37.993] |  :  .  |  :  .  |  1. sequential:
[10:49:37.993] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:37.993] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:37.993] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:37.994] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:37.994] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.994] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:37.994] |  :  .  |  SequentialFuture started (and completed)
[10:49:37.994] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:37.995] |  :  Launching futures ... done
[10:49:37.995] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.995] |  Using SequentialFutureBackend ... done
[10:49:37.995] run() for Future (‘SequentialFuture’) ... done
[10:49:37.995] Created future:
[10:49:37.995] SequentialFuture:
[10:49:37.995] Label: ‘future_by-1’
[10:49:37.995] Expression:
[10:49:37.995] {
[10:49:37.995]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:37.995]     "# expression in do.call(), because function called uses '...'  "
[10:49:37.995]     "# as a global variable                                         "
[10:49:37.995]     do.call(function(...) {
[10:49:37.995]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:37.995]         "# without having an '...' argument. This means '...' is treated"
[10:49:37.995]         "# as a global variable. This may happen when FUN() is an       "
[10:49:37.995]         "# anonymous function.                                          "
[10:49:37.995]         "#                                                              "
[10:49:37.995]         "# If an anonymous function, we will make sure to restore the   "
[10:49:37.995]         "# function environment of FUN() to the calling environment.    "
[10:49:37.995]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:37.995]         "# global environment, which is where globals are written.      "
[10:49:37.995]         penv <- env <- environment(...future.FUN)
[10:49:37.995]         repeat {
[10:49:37.995]             if (identical(env, globalenv()) || identical(env, 
[10:49:37.995]                 emptyenv())) 
[10:49:37.995]                 break
[10:49:37.995]             penv <- env
[10:49:37.995]             env <- parent.env(env)
[10:49:37.995]         }
[10:49:37.995]         if (identical(penv, globalenv())) {
[10:49:37.995]             environment(...future.FUN) <- environment()
[10:49:37.995]         }
[10:49:37.995]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:37.995]             !isNamespace(penv)) {
[10:49:37.995]             parent.env(penv) <- environment()
[10:49:37.995]         }
[10:49:37.995]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:37.995]         {
[10:49:37.995]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:37.995]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:37.995]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:37.995]                 on.exit(options(oopts), add = TRUE)
[10:49:37.995]             }
[10:49:37.995]             {
[10:49:37.995]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:37.995]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:37.995]                   ...future.FUN(...future.X_jj, ...)
[10:49:37.995]                 })
[10:49:37.995]             }
[10:49:37.995]         }
[10:49:37.995]     }, args = future.call.arguments)
[10:49:37.995] }
[10:49:37.995] Lazy evaluation: FALSE
[10:49:37.995] Asynchronous evaluation: TRUE
[10:49:37.995] Local evaluation: TRUE
[10:49:37.995] Environment: 0x5564a8209b88
[10:49:37.995] Capture standard output: TRUE
[10:49:37.995] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:37.995] Immediate condition classes: ‘immediateCondition’
[10:49:37.995] Globals: 7 objects totaling 4.20 KiB (function ‘...future.FUN’ of 1.28 KiB, numeric ‘breaks’ of 463 bytes, factor ‘wool’ of 342 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, ...)
[10:49:37.995] Packages: 1 packages (‘stats’)
[10:49:37.995] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:37.995] Resolved: TRUE
[10:49:37.995] Value: 13.80 KiB of class ‘list’
[10:49:37.995] Early signaling: FALSE
[10:49:37.995] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:37.995] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:37.996] Chunk #1 of 1 ... DONE
[10:49:37.996] Launching 1 futures (chunks) ... DONE
[10:49:37.996] Resolving 1 futures (chunks) ...
[10:49:37.997] value() on list ...
[10:49:37.997] |  recursive: 0
[10:49:37.997] |  length: 1
[10:49:37.997] |  
[10:49:37.997] |  Number of remaining objects: 1
[10:49:37.997] |  checking value #1 ...
[10:49:37.997] |  :  'obj' is SequentialFuture
[10:49:37.997] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:37.997] |  :  .  state: ‘finished’
[10:49:37.997] |  :  .  run: TRUE
[10:49:37.997] |  :  .  result: ‘FutureResult’
[10:49:37.998] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:37.998] |  :  SequentialFuture #1
[10:49:37.998] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:37.998] |  :  .  nx: 1
[10:49:37.998] |  :  .  relay: TRUE
[10:49:37.998] |  :  .  stdout: TRUE
[10:49:37.998] |  :  .  signal: TRUE
[10:49:37.998] |  :  .  resignal: FALSE
[10:49:37.998] |  :  .  force: TRUE
[10:49:37.998] |  :  .  relayed: [n=1] FALSE
[10:49:37.998] |  :  .  queued futures: [n=1] FALSE
[10:49:37.999] |  :  .  until=1
[10:49:37.999] |  :  .  relaying element #1
[10:49:37.999] |  :  .  relayed: [n=1] TRUE
[10:49:37.999] |  :  .  queued futures: [n=1] TRUE
[10:49:37.999] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:37.999] |  :  value(<SequentialFuture>, ...) ...
[10:49:37.999] |  :  .  value: <list>
[10:49:37.999] |  :  value(<SequentialFuture>, ...) ... done
[10:49:37.999] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:38.000] |  :  .  nx: 1
[10:49:38.000] |  :  .  relay: TRUE
[10:49:38.000] |  :  .  stdout: TRUE
[10:49:38.000] |  :  .  signal: TRUE
[10:49:38.000] |  :  .  resignal: FALSE
[10:49:38.000] |  :  .  force: TRUE
[10:49:38.000] |  :  .  relayed: [n=1] TRUE
[10:49:38.000] |  :  .  queued futures: [n=1] TRUE
[10:49:38.000] |  :  .  until=1
[10:49:38.000] |  :  .  relayed: [n=1] TRUE
[10:49:38.000] |  :  .  queued futures: [n=1] TRUE
[10:49:38.001] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:38.001] |  :  length: 0 (resolved future 1)
[10:49:38.001] |  checking value #1 ... done
[10:49:38.001] |  Relaying remaining futures ...
[10:49:38.001] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:38.001] |  :  .  nx: 1
[10:49:38.001] |  :  .  relay: TRUE
[10:49:38.001] |  :  .  stdout: TRUE
[10:49:38.001] |  :  .  signal: TRUE
[10:49:38.001] |  :  .  resignal: FALSE
[10:49:38.001] |  :  .  force: TRUE
[10:49:38.002] |  :  .  relayed: [n=1] TRUE
[10:49:38.002] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:38.002] |  :  .  relayed: [n=1] TRUE
[10:49:38.002] |  :  .  queued futures: [n=1] TRUE
[10:49:38.002] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:38.002] |  Relaying remaining futures ... done
[10:49:38.002] value() on list ... done
[10:49:38.002]  - Number of value chunks collected: 1
[10:49:38.002] Resolving 1 futures (chunks) ... DONE
[10:49:38.002] Reducing values from 1 chunks ...
[10:49:38.002]  - Number of values collected after concatenation: 3
[10:49:38.003]  - Number of values expected: 3
[10:49:38.003] Reducing values from 1 chunks ... DONE
[10:49:38.003] future_lapply() ... DONE
[10:49:38.003] future_by_internal() ... DONE
[10:49:38.003] future_by_internal() ...
[10:49:38.004] future_lapply() ...
[10:49:38.004] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.004] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.004] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.005] Number of chunks: 1
[10:49:38.005] getGlobalsAndPackagesXApply() ...
[10:49:38.005]  - future.globals: TRUE
[10:49:38.005] getGlobalsAndPackages() ...
[10:49:38.005] |  Searching for globals ...
[10:49:38.006] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:38.006] |  Searching for globals ... DONE
[10:49:38.006] |  Resolving globals: FALSE
[10:49:38.006] |  Search for packages associated with the globals ...
[10:49:38.007] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.007] |  :  Packages: [1] ‘base’
[10:49:38.007] |  Search for packages associated with the globals ... DONE
[10:49:38.007] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:38.007] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:38.007] |  Packages after dropping 'base': [0] 
[10:49:38.008] |  globals: [1] ‘FUN’
[10:49:38.008] |  packages: [0] 
[10:49:38.008] getGlobalsAndPackages() ... done
[10:49:38.008]  - globals found/used: [n=1] ‘FUN’
[10:49:38.008]  - needed namespaces: [n=0] 
[10:49:38.008] Finding globals ... DONE
[10:49:38.008]  - use_args: TRUE
[10:49:38.008]  - Getting '...' globals ...
[10:49:38.009] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:38.009] |  recursive: 0
[10:49:38.009] |  length: 1
[10:49:38.009] |  elements: ‘...’
[10:49:38.009] |  'obj' is DotDotDotList
[10:49:38.009] |  resolve(obj, ...) ...
[10:49:38.009] |  resolve(obj, ...) ... done
[10:49:38.009] |  length: 0 (resolved future 1)
[10:49:38.009] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:38.010]    - '...' content: [n=0] 
[10:49:38.010] List of 1
[10:49:38.010]  $ ...: list()
[10:49:38.010]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.010]  - attr(*, "where")=List of 1
[10:49:38.010]   ..$ ...:<environment: 0x5564a7deef70> 
[10:49:38.010]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.010]  - attr(*, "resolved")= logi TRUE
[10:49:38.010]  - attr(*, "total_size")= num NA
[10:49:38.012]  - Getting '...' globals ... DONE
[10:49:38.012] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:38.012] List of 2
[10:49:38.012]  $ ...future.FUN:function (object, ...)  
[10:49:38.012]  $ ...          : list()
[10:49:38.012]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.012]  - attr(*, "where")=List of 2
[10:49:38.012]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:38.012]   ..$ ...          :<environment: 0x5564a7deef70> 
[10:49:38.012]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.012]  - attr(*, "resolved")= logi FALSE
[10:49:38.012]  - attr(*, "total_size")= num 19278
[10:49:38.015] Packages to be attached in all futures: [n=0] 
[10:49:38.015] getGlobalsAndPackagesXApply() ... DONE
[10:49:38.016] Number of futures (= number of chunks): 1
[10:49:38.016] Launching 1 futures (chunks) ...
[10:49:38.016] Chunk #1 of 1 ...
[10:49:38.016]  - Finding globals in 'X' for chunk #1 ...
[10:49:38.016] getGlobalsAndPackages() ...
[10:49:38.016] |  Searching for globals ...
[10:49:38.017] |  :  globals found: [0] 
[10:49:38.017] |  Searching for globals ... DONE
[10:49:38.017] |  globals: [0] <none>
[10:49:38.017] |  packages: [0] <none>
[10:49:38.017] getGlobalsAndPackages() ... done
[10:49:38.017]    + additional globals found: [n=0] 
[10:49:38.017]    + additional namespaces needed: [n=0] 
[10:49:38.017]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:38.017]  - seeds: <none>
[10:49:38.017]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.017] getGlobalsAndPackages() ...
[10:49:38.018] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.018] |  Resolving globals: FALSE
[10:49:38.018] |  Tweak future expression to call with '...' arguments ...
[10:49:38.018] |  :  {
[10:49:38.018] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.018] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.018] |  :      "# as a global variable                                         "
[10:49:38.018] |  :      do.call(function(...) {
[10:49:38.018] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.018] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.018] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.018] |  :              on.exit(options(oopts), add = TRUE)
[10:49:38.018] |  :          }
[10:49:38.018] |  :          {
[10:49:38.018] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.018] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.018] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:38.018] |  :              })
[10:49:38.018] |  :          }
[10:49:38.018] |  :      }, args = future.call.arguments)
[10:49:38.018] |  :  }
[10:49:38.018] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.018] |  Search for packages associated with the globals ...
[10:49:38.019] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.019] |  :  Packages: [1] ‘base’
[10:49:38.019] |  Search for packages associated with the globals ... DONE
[10:49:38.019] |  Packages after dropping 'base': [0] 
[10:49:38.019] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.019] |  packages: [0] 
[10:49:38.019] getGlobalsAndPackages() ... done
[10:49:38.020] run() for Future (‘Future’) ...
[10:49:38.020] |  state: ‘created’
[10:49:38.020] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.020] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.020] |  Using SequentialFutureBackend ...
[10:49:38.020] |  :  Launching futures ...
[10:49:38.020] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:38.020] |  :  .  |  getFutureData() ...
[10:49:38.020] |  :  .  |  :  getFutureCore() ...
[10:49:38.021] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:38.021] |  :  .  |  :  getFutureCore() ... done
[10:49:38.021] |  :  .  |  :  getFutureCapture() ...
[10:49:38.023] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.023] |  :  .  |  :  getFutureContext() ...
[10:49:38.023] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.023] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.023] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.023] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.023] |  :  .  |  :  getFutureContext() ... done
[10:49:38.023] |  :  .  |  getFutureData() ... done
[10:49:38.024] |  :  .  |  attachPackages() ...
[10:49:38.024] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.024] |  :  .  |  attachPackages() ... DONE
[10:49:38.024] |  :  .  |  attachPackages() ...
[10:49:38.024] |  :  .  |  :  packages: [n=0] 
[10:49:38.024] |  :  .  |  attachPackages() ... DONE
[10:49:38.024] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.025] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.025] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.025] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.025] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.025] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.025] |  :  .  |  :  .  |  New stack:
[10:49:38.025] |  :  .  |  :  .  |  List of 1
[10:49:38.025] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.025] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.025] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.025] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.025] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.025] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.025] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.028] |  :  .  |  :  .  |  Old stack:
[10:49:38.028] |  :  .  |  :  .  |  List of 1
[10:49:38.028] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.028] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.028] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.028] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.028] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.028] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.028] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:38.028] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.028] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.028] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.031] |  :  .  |  :  .  |  Not identical
[10:49:38.031] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.031] |  :  .  |  :  .  |  :  List of 2
[10:49:38.031] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.031] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.031] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.031] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.031] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.031] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.031] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.031] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.031] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.031] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.031] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.031] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.031] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:38.031] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.031] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.035] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.035] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.035] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:38.036] |  :  .  |  :  .  List of future strategies:
[10:49:38.036] |  :  .  |  :  .  1. sequential:
[10:49:38.036] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.036] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.036] |  :  .  |  :  .     - call: plan(strategy)
[10:49:38.036] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.036] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.036] |  :  .  |  assign_globals() ...
[10:49:38.036] |  :  .  |  List of 5
[10:49:38.036] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:38.036] |  :  .  |   $ future.call.arguments    : list()
[10:49:38.036] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.036] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:38.036] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.036] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:38.036] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.036] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:38.036] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.036] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:38.036] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.036] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:38.036] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.036] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:38.036] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.036] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:38.036] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.036] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.036] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.036] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.036] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.036] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.036] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.036] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.036] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.036] |  :  .  |   - attr(*, "total_size")= num 19278
[10:49:38.036] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.036] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.045] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.045] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.045] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.046] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.046] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.046] |  :  .  |  assign_globals() ... done
[10:49:38.049] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.049] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.049] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.049] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.049] |  :  .  |  :  .  |  :  New stack:
[10:49:38.049] |  :  .  |  :  .  |  :  List of 1
[10:49:38.049] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.049] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.049] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.049] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.049] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.049] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.049] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:38.049] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.049] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.049] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.052] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.052] |  :  .  |  :  .  |  :  List of 1
[10:49:38.052] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.052] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.052] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.052] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.052] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.052] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.052] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:38.052] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.052] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.052] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.055] |  :  .  |  :  .  |  :  Identical
[10:49:38.055] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.055] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:38.056] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.056] |  :  .  |  :  .  |  1. sequential:
[10:49:38.056] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.056] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.056] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.056] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.056] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.056] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.056] |  :  .  |  SequentialFuture started (and completed)
[10:49:38.057] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:38.057] |  :  Launching futures ... done
[10:49:38.057] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:38.057] |  Using SequentialFutureBackend ... done
[10:49:38.057] run() for Future (‘SequentialFuture’) ... done
[10:49:38.057] Created future:
[10:49:38.057] SequentialFuture:
[10:49:38.057] Label: ‘future_by-1’
[10:49:38.057] Expression:
[10:49:38.057] {
[10:49:38.057]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.057]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.057]     "# as a global variable                                         "
[10:49:38.057]     do.call(function(...) {
[10:49:38.057]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.057]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.057]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.057]             on.exit(options(oopts), add = TRUE)
[10:49:38.057]         }
[10:49:38.057]         {
[10:49:38.057]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.057]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.057]                 ...future.FUN(...future.X_jj, ...)
[10:49:38.057]             })
[10:49:38.057]         }
[10:49:38.057]     }, args = future.call.arguments)
[10:49:38.057] }
[10:49:38.057] Lazy evaluation: FALSE
[10:49:38.057] Asynchronous evaluation: TRUE
[10:49:38.057] Local evaluation: TRUE
[10:49:38.057] Environment: 0x5564a7dbf248
[10:49:38.057] Capture standard output: TRUE
[10:49:38.057] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.057] Immediate condition classes: ‘immediateCondition’
[10:49:38.057] Globals: 5 objects totaling 2.41 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.057] Packages: <none>
[10:49:38.057] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.057] Resolved: TRUE
[10:49:38.057] Value: 1.39 KiB of class ‘list’
[10:49:38.057] Early signaling: FALSE
[10:49:38.057] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.057] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:38.058] Chunk #1 of 1 ... DONE
[10:49:38.058] Launching 1 futures (chunks) ... DONE
[10:49:38.058] Resolving 1 futures (chunks) ...
[10:49:38.059] value() on list ...
[10:49:38.059] |  recursive: 0
[10:49:38.059] |  length: 1
[10:49:38.059] |  
[10:49:38.059] |  Number of remaining objects: 1
[10:49:38.059] |  checking value #1 ...
[10:49:38.059] |  :  'obj' is SequentialFuture
[10:49:38.059] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:38.059] |  :  .  state: ‘finished’
[10:49:38.059] |  :  .  run: TRUE
[10:49:38.059] |  :  .  result: ‘FutureResult’
[10:49:38.060] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:38.060] |  :  SequentialFuture #1
[10:49:38.060] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:38.060] |  :  .  nx: 1
[10:49:38.060] |  :  .  relay: TRUE
[10:49:38.060] |  :  .  stdout: TRUE
[10:49:38.060] |  :  .  signal: TRUE
[10:49:38.060] |  :  .  resignal: FALSE
[10:49:38.060] |  :  .  force: TRUE
[10:49:38.060] |  :  .  relayed: [n=1] FALSE
[10:49:38.060] |  :  .  queued futures: [n=1] FALSE
[10:49:38.061] |  :  .  until=1
[10:49:38.061] |  :  .  relaying element #1
[10:49:38.061] |  :  .  relayed: [n=1] TRUE
[10:49:38.061] |  :  .  queued futures: [n=1] TRUE
[10:49:38.061] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:38.061] |  :  value(<SequentialFuture>, ...) ...
[10:49:38.061] |  :  .  value: <list>
[10:49:38.061] |  :  value(<SequentialFuture>, ...) ... done
[10:49:38.061] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:38.062] |  :  .  nx: 1
[10:49:38.062] |  :  .  relay: TRUE
[10:49:38.062] |  :  .  stdout: TRUE
[10:49:38.062] |  :  .  signal: TRUE
[10:49:38.062] |  :  .  resignal: FALSE
[10:49:38.062] |  :  .  force: TRUE
[10:49:38.062] |  :  .  relayed: [n=1] TRUE
[10:49:38.062] |  :  .  queued futures: [n=1] TRUE
[10:49:38.062] |  :  .  until=1
[10:49:38.062] |  :  .  relayed: [n=1] TRUE
[10:49:38.062] |  :  .  queued futures: [n=1] TRUE
[10:49:38.062] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:38.063] |  :  length: 0 (resolved future 1)
[10:49:38.063] |  checking value #1 ... done
[10:49:38.063] |  Relaying remaining futures ...
[10:49:38.063] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:38.063] |  :  .  nx: 1
[10:49:38.063] |  :  .  relay: TRUE
[10:49:38.063] |  :  .  stdout: TRUE
[10:49:38.063] |  :  .  signal: TRUE
[10:49:38.063] |  :  .  resignal: FALSE
[10:49:38.063] |  :  .  force: TRUE
[10:49:38.063] |  :  .  relayed: [n=1] TRUE
[10:49:38.064] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:38.064] |  :  .  relayed: [n=1] TRUE
[10:49:38.064] |  :  .  queued futures: [n=1] TRUE
[10:49:38.064] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:38.064] |  Relaying remaining futures ... done
[10:49:38.064] value() on list ... done
[10:49:38.064]  - Number of value chunks collected: 1
[10:49:38.064] Resolving 1 futures (chunks) ... DONE
[10:49:38.064] Reducing values from 1 chunks ...
[10:49:38.064]  - Number of values collected after concatenation: 3
[10:49:38.064]  - Number of values expected: 3
[10:49:38.065] Reducing values from 1 chunks ... DONE
[10:49:38.065] future_lapply() ... DONE
[10:49:38.065] future_by_internal() ... DONE
[10:49:38.066] future_by_internal() ...
Warning in future_by_match_FUN(FUN) :
  Specifying the function 'FUN' for future_by() as a character string is deprecated in future.apply (>= 1.10.0) [2022-11-04], because base::by() does not support it. Instead, specify it as a function, e.g. FUN = sqrt and FUN = `[[`. It is deprecated.
[10:49:38.066] future_lapply() ...
[10:49:38.067] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.067] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.067] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.067] Number of chunks: 1
[10:49:38.067] getGlobalsAndPackagesXApply() ...
[10:49:38.067]  - future.globals: TRUE
[10:49:38.067] getGlobalsAndPackages() ...
[10:49:38.067] |  Searching for globals ...
[10:49:38.068] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:38.069] |  Searching for globals ... DONE
[10:49:38.069] |  Resolving globals: FALSE
[10:49:38.069] |  Search for packages associated with the globals ...
[10:49:38.069] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.069] |  :  Packages: [1] ‘base’
[10:49:38.069] |  Search for packages associated with the globals ... DONE
[10:49:38.069] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:38.070] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:38.070] |  Packages after dropping 'base': [0] 
[10:49:38.070] |  globals: [1] ‘FUN’
[10:49:38.070] |  packages: [0] 
[10:49:38.070] getGlobalsAndPackages() ... done
[10:49:38.070]  - globals found/used: [n=1] ‘FUN’
[10:49:38.070]  - needed namespaces: [n=0] 
[10:49:38.070] Finding globals ... DONE
[10:49:38.071]  - use_args: TRUE
[10:49:38.071]  - Getting '...' globals ...
[10:49:38.071] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:38.071] |  recursive: 0
[10:49:38.071] |  length: 1
[10:49:38.071] |  elements: ‘...’
[10:49:38.071] |  'obj' is DotDotDotList
[10:49:38.071] |  resolve(obj, ...) ...
[10:49:38.072] |  resolve(obj, ...) ... done
[10:49:38.072] |  length: 0 (resolved future 1)
[10:49:38.072] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:38.072]    - '...' content: [n=0] 
[10:49:38.072] List of 1
[10:49:38.072]  $ ...: list()
[10:49:38.072]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.072]  - attr(*, "where")=List of 1
[10:49:38.072]   ..$ ...:<environment: 0x5564a779a000> 
[10:49:38.072]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.072]  - attr(*, "resolved")= logi TRUE
[10:49:38.072]  - attr(*, "total_size")= num NA
[10:49:38.074]  - Getting '...' globals ... DONE
[10:49:38.075] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:38.075] List of 2
[10:49:38.075]  $ ...future.FUN:function (object, ...)  
[10:49:38.075]  $ ...          : list()
[10:49:38.075]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.075]  - attr(*, "where")=List of 2
[10:49:38.075]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:38.075]   ..$ ...          :<environment: 0x5564a779a000> 
[10:49:38.075]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.075]  - attr(*, "resolved")= logi FALSE
[10:49:38.075]  - attr(*, "total_size")= num 18647
[10:49:38.077] Packages to be attached in all futures: [n=0] 
[10:49:38.078] getGlobalsAndPackagesXApply() ... DONE
[10:49:38.078] Number of futures (= number of chunks): 1
[10:49:38.078] Launching 1 futures (chunks) ...
[10:49:38.078] Chunk #1 of 1 ...
[10:49:38.078]  - Finding globals in 'X' for chunk #1 ...
[10:49:38.078] getGlobalsAndPackages() ...
[10:49:38.078] |  Searching for globals ...
[10:49:38.079] |  :  globals found: [0] 
[10:49:38.079] |  Searching for globals ... DONE
[10:49:38.079] |  globals: [0] <none>
[10:49:38.079] |  packages: [0] <none>
[10:49:38.079] getGlobalsAndPackages() ... done
[10:49:38.079]    + additional globals found: [n=0] 
[10:49:38.079]    + additional namespaces needed: [n=0] 
[10:49:38.079]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:38.080]  - seeds: <none>
[10:49:38.080]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.080] getGlobalsAndPackages() ...
[10:49:38.080] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.080] |  Resolving globals: FALSE
[10:49:38.080] |  Tweak future expression to call with '...' arguments ...
[10:49:38.080] |  :  {
[10:49:38.080] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.080] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.080] |  :      "# as a global variable                                         "
[10:49:38.080] |  :      do.call(function(...) {
[10:49:38.080] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.080] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.080] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.080] |  :              on.exit(options(oopts), add = TRUE)
[10:49:38.080] |  :          }
[10:49:38.080] |  :          {
[10:49:38.080] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.080] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.080] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:38.080] |  :              })
[10:49:38.080] |  :          }
[10:49:38.080] |  :      }, args = future.call.arguments)
[10:49:38.080] |  :  }
[10:49:38.080] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.081] |  Search for packages associated with the globals ...
[10:49:38.081] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.081] |  :  Packages: [1] ‘base’
[10:49:38.081] |  Search for packages associated with the globals ... DONE
[10:49:38.081] |  Packages after dropping 'base': [0] 
[10:49:38.081] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.081] |  packages: [0] 
[10:49:38.082] getGlobalsAndPackages() ... done
[10:49:38.082] run() for Future (‘Future’) ...
[10:49:38.082] |  state: ‘created’
[10:49:38.082] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.082] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.082] |  Using SequentialFutureBackend ...
[10:49:38.082] |  :  Launching futures ...
[10:49:38.082] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:38.083] |  :  .  |  getFutureData() ...
[10:49:38.083] |  :  .  |  :  getFutureCore() ...
[10:49:38.083] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:38.083] |  :  .  |  :  getFutureCore() ... done
[10:49:38.083] |  :  .  |  :  getFutureCapture() ...
[10:49:38.083] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.083] |  :  .  |  :  getFutureContext() ...
[10:49:38.083] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.083] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.083] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.084] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.084] |  :  .  |  :  getFutureContext() ... done
[10:49:38.084] |  :  .  |  getFutureData() ... done
[10:49:38.084] |  :  .  |  attachPackages() ...
[10:49:38.084] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.084] |  :  .  |  attachPackages() ... DONE
[10:49:38.084] |  :  .  |  attachPackages() ...
[10:49:38.084] |  :  .  |  :  packages: [n=0] 
[10:49:38.084] |  :  .  |  attachPackages() ... DONE
[10:49:38.085] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.085] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.085] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.085] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.085] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.086] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.086] |  :  .  |  :  .  |  New stack:
[10:49:38.086] |  :  .  |  :  .  |  List of 1
[10:49:38.086] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.086] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.086] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.086] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.086] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.086] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.086] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.088] |  :  .  |  :  .  |  Old stack:
[10:49:38.088] |  :  .  |  :  .  |  List of 1
[10:49:38.088] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.088] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.088] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.088] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.088] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.088] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.088] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:38.088] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.088] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.088] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.091] |  :  .  |  :  .  |  Not identical
[10:49:38.091] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.091] |  :  .  |  :  .  |  :  List of 2
[10:49:38.091] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.091] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.091] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.091] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.091] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.091] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.091] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.091] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.091] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.091] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.091] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.091] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.091] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:38.091] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.091] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.098] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.098] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.098] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:38.098] |  :  .  |  :  .  List of future strategies:
[10:49:38.098] |  :  .  |  :  .  1. sequential:
[10:49:38.098] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.098] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.098] |  :  .  |  :  .     - call: plan(strategy)
[10:49:38.099] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.099] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.099] |  :  .  |  assign_globals() ...
[10:49:38.099] |  :  .  |  List of 5
[10:49:38.099] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:38.099] |  :  .  |   $ future.call.arguments    : list()
[10:49:38.099] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.099] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:38.099] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.099] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:38.099] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.099] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:38.099] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.099] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:38.099] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.099] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:38.099] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.099] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:38.099] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.099] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:38.099] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.099] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.099] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.099] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.099] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.099] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.099] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.099] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.099] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.099] |  :  .  |   - attr(*, "total_size")= num 18647
[10:49:38.099] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.099] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.108] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.108] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.108] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.108] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.108] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.108] |  :  .  |  assign_globals() ... done
[10:49:38.111] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.111] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.111] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.111] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.112] |  :  .  |  :  .  |  :  New stack:
[10:49:38.112] |  :  .  |  :  .  |  :  List of 1
[10:49:38.112] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.112] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.112] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.112] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.112] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.112] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.112] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:38.112] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.112] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.112] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.115] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.115] |  :  .  |  :  .  |  :  List of 1
[10:49:38.115] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.115] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.115] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.115] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.115] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.115] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.115] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:38.115] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.115] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.115] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.118] |  :  .  |  :  .  |  :  Identical
[10:49:38.118] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.118] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:38.118] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.118] |  :  .  |  :  .  |  1. sequential:
[10:49:38.118] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.118] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.118] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.118] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.118] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.119] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.119] |  :  .  |  SequentialFuture started (and completed)
[10:49:38.119] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:38.119] |  :  Launching futures ... done
[10:49:38.119] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:38.119] |  Using SequentialFutureBackend ... done
[10:49:38.119] run() for Future (‘SequentialFuture’) ... done
[10:49:38.119] Created future:
[10:49:38.119] SequentialFuture:
[10:49:38.119] Label: ‘future_by-1’
[10:49:38.119] Expression:
[10:49:38.119] {
[10:49:38.119]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.119]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.119]     "# as a global variable                                         "
[10:49:38.119]     do.call(function(...) {
[10:49:38.119]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.119]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.119]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.119]             on.exit(options(oopts), add = TRUE)
[10:49:38.119]         }
[10:49:38.119]         {
[10:49:38.119]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.119]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.119]                 ...future.FUN(...future.X_jj, ...)
[10:49:38.119]             })
[10:49:38.119]         }
[10:49:38.119]     }, args = future.call.arguments)
[10:49:38.119] }
[10:49:38.119] Lazy evaluation: FALSE
[10:49:38.119] Asynchronous evaluation: TRUE
[10:49:38.119] Local evaluation: TRUE
[10:49:38.119] Environment: 0x5564a77641b0
[10:49:38.119] Capture standard output: TRUE
[10:49:38.119] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.119] Immediate condition classes: ‘immediateCondition’
[10:49:38.119] Globals: 5 objects totaling 2.41 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.98 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.119] Packages: <none>
[10:49:38.119] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.119] Resolved: TRUE
[10:49:38.119] Value: 1.39 KiB of class ‘list’
[10:49:38.119] Early signaling: FALSE
[10:49:38.119] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.119] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:38.120] Chunk #1 of 1 ... DONE
[10:49:38.121] Launching 1 futures (chunks) ... DONE
[10:49:38.121] Resolving 1 futures (chunks) ...
[10:49:38.121] value() on list ...
[10:49:38.121] |  recursive: 0
[10:49:38.121] |  length: 1
[10:49:38.121] |  
[10:49:38.121] |  Number of remaining objects: 1
[10:49:38.121] |  checking value #1 ...
[10:49:38.121] |  :  'obj' is SequentialFuture
[10:49:38.121] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:38.121] |  :  .  state: ‘finished’
[10:49:38.122] |  :  .  run: TRUE
[10:49:38.122] |  :  .  result: ‘FutureResult’
[10:49:38.122] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:38.122] |  :  SequentialFuture #1
[10:49:38.122] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:38.122] |  :  .  nx: 1
[10:49:38.122] |  :  .  relay: TRUE
[10:49:38.122] |  :  .  stdout: TRUE
[10:49:38.122] |  :  .  signal: TRUE
[10:49:38.122] |  :  .  resignal: FALSE
[10:49:38.122] |  :  .  force: TRUE
[10:49:38.123] |  :  .  relayed: [n=1] FALSE
[10:49:38.123] |  :  .  queued futures: [n=1] FALSE
[10:49:38.123] |  :  .  until=1
[10:49:38.123] |  :  .  relaying element #1
[10:49:38.123] |  :  .  relayed: [n=1] TRUE
[10:49:38.123] |  :  .  queued futures: [n=1] TRUE
[10:49:38.123] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:38.123] |  :  value(<SequentialFuture>, ...) ...
[10:49:38.123] |  :  .  value: <list>
[10:49:38.124] |  :  value(<SequentialFuture>, ...) ... done
[10:49:38.124] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:38.124] |  :  .  nx: 1
[10:49:38.124] |  :  .  relay: TRUE
[10:49:38.124] |  :  .  stdout: TRUE
[10:49:38.124] |  :  .  signal: TRUE
[10:49:38.124] |  :  .  resignal: FALSE
[10:49:38.124] |  :  .  force: TRUE
[10:49:38.124] |  :  .  relayed: [n=1] TRUE
[10:49:38.124] |  :  .  queued futures: [n=1] TRUE
[10:49:38.124] |  :  .  until=1
[10:49:38.125] |  :  .  relayed: [n=1] TRUE
[10:49:38.125] |  :  .  queued futures: [n=1] TRUE
[10:49:38.125] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:38.125] |  :  length: 0 (resolved future 1)
[10:49:38.125] |  checking value #1 ... done
[10:49:38.125] |  Relaying remaining futures ...
[10:49:38.125] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:38.125] |  :  .  nx: 1
[10:49:38.125] |  :  .  relay: TRUE
[10:49:38.125] |  :  .  stdout: TRUE
[10:49:38.125] |  :  .  signal: TRUE
[10:49:38.126] |  :  .  resignal: FALSE
[10:49:38.126] |  :  .  force: TRUE
[10:49:38.126] |  :  .  relayed: [n=1] TRUE
[10:49:38.126] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:38.126] |  :  .  relayed: [n=1] TRUE
[10:49:38.126] |  :  .  queued futures: [n=1] TRUE
[10:49:38.126] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:38.126] |  Relaying remaining futures ... done
[10:49:38.126] value() on list ... done
[10:49:38.126]  - Number of value chunks collected: 1
[10:49:38.126] Resolving 1 futures (chunks) ... DONE
[10:49:38.127] Reducing values from 1 chunks ...
[10:49:38.127]  - Number of values collected after concatenation: 3
[10:49:38.127]  - Number of values expected: 3
[10:49:38.127] Reducing values from 1 chunks ... DONE
[10:49:38.127] future_lapply() ... DONE
[10:49:38.127] future_by_internal() ... DONE
[10:49:38.128] future_by_internal() ...
- plan('multicore') ...
[10:49:38.128] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.128] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:38.128] |  :  all.equal() for FutureStrategyList ...
[10:49:38.129] |  :  .  New stack:
[10:49:38.129] |  :  .  List of 1
[10:49:38.129] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.129] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.129] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.129] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.129] |  :  .      ...)  
[10:49:38.129] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.129] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.129] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.129] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.131] |  :  .  Old stack:
[10:49:38.131] |  :  .  List of 1
[10:49:38.131] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.131] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.131] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.131] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.131] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.131] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.131] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:38.131] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.131] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.131] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.134] |  :  .  Not identical
[10:49:38.134] |  :  .  all.equal() for future ...
[10:49:38.134] |  :  .  |  List of 2
[10:49:38.134] |  :  .  |   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.134] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.134] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.134] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.134] |  :  .  |      ...)  
[10:49:38.134] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.134] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.134] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.134] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.134] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.134] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.134] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.134] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.134] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.134] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a77c6a58> 
[10:49:38.134] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.134] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.138] |  :  .  |  Formals differ
[10:49:38.139] |  :  .  all.equal() for future ... done
[10:49:38.139] |  :  .  Future strategies differ at level 1
[10:49:38.139] |  :  all.equal() for FutureStrategyList ... done
[10:49:38.139] |  :  plan(): Setting new future strategy stack:
[10:49:38.139] |  :  List of future strategies:
[10:49:38.139] |  :  1. multicore:
[10:49:38.139] |  :     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.139] |  :     - tweaked: FALSE
[10:49:38.139] |  :     - call: plan(strategy)
[10:49:38.139] |  :  List of 1
[10:49:38.139] |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.139] |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.139] |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.139] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.139] |  :      ...)  
[10:49:38.139] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.139] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.139] |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.139] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.141] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:38.142] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.142] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.142] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.142] |  :  .  Legacy shutdown of cluster workers ...
[10:49:38.142] |  :  .  |  Stopping existing cluster ...
[10:49:38.142] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:38.142] |  :  .  |  Stopping existing cluster ... done
[10:49:38.142] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:38.142] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:38.143] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:49:38.143] |  :  .  function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.143] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.143] |  :  .   - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.143] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.143] |  :  .      ...)  
[10:49:38.143] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.143] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.143] |  :  .   - attr(*, "call")= language plan(strategy)
[10:49:38.144] |  :  .  init: NULL
[10:49:38.144] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:49:38.145] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.145] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.145] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.145] |  :  Backend function: <‘NULL’>
[10:49:38.146] |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.147] |  :  plan(): nbrOfWorkers() = 2
[10:49:38.147] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:38.147] plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.147] future_by_internal() ...
[10:49:38.147] future_lapply() ...
[10:49:38.148] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.148] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.148] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.148] Backend function: <‘NULL’>
[10:49:38.150] Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.151] Number of chunks: 2
[10:49:38.151] getGlobalsAndPackagesXApply() ...
[10:49:38.151]  - future.globals: TRUE
[10:49:38.151] getGlobalsAndPackages() ...
[10:49:38.151] |  Searching for globals ...
[10:49:38.152] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:38.152] |  Searching for globals ... DONE
[10:49:38.152] |  Resolving globals: FALSE
[10:49:38.152] |  Search for packages associated with the globals ...
[10:49:38.153] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.153] |  :  Packages: [1] ‘base’
[10:49:38.153] |  Search for packages associated with the globals ... DONE
[10:49:38.153] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:38.153] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:38.154] |  Packages after dropping 'base': [0] 
[10:49:38.154] |  globals: [1] ‘FUN’
[10:49:38.154] |  packages: [0] 
[10:49:38.154] getGlobalsAndPackages() ... done
[10:49:38.154]  - globals found/used: [n=1] ‘FUN’
[10:49:38.154]  - needed namespaces: [n=0] 
[10:49:38.154] Finding globals ... DONE
[10:49:38.154]  - use_args: TRUE
[10:49:38.154]  - Getting '...' globals ...
[10:49:38.155] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:38.155] |  recursive: 0
[10:49:38.155] |  length: 1
[10:49:38.155] |  elements: ‘...’
[10:49:38.155] |  'obj' is DotDotDotList
[10:49:38.155] |  resolve(obj, ...) ...
[10:49:38.155] |  resolve(obj, ...) ... done
[10:49:38.155] |  length: 0 (resolved future 1)
[10:49:38.156] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:38.156]    - '...' content: [n=0] 
[10:49:38.156] List of 1
[10:49:38.156]  $ ...: list()
[10:49:38.156]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.156]  - attr(*, "where")=List of 1
[10:49:38.156]   ..$ ...:<environment: 0x5564a7a84b68> 
[10:49:38.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.156]  - attr(*, "resolved")= logi TRUE
[10:49:38.156]  - attr(*, "total_size")= num NA
[10:49:38.158]  - Getting '...' globals ... DONE
[10:49:38.158] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:38.159] List of 2
[10:49:38.159]  $ ...future.FUN:function (object, ...)  
[10:49:38.159]  $ ...          : list()
[10:49:38.159]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.159]  - attr(*, "where")=List of 2
[10:49:38.159]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:38.159]   ..$ ...          :<environment: 0x5564a7a84b68> 
[10:49:38.159]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.159]  - attr(*, "resolved")= logi FALSE
[10:49:38.159]  - attr(*, "total_size")= num 15670
[10:49:38.161] Packages to be attached in all futures: [n=0] 
[10:49:38.161] getGlobalsAndPackagesXApply() ... DONE
[10:49:38.162] Number of futures (= number of chunks): 2
[10:49:38.162] Launching 2 futures (chunks) ...
[10:49:38.162] Chunk #1 of 2 ...
[10:49:38.162]  - Finding globals in 'X' for chunk #1 ...
[10:49:38.162] getGlobalsAndPackages() ...
[10:49:38.162] |  Searching for globals ...
[10:49:38.162] |  :  globals found: [0] 
[10:49:38.163] |  Searching for globals ... DONE
[10:49:38.163] |  globals: [0] <none>
[10:49:38.163] |  packages: [0] <none>
[10:49:38.163] getGlobalsAndPackages() ... done
[10:49:38.163]    + additional globals found: [n=0] 
[10:49:38.163]    + additional namespaces needed: [n=0] 
[10:49:38.163]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:38.163]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.163]  - seeds: <none>
[10:49:38.163]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.163] getGlobalsAndPackages() ...
[10:49:38.164] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.164] |  Resolving globals: FALSE
[10:49:38.164] |  Tweak future expression to call with '...' arguments ...
[10:49:38.164] |  :  {
[10:49:38.164] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.164] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.164] |  :      "# as a global variable                                         "
[10:49:38.164] |  :      do.call(function(...) {
[10:49:38.164] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.164] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.164] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.164] |  :              on.exit(options(oopts), add = TRUE)
[10:49:38.164] |  :          }
[10:49:38.164] |  :          {
[10:49:38.164] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.164] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.164] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:38.164] |  :              })
[10:49:38.164] |  :          }
[10:49:38.164] |  :      }, args = future.call.arguments)
[10:49:38.164] |  :  }
[10:49:38.164] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.164] |  Search for packages associated with the globals ...
[10:49:38.165] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.165] |  :  Packages: [1] ‘base’
[10:49:38.165] |  Search for packages associated with the globals ... DONE
[10:49:38.165] |  Packages after dropping 'base': [0] 
[10:49:38.165] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.165] |  packages: [0] 
[10:49:38.165] getGlobalsAndPackages() ... done
[10:49:38.166] run() for Future (‘Future’) ...
[10:49:38.166] |  state: ‘created’
[10:49:38.166] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.166] |  :  makeFutureBackend(<multicore>) ...
[10:49:38.166] |  :  .  Backend function: <‘NULL’>
[10:49:38.167] |  :  .  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.168] |  :  makeFutureBackend(<multicore>) ... done
[10:49:38.168] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.168] |  Using MulticoreFutureBackend ...
[10:49:38.168] |  :  Launching futures ...
[10:49:38.168] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.168] |  :  .  |  getFutureData() ...
[10:49:38.168] |  :  .  |  :  getFutureCore() ...
[10:49:38.169] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:38.169] |  :  .  |  :  getFutureCore() ... done
[10:49:38.169] |  :  .  |  :  getFutureCapture() ...
[10:49:38.169] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.169] |  :  .  |  :  getFutureContext() ...
[10:49:38.169] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.169] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.169] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.169] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.169] |  :  .  |  :  getFutureContext() ... done
[10:49:38.170] |  :  .  |  getFutureData() ... done
[10:49:38.170] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.171] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.174] |  :  .  |  MulticoreFuture started
[10:49:38.174] |  :  .  |  attachPackages() ...
[10:49:38.174] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.175] |  :  Launching futures ... done
[10:49:38.175] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.175] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.175] |  :  .  |  attachPackages() ... DONE
[10:49:38.175] |  Using MulticoreFutureBackend ... done
[10:49:38.175] |  :  .  |  attachPackages() ...
[10:49:38.175] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.175] |  :  .  |  :  packages: [n=0] 
[10:49:38.176] Created future:
[10:49:38.176] |  :  .  |  attachPackages() ... DONE
[10:49:38.176] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.177] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.177] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.177] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.178] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.178] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.178] |  :  .  |  :  .  |  New stack:
[10:49:38.189] readImmediateCondition() ...
[10:49:38.189]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.178] |  :  .  |  :  .  |  List of 1
[10:49:38.178] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.178] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.178] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.178] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.178] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.178] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.178] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.189]  - Number of RDS files: 0
[10:49:38.189] |  :  .  |  :  .  |  Old stack:
[10:49:38.189] readImmediateCondition() ... DONE
[10:49:38.176] MulticoreFuture:
[10:49:38.176] Label: ‘future_by-1’
[10:49:38.176] Expression:
[10:49:38.176] {
[10:49:38.176]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.176]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.176]     "# as a global variable                                         "
[10:49:38.176]     do.call(function(...) {
[10:49:38.176]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.176]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.176]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.176]             on.exit(options(oopts), add = TRUE)
[10:49:38.176]         }
[10:49:38.176]         {
[10:49:38.176]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.176]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.176]                 ...future.FUN(...future.X_jj, ...)
[10:49:38.176]             })
[10:49:38.176]         }
[10:49:38.176]     }, args = future.call.arguments)
[10:49:38.176] }
[10:49:38.176] Lazy evaluation: FALSE
[10:49:38.176] Asynchronous evaluation: TRUE
[10:49:38.176] Local evaluation: TRUE
[10:49:38.176] Environment: R_GlobalEnv
[10:49:38.176] Capture standard output: TRUE
[10:49:38.176] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.176] Immediate condition classes: ‘immediateCondition’
[10:49:38.176] Globals: 5 objects totaling 996 bytes (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 564 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.176] Packages: <none>
[10:49:38.176] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.176] Resolved: FALSE
[10:49:38.176] Value: <not collected>
[10:49:38.176] Conditions captured: <none>
[10:49:38.176] Early signaling: FALSE
[10:49:38.176] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.176] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.190] Chunk #1 of 2 ... DONE
[10:49:38.190] Chunk #2 of 2 ...
[10:49:38.190]  - Finding globals in 'X' for chunk #2 ...
[10:49:38.190] getGlobalsAndPackages() ...
[10:49:38.193] |  Searching for globals ...
[10:49:38.189] |  :  .  |  :  .  |  List of 1
[10:49:38.189] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.189] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.189] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.189] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.189] |  :  .  |  :  .  |      ...)  
[10:49:38.189] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.189] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.189] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.189] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.189] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.189] |  :  .  |  :  .  |      ...)  
[10:49:38.189] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.189] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.194] |  :  .  |  :  .  |  Not identical
[10:49:38.194] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.194] |  :  globals found: [0] 
[10:49:38.195] |  Searching for globals ... DONE
[10:49:38.195] |  globals: [0] <none>
[10:49:38.195] |  packages: [0] <none>
[10:49:38.195] getGlobalsAndPackages() ... done
[10:49:38.195]    + additional globals found: [n=0] 
[10:49:38.195]    + additional namespaces needed: [n=0] 
[10:49:38.195]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:38.195]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.196]  - seeds: <none>
[10:49:38.196]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.196] getGlobalsAndPackages() ...
[10:49:38.196] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.196] |  Resolving globals: FALSE
[10:49:38.196] |  Tweak future expression to call with '...' arguments ...
[10:49:38.196] |  :  {
[10:49:38.196] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.196] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.196] |  :      "# as a global variable                                         "
[10:49:38.196] |  :      do.call(function(...) {
[10:49:38.196] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.196] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.196] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.196] |  :              on.exit(options(oopts), add = TRUE)
[10:49:38.196] |  :          }
[10:49:38.196] |  :          {
[10:49:38.196] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.196] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.196] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:38.196] |  :              })
[10:49:38.196] |  :          }
[10:49:38.196] |  :      }, args = future.call.arguments)
[10:49:38.196] |  :  }
[10:49:38.197] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.197] |  Search for packages associated with the globals ...
[10:49:38.197] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.198] |  :  Packages: [1] ‘base’
[10:49:38.198] |  Search for packages associated with the globals ... DONE
[10:49:38.198] |  Packages after dropping 'base': [0] 
[10:49:38.198] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.198] |  packages: [0] 
[10:49:38.198] getGlobalsAndPackages() ... done
[10:49:38.199] run() for Future (‘Future’) ...
[10:49:38.199] |  state: ‘created’
[10:49:38.199] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.199] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.199] |  Using MulticoreFutureBackend ...
[10:49:38.199] |  :  Launching futures ...
[10:49:38.199] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.200] |  :  .  |  getFutureData() ...
[10:49:38.200] |  :  .  |  :  getFutureCore() ...
[10:49:38.200] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:38.200] |  :  .  |  :  getFutureCore() ... done
[10:49:38.200] |  :  .  |  :  getFutureCapture() ...
[10:49:38.194] |  :  .  |  :  .  |  :  List of 2
[10:49:38.194] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.194] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.194] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.194] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.194] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.194] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.194] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.194] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.194] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.194] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.194] |  :  .  |  :  .  |  :      ...)  
[10:49:38.194] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.194] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.194] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.194] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.194] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.194] |  :  .  |  :  .  |  :      ...)  
[10:49:38.194] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1[10:49:38.200] |  :  .  |  :  getFutureCapture() ... done
:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.200] |  :  .  |  :  getFutureContext() ...
[10:49:38.200] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.201] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.201] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.201] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.201] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.201] |  :  .  |  :  getFutureContext() ... done
[10:49:38.201] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.201] |  :  .  |  getFutureData() ... done
[10:49:38.201] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.201] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.201] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.202] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.202] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.202] |  :  .  |  :  .  List of future strategies:
[10:49:38.202] |  :  .  |  :  .  1. sequential:
[10:49:38.202] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.202] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.202] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.202] |  :  .  |  :  .  List of 1
[10:49:38.202] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.202] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.202] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.202] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.202] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.202] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.202] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.205] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.206] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.206] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.206] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.206] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.206] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.207] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.207] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.207] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.207] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.207] |  :  .  |  assign_globals() ...
[10:49:38.207] |  :  .  |  MulticoreFuture started
[10:49:38.208] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.208] |  :  Launching futures ... done
[10:49:38.208] |  :  .  |  attachPackages() ...
[10:49:38.209] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.209] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.209] |  Using MulticoreFutureBackend ... done
[10:49:38.209] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.209] |  :  .  |  attachPackages() ... DONE
[10:49:38.210] Created future:
[10:49:38.210] |  :  .  |  attachPackages() ...
[10:49:38.210] |  :  .  |  :  packages: [n=0] 
[10:49:38.210] |  :  .  |  attachPackages() ... DONE
[10:49:38.211] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.211] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.212] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.212] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.213] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.213] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.213] |  :  .  |  :  .  |  New stack:
[10:49:38.207] |  :  .  |  List of 5
[10:49:38.207] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:38.207] |  :  .  |   $ future.call.arguments    : list()
[10:49:38.207] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.207] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:38.207] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:38.207] |  :  .  |    .. ..$ breaks: num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:38.207] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.207] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.207] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.207] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.207] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.207] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.207] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.207] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.207] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.207] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.207] |  :  .  |   - attr(*, "total_size")= num 15670
[10:49:38.207] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.207] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.216] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.217] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.217] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.217] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.217] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.217] |  :  .  |  assign_globals() ... done
[10:49:38.213] |  :  .  |  :  .  |  List of 1
[10:49:38.213] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.213] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.213] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.213] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.213] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.213] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.213] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.218] |  :  .  |  :  .  |  Old stack:
[10:49:38.221] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.221] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.222] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.222] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.222] |  :  .  |  :  .  |  :  New stack:
[10:49:38.222] readImmediateCondition() ...
[10:49:38.222]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.218] |  :  .  |  :  .  |  List of 1
[10:49:38.218] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.218] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.218] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.218] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.218] |  :  .  |  :  .  |      ...)  
[10:49:38.218] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.218] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.218] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.218] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.218] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.218] |  :  .  |  :  .  |      ...)  
[10:49:38.218] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.218] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.223] |  :  .  |  :  .  |  Not identical
[10:49:38.223]  - Number of RDS files: 0
[10:49:38.223] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.223] readImmediateCondition() ... DONE
[10:49:38.210] MulticoreFuture:
[10:49:38.210] Label: ‘future_by-2’
[10:49:38.210] Expression:
[10:49:38.210] {
[10:49:38.210]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.210]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.210]     "# as a global variable                                         "
[10:49:38.210]     do.call(function(...) {
[10:49:38.210]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.210]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.210]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.210]             on.exit(options(oopts), add = TRUE)
[10:49:38.210]         }
[10:49:38.210]         {
[10:49:38.210]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.210]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.210]                 ...future.FUN(...future.X_jj, ...)
[10:49:38.210]             })
[10:49:38.210]         }
[10:49:38.210]     }, args = future.call.arguments)
[10:49:38.210] }
[10:49:38.210] Lazy evaluation: FALSE
[10:49:38.210] Asynchronous evaluation: TRUE
[10:49:38.210] Local evaluation: TRUE
[10:49:38.210] Environment: R_GlobalEnv
[10:49:38.210] Capture standard output: TRUE
[10:49:38.210] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.210] Immediate condition classes: ‘immediateCondition’
[10:49:38.210] Globals: 5 objects totaling 1.44 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.02 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.210] Packages: <none>
[10:49:38.210] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.210] Resolved: FALSE
[10:49:38.210] Value: <not collected>
[10:49:38.210] Conditions captured: <none>
[10:49:38.210] Early signaling: FALSE
[10:49:38.210] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.210] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.224] Chunk #2 of 2 ... DONE
[10:49:38.224] Launching 2 futures (chunks) ... DONE
[10:49:38.224] Resolving 2 futures (chunks) ...
[10:49:38.224] value() on list ...
[10:49:38.225] |  recursive: 0
[10:49:38.225] |  length: 2
[10:49:38.225] |  
[10:49:38.225] |  Number of remaining objects: 2
[10:49:38.225] |  checking value #1 ...
[10:49:38.226] |  :  'obj' is MulticoreFuture
[10:49:38.222] |  :  .  |  :  .  |  :  List of 1
[10:49:38.222] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.222] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.222] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.222] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.222] |  :  .  |  :  .  |  :      ...)  
[10:49:38.222] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.222] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.222] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.222] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.222] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.222] |  :  .  |  :  .  |  :      ...)  
[10:49:38.222] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.222] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.226] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.227] |  :  .  |  :  .  |  :  List of 1
[10:49:38.227] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.227] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.227] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.227] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.227] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.227] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.227] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.230] |  :  .  |  :  .  |  :  Not identical
[10:49:38.230] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.223] |  :  .  |  :  .  |  :  List of 2
[10:49:38.223] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.223] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.223] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.223] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.223] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.223] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.223] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.223] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.223] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.223] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.223] |  :  .  |  :  .  |  :      ...)  
[10:49:38.223] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.223] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.223] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.223] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.223] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.223] |  :  .  |  :  .  |  :      ...)  
[10:49:38.223] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.232] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.232] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.232] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.232] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.232] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.233] |  :  .  |  :  .  List of future strategies:
[10:49:38.233] |  :  .  |  :  .  1. sequential:
[10:49:38.233] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.233] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.233] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.230] |  :  .  |  :  .  |  :  .  List of 2
[10:49:38.230] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.230] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.230] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.230] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.230] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.230] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.230] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.230] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.230] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.230] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.230] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.230] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.230] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.230] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.230] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.230] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.230] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.230] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.236] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:38.236] |  :  readImmediateCondition() ...
[10:49:38.236] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:38.236] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:38.236] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.236] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.237] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:38.237] |  :   - Number of RDS files: 0
[10:49:38.237] |  :  readImmediateCondition() ... DONE
[10:49:38.237] |  checking value #1 ... done
[10:49:38.237] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.237] |  :  .  |  :  .  |  1. multicore:
[10:49:38.237] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.237] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.237] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.237] |  checking value #2 ...
[10:49:38.237] |  :  'obj' is MulticoreFuture
[10:49:38.234] |  :  .  |  :  .  List of 1
[10:49:38.234] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.234] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.234] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.234] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.234] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.234] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.234] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.239] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.239] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.239] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.239] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.240] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.240] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.240] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.240] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.240] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.240] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.241] |  :  .  |  assign_globals() ...
[10:49:38.237] |  :  .  |  :  .  |  List of 1
[10:49:38.237] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.237] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.237] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.237] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.237] |  :  .  |  :  .  |      ...)  
[10:49:38.237] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.237] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.237] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.237] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.237] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.237] |  :  .  |  :  .  |      ...)  
[10:49:38.237] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.237] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.241] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.241] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.242] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.242] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.242] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.242] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:38.242] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.243] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.243] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.248] |  :  readImmediateCondition() ...
[10:49:38.248] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.248] |  :   - Number of RDS files: 0
[10:49:38.248] |  :  readImmediateCondition() ... DONE
[10:49:38.249] |  checking value #2 ... done
[10:49:38.241] |  :  .  |  List of 5
[10:49:38.241] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:38.241] |  :  .  |   $ future.call.arguments    : list()
[10:49:38.241] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.241] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:38.241] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:38.241] |  :  .  |    .. ..$ breaks: num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:38.241] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.241] |  :  .  |    ..$ :'data.frame':	18 obs. of  2 variables:
[10:49:38.241] |  :  .  |    .. ..$ breaks: num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:38.241] |  :  .  |    .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.241] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.241] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.241] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.241] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.241] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.241] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.241] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.241] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.241] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.241] |  :  .  |   - attr(*, "total_size")= num 15670
[10:49:38.241] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.241] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.251] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.251] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.252] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.252] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.252] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.252] |  :  .  |  assign_globals() ... done
[10:49:38.256] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.257] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.257] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.257] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.257] |  :  .  |  :  .  |  :  New stack:
[10:49:38.259] |  Number of remaining objects: 2
[10:49:38.259] |  checking value #1 ...
[10:49:38.259] |  :  'obj' is MulticoreFuture
[10:49:38.260] |  :  readImmediateCondition() ...
[10:49:38.260] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.260] |  :   - Number of RDS files: 0
[10:49:38.260] |  :  readImmediateCondition() ... DONE
[10:49:38.260] |  :  MulticoreFuture #1
[10:49:38.261] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:38.261] |  :  .  nx: 2
[10:49:38.261] |  :  .  relay: TRUE
[10:49:38.261] |  :  .  stdout: TRUE
[10:49:38.261] |  :  .  signal: TRUE
[10:49:38.262] |  :  .  resignal: FALSE
[10:49:38.262] |  :  .  force: TRUE
[10:49:38.262] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:38.262] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:38.262] |  :  .  until=1
[10:49:38.263] |  :  .  relaying element #1
[10:49:38.257] |  :  .  |  :  .  |  :  List of 1
[10:49:38.257] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.257] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.257] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.257] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.257] |  :  .  |  :  .  |  :      ...)  
[10:49:38.257] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.257] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.257] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.257] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.257] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.257] |  :  .  |  :  .  |  :      ...)  
[10:49:38.257] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.257] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.263] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.265] |  :  .  result() for MulticoreFuture ...
[10:49:38.266] |  :  .  |  readImmediateCondition() ...
[10:49:38.266] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.266] |  :  .  |   - Number of RDS files: 0
[10:49:38.267] |  :  .  |  readImmediateCondition() ... DONE
[10:49:38.267] |  :  .  |  result() for MulticoreFuture ...
[10:49:38.267] |  :  .  |  result() for MulticoreFuture ... done
[10:49:38.267] |  :  .  result() for MulticoreFuture ... done
[10:49:38.268] |  :  .  result() for MulticoreFuture ...
[10:49:38.263] |  :  .  |  :  .  |  :  List of 1
[10:49:38.263] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.263] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.263] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +[10:49:38.268] |  :  .  result() for MulticoreFuture ... done
Inf)  
[10:49:38.263] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.263] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.263] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.263] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.268] |  :  .  |  :  .  |  :  Not identical
[10:49:38.268] |  :  .  result() for MulticoreFuture ...
[10:49:38.268] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.268] |  :  .  result() for MulticoreFuture ... done
[10:49:38.268] |  :  .  result() for MulticoreFuture ...
[10:49:38.269] |  :  .  result() for MulticoreFuture ... done
[10:49:38.269] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.269] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.269] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:38.269] |  :  value(<MulticoreFuture>, ...) ...
[10:49:38.270] |  :  .  result() for MulticoreFuture ...
[10:49:38.270] |  :  .  result() for MulticoreFuture ... done
[10:49:38.270] |  :  .  result() for MulticoreFuture ...
[10:49:38.270] |  :  .  result() for MulticoreFuture ... done
[10:49:38.271] |  :  .  value: <list>
[10:49:38.271] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:38.271] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:38.271] |  :  .  nx: 2
[10:49:38.271] |  :  .  relay: TRUE
[10:49:38.271] |  :  .  stdout: TRUE
[10:49:38.272] |  :  .  signal: TRUE
[10:49:38.272] |  :  .  resignal: FALSE
[10:49:38.272] |  :  .  force: TRUE
[10:49:38.272] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.272] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.272] |  :  .  until=2
[10:49:38.272] |  :  .  relaying element #2
[10:49:38.273] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.273] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.273] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:38.273] |  :  length: 1 (resolved future 1)
[10:49:38.273] |  checking value #1 ... done
[10:49:38.273] |  checking value #2 ...
[10:49:38.273] |  :  'obj' is MulticoreFuture
[10:49:38.268] |  :  .  |  :  .  |  :  .  List of 2
[10:49:38.268] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.268] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.268] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.268] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.268] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.268] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.268] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.268] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.268] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.277] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:38.277] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:38.277] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:38.277] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.278] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:38.278] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.278] |  :  .  |  :  .  |  1. multicore:
[10:49:38.278] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.278] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.278] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.278] |  :  .  |  :  .  |  List of 1
[10:49:38.278] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.278] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.278] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.278] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.278] |  :  .  |  :  .  |      ...)  
[10:49:38.278] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.278] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.278] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.278] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.278] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.278] |  :  .  |  :  .  |      ...)  
[10:49:38.278] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.278] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.283] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.284] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.284] |  :  readImmediateCondition() ...
[10:49:38.284] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.284] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.284] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.284] |  :   - Number of RDS files: 0
[10:49:38.284] |  :  readImmediateCondition() ... DONE
[10:49:38.284] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.284] |  checking value #2 ... done
[10:49:38.284] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:38.285] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.285] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.285] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.294] |  Number of remaining objects: 1
[10:49:38.295] |  checking value #2 ...
[10:49:38.295] |  :  'obj' is MulticoreFuture
[10:49:38.295] |  :  readImmediateCondition() ...
[10:49:38.295] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.295] |  :   - Number of RDS files: 0
[10:49:38.295] |  :  readImmediateCondition() ... DONE
[10:49:38.296] |  :  MulticoreFuture #2
[10:49:38.296] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:38.296] |  :  .  nx: 2
[10:49:38.296] |  :  .  relay: TRUE
[10:49:38.296] |  :  .  stdout: TRUE
[10:49:38.296] |  :  .  signal: TRUE
[10:49:38.296] |  :  .  resignal: FALSE
[10:49:38.296] |  :  .  force: TRUE
[10:49:38.296] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.296] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.297] |  :  .  until=2
[10:49:38.297] |  :  .  relaying element #2
[10:49:38.297] |  :  .  result() for MulticoreFuture ...
[10:49:38.297] |  :  .  |  readImmediateCondition() ...
[10:49:38.297] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.298] |  :  .  |   - Number of RDS files: 0
[10:49:38.298] |  :  .  |  readImmediateCondition() ... DONE
[10:49:38.298] |  :  .  |  result() for MulticoreFuture ...
[10:49:38.298] |  :  .  |  result() for MulticoreFuture ... done
[10:49:38.298] |  :  .  result() for MulticoreFuture ... done
[10:49:38.298] |  :  .  result() for MulticoreFuture ...
[10:49:38.299] |  :  .  result() for MulticoreFuture ... done
[10:49:38.299] |  :  .  result() for MulticoreFuture ...
[10:49:38.299] |  :  .  result() for MulticoreFuture ... done
[10:49:38.299] |  :  .  result() for MulticoreFuture ...
[10:49:38.299] |  :  .  result() for MulticoreFuture ... done
[10:49:38.299] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.299] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.300] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:38.300] |  :  value(<MulticoreFuture>, ...) ...
[10:49:38.300] |  :  .  result() for MulticoreFuture ...
[10:49:38.300] |  :  .  result() for MulticoreFuture ... done
[10:49:38.300] |  :  .  result() for MulticoreFuture ...
[10:49:38.300] |  :  .  result() for MulticoreFuture ... done
[10:49:38.300] |  :  .  value: <list>
[10:49:38.301] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:38.301] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:38.301] |  :  .  nx: 2
[10:49:38.301] |  :  .  relay: TRUE
[10:49:38.301] |  :  .  stdout: TRUE
[10:49:38.301] |  :  .  signal: TRUE
[10:49:38.301] |  :  .  resignal: FALSE
[10:49:38.301] |  :  .  force: TRUE
[10:49:38.301] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.302] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.302] |  :  .  until=2
[10:49:38.302] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.302] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.302] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:38.302] |  :  length: 0 (resolved future 2)
[10:49:38.302] |  checking value #2 ... done
[10:49:38.302] |  Relaying remaining futures ...
[10:49:38.303] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:38.303] |  :  .  nx: 2
[10:49:38.303] |  :  .  relay: TRUE
[10:49:38.303] |  :  .  stdout: TRUE
[10:49:38.303] |  :  .  signal: TRUE
[10:49:38.303] |  :  .  resignal: FALSE
[10:49:38.303] |  :  .  force: TRUE
[10:49:38.303] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.303] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:38.304] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.304] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.304] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:38.304] |  Relaying remaining futures ... done
[10:49:38.304] value() on list ... done
[10:49:38.304]  - Number of value chunks collected: 2
[10:49:38.304] Resolving 2 futures (chunks) ... DONE
[10:49:38.304] Reducing values from 2 chunks ...
[10:49:38.304]  - Number of values collected after concatenation: 3
[10:49:38.305]  - Number of values expected: 3
[10:49:38.305] Reducing values from 2 chunks ... DONE
[10:49:38.305] future_lapply() ... DONE
[10:49:38.305] future_by_internal() ... DONE
[10:49:38.305] future_by_internal() ...
[10:49:38.306] future_lapply() ...
[10:49:38.307] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.307] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.307] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.308] Number of chunks: 2
[10:49:38.308] getGlobalsAndPackagesXApply() ...
[10:49:38.308]  - future.globals: TRUE
[10:49:38.308] getGlobalsAndPackages() ...
[10:49:38.308] |  Searching for globals ...
[10:49:38.310] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:38.310] |  Searching for globals ... DONE
[10:49:38.310] |  Resolving globals: FALSE
[10:49:38.310] |  Search for packages associated with the globals ...
[10:49:38.310] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.311] |  :  Packages: [1] ‘base’
[10:49:38.311] |  Search for packages associated with the globals ... DONE
[10:49:38.311] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:38.311] |  The total size of the 1 globals exported for future expression (‘FUN(digits = 2L)’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:38.311] |  Packages after dropping 'base': [0] 
[10:49:38.311] |  globals: [1] ‘FUN’
[10:49:38.312] |  packages: [0] 
[10:49:38.312] getGlobalsAndPackages() ... done
[10:49:38.312]  - globals found/used: [n=1] ‘FUN’
[10:49:38.312]  - needed namespaces: [n=0] 
[10:49:38.312] Finding globals ... DONE
[10:49:38.312]  - use_args: TRUE
[10:49:38.312]  - Getting '...' globals ...
[10:49:38.313] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:38.313] |  recursive: 0
[10:49:38.313] |  length: 1
[10:49:38.313] |  elements: ‘...’
[10:49:38.313] |  'obj' is DotDotDotList
[10:49:38.313] |  resolve(obj, ...) ...
[10:49:38.313] |  resolve(obj, ...) ... done
[10:49:38.314] |  length: 0 (resolved future 1)
[10:49:38.314] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:38.314]    - '...' content: [n=1] ‘digits’
[10:49:38.314] List of 1
[10:49:38.314]  $ ...:List of 1
[10:49:38.314]   ..$ digits: int 2
[10:49:38.314]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.314]  - attr(*, "where")=List of 1
[10:49:38.314]   ..$ ...:<environment: 0x5564a6f77058> 
[10:49:38.314]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.314]  - attr(*, "resolved")= logi TRUE
[10:49:38.314]  - attr(*, "total_size")= num NA
[10:49:38.318]  - Getting '...' globals ... DONE
[10:49:38.318] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:38.318] List of 2
[10:49:38.318]  $ ...future.FUN:function (object, ...)  
[10:49:38.318]  $ ...          :List of 1
[10:49:38.318]   ..$ digits: int 2
[10:49:38.318]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.318]  - attr(*, "where")=List of 2
[10:49:38.318]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:38.318]   ..$ ...          :<environment: 0x5564a6f77058> 
[10:49:38.318]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.318]  - attr(*, "resolved")= logi FALSE
[10:49:38.318]  - attr(*, "total_size")= num 13284
[10:49:38.322] Packages to be attached in all futures: [n=0] 
[10:49:38.322] getGlobalsAndPackagesXApply() ... DONE
[10:49:38.322] Number of futures (= number of chunks): 2
[10:49:38.322] Launching 2 futures (chunks) ...
[10:49:38.323] Chunk #1 of 2 ...
[10:49:38.323]  - Finding globals in 'X' for chunk #1 ...
[10:49:38.323] getGlobalsAndPackages() ...
[10:49:38.323] |  Searching for globals ...
[10:49:38.323] |  :  globals found: [0] 
[10:49:38.323] |  Searching for globals ... DONE
[10:49:38.323] |  globals: [0] <none>
[10:49:38.324] |  packages: [0] <none>
[10:49:38.324] getGlobalsAndPackages() ... done
[10:49:38.324]    + additional globals found: [n=0] 
[10:49:38.324]    + additional namespaces needed: [n=0] 
[10:49:38.324]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:38.324]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.324]  - seeds: <none>
[10:49:38.324]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.324] getGlobalsAndPackages() ...
[10:49:38.325] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.325] |  Resolving globals: FALSE
[10:49:38.325] |  Tweak future expression to call with '...' arguments ...
[10:49:38.325] |  :  {
[10:49:38.325] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.325] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.325] |  :      "# as a global variable                                         "
[10:49:38.325] |  :      do.call(function(...) {
[10:49:38.325] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.325] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.325] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.325] |  :              on.exit(options(oopts), add = TRUE)
[10:49:38.325] |  :          }
[10:49:38.325] |  :          {
[10:49:38.325] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.325] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.325] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:38.325] |  :              })
[10:49:38.325] |  :          }
[10:49:38.325] |  :      }, args = future.call.arguments)
[10:49:38.325] |  :  }
[10:49:38.325] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.325] |  Search for packages associated with the globals ...
[10:49:38.326] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.326] |  :  Packages: [1] ‘base’
[10:49:38.326] |  Search for packages associated with the globals ... DONE
[10:49:38.326] |  Packages after dropping 'base': [0] 
[10:49:38.326] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.327] |  packages: [0] 
[10:49:38.327] getGlobalsAndPackages() ... done
[10:49:38.327] run() for Future (‘Future’) ...
[10:49:38.327] |  state: ‘created’
[10:49:38.327] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.327] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.327] |  Using MulticoreFutureBackend ...
[10:49:38.328] |  :  Launching futures ...
[10:49:38.328] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.328] |  :  .  |  getFutureData() ...
[10:49:38.328] |  :  .  |  :  getFutureCore() ...
[10:49:38.328] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:38.328] |  :  .  |  :  getFutureCore() ... done
[10:49:38.328] |  :  .  |  :  getFutureCapture() ...
[10:49:38.329] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.329] |  :  .  |  :  getFutureContext() ...
[10:49:38.329] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.329] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.329] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.329] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.329] |  :  .  |  :  getFutureContext() ... done
[10:49:38.329] |  :  .  |  getFutureData() ... done
[10:49:38.330] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.330] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.332] |  :  .  |  MulticoreFuture started
[10:49:38.332] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.333] |  :  Launching futures ... done
[10:49:38.333] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.333] |  Using MulticoreFutureBackend ... done
[10:49:38.333] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.333] |  :  .  |  attachPackages() ...
[10:49:38.333] Created future:
[10:49:38.334] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.334] |  :  .  |  attachPackages() ... DONE
[10:49:38.334] |  :  .  |  attachPackages() ...
[10:49:38.334] |  :  .  |  :  packages: [n=0] 
[10:49:38.335] |  :  .  |  attachPackages() ... DONE
[10:49:38.336] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.336] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.336] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.337] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.337] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.337] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.338] |  :  .  |  :  .  |  New stack:
[10:49:38.338] |  :  .  |  :  .  |  List of 1
[10:49:38.338] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.338] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.338] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.338] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.338] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.338] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.338] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.342] |  :  .  |  :  .  |  Old stack:
[10:49:38.345] readImmediateCondition() ...
[10:49:38.345]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.346]  - Number of RDS files: 0
[10:49:38.346] readImmediateCondition() ... DONE
[10:49:38.334] MulticoreFuture:
[10:49:38.334] Label: ‘future_by-1’
[10:49:38.334] Expression:
[10:49:38.334] {
[10:49:38.334]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.334]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.334]     "# as a global variable                                         "
[10:49:38.334]     do.call(function(...) {
[10:49:38.334]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.334]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.334]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.334]             on.exit(options(oopts), add = TRUE)
[10:49:38.334]         }
[10:49:38.334]         {
[10:49:38.334]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.334]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.334]                 ...future.FUN(...future.X_jj, ...)
[10:49:38.334]             })
[10:49:38.334]         }
[10:49:38.334]     }, args = future.call.arguments)
[10:49:38.334] }
[10:49:38.334] Lazy evaluation: FALSE
[10:49:38.334] Asynchronous evaluation: TRUE
[10:49:38.334] Local evaluation: TRUE
[10:49:38.334] Environment: R_GlobalEnv
[10:49:38.334] Capture standard output: TRUE
[10:49:38.334] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.334] Immediate condition classes: ‘immediateCondition’
[10:49:38.334] Globals: 5 objects totaling 758 bytes (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 271 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.334] Packages: <none>
[10:49:38.334] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.334] Resolved: FALSE
[10:49:38.334] Value: <not collected>
[10:49:38.334] Conditions captured: <none>
[10:49:38.334] Early signaling: FALSE
[10:49:38.334] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.334] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.347] Chunk #1 of 2 ... DONE
[10:49:38.347] Chunk #2 of 2 ...
[10:49:38.347]  - Finding globals in 'X' for chunk #2 ...
[10:49:38.347] getGlobalsAndPackages() ...
[10:49:38.347] |  Searching for globals ...
[10:49:38.348] |  :  globals found: [0] 
[10:49:38.348] |  Searching for globals ... DONE
[10:49:38.348] |  globals: [0] <none>
[10:49:38.348] |  packages: [0] <none>
[10:49:38.348] getGlobalsAndPackages() ... done
[10:49:38.343] |  :  .  |  :  .  |  List of 1
[10:49:38.343] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.343] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.343] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.343] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.343] |  :  .  |  :  .  |      ...)  
[10:49:38.343] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.343] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.343] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.343] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.343] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.343] |  :  .  |  :  .  |      ...)  
[10:49:38.343] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.343] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.348]    + additional globals found: [n=0] 
[10:49:38.348]    + additional namespaces needed: [n=0] 
[10:49:38.348] |  :  .  |  :  .  |  Not identical
[10:49:38.348]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:38.348] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.349]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.349]  - seeds: <none>
[10:49:38.349]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.349] getGlobalsAndPackages() ...
[10:49:38.349] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.349] |  Resolving globals: FALSE
[10:49:38.349] |  Tweak future expression to call with '...' arguments ...
[10:49:38.350] |  :  {
[10:49:38.350] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.350] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.350] |  :      "# as a global variable                                         "
[10:49:38.350] |  :      do.call(function(...) {
[10:49:38.350] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.350] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.350] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.350] |  :              on.exit(options(oopts), add = TRUE)
[10:49:38.350] |  :          }
[10:49:38.350] |  :          {
[10:49:38.350] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.350] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.350] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:38.350] |  :              })
[10:49:38.350] |  :          }
[10:49:38.350] |  :      }, args = future.call.arguments)
[10:49:38.350] |  :  }
[10:49:38.350] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.350] |  Search for packages associated with the globals ...
[10:49:38.350] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.351] |  :  Packages: [1] ‘base’
[10:49:38.351] |  Search for packages associated with the globals ... DONE
[10:49:38.351] |  Packages after dropping 'base': [0] 
[10:49:38.351] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.351] |  packages: [0] 
[10:49:38.352] getGlobalsAndPackages() ... done
[10:49:38.352] run() for Future (‘Future’) ...
[10:49:38.352] |  state: ‘created’
[10:49:38.352] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.352] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.352] |  Using MulticoreFutureBackend ...
[10:49:38.353] |  :  Launching futures ...
[10:49:38.353] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.353] |  :  .  |  getFutureData() ...
[10:49:38.353] |  :  .  |  :  getFutureCore() ...
[10:49:38.353] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:38.353] |  :  .  |  :  getFutureCore() ... done
[10:49:38.353] |  :  .  |  :  getFutureCapture() ...
[10:49:38.354] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.354] |  :  .  |  :  getFutureContext() ...
[10:49:38.354] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.354] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.354] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.354] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.354] |  :  .  |  :  getFutureContext() ... done
[10:49:38.355] |  :  .  |  getFutureData() ... done
[10:49:38.355] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.355] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.349] |  :  .  |  :  .  |  :  List of 2
[10:49:38.349] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.349] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.349] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.349] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.349] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.349] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.349] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.349] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.349] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.349] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.349] |  :  .  |  :  .  |  :      ...)  
[10:49:38.349] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.349] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.349] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.349] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.349] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.349] |  :  .  |  :  .  |  :      ...)  
[10:49:38.349] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.357] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.357] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.357] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.357] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.357] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.357] |  :  .  |  MulticoreFuture started
[10:49:38.358] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.357] |  :  .  |  :  .  List of future strategies:
[10:49:38.357] |  :  .  |  :  .  1. sequential:
[10:49:38.357] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.357] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.357] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.358] |  :  Launching futures ... done
[10:49:38.358] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.358] |  :  .  |  attachPackages() ...
[10:49:38.359] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.359] |  Using MulticoreFutureBackend ... done
[10:49:38.359] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.359] |  :  .  |  attachPackages() ... DONE
[10:49:38.359] Created future:
[10:49:38.359] |  :  .  |  attachPackages() ...
[10:49:38.360] |  :  .  |  :  packages: [n=0] 
[10:49:38.360] |  :  .  |  attachPackages() ... DONE
[10:49:38.361] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.361] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.362] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.358] |  :  .  |  :  .  List of 1
[10:49:38.358] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.358] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.358] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.358] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.358] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.358] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.358] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.362] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.362] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.362] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.362] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.362] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.363] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.363] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.363] |  :  .  |  :  .  |  New stack:
[10:49:38.363] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.363] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.363] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.364] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.364] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.364] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.364] |  :  .  |  assign_globals() ...
[10:49:38.363] |  :  .  |  :  .  |  List of 1
[10:49:38.363] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.363] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.363] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.363] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.363] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.363] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.363] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.367] |  :  .  |  :  .  |  Old stack:
[10:49:38.367] |  :  .  |  :  .  |  List of 1
[10:49:38.367] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.367] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.367] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.367] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.367] |  :  .  |  :  .  |      ...)  
[10:49:38.367] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.367] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.367] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.367] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.367] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.367] |  :  .  |  :  .  |      ...)  
[10:49:38.367] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.367] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.371] |  :  .  |  :  .  |  Not identical
[10:49:38.372] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.372] readImmediateCondition() ...
[10:49:38.372]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.372]  - Number of RDS files: 0
[10:49:38.372] readImmediateCondition() ... DONE
[10:49:38.359] MulticoreFuture:
[10:49:38.359] Label: ‘future_by-2’
[10:49:38.359] Expression:
[10:49:38.359] {
[10:49:38.359]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.359]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.359]     "# as a global variable                                         "
[10:49:38.359]     do.call(function(...) {
[10:49:38.359]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.359]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.359]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.359]             on.exit(options(oopts), add = TRUE)
[10:49:38.359]         }
[10:49:38.359]         {
[10:49:38.359]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.359]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.359]                 ...future.FUN(...future.X_jj, ...)
[10:49:38.359]             })
[10:49:38.359]         }
[10:49:38.359]     }, args = future.call.arguments)
[10:49:38.359] }
[10:49:38.359] Lazy evaluation: FALSE
[10:49:38.359] Asynchronous evaluation: TRUE
[10:49:38.359] Local evaluation: TRUE
[10:49:38.359] Environment: R_GlobalEnv
[10:49:38.359] Capture standard output: TRUE
[10:49:38.359] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.359] Immediate condition classes: ‘immediateCondition’
[10:49:38.359] Globals: 5 objects totaling 758 bytes (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 271 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.359] Packages: <none>
[10:49:38.359] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.359] Resolved: FALSE
[10:49:38.359] Value: <not collected>
[10:49:38.359] Conditions captured: <none>
[10:49:38.359] Early signaling: FALSE
[10:49:38.359] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.359] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.373] Chunk #2 of 2 ... DONE
[10:49:38.373] Launching 2 futures (chunks) ... DONE
[10:49:38.374] Resolving 2 futures (chunks) ...
[10:49:38.364] |  :  .  |  List of 5
[10:49:38.364] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:38.364] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:38.364] |  :  .  |    ..$ digits: int 2
[10:49:38.364] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.364] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:38.364] |  :  .  |    ..$ : num [1:9] 26 30 54 25 70 52 51 26 67
[10:49:38.364] |  :  .  |    ..$ : num [1:9] 27 14 29 19 29 31 41 20 44
[10:49:38.364] |  :  .  |    ..$ : num [1:9] 18 21 29 17 12 18 35 30 36
[10:49:38.364] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.364] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.364] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.364] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.364] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.364] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.364] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.364] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.364] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.364] |  :  .  |   - attr(*, "total_size")= num 13284
[10:49:38.364] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.364] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.374] value() on list ...
[10:49:38.374] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.374] |  recursive: 0
[10:49:38.374] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.374] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.374] |  length: 2
[10:49:38.374] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.374] |  
[10:49:38.375] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.375] |  :  .  |  assign_globals() ... done
[10:49:38.375] |  Number of remaining objects: 2
[10:49:38.375] |  checking value #1 ...
[10:49:38.375] |  :  'obj' is MulticoreFuture
[10:49:38.378] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.378] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.379] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.379] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.379] |  :  .  |  :  .  |  :  New stack:
[10:49:38.372] |  :  .  |  :  .  |  :  List of 2
[10:49:38.372] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.372] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.372] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.372] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.372] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.372] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.372] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.372] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.372] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.372] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.372] |  :  .  |  :  .  |  :      ...)  
[10:49:38.372] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.372] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.372] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.372] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.372] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.372] |  :  .  |  :  .  |  :      ...)  
[10:49:38.372] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.380] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.380] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.380] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.380] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.380] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.381] |  :  .  |  :  .  List of future strategies:
[10:49:38.381] |  :  .  |  :  .  1. sequential:
[10:49:38.381] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.381] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.381] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.381] |  :  .  |  :  .  List of 1
[10:49:38.381] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.381] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.381] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.381] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.381] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.381] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.381] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.384] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.385] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.385] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.385] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.385] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.385] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.385] |  :  readImmediateCondition() ...
[10:49:38.386] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.386] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.386] |  :   - Number of RDS files: 0
[10:49:38.386] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.386] |  :  readImmediateCondition() ... DONE
[10:49:38.386] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.386] |  checking value #1 ... done
[10:49:38.387] |  checking value #2 ...
[10:49:38.386] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.387] |  :  'obj' is MulticoreFuture
[10:49:38.387] |  :  .  |  assign_globals() ...
[10:49:38.379] |  :  .  |  :  .  |  :  List of 1
[10:49:38.379] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.379] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.379] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.379] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.379] |  :  .  |  :  .  |  :      ...)  
[10:49:38.379] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.379] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.379] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.379] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.379] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.379] |  :  .  |  :  .  |  :      ...)  
[10:49:38.379] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.379] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.389] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.389] |  :  .  |  :  .  |  :  List of 1
[10:49:38.389] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.389] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.389] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.389] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.392] |  :  .  |  :  .  |  :  Not identical
[10:49:38.392] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.397] |  :  readImmediateCondition() ...
[10:49:38.397] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.398] |  :   - Number of RDS files: 0
[10:49:38.398] |  :  readImmediateCondition() ... DONE
[10:49:38.398] |  checking value #2 ... done
[10:49:38.392] |  :  .  |  :  .  |  :  .  List of 2
[10:49:38.392] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.392] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.392] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.392] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.392] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.392] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.392] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.392] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.392] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.392] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.392] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.392] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.392] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.392] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.392] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.392] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.392] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.392] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.399] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:38.399] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:38.399] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:38.399] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.399] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:38.400] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.400] |  :  .  |  :  .  |  1. multicore:
[10:49:38.400] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.400] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.400] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.387] |  :  .  |  List of 5
[10:49:38.387] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:38.387] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:38.387] |  :  .  |    ..$ digits: int 2
[10:49:38.387] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.387] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:38.387] |  :  .  |    ..$ : num [1:9] 42 26 19 16 39 28 21 39 29
[10:49:38.387] |  :  .  |    ..$ : num [1:9] 36 21 24 18 10 43 28 15 26
[10:49:38.387] |  :  .  |    ..$ : num [1:9] 20 21 24 17 13 15 15 16 28
[10:49:38.387] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.387] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.387] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.387] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.387] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.387] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.387] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.387] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.387] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.387] |  :  .  |   - attr(*, "total_size")= num 13284
[10:49:38.387] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.387] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.402] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.403] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.403] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.403] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.403] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.403] |  :  .  |  assign_globals() ... done
[10:49:38.400] |  :  .  |  :  .  |  List of 1
[10:49:38.400] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.400] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.400] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.400] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.400] |  :  .  |  :  .  |      ...)  
[10:49:38.400] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.400] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.400] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.400] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.400] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.400] |  :  .  |  :  .  |      ...)  
[10:49:38.400] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.400] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.404] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.405] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.405] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.405] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.405] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.405] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:38.405] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.406] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.406] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.407] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.407] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.407] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.407] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.408] |  :  .  |  :  .  |  :  New stack:
[10:49:38.408] |  Number of remaining objects: 2
[10:49:38.409] |  checking value #1 ...
[10:49:38.409] |  :  'obj' is MulticoreFuture
[10:49:38.409] |  :  readImmediateCondition() ...
[10:49:38.409] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.410] |  :   - Number of RDS files: 0
[10:49:38.410] |  :  readImmediateCondition() ... DONE
[10:49:38.410] |  :  MulticoreFuture #1
[10:49:38.410] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:38.410] |  :  .  nx: 2
[10:49:38.410] |  :  .  relay: TRUE
[10:49:38.411] |  :  .  stdout: TRUE
[10:49:38.411] |  :  .  signal: TRUE
[10:49:38.411] |  :  .  resignal: FALSE
[10:49:38.411] |  :  .  force: TRUE
[10:49:38.411] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:38.412] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:38.412] |  :  .  until=1
[10:49:38.412] |  :  .  relaying element #1
[10:49:38.412] |  :  .  result() for MulticoreFuture ...
[10:49:38.413] |  :  .  |  readImmediateCondition() ...
[10:49:38.413] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.414] |  :  .  |   - Number of RDS files: 0
[10:49:38.414] |  :  .  |  readImmediateCondition() ... DONE
[10:49:38.408] |  :  .  |  :  .  |  :  List of 1
[10:49:38.408] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.408] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.408] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.408] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.408] |  :  .  |  :  .  |  :      ...)  
[10:49:38.408] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.408] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.408] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.408] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.408] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.408] |  :  .  |  :  .  |  :      ...)  
[10:49:38.408] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.408] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.414] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.414] |  :  .  |  result() for MulticoreFuture ...
[10:49:38.414] |  :  .  |  result() for MulticoreFuture ... done
[10:49:38.415] |  :  .  result() for MulticoreFuture ... done
[10:49:38.415] |  :  .  result() for MulticoreFuture ...
[10:49:38.415] |  :  .  result() for MulticoreFuture ... done
[10:49:38.415] |  :  .  result() for MulticoreFuture ...
[10:49:38.416] |  :  .  result() for MulticoreFuture ... done
[10:49:38.416] |  :  .  result() for MulticoreFuture ...
[10:49:38.416] |  :  .  result() for MulticoreFuture ... done
[10:49:38.416] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.416] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.417] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:38.417] |  :  value(<MulticoreFuture>, ...) ...
[10:49:38.417] |  :  .  result() for MulticoreFuture ...
[10:49:38.417] |  :  .  result() for MulticoreFuture ... done
[10:49:38.417] |  :  .  result() for MulticoreFuture ...
[10:49:38.418] |  :  .  result() for MulticoreFuture ... done
[10:49:38.418] |  :  .  value: <list>
[10:49:38.418] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:38.418] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:38.418] |  :  .  nx: 2
[10:49:38.419] |  :  .  relay: TRUE
[10:49:38.419] |  :  .  stdout: TRUE
[10:49:38.419] |  :  .  signal: TRUE
[10:49:38.414] |  :  .  |  :  .  |  :  List of 1
[10:49:38.414] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.414] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.414] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.414] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.414] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.414] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.414] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.419] |  :  .  resignal: FALSE
[10:49:38.419] |  :  .  |  :  .  |  :  Not identical
[10:49:38.419] |  :  .  force: TRUE
[10:49:38.419] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.419] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.420] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.420] |  :  .  until=2
[10:49:38.420] |  :  .  relaying element #2
[10:49:38.420] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.420] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.421] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:38.421] |  :  length: 1 (resolved future 1)
[10:49:38.421] |  checking value #1 ... done
[10:49:38.421] |  checking value #2 ...
[10:49:38.421] |  :  'obj' is MulticoreFuture
[10:49:38.420] |  :  .  |  :  .  |  :  .  List of 2
[10:49:38.420] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.420] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.420] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.420] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.420] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.420] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.420] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.420] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.420] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.420] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.420] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.420] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.420] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.420] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.420] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.420] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.420] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.420] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.427] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:38.427] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:38.428] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:38.428] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.428] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:38.428] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.428] |  :  .  |  :  .  |  1. multicore:
[10:49:38.428] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.428] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.428] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.432] |  :  readImmediateCondition() ...
[10:49:38.432] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.432] |  :   - Number of RDS files: 0
[10:49:38.432] |  :  readImmediateCondition() ... DONE
[10:49:38.433] |  checking value #2 ... done
[10:49:38.429] |  :  .  |  :  .  |  List of 1
[10:49:38.429] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.429] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.429] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.429] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.429] |  :  .  |  :  .  |      ...)  
[10:49:38.429] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.429] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.429] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.429] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.429] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.429] |  :  .  |  :  .  |      ...)  
[10:49:38.429] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.429] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.434] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.434] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.434] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.434] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.434] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.435] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:38.435] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.435] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.435] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.443] |  Number of remaining objects: 1
[10:49:38.443] |  checking value #2 ...
[10:49:38.443] |  :  'obj' is MulticoreFuture
[10:49:38.443] |  :  readImmediateCondition() ...
[10:49:38.443] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.444] |  :   - Number of RDS files: 0
[10:49:38.444] |  :  readImmediateCondition() ... DONE
[10:49:38.444] |  :  MulticoreFuture #2
[10:49:38.444] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:38.444] |  :  .  nx: 2
[10:49:38.444] |  :  .  relay: TRUE
[10:49:38.444] |  :  .  stdout: TRUE
[10:49:38.444] |  :  .  signal: TRUE
[10:49:38.444] |  :  .  resignal: FALSE
[10:49:38.445] |  :  .  force: TRUE
[10:49:38.445] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.445] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.445] |  :  .  until=2
[10:49:38.445] |  :  .  relaying element #2
[10:49:38.445] |  :  .  result() for MulticoreFuture ...
[10:49:38.446] |  :  .  |  readImmediateCondition() ...
[10:49:38.446] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.446] |  :  .  |   - Number of RDS files: 0
[10:49:38.446] |  :  .  |  readImmediateCondition() ... DONE
[10:49:38.446] |  :  .  |  result() for MulticoreFuture ...
[10:49:38.447] |  :  .  |  result() for MulticoreFuture ... done
[10:49:38.447] |  :  .  result() for MulticoreFuture ... done
[10:49:38.447] |  :  .  result() for MulticoreFuture ...
[10:49:38.447] |  :  .  result() for MulticoreFuture ... done
[10:49:38.447] |  :  .  result() for MulticoreFuture ...
[10:49:38.448] |  :  .  result() for MulticoreFuture ... done
[10:49:38.448] |  :  .  result() for MulticoreFuture ...
[10:49:38.448] |  :  .  result() for MulticoreFuture ... done
[10:49:38.448] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.448] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.448] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:38.449] |  :  value(<MulticoreFuture>, ...) ...
[10:49:38.449] |  :  .  result() for MulticoreFuture ...
[10:49:38.449] |  :  .  result() for MulticoreFuture ... done
[10:49:38.449] |  :  .  result() for MulticoreFuture ...
[10:49:38.449] |  :  .  result() for MulticoreFuture ... done
[10:49:38.449] |  :  .  value: <list>
[10:49:38.449] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:38.450] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:38.450] |  :  .  nx: 2
[10:49:38.450] |  :  .  relay: TRUE
[10:49:38.450] |  :  .  stdout: TRUE
[10:49:38.450] |  :  .  signal: TRUE
[10:49:38.450] |  :  .  resignal: FALSE
[10:49:38.451] |  :  .  force: TRUE
[10:49:38.451] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.451] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.451] |  :  .  until=2
[10:49:38.451] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.451] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.451] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:38.452] |  :  length: 0 (resolved future 2)
[10:49:38.452] |  checking value #2 ... done
[10:49:38.452] |  Relaying remaining futures ...
[10:49:38.452] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:38.452] |  :  .  nx: 2
[10:49:38.452] |  :  .  relay: TRUE
[10:49:38.452] |  :  .  stdout: TRUE
[10:49:38.453] |  :  .  signal: TRUE
[10:49:38.453] |  :  .  resignal: FALSE
[10:49:38.453] |  :  .  force: TRUE
[10:49:38.453] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.453] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:38.453] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.453] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.453] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:38.453] |  Relaying remaining futures ... done
[10:49:38.454] value() on list ... done
[10:49:38.454]  - Number of value chunks collected: 2
[10:49:38.454] Resolving 2 futures (chunks) ... DONE
[10:49:38.454] Reducing values from 2 chunks ...
[10:49:38.454]  - Number of values collected after concatenation: 6
[10:49:38.454]  - Number of values expected: 6
[10:49:38.454] Reducing values from 2 chunks ... DONE
[10:49:38.454] future_lapply() ... DONE
[10:49:38.454] future_by_internal() ... DONE
[10:49:38.459] future_by_internal() ...
[10:49:38.460] future_lapply() ...
[10:49:38.461] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.461] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.461] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.462] Number of chunks: 2
[10:49:38.462] getGlobalsAndPackagesXApply() ...
[10:49:38.462]  - future.globals: TRUE
[10:49:38.462] getGlobalsAndPackages() ...
[10:49:38.462] |  Searching for globals ...
[10:49:38.464] |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:38.465] |  Searching for globals ... DONE
[10:49:38.465] |  Resolving globals: FALSE
[10:49:38.465] |  Search for packages associated with the globals ...
[10:49:38.465] |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:38.466] |  :  Packages: [2] ‘base’, ‘stats’
[10:49:38.466] |  Search for packages associated with the globals ... DONE
[10:49:38.466] |  The total size of the 1 globals is 762 bytes (762 bytes)
[10:49:38.466] |  The total size of the 1 globals exported for future expression (‘FUN(singular.ok = FALSE)’) is 762 bytes There is one global: ‘FUN’ (762 bytes of class ‘function’)
[10:49:38.466] |  Packages after dropping 'base': [1] ‘stats’
[10:49:38.467] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:38.467] |  globals: [1] ‘FUN’
[10:49:38.467] |  packages: [1] ‘stats’
[10:49:38.467] getGlobalsAndPackages() ... done
[10:49:38.467]  - globals found/used: [n=1] ‘FUN’
[10:49:38.467]  - needed namespaces: [n=1] ‘stats’
[10:49:38.467] Finding globals ... DONE
[10:49:38.467]  - use_args: TRUE
[10:49:38.468]  - Getting '...' globals ...
[10:49:38.468] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:38.468] |  recursive: 0
[10:49:38.468] |  length: 1
[10:49:38.468] |  elements: ‘...’
[10:49:38.469] |  'obj' is DotDotDotList
[10:49:38.469] |  resolve(obj, ...) ...
[10:49:38.469] |  resolve(obj, ...) ... done
[10:49:38.469] |  length: 0 (resolved future 1)
[10:49:38.469] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:38.469]    - '...' content: [n=1] ‘singular.ok’
[10:49:38.469] List of 1
[10:49:38.469]  $ ...:List of 1
[10:49:38.469]   ..$ singular.ok: logi FALSE
[10:49:38.469]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.469]  - attr(*, "where")=List of 1
[10:49:38.469]   ..$ ...:<environment: 0x5564a699b370> 
[10:49:38.469]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.469]  - attr(*, "resolved")= logi TRUE
[10:49:38.469]  - attr(*, "total_size")= num NA
[10:49:38.473]  - Getting '...' globals ... DONE
[10:49:38.473] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:38.473] List of 2
[10:49:38.473]  $ ...future.FUN:function (x, ...)  
[10:49:38.473]  $ ...          :List of 1
[10:49:38.473]   ..$ singular.ok: logi FALSE
[10:49:38.473]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.473]  - attr(*, "where")=List of 2
[10:49:38.473]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:38.473]   ..$ ...          :<environment: 0x5564a699b370> 
[10:49:38.473]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.473]  - attr(*, "resolved")= logi FALSE
[10:49:38.473]  - attr(*, "total_size")= num 19977
[10:49:38.477] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:38.477] getGlobalsAndPackagesXApply() ... DONE
[10:49:38.477] Number of futures (= number of chunks): 2
[10:49:38.477] Launching 2 futures (chunks) ...
[10:49:38.477] Chunk #1 of 2 ...
[10:49:38.478]  - Finding globals in 'X' for chunk #1 ...
[10:49:38.478] getGlobalsAndPackages() ...
[10:49:38.478] |  Searching for globals ...
[10:49:38.478] |  :  globals found: [0] 
[10:49:38.478] |  Searching for globals ... DONE
[10:49:38.479] |  globals: [0] <none>
[10:49:38.479] |  packages: [0] <none>
[10:49:38.479] getGlobalsAndPackages() ... done
[10:49:38.479]    + additional globals found: [n=0] 
[10:49:38.479]    + additional namespaces needed: [n=0] 
[10:49:38.479]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:38.479]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.479]  - seeds: <none>
[10:49:38.479]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.479] getGlobalsAndPackages() ...
[10:49:38.480] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.480] |  Resolving globals: FALSE
[10:49:38.480] |  Tweak future expression to call with '...' arguments ...
[10:49:38.480] |  :  {
[10:49:38.480] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.480] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.480] |  :      "# as a global variable                                         "
[10:49:38.480] |  :      do.call(function(...) {
[10:49:38.480] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:38.480] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:38.480] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:38.480] |  :          "# anonymous function.                                          "
[10:49:38.480] |  :          "#                                                              "
[10:49:38.480] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:38.480] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:38.480] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:38.480] |  :          "# global environment, which is where globals are written.      "
[10:49:38.480] |  :          penv <- env <- environment(...future.FUN)
[10:49:38.480] |  :          repeat {
[10:49:38.480] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:38.480] |  :                  emptyenv())) 
[10:49:38.480] |  :                  break
[10:49:38.480] |  :              penv <- env
[10:49:38.480] |  :              env <- parent.env(env)
[10:49:38.480] |  :          }
[10:49:38.480] |  :          if (identical(penv, globalenv())) {
[10:49:38.480] |  :              environment(...future.FUN) <- environment()
[10:49:38.480] |  :          }
[10:49:38.480] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:38.480] |  :              !isNamespace(penv)) {
[10:49:38.480] |  :              parent.env(penv) <- environment()
[10:49:38.480] |  :          }
[10:49:38.480] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:38.480] |  :          {
[10:49:38.480] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.480] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.480] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.480] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:38.480] |  :              }
[10:49:38.480] |  :              {
[10:49:38.480] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.480] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.480] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:38.480] |  :                  })
[10:49:38.480] |  :              }
[10:49:38.480] |  :          }
[10:49:38.480] |  :      }, args = future.call.arguments)
[10:49:38.480] |  :  }
[10:49:38.481] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.481] |  Search for packages associated with the globals ...
[10:49:38.481] |  :  Packages associated with globals: [0] 
[10:49:38.481] |  :  Packages: [0] 
[10:49:38.481] |  Search for packages associated with the globals ... DONE
[10:49:38.481] |  Packages after dropping 'base': [0] 
[10:49:38.482] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.482] |  packages: [0] 
[10:49:38.482] getGlobalsAndPackages() ... done
[10:49:38.482] run() for Future (‘Future’) ...
[10:49:38.482] |  state: ‘created’
[10:49:38.482] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.482] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.483] |  Using MulticoreFutureBackend ...
[10:49:38.483] |  :  Launching futures ...
[10:49:38.483] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.483] |  :  .  |  getFutureData() ...
[10:49:38.483] |  :  .  |  :  getFutureCore() ...
[10:49:38.483] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:38.483] |  :  .  |  :  getFutureCore() ... done
[10:49:38.483] |  :  .  |  :  getFutureCapture() ...
[10:49:38.484] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.484] |  :  .  |  :  getFutureContext() ...
[10:49:38.484] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.484] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.484] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.484] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.484] |  :  .  |  :  getFutureContext() ... done
[10:49:38.485] |  :  .  |  getFutureData() ... done
[10:49:38.485] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.485] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.487] |  :  .  |  MulticoreFuture started
[10:49:38.488] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.488] |  :  Launching futures ... done
[10:49:38.488] |  :  .  |  attachPackages() ...
[10:49:38.488] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.488] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.488] |  Using MulticoreFutureBackend ... done
[10:49:38.489] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.489] |  :  .  |  attachPackages() ... DONE
[10:49:38.489] |  :  .  |  attachPackages() ...
[10:49:38.489] Created future:
[10:49:38.489] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:38.489] |  :  .  |  attachPackages() ... DONE
[10:49:38.490] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.490] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.491] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.491] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.492] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.492] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.492] |  :  .  |  :  .  |  New stack:
[10:49:38.492] |  :  .  |  :  .  |  List of 1
[10:49:38.492] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.492] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.492] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.492] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.492] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.492] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.492] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.496] |  :  .  |  :  .  |  Old stack:
[10:49:38.501] readImmediateCondition() ...
[10:49:38.501]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.496] |  :  .  |  :  .  |  List of 1
[10:49:38.496] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.496] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.496] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.496] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.496] |  :  .  |  :  .  |      ...)  
[10:49:38.496] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.496] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.496] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.496] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.496] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.496] |  :  .  |  :  .  |      ...)  
[10:49:38.496] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.496] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.501]  - Number of RDS files: 0
[10:49:38.501] |  :  .  |  :  .  |  Not identical
[10:49:38.502] readImmediateCondition() ... DONE
[10:49:38.502] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.489] MulticoreFuture:
[10:49:38.489] Label: ‘future_by-1’
[10:49:38.489] Expression:
[10:49:38.489] {
[10:49:38.489]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.489]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.489]     "# as a global variable                                         "
[10:49:38.489]     do.call(function(...) {
[10:49:38.489]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:38.489]         "# without having an '...' argument. This means '...' is treated"
[10:49:38.489]         "# as a global variable. This may happen when FUN() is an       "
[10:49:38.489]         "# anonymous function.                                          "
[10:49:38.489]         "#                                                              "
[10:49:38.489]         "# If an anonymous function, we will make sure to restore the   "
[10:49:38.489]         "# function environment of FUN() to the calling environment.    "
[10:49:38.489]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:38.489]         "# global environment, which is where globals are written.      "
[10:49:38.489]         penv <- env <- environment(...future.FUN)
[10:49:38.489]         repeat {
[10:49:38.489]             if (identical(env, globalenv()) || identical(env, 
[10:49:38.489]                 emptyenv())) 
[10:49:38.489]                 break
[10:49:38.489]             penv <- env
[10:49:38.489]             env <- parent.env(env)
[10:49:38.489]         }
[10:49:38.489]         if (identical(penv, globalenv())) {
[10:49:38.489]             environment(...future.FUN) <- environment()
[10:49:38.489]         }
[10:49:38.489]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:38.489]             !isNamespace(penv)) {
[10:49:38.489]             parent.env(penv) <- environment()
[10:49:38.489]         }
[10:49:38.489]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:38.489]         {
[10:49:38.489]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.489]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.489]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.489]                 on.exit(options(oopts), add = TRUE)
[10:49:38.489]             }
[10:49:38.489]             {
[10:49:38.489]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.489]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.489]                   ...future.FUN(...future.X_jj, ...)
[10:49:38.489]                 })
[10:49:38.489]             }
[10:49:38.489]         }
[10:49:38.489]     }, args = future.call.arguments)
[10:49:38.489] }
[10:49:38.489] Lazy evaluation: FALSE
[10:49:38.489] Asynchronous evaluation: TRUE
[10:49:38.489] Local evaluation: TRUE
[10:49:38.489] Environment: R_GlobalEnv
[10:49:38.489] Capture standard output: TRUE
[10:49:38.489] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.489] Immediate condition classes: ‘immediateCondition’
[10:49:38.489] Globals: 5 objects totaling 1.67 KiB (function ‘...future.FUN’ of 762 bytes, DotDotDotList ‘future.call.arguments’ of 157 bytes, list ‘...future.elements_ii’ of 736 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.489] Packages: 1 packages (‘stats’)
[10:49:38.489] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.489] Resolved: FALSE
[10:49:38.489] Value: <not collected>
[10:49:38.489] Conditions captured: <none>
[10:49:38.489] Early signaling: FALSE
[10:49:38.489] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.489] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.502] Chunk #1 of 2 ... DONE
[10:49:38.502] Chunk #2 of 2 ...
[10:49:38.503]  - Finding globals in 'X' for chunk #2 ...
[10:49:38.503] getGlobalsAndPackages() ...
[10:49:38.503] |  Searching for globals ...
[10:49:38.504] |  :  globals found: [0] 
[10:49:38.504] |  Searching for globals ... DONE
[10:49:38.504] |  globals: [0] <none>
[10:49:38.504] |  packages: [0] <none>
[10:49:38.504] getGlobalsAndPackages() ... done
[10:49:38.504]    + additional globals found: [n=0] 
[10:49:38.504]    + additional namespaces needed: [n=0] 
[10:49:38.505]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:38.505]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.505]  - seeds: <none>
[10:49:38.505]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.505] getGlobalsAndPackages() ...
[10:49:38.505] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.505] |  Resolving globals: FALSE
[10:49:38.505] |  Tweak future expression to call with '...' arguments ...
[10:49:38.506] |  :  {
[10:49:38.506] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.506] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.506] |  :      "# as a global variable                                         "
[10:49:38.506] |  :      do.call(function(...) {
[10:49:38.506] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:38.506] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:38.506] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:38.506] |  :          "# anonymous function.                                          "
[10:49:38.506] |  :          "#                                                              "
[10:49:38.506] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:38.506] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:38.506] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:38.506] |  :          "# global environment, which is where globals are written.      "
[10:49:38.506] |  :          penv <- env <- environment(...future.FUN)
[10:49:38.506] |  :          repeat {
[10:49:38.506] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:38.506] |  :                  emptyenv())) 
[10:49:38.506] |  :                  break
[10:49:38.506] |  :              penv <- env
[10:49:38.506] |  :              env <- parent.env(env)
[10:49:38.506] |  :          }
[10:49:38.506] |  :          if (identical(penv, globalenv())) {
[10:49:38.506] |  :              environment(...future.FUN) <- environment()
[10:49:38.506] |  :          }
[10:49:38.506] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:38.506] |  :              !isNamespace(penv)) {
[10:49:38.506] |  :              parent.env(penv) <- environment()
[10:49:38.506] |  :          }
[10:49:38.506] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:38.506] |  :          {
[10:49:38.506] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.506] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.506] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.506] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:38.506] |  :              }
[10:49:38.506] |  :              {
[10:49:38.506] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.506] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.506] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:38.506] |  :                  })
[10:49:38.506] |  :              }
[10:49:38.506] |  :          }
[10:49:38.506] |  :      }, args = future.call.arguments)
[10:49:38.506] |  :  }
[10:49:38.506] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.506] |  Search for packages associated with the globals ...
[10:49:38.507] |  :  Packages associated with globals: [0] 
[10:49:38.507] |  :  Packages: [0] 
[10:49:38.507] |  Search for packages associated with the globals ... DONE
[10:49:38.507] |  Packages after dropping 'base': [0] 
[10:49:38.507] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.508] |  packages: [0] 
[10:49:38.508] getGlobalsAndPackages() ... done
[10:49:38.508] run() for Future (‘Future’) ...
[10:49:38.508] |  state: ‘created’
[10:49:38.508] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.509] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.509] |  Using MulticoreFutureBackend ...
[10:49:38.509] |  :  Launching futures ...
[10:49:38.502] |  :  .  |  :  .  |  :  List of 2
[10:49:38.502] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.502] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.502] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.502] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.502] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.502] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.502] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.502] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.502] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.502] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.502] |  :  .  |  :  .  |  :      ...)  
[10:49:38.502] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.502] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.502] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.502] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.502] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.502] |  :  .  |  :  .  |  :      ...)  
[10:49:38.502] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.509] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.509] |  :  .  |  getFutureData() ...
[10:49:38.509] |  :  .  |  :  getFutureCore() ...
[10:49:38.509] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:38.510] |  :  .  |  :  getFutureCore() ... done
[10:49:38.510] |  :  .  |  :  getFutureCapture() ...
[10:49:38.510] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.510] |  :  .  |  :  getFutureContext() ...
[10:49:38.510] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.510] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.510] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.510] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.510] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.510] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.510] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.510] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.511] |  :  .  |  :  getFutureContext() ... done
[10:49:38.511] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.511] |  :  .  |  getFutureData() ... done
[10:49:38.511] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.511] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.511] |  :  .  |  :  .  List of future strategies:
[10:49:38.511] |  :  .  |  :  .  1. sequential:
[10:49:38.511] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.511] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.511] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.514] |  :  .  |  MulticoreFuture started
[10:49:38.514] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.515] |  :  Launching futures ... done
[10:49:38.515] |  :  .  |  attachPackages() ...
[10:49:38.515] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.515] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.512] |  :  .  |  :  .  List of 1
[10:49:38.512] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.512] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.512] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.512] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.512] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.512] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.512] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.515] |  Using MulticoreFutureBackend ... done
[10:49:38.515] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.516] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.516] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.516] |  :  .  |  attachPackages() ... DONE
[10:49:38.516] Created future:
[10:49:38.516] |  :  .  |  attachPackages() ...
[10:49:38.516] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.516] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:38.516] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.516] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.516] |  :  .  |  attachPackages() ... DONE
[10:49:38.517] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.517] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.517] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.517] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.517] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.518] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.518] |  :  .  |  assign_globals() ...
[10:49:38.518] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.518] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.519] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.519] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.519] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.520] |  :  .  |  :  .  |  New stack:
[10:49:38.520] |  :  .  |  :  .  |  List of 1
[10:49:38.520] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.520] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.520] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.520] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.520] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.520] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.520] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.523] |  :  .  |  :  .  |  Old stack:
[10:49:38.524] |  :  .  |  :  .  |  List of 1
[10:49:38.524] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.524] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.524] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.524] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.524] |  :  .  |  :  .  |      ...)  
[10:49:38.524] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.524] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.524] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.524] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.524] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.524] |  :  .  |  :  .  |      ...)  
[10:49:38.524] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.524] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.528] |  :  .  |  :  .  |  Not identical
[10:49:38.528] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.529] readImmediateCondition() ...
[10:49:38.518] |  :  .  |  List of 5
[10:49:38.518] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:38.518] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:38.518] |  :  .  |    ..$ singular.ok: logi FALSE
[10:49:38.518] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.518] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:38.518] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.518] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:38.518] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.518] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:38.518] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.518] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.518] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.518] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.518] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.518] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.518] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.518] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.518] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.518] |  :  .  |   - attr(*, "total_size")= num 19977
[10:49:38.518] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.518] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.529]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.529] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:38.529] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.529]  - Number of RDS files: 0
[10:49:38.529] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.529] readImmediateCondition() ... DONE
[10:49:38.530] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.530] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.530] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.516] MulticoreFuture:
[10:49:38.516] Label: ‘future_by-2’
[10:49:38.516] Expression:
[10:49:38.516] {
[10:49:38.51[10:49:38.530] |  :  .  |  assign_globals() ... done
6]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.516]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.516]     "# as a global variable                                         "
[10:49:38.516]     do.call(function(...) {
[10:49:38.516]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:38.516]         "# without having an '...' argument. This means '...' is treated"
[10:49:38.516]         "# as a global variable. This may happen when FUN() is an       "
[10:49:38.516]         "# anonymous function.                                          "
[10:49:38.516]         "#                                                              "
[10:49:38.516]         "# If an anonymous function, we will make sure to restore the   "
[10:49:38.516]         "# function environment of FUN() to the calling environment.    "
[10:49:38.516]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:38.516]         "# global environment, which is where globals are written.      "
[10:49:38.516]         penv <- env <- environment(...future.FUN)
[10:49:38.516]         repeat {
[10:49:38.516]             if (identical(env, globalenv()) || identical(env, 
[10:49:38.516]                 emptyenv())) 
[10:49:38.516]                 break
[10:49:38.516]             penv <- env
[10:49:38.516]             env <- parent.env(env)
[10:49:38.516]         }
[10:49:38.516]         if (identical(penv, globalenv())) {
[10:49:38.516]             environment(...future.FUN) <- environment()
[10:49:38.516]         }
[10:49:38.516]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:38.516]             !isNamespace(penv)) {
[10:49:38.516]             parent.env(penv) <- environment()
[10:49:38.516]         }
[10:49:38.516]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:38.516]         {
[10:49:38.516]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.516]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.516]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.516]                 on.exit(options(oopts), add = TRUE)
[10:49:38.516]             }
[10:49:38.516]             {
[10:49:38.516]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.516]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.516]                   ...future.FUN(...future.X_jj, ...)
[10:49:38.516]                 })
[10:49:38.516]             }
[10:49:38.516]         }
[10:49:38.516]     }, args = future.call.arguments)
[10:49:38.516] }
[10:49:38.516] Lazy evaluation: FALSE
[10:49:38.516] Asynchronous evaluation: TRUE
[10:49:38.516] Local evaluation: TRUE
[10:49:38.516] Environment: R_GlobalEnv
[10:49:38.516] Capture standard output: TRUE
[10:49:38.516] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.516] Immediate condition classes: ‘immediateCondition’
[10:49:38.516] Globals: 5 objects totaling 2.30 KiB (function ‘...future.FUN’ of 762 bytes, DotDotDotList ‘future.call.arguments’ of 157 bytes, list ‘...future.elements_ii’ of 1.35 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.516] Packages: 1 packages (‘stats’)
[10:49:38.516] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.516] Resolved: FALSE
[10:49:38.516] Value: <not collected>
[10:49:38.516] Conditions captured: <none>
[10:49:38.516] Early signaling: FALSE
[10:49:38.516] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.516] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.530] Chunk #2 of 2 ... DONE
[10:49:38.531] Launching 2 futures (chunks) ... DONE
[10:49:38.531] Resolving 2 futures (chunks) ...
[10:49:38.531] value() on list ...
[10:49:38.531] |  recursive: 0
[10:49:38.531] |  length: 2
[10:49:38.532] |  
[10:49:38.532] |  Number of remaining objects: 2
[10:49:38.532] |  checking value #1 ...
[10:49:38.532] |  :  'obj' is MulticoreFuture
[10:49:38.535] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.535] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.535] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.535] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.535] |  :  .  |  :  .  |  :  New stack:
[10:49:38.528] |  :  .  |  :  .  |  :  List of 2
[10:49:38.528] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.528] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.528] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.528] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.528] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.528] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.528] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.528] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.528] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.528] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.528] |  :  .  |  :  .  |  :      ...)  
[10:49:38.528] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.528] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.528] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.528] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.528] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.528] |  :  .  |  :  .  |  :      ...)  
[10:49:38.528] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.537] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.537] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.537] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.537] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.537] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.537] |  :  .  |  :  .  List of future strategies:
[10:49:38.537] |  :  .  |  :  .  1. sequential:
[10:49:38.537] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.537] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.537] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.536] |  :  .  |  :  .  |  :  List of 1
[10:49:38.536] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.536] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.536] |  :  .  |  :  .  |  :      ...)  
[10:49:38.536] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.536] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.536] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.536] |  :  .  |  :  .  |  :      ...)  
[10:49:38.536] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.536] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.540] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.538] |  :  .  |  :  .  List of 1
[10:49:38.538] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.538] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.538] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.538] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.538] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.538] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.538] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.541] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.541] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.542] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.542] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.542] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.542] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.542] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.543] |  :  readImmediateCondition() ...
[10:49:38.540] |  :  .  |  :  .  |  :  List of 1
[10:49:38.540] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.540] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.540] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.540] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.540] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.540] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.540] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.543] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.543] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.543] |  :  .  |  :  .  |  :  Not identical
[10:49:38.543] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.543] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.543] |  :   - Number of RDS files: 0
[10:49:38.543] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.543] |  :  readImmediateCondition() ... DONE
[10:49:38.544] |  checking value #1 ... done
[10:49:38.544] |  :  .  |  assign_globals() ...
[10:49:38.544] |  checking value #2 ...
[10:49:38.544] |  :  'obj' is MulticoreFuture
[10:49:38.543] |  :  .  |  :  .  |  :  .  List of 2
[10:49:38.543] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.543] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.543] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.543] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.543] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.543] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.543] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.543] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.543] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.543] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.550] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:38.550] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:38.550] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:38.550] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.550] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:38.550] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.550] |  :  .  |  :  .  |  1. multicore:
[10:49:38.550] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.550] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.550] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.554] |  :  readImmediateCondition() ...
[10:49:38.555] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.551] |  :  .  |  :  .  |  List of 1
[10:49:38.551] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.551] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.551] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.551] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.551] |  :  .  |  :  .  |      ...)  
[10:49:38.551] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.551] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.551] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.551] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.551] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.551] |  :  .  |  :  .  |      ...)  
[10:49:38.551] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.551] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.555] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.555] |  :   - Number of RDS files: 0
[10:49:38.555] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.555] |  :  readImmediateCondition() ... DONE
[10:49:38.555] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.555] |  checking value #2 ... done
[10:49:38.555] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.556] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.556] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:38.556] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.544] |  :  .  |  List of 5
[10:49:38.544] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:38.544] |  :  .  |   $ future.call.arguments    :List of 1
[10:49:38.544] |  :  .  |    ..$ singular.ok: logi FALSE
[10:49:38.544] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.544] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:38.544] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.544] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:38.544] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.544] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:38.544] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.544] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:38.544] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.544] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:38.544] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.544] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.544] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.544] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.544] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.544] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.544] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.544] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.544] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.544] |  :  .  |   - attr(*, "total_size")= num 19977
[10:49:38.544] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.544] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.556] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.556] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.556] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:38.556] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.556] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.557] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.557] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.557] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.557] |  :  .  |  assign_globals() ... done
[10:49:38.562] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.563] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.563] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.563] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.563] |  :  .  |  :  .  |  :  New stack:
[10:49:38.566] |  Number of remaining objects: 2
[10:49:38.566] |  checking value #1 ...
[10:49:38.566] |  :  'obj' is MulticoreFuture
[10:49:38.566] |  :  readImmediateCondition() ...
[10:49:38.566] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.567] |  :   - Number of RDS files: 0
[10:49:38.567] |  :  readImmediateCondition() ... DONE
[10:49:38.567] |  :  MulticoreFuture #1
[10:49:38.567] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:38.568] |  :  .  nx: 2
[10:49:38.568] |  :  .  relay: TRUE
[10:49:38.568] |  :  .  stdout: TRUE
[10:49:38.568] |  :  .  signal: TRUE
[10:49:38.563] |  :  .  |  :  .  |  :  List of 1
[10:49:38.563] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.563] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.563] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.563] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.563] |  :  .  |  :  .  |  :      ...)  
[10:49:38.563] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.563] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.563] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.563] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.563] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.563] |  :  .  |  :  .  |  :      ...)  
[10:49:38.563] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.563] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.568] |  :  .  resignal: FALSE
[10:49:38.568] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.568] |  :  .  force: TRUE
[10:49:38.569] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:38.569] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:38.569] |  :  .  until=1
[10:49:38.569] |  :  .  relaying element #1
[10:49:38.569] |  :  .  result() for MulticoreFuture ...
[10:49:38.571] |  :  .  |  readImmediateCondition() ...
[10:49:38.571] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.571] |  :  .  |   - Number of RDS files: 0
[10:49:38.571] |  :  .  |  readImmediateCondition() ... DONE
[10:49:38.572] |  :  .  |  result() for MulticoreFuture ...
[10:49:38.572] |  :  .  |  result() for MulticoreFuture ... done
[10:49:38.572] |  :  .  result() for MulticoreFuture ... done
[10:49:38.572] |  :  .  result() for MulticoreFuture ...
[10:49:38.573] |  :  .  result() for MulticoreFuture ... done
[10:49:38.573] |  :  .  result() for MulticoreFuture ...
[10:49:38.573] |  :  .  result() for MulticoreFuture ... done
[10:49:38.569] |  :  .  |  :  .  |  :  List of 1
[10:49:38.569] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.569] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.569] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.569] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.569] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.569] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.569] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.573] |  :  .  result() for MulticoreFuture ...
[10:49:38.573] |  :  .  |  :  .  |  :  Not identical
[10:49:38.573] |  :  .  result() for MulticoreFuture ... done
[10:49:38.573] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.574] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.574] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.574] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:38.574] |  :  value(<MulticoreFuture>, ...) ...
[10:49:38.574] |  :  .  result() for MulticoreFuture ...
[10:49:38.575] |  :  .  result() for MulticoreFuture ... done
[10:49:38.575] |  :  .  result() for MulticoreFuture ...
[10:49:38.575] |  :  .  result() for MulticoreFuture ... done
[10:49:38.575] |  :  .  value: <list>
[10:49:38.576] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:38.576] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:38.576] |  :  .  nx: 2
[10:49:38.576] |  :  .  relay: TRUE
[10:49:38.576] |  :  .  stdout: TRUE
[10:49:38.576] |  :  .  signal: TRUE
[10:49:38.577] |  :  .  resignal: FALSE
[10:49:38.577] |  :  .  force: TRUE
[10:49:38.577] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.577] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.577] |  :  .  until=2
[10:49:38.577] |  :  .  relaying element #2
[10:49:38.578] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.578] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.578] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:38.578] |  :  length: 1 (resolved future 1)
[10:49:38.579] |  checking value #1 ... done
[10:49:38.579] |  checking value #2 ...
[10:49:38.579] |  :  'obj' is MulticoreFuture
[10:49:38.574] |  :  .  |  :  .  |  :  .  List of 2
[10:49:38.574] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.574] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.574] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.574] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.574] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.574] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.574] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.574] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.574] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.574] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.582] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:38.582] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:38.582] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:38.582] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.583] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:38.583] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.583] |  :  .  |  :  .  |  1. multicore:
[10:49:38.583] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.583] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.583] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.589] |  :  readImmediateCondition() ...
[10:49:38.589] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.590] |  :   - Number of RDS files: 0
[10:49:38.590] |  :  readImmediateCondition() ... DONE
[10:49:38.590] |  checking value #2 ... done
[10:49:38.583] |  :  .  |  :  .  |  List of 1
[10:49:38.583] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.583] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.583] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.583] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.583] |  :  .  |  :  .  |      ...)  
[10:49:38.583] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.583] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.583] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.583] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.583] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.583] |  :  .  |  :  .  |      ...)  
[10:49:38.583] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.583] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.592] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.592] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.593] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.593] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.593] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.593] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:38.594] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.594] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.594] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.600] |  Number of remaining objects: 1
[10:49:38.601] |  checking value #2 ...
[10:49:38.601] |  :  'obj' is MulticoreFuture
[10:49:38.601] |  :  readImmediateCondition() ...
[10:49:38.601] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.601] |  :   - Number of RDS files: 0
[10:49:38.601] |  :  readImmediateCondition() ... DONE
[10:49:38.601] |  :  MulticoreFuture #2
[10:49:38.602] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:38.602] |  :  .  nx: 2
[10:49:38.602] |  :  .  relay: TRUE
[10:49:38.602] |  :  .  stdout: TRUE
[10:49:38.602] |  :  .  signal: TRUE
[10:49:38.602] |  :  .  resignal: FALSE
[10:49:38.602] |  :  .  force: TRUE
[10:49:38.602] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.602] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.602] |  :  .  until=2
[10:49:38.603] |  :  .  relaying element #2
[10:49:38.603] |  :  .  result() for MulticoreFuture ...
[10:49:38.603] |  :  .  |  readImmediateCondition() ...
[10:49:38.603] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.604] |  :  .  |   - Number of RDS files: 0
[10:49:38.604] |  :  .  |  readImmediateCondition() ... DONE
[10:49:38.604] |  :  .  |  result() for MulticoreFuture ...
[10:49:38.604] |  :  .  |  result() for MulticoreFuture ... done
[10:49:38.604] |  :  .  result() for MulticoreFuture ... done
[10:49:38.605] |  :  .  result() for MulticoreFuture ...
[10:49:38.605] |  :  .  result() for MulticoreFuture ... done
[10:49:38.605] |  :  .  result() for MulticoreFuture ...
[10:49:38.605] |  :  .  result() for MulticoreFuture ... done
[10:49:38.605] |  :  .  result() for MulticoreFuture ...
[10:49:38.606] |  :  .  result() for MulticoreFuture ... done
[10:49:38.606] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.606] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.606] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:38.606] |  :  value(<MulticoreFuture>, ...) ...
[10:49:38.606] |  :  .  result() for MulticoreFuture ...
[10:49:38.607] |  :  .  result() for MulticoreFuture ... done
[10:49:38.607] |  :  .  result() for MulticoreFuture ...
[10:49:38.607] |  :  .  result() for MulticoreFuture ... done
[10:49:38.607] |  :  .  value: <list>
[10:49:38.607] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:38.607] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:38.608] |  :  .  nx: 2
[10:49:38.608] |  :  .  relay: TRUE
[10:49:38.608] |  :  .  stdout: TRUE
[10:49:38.608] |  :  .  signal: TRUE
[10:49:38.608] |  :  .  resignal: FALSE
[10:49:38.608] |  :  .  force: TRUE
[10:49:38.608] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.609] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.609] |  :  .  until=2
[10:49:38.609] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.609] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.609] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:38.609] |  :  length: 0 (resolved future 2)
[10:49:38.610] |  checking value #2 ... done
[10:49:38.610] |  Relaying remaining futures ...
[10:49:38.610] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:38.610] |  :  .  nx: 2
[10:49:38.610] |  :  .  relay: TRUE
[10:49:38.610] |  :  .  stdout: TRUE
[10:49:38.610] |  :  .  signal: TRUE
[10:49:38.610] |  :  .  resignal: FALSE
[10:49:38.610] |  :  .  force: TRUE
[10:49:38.611] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.611] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:38.611] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.611] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.611] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:38.611] |  Relaying remaining futures ... done
[10:49:38.611] value() on list ... done
[10:49:38.611]  - Number of value chunks collected: 2
[10:49:38.612] Resolving 2 futures (chunks) ... DONE
[10:49:38.612] Reducing values from 2 chunks ...
[10:49:38.612]  - Number of values collected after concatenation: 3
[10:49:38.612]  - Number of values expected: 3
[10:49:38.612] Reducing values from 2 chunks ... DONE
[10:49:38.612] future_lapply() ... DONE
[10:49:38.612] future_by_internal() ... DONE
[10:49:38.617] future_by_internal() ...
[10:49:38.618] future_lapply() ...
[10:49:38.619] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.619] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.619] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.620] Number of chunks: 2
[10:49:38.620] getGlobalsAndPackagesXApply() ...
[10:49:38.620]  - future.globals: TRUE
[10:49:38.620] getGlobalsAndPackages() ...
[10:49:38.620] |  Searching for globals ...
[10:49:38.623] |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:38.623] |  Searching for globals ... DONE
[10:49:38.623] |  Resolving globals: FALSE
[10:49:38.623] |  Search for packages associated with the globals ...
[10:49:38.623] |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:38.624] |  :  Packages: [2] ‘base’, ‘stats’
[10:49:38.624] |  Search for packages associated with the globals ... DONE
[10:49:38.624] |  The total size of the 3 globals is 2.07 KiB (2118 bytes)
[10:49:38.625] |  The total size of the 3 globals exported for future expression (‘FUN()’) is 2.07 KiB There are three globals: ‘FUN’ (1.28 KiB of class ‘function’), ‘breaks’ (463 bytes of class ‘numeric’) and ‘wool’ (342 bytes of class ‘numeric’)
[10:49:38.625] |  Packages after dropping 'base': [1] ‘stats’
[10:49:38.625] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:38.625] |  globals: [3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:38.625] |  packages: [1] ‘stats’
[10:49:38.625] getGlobalsAndPackages() ... done
[10:49:38.625]  - globals found/used: [n=3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:38.626]  - needed namespaces: [n=1] ‘stats’
[10:49:38.626] Finding globals ... DONE
[10:49:38.626]  - use_args: TRUE
[10:49:38.626]  - Getting '...' globals ...
[10:49:38.626] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:38.626] |  recursive: 0
[10:49:38.627] |  length: 1
[10:49:38.627] |  elements: ‘...’
[10:49:38.627] |  'obj' is DotDotDotList
[10:49:38.627] |  resolve(obj, ...) ...
[10:49:38.627] |  resolve(obj, ...) ... done
[10:49:38.627] |  length: 0 (resolved future 1)
[10:49:38.627] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:38.627]    - '...' content: [n=0] 
[10:49:38.628] List of 1
[10:49:38.628]  $ ...: list()
[10:49:38.628]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.628]  - attr(*, "where")=List of 1
[10:49:38.628]   ..$ ...:<environment: 0x5564a7b4cd90> 
[10:49:38.628]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.628]  - attr(*, "resolved")= logi TRUE
[10:49:38.628]  - attr(*, "total_size")= num NA
[10:49:38.631]  - Getting '...' globals ... DONE
[10:49:38.631] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’
[10:49:38.631] List of 4
[10:49:38.631]  $ ...future.FUN:function (x)  
[10:49:38.631]  $ breaks       : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:38.631]  $ wool         : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:38.631]  $ ...          : list()
[10:49:38.631]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.631]  - attr(*, "where")=List of 4
[10:49:38.631]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:38.631]   ..$ breaks       :<environment: R_EmptyEnv> 
[10:49:38.631]   ..$ wool         :<environment: R_EmptyEnv> 
[10:49:38.631]   ..$ ...          :<environment: 0x5564a7b4cd90> 
[10:49:38.631]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.631]  - attr(*, "resolved")= logi FALSE
[10:49:38.631]  - attr(*, "total_size")= num 18867
[10:49:38.636] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:38.636] getGlobalsAndPackagesXApply() ... DONE
[10:49:38.636] Number of futures (= number of chunks): 2
[10:49:38.636] Launching 2 futures (chunks) ...
[10:49:38.636] Chunk #1 of 2 ...
[10:49:38.636]  - Finding globals in 'X' for chunk #1 ...
[10:49:38.636] getGlobalsAndPackages() ...
[10:49:38.637] |  Searching for globals ...
[10:49:38.637] |  :  globals found: [0] 
[10:49:38.637] |  Searching for globals ... DONE
[10:49:38.637] |  globals: [0] <none>
[10:49:38.637] |  packages: [0] <none>
[10:49:38.637] getGlobalsAndPackages() ... done
[10:49:38.638]    + additional globals found: [n=0] 
[10:49:38.638]    + additional namespaces needed: [n=0] 
[10:49:38.638]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:38.638]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.638]  - seeds: <none>
[10:49:38.638]  - All globals exported: [n=7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.638] getGlobalsAndPackages() ...
[10:49:38.638] |  globals passed as-is: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.638] |  Resolving globals: FALSE
[10:49:38.639] |  Tweak future expression to call with '...' arguments ...
[10:49:38.639] |  :  {
[10:49:38.639] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.639] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.639] |  :      "# as a global variable                                         "
[10:49:38.639] |  :      do.call(function(...) {
[10:49:38.639] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:38.639] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:38.639] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:38.639] |  :          "# anonymous function.                                          "
[10:49:38.639] |  :          "#                                                              "
[10:49:38.639] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:38.639] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:38.639] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:38.639] |  :          "# global environment, which is where globals are written.      "
[10:49:38.639] |  :          penv <- env <- environment(...future.FUN)
[10:49:38.639] |  :          repeat {
[10:49:38.639] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:38.639] |  :                  emptyenv())) 
[10:49:38.639] |  :                  break
[10:49:38.639] |  :              penv <- env
[10:49:38.639] |  :              env <- parent.env(env)
[10:49:38.639] |  :          }
[10:49:38.639] |  :          if (identical(penv, globalenv())) {
[10:49:38.639] |  :              environment(...future.FUN) <- environment()
[10:49:38.639] |  :          }
[10:49:38.639] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:38.639] |  :              !isNamespace(penv)) {
[10:49:38.639] |  :              parent.env(penv) <- environment()
[10:49:38.639] |  :          }
[10:49:38.639] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:38.639] |  :          {
[10:49:38.639] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.639] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.639] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.639] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:38.639] |  :              }
[10:49:38.639] |  :              {
[10:49:38.639] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.639] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.639] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:38.639] |  :                  })
[10:49:38.639] |  :              }
[10:49:38.639] |  :          }
[10:49:38.639] |  :      }, args = future.call.arguments)
[10:49:38.639] |  :  }
[10:49:38.639] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.639] |  Search for packages associated with the globals ...
[10:49:38.640] |  :  Packages associated with globals: [0] 
[10:49:38.640] |  :  Packages: [0] 
[10:49:38.640] |  Search for packages associated with the globals ... DONE
[10:49:38.640] |  Packages after dropping 'base': [0] 
[10:49:38.640] |  globals: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.640] |  packages: [0] 
[10:49:38.641] getGlobalsAndPackages() ... done
[10:49:38.641] run() for Future (‘Future’) ...
[10:49:38.641] |  state: ‘created’
[10:49:38.641] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.641] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.641] |  Using MulticoreFutureBackend ...
[10:49:38.642] |  :  Launching futures ...
[10:49:38.642] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.642] |  :  .  |  getFutureData() ...
[10:49:38.642] |  :  .  |  :  getFutureCore() ...
[10:49:38.644] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:38.645] |  :  .  |  :  getFutureCore() ... done
[10:49:38.645] |  :  .  |  :  getFutureCapture() ...
[10:49:38.645] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.645] |  :  .  |  :  getFutureContext() ...
[10:49:38.645] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.646] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.646] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.646] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.646] |  :  .  |  :  getFutureContext() ... done
[10:49:38.646] |  :  .  |  getFutureData() ... done
[10:49:38.646] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.646] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.649] |  :  .  |  MulticoreFuture started
[10:49:38.649] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.649] |  :  Launching futures ... done
[10:49:38.650] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.650] |  :  .  |  attachPackages() ...
[10:49:38.650] |  Using MulticoreFutureBackend ... done
[10:49:38.650] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.650] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.650] Created future:
[10:49:38.650] |  :  .  |  attachPackages() ... DONE
[10:49:38.651] |  :  .  |  attachPackages() ...
[10:49:38.651] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:38.651] |  :  .  |  attachPackages() ... DONE
[10:49:38.652] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.652] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.652] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.653] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.653] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.653] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.653] |  :  .  |  :  .  |  New stack:
[10:49:38.653] |  :  .  |  :  .  |  List of 1
[10:49:38.653] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.653] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.653] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.653] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.653] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.653] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.653] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.657] |  :  .  |  :  .  |  Old stack:
[10:49:38.658] |  :  .  |  :  .  |  List of 1
[10:49:38.658] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.658] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.658] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.658] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.658] |  :  .  |  :  .  |      ...)  
[10:49:38.658] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.658] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.658] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.658] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.658] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.658] |  :  .  |  :  .  |      ...)  
[10:49:38.658] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.658] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.662] readImmediateCondition() ...
[10:49:38.663] |  :  .  |  :  .  |  Not identical
[10:49:38.663]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.663] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.663]  - Number of RDS files: 0
[10:49:38.663] readImmediateCondition() ... DONE
[10:49:38.650] MulticoreFuture:
[10:49:38.650] Label: ‘future_by-1’
[10:49:38.650] Expression:
[10:49:38.650] {
[10:49:38.650]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.650]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.650]     "# as a global variable                                         "
[10:49:38.650]     do.call(function(...) {
[10:49:38.650]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:38.650]         "# without having an '...' argument. This means '...' is treated"
[10:49:38.650]         "# as a global variable. This may happen when FUN() is an       "
[10:49:38.650]         "# anonymous function.                                          "
[10:49:38.650]         "#                                                              "
[10:49:38.650]         "# If an anonymous function, we will make sure to restore the   "
[10:49:38.650]         "# function environment of FUN() to the calling environment.    "
[10:49:38.650]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:38.650]         "# global environment, which is where globals are written.      "
[10:49:38.650]         penv <- env <- environment(...future.FUN)
[10:49:38.650]         repeat {
[10:49:38.650]             if (identical(env, globalenv()) || identical(env, 
[10:49:38.650]                 emptyenv())) 
[10:49:38.650]                 break
[10:49:38.650]             penv <- env
[10:49:38.650]             env <- parent.env(env)
[10:49:38.650]         }
[10:49:38.650]         if (identical(penv, globalenv())) {
[10:49:38.650]             environment(...future.FUN) <- environment()
[10:49:38.650]         }
[10:49:38.650]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:38.650]             !isNamespace(penv)) {
[10:49:38.650]             parent.env(penv) <- environment()
[10:49:38.650]         }
[10:49:38.650]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:38.650]         {
[10:49:38.650]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.650]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.650]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.650]                 on.exit(options(oopts), add = TRUE)
[10:49:38.650]             }
[10:49:38.650]             {
[10:49:38.650]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.650]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.650]                   ...future.FUN(...future.X_jj, ...)
[10:49:38.650]                 })
[10:49:38.650]             }
[10:49:38.650]         }
[10:49:38.650]     }, args = future.call.arguments)
[10:49:38.650] }
[10:49:38.650] Lazy evaluation: FALSE
[10:49:38.650] Asynchronous evaluation: TRUE
[10:49:38.650] Local evaluation: TRUE
[10:49:38.650] Environment: 0x5564a7b1e028
[10:49:38.650] Capture standard output: TRUE
[10:49:38.650] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.650] Immediate condition classes: ‘immediateCondition’
[10:49:38.650] Globals: 7 objects totaling 2.93 KiB (function ‘...future.FUN’ of 1.28 KiB, numeric ‘breaks’ of 463 bytes, factor ‘wool’ of 342 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 736 bytes, ...)
[10:49:38.650] Packages: 1 packages (‘stats’)
[10:49:38.650] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.650] Resolved: FALSE
[10:49:38.650] Value: <not collected>
[10:49:38.650] Conditions captured: <none>
[10:49:38.650] Early signaling: FALSE
[10:49:38.650] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.650] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.664] Chunk #1 of 2 ... DONE
[10:49:38.664] Chunk #2 of 2 ...
[10:49:38.664]  - Finding globals in 'X' for chunk #2 ...
[10:49:38.664] getGlobalsAndPackages() ...
[10:49:38.665] |  Searching for globals ...
[10:49:38.665] |  :  globals found: [0] 
[10:49:38.665] |  Searching for globals ... DONE
[10:49:38.666] |  globals: [0] <none>
[10:49:38.666] |  packages: [0] <none>
[10:49:38.666] getGlobalsAndPackages() ... done
[10:49:38.666]    + additional globals found: [n=0] 
[10:49:38.666]    + additional namespaces needed: [n=0] 
[10:49:38.666]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:38.666]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.667]  - seeds: <none>
[10:49:38.667]  - All globals exported: [n=7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.667] getGlobalsAndPackages() ...
[10:49:38.667] |  globals passed as-is: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.667] |  Resolving globals: FALSE
[10:49:38.667] |  Tweak future expression to call with '...' arguments ...
[10:49:38.667] |  :  {
[10:49:38.667] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.667] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.667] |  :      "# as a global variable                                         "
[10:49:38.667] |  :      do.call(function(...) {
[10:49:38.667] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:38.667] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:38.667] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:38.667] |  :          "# anonymous function.                                          "
[10:49:38.667] |  :          "#                                                              "
[10:49:38.667] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:38.667] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:38.667] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:38.667] |  :          "# global environment, which is where globals are written.      "
[10:49:38.667] |  :          penv <- env <- environment(...future.FUN)
[10:49:38.667] |  :          repeat {
[10:49:38.667] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:38.667] |  :                  emptyenv())) 
[10:49:38.667] |  :                  break
[10:49:38.667] |  :              penv <- env
[10:49:38.667] |  :              env <- parent.env(env)
[10:49:38.667] |  :          }
[10:49:38.667] |  :          if (identical(penv, globalenv())) {
[10:49:38.667] |  :              environment(...future.FUN) <- environment()
[10:49:38.667] |  :          }
[10:49:38.667] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:38.667] |  :              !isNamespace(penv)) {
[10:49:38.667] |  :              parent.env(penv) <- environment()
[10:49:38.667] |  :          }
[10:49:38.667] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:38.667] |  :          {
[10:49:38.667] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.667] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.667] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.667] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:38.667] |  :              }
[10:49:38.667] |  :              {
[10:49:38.667] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.667] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.667] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:38.667] |  :                  })
[10:49:38.667] |  :              }
[10:49:38.667] |  :          }
[10:49:38.667] |  :      }, args = future.call.arguments)
[10:49:38.667] |  :  }
[10:49:38.668] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.668] |  Search for packages associated with the globals ...
[10:49:38.669] |  :  Packages associated with globals: [0] 
[10:49:38.669] |  :  Packages: [0] 
[10:49:38.669] |  Search for packages associated with the globals ... DONE
[10:49:38.669] |  Packages after dropping 'base': [0] 
[10:49:38.669] |  globals: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.670] |  packages: [0] 
[10:49:38.663] |  :  .  |  :  .  |  :  List of 2
[10:49:38.663] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.663] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequentia[10:49:38.670] getGlobalsAndPackages() ... done
l" "uniprocess" "future" "function"
[10:49:38.663] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.663] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.663] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.663] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.663] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.663] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.663] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.663] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.663] |  :  .  |  :  .  |  :      ...)  
[10:49:38.663] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.663] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.663] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.663] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.663] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.663] |  :  .  |  :  .  |  :      ...)  
[10:49:38.663] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.670] run() for Future (‘Future’) ...
[10:49:38.670] |  state: ‘created’
[10:49:38.670] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.671] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.671] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.671] |  Using MulticoreFutureBackend ...
[10:49:38.671] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.671] |  :  Launching futures ...
[10:49:38.671] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.671] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.671] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.671] |  :  .  |  getFutureData() ...
[10:49:38.671] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.671] |  :  .  |  :  getFutureCore() ...
[10:49:38.671] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:38.672] |  :  .  |  :  getFutureCore() ... done
[10:49:38.672] |  :  .  |  :  getFutureCapture() ...
[10:49:38.672] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.672] |  :  .  |  :  getFutureContext() ...
[10:49:38.671] |  :  .  |  :  .  List of future strategies:
[10:49:38.671] |  :  .  |  :  .  1. sequential:
[10:49:38.671] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.671] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.671] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.672] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.672] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.672] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.672] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.673] |  :  .  |  :  getFutureContext() ... done
[10:49:38.673] |  :  .  |  getFutureData() ... done
[10:49:38.673] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.673] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.672] |  :  .  |  :  .  List of 1
[10:49:38.672] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.672] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.672] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.672] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.672] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.672] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.672] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.675] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.676] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.676] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.676] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’,[10:49:38.676] |  :  .  |  MulticoreFuture started
 ‘future’, ‘function’
[10:49:38.676] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.676] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.676] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.677] |  :  Launching futures ... done
[10:49:38.677] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.677] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.677] |  :  .  |  attachPackages() ...
[10:49:38.677] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.677] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.677] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.677] |  Using MulticoreFutureBackend ... done
[10:49:38.677] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.677] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.677] |  :  .  |  assign_globals() ...
[10:49:38.678] Created future:
[10:49:38.678] |  :  .  |  attachPackages() ... DONE
[10:49:38.678] |  :  .  |  attachPackages() ...
[10:49:38.678] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:38.678] |  :  .  |  attachPackages() ... DONE
[10:49:38.679] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.680] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.680] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.681] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.681] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.682] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.682] |  :  .  |  :  .  |  New stack:
[10:49:38.682] |  :  .  |  :  .  |  List of 1
[10:49:38.682] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.682] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.682] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.682] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.682] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.682] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.682] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.686] |  :  .  |  :  .  |  Old stack:
[10:49:38.678] |  :  .  |  List of 7
[10:49:38.678] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:38.678] |  :  .  |   $ breaks                   : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:38.678] |  :  .  |   $ wool                     : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:38.678] |  :  .  |   $ future.call.arguments    : list()
[10:49:38.678] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.678] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:38.678] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.678] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:38.678] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.678] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:38.678] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.678] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.678] |  :  .  |   - attr(*, "where")=List of 7
[10:49:38.678] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.678] |  :  .  |    ..$ breaks                   :<environment: R_EmptyEnv> 
[10:49:38.678] |  :  .  |    ..$ wool                     :<environment: R_EmptyEnv> 
[10:49:38.678] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.678] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.678] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.678] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.678] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.678] |  :  .  |   - attr(*, "total_size")= num 18867
[10:49:38.678] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.678] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.689] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:38.690] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.690] |  :  .  |  - copied ‘breaks’ to environment
[10:49:38.690] |  :  .  |  - copied ‘wool’ to environment
[10:49:38.690] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.690] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.690] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.690] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.691] |  :  .  |  assign_globals() ... done
[10:49:38.691] readImmediateCondition() ...
[10:49:38.686] |  :  .  |  :  .  |  List of 1
[10:49:38.686] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.686] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.686] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.686] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.686] |  :  .  |  :  .  |      ...)  
[10:49:38.686] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.686] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.686] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.686] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.686] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.686] |  :  .  |  :  .  |      ...)  
[10:49:38.686] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.686] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.691]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.691] |  :  .  |  :  .  |  Not identical
[10:49:38.692]  - Number of RDS files: 0
[10:49:38.692] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.692] readImmediateCondition() ... DONE
[10:49:38.678] MulticoreFuture:
[10:49:38.678] Label: ‘future_by-2’
[10:49:38.678] Expression:
[10:49:38.678] {
[10:49:38.678]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.678]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.678]     "# as a global variable                                         "
[10:49:38.678]     do.call(function(...) {
[10:49:38.678]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:38.678]         "# without having an '...' argument. This means '...' is treated"
[10:49:38.678]         "# as a global variable. This may happen when FUN() is an       "
[10:49:38.678]         "# anonymous function.                                          "
[10:49:38.678]         "#                                                              "
[10:49:38.678]         "# If an anonymous function, we will make sure to restore the   "
[10:49:38.678]         "# function environment of FUN() to the calling environment.    "
[10:49:38.678]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:38.678]         "# global environment, which is where globals are written.      "
[10:49:38.678]         penv <- env <- environment(...future.FUN)
[10:49:38.678]         repeat {
[10:49:38.678]             if (identical(env, globalenv()) || identical(env, 
[10:49:38.678]                 emptyenv())) 
[10:49:38.678]                 break
[10:49:38.678]             penv <- env
[10:49:38.678]             env <- parent.env(env)
[10:49:38.678]         }
[10:49:38.678]         if (identical(penv, globalenv())) {
[10:49:38.678]             environment(...future.FUN) <- environment()
[10:49:38.678]         }
[10:49:38.678]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:38.678]             !isNamespace(penv)) {
[10:49:38.678]             parent.env(penv) <- environment()
[10:49:38.678]         }
[10:49:38.678]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:38.678]         {
[10:49:38.678]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.678]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.678]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.678]                 on.exit(options(oopts), add = TRUE)
[10:49:38.678]             }
[10:49:38.678]             {
[10:49:38.678]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.678]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.678]                   ...future.FUN(...future.X_jj, ...)
[10:49:38.678]                 })
[10:49:38.678]             }
[10:49:38.678]         }
[10:49:38.678]     }, args = future.call.arguments)
[10:49:38.678] }
[10:49:38.678] Lazy evaluation: FALSE
[10:49:38.678] Asynchronous evaluation: TRUE
[10:49:38.678] Local evaluation: TRUE
[10:49:38.678] Environment: 0x5564a7b1e028
[10:49:38.678] Capture standard output: TRUE
[10:49:38.678] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.678] Immediate condition classes: ‘immediateCondition’
[10:49:38.678] Globals: 7 objects totaling 3.57 KiB (function ‘...future.FUN’ of 1.28 KiB, numeric ‘breaks’ of 463 bytes, factor ‘wool’ of 342 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.35 KiB, ...)
[10:49:38.678] Packages: 1 packages (‘stats’)
[10:49:38.678] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.678] Resolved: FALSE
[10:49:38.678] Value: <not collected>
[10:49:38.678] Conditions captured: <none>
[10:49:38.678] Early signaling: FALSE
[10:49:38.678] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.678] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.693] Chunk #2 of 2 ... DONE
[10:49:38.693] Launching 2 futures (chunks) ... DONE
[10:49:38.693] Resolving 2 futures (chunks) ...
[10:49:38.693] value() on list ...
[10:49:38.694] |  recursive: 0
[10:49:38.694] |  length: 2
[10:49:38.694] |  
[10:49:38.694] |  Number of remaining objects: 2
[10:49:38.694] |  checking value #1 ...
[10:49:38.695] |  :  'obj' is MulticoreFuture
[10:49:38.695] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.695] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.695] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.695] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.695] |  :  .  |  :  .  |  :  New stack:
[10:49:38.696] |  :  .  |  :  .  |  :  List of 1
[10:49:38.696] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.696] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.696] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.696] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.696] |  :  .  |  :  .  |  :      ...)  
[10:49:38.696] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.696] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.696] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.696] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.696] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.696] |  :  .  |  :  .  |  :      ...)  
[10:49:38.696] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.696] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.700] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.692] |  :  .  |  :  .  |  :  List of 2
[10:49:38.692] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.692] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.692] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.692] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.692] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.692] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.692] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.692] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.692] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.692] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.692] |  :  .  |  :  .  |  :      ...)  
[10:49:38.692] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.692] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.692] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.692] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.692] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.692] |  :  .  |  :  .  |  :      ...)  
[10:49:38.692] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.701] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.702] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.702] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.702] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.702] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.700] |  :  .  |  :  .  |  :  List of 1
[10:49:38.700] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.700] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.700] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.700] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.700] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.700] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.700] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.703] |  :  .  |  :  .  |  :  Not identical
[10:49:38.702] |  :  .  |  :  .  List of future strategies:
[10:49:38.702] |  :  .  |  :  .  1. sequential:
[10:49:38.702] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.702] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.702] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.703] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.705] |  :  readImmediateCondition() ...
[10:49:38.705] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.706] |  :   - Number of RDS files: 0
[10:49:38.706] |  :  readImmediateCondition() ... DONE
[10:49:38.706] |  checking value #1 ... done
[10:49:38.706] |  checking value #2 ...
[10:49:38.706] |  :  'obj' is MulticoreFuture
[10:49:38.703] |  :  .  |  :  .  List of 1
[10:49:38.703] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.703] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.703] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.703] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.703] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.703] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.703] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.707] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.707] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.707] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.708] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.708] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.708] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.708] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.708] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.709] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.709] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.703] |  :  .  |  :  .  |  :  .  List of 2
[10:49:38.703] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.703] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.703] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.703] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.703] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.703] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.703] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.703] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.703] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.703] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.703] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.703] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.703] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.703] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.703] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.703] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.703] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.703] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.709] |  :  .  |  assign_globals() ...
[10:49:38.710] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:38.710] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:38.710] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:38.710] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.710] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:38.710] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.710] |  :  .  |  :  .  |  1. multicore:
[10:49:38.710] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.710] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.710] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.711] |  :  .  |  :  .  |  List of 1
[10:49:38.711] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.711] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.711] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.711] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.711] |  :  .  |  :  .  |      ...)  
[10:49:38.711] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.711] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.711] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.711] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.711] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.711] |  :  .  |  :  .  |      ...)  
[10:49:38.711] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.711] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.715] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.715] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.715] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.715] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.716] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.716] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:38.716] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.716] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.716] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.717] |  :  readImmediateCondition() ...
[10:49:38.717] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.717] |  :   - Number of RDS files: 0
[10:49:38.717] |  :  readImmediateCondition() ... DONE
[10:49:38.718] |  checking value #2 ... done
[10:49:38.709] |  :  .  |  List of 7
[10:49:38.709] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:38.709] |  :  .  |   $ breaks                   : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:38.709] |  :  .  |   $ wool                     : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:38.709] |  :  .  |   $ future.call.arguments    : list()
[10:49:38.709] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.709] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:38.709] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.709] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:38.709] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.709] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:38.709] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.709] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:38.709] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.709] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:38.709] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.709] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.709] |  :  .  |   - attr(*, "where")=List of 7
[10:49:38.709] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.709] |  :  .  |    ..$ breaks                   :<environment: R_EmptyEnv> 
[10:49:38.709] |  :  .  |    ..$ wool                     :<environment: R_EmptyEnv> 
[10:49:38.709] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.709] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.709] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.709] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.709] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.709] |  :  .  |   - attr(*, "total_size")= num 18867
[10:49:38.709] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.709] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.723] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:38.723] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.723] |  :  .  |  - copied ‘breaks’ to environment
[10:49:38.723] |  :  .  |  - copied ‘wool’ to environment
[10:49:38.723] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.723] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.723] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.724] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.724] |  :  .  |  assign_globals() ... done
[10:49:38.728] |  Number of remaining objects: 2
[10:49:38.728] |  checking value #1 ...
[10:49:38.728] |  :  'obj' is MulticoreFuture
[10:49:38.729] |  :  readImmediateCondition() ...
[10:49:38.729] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.729] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.729] |  :   - Number of RDS files: 0
[10:49:38.729] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.729] |  :  readImmediateCondition() ... DONE
[10:49:38.729] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.729] |  :  MulticoreFuture #1
[10:49:38.730] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:38.730] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.730] |  :  .  nx: 2
[10:49:38.730] |  :  .  |  :  .  |  :  New stack:
[10:49:38.730] |  :  .  relay: TRUE
[10:49:38.730] |  :  .  stdout: TRUE
[10:49:38.730] |  :  .  signal: TRUE
[10:49:38.730] |  :  .  resignal: FALSE
[10:49:38.731] |  :  .  force: TRUE
[10:49:38.731] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:38.731] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:38.731] |  :  .  until=1
[10:49:38.731] |  :  .  relaying element #1
[10:49:38.732] |  :  .  result() for MulticoreFuture ...
[10:49:38.733] |  :  .  |  readImmediateCondition() ...
[10:49:38.733] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.733] |  :  .  |   - Number of RDS files: 0
[10:49:38.733] |  :  .  |  readImmediateCondition() ... DONE
[10:49:38.734] |  :  .  |  result() for MulticoreFuture ...
[10:49:38.734] |  :  .  |  result() for MulticoreFuture ... done
[10:49:38.734] |  :  .  result() for MulticoreFuture ... done
[10:49:38.734] |  :  .  result() for MulticoreFuture ...
[10:49:38.735] |  :  .  result() for MulticoreFuture ... done
[10:49:38.735] |  :  .  result() for MulticoreFuture ...
[10:49:38.735] |  :  .  result() for MulticoreFuture ... done
[10:49:38.735] |  :  .  result() for MulticoreFuture ...
[10:49:38.736] |  :  .  result() for MulticoreFuture ... done
[10:49:38.736] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.736] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.736] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:38.730] |  :  .  |  :  .  |  :  List of 1
[10:49:38.730] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.730] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.730] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.730] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.730] |  :  .  |  :  .  |  :      ...)  
[10:49:38.730] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.730] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.730] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.730] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.730] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.730] |  :  .  |  :  .  |  :      ...)  
[10:49:38.730] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.730] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.736] |  :  value(<MulticoreFuture>, ...) ...
[10:49:38.737] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.737] |  :  .  result() for MulticoreFuture ...
[10:49:38.737] |  :  .  result() for MulticoreFuture ... done
[10:49:38.737] |  :  .  result() for MulticoreFuture ...
[10:49:38.737] |  :  .  result() for MulticoreFuture ... done
[10:49:38.738] |  :  .  value: <list>
[10:49:38.738] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:38.738] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:38.738] |  :  .  nx: 2
[10:49:38.738] |  :  .  relay: TRUE
[10:49:38.739] |  :  .  stdout: TRUE
[10:49:38.739] |  :  .  signal: TRUE
[10:49:38.739] |  :  .  resignal: FALSE
[10:49:38.739] |  :  .  force: TRUE
[10:49:38.739] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.740] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.740] |  :  .  until=2
[10:49:38.740] |  :  .  relaying element #2
[10:49:38.740] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.740] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.741] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:38.741] |  :  length: 1 (resolved future 1)
[10:49:38.741] |  checking value #1 ... done
[10:49:38.741] |  checking value #2 ...
[10:49:38.737] |  :  .  |  :  .  |  :  List of 1
[10:49:38.737] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.737] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.737] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.737] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.737] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.737] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.737] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.741] |  :  'obj' is MulticoreFuture
[10:49:38.741] |  :  .  |  :  .  |  :  Not identical
[10:49:38.742] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.742] |  :  .  |  :  .  |  :  .  List of 2
[10:49:38.742] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.742] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.742] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.742] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.742] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.742] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.742] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.742] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.742] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.742] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.742] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.742] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.742] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.742] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.742] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.742] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.742] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.742] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.748] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:38.748] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:38.748] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:38.749] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.749] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:38.749] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.749] |  :  .  |  :  .  |  1. multicore:
[10:49:38.749] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.749] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.749] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.752] |  :  readImmediateCondition() ...
[10:49:38.752] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.752] |  :   - Number of RDS files: 0
[10:49:38.752] |  :  readImmediateCondition() ... DONE
[10:49:38.753] |  checking value #2 ... done
[10:49:38.749] |  :  .  |  :  .  |  List of 1
[10:49:38.749] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.749] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.749] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.749] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.749] |  :  .  |  :  .  |      ...)  
[10:49:38.749] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.749] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.749] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.749] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.749] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.749] |  :  .  |  :  .  |      ...)  
[10:49:38.749] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.749] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.754] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.754] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.754] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.754] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.755] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.755] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:38.755] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.755] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.755] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.763] |  Number of remaining objects: 1
[10:49:38.763] |  checking value #2 ...
[10:49:38.763] |  :  'obj' is MulticoreFuture
[10:49:38.764] |  :  readImmediateCondition() ...
[10:49:38.764] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.764] |  :   - Number of RDS files: 0
[10:49:38.764] |  :  readImmediateCondition() ... DONE
[10:49:38.764] |  :  MulticoreFuture #2
[10:49:38.765] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:38.765] |  :  .  nx: 2
[10:49:38.765] |  :  .  relay: TRUE
[10:49:38.765] |  :  .  stdout: TRUE
[10:49:38.765] |  :  .  signal: TRUE
[10:49:38.765] |  :  .  resignal: FALSE
[10:49:38.765] |  :  .  force: TRUE
[10:49:38.766] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.766] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.766] |  :  .  until=2
[10:49:38.766] |  :  .  relaying element #2
[10:49:38.766] |  :  .  result() for MulticoreFuture ...
[10:49:38.767] |  :  .  |  readImmediateCondition() ...
[10:49:38.767] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.768] |  :  .  |   - Number of RDS files: 0
[10:49:38.768] |  :  .  |  readImmediateCondition() ... DONE
[10:49:38.768] |  :  .  |  result() for MulticoreFuture ...
[10:49:38.768] |  :  .  |  result() for MulticoreFuture ... done
[10:49:38.768] |  :  .  result() for MulticoreFuture ... done
[10:49:38.769] |  :  .  result() for MulticoreFuture ...
[10:49:38.769] |  :  .  result() for MulticoreFuture ... done
[10:49:38.769] |  :  .  result() for MulticoreFuture ...
[10:49:38.769] |  :  .  result() for MulticoreFuture ... done
[10:49:38.769] |  :  .  result() for MulticoreFuture ...
[10:49:38.770] |  :  .  result() for MulticoreFuture ... done
[10:49:38.770] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.770] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.770] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:38.770] |  :  value(<MulticoreFuture>, ...) ...
[10:49:38.770] |  :  .  result() for MulticoreFuture ...
[10:49:38.770] |  :  .  result() for MulticoreFuture ... done
[10:49:38.770] |  :  .  result() for MulticoreFuture ...
[10:49:38.771] |  :  .  result() for MulticoreFuture ... done
[10:49:38.771] |  :  .  value: <list>
[10:49:38.771] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:38.771] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:38.771] |  :  .  nx: 2
[10:49:38.771] |  :  .  relay: TRUE
[10:49:38.771] |  :  .  stdout: TRUE
[10:49:38.771] |  :  .  signal: TRUE
[10:49:38.771] |  :  .  resignal: FALSE
[10:49:38.772] |  :  .  force: TRUE
[10:49:38.772] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.772] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.772] |  :  .  until=2
[10:49:38.772] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.772] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.772] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:38.772] |  :  length: 0 (resolved future 2)
[10:49:38.773] |  checking value #2 ... done
[10:49:38.773] |  Relaying remaining futures ...
[10:49:38.773] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:38.773] |  :  .  nx: 2
[10:49:38.773] |  :  .  relay: TRUE
[10:49:38.773] |  :  .  stdout: TRUE
[10:49:38.773] |  :  .  signal: TRUE
[10:49:38.773] |  :  .  resignal: FALSE
[10:49:38.773] |  :  .  force: TRUE
[10:49:38.773] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.774] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:38.774] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.774] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.774] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:38.774] |  Relaying remaining futures ... done
[10:49:38.774] value() on list ... done
[10:49:38.774]  - Number of value chunks collected: 2
[10:49:38.774] Resolving 2 futures (chunks) ... DONE
[10:49:38.775] Reducing values from 2 chunks ...
[10:49:38.775]  - Number of values collected after concatenation: 3
[10:49:38.775]  - Number of values expected: 3
[10:49:38.775] Reducing values from 2 chunks ... DONE
[10:49:38.775] future_lapply() ... DONE
[10:49:38.775] future_by_internal() ... DONE
[10:49:38.776] future_by_internal() ...
[10:49:38.776] future_lapply() ...
[10:49:38.777] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.777] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.777] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.778] Number of chunks: 2
[10:49:38.778] getGlobalsAndPackagesXApply() ...
[10:49:38.778]  - future.globals: TRUE
[10:49:38.778] getGlobalsAndPackages() ...
[10:49:38.778] |  Searching for globals ...
[10:49:38.780] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:38.780] |  Searching for globals ... DONE
[10:49:38.780] |  Resolving globals: FALSE
[10:49:38.780] |  Search for packages associated with the globals ...
[10:49:38.780] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.781] |  :  Packages: [1] ‘base’
[10:49:38.781] |  Search for packages associated with the globals ... DONE
[10:49:38.781] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:38.781] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:38.782] |  Packages after dropping 'base': [0] 
[10:49:38.782] |  globals: [1] ‘FUN’
[10:49:38.782] |  packages: [0] 
[10:49:38.782] getGlobalsAndPackages() ... done
[10:49:38.782]  - globals found/used: [n=1] ‘FUN’
[10:49:38.782]  - needed namespaces: [n=0] 
[10:49:38.782] Finding globals ... DONE
[10:49:38.782]  - use_args: TRUE
[10:49:38.783]  - Getting '...' globals ...
[10:49:38.783] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:38.783] |  recursive: 0
[10:49:38.783] |  length: 1
[10:49:38.783] |  elements: ‘...’
[10:49:38.783] |  'obj' is DotDotDotList
[10:49:38.784] |  resolve(obj, ...) ...
[10:49:38.784] |  resolve(obj, ...) ... done
[10:49:38.784] |  length: 0 (resolved future 1)
[10:49:38.784] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:38.784]    - '...' content: [n=0] 
[10:49:38.784] List of 1
[10:49:38.784]  $ ...: list()
[10:49:38.784]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.784]  - attr(*, "where")=List of 1
[10:49:38.784]   ..$ ...:<environment: 0x5564a701b520> 
[10:49:38.784]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.784]  - attr(*, "resolved")= logi TRUE
[10:49:38.784]  - attr(*, "total_size")= num NA
[10:49:38.787]  - Getting '...' globals ... DONE
[10:49:38.788] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:38.788] List of 2
[10:49:38.788]  $ ...future.FUN:function (object, ...)  
[10:49:38.788]  $ ...          : list()
[10:49:38.788]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.788]  - attr(*, "where")=List of 2
[10:49:38.788]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:38.788]   ..$ ...          :<environment: 0x5564a701b520> 
[10:49:38.788]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.788]  - attr(*, "resolved")= logi FALSE
[10:49:38.788]  - attr(*, "total_size")= num 19278
[10:49:38.791] Packages to be attached in all futures: [n=0] 
[10:49:38.791] getGlobalsAndPackagesXApply() ... DONE
[10:49:38.791] Number of futures (= number of chunks): 2
[10:49:38.792] Launching 2 futures (chunks) ...
[10:49:38.792] Chunk #1 of 2 ...
[10:49:38.792]  - Finding globals in 'X' for chunk #1 ...
[10:49:38.792] getGlobalsAndPackages() ...
[10:49:38.792] |  Searching for globals ...
[10:49:38.792] |  :  globals found: [0] 
[10:49:38.793] |  Searching for globals ... DONE
[10:49:38.793] |  globals: [0] <none>
[10:49:38.793] |  packages: [0] <none>
[10:49:38.793] getGlobalsAndPackages() ... done
[10:49:38.793]    + additional globals found: [n=0] 
[10:49:38.793]    + additional namespaces needed: [n=0] 
[10:49:38.793]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:38.793]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.793]  - seeds: <none>
[10:49:38.793]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.794] getGlobalsAndPackages() ...
[10:49:38.794] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.794] |  Resolving globals: FALSE
[10:49:38.794] |  Tweak future expression to call with '...' arguments ...
[10:49:38.794] |  :  {
[10:49:38.794] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.794] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.794] |  :      "# as a global variable                                         "
[10:49:38.794] |  :      do.call(function(...) {
[10:49:38.794] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.794] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.794] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.794] |  :              on.exit(options(oopts), add = TRUE)
[10:49:38.794] |  :          }
[10:49:38.794] |  :          {
[10:49:38.794] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.794] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.794] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:38.794] |  :              })
[10:49:38.794] |  :          }
[10:49:38.794] |  :      }, args = future.call.arguments)
[10:49:38.794] |  :  }
[10:49:38.794] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.795] |  Search for packages associated with the globals ...
[10:49:38.795] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.795] |  :  Packages: [1] ‘base’
[10:49:38.795] |  Search for packages associated with the globals ... DONE
[10:49:38.795] |  Packages after dropping 'base': [0] 
[10:49:38.796] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.796] |  packages: [0] 
[10:49:38.796] getGlobalsAndPackages() ... done
[10:49:38.796] run() for Future (‘Future’) ...
[10:49:38.796] |  state: ‘created’
[10:49:38.796] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.796] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.797] |  Using MulticoreFutureBackend ...
[10:49:38.797] |  :  Launching futures ...
[10:49:38.797] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.797] |  :  .  |  getFutureData() ...
[10:49:38.797] |  :  .  |  :  getFutureCore() ...
[10:49:38.797] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:38.797] |  :  .  |  :  getFutureCore() ... done
[10:49:38.797] |  :  .  |  :  getFutureCapture() ...
[10:49:38.798] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.798] |  :  .  |  :  getFutureContext() ...
[10:49:38.798] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.798] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.798] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.798] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.798] |  :  .  |  :  getFutureContext() ... done
[10:49:38.798] |  :  .  |  getFutureData() ... done
[10:49:38.799] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.799] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.801] |  :  .  |  MulticoreFuture started
[10:49:38.801] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.802] |  :  Launching futures ... done
[10:49:38.802] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.802] |  :  .  |  attachPackages() ...
[10:49:38.802] |  Using MulticoreFutureBackend ... done
[10:49:38.802] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.802] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.802] Created future:
[10:49:38.803] |  :  .  |  attachPackages() ... DONE
[10:49:38.803] |  :  .  |  attachPackages() ...
[10:49:38.803] |  :  .  |  :  packages: [n=0] 
[10:49:38.803] |  :  .  |  attachPackages() ... DONE
[10:49:38.804] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.804] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.804] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.805] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.805] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.805] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.805] |  :  .  |  :  .  |  New stack:
[10:49:38.805] |  :  .  |  :  .  |  List of 1
[10:49:38.805] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.805] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.805] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.805] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.805] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.805] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.805] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.809] |  :  .  |  :  .  |  Old stack:
[10:49:38.809] |  :  .  |  :  .  |  List of 1
[10:49:38.809] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.809] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.809] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.809] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.809] |  :  .  |  :  .  |      ...)  
[10:49:38.809] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.809] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.809] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.809] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.809] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.809] |  :  .  |  :  .  |      ...)  
[10:49:38.809] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.809] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.814] |  :  .  |  :  .  |  Not identical
[10:49:38.814] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.814] readImmediateCondition() ...
[10:49:38.814]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.815]  - Number of RDS files: 0
[10:49:38.815] readImmediateCondition() ... DONE
[10:49:38.802] MulticoreFuture:
[10:49:38.802] Label: ‘future_by-1’
[10:49:38.802] Expression:
[10:49:38.802] {
[10:49:38.802]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.802]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.802]     "# as a global variable                                         "
[10:49:38.802]     do.call(function(...) {
[10:49:38.802]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.802]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.802]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.802]             on.exit(options(oopts), add = TRUE)
[10:49:38.802]         }
[10:49:38.802]         {
[10:49:38.802]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.802]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.802]                 ...future.FUN(...future.X_jj, ...)
[10:49:38.802]             })
[10:49:38.802]         }
[10:49:38.802]     }, args = future.call.arguments)
[10:49:38.802] }
[10:49:38.802] Lazy evaluation: FALSE
[10:49:38.802] Asynchronous evaluation: TRUE
[10:49:38.802] Local evaluation: TRUE
[10:49:38.802] Environment: 0x5564a6ff1580
[10:49:38.802] Capture standard output: TRUE
[10:49:38.802] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.802] Immediate condition classes: ‘immediateCondition’
[10:49:38.802] Globals: 5 objects totaling 1.14 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 736 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.802] Packages: <none>
[10:49:38.802] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.802] Resolved: FALSE
[10:49:38.802] Value: <not collected>
[10:49:38.802] Conditions captured: <none>
[10:49:38.802] Early signaling: FALSE
[10:49:38.802] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.802] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.815] Chunk #1 of 2 ... DONE
[10:49:38.816] Chunk #2 of 2 ...
[10:49:38.816]  - Finding globals in 'X' for chunk #2 ...
[10:49:38.816] getGlobalsAndPackages() ...
[10:49:38.816] |  Searching for globals ...
[10:49:38.817] |  :  globals found: [0] 
[10:49:38.817] |  Searching for globals ... DONE
[10:49:38.817] |  globals: [0] <none>
[10:49:38.817] |  packages: [0] <none>
[10:49:38.817] getGlobalsAndPackages() ... done
[10:49:38.818]    + additional globals found: [n=0] 
[10:49:38.818]    + additional namespaces needed: [n=0] 
[10:49:38.818]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:38.818]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.818]  - seeds: <none>
[10:49:38.818]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.818] getGlobalsAndPackages() ...
[10:49:38.818] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.819] |  Resolving globals: FALSE
[10:49:38.819] |  Tweak future expression to call with '...' arguments ...
[10:49:38.819] |  :  {
[10:49:38.819] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.819] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.819] |  :      "# as a global variable                                         "
[10:49:38.819] |  :      do.call(function(...) {
[10:49:38.819] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.819] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.819] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.819] |  :              on.exit(options(oopts), add = TRUE)
[10:49:38.819] |  :          }
[10:49:38.819] |  :          {
[10:49:38.819] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.819] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.819] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:38.819] |  :              })
[10:49:38.819] |  :          }
[10:49:38.819] |  :      }, args = future.call.arguments)
[10:49:38.819] |  :  }
[10:49:38.819] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.819] |  Search for packages associated with the globals ...
[10:49:38.820] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.814] |  :  .  |  :  .  |  :  List of 2
[10:49:38.814] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.814] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.814] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.814] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.814] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.814] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.814] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.814] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.814] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.814] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.814] |  :  .  |  :  .  |  :      ...)  
[10:49:38.814] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.814] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.814] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.814] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.814] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.814] |  :  .  |  :  .  |  :      ...)  
[10:49:38.814] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.820] |  :  Packages: [1] ‘base’
[10:49:38.820] |  Search for packages associated with the globals ... DONE
[10:49:38.820] |  Packages after dropping 'base': [0] 
[10:49:38.821] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.821] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.821] |  packages: [0] 
[10:49:38.821] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.821] getGlobalsAndPackages() ... done
[10:49:38.821] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.821] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.821] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.821] run() for Future (‘Future’) ...
[10:49:38.821] |  state: ‘created’
[10:49:38.822] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.822] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.822] |  Using MulticoreFutureBackend ...
[10:49:38.821] |  :  .  |  :  .  List of future strategies:
[10:49:38.821] |  :  .  |  :  .  1. sequential:
[10:49:38.821] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.821] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.821] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.822] |  :  Launching futures ...
[10:49:38.822] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.822] |  :  .  |  getFutureData() ...
[10:49:38.822] |  :  .  |  :  getFutureCore() ...
[10:49:38.823] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:38.823] |  :  .  |  :  getFutureCore() ... done
[10:49:38.823] |  :  .  |  :  getFutureCapture() ...
[10:49:38.823] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.823] |  :  .  |  :  getFutureContext() ...
[10:49:38.823] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.823] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.823] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.824] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.824] |  :  .  |  :  getFutureContext() ... done
[10:49:38.824] |  :  .  |  getFutureData() ... done
[10:49:38.824] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.825] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.822] |  :  .  |  :  .  List of 1
[10:49:38.822] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.822] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.822] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.822] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.822] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.822] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.822] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.825] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.825] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.825] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.826] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.826] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.826] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.826] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.826] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.826] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.827] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.827] |  :  .  |  assign_globals() ...
[10:49:38.827] |  :  .  |  MulticoreFuture started
[10:49:38.827] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.828] |  :  Launching futures ... done
[10:49:38.828] |  :  .  |  attachPackages() ...
[10:49:38.828] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.828] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.828] |  Using MulticoreFutureBackend ... done
[10:49:38.828] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.829] |  :  .  |  attachPackages() ... DONE
[10:49:38.829] Created future:
[10:49:38.829] |  :  .  |  attachPackages() ...
[10:49:38.829] |  :  .  |  :  packages: [n=0] 
[10:49:38.829] |  :  .  |  attachPackages() ... DONE
[10:49:38.830] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.831] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.831] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.832] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.832] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.832] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.832] |  :  .  |  :  .  |  New stack:
[10:49:38.827] |  :  .  |  List of 5
[10:49:38.827] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:38.827] |  :  .  |   $ future.call.arguments    : list()
[10:49:38.827] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.827] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:38.827] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.827] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:38.827] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.827] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:38.827] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.827] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.827] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.827] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.827] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.827] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.827] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.827] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.827] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.827] |  :  .  |   - attr(*, "total_size")= num 19278
[10:49:38.827] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.827] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.836] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.836] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.832] |  :  .  |  :  .  |  List of 1
[10:49:38.832] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = F[10:49:38.836] |  :  .  |  - copied ‘...future.elements_ii’ to environment
ALSE, envir = parent.frame())  
[10:49:38.832] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.832] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.832] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.832] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.832] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.832] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.836] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.836] |  :  .  |  :  .  |  Old stack:
[10:49:38.836] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.836] |  :  .  |  assign_globals() ... done
[10:49:38.836] |  :  .  |  :  .  |  List of 1
[10:49:38.836] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.836] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.836] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.836] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.836] |  :  .  |  :  .  |      ...)  
[10:49:38.836] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.836] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.836] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.836] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.836] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.836] |  :  .  |  :  .  |      ...)  
[10:49:38.836] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.836] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.841] |  :  .  |  :  .  |  Not identical
[10:49:38.841] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.841] readImmediateCondition() ...
[10:49:38.842]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.842]  - Number of RDS files: 0
[10:49:38.842] readImmediateCondition() ... DONE
[10:49:38.829] MulticoreFuture:
[10:49:38.829] Label: ‘future_by-2’
[10:49:38.829] Expression:
[10:49:38.829] {
[10:49:38.829]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.829]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.829]     "# as a global variable                                         "
[10:49:38.829]     do.call(function(...) {
[10:49:38.829]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.829]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.829]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.829]             on.exit(options(oopts), add = TRUE)
[10:49:38.829]         }
[10:49:38.829]         {
[10:49:38.829]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.829]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.829]                 ...future.FUN(...future.X_jj, ...)
[10:49:38.829]             })
[10:49:38.829]         }
[10:49:38.829]     }, args = future.call.arguments)
[10:49:38.829] }
[10:49:38.829] Lazy evaluation: FALSE
[10:49:38.829] Asynchronous evaluation: TRUE
[10:49:38.829] Local evaluation: TRUE
[10:49:38.829] Environment: 0x5564a6ff1580
[10:49:38.829] Capture standard output: TRUE
[10:49:38.829] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.829] Immediate condition classes: ‘immediateCondition’
[10:49:38.829] Globals: 5 objects totaling 1.77 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.35 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.829] Packages: <none>
[10:49:38.829] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.829] Resolved: FALSE
[10:49:38.829] Value: <not collected>
[10:49:38.829] Conditions captured: <none>
[10:49:38.829] Early signaling: FALSE
[10:49:38.829] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.829] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.843] Chunk #2 of 2 ... DONE
[10:49:38.843] Launching 2 futures (chunks) ... DONE
[10:49:38.843] Resolving 2 futures (chunks) ...
[10:49:38.844] value() on list ...
[10:49:38.844] |  recursive: 0
[10:49:38.844] |  length: 2
[10:49:38.844] |  
[10:49:38.845] |  Number of remaining objects: 2
[10:49:38.845] |  checking value #1 ...
[10:49:38.845] |  :  'obj' is MulticoreFuture
[10:49:38.845] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.846] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.846] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.847] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.847] |  :  .  |  :  .  |  :  New stack:
[10:49:38.841] |  :  .  |  :  .  |  :  List of 2
[10:49:38.841] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.841] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.841] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.841] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.841] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.841] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.841] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.841] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.841] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.841] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.841] |  :  .  |  :  .  |  :      ...)  
[10:49:38.841] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.841] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.841] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.841] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.841] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.841] |  :  .  |  :  .  |  :      ...)  
[10:49:38.841] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.850] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.850] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.850] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.850] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.850] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.847] |  :  .  |  :  .  |  :  List of 1
[10:49:38.847] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.847] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.847] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.847] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.847] |  :  .  |  :  .  |  :      ...)  
[10:49:38.847] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.847] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.847] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.847] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.847] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.847] |  :  .  |  :  .  |  :      ...)  
[10:49:38.847] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.847] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.850] |  :  .  |  :  .  List of future strategies:
[10:49:38.850] |  :  .  |  :  .  1. sequential:
[10:49:38.850] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.850] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.850] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.851] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.851] |  :  .  |  :  .  List of 1
[10:49:38.851] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.851] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.851] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.851] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.851] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.851] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.851] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.851] |  :  .  |  :  .  |  :  List of 1
[10:49:38.851] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.851] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.851] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.851] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.851] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.851] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.851] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.854] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.854] |  :  .  |  :  .  |  :  Not identical
[10:49:38.854] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.854] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.855] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.855] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.855] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.855] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.855] |  :  readImmediateCondition() ...
[10:49:38.855] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.855] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.856] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.856] |  :   - Number of RDS files: 0
[10:49:38.856] |  :  readImmediateCondition() ... DONE
[10:49:38.856] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.856] |  checking value #1 ... done
[10:49:38.856] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.856] |  checking value #2 ...
[10:49:38.856] |  :  'obj' is MulticoreFuture
[10:49:38.857] |  :  .  |  assign_globals() ...
[10:49:38.855] |  :  .  |  :  .  |  :  .  List of 2
[10:49:38.855] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.855] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.855] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.855] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.855] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.855] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.855] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.855] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.855] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.855] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.855] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.855] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.855] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.855] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.855] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.855] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.855] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.855] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.861] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:38.861] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:38.861] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:38.861] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.862] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:38.862] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.862] |  :  .  |  :  .  |  1. multicore:
[10:49:38.862] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.862] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.862] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.862] |  :  .  |  :  .  |  List of 1
[10:49:38.862] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.862] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.862] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.862] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.862] |  :  .  |  :  .  |      ...)  
[10:49:38.862] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.862] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.862] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.862] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.862] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.862] |  :  .  |  :  .  |      ...)  
[10:49:38.862] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.862] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.867] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.867] |  :  readImmediateCondition() ...
[10:49:38.867] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.867] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.867] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.867] |  :   - Number of RDS files: 0
[10:49:38.867] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.868] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.867] |  :  readImmediateCondition() ... DONE
[10:49:38.868] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:38.868] |  checking value #2 ... done
[10:49:38.868] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.868] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.868] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.857] |  :  .  |  List of 5
[10:49:38.857] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:38.857] |  :  .  |   $ future.call.arguments    : list()
[10:49:38.857] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.857] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:38.857] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.857] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:38.857] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.857] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:38.857] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.857] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:38.857] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.857] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:38.857] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.857] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.857] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.857] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.857] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.857] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.857] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.857] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.857] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.857] |  :  .  |   - attr(*, "total_size")= num 19278
[10:49:38.857] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.857] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.875] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.875] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.875] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.875] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.876] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.876] |  :  .  |  assign_globals() ... done
[10:49:38.878] |  Number of remaining objects: 2
[10:49:38.878] |  checking value #1 ...
[10:49:38.878] |  :  'obj' is MulticoreFuture
[10:49:38.879] |  :  readImmediateCondition() ...
[10:49:38.879] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.879] |  :   - Number of RDS files: 0
[10:49:38.879] |  :  readImmediateCondition() ... DONE
[10:49:38.880] |  :  MulticoreFuture #1
[10:49:38.880] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:38.880] |  :  .  nx: 2
[10:49:38.880] |  :  .  relay: TRUE
[10:49:38.880] |  :  .  stdout: TRUE
[10:49:38.881] |  :  .  signal: TRUE
[10:49:38.881] |  :  .  resignal: FALSE
[10:49:38.881] |  :  .  force: TRUE
[10:49:38.881] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:38.881] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:38.881] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.881] |  :  .  until=1
[10:49:38.882] |  :  .  relaying element #1
[10:49:38.882] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.882] |  :  .  result() for MulticoreFuture ...
[10:49:38.882] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.882] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.882] |  :  .  |  :  .  |  :  New stack:
[10:49:38.883] |  :  .  |  readImmediateCondition() ...
[10:49:38.883] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.883] |  :  .  |   - Number of RDS files: 0
[10:49:38.883] |  :  .  |  readImmediateCondition() ... DONE
[10:49:38.884] |  :  .  |  result() for MulticoreFuture ...
[10:49:38.884] |  :  .  |  result() for MulticoreFuture ... done
[10:49:38.884] |  :  .  result() for MulticoreFuture ... done
[10:49:38.884] |  :  .  result() for MulticoreFuture ...
[10:49:38.885] |  :  .  result() for MulticoreFuture ... done
[10:49:38.885] |  :  .  result() for MulticoreFuture ...
[10:49:38.885] |  :  .  result() for MulticoreFuture ... done
[10:49:38.885] |  :  .  result() for MulticoreFuture ...
[10:49:38.886] |  :  .  result() for MulticoreFuture ... done
[10:49:38.886] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.886] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.886] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:38.886] |  :  value(<MulticoreFuture>, ...) ...
[10:49:38.887] |  :  .  result() for MulticoreFuture ...
[10:49:38.887] |  :  .  result() for MulticoreFuture ... done
[10:49:38.887] |  :  .  result() for MulticoreFuture ...
[10:49:38.887] |  :  .  result() for MulticoreFuture ... done
[10:49:38.888] |  :  .  value: <list>
[10:49:38.888] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:38.888] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:38.888] |  :  .  nx: 2
[10:49:38.888] |  :  .  relay: TRUE
[10:49:38.888] |  :  .  stdout: TRUE
[10:49:38.889] |  :  .  signal: TRUE
[10:49:38.889] |  :  .  resignal: FALSE
[10:49:38.889] |  :  .  force: TRUE
[10:49:38.889] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.889] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.890] |  :  .  until=2
[10:49:38.883] |  :  .  |  :  .  |  :  List of 1
[10:49:38.883] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.883] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.883] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.883] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.883] |  :  .  |  :  .  |  :      ...)  
[10:49:38.883] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.883] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.883] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.883] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.883] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.883] |  :  .  |  :  .  |  :      ...)  
[10:49:38.883] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.883] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.890] |  :  .  relaying element #2
[10:49:38.890] |  :  .  |  :  .  |  :  Old stack:
[10:49:38.890] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.890] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.890] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:38.891] |  :  length: 1 (resolved future 1)
[10:49:38.891] |  checking value #1 ... done
[10:49:38.891] |  checking value #2 ...
[10:49:38.891] |  :  'obj' is MulticoreFuture
[10:49:38.890] |  :  .  |  :  .  |  :  List of 1
[10:49:38.890] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.890] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.890] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.890] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.890] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.890] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.890] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.894] |  :  .  |  :  .  |  :  Not identical
[10:49:38.894] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.894] |  :  .  |  :  .  |  :  .  List of 2
[10:49:38.894] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.894] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.894] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.894] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.894] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.894] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.894] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.894] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:38.894] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.894] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.894] |  :  .  |  :  .  |  :  .      ...)  
[10:49:38.894] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.894] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.894] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.894] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.894] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.894] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.894] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.901] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:38.901] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:38.901] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:38.901] |  :  readImmediateCondition() ...
[10:49:38.902] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.902] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:38.902] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:38.902] |  :   - Number of RDS files: 0
[10:49:38.902] |  :  readImmediateCondition() ... DONE
[10:49:38.902] |  checking value #2 ... done
[10:49:38.902] |  :  .  |  :  .  |  List of future strategies:
[10:49:38.902] |  :  .  |  :  .  |  1. multicore:
[10:49:38.902] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:38.902] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:38.902] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:38.903] |  :  .  |  :  .  |  List of 1
[10:49:38.903] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.903] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.903] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.903] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.903] |  :  .  |  :  .  |      ...)  
[10:49:38.903] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.903] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.903] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.903] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.903] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.903] |  :  .  |  :  .  |      ...)  
[10:49:38.903] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.903] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.907] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.907] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.908] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.908] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.908] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.908] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:38.908] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.909] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.909] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.913] |  Number of remaining objects: 1
[10:49:38.913] |  checking value #2 ...
[10:49:38.913] |  :  'obj' is MulticoreFuture
[10:49:38.913] |  :  readImmediateCondition() ...
[10:49:38.913] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.913] |  :   - Number of RDS files: 0
[10:49:38.913] |  :  readImmediateCondition() ... DONE
[10:49:38.914] |  :  MulticoreFuture #2
[10:49:38.914] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:38.914] |  :  .  nx: 2
[10:49:38.914] |  :  .  relay: TRUE
[10:49:38.914] |  :  .  stdout: TRUE
[10:49:38.914] |  :  .  signal: TRUE
[10:49:38.914] |  :  .  resignal: FALSE
[10:49:38.914] |  :  .  force: TRUE
[10:49:38.914] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:38.914] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:38.915] |  :  .  until=2
[10:49:38.915] |  :  .  relaying element #2
[10:49:38.915] |  :  .  result() for MulticoreFuture ...
[10:49:38.915] |  :  .  |  readImmediateCondition() ...
[10:49:38.915] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.916] |  :  .  |   - Number of RDS files: 0
[10:49:38.916] |  :  .  |  readImmediateCondition() ... DONE
[10:49:38.916] |  :  .  |  result() for MulticoreFuture ...
[10:49:38.916] |  :  .  |  result() for MulticoreFuture ... done
[10:49:38.916] |  :  .  result() for MulticoreFuture ... done
[10:49:38.917] |  :  .  result() for MulticoreFuture ...
[10:49:38.917] |  :  .  result() for MulticoreFuture ... done
[10:49:38.917] |  :  .  result() for MulticoreFuture ...
[10:49:38.917] |  :  .  result() for MulticoreFuture ... done
[10:49:38.917] |  :  .  result() for MulticoreFuture ...
[10:49:38.918] |  :  .  result() for MulticoreFuture ... done
[10:49:38.918] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.918] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.918] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:38.918] |  :  value(<MulticoreFuture>, ...) ...
[10:49:38.918] |  :  .  result() for MulticoreFuture ...
[10:49:38.919] |  :  .  result() for MulticoreFuture ... done
[10:49:38.919] |  :  .  result() for MulticoreFuture ...
[10:49:38.919] |  :  .  result() for MulticoreFuture ... done
[10:49:38.919] |  :  .  value: <list>
[10:49:38.919] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:38.919] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:38.920] |  :  .  nx: 2
[10:49:38.920] |  :  .  relay: TRUE
[10:49:38.920] |  :  .  stdout: TRUE
[10:49:38.920] |  :  .  signal: TRUE
[10:49:38.920] |  :  .  resignal: FALSE
[10:49:38.920] |  :  .  force: TRUE
[10:49:38.920] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.921] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.921] |  :  .  until=2
[10:49:38.921] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.921] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.921] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:38.921] |  :  length: 0 (resolved future 2)
[10:49:38.922] |  checking value #2 ... done
[10:49:38.922] |  Relaying remaining futures ...
[10:49:38.922] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:38.922] |  :  .  nx: 2
[10:49:38.922] |  :  .  relay: TRUE
[10:49:38.922] |  :  .  stdout: TRUE
[10:49:38.922] |  :  .  signal: TRUE
[10:49:38.922] |  :  .  resignal: FALSE
[10:49:38.923] |  :  .  force: TRUE
[10:49:38.923] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.923] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:38.923] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:38.923] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:38.923] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:38.923] |  Relaying remaining futures ... done
[10:49:38.923] value() on list ... done
[10:49:38.923]  - Number of value chunks collected: 2
[10:49:38.927] Resolving 2 futures (chunks) ... DONE
[10:49:38.927] Reducing values from 2 chunks ...
[10:49:38.927]  - Number of values collected after concatenation: 3
[10:49:38.927]  - Number of values expected: 3
[10:49:38.928] Reducing values from 2 chunks ... DONE
[10:49:38.928] future_lapply() ... DONE
[10:49:38.928] future_by_internal() ... DONE
[10:49:38.929] future_by_internal() ...
Warning in future_by_match_FUN(FUN) :
  Specifying the function 'FUN' for future_by() as a character string is deprecated in future.apply (>= 1.10.0) [2022-11-04], because base::by() does not support it. Instead, specify it as a function, e.g. FUN = sqrt and FUN = `[[`. It is deprecated.
[10:49:38.930] future_lapply() ...
[10:49:38.930] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.931] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.931] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.931] Number of chunks: 2
[10:49:38.931] getGlobalsAndPackagesXApply() ...
[10:49:38.931]  - future.globals: TRUE
[10:49:38.932] getGlobalsAndPackages() ...
[10:49:38.932] |  Searching for globals ...
[10:49:38.933] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:38.933] |  Searching for globals ... DONE
[10:49:38.933] |  Resolving globals: FALSE
[10:49:38.933] |  Search for packages associated with the globals ...
[10:49:38.934] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.934] |  :  Packages: [1] ‘base’
[10:49:38.934] |  Search for packages associated with the globals ... DONE
[10:49:38.934] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:38.935] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:38.935] |  Packages after dropping 'base': [0] 
[10:49:38.935] |  globals: [1] ‘FUN’
[10:49:38.935] |  packages: [0] 
[10:49:38.935] getGlobalsAndPackages() ... done
[10:49:38.935]  - globals found/used: [n=1] ‘FUN’
[10:49:38.935]  - needed namespaces: [n=0] 
[10:49:38.936] Finding globals ... DONE
[10:49:38.936]  - use_args: TRUE
[10:49:38.936]  - Getting '...' globals ...
[10:49:38.936] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:38.936] |  recursive: 0
[10:49:38.937] |  length: 1
[10:49:38.937] |  elements: ‘...’
[10:49:38.937] |  'obj' is DotDotDotList
[10:49:38.937] |  resolve(obj, ...) ...
[10:49:38.937] |  resolve(obj, ...) ... done
[10:49:38.937] |  length: 0 (resolved future 1)
[10:49:38.937] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:38.937]    - '...' content: [n=0] 
[10:49:38.937] List of 1
[10:49:38.937]  $ ...: list()
[10:49:38.937]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.937]  - attr(*, "where")=List of 1
[10:49:38.937]   ..$ ...:<environment: 0x5564a688a810> 
[10:49:38.937]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.937]  - attr(*, "resolved")= logi TRUE
[10:49:38.937]  - attr(*, "total_size")= num NA
[10:49:38.940]  - Getting '...' globals ... DONE
[10:49:38.941] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:38.941] List of 2
[10:49:38.941]  $ ...future.FUN:function (object, ...)  
[10:49:38.941]  $ ...          : list()
[10:49:38.941]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.941]  - attr(*, "where")=List of 2
[10:49:38.941]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:38.941]   ..$ ...          :<environment: 0x5564a688a810> 
[10:49:38.941]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.941]  - attr(*, "resolved")= logi FALSE
[10:49:38.941]  - attr(*, "total_size")= num 18647
[10:49:38.944] Packages to be attached in all futures: [n=0] 
[10:49:38.944] getGlobalsAndPackagesXApply() ... DONE
[10:49:38.945] Number of futures (= number of chunks): 2
[10:49:38.945] Launching 2 futures (chunks) ...
[10:49:38.945] Chunk #1 of 2 ...
[10:49:38.945]  - Finding globals in 'X' for chunk #1 ...
[10:49:38.945] getGlobalsAndPackages() ...
[10:49:38.945] |  Searching for globals ...
[10:49:38.946] |  :  globals found: [0] 
[10:49:38.946] |  Searching for globals ... DONE
[10:49:38.946] |  globals: [0] <none>
[10:49:38.946] |  packages: [0] <none>
[10:49:38.946] getGlobalsAndPackages() ... done
[10:49:38.946]    + additional globals found: [n=0] 
[10:49:38.946]    + additional namespaces needed: [n=0] 
[10:49:38.946]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:38.947]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.947]  - seeds: <none>
[10:49:38.947]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.947] getGlobalsAndPackages() ...
[10:49:38.947] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.947] |  Resolving globals: FALSE
[10:49:38.947] |  Tweak future expression to call with '...' arguments ...
[10:49:38.947] |  :  {
[10:49:38.947] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.947] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.947] |  :      "# as a global variable                                         "
[10:49:38.947] |  :      do.call(function(...) {
[10:49:38.947] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.947] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.947] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.947] |  :              on.exit(options(oopts), add = TRUE)
[10:49:38.947] |  :          }
[10:49:38.947] |  :          {
[10:49:38.947] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.947] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.947] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:38.947] |  :              })
[10:49:38.947] |  :          }
[10:49:38.947] |  :      }, args = future.call.arguments)
[10:49:38.947] |  :  }
[10:49:38.948] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.948] |  Search for packages associated with the globals ...
[10:49:38.948] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.948] |  :  Packages: [1] ‘base’
[10:49:38.949] |  Search for packages associated with the globals ... DONE
[10:49:38.949] |  Packages after dropping 'base': [0] 
[10:49:38.949] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.949] |  packages: [0] 
[10:49:38.949] getGlobalsAndPackages() ... done
[10:49:38.949] run() for Future (‘Future’) ...
[10:49:38.949] |  state: ‘created’
[10:49:38.950] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.950] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.950] |  Using MulticoreFutureBackend ...
[10:49:38.950] |  :  Launching futures ...
[10:49:38.950] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.950] |  :  .  |  getFutureData() ...
[10:49:38.950] |  :  .  |  :  getFutureCore() ...
[10:49:38.951] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:38.951] |  :  .  |  :  getFutureCore() ... done
[10:49:38.951] |  :  .  |  :  getFutureCapture() ...
[10:49:38.951] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.951] |  :  .  |  :  getFutureContext() ...
[10:49:38.951] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.951] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.951] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.952] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.952] |  :  .  |  :  getFutureContext() ... done
[10:49:38.952] |  :  .  |  getFutureData() ... done
[10:49:38.952] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.952] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.955] |  :  .  |  MulticoreFuture started
[10:49:38.955] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.955] |  :  Launching futures ... done
[10:49:38.955] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.955] |  :  .  |  attachPackages() ...
[10:49:38.956] |  Using MulticoreFutureBackend ... done
[10:49:38.956] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.956] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.956] Created future:
[10:49:38.956] |  :  .  |  attachPackages() ... DONE
[10:49:38.956] |  :  .  |  attachPackages() ...
[10:49:38.956] |  :  .  |  :  packages: [n=0] 
[10:49:38.957] |  :  .  |  attachPackages() ... DONE
[10:49:38.957] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.958] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.958] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.958] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.959] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.959] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.959] |  :  .  |  :  .  |  New stack:
[10:49:38.959] |  :  .  |  :  .  |  List of 1
[10:49:38.959] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.959] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.959] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.959] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.959] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.959] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.959] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.964] |  :  .  |  :  .  |  Old stack:
[10:49:38.964] |  :  .  |  :  .  |  List of 1
[10:49:38.964] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.964] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.964] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.964] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.964] |  :  .  |  :  .  |      ...)  
[10:49:38.964] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.964] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.964] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.964] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.964] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.964] |  :  .  |  :  .  |      ...)  
[10:49:38.964] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.964] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.968] |  :  .  |  :  .  |  Not identical
[10:49:38.968] readImmediateCondition() ...
[10:49:38.968] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.968]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.969]  - Number of RDS files: 0
[10:49:38.969] readImmediateCondition() ... DONE
[10:49:38.956] MulticoreFuture:
[10:49:38.956] Label: ‘future_by-1’
[10:49:38.956] Expression:
[10:49:38.956] {
[10:49:38.956]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.956]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.956]     "# as a global variable                                         "
[10:49:38.956]     do.call(function(...) {
[10:49:38.956]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.956]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.956]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.956]             on.exit(options(oopts), add = TRUE)
[10:49:38.956]         }
[10:49:38.956]         {
[10:49:38.956]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.956]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.956]                 ...future.FUN(...future.X_jj, ...)
[10:49:38.956]             })
[10:49:38.956]         }
[10:49:38.956]     }, args = future.call.arguments)
[10:49:38.956] }
[10:49:38.956] Lazy evaluation: FALSE
[10:49:38.956] Asynchronous evaluation: TRUE
[10:49:38.956] Local evaluation: TRUE
[10:49:38.956] Environment: 0x5564a68c31b8
[10:49:38.956] Capture standard output: TRUE
[10:49:38.956] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.956] Immediate condition classes: ‘immediateCondition’
[10:49:38.956] Globals: 5 objects totaling 1.14 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 736 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.956] Packages: <none>
[10:49:38.956] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.956] Resolved: FALSE
[10:49:38.956] Value: <not collected>
[10:49:38.956] Conditions captured: <none>
[10:49:38.956] Early signaling: FALSE
[10:49:38.956] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.956] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.970] Chunk #1 of 2 ... DONE
[10:49:38.970] Chunk #2 of 2 ...
[10:49:38.970]  - Finding globals in 'X' for chunk #2 ...
[10:49:38.970] getGlobalsAndPackages() ...
[10:49:38.970] |  Searching for globals ...
[10:49:38.971] |  :  globals found: [0] 
[10:49:38.971] |  Searching for globals ... DONE
[10:49:38.972] |  globals: [0] <none>
[10:49:38.972] |  packages: [0] <none>
[10:49:38.972] getGlobalsAndPackages() ... done
[10:49:38.972]    + additional globals found: [n=0] 
[10:49:38.972]    + additional namespaces needed: [n=0] 
[10:49:38.972]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:38.973]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:38.973]  - seeds: <none>
[10:49:38.973]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.973] getGlobalsAndPackages() ...
[10:49:38.973] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.973] |  Resolving globals: FALSE
[10:49:38.973] |  Tweak future expression to call with '...' arguments ...
[10:49:38.974] |  :  {
[10:49:38.974] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.974] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:38.974] |  :      "# as a global variable                                         "
[10:49:38.974] |  :      do.call(function(...) {
[10:49:38.974] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.974] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.974] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.974] |  :              on.exit(options(oopts), add = TRUE)
[10:49:38.974] |  :          }
[10:49:38.974] |  :          {
[10:49:38.974] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.974] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.974] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:38.974] |  :              })
[10:49:38.974] |  :          }
[10:49:38.974] |  :      }, args = future.call.arguments)
[10:49:38.974] |  :  }
[10:49:38.974] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:38.974] |  Search for packages associated with the globals ...
[10:49:38.974] |  :  Packages associated with globals: [1] ‘base’
[10:49:38.969] |  :  .  |  :  .  |  :  List of 2
[10:49:38.969] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.969] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.969] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.969] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.969] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.969] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.969] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.969] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.969] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.969] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.969] |  :  .  |  :  .  |  :      ...)  
[10:49:38.969] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.969] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.969] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.969] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.969] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.969] |  :  .  |  :  .  |  :      ...)  
[10:49:38.969] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.975] |  :  Packages: [1] ‘base’
[10:49:38.975] |  Search for packages associated with the globals ... DONE
[10:49:38.975] |  Packages after dropping 'base': [0] 
[10:49:38.975] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:38.975] |  packages: [0] 
[10:49:38.976] getGlobalsAndPackages() ... done
[10:49:38.976] |  :  .  |  :  .  |  :  Formals differ
[10:49:38.976] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:38.976] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:38.976] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:38.976] run() for Future (‘Future’) ...
[10:49:38.976] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:38.976] |  state: ‘created’
[10:49:38.976] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.977] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.977] |  Using MulticoreFutureBackend ...
[10:49:38.977] |  :  Launching futures ...
[10:49:38.976] |  :  .  |  :  .  List of future strategies:
[10:49:38.976] |  :  .  |  :  .  1. sequential:
[10:49:38.976] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:38.976] |  :  .  |  :  .     - tweaked: FALSE
[10:49:38.976] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.977] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.977] |  :  .  |  getFutureData() ...
[10:49:38.977] |  :  .  |  :  getFutureCore() ...
[10:49:38.977] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:38.977] |  :  .  |  :  getFutureCore() ... done
[10:49:38.978] |  :  .  |  :  getFutureCapture() ...
[10:49:38.978] |  :  .  |  :  getFutureCapture() ... done
[10:49:38.978] |  :  .  |  :  getFutureContext() ...
[10:49:38.978] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.978] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:38.978] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.978] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:38.979] |  :  .  |  :  getFutureContext() ... done
[10:49:38.979] |  :  .  |  getFutureData() ... done
[10:49:38.979] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.980] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:38.977] |  :  .  |  :  .  List of 1
[10:49:38.977] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.977] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.977] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.977] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.977] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.977] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.977] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.980] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:38.980] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:38.981] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.981] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:38.981] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.981] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:38.981] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:38.981] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:38.982] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:38.982] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:38.982] |  :  .  |  assign_globals() ...
[10:49:38.982] |  :  .  |  MulticoreFuture started
[10:49:38.983] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:38.983] |  :  Launching futures ... done
[10:49:38.983] |  :  .  |  attachPackages() ...
[10:49:38.983] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.983] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:38.984] |  Using MulticoreFutureBackend ... done
[10:49:38.984] run() for Future (‘MulticoreFuture’) ... done
[10:49:38.984] |  :  .  |  attachPackages() ... DONE
[10:49:38.984] Created future:
[10:49:38.984] |  :  .  |  attachPackages() ...
[10:49:38.984] |  :  .  |  :  packages: [n=0] 
[10:49:38.985] |  :  .  |  attachPackages() ... DONE
[10:49:38.986] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:38.986] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:38.986] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:38.987] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.987] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.988] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:38.988] |  :  .  |  :  .  |  New stack:
[10:49:38.982] |  :  .  |  List of 5
[10:49:38.982] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:38.982] |  :  .  |   $ future.call.arguments    : list()
[10:49:38.982] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:38.982] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:38.982] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:38.982] |  :  .  |    .. ..$ breaks : num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:38.982] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:38.982] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:38.982] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:38.982] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:38.982] |  :  .  |   - attr(*, "where")=List of 5
[10:49:38.982] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:38.982] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:38.982] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:38.982] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:38.982] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:38.982] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:38.982] |  :  .  |   - attr(*, "total_size")= num 18647
[10:49:38.982] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:38.982] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:38.991] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:38.991] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:38.991] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:38.991] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:38.988] |  :  .  |  :  .  |  List of 1
[10:49:38.988] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.988] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.988] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.988] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.988] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.988] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.988] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.992] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:38.992] |  :  .  |  assign_globals() ... done
[10:49:38.992] |  :  .  |  :  .  |  Old stack:
[10:49:38.996] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.996] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:38.996] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:38.996] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:38.992] |  :  .  |  :  .  |  List of 1
[10:49:38.992] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.992] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.992] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.992] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.992] |  :  .  |  :  .  |      ...)  
[10:49:38.992] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.992] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.992] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:38.992] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.992] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.992] |  :  .  |  :  .  |      ...)  
[10:49:38.992] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.992] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:38.996] |  :  .  |  :  .  |  :  New stack:
[10:49:38.996] |  :  .  |  :  .  |  Not identical
[10:49:38.997] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:38.997] readImmediateCondition() ...
[10:49:38.997]   - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:38.998]  - Number of RDS files: 0
[10:49:38.998] readImmediateCondition() ... DONE
[10:49:38.984] MulticoreFuture:
[10:49:38.984] Label: ‘future_by-2’
[10:49:38.984] Expression:
[10:49:38.984] {
[10:49:38.984]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:38.984]     "# expression in do.call(), because function called uses '...'  "
[10:49:38.984]     "# as a global variable                                         "
[10:49:38.984]     do.call(function(...) {
[10:49:38.984]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:38.984]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:38.984]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:38.984]             on.exit(options(oopts), add = TRUE)
[10:49:38.984]         }
[10:49:38.984]         {
[10:49:38.984]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:38.984]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:38.984]                 ...future.FUN(...future.X_jj, ...)
[10:49:38.984]             })
[10:49:38.984]         }
[10:49:38.984]     }, args = future.call.arguments)
[10:49:38.984] }
[10:49:38.984] Lazy evaluation: FALSE
[10:49:38.984] Asynchronous evaluation: TRUE
[10:49:38.984] Local evaluation: TRUE
[10:49:38.984] Environment: 0x5564a68c31b8
[10:49:38.984] Capture standard output: TRUE
[10:49:38.984] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:38.984] Immediate condition classes: ‘immediateCondition’
[10:49:38.984] Globals: 5 objects totaling 1.77 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.35 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:38.984] Packages: <none>
[10:49:38.984] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:38.984] Resolved: FALSE
[10:49:38.984] Value: <not collected>
[10:49:38.984] Conditions captured: <none>
[10:49:38.984] Early signaling: FALSE
[10:49:38.984] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:38.984] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:38.999] Chunk #2 of 2 ... DONE
[10:49:38.999] Launching 2 futures (chunks) ... DONE
[10:49:38.999] Resolving 2 futures (chunks) ...
[10:49:38.999] value() on list ...
[10:49:39.000] |  recursive: 0
[10:49:39.000] |  length: 2
[10:49:39.000] |  
[10:49:39.000] |  Number of remaining objects: 2
[10:49:39.000] |  checking value #1 ...
[10:49:39.001] |  :  'obj' is MulticoreFuture
[10:49:38.997] |  :  .  |  :  .  |  :  List of 1
[10:49:38.997] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.997] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.997] |  :  .  |  :  .  |  :      ...)  
[10:49:38.997] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.997] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.997] |  :  .  |  :  .  |  :      ...)  
[10:49:38.997] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.997] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:39.001] |  :  .  |  :  .  |  :  Old stack:
[10:49:39.001] |  :  .  |  :  .  |  :  List of 1
[10:49:39.001] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:39.001] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:39.001] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:39.001] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:39.001] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:39.001] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:39.001] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:39.004] |  :  .  |  :  .  |  :  Not identical
[10:49:39.004] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:38.997] |  :  .  |  :  .  |  :  List of 2
[10:49:38.997] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:38.997] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:38.997] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:38.997] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.997] |  :  .  |  :  .  |  :      ...)  
[10:49:38.997] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:38.997] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:38.997] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:38.997] |  :  .  |  :  .  |  :      ...)  
[10:49:38.997] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.005] |  :  .  |  :  .  |  :  Formals differ
[10:49:39.005] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:39.005] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:39.005] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:39.006] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:39.006] |  :  .  |  :  .  List of future strategies:
[10:49:39.006] |  :  .  |  :  .  1. sequential:
[10:49:39.006] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:39.006] |  :  .  |  :  .     - tweaked: FALSE
[10:49:39.006] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:39.006] |  :  .  |  :  .  List of 1
[10:49:39.006] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:39.006] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:39.006] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:39.006] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:39.006] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:39.006] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:39.006] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:39.010] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:39.004] |  :  .  |  :  .  |  :  .  List of 2
[10:49:39.004] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:39.004] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:39.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:39.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.004] |  :  .  |  :  .  |  :  .      ...)  
[10:49:39.004] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:39.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:39.004] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.004] |  :  .  |  :  .  |  :  .      ...)  
[10:49:39.004] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.004] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:39.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:39.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:39.004] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:39.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:39.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:39.010] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:39.010] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.010] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:39.010] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:39.010] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.011] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:39.011] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:39.011] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:39.011] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:39.011] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:39.011] |  :  readImmediateCondition() ...
[10:49:39.011] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:39.011] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:39.011] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:39.011] |  :  .  |  :  .  |  List of future strategies:
[10:49:39.011] |  :  .  |  :  .  |  1. multicore:
[10:49:39.011] [10:49:39.011] |  :   - Number of RDS files: 0
|  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:39.011] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:39.011] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:39.011] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:39.012] |  :  readImmediateCondition() ... DONE
[10:49:39.012] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:39.012] |  checking value #1 ... done
[10:49:39.012] |  checking value #2 ...
[10:49:39.012] |  :  .  |  assign_globals() ...
[10:49:39.012] |  :  'obj' is MulticoreFuture
[10:49:39.012] |  :  .  |  :  .  |  List of 1
[10:49:39.012] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:39.012] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:39.012] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:39.012] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.012] |  :  .  |  :  .  |      ...)  
[10:49:39.012] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.012] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.012] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:39.012] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:39.012] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.012] |  :  .  |  :  .  |      ...)  
[10:49:39.012] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.012] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:39.016] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:39.016] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:39.016] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.016] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:39.016] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.017] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:39.017] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:39.017] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:39.017] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:39.023] |  :  readImmediateCondition() ...
[10:49:39.023] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:39.023] |  :   - Number of RDS files: 0
[10:49:39.023] |  :  readImmediateCondition() ... DONE
[10:49:39.023] |  checking value #2 ... done
[10:49:39.012] |  :  .  |  List of 5
[10:49:39.012] |  :  .  |   $ ...future.FUN            :function (object, ...)  
[10:49:39.012] |  :  .  |   $ future.call.arguments    : list()
[10:49:39.012] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:39.012] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:39.012] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:39.012] |  :  .  |    .. ..$ breaks : num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:39.012] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:39.012] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 2 2 2 2 2 2 2 2 2 2 ...
[10:49:39.012] |  :  .  |    ..$ :'data.frame':	18 obs. of  3 variables:
[10:49:39.012] |  :  .  |    .. ..$ breaks : num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:39.012] |  :  .  |    .. ..$ wool   : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:39.012] |  :  .  |    .. ..$ tension: Factor w/ 3 levels "L","M","H": 3 3 3 3 3 3 3 3 3 3 ...
[10:49:39.012] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:39.012] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:49:39.012] |  :  .  |   - attr(*, "where")=List of 5
[10:49:39.012] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:39.012] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:39.012] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:39.012] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:39.012] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:39.012] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:39.012] |  :  .  |   - attr(*, "total_size")= num 18647
[10:49:39.012] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:39.012] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:39.024] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:39.024] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:39.024] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:39.024] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:39.024] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:39.024] |  :  .  |  assign_globals() ... done
[10:49:39.029] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:39.029] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:39.029] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:39.030] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:39.030] |  :  .  |  :  .  |  :  New stack:
[10:49:39.034] |  Number of remaining objects: 2
[10:49:39.034] |  checking value #1 ...
[10:49:39.030] |  :  .  |  :  .  |  :  List of 1
[10:49:39.030] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:39.030] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:39.030] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:39.030] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.030] |  :  .  |  :  .  |  :      ...)  
[10:49:39.030] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.030] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.030] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:39.030] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:39.030] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.030] |  :  .  |  :  .  |  :      ...)  
[10:49:39.030] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.030] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:39.034] |  :  'obj' is MulticoreFuture
[10:49:39.034] |  :  .  |  :  .  |  :  Old stack:
[10:49:39.034] |  :  readImmediateCondition() ...
[10:49:39.035] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:39.035] |  :   - Number of RDS files: 0
[10:49:39.035] |  :  readImmediateCondition() ... DONE
[10:49:39.035] |  :  MulticoreFuture #1
[10:49:39.035] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:39.036] |  :  .  nx: 2
[10:49:39.036] |  :  .  relay: TRUE
[10:49:39.036] |  :  .  stdout: TRUE
[10:49:39.036] |  :  .  signal: TRUE
[10:49:39.036] |  :  .  resignal: FALSE
[10:49:39.036] |  :  .  force: TRUE
[10:49:39.037] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:39.037] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:39.037] |  :  .  until=1
[10:49:39.037] |  :  .  relaying element #1
[10:49:39.037] |  :  .  result() for MulticoreFuture ...
[10:49:39.038] |  :  .  |  readImmediateCondition() ...
[10:49:39.039] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:39.039] |  :  .  |   - Number of RDS files: 0
[10:49:39.034] |  :  .  |  :  .  |  :  List of 1
[10:49:39.034] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:39.034] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:39.034] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:39.034] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:39.034] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:39.034] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:39.034] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:39.039] |  :  .  |  readImmediateCondition() ... DONE
[10:49:39.039] |  :  .  |  :  .  |  :  Not identical
[10:49:39.039] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:39.040] |  :  .  |  result() for MulticoreFuture ...
[10:49:39.040] |  :  .  |  result() for MulticoreFuture ... done
[10:49:39.040] |  :  .  result() for MulticoreFuture ... done
[10:49:39.040] |  :  .  result() for MulticoreFuture ...
[10:49:39.040] |  :  .  result() for MulticoreFuture ... done
[10:49:39.041] |  :  .  result() for MulticoreFuture ...
[10:49:39.041] |  :  .  result() for MulticoreFuture ... done
[10:49:39.041] |  :  .  result() for MulticoreFuture ...
[10:49:39.041] |  :  .  result() for MulticoreFuture ... done
[10:49:39.042] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:39.042] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:39.042] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:39.042] |  :  value(<MulticoreFuture>, ...) ...
[10:49:39.042] |  :  .  result() for MulticoreFuture ...
[10:49:39.043] |  :  .  result() for MulticoreFuture ... done
[10:49:39.043] |  :  .  result() for MulticoreFuture ...
[10:49:39.043] |  :  .  result() for MulticoreFuture ... done
[10:49:39.043] |  :  .  value: <list>
[10:49:39.043] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:39.044] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:39.044] |  :  .  nx: 2
[10:49:39.044] |  :  .  relay: TRUE
[10:49:39.044] |  :  .  stdout: TRUE
[10:49:39.044] |  :  .  signal: TRUE
[10:49:39.044] |  :  .  resignal: FALSE
[10:49:39.044] |  :  .  force: TRUE
[10:49:39.044] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:39.045] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:39.045] |  :  .  until=2
[10:49:39.045] |  :  .  relaying element #2
[10:49:39.045] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:39.045] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:39.045] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:39.045] |  :  length: 1 (resolved future 1)
[10:49:39.045] |  checking value #1 ... done
[10:49:39.046] |  checking value #2 ...
[10:49:39.046] |  :  'obj' is MulticoreFuture
[10:49:39.040] |  :  .  |  :  .  |  :  .  List of 2
[10:49:39.040] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:39.040] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:39.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:39.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.040] |  :  .  |  :  .  |  :  .      ...)  
[10:49:39.040] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:39.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:39.040] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.040] |  :  .  |  :  .  |  :  .      ...)  
[10:49:39.040] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.040] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:39.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:39.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:39.040] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:39.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:39.040] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:39.048] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:39.048] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:39.049] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:39.049] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:39.049] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:39.049] |  :  .  |  :  .  |  List of future strategies:
[10:49:39.049] |  :  .  |  :  .  |  1. multicore:
[10:49:39.049] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:39.049] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:39.049] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:39.050] |  :  .  |  :  .  |  List of 1
[10:49:39.050] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:39.050] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:39.050] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:39.050] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.050] |  :  .  |  :  .  |      ...)  
[10:49:39.050] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.050] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.050] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:39.050] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:39.050] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.050] |  :  .  |  :  .  |      ...)  
[10:49:39.050] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.050] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:39.054] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:39.055] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:39.055] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.055] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:39.055] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.056] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:39.056] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:39.056] |  :  readImmediateCondition() ...
[10:49:39.056] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:39.056] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:39.056] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:39.056] |  :   - Number of RDS files: 0
[10:49:39.056] |  :  readImmediateCondition() ... DONE
[10:49:39.057] |  checking value #2 ... done
[10:49:39.067] |  Number of remaining objects: 1
[10:49:39.067] |  checking value #2 ...
[10:49:39.067] |  :  'obj' is MulticoreFuture
[10:49:39.067] |  :  readImmediateCondition() ...
[10:49:39.067] |  :    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:39.067] |  :   - Number of RDS files: 0
[10:49:39.068] |  :  readImmediateCondition() ... DONE
[10:49:39.068] |  :  MulticoreFuture #2
[10:49:39.068] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:39.068] |  :  .  nx: 2
[10:49:39.068] |  :  .  relay: TRUE
[10:49:39.068] |  :  .  stdout: TRUE
[10:49:39.068] |  :  .  signal: TRUE
[10:49:39.068] |  :  .  resignal: FALSE
[10:49:39.068] |  :  .  force: TRUE
[10:49:39.069] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:39.069] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:39.069] |  :  .  until=2
[10:49:39.069] |  :  .  relaying element #2
[10:49:39.069] |  :  .  result() for MulticoreFuture ...
[10:49:39.069] |  :  .  |  readImmediateCondition() ...
[10:49:39.070] |  :  .  |    - path: ‘/tmp/RtmpkIp7D9/.future/immediateConditions’
[10:49:39.070] |  :  .  |   - Number of RDS files: 0
[10:49:39.070] |  :  .  |  readImmediateCondition() ... DONE
[10:49:39.070] |  :  .  |  result() for MulticoreFuture ...
[10:49:39.070] |  :  .  |  result() for MulticoreFuture ... done
[10:49:39.070] |  :  .  result() for MulticoreFuture ... done
[10:49:39.070] |  :  .  result() for MulticoreFuture ...
[10:49:39.071] |  :  .  result() for MulticoreFuture ... done
[10:49:39.071] |  :  .  result() for MulticoreFuture ...
[10:49:39.071] |  :  .  result() for MulticoreFuture ... done
[10:49:39.071] |  :  .  result() for MulticoreFuture ...
[10:49:39.071] |  :  .  result() for MulticoreFuture ... done
[10:49:39.071] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:39.071] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:39.071] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:39.072] |  :  value(<MulticoreFuture>, ...) ...
[10:49:39.072] |  :  .  result() for MulticoreFuture ...
[10:49:39.072] |  :  .  result() for MulticoreFuture ... done
[10:49:39.072] |  :  .  result() for MulticoreFuture ...
[10:49:39.072] |  :  .  result() for MulticoreFuture ... done
[10:49:39.072] |  :  .  value: <list>
[10:49:39.072] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:39.072] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:39.073] |  :  .  nx: 2
[10:49:39.073] |  :  .  relay: TRUE
[10:49:39.073] |  :  .  stdout: TRUE
[10:49:39.073] |  :  .  signal: TRUE
[10:49:39.073] |  :  .  resignal: FALSE
[10:49:39.073] |  :  .  force: TRUE
[10:49:39.073] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:39.073] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:39.073] |  :  .  until=2
[10:49:39.073] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:39.074] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:39.074] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:39.074] |  :  length: 0 (resolved future 2)
[10:49:39.074] |  checking value #2 ... done
[10:49:39.074] |  Relaying remaining futures ...
[10:49:39.074] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:39.074] |  :  .  nx: 2
[10:49:39.074] |  :  .  relay: TRUE
[10:49:39.075] |  :  .  stdout: TRUE
[10:49:39.075] |  :  .  signal: TRUE
[10:49:39.075] |  :  .  resignal: FALSE
[10:49:39.075] |  :  .  force: TRUE
[10:49:39.075] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:39.075] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:39.075] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:39.075] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:39.075] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:39.076] |  Relaying remaining futures ... done
[10:49:39.076] value() on list ... done
[10:49:39.076]  - Number of value chunks collected: 2
[10:49:39.076] Resolving 2 futures (chunks) ... DONE
[10:49:39.076] Reducing values from 2 chunks ...
[10:49:39.076]  - Number of values collected after concatenation: 3
[10:49:39.076]  - Number of values expected: 3
[10:49:39.076] Reducing values from 2 chunks ... DONE
[10:49:39.076] future_lapply() ... DONE
[10:49:39.077] future_by_internal() ... DONE
[10:49:39.078] future_by_internal() ...
- plan('multisession') ...
[10:49:39.078] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.079] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:39.079] |  :  all.equal() for FutureStrategyList ...
[10:49:39.079] |  :  .  New stack:
[10:49:39.079] |  :  .  List of 1
[10:49:39.079] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:39.079] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:39.079] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:39.079] |  :  .    ..- attr(*, "init")= logi TRUE
[10:49:39.079] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:39.079] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:39.079] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:39.079] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:39.079] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:39.079] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:39.083] |  :  .  Old stack:
[10:49:39.083] |  :  .  List of 1
[10:49:39.083] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:39.083] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:39.083] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:39.083] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.083] |  :  .      ...)  
[10:49:39.083] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.083] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.083] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:39.083] |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:39.083] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.083] |  :  .      ...)  
[10:49:39.083] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.083] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:39.086] |  :  .  Not identical
[10:49:39.086] |  :  .  all.equal() for future ...
[10:49:39.087] |  :  .  |  List of 2
[10:49:39.087] |  :  .  |   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:39.087] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:39.087] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:39.087] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:49:39.087] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:39.087] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:39.087] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:39.087] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:39.087] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:39.087] |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:39.087] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:39.087] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:39.087] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.087] |  :  .  |      ...)  
[10:49:39.087] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.087] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.087] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:39.087] |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a835c818> 
[10:49:39.087] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:39.087] |  :  .  |      ...)  
[10:49:39.087] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:39.093] |  :  .  |  Formals differ
[10:49:39.093] |  :  .  all.equal() for future ... done
[10:49:39.093] |  :  .  Future strategies differ at level 1
[10:49:39.093] |  :  all.equal() for FutureStrategyList ... done
[10:49:39.093] |  :  plan(): Setting new future strategy stack:
[10:49:39.093] |  :  List of future strategies:
[10:49:39.093] |  :  1. multisession:
[10:49:39.093] |  :     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:39.093] |  :     - tweaked: FALSE
[10:49:39.093] |  :     - call: plan(strategy)
[10:49:39.094] |  :  List of 1
[10:49:39.094] |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:39.094] |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:39.094] |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:39.094] |  :    ..- attr(*, "init")= logi TRUE
[10:49:39.094] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:39.094] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:39.094] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:39.094] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:39.094] |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:39.094] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:39.097] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:39.097] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.097] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:39.098] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.098] |  :  .  Legacy shutdown of cluster workers ...
[10:49:39.099] |  :  .  |  Stopping existing cluster ...
[10:49:39.099] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:39.099] |  :  .  |  Stopping existing cluster ... done
[10:49:39.099] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:39.099] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:39.099] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:49:39.099] |  :  .  function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:39.099] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:39.099] |  :  .   - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:39.099] |  :  .   - attr(*, "init")= logi TRUE
[10:49:39.099] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:39.099] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:39.099] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:39.099] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:49:39.099] |  :  .   - attr(*, "call")= language plan(strategy)
[10:49:39.102] |  :  .  init: TRUE
[10:49:39.102] |  :  .  makeFutureBackend(<multisession>) ...
[10:49:39.102] |  :  .  |  Backend function: <‘NULL’>
[10:49:39.116] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[10:49:39.117] |  :  .  |  :  workers: 2
[10:49:39.117] |  :  .  |  :  getCluster() ...
[10:49:39.117] |  :  .  |  :  getCluster() ... done
[10:49:39.117] |  :  .  |  :  Stopping existing cluster ...
[10:49:39.117] |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:49:39.117] |  :  .  |  :  Stopping existing cluster ... done
[10:49:39.117] |  :  .  |  :  Starting new cluster ...
[10:49:39.117] |  :  .  |  :  .  makeCluster(workers, ...) ...
[10:49:39.117] |  :  .  |  :  .  |  Arguments:
[10:49:39.118] |  :  .  |  :  .  |  List of 2
[10:49:39.118] |  :  .  |  :  .  |   $             : int 2
[10:49:39.118] |  :  .  |  :  .  |   $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:49:39.616] |  :  .  |  :  .  |  Generated cluster UUID
[10:49:39.616] |  :  .  |  :  .  |  Cluster UUID: ‘8c313972092992a842ab74c687cbd0db’
[10:49:39.616] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:39.618] |  :  .  |  :  .  makeCluster(workers, ...) ... done
[10:49:39.618] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:39.620] |  :  .  |  :  Starting new cluster ... done
[10:49:39.620] |  :  .  |  :  Number of workers: 2
[10:49:39.620] |  :  .  |  :  Workers UUID: ‘8c313972092992a842ab74c687cbd0db’
[10:49:39.620] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[10:49:39.620] |  :  .  |  Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:39.621] |  :  .  makeFutureBackend(<multisession>) ... done
[10:49:39.621] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:49:39.621] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.621] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:39.621] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.621] |  :  plan(): nbrOfWorkers() = 2
[10:49:39.621] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:39.621] plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.622] future_by_internal() ...
[10:49:39.622] future_lapply() ...
[10:49:39.622] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.623] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:39.623] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.623] Number of chunks: 2
[10:49:39.623] getGlobalsAndPackagesXApply() ...
[10:49:39.623]  - future.globals: TRUE
[10:49:39.623] getGlobalsAndPackages() ...
[10:49:39.623] |  Searching for globals ...
[10:49:39.625] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:39.625] |  Searching for globals ... DONE
[10:49:39.625] |  Resolving globals: FALSE
[10:49:39.625] |  Search for packages associated with the globals ...
[10:49:39.625] |  :  Packages associated with globals: [1] ‘base’
[10:49:39.625] |  :  Packages: [1] ‘base’
[10:49:39.625] |  Search for packages associated with the globals ... DONE
[10:49:39.626] |  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:39.626] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:39.626] |  Packages after dropping 'base': [0] 
[10:49:39.626] |  globals: [1] ‘FUN’
[10:49:39.626] |  packages: [0] 
[10:49:39.626] getGlobalsAndPackages() ... done
[10:49:39.626]  - globals found/used: [n=1] ‘FUN’
[10:49:39.627]  - needed namespaces: [n=0] 
[10:49:39.627] Finding globals ... DONE
[10:49:39.627]  - use_args: TRUE
[10:49:39.627]  - Getting '...' globals ...
[10:49:39.627] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:39.627] |  recursive: 0
[10:49:39.627] |  length: 1
[10:49:39.627] |  elements: ‘...’
[10:49:39.628] |  'obj' is DotDotDotList
[10:49:39.628] |  resolve(obj, ...) ...
[10:49:39.628] |  resolve(obj, ...) ... done
[10:49:39.628] |  length: 0 (resolved future 1)
[10:49:39.628] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:39.628]    - '...' content: [n=0] 
[10:49:39.628] List of 1
[10:49:39.628]  $ ...: list()
[10:49:39.628]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:39.628]  - attr(*, "where")=List of 1
[10:49:39.628]   ..$ ...:<environment: 0x5564a614b5b0> 
[10:49:39.628]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:39.628]  - attr(*, "resolved")= logi TRUE
[10:49:39.628]  - attr(*, "total_size")= num NA
[10:49:39.631]  - Getting '...' globals ... DONE
[10:49:39.631] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:39.631] List of 2
[10:49:39.631]  $ ...future.FUN:function (object, ...)  
[10:49:39.631]  $ ...          : list()
[10:49:39.631]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:39.631]  - attr(*, "where")=List of 2
[10:49:39.631]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:39.631]   ..$ ...          :<environment: 0x5564a614b5b0> 
[10:49:39.631]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:39.631]  - attr(*, "resolved")= logi FALSE
[10:49:39.631]  - attr(*, "total_size")= num 15670
[10:49:39.634] Packages to be attached in all futures: [n=0] 
[10:49:39.634] getGlobalsAndPackagesXApply() ... DONE
[10:49:39.634] Number of futures (= number of chunks): 2
[10:49:39.634] Launching 2 futures (chunks) ...
[10:49:39.634] Chunk #1 of 2 ...
[10:49:39.634]  - Finding globals in 'X' for chunk #1 ...
[10:49:39.634] getGlobalsAndPackages() ...
[10:49:39.635] |  Searching for globals ...
[10:49:39.635] |  :  globals found: [0] 
[10:49:39.635] |  Searching for globals ... DONE
[10:49:39.635] |  globals: [0] <none>
[10:49:39.635] |  packages: [0] <none>
[10:49:39.635] getGlobalsAndPackages() ... done
[10:49:39.635]    + additional globals found: [n=0] 
[10:49:39.635]    + additional namespaces needed: [n=0] 
[10:49:39.636]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:39.636]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:39.636]  - seeds: <none>
[10:49:39.636]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.636] getGlobalsAndPackages() ...
[10:49:39.636] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.636] |  Resolving globals: FALSE
[10:49:39.636] |  Tweak future expression to call with '...' arguments ...
[10:49:39.636] |  :  {
[10:49:39.636] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:39.636] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:39.636] |  :      "# as a global variable                                         "
[10:49:39.636] |  :      do.call(function(...) {
[10:49:39.636] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:39.636] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:39.636] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:39.636] |  :              on.exit(options(oopts), add = TRUE)
[10:49:39.636] |  :          }
[10:49:39.636] |  :          {
[10:49:39.636] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:39.636] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:39.636] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:39.636] |  :              })
[10:49:39.636] |  :          }
[10:49:39.636] |  :      }, args = future.call.arguments)
[10:49:39.636] |  :  }
[10:49:39.637] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:39.637] |  Search for packages associated with the globals ...
[10:49:39.637] |  :  Packages associated with globals: [1] ‘base’
[10:49:39.637] |  :  Packages: [1] ‘base’
[10:49:39.637] |  Search for packages associated with the globals ... DONE
[10:49:39.637] |  Packages after dropping 'base': [0] 
[10:49:39.638] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.638] |  packages: [0] 
[10:49:39.638] getGlobalsAndPackages() ... done
[10:49:39.638] run() for Future (‘Future’) ...
[10:49:39.638] |  state: ‘created’
[10:49:39.638] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.638] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.638] |  Using MultisessionFutureBackend ...
[10:49:39.639] |  :  Launching futures ...
[10:49:39.639] |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:39.639] |  :  .  |  Workers: [n=2]
[10:49:39.639] |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:39.641] |  :  .  |  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:39.641] |  :  .  |  requestWorker() ...
[10:49:39.641] |  :  .  |  :  requestNode() ...
[10:49:39.641] |  :  .  |  :  .  Number of workers: 2
[10:49:39.641] |  :  .  |  :  .  Polling for a free worker ...
[10:49:39.641] |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:39.642] |  :  .  |  :  .  |  :  Created empty registry ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:39.642] |  :  .  |  :  .  |  :  Listing all futures
[10:49:39.642] |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:39.642] |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:39.642] |  :  .  |  :  .  |  Total time: 0
[10:49:39.642] |  :  .  |  :  .  Polling for a free worker ... done
[10:49:39.642] |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:39.642] |  :  .  |  :  .  |  Listing all futures
[10:49:39.642] |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:39.642] |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:39.642] |  :  .  |  :  .  Index of first available worker: 1
[10:49:39.643] |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:39.705] |  :  .  |  :  .  |  Worker is functional
[10:49:39.705] |  :  .  |  :  .  requestNode() ... done
[10:49:39.706] |  :  .  |  :  .  cluster node index: 1
[10:49:39.706] |  :  .  |  :  requestWorker() ... done
[10:49:39.706] |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:39.707] |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:39.707] |  :  .  |  :  launchFuture() ...
[10:49:39.707] |  :  .  |  :  .  cluster node index: 1
[10:49:39.707] |  :  .  |  :  .  getFutureData() ...
[10:49:39.707] |  :  .  |  :  .  |  getFutureCore() ...
[10:49:39.707] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:39.707] |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:39.707] |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:39.708] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:39.708] |  :  .  |  :  .  |  getFutureContext() ...
[10:49:39.708] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.708] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:39.708] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.708] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:39.708] |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:39.708] |  :  .  |  :  .  getFutureData() ... done
[10:49:39.709] |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:39.709] |  :  .  |  :  .  |  Appended future to position #1
[10:49:39.709] |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:39.709] |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:39.709] |  :  .  |  :  launchFuture() ... done
[10:49:39.709] |  :  .  |  :  MultisessionFuture started
[10:49:39.709] |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:39.710] |  :  .  Launching futures ... done
[10:49:39.710] |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:39.710] |  :  Using MultisessionFutureBackend ... done
[10:49:39.710] |  run() for Future (‘MultisessionFuture’) ... done
[10:49:39.710] Created future:
[10:49:39.711] |  isFutureResolved() ...
[10:49:39.711] |  :  assertValidConnection() ...
[10:49:39.712] |  :  .  cluster node index: 1
[10:49:39.712] |  :  assertValidConnection() ... done
[10:49:39.722] |  isFutureResolved() ... done
[10:49:39.710] MultisessionFuture:
[10:49:39.710] Label: ‘future_by-1’
[10:49:39.710] Expression:
[10:49:39.710] {
[10:49:39.710]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:39.710]     "# expression in do.call(), because function called uses '...'  "
[10:49:39.710]     "# as a global variable                                         "
[10:49:39.710]     do.call(function(...) {
[10:49:39.710]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:39.710]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:39.710]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:39.710]             on.exit(options(oopts), add = TRUE)
[10:49:39.710]         }
[10:49:39.710]         {
[10:49:39.710]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:39.710]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:39.710]                 ...future.FUN(...future.X_jj, ...)
[10:49:39.710]             })
[10:49:39.710]         }
[10:49:39.710]     }, args = future.call.arguments)
[10:49:39.710] }
[10:49:39.710] Lazy evaluation: FALSE
[10:49:39.710] Asynchronous evaluation: TRUE
[10:49:39.710] Local evaluation: TRUE
[10:49:39.710] Environment: R_GlobalEnv
[10:49:39.710] Capture standard output: TRUE
[10:49:39.710] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:39.710] Immediate condition classes: ‘immediateCondition’
[10:49:39.710] Globals: 5 objects totaling 996 bytes (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 564 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:39.710] Packages: <none>
[10:49:39.710] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:39.710] Resolved: FALSE
[10:49:39.710] Value: <not collected>
[10:49:39.710] Conditions captured: <none>
[10:49:39.710] Early signaling: FALSE
[10:49:39.710] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:39.710] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:39.723] Chunk #1 of 2 ... DONE
[10:49:39.723] Chunk #2 of 2 ...
[10:49:39.723]  - Finding globals in 'X' for chunk #2 ...
[10:49:39.723] |  getGlobalsAndPackages() ...
[10:49:39.723] |  :  Searching for globals ...
[10:49:39.724] |  :  .  globals found: [0] 
[10:49:39.724] |  :  Searching for globals ... DONE
[10:49:39.724] |  :  globals: [0] <none>
[10:49:39.724] |  :  packages: [0] <none>
[10:49:39.724] |  getGlobalsAndPackages() ... done
[10:49:39.724]    + additional globals found: [n=0] 
[10:49:39.724]    + additional namespaces needed: [n=0] 
[10:49:39.724]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:39.725]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:39.725]  - seeds: <none>
[10:49:39.725]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.725] |  getGlobalsAndPackages() ...
[10:49:39.725] |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.725] |  :  Resolving globals: FALSE
[10:49:39.725] |  :  Tweak future expression to call with '...' arguments ...
[10:49:39.725] |  :  .  {
[10:49:39.725] |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:39.725] |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:39.725] |  :  .      "# as a global variable                                         "
[10:49:39.725] |  :  .      do.call(function(...) {
[10:49:39.725] |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:39.725] |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:39.725] |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:39.725] |  :  .              on.exit(options(oopts), add = TRUE)
[10:49:39.725] |  :  .          }
[10:49:39.725] |  :  .          {
[10:49:39.725] |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:39.725] |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:39.725] |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:49:39.725] |  :  .              })
[10:49:39.725] |  :  .          }
[10:49:39.725] |  :  .      }, args = future.call.arguments)
[10:49:39.725] |  :  .  }
[10:49:39.726] |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:39.726] |  :  Search for packages associated with the globals ...
[10:49:39.726] |  :  .  Packages associated with globals: [1] ‘base’
[10:49:39.726] |  :  .  Packages: [1] ‘base’
[10:49:39.726] |  :  Search for packages associated with the globals ... DONE
[10:49:39.726] |  :  Packages after dropping 'base': [0] 
[10:49:39.727] |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.727] |  :  packages: [0] 
[10:49:39.727] |  getGlobalsAndPackages() ... done
[10:49:39.727] |  run() for Future (‘Future’) ...
[10:49:39.727] |  :  state: ‘created’
[10:49:39.727] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.727] |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.727] |  :  Using MultisessionFutureBackend ...
[10:49:39.728] |  :  .  Launching futures ...
[10:49:39.728] |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:39.728] |  :  .  |  :  Workers: [n=2]
[10:49:39.728] |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:39.729] |  :  .  |  :  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:39.730] |  :  .  |  :  requestWorker() ...
[10:49:39.730] |  :  .  |  :  .  requestNode() ...
[10:49:39.730] |  :  .  |  :  .  |  Number of workers: 2
[10:49:39.730] |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:39.730] |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:39.730] |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:39.730] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:39.730] |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:39.730] |  :  .  |  :  .  |  :  Total time: 0
[10:49:39.730] |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:39.731] |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:39.731] |  :  .  |  :  .  |  :  Listing all futures
[10:49:39.731] |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:39.731] |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:39.731] |  :  .  |  :  .  |  Index of first available worker: 2
[10:49:39.731] |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:39.799] |  :  .  |  :  .  |  :  Worker is functional
[10:49:39.799] |  :  .  |  :  .  |  requestNode() ... done
[10:49:39.799] |  :  .  |  :  .  |  cluster node index: 2
[10:49:39.799] |  :  .  |  :  .  requestWorker() ... done
[10:49:39.800] |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:39.800] |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:39.800] |  :  .  |  :  .  launchFuture() ...
[10:49:39.801] |  :  .  |  :  .  |  cluster node index: 2
[10:49:39.801] |  :  .  |  :  .  |  getFutureData() ...
[10:49:39.801] |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:39.801] |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:39.801] |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:39.801] |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:39.802] |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:39.802] |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:39.802] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.802] |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:39.802] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.803] |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:39.803] |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:39.803] |  :  .  |  :  .  |  getFutureData() ... done
[10:49:39.803] |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:39.804] |  :  .  |  :  .  |  :  Appended future to position #2
[10:49:39.804] |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:49:39.804] |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:39.804] |  :  .  |  :  .  launchFuture() ... done
[10:49:39.804] |  :  .  |  :  .  MultisessionFuture started
[10:49:39.805] |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:39.805] |  :  .  |  Launching futures ... done
[10:49:39.805] |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:39.805] |  :  .  Using MultisessionFutureBackend ... done
[10:49:39.805] |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:39.805] Created future:
[10:49:39.807] |  :  isFutureResolved() ...
[10:49:39.807] |  :  .  assertValidConnection() ...
[10:49:39.808] |  :  .  |  cluster node index: 2
[10:49:39.808] |  :  .  assertValidConnection() ... done
[10:49:39.819] |  :  isFutureResolved() ... done
[10:49:39.806] MultisessionFuture:
[10:49:39.806] Label: ‘future_by-2’
[10:49:39.806] Expression:
[10:49:39.806] {
[10:49:39.806]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:39.806]     "# expression in do.call(), because function called uses '...'  "
[10:49:39.806]     "# as a global variable                                         "
[10:49:39.806]     do.call(function(...) {
[10:49:39.806]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:39.806]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:39.806]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:39.806]             on.exit(options(oopts), add = TRUE)
[10:49:39.806]         }
[10:49:39.806]         {
[10:49:39.806]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:39.806]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:39.806]                 ...future.FUN(...future.X_jj, ...)
[10:49:39.806]             })
[10:49:39.806]         }
[10:49:39.806]     }, args = future.call.arguments)
[10:49:39.806] }
[10:49:39.806] Lazy evaluation: FALSE
[10:49:39.806] Asynchronous evaluation: TRUE
[10:49:39.806] Local evaluation: TRUE
[10:49:39.806] Environment: R_GlobalEnv
[10:49:39.806] Capture standard output: TRUE
[10:49:39.806] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:39.806] Immediate condition classes: ‘immediateCondition’
[10:49:39.806] Globals: 5 objects totaling 1.44 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.02 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:39.806] Packages: <none>
[10:49:39.806] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:39.806] Resolved: FALSE
[10:49:39.806] Value: <not collected>
[10:49:39.806] Conditions captured: <none>
[10:49:39.806] Early signaling: FALSE
[10:49:39.806] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:39.806] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:39.819] Chunk #2 of 2 ... DONE
[10:49:39.819] Launching 2 futures (chunks) ... DONE
[10:49:39.819] Resolving 2 futures (chunks) ...
[10:49:39.819] |  :  value() on list ...
[10:49:39.820] |  :  .  recursive: 0
[10:49:39.820] |  :  .  length: 2
[10:49:39.820] |  :  .  
[10:49:39.820] |  :  .  Number of remaining objects: 2
[10:49:39.820] |  :  .  checking value #1 ...
[10:49:39.820] |  :  .  |  'obj' is MultisessionFuture
[10:49:39.820] |  :  .  |  isFutureResolved() ...
[10:49:39.820] |  :  .  |  :  assertValidConnection() ...
[10:49:39.821] |  :  .  |  :  .  cluster node index: 1
[10:49:39.821] |  :  .  |  :  assertValidConnection() ... done
[10:49:39.821] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:39.821] |  :  .  |  :  .  cluster node index: 1
[10:49:39.822] |  :  .  |  :  .  [1] TRUE
[10:49:39.822] |  :  .  |  :  .  received data:
[10:49:39.822] |  :  .  |  :  .  List of 5
[10:49:39.822] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:39.822] |  :  .  |  :  .   $ value  :List of 13
[10:49:39.822] |  :  .  |  :  .    ..$ value            :List of 1
[10:49:39.822] |  :  .  |  :  .    .. ..$ : 'table' chr [1:6, 1:2] "Min.   :14.00  " "1st Qu.:26.00  " "Median :29.50  " "Mean   :36.39  " ...
[10:49:39.822] |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:49:39.822] |  :  .  |  :  .    .. .. .. ..$ : chr [1:6] "" "" "" "" ...
[10:49:39.822] |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "    breaks" "wool"
[10:49:39.822] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:39.822] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:39.822] |  :  .  |  :  .    ..$ conditions       : list()
[10:49:39.822] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:39.822] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:39.822] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:39.822] |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:39.822] |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:39.822] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:39.822] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:39.822] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:39.822] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:39.822] |  :  .  |  :  .    ..$ session_uuid     : chr "338f8542fcf452fbf7a67320b9456b9a"
[10:49:39.822] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:39.822] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:39.822] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:39.822] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:39.822] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:39.822] |  :  .  |  :  .    .. .. ..$ pid   : int 64023
[10:49:39.822] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:39.822] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:39.822] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:39.822] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:39.822] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:39.822] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:39.822] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:39.822] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:39.822] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:39.822] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:39.822] |  :  .  |  :  .   $ success: logi TRUE
[10:49:39.822] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.064 0.004 0.068 0 0
[10:49:39.822] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:39.822] |  :  .  |  :  .   $ tag    : NULL
[10:49:39.834] |  :  .  |  :  .  Received FutureResult
[10:49:39.834] |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:39.834] |  :  .  |  :  .  |  Removed future from position #1
[10:49:39.834] |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:39.834] |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:39.834] |  :  .  |  :  .  Erased future from future backend
[10:49:39.836] |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:39.837] |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:39.837] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:39.837] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:39.837] |  :  .  |  isFutureResolved() ... done
[10:49:39.837] |  :  .  |  MultisessionFuture #1
[10:49:39.837] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:39.837] |  :  .  |  :  nx: 2
[10:49:39.837] |  :  .  |  :  relay: TRUE
[10:49:39.837] |  :  .  |  :  stdout: TRUE
[10:49:39.837] |  :  .  |  :  signal: TRUE
[10:49:39.838] |  :  .  |  :  resignal: FALSE
[10:49:39.838] |  :  .  |  :  force: TRUE
[10:49:39.838] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:49:39.838] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:49:39.838] |  :  .  |  :  until=1
[10:49:39.838] |  :  .  |  :  relaying element #1
[10:49:39.838] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.838] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.838] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.838] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.838] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.838] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.839] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.839] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.839] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.839] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.839] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.839] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.839] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:39.839] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:39.839] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:39.839] |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:39.840] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.840] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.840] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.840] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.840] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.840] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.840] |  :  .  |  :  value: <list>
[10:49:39.840] |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:39.840] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:39.840] |  :  .  |  :  nx: 2
[10:49:39.841] |  :  .  |  :  relay: TRUE
[10:49:39.841] |  :  .  |  :  stdout: TRUE
[10:49:39.841] |  :  .  |  :  signal: TRUE
[10:49:39.841] |  :  .  |  :  resignal: FALSE
[10:49:39.841] |  :  .  |  :  force: TRUE
[10:49:39.841] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:39.841] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:39.841] |  :  .  |  :  until=2
[10:49:39.841] |  :  .  |  :  relaying element #2
[10:49:39.841] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:39.841] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:39.841] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:49:39.842] |  :  .  |  length: 1 (resolved future 1)
[10:49:39.842] |  :  .  checking value #1 ... done
[10:49:39.842] |  :  .  checking value #2 ...
[10:49:39.842] |  :  .  |  'obj' is MultisessionFuture
[10:49:39.842] |  :  .  |  isFutureResolved() ...
[10:49:39.842] |  :  .  |  :  assertValidConnection() ...
[10:49:39.842] |  :  .  |  :  .  cluster node index: 2
[10:49:39.843] |  :  .  |  :  assertValidConnection() ... done
[10:49:39.853] |  :  .  |  isFutureResolved() ... done
[10:49:39.853] |  :  .  checking value #2 ... done
[10:49:39.863] |  :  .  Number of remaining objects: 1
[10:49:39.863] |  :  .  checking value #2 ...
[10:49:39.863] |  :  .  |  'obj' is MultisessionFuture
[10:49:39.864] |  :  .  |  isFutureResolved() ...
[10:49:39.864] |  :  .  |  :  assertValidConnection() ...
[10:49:39.864] |  :  .  |  :  .  cluster node index: 2
[10:49:39.864] |  :  .  |  :  assertValidConnection() ... done
[10:49:39.875] |  :  .  |  isFutureResolved() ... done
[10:49:39.875] |  :  .  checking value #2 ... done
[10:49:39.885] |  :  .  Number of remaining objects: 1
[10:49:39.885] |  :  .  checking value #2 ...
[10:49:39.885] |  :  .  |  'obj' is MultisessionFuture
[10:49:39.885] |  :  .  |  isFutureResolved() ...
[10:49:39.886] |  :  .  |  :  assertValidConnection() ...
[10:49:39.886] |  :  .  |  :  .  cluster node index: 2
[10:49:39.886] |  :  .  |  :  assertValidConnection() ... done
[10:49:39.896] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:39.896] |  :  .  |  :  .  cluster node index: 2
[10:49:39.896] |  :  .  |  :  .  [1] TRUE
[10:49:39.896] |  :  .  |  :  .  received data:
[10:49:39.897] |  :  .  |  :  .  List of 5
[10:49:39.897] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:39.897] |  :  .  |  :  .   $ value  :List of 13
[10:49:39.897] |  :  .  |  :  .    ..$ value            :List of 2
[10:49:39.897] |  :  .  |  :  .    .. ..$ : 'table' chr [1:6, 1:2] "Min.   :12.00  " "1st Qu.:18.25  " "Median :27.00  " "Mean   :26.39  " ...
[10:49:39.897] |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:49:39.897] |  :  .  |  :  .    .. .. .. ..$ : chr [1:6] "" "" "" "" ...
[10:49:39.897] |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "    breaks" "wool"
[10:49:39.897] |  :  .  |  :  .    .. ..$ : 'table' chr [1:6, 1:2] "Min.   :10.00  " "1st Qu.:15.25  " "Median :20.50  " "Mean   :21.67  " ...
[10:49:39.897] |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 2
[10:49:39.897] |  :  .  |  :  .    .. .. .. ..$ : chr [1:6] "" "" "" "" ...
[10:49:39.897] |  :  .  |  :  .    .. .. .. ..$ : chr [1:2] "    breaks" "wool"
[10:49:39.897] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:39.897] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:39.897] |  :  .  |  :  .    ..$ conditions       : list()
[10:49:39.897] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:39.897] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:39.897] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:39.897] |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:39.897] |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:39.897] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:39.897] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:39.897] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:39.897] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:39.897] |  :  .  |  :  .    ..$ session_uuid     : chr "c9467a73b061973e3f5356f9952537d2"
[10:49:39.897] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:39.897] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:39.897] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:39.897] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:39.897] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:39.897] |  :  .  |  :  .    .. .. ..$ pid   : int 64022
[10:49:39.897] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:39.897] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:39.897] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:39.897] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:39.897] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:39.897] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:39.897] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:39.897] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:39.897] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:39.897] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:39.897] |  :  .  |  :  .   $ success: logi TRUE
[10:49:39.897] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.048 0.003 0.052 0 0
[10:49:39.897] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:39.897] |  :  .  |  :  .   $ tag    : NULL
[10:49:39.909] |  :  .  |  :  .  Received FutureResult
[10:49:39.909] |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:39.909] |  :  .  |  :  .  |  Removed future from position #1
[10:49:39.909] |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:39.909] |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:39.909] |  :  .  |  :  .  Erased future from future backend
[10:49:39.909] |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:39.909] |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:39.910] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:39.910] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:39.910] |  :  .  |  isFutureResolved() ... done
[10:49:39.910] |  :  .  |  MultisessionFuture #2
[10:49:39.910] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:39.910] |  :  .  |  :  nx: 2
[10:49:39.910] |  :  .  |  :  relay: TRUE
[10:49:39.910] |  :  .  |  :  stdout: TRUE
[10:49:39.910] |  :  .  |  :  signal: TRUE
[10:49:39.910] |  :  .  |  :  resignal: FALSE
[10:49:39.910] |  :  .  |  :  force: TRUE
[10:49:39.911] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:39.911] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:39.911] |  :  .  |  :  until=2
[10:49:39.911] |  :  .  |  :  relaying element #2
[10:49:39.911] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.911] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.911] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.911] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.911] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.911] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.912] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.912] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.912] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.912] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.912] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.912] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.912] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:39.912] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:39.912] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:39.912] |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:39.912] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.913] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.913] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.913] |  :  .  |  :  result() for ClusterFuture ...
[10:49:39.913] |  :  .  |  :  .  result already collected: FutureResult
[10:49:39.913] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:39.913] |  :  .  |  :  value: <list>
[10:49:39.913] |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:39.913] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:39.913] |  :  .  |  :  nx: 2
[10:49:39.913] |  :  .  |  :  relay: TRUE
[10:49:39.913] |  :  .  |  :  stdout: TRUE
[10:49:39.914] |  :  .  |  :  signal: TRUE
[10:49:39.914] |  :  .  |  :  resignal: FALSE
[10:49:39.914] |  :  .  |  :  force: TRUE
[10:49:39.914] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:39.914] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:39.914] |  :  .  |  :  until=2
[10:49:39.914] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:39.914] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:39.914] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:39.914] |  :  .  |  length: 0 (resolved future 2)
[10:49:39.915] |  :  .  checking value #2 ... done
[10:49:39.915] |  :  .  Relaying remaining futures ...
[10:49:39.915] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:49:39.915] |  :  .  |  :  nx: 2
[10:49:39.915] |  :  .  |  :  relay: TRUE
[10:49:39.915] |  :  .  |  :  stdout: TRUE
[10:49:39.915] |  :  .  |  :  signal: TRUE
[10:49:39.915] |  :  .  |  :  resignal: FALSE
[10:49:39.915] |  :  .  |  :  force: TRUE
[10:49:39.915] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:39.915] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:39.916] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:39.916] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:39.916] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:49:39.916] |  :  .  Relaying remaining futures ... done
[10:49:39.916] |  :  value() on list ... done
[10:49:39.916]  - Number of value chunks collected: 2
[10:49:39.916] Resolving 2 futures (chunks) ... DONE
[10:49:39.916] Reducing values from 2 chunks ...
[10:49:39.916]  - Number of values collected after concatenation: 3
[10:49:39.916]  - Number of values expected: 3
[10:49:39.916] Reducing values from 2 chunks ... DONE
[10:49:39.916] future_lapply() ... DONE
[10:49:39.917] future_by_internal() ... DONE
[10:49:39.917] future_by_internal() ...
[10:49:39.917] future_lapply() ...
[10:49:39.918] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.918] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:39.918] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.918] Number of chunks: 2
[10:49:39.919] getGlobalsAndPackagesXApply() ...
[10:49:39.919]  - future.globals: TRUE
[10:49:39.919] |  :  getGlobalsAndPackages() ...
[10:49:39.919] |  :  .  Searching for globals ...
[10:49:39.920] |  :  .  |  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:39.920] |  :  .  Searching for globals ... DONE
[10:49:39.920] |  :  .  Resolving globals: FALSE
[10:49:39.920] |  :  .  Search for packages associated with the globals ...
[10:49:39.920] |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:39.921] |  :  .  |  Packages: [1] ‘base’
[10:49:39.921] |  :  .  Search for packages associated with the globals ... DONE
[10:49:39.921] |  :  .  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:39.921] |  :  .  The total size of the 1 globals exported for future expression (‘FUN(digits = 2L)’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:39.921] |  :  .  Packages after dropping 'base': [0] 
[10:49:39.922] |  :  .  globals: [1] ‘FUN’
[10:49:39.922] |  :  .  packages: [0] 
[10:49:39.922] |  :  getGlobalsAndPackages() ... done
[10:49:39.922]  - globals found/used: [n=1] ‘FUN’
[10:49:39.922]  - needed namespaces: [n=0] 
[10:49:39.922] Finding globals ... DONE
[10:49:39.922]  - use_args: TRUE
[10:49:39.922]  - Getting '...' globals ...
[10:49:39.923] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:39.923] |  :  .  recursive: 0
[10:49:39.923] |  :  .  length: 1
[10:49:39.923] |  :  .  elements: ‘...’
[10:49:39.923] |  :  .  'obj' is DotDotDotList
[10:49:39.923] |  :  .  resolve(obj, ...) ...
[10:49:39.923] |  :  .  resolve(obj, ...) ... done
[10:49:39.923] |  :  .  length: 0 (resolved future 1)
[10:49:39.923] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:39.923]    - '...' content: [n=1] ‘digits’
[10:49:39.924] List of 1
[10:49:39.924]  $ ...:List of 1
[10:49:39.924]   ..$ digits: int 2
[10:49:39.924]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:39.924]  - attr(*, "where")=List of 1
[10:49:39.924]   ..$ ...:<environment: 0x5564a881a0f0> 
[10:49:39.924]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:39.924]  - attr(*, "resolved")= logi TRUE
[10:49:39.924]  - attr(*, "total_size")= num NA
[10:49:39.926]  - Getting '...' globals ... DONE
[10:49:39.927] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:39.927] List of 2
[10:49:39.927]  $ ...future.FUN:function (object, ...)  
[10:49:39.927]  $ ...          :List of 1
[10:49:39.927]   ..$ digits: int 2
[10:49:39.927]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:39.927]  - attr(*, "where")=List of 2
[10:49:39.927]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:39.927]   ..$ ...          :<environment: 0x5564a881a0f0> 
[10:49:39.927]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:39.927]  - attr(*, "resolved")= logi FALSE
[10:49:39.927]  - attr(*, "total_size")= num 13284
[10:49:39.930] Packages to be attached in all futures: [n=0] 
[10:49:39.930] getGlobalsAndPackagesXApply() ... DONE
[10:49:39.930] Number of futures (= number of chunks): 2
[10:49:39.930] Launching 2 futures (chunks) ...
[10:49:39.930] Chunk #1 of 2 ...
[10:49:39.931]  - Finding globals in 'X' for chunk #1 ...
[10:49:39.931] |  :  getGlobalsAndPackages() ...
[10:49:39.931] |  :  .  Searching for globals ...
[10:49:39.931] |  :  .  |  globals found: [0] 
[10:49:39.931] |  :  .  Searching for globals ... DONE
[10:49:39.931] |  :  .  globals: [0] <none>
[10:49:39.931] |  :  .  packages: [0] <none>
[10:49:39.931] |  :  getGlobalsAndPackages() ... done
[10:49:39.931]    + additional globals found: [n=0] 
[10:49:39.932]    + additional namespaces needed: [n=0] 
[10:49:39.932]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:39.932]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:39.932]  - seeds: <none>
[10:49:39.932]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.932] |  :  getGlobalsAndPackages() ...
[10:49:39.932] |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.932] |  :  .  Resolving globals: FALSE
[10:49:39.932] |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:39.932] |  :  .  |  {
[10:49:39.932] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:39.932] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:39.932] |  :  .  |      "# as a global variable                                         "
[10:49:39.932] |  :  .  |      do.call(function(...) {
[10:49:39.932] |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:39.932] |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:39.932] |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:39.932] |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:49:39.932] |  :  .  |          }
[10:49:39.932] |  :  .  |          {
[10:49:39.932] |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:39.932] |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:39.932] |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:49:39.932] |  :  .  |              })
[10:49:39.932] |  :  .  |          }
[10:49:39.932] |  :  .  |      }, args = future.call.arguments)
[10:49:39.932] |  :  .  |  }
[10:49:39.933] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:39.933] |  :  .  Search for packages associated with the globals ...
[10:49:39.933] |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:39.933] |  :  .  |  Packages: [1] ‘base’
[10:49:39.933] |  :  .  Search for packages associated with the globals ... DONE
[10:49:39.934] |  :  .  Packages after dropping 'base': [0] 
[10:49:39.934] |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.934] |  :  .  packages: [0] 
[10:49:39.934] |  :  getGlobalsAndPackages() ... done
[10:49:39.934] |  :  run() for Future (‘Future’) ...
[10:49:39.934] |  :  .  state: ‘created’
[10:49:39.934] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.934] |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.935] |  :  .  Using MultisessionFutureBackend ...
[10:49:39.935] |  :  .  |  Launching futures ...
[10:49:39.935] |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:39.935] |  :  .  |  :  .  Workers: [n=2]
[10:49:39.935] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:39.937] |  :  .  |  :  .  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:39.937] |  :  .  |  :  .  requestWorker() ...
[10:49:39.937] |  :  .  |  :  .  |  requestNode() ...
[10:49:39.937] |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:39.937] |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:39.937] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:39.937] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:39.937] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:39.937] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:39.937] |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:39.938] |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:39.938] |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:39.938] |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:39.938] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:39.938] |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:39.938] |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:49:39.938] |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:39.979] |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:39.979] |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:39.979] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:39.980] |  :  .  |  :  .  |  requestWorker() ... done
[10:49:39.980] |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:39.980] |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:39.980] |  :  .  |  :  .  |  launchFuture() ...
[10:49:39.980] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:39.980] |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:39.980] |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:39.980] |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:49:39.981] |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:39.981] |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:39.981] |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:39.981] |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:39.981] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:39.981] |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:39.981] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:39.981] |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:39.981] |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:39.982] |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:39.982] |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:39.982] |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:49:39.982] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:39.982] |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:39.982] |  :  .  |  :  .  |  launchFuture() ... done
[10:49:39.982] |  :  .  |  :  .  |  MultisessionFuture started
[10:49:39.982] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:39.983] |  :  .  |  :  Launching futures ... done
[10:49:39.983] |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:39.983] |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:39.983] |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:39.983] Created future:
[10:49:39.984] |  :  .  isFutureResolved() ...
[10:49:39.984] |  :  .  |  assertValidConnection() ...
[10:49:39.984] |  :  .  |  :  cluster node index: 1
[10:49:39.984] |  :  .  |  assertValidConnection() ... done
[10:49:39.995] |  :  .  isFutureResolved() ... done
[10:49:39.983] MultisessionFuture:
[10:49:39.983] Label: ‘future_by-1’
[10:49:39.983] Expression:
[10:49:39.983] {
[10:49:39.983]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:39.983]     "# expression in do.call(), because function called uses '...'  "
[10:49:39.983]     "# as a global variable                                         "
[10:49:39.983]     do.call(function(...) {
[10:49:39.983]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:39.983]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:39.983]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:39.983]             on.exit(options(oopts), add = TRUE)
[10:49:39.983]         }
[10:49:39.983]         {
[10:49:39.983]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:39.983]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:39.983]                 ...future.FUN(...future.X_jj, ...)
[10:49:39.983]             })
[10:49:39.983]         }
[10:49:39.983]     }, args = future.call.arguments)
[10:49:39.983] }
[10:49:39.983] Lazy evaluation: FALSE
[10:49:39.983] Asynchronous evaluation: TRUE
[10:49:39.983] Local evaluation: TRUE
[10:49:39.983] Environment: R_GlobalEnv
[10:49:39.983] Capture standard output: TRUE
[10:49:39.983] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:39.983] Immediate condition classes: ‘immediateCondition’
[10:49:39.983] Globals: 5 objects totaling 758 bytes (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 271 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:39.983] Packages: <none>
[10:49:39.983] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:39.983] Resolved: FALSE
[10:49:39.983] Value: <not collected>
[10:49:39.983] Conditions captured: <none>
[10:49:39.983] Early signaling: FALSE
[10:49:39.983] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:39.983] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:39.995] Chunk #1 of 2 ... DONE
[10:49:39.995] Chunk #2 of 2 ...
[10:49:39.996]  - Finding globals in 'X' for chunk #2 ...
[10:49:39.996] |  :  .  getGlobalsAndPackages() ...
[10:49:39.996] |  :  .  |  Searching for globals ...
[10:49:39.996] |  :  .  |  :  globals found: [0] 
[10:49:39.996] |  :  .  |  Searching for globals ... DONE
[10:49:39.996] |  :  .  |  globals: [0] <none>
[10:49:39.996] |  :  .  |  packages: [0] <none>
[10:49:39.996] |  :  .  getGlobalsAndPackages() ... done
[10:49:39.997]    + additional globals found: [n=0] 
[10:49:39.997]    + additional namespaces needed: [n=0] 
[10:49:39.997]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:39.997]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:39.997]  - seeds: <none>
[10:49:39.997]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.997] |  :  .  getGlobalsAndPackages() ...
[10:49:39.997] |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.997] |  :  .  |  Resolving globals: FALSE
[10:49:39.997] |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:39.998] |  :  .  |  :  {
[10:49:39.998] |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:39.998] |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:39.998] |  :  .  |  :      "# as a global variable                                         "
[10:49:39.998] |  :  .  |  :      do.call(function(...) {
[10:49:39.998] |  :  .  |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:39.998] |  :  .  |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:39.998] |  :  .  |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:39.998] |  :  .  |  :              on.exit(options(oopts), add = TRUE)
[10:49:39.998] |  :  .  |  :          }
[10:49:39.998] |  :  .  |  :          {
[10:49:39.998] |  :  .  |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:39.998] |  :  .  |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:39.998] |  :  .  |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:39.998] |  :  .  |  :              })
[10:49:39.998] |  :  .  |  :          }
[10:49:39.998] |  :  .  |  :      }, args = future.call.arguments)
[10:49:39.998] |  :  .  |  :  }
[10:49:39.998] |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:39.998] |  :  .  |  Search for packages associated with the globals ...
[10:49:39.998] |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:39.998] |  :  .  |  :  Packages: [1] ‘base’
[10:49:39.999] |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:39.999] |  :  .  |  Packages after dropping 'base': [0] 
[10:49:39.999] |  :  .  |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:39.999] |  :  .  |  packages: [0] 
[10:49:39.999] |  :  .  getGlobalsAndPackages() ... done
[10:49:39.999] |  :  .  run() for Future (‘Future’) ...
[10:49:39.999] |  :  .  |  state: ‘created’
[10:49:39.999] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.000] |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.000] |  :  .  |  Using MultisessionFutureBackend ...
[10:49:40.000] |  :  .  |  :  Launching futures ...
[10:49:40.000] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:40.000] |  :  .  |  :  .  |  Workers: [n=2]
[10:49:40.000] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:40.002] |  :  .  |  :  .  |  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:40.002] |  :  .  |  :  .  |  requestWorker() ...
[10:49:40.002] |  :  .  |  :  .  |  :  requestNode() ...
[10:49:40.002] |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:40.002] |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:40.002] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.002] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:40.002] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:40.002] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.002] |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:40.003] |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:40.003] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.003] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:40.003] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:40.003] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.003] |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:49:40.003] |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:40.046] |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:40.046] |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:40.047] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:40.047] |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:40.047] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:40.047] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:40.047] |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:40.047] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:40.047] |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:40.048] |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:40.048] |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:40.048] |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:40.048] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:40.048] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:40.048] |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:40.048] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.048] |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:40.048] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.048] |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:40.049] |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:40.049] |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:40.049] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:40.049] |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:49:40.049] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:49:40.049] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:40.049] |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:40.050] |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:40.050] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:40.050] |  :  .  |  :  .  Launching futures ... done
[10:49:40.050] |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.050] |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:40.050] |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:40.050] Created future:
[10:49:40.051] |  :  .  |  isFutureResolved() ...
[10:49:40.051] |  :  .  |  :  assertValidConnection() ...
[10:49:40.051] |  :  .  |  :  .  cluster node index: 2
[10:49:40.052] |  :  .  |  :  assertValidConnection() ... done
[10:49:40.062] |  :  .  |  isFutureResolved() ... done
[10:49:40.050] MultisessionFuture:
[10:49:40.050] Label: ‘future_by-2’
[10:49:40.050] Expression:
[10:49:40.050] {
[10:49:40.050]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.050]     "# expression in do.call(), because function called uses '...'  "
[10:49:40.050]     "# as a global variable                                         "
[10:49:40.050]     do.call(function(...) {
[10:49:40.050]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.050]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.050]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.050]             on.exit(options(oopts), add = TRUE)
[10:49:40.050]         }
[10:49:40.050]         {
[10:49:40.050]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.050]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.050]                 ...future.FUN(...future.X_jj, ...)
[10:49:40.050]             })
[10:49:40.050]         }
[10:49:40.050]     }, args = future.call.arguments)
[10:49:40.050] }
[10:49:40.050] Lazy evaluation: FALSE
[10:49:40.050] Asynchronous evaluation: TRUE
[10:49:40.050] Local evaluation: TRUE
[10:49:40.050] Environment: R_GlobalEnv
[10:49:40.050] Capture standard output: TRUE
[10:49:40.050] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:40.050] Immediate condition classes: ‘immediateCondition’
[10:49:40.050] Globals: 5 objects totaling 758 bytes (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 271 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:40.050] Packages: <none>
[10:49:40.050] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:40.050] Resolved: FALSE
[10:49:40.050] Value: <not collected>
[10:49:40.050] Conditions captured: <none>
[10:49:40.050] Early signaling: FALSE
[10:49:40.050] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:40.050] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.062] Chunk #2 of 2 ... DONE
[10:49:40.062] Launching 2 futures (chunks) ... DONE
[10:49:40.063] Resolving 2 futures (chunks) ...
[10:49:40.063] |  :  .  |  value() on list ...
[10:49:40.063] |  :  .  |  :  recursive: 0
[10:49:40.063] |  :  .  |  :  length: 2
[10:49:40.063] |  :  .  |  :  
[10:49:40.063] |  :  .  |  :  Number of remaining objects: 2
[10:49:40.063] |  :  .  |  :  checking value #1 ...
[10:49:40.063] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:40.063] |  :  .  |  :  .  isFutureResolved() ...
[10:49:40.064] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:40.064] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:40.064] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:40.064] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:40.064] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:40.064] |  :  .  |  :  .  |  :  [1] TRUE
[10:49:40.065] |  :  .  |  :  .  |  :  received data:
[10:49:40.065] |  :  .  |  :  .  |  :  List of 5
[10:49:40.065] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:40.065] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ value            :List of 3
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..$ : 'summaryDefault' Named num [1:6] 25 26 51 45 54 70
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:6] "Min." "1st Qu." "Median" "Mean" ...
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..$ : 'summaryDefault' Named num [1:6] 14 20 29 28 31 44
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:6] "Min." "1st Qu." "Median" "Mean" ...
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..$ : 'summaryDefault' Named num [1:6] 12 18 21 24 30 36
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:6] "Min." "1st Qu." "Median" "Mean" ...
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "338f8542fcf452fbf7a67320b9456b9a"
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 64023
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:40.065] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:40.065] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:40.065] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:40.065] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:40.065] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:40.065] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:49:40.065] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:40.065] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:40.076] |  :  .  |  :  .  |  :  Received FutureResult
[10:49:40.077] |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:40.077] |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:40.077] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:40.077] |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:40.077] |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:40.077] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.077] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.077] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.077] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:40.077] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:40.078] |  :  .  |  :  .  MultisessionFuture #1
[10:49:40.078] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:40.078] |  :  .  |  :  .  |  nx: 2
[10:49:40.078] |  :  .  |  :  .  |  relay: TRUE
[10:49:40.078] |  :  .  |  :  .  |  stdout: TRUE
[10:49:40.078] |  :  .  |  :  .  |  signal: TRUE
[10:49:40.078] |  :  .  |  :  .  |  resignal: FALSE
[10:49:40.078] |  :  .  |  :  .  |  force: TRUE
[10:49:40.078] |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:49:40.078] |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:49:40.078] |  :  .  |  :  .  |  until=1
[10:49:40.079] |  :  .  |  :  .  |  relaying element #1
[10:49:40.079] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.079] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.079] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.079] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.079] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.079] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.079] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.079] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.079] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.080] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.080] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.080] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.080] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:40.080] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:40.080] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:40.080] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:40.080] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.080] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.080] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.080] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.081] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.081] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.081] |  :  .  |  :  .  |  value: <list>
[10:49:40.081] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:40.081] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:40.081] |  :  .  |  :  .  |  nx: 2
[10:49:40.081] |  :  .  |  :  .  |  relay: TRUE
[10:49:40.081] |  :  .  |  :  .  |  stdout: TRUE
[10:49:40.081] |  :  .  |  :  .  |  signal: TRUE
[10:49:40.081] |  :  .  |  :  .  |  resignal: FALSE
[10:49:40.081] |  :  .  |  :  .  |  force: TRUE
[10:49:40.081] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:40.082] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:40.082] |  :  .  |  :  .  |  until=2
[10:49:40.082] |  :  .  |  :  .  |  relaying element #2
[10:49:40.082] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:40.082] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:40.082] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:49:40.082] |  :  .  |  :  .  length: 1 (resolved future 1)
[10:49:40.082] |  :  .  |  :  checking value #1 ... done
[10:49:40.082] |  :  .  |  :  checking value #2 ...
[10:49:40.082] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:40.083] |  :  .  |  :  .  isFutureResolved() ...
[10:49:40.083] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:40.083] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:40.083] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:40.093] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:40.094] |  :  .  |  :  checking value #2 ... done
[10:49:40.104] |  :  .  |  :  Number of remaining objects: 1
[10:49:40.104] |  :  .  |  :  checking value #2 ...
[10:49:40.104] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:40.104] |  :  .  |  :  .  isFutureResolved() ...
[10:49:40.105] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:40.105] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:40.105] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:40.105] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:40.105] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:40.105] |  :  .  |  :  .  |  :  [1] TRUE
[10:49:40.106] |  :  .  |  :  .  |  :  received data:
[10:49:40.106] |  :  .  |  :  .  |  :  List of 5
[10:49:40.106] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:40.106] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ value            :List of 3
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..$ : 'summaryDefault' Named num [1:6] 16 21 28 29 39 42
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:6] "Min." "1st Qu." "Median" "Mean" ...
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..$ : 'summaryDefault' Named num [1:6] 10 18 24 25 28 43
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:6] "Min." "1st Qu." "Median" "Mean" ...
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..$ : 'summaryDefault' Named num [1:6] 13 15 17 19 21 28
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "names")= chr [1:6] "Min." "1st Qu." "Median" "Mean" ...
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "c9467a73b061973e3f5356f9952537d2"
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 64022
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:40.106] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:40.106] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:40.106] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:40.106] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:40.106] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:40.106] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.006 0.001 0.006 0 0
[10:49:40.106] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:40.106] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:40.118] |  :  .  |  :  .  |  :  Received FutureResult
[10:49:40.118] |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:40.118] |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:40.118] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:40.118] |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:40.118] |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:40.118] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.118] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.118] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.118] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:40.119] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:40.119] |  :  .  |  :  .  MultisessionFuture #2
[10:49:40.119] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:40.119] |  :  .  |  :  .  |  nx: 2
[10:49:40.119] |  :  .  |  :  .  |  relay: TRUE
[10:49:40.119] |  :  .  |  :  .  |  stdout: TRUE
[10:49:40.119] |  :  .  |  :  .  |  signal: TRUE
[10:49:40.119] |  :  .  |  :  .  |  resignal: FALSE
[10:49:40.119] |  :  .  |  :  .  |  force: TRUE
[10:49:40.119] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:40.119] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:40.120] |  :  .  |  :  .  |  until=2
[10:49:40.120] |  :  .  |  :  .  |  relaying element #2
[10:49:40.120] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.120] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.120] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.120] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.120] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.120] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.120] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.120] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.121] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.121] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.121] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.121] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.121] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:40.121] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:40.121] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:40.121] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:40.121] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.121] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.121] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.122] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.122] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.122] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.122] |  :  .  |  :  .  |  value: <list>
[10:49:40.122] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:40.122] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:40.122] |  :  .  |  :  .  |  nx: 2
[10:49:40.122] |  :  .  |  :  .  |  relay: TRUE
[10:49:40.122] |  :  .  |  :  .  |  stdout: TRUE
[10:49:40.122] |  :  .  |  :  .  |  signal: TRUE
[10:49:40.123] |  :  .  |  :  .  |  resignal: FALSE
[10:49:40.123] |  :  .  |  :  .  |  force: TRUE
[10:49:40.123] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:40.123] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:40.123] |  :  .  |  :  .  |  until=2
[10:49:40.123] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:40.123] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:40.123] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:40.123] |  :  .  |  :  .  length: 0 (resolved future 2)
[10:49:40.123] |  :  .  |  :  checking value #2 ... done
[10:49:40.123] |  :  .  |  :  Relaying remaining futures ...
[10:49:40.124] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:49:40.124] |  :  .  |  :  .  |  nx: 2
[10:49:40.124] |  :  .  |  :  .  |  relay: TRUE
[10:49:40.124] |  :  .  |  :  .  |  stdout: TRUE
[10:49:40.124] |  :  .  |  :  .  |  signal: TRUE
[10:49:40.124] |  :  .  |  :  .  |  resignal: FALSE
[10:49:40.124] |  :  .  |  :  .  |  force: TRUE
[10:49:40.124] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:40.124] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:40.124] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:40.124] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:40.125] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:49:40.125] |  :  .  |  :  Relaying remaining futures ... done
[10:49:40.125] |  :  .  |  value() on list ... done
[10:49:40.125]  - Number of value chunks collected: 2
[10:49:40.125] Resolving 2 futures (chunks) ... DONE
[10:49:40.125] Reducing values from 2 chunks ...
[10:49:40.125]  - Number of values collected after concatenation: 6
[10:49:40.125]  - Number of values expected: 6
[10:49:40.125] Reducing values from 2 chunks ... DONE
[10:49:40.125] future_lapply() ... DONE
[10:49:40.125] future_by_internal() ... DONE
[10:49:40.126] future_by_internal() ...
[10:49:40.127] future_lapply() ...
[10:49:40.128] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.128] |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:40.128] |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.128] Number of chunks: 2
[10:49:40.129] getGlobalsAndPackagesXApply() ...
[10:49:40.129]  - future.globals: TRUE
[10:49:40.129] |  :  .  |  getGlobalsAndPackages() ...
[10:49:40.129] |  :  .  |  :  Searching for globals ...
[10:49:40.131] |  :  .  |  :  .  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:40.131] |  :  .  |  :  Searching for globals ... DONE
[10:49:40.131] |  :  .  |  :  Resolving globals: FALSE
[10:49:40.131] |  :  .  |  :  Search for packages associated with the globals ...
[10:49:40.131] |  :  .  |  :  .  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:40.131] |  :  .  |  :  .  Packages: [2] ‘base’, ‘stats’
[10:49:40.132] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:40.132] |  :  .  |  :  The total size of the 1 globals is 762 bytes (762 bytes)
[10:49:40.132] |  :  .  |  :  The total size of the 1 globals exported for future expression (‘FUN(singular.ok = FALSE)’) is 762 bytes There is one global: ‘FUN’ (762 bytes of class ‘function’)
[10:49:40.132] |  :  .  |  :  Packages after dropping 'base': [1] ‘stats’
[10:49:40.132] |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:40.132] |  :  .  |  :  globals: [1] ‘FUN’
[10:49:40.133] |  :  .  |  :  packages: [1] ‘stats’
[10:49:40.133] |  :  .  |  getGlobalsAndPackages() ... done
[10:49:40.133]  - globals found/used: [n=1] ‘FUN’
[10:49:40.133]  - needed namespaces: [n=1] ‘stats’
[10:49:40.133] Finding globals ... DONE
[10:49:40.133]  - use_args: TRUE
[10:49:40.133]  - Getting '...' globals ...
[10:49:40.133] |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:40.134] |  :  .  |  :  recursive: 0
[10:49:40.134] |  :  .  |  :  length: 1
[10:49:40.134] |  :  .  |  :  elements: ‘...’
[10:49:40.134] |  :  .  |  :  'obj' is DotDotDotList
[10:49:40.134] |  :  .  |  :  resolve(obj, ...) ...
[10:49:40.134] |  :  .  |  :  resolve(obj, ...) ... done
[10:49:40.134] |  :  .  |  :  length: 0 (resolved future 1)
[10:49:40.134] |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:40.134]    - '...' content: [n=1] ‘singular.ok’
[10:49:40.135] List of 1
[10:49:40.135]  $ ...:List of 1
[10:49:40.135]   ..$ singular.ok: logi FALSE
[10:49:40.135]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:40.135]  - attr(*, "where")=List of 1
[10:49:40.135]   ..$ ...:<environment: 0x5564a7d4d500> 
[10:49:40.135]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:40.135]  - attr(*, "resolved")= logi TRUE
[10:49:40.135]  - attr(*, "total_size")= num NA
[10:49:40.138]  - Getting '...' globals ... DONE
[10:49:40.138] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:40.138] List of 2
[10:49:40.138]  $ ...future.FUN:function (x, ...)  
[10:49:40.138]  $ ...          :List of 1
[10:49:40.138]   ..$ singular.ok: logi FALSE
[10:49:40.138]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:40.138]  - attr(*, "where")=List of 2
[10:49:40.138]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:40.138]   ..$ ...          :<environment: 0x5564a7d4d500> 
[10:49:40.138]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:40.138]  - attr(*, "resolved")= logi FALSE
[10:49:40.138]  - attr(*, "total_size")= num 19977
[10:49:40.141] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:40.141] getGlobalsAndPackagesXApply() ... DONE
[10:49:40.141] Number of futures (= number of chunks): 2
[10:49:40.141] Launching 2 futures (chunks) ...
[10:49:40.142] Chunk #1 of 2 ...
[10:49:40.142]  - Finding globals in 'X' for chunk #1 ...
[10:49:40.142] |  :  .  |  getGlobalsAndPackages() ...
[10:49:40.142] |  :  .  |  :  Searching for globals ...
[10:49:40.142] |  :  .  |  :  .  globals found: [0] 
[10:49:40.142] |  :  .  |  :  Searching for globals ... DONE
[10:49:40.142] |  :  .  |  :  globals: [0] <none>
[10:49:40.143] |  :  .  |  :  packages: [0] <none>
[10:49:40.143] |  :  .  |  getGlobalsAndPackages() ... done
[10:49:40.143]    + additional globals found: [n=0] 
[10:49:40.143]    + additional namespaces needed: [n=0] 
[10:49:40.143]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:40.143]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:40.143]  - seeds: <none>
[10:49:40.143]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.143] |  :  .  |  getGlobalsAndPackages() ...
[10:49:40.143] |  :  .  |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.143] |  :  .  |  :  Resolving globals: FALSE
[10:49:40.144] |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:40.144] |  :  .  |  :  .  {
[10:49:40.144] |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.144] |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:40.144] |  :  .  |  :  .      "# as a global variable                                         "
[10:49:40.144] |  :  .  |  :  .      do.call(function(...) {
[10:49:40.144] |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:40.144] |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:49:40.144] |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:49:40.144] |  :  .  |  :  .          "# anonymous function.                                          "
[10:49:40.144] |  :  .  |  :  .          "#                                                              "
[10:49:40.144] |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:49:40.144] |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:49:40.144] |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:40.144] |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:49:40.144] |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:49:40.144] |  :  .  |  :  .          repeat {
[10:49:40.144] |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:49:40.144] |  :  .  |  :  .                  emptyenv())) 
[10:49:40.144] |  :  .  |  :  .                  break
[10:49:40.144] |  :  .  |  :  .              penv <- env
[10:49:40.144] |  :  .  |  :  .              env <- parent.env(env)
[10:49:40.144] |  :  .  |  :  .          }
[10:49:40.144] |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:49:40.144] |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:49:40.144] |  :  .  |  :  .          }
[10:49:40.144] |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:40.144] |  :  .  |  :  .              !isNamespace(penv)) {
[10:49:40.144] |  :  .  |  :  .              parent.env(penv) <- environment()
[10:49:40.144] |  :  .  |  :  .          }
[10:49:40.144] |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:40.144] |  :  .  |  :  .          {
[10:49:40.144] |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.144] |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.144] |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.144] |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:49:40.144] |  :  .  |  :  .              }
[10:49:40.144] |  :  .  |  :  .              {
[10:49:40.144] |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.144] |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.144] |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:49:40.144] |  :  .  |  :  .                  })
[10:49:40.144] |  :  .  |  :  .              }
[10:49:40.144] |  :  .  |  :  .          }
[10:49:40.144] |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:40.144] |  :  .  |  :  .  }
[10:49:40.144] |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:40.144] |  :  .  |  :  Search for packages associated with the globals ...
[10:49:40.144] |  :  .  |  :  .  Packages associated with globals: [0] 
[10:49:40.145] |  :  .  |  :  .  Packages: [0] 
[10:49:40.145] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:40.145] |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:40.145] |  :  .  |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.145] |  :  .  |  :  packages: [0] 
[10:49:40.145] |  :  .  |  getGlobalsAndPackages() ... done
[10:49:40.145] |  :  .  |  run() for Future (‘Future’) ...
[10:49:40.146] |  :  .  |  :  state: ‘created’
[10:49:40.146] |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.146] |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.146] |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:40.146] |  :  .  |  :  .  Launching futures ...
[10:49:40.148] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:40.148] |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:40.148] |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:40.150] |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:40.150] |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:40.150] |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:40.150] |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:40.150] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:40.150] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.150] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:40.150] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:40.150] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.150] |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:40.151] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:40.151] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.151] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:40.151] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:40.151] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.151] |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:49:40.151] |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:40.232] |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:40.233] |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:40.233] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:40.233] |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:40.233] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:40.233] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:40.234] |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:40.234] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:40.234] |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:40.234] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:40.234] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:40.234] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:40.234] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:40.234] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:40.234] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:40.234] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.235] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:40.235] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.235] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:40.235] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:40.235] |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:40.235] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:40.236] |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:49:40.236] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:40.236] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:40.236] |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:40.236] |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:40.236] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:40.236] |  :  .  |  :  .  |  Launching futures ... done
[10:49:40.236] |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.236] |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:40.236] |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:40.237] Created future:
[10:49:40.238] |  :  .  |  :  isFutureResolved() ...
[10:49:40.238] |  :  .  |  :  .  assertValidConnection() ...
[10:49:40.238] |  :  .  |  :  .  |  cluster node index: 1
[10:49:40.238] |  :  .  |  :  .  assertValidConnection() ... done
[10:49:40.249] |  :  .  |  :  isFutureResolved() ... done
[10:49:40.237] MultisessionFuture:
[10:49:40.237] Label: ‘future_by-1’
[10:49:40.237] Expression:
[10:49:40.237] {
[10:49:40.237]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.237]     "# expression in do.call(), because function called uses '...'  "
[10:49:40.237]     "# as a global variable                                         "
[10:49:40.237]     do.call(function(...) {
[10:49:40.237]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:40.237]         "# without having an '...' argument. This means '...' is treated"
[10:49:40.237]         "# as a global variable. This may happen when FUN() is an       "
[10:49:40.237]         "# anonymous function.                                          "
[10:49:40.237]         "#                                                              "
[10:49:40.237]         "# If an anonymous function, we will make sure to restore the   "
[10:49:40.237]         "# function environment of FUN() to the calling environment.    "
[10:49:40.237]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:40.237]         "# global environment, which is where globals are written.      "
[10:49:40.237]         penv <- env <- environment(...future.FUN)
[10:49:40.237]         repeat {
[10:49:40.237]             if (identical(env, globalenv()) || identical(env, 
[10:49:40.237]                 emptyenv())) 
[10:49:40.237]                 break
[10:49:40.237]             penv <- env
[10:49:40.237]             env <- parent.env(env)
[10:49:40.237]         }
[10:49:40.237]         if (identical(penv, globalenv())) {
[10:49:40.237]             environment(...future.FUN) <- environment()
[10:49:40.237]         }
[10:49:40.237]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:40.237]             !isNamespace(penv)) {
[10:49:40.237]             parent.env(penv) <- environment()
[10:49:40.237]         }
[10:49:40.237]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:40.237]         {
[10:49:40.237]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.237]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.237]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.237]                 on.exit(options(oopts), add = TRUE)
[10:49:40.237]             }
[10:49:40.237]             {
[10:49:40.237]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.237]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.237]                   ...future.FUN(...future.X_jj, ...)
[10:49:40.237]                 })
[10:49:40.237]             }
[10:49:40.237]         }
[10:49:40.237]     }, args = future.call.arguments)
[10:49:40.237] }
[10:49:40.237] Lazy evaluation: FALSE
[10:49:40.237] Asynchronous evaluation: TRUE
[10:49:40.237] Local evaluation: TRUE
[10:49:40.237] Environment: R_GlobalEnv
[10:49:40.237] Capture standard output: TRUE
[10:49:40.237] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:40.237] Immediate condition classes: ‘immediateCondition’
[10:49:40.237] Globals: 5 objects totaling 1.67 KiB (function ‘...future.FUN’ of 762 bytes, DotDotDotList ‘future.call.arguments’ of 157 bytes, list ‘...future.elements_ii’ of 736 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:40.237] Packages: 1 packages (‘stats’)
[10:49:40.237] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:40.237] Resolved: FALSE
[10:49:40.237] Value: <not collected>
[10:49:40.237] Conditions captured: <none>
[10:49:40.237] Early signaling: FALSE
[10:49:40.237] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:40.237] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.249] Chunk #1 of 2 ... DONE
[10:49:40.249] Chunk #2 of 2 ...
[10:49:40.249]  - Finding globals in 'X' for chunk #2 ...
[10:49:40.250] |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:40.250] |  :  .  |  :  .  Searching for globals ...
[10:49:40.250] |  :  .  |  :  .  |  globals found: [0] 
[10:49:40.250] |  :  .  |  :  .  Searching for globals ... DONE
[10:49:40.250] |  :  .  |  :  .  globals: [0] <none>
[10:49:40.250] |  :  .  |  :  .  packages: [0] <none>
[10:49:40.251] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:40.251]    + additional globals found: [n=0] 
[10:49:40.251]    + additional namespaces needed: [n=0] 
[10:49:40.251]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:40.251]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:40.251]  - seeds: <none>
[10:49:40.251]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.251] |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:40.251] |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.251] |  :  .  |  :  .  Resolving globals: FALSE
[10:49:40.252] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:40.252] |  :  .  |  :  .  |  {
[10:49:40.252] |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.252] |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:40.252] |  :  .  |  :  .  |      "# as a global variable                                         "
[10:49:40.252] |  :  .  |  :  .  |      do.call(function(...) {
[10:49:40.252] |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:40.252] |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:49:40.252] |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:49:40.252] |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:49:40.252] |  :  .  |  :  .  |          "#                                                              "
[10:49:40.252] |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:49:40.252] |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:49:40.252] |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:40.252] |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:49:40.252] |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:49:40.252] |  :  .  |  :  .  |          repeat {
[10:49:40.252] |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:49:40.252] |  :  .  |  :  .  |                  emptyenv())) 
[10:49:40.252] |  :  .  |  :  .  |                  break
[10:49:40.252] |  :  .  |  :  .  |              penv <- env
[10:49:40.252] |  :  .  |  :  .  |              env <- parent.env(env)
[10:49:40.252] |  :  .  |  :  .  |          }
[10:49:40.252] |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:49:40.252] |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:49:40.252] |  :  .  |  :  .  |          }
[10:49:40.252] |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:40.252] |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:49:40.252] |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:49:40.252] |  :  .  |  :  .  |          }
[10:49:40.252] |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:40.252] |  :  .  |  :  .  |          {
[10:49:40.252] |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.252] |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.252] |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.252] |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:49:40.252] |  :  .  |  :  .  |              }
[10:49:40.252] |  :  .  |  :  .  |              {
[10:49:40.252] |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.252] |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.252] |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:49:40.252] |  :  .  |  :  .  |                  })
[10:49:40.252] |  :  .  |  :  .  |              }
[10:49:40.252] |  :  .  |  :  .  |          }
[10:49:40.252] |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:49:40.252] |  :  .  |  :  .  |  }
[10:49:40.252] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:40.252] |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:40.252] |  :  .  |  :  .  |  Packages associated with globals: [0] 
[10:49:40.253] |  :  .  |  :  .  |  Packages: [0] 
[10:49:40.253] |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:40.253] |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:49:40.253] |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.253] |  :  .  |  :  .  packages: [0] 
[10:49:40.253] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:40.253] |  :  .  |  :  run() for Future (‘Future’) ...
[10:49:40.254] |  :  .  |  :  .  state: ‘created’
[10:49:40.254] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.254] |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.254] |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:49:40.254] |  :  .  |  :  .  |  Launching futures ...
[10:49:40.254] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:40.254] |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:49:40.254] |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:40.256] |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:40.256] |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:49:40.256] |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:49:40.256] |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:40.256] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:40.256] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.256] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:40.257] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:40.257] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.257] |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:40.257] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:40.257] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.257] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:40.257] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:40.257] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.257] |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:49:40.257] |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:40.339] |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:40.340] |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:40.340] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:40.340] |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:49:40.340] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:40.340] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:40.340] |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:49:40.341] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:40.341] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:40.341] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:40.341] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘stats’
[10:49:40.341] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:40.341] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:40.341] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:40.341] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:40.341] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:40.342] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.342] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:40.342] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:40.342] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:40.342] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:40.342] |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:49:40.343] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:49:40.343] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:40.343] |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:49:40.343] |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:49:40.343] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:40.343] |  :  .  |  :  .  |  :  Launching futures ... done
[10:49:40.343] |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.343] |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:40.343] |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:40.343] Created future:
[10:49:40.344] |  :  .  |  :  .  isFutureResolved() ...
[10:49:40.345] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:40.345] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:40.345] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:40.356] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:40.344] MultisessionFuture:
[10:49:40.344] Label: ‘future_by-2’
[10:49:40.344] Expression:
[10:49:40.344] {
[10:49:40.344]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.344]     "# expression in do.call(), because function called uses '...'  "
[10:49:40.344]     "# as a global variable                                         "
[10:49:40.344]     do.call(function(...) {
[10:49:40.344]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:40.344]         "# without having an '...' argument. This means '...' is treated"
[10:49:40.344]         "# as a global variable. This may happen when FUN() is an       "
[10:49:40.344]         "# anonymous function.                                          "
[10:49:40.344]         "#                                                              "
[10:49:40.344]         "# If an anonymous function, we will make sure to restore the   "
[10:49:40.344]         "# function environment of FUN() to the calling environment.    "
[10:49:40.344]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:40.344]         "# global environment, which is where globals are written.      "
[10:49:40.344]         penv <- env <- environment(...future.FUN)
[10:49:40.344]         repeat {
[10:49:40.344]             if (identical(env, globalenv()) || identical(env, 
[10:49:40.344]                 emptyenv())) 
[10:49:40.344]                 break
[10:49:40.344]             penv <- env
[10:49:40.344]             env <- parent.env(env)
[10:49:40.344]         }
[10:49:40.344]         if (identical(penv, globalenv())) {
[10:49:40.344]             environment(...future.FUN) <- environment()
[10:49:40.344]         }
[10:49:40.344]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:40.344]             !isNamespace(penv)) {
[10:49:40.344]             parent.env(penv) <- environment()
[10:49:40.344]         }
[10:49:40.344]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:40.344]         {
[10:49:40.344]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.344]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.344]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.344]                 on.exit(options(oopts), add = TRUE)
[10:49:40.344]             }
[10:49:40.344]             {
[10:49:40.344]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.344]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.344]                   ...future.FUN(...future.X_jj, ...)
[10:49:40.344]                 })
[10:49:40.344]             }
[10:49:40.344]         }
[10:49:40.344]     }, args = future.call.arguments)
[10:49:40.344] }
[10:49:40.344] Lazy evaluation: FALSE
[10:49:40.344] Asynchronous evaluation: TRUE
[10:49:40.344] Local evaluation: TRUE
[10:49:40.344] Environment: R_GlobalEnv
[10:49:40.344] Capture standard output: TRUE
[10:49:40.344] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:40.344] Immediate condition classes: ‘immediateCondition’
[10:49:40.344] Globals: 5 objects totaling 2.30 KiB (function ‘...future.FUN’ of 762 bytes, DotDotDotList ‘future.call.arguments’ of 157 bytes, list ‘...future.elements_ii’ of 1.35 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:40.344] Packages: 1 packages (‘stats’)
[10:49:40.344] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:40.344] Resolved: FALSE
[10:49:40.344] Value: <not collected>
[10:49:40.344] Conditions captured: <none>
[10:49:40.344] Early signaling: FALSE
[10:49:40.344] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:40.344] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.356] Chunk #2 of 2 ... DONE
[10:49:40.356] Launching 2 futures (chunks) ... DONE
[10:49:40.356] Resolving 2 futures (chunks) ...
[10:49:40.356] |  :  .  |  :  .  value() on list ...
[10:49:40.356] |  :  .  |  :  .  |  recursive: 0
[10:49:40.357] |  :  .  |  :  .  |  length: 2
[10:49:40.357] |  :  .  |  :  .  |  
[10:49:40.357] |  :  .  |  :  .  |  Number of remaining objects: 2
[10:49:40.357] |  :  .  |  :  .  |  checking value #1 ...
[10:49:40.357] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:40.357] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:40.357] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:40.357] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:40.358] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:40.358] |  :  .  |  :  .  |  :  .  |  received data:
[10:49:40.358] |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:40.358] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. ..$ :List of 13
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ coefficients : Named num [1:2] 44.6 -16.3
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:2] "(Intercept)" "woolB"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ residuals    : Named num [1:18] -18.56 -14.56 9.44 -19.56 25.44 ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:18] "1" "2" "3" "4" ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ effects      : Named num [1:18] -154.4 -34.6 14.7 -14.3 30.7 ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:18] "(Intercept)" "woolB" "" "" ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ rank         : int 2
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ fitted.values: Named num [1:18] 44.6 44.6 44.6 44.6 44.6 ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:18] "1" "2" "3" "4" ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ assign       : int [1:2] 0 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ qr           :List of 5
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ qr   : num [1:18, 1:2] -4.243 0.236 0.236 0.236 0.236 ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..$ : chr [1:18] "1" "2" "3" "4" ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..$ : chr [1:2] "(Intercept)" "woolB"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "assign")= int [1:2] 0 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "contrasts")=List of 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ qraux: num [1:2] 1.24 1.19
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ pivot: int [1:2] 1 2
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ tol  : num 1e-07
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ rank : int 2
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "class")= chr "qr"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ df.residual  : int 16
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ contrasts    :List of 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ xlevels      :List of 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ wool: chr [1:2] "A" "B"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ call         : language lm(formula = breaks ~ wool, data = x, singular.ok = FALSE)
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ terms        :Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a839e700> 
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ model        :'data.frame':	18 obs. of  2 variables:
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ breaks: num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "terms")=Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a839e700> 
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "class")= chr "lm"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "338f8542fcf452fbf7a67320b9456b9a"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 64023
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:40.358] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:40.358] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.008 0 0.009 0 0
[10:49:40.358] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:40.358] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:40.387] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:40.388] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:40.388] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:40.388] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:40.388] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:40.388] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:40.388] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.388] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.388] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.388] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:40.389] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:40.389] |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:49:40.389] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:40.389] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:40.389] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:40.389] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:40.389] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:40.389] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:40.389] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:40.389] |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:40.389] |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:40.389] |  :  .  |  :  .  |  :  .  until=1
[10:49:40.390] |  :  .  |  :  .  |  :  .  relaying element #1
[10:49:40.390] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.390] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.390] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.390] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.390] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.390] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.390] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.390] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.391] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.391] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.391] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.391] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.391] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:40.391] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:40.391] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:40.391] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:40.391] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.391] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.391] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.392] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.392] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.392] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.392] |  :  .  |  :  .  |  :  .  value: <list>
[10:49:40.392] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:40.392] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:40.392] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:40.392] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:40.392] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:40.392] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:40.393] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:40.393] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:40.393] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:40.393] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:40.393] |  :  .  |  :  .  |  :  .  until=2
[10:49:40.393] |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:40.393] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:40.393] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:40.393] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:40.393] |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:49:40.393] |  :  .  |  :  .  |  checking value #1 ... done
[10:49:40.394] |  :  .  |  :  .  |  checking value #2 ...
[10:49:40.394] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:40.394] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:40.394] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:40.394] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:40.394] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:40.395] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:40.395] |  :  .  |  :  .  |  :  .  |  received data:
[10:49:40.395] |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:40.395] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. ..$ :List of 13
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ coefficients : Named num [1:2] 24 4.78
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:2] "(Intercept)" "woolB"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ residuals    : Named num [1:18] -6 -3 5 -7 -12 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:18] "10" "11" "12" "13" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ effects      : Named num [1:18] -111.96 10.14 6.44 -5.56 -10.56 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:18] "(Intercept)" "woolB" "" "" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ rank         : int 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ fitted.values: Named num [1:18] 24 24 24 24 24 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:18] "10" "11" "12" "13" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ assign       : int [1:2] 0 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ qr           :List of 5
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ qr   : num [1:18, 1:2] -4.243 0.236 0.236 0.236 0.236 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..$ : chr [1:18] "10" "11" "12" "13" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..$ : chr [1:2] "(Intercept)" "woolB"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "assign")= int [1:2] 0 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "contrasts")=List of 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ qraux: num [1:2] 1.24 1.19
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ pivot: int [1:2] 1 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ tol  : num 1e-07
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ rank : int 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "class")= chr "qr"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ df.residual  : int 16
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ contrasts    :List of 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ xlevels      :List of 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ wool: chr [1:2] "A" "B"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ call         : language lm(formula = breaks ~ wool, data = x, singular.ok = FALSE)
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ terms        :Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a8a08f20> 
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ model        :'data.frame':	18 obs. of  2 variables:
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ breaks: num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "terms")=Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a8a08f20> 
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "class")= chr "lm"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. ..$ :List of 13
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ coefficients : Named num [1:2] 24.56 -5.78
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:2] "(Intercept)" "woolB"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ residuals    : Named num [1:18] 11.444 -3.556 -0.556 -6.556 -14.556 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:18] "19" "20" "21" "22" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ effects      : Named num [1:18] -91.92 -12.26 -1.82 -7.82 -15.82 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:18] "(Intercept)" "woolB" "" "" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ rank         : int 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ fitted.values: Named num [1:18] 24.6 24.6 24.6 24.6 24.6 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:18] "19" "20" "21" "22" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ assign       : int [1:2] 0 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ qr           :List of 5
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ qr   : num [1:18, 1:2] -4.243 0.236 0.236 0.236 0.236 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..$ : chr [1:18] "19" "20" "21" "22" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..$ : chr [1:2] "(Intercept)" "woolB"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "assign")= int [1:2] 0 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "contrasts")=List of 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ qraux: num [1:2] 1.24 1.19
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ pivot: int [1:2] 1 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ tol  : num 1e-07
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ rank : int 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "class")= chr "qr"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ df.residual  : int 16
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ contrasts    :List of 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ xlevels      :List of 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ wool: chr [1:2] "A" "B"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ call         : language lm(formula = breaks ~ wool, data = x, singular.ok = FALSE)
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ terms        :Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a8a0b1f8> 
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ model        :'data.frame':	18 obs. of  2 variables:
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ breaks: num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "terms")=Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a8a0b1f8> 
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "class")= chr "lm"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "c9467a73b061973e3f5356f9952537d2"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 64022
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:40.395] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:40.395] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.007 0 0.007 0 0
[10:49:40.395] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:40.395] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:40.443] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:40.443] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:40.443] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:40.444] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:40.444] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:40.444] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:40.444] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:40.444] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:40.444] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:40.444] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:40.444] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:40.444] |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:49:40.444] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:40.444] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:40.445] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:40.445] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:40.445] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:40.445] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:40.445] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:40.445] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:40.445] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:40.445] |  :  .  |  :  .  |  :  .  until=2
[10:49:40.445] |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:40.445] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.445] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.446] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.446] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.446] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.446] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.446] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.446] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.446] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.446] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.446] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.446] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.447] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:40.447] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:40.447] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:40.447] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:40.447] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.447] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.447] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.447] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.447] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.447] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.447] |  :  .  |  :  .  |  :  .  value: <list>
[10:49:40.448] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:40.448] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:40.448] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:40.448] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:40.448] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:40.448] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:40.448] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:40.448] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:40.448] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:40.448] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:40.448] |  :  .  |  :  .  |  :  .  until=2
[10:49:40.448] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:40.449] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:40.449] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:40.449] |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:49:40.449] |  :  .  |  :  .  |  checking value #2 ... done
[10:49:40.449] |  :  .  |  :  .  |  Relaying remaining futures ...
[10:49:40.449] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:40.449] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:40.449] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:40.449] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:40.449] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:40.450] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:40.450] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:40.450] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:40.450] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:40.450] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:40.450] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:40.450] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:40.450] |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:49:40.450] |  :  .  |  :  .  value() on list ... done
[10:49:40.450]  - Number of value chunks collected: 2
[10:49:40.450] Resolving 2 futures (chunks) ... DONE
[10:49:40.451] Reducing values from 2 chunks ...
[10:49:40.451]  - Number of values collected after concatenation: 3
[10:49:40.451]  - Number of values expected: 3
[10:49:40.451] Reducing values from 2 chunks ... DONE
[10:49:40.451] future_lapply() ... DONE
[10:49:40.451] future_by_internal() ... DONE
[10:49:40.455] future_by_internal() ...
[10:49:40.455] future_lapply() ...
[10:49:40.456] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.456] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:40.457] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.457] Number of chunks: 2
[10:49:40.457] getGlobalsAndPackagesXApply() ...
[10:49:40.457]  - future.globals: TRUE
[10:49:40.457] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:40.457] |  :  .  |  :  .  |  Searching for globals ...
[10:49:40.459] |  :  .  |  :  .  |  :  globals found: [6] ‘FUN’, ‘{’, ‘lm’, ‘~’, ‘breaks’, ‘wool’
[10:49:40.459] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:49:40.459] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:40.459] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:40.460] |  :  .  |  :  .  |  :  Packages associated with globals: [2] ‘base’, ‘stats’
[10:49:40.460] |  :  .  |  :  .  |  :  Packages: [2] ‘base’, ‘stats’
[10:49:40.460] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:40.460] |  :  .  |  :  .  |  The total size of the 3 globals is 2.07 KiB (2118 bytes)
[10:49:40.461] |  :  .  |  :  .  |  The total size of the 3 globals exported for future expression (‘FUN()’) is 2.07 KiB There are three globals: ‘FUN’ (1.28 KiB of class ‘function’), ‘breaks’ (463 bytes of class ‘numeric’) and ‘wool’ (342 bytes of class ‘numeric’)
[10:49:40.462] |  :  .  |  :  .  |  Packages after dropping 'base': [1] ‘stats’
[10:49:40.463] |  :  .  |  :  .  |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:40.463] |  :  .  |  :  .  |  globals: [3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:40.463] |  :  .  |  :  .  |  packages: [1] ‘stats’
[10:49:40.463] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:40.463]  - globals found/used: [n=3] ‘FUN’, ‘breaks’, ‘wool’
[10:49:40.463]  - needed namespaces: [n=1] ‘stats’
[10:49:40.463] Finding globals ... DONE
[10:49:40.463]  - use_args: TRUE
[10:49:40.463]  - Getting '...' globals ...
[10:49:40.464] |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:40.464] |  :  .  |  :  .  |  recursive: 0
[10:49:40.464] |  :  .  |  :  .  |  length: 1
[10:49:40.464] |  :  .  |  :  .  |  elements: ‘...’
[10:49:40.464] |  :  .  |  :  .  |  'obj' is DotDotDotList
[10:49:40.464] |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:49:40.464] |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:49:40.465] |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:49:40.465] |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:40.465]    - '...' content: [n=0] 
[10:49:40.465] List of 1
[10:49:40.465]  $ ...: list()
[10:49:40.465]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:40.465]  - attr(*, "where")=List of 1
[10:49:40.465]   ..$ ...:<environment: 0x5564a7f810b0> 
[10:49:40.465]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:40.465]  - attr(*, "resolved")= logi TRUE
[10:49:40.465]  - attr(*, "total_size")= num NA
[10:49:40.467]  - Getting '...' globals ... DONE
[10:49:40.467] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’
[10:49:40.468] List of 4
[10:49:40.468]  $ ...future.FUN:function (x)  
[10:49:40.468]  $ breaks       : num [1:54] 26 30 54 25 70 52 51 26 67 18 ...
[10:49:40.468]  $ wool         : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
[10:49:40.468]  $ ...          : list()
[10:49:40.468]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:40.468]  - attr(*, "where")=List of 4
[10:49:40.468]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:40.468]   ..$ breaks       :<environment: R_EmptyEnv> 
[10:49:40.468]   ..$ wool         :<environment: R_EmptyEnv> 
[10:49:40.468]   ..$ ...          :<environment: 0x5564a7f810b0> 
[10:49:40.468]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:40.468]  - attr(*, "resolved")= logi FALSE
[10:49:40.468]  - attr(*, "total_size")= num 18867
[10:49:40.471] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:40.472] getGlobalsAndPackagesXApply() ... DONE
[10:49:40.472] Number of futures (= number of chunks): 2
[10:49:40.472] Launching 2 futures (chunks) ...
[10:49:40.472] Chunk #1 of 2 ...
[10:49:40.472]  - Finding globals in 'X' for chunk #1 ...
[10:49:40.472] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:40.472] |  :  .  |  :  .  |  Searching for globals ...
[10:49:40.473] |  :  .  |  :  .  |  :  globals found: [0] 
[10:49:40.473] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:49:40.473] |  :  .  |  :  .  |  globals: [0] <none>
[10:49:40.473] |  :  .  |  :  .  |  packages: [0] <none>
[10:49:40.473] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:40.473]    + additional globals found: [n=0] 
[10:49:40.473]    + additional namespaces needed: [n=0] 
[10:49:40.473]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:40.473]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:40.473]  - seeds: <none>
[10:49:40.474]  - All globals exported: [n=7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.474] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:40.474] |  :  .  |  :  .  |  globals passed as-is: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.474] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:40.474] |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:40.474] |  :  .  |  :  .  |  :  {
[10:49:40.474] |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.474] |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:40.474] |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:49:40.474] |  :  .  |  :  .  |  :      do.call(function(...) {
[10:49:40.474] |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:40.474] |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:40.474] |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:40.474] |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:49:40.474] |  :  .  |  :  .  |  :          "#                                                              "
[10:49:40.474] |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:40.474] |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:49:40.474] |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:40.474] |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:49:40.474] |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:49:40.474] |  :  .  |  :  .  |  :          repeat {
[10:49:40.474] |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:40.474] |  :  .  |  :  .  |  :                  emptyenv())) 
[10:49:40.474] |  :  .  |  :  .  |  :                  break
[10:49:40.474] |  :  .  |  :  .  |  :              penv <- env
[10:49:40.474] |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:49:40.474] |  :  .  |  :  .  |  :          }
[10:49:40.474] |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:49:40.474] |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:49:40.474] |  :  .  |  :  .  |  :          }
[10:49:40.474] |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:40.474] |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:49:40.474] |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:49:40.474] |  :  .  |  :  .  |  :          }
[10:49:40.474] |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:40.474] |  :  .  |  :  .  |  :          {
[10:49:40.474] |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.474] |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.474] |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.474] |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:49:40.474] |  :  .  |  :  .  |  :              }
[10:49:40.474] |  :  .  |  :  .  |  :              {
[10:49:40.474] |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.474] |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.474] |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:40.474] |  :  .  |  :  .  |  :                  })
[10:49:40.474] |  :  .  |  :  .  |  :              }
[10:49:40.474] |  :  .  |  :  .  |  :          }
[10:49:40.474] |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:49:40.474] |  :  .  |  :  .  |  :  }
[10:49:40.475] |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:40.475] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:40.475] |  :  .  |  :  .  |  :  Packages associated with globals: [0] 
[10:49:40.475] |  :  .  |  :  .  |  :  Packages: [0] 
[10:49:40.475] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:40.475] |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:49:40.476] |  :  .  |  :  .  |  globals: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.476] |  :  .  |  :  .  |  packages: [0] 
[10:49:40.476] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:40.476] |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:49:40.476] |  :  .  |  :  .  |  state: ‘created’
[10:49:40.476] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.476] |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.476] |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:49:40.477] |  :  .  |  :  .  |  :  Launching futures ...
[10:49:40.477] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:40.477] |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:49:40.477] |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:40.478] |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:40.478] |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:49:40.479] |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:49:40.479] |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:40.479] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:40.479] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.479] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:40.479] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:40.479] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.479] |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:40.479] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:40.479] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.480] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:40.480] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:40.480] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.480] |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:49:40.480] |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:40.560] |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:40.561] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:40.561] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:40.561] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:40.561] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:40.561] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:40.562] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:40.562] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:40.562] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:40.562] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:40.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘stats’
[10:49:40.562] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:40.562] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:40.562] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:40.562] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:40.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.563] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:40.563] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.563] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:40.563] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:40.563] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:40.563] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:40.563] |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:49:40.564] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:40.564] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:40.564] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:40.564] |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:40.564] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:40.564] |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:49:40.564] |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.564] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:40.564] |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:40.564] Created future:
[10:49:40.565] |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:40.566] |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:40.566] |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:40.566] |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:40.577] |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:40.565] MultisessionFuture:
[10:49:40.565] Label: ‘future_by-1’
[10:49:40.565] Expression:
[10:49:40.565] {
[10:49:40.565]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.565]     "# expression in do.call(), because function called uses '...'  "
[10:49:40.565]     "# as a global variable                                         "
[10:49:40.565]     do.call(function(...) {
[10:49:40.565]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:40.565]         "# without having an '...' argument. This means '...' is treated"
[10:49:40.565]         "# as a global variable. This may happen when FUN() is an       "
[10:49:40.565]         "# anonymous function.                                          "
[10:49:40.565]         "#                                                              "
[10:49:40.565]         "# If an anonymous function, we will make sure to restore the   "
[10:49:40.565]         "# function environment of FUN() to the calling environment.    "
[10:49:40.565]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:40.565]         "# global environment, which is where globals are written.      "
[10:49:40.565]         penv <- env <- environment(...future.FUN)
[10:49:40.565]         repeat {
[10:49:40.565]             if (identical(env, globalenv()) || identical(env, 
[10:49:40.565]                 emptyenv())) 
[10:49:40.565]                 break
[10:49:40.565]             penv <- env
[10:49:40.565]             env <- parent.env(env)
[10:49:40.565]         }
[10:49:40.565]         if (identical(penv, globalenv())) {
[10:49:40.565]             environment(...future.FUN) <- environment()
[10:49:40.565]         }
[10:49:40.565]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:40.565]             !isNamespace(penv)) {
[10:49:40.565]             parent.env(penv) <- environment()
[10:49:40.565]         }
[10:49:40.565]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:40.565]         {
[10:49:40.565]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.565]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.565]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.565]                 on.exit(options(oopts), add = TRUE)
[10:49:40.565]             }
[10:49:40.565]             {
[10:49:40.565]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.565]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.565]                   ...future.FUN(...future.X_jj, ...)
[10:49:40.565]                 })
[10:49:40.565]             }
[10:49:40.565]         }
[10:49:40.565]     }, args = future.call.arguments)
[10:49:40.565] }
[10:49:40.565] Lazy evaluation: FALSE
[10:49:40.565] Asynchronous evaluation: TRUE
[10:49:40.565] Local evaluation: TRUE
[10:49:40.565] Environment: 0x5564a7f529a0
[10:49:40.565] Capture standard output: TRUE
[10:49:40.565] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:40.565] Immediate condition classes: ‘immediateCondition’
[10:49:40.565] Globals: 7 objects totaling 2.93 KiB (function ‘...future.FUN’ of 1.28 KiB, numeric ‘breaks’ of 463 bytes, factor ‘wool’ of 342 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 736 bytes, ...)
[10:49:40.565] Packages: 1 packages (‘stats’)
[10:49:40.565] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:40.565] Resolved: FALSE
[10:49:40.565] Value: <not collected>
[10:49:40.565] Conditions captured: <none>
[10:49:40.565] Early signaling: FALSE
[10:49:40.565] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:40.565] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.577] Chunk #1 of 2 ... DONE
[10:49:40.577] Chunk #2 of 2 ...
[10:49:40.577]  - Finding globals in 'X' for chunk #2 ...
[10:49:40.577] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:40.578] |  :  .  |  :  .  |  :  Searching for globals ...
[10:49:40.578] |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:49:40.578] |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:49:40.578] |  :  .  |  :  .  |  :  globals: [0] <none>
[10:49:40.578] |  :  .  |  :  .  |  :  packages: [0] <none>
[10:49:40.578] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:40.578]    + additional globals found: [n=0] 
[10:49:40.579]    + additional namespaces needed: [n=0] 
[10:49:40.579]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:40.579]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:40.579]  - seeds: <none>
[10:49:40.579]  - All globals exported: [n=7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.579] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:40.579] |  :  .  |  :  .  |  :  globals passed as-is: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.579] |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:40.579] |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:40.580] |  :  .  |  :  .  |  :  .  {
[10:49:40.580] |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.580] |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:40.580] |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:49:40.580] |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:49:40.580] |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:40.580] |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:49:40.580] |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:49:40.580] |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:49:40.580] |  :  .  |  :  .  |  :  .          "#                                                              "
[10:49:40.580] |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:49:40.580] |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:49:40.580] |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:40.580] |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:49:40.580] |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:49:40.580] |  :  .  |  :  .  |  :  .          repeat {
[10:49:40.580] |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:49:40.580] |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:49:40.580] |  :  .  |  :  .  |  :  .                  break
[10:49:40.580] |  :  .  |  :  .  |  :  .              penv <- env
[10:49:40.580] |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:49:40.580] |  :  .  |  :  .  |  :  .          }
[10:49:40.580] |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:49:40.580] |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:49:40.580] |  :  .  |  :  .  |  :  .          }
[10:49:40.580] |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:40.580] |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:49:40.580] |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:49:40.580] |  :  .  |  :  .  |  :  .          }
[10:49:40.580] |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:40.580] |  :  .  |  :  .  |  :  .          {
[10:49:40.580] |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.580] |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.580] |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.580] |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:49:40.580] |  :  .  |  :  .  |  :  .              }
[10:49:40.580] |  :  .  |  :  .  |  :  .              {
[10:49:40.580] |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.580] |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.580] |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:49:40.580] |  :  .  |  :  .  |  :  .                  })
[10:49:40.580] |  :  .  |  :  .  |  :  .              }
[10:49:40.580] |  :  .  |  :  .  |  :  .          }
[10:49:40.580] |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:40.580] |  :  .  |  :  .  |  :  .  }
[10:49:40.580] |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:40.580] |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:40.580] |  :  .  |  :  .  |  :  .  Packages associated with globals: [0] 
[10:49:40.581] |  :  .  |  :  .  |  :  .  Packages: [0] 
[10:49:40.581] |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:40.581] |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:40.581] |  :  .  |  :  .  |  :  globals: [7] ‘...future.FUN’, ‘breaks’, ‘wool’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.581] |  :  .  |  :  .  |  :  packages: [0] 
[10:49:40.581] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:40.581] |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:49:40.581] |  :  .  |  :  .  |  :  state: ‘created’
[10:49:40.582] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.582] |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.582] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:40.582] |  :  .  |  :  .  |  :  .  Launching futures ...
[10:49:40.582] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:40.582] |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:40.582] |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:40.584] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:40.584] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:40.584] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:40.584] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:40.584] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:40.584] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.584] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:40.584] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:40.584] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.585] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:40.585] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:40.585] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.585] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:40.585] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:40.585] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.585] |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 2
[10:49:40.585] |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:40.664] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:40.665] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:40.665] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:40.665] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:40.665] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:40.665] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:40.666] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:40.666] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:40.666] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:40.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:40.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:40.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:40.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:40.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:40.666] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:40.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:40.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:40.667] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:40.667] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:40.667] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:40.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:49:40.668] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:49:40.668] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:40.668] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:40.668] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:40.668] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:40.668] |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:49:40.668] |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.668] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:40.668] |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:40.668] Created future:
[10:49:40.670] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:40.670] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:40.670] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:40.670] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:40.681] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:40.669] MultisessionFuture:
[10:49:40.669] Label: ‘future_by-2’
[10:49:40.669] Expression:
[10:49:40.669] {
[10:49:40.669]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.669]     "# expression in do.call(), because function called uses '...'  "
[10:49:40.669]     "# as a global variable                                         "
[10:49:40.669]     do.call(function(...) {
[10:49:40.669]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:40.669]         "# without having an '...' argument. This means '...' is treated"
[10:49:40.669]         "# as a global variable. This may happen when FUN() is an       "
[10:49:40.669]         "# anonymous function.                                          "
[10:49:40.669]         "#                                                              "
[10:49:40.669]         "# If an anonymous function, we will make sure to restore the   "
[10:49:40.669]         "# function environment of FUN() to the calling environment.    "
[10:49:40.669]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:40.669]         "# global environment, which is where globals are written.      "
[10:49:40.669]         penv <- env <- environment(...future.FUN)
[10:49:40.669]         repeat {
[10:49:40.669]             if (identical(env, globalenv()) || identical(env, 
[10:49:40.669]                 emptyenv())) 
[10:49:40.669]                 break
[10:49:40.669]             penv <- env
[10:49:40.669]             env <- parent.env(env)
[10:49:40.669]         }
[10:49:40.669]         if (identical(penv, globalenv())) {
[10:49:40.669]             environment(...future.FUN) <- environment()
[10:49:40.669]         }
[10:49:40.669]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:40.669]             !isNamespace(penv)) {
[10:49:40.669]             parent.env(penv) <- environment()
[10:49:40.669]         }
[10:49:40.669]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:40.669]         {
[10:49:40.669]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.669]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.669]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.669]                 on.exit(options(oopts), add = TRUE)
[10:49:40.669]             }
[10:49:40.669]             {
[10:49:40.669]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.669]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.669]                   ...future.FUN(...future.X_jj, ...)
[10:49:40.669]                 })
[10:49:40.669]             }
[10:49:40.669]         }
[10:49:40.669]     }, args = future.call.arguments)
[10:49:40.669] }
[10:49:40.669] Lazy evaluation: FALSE
[10:49:40.669] Asynchronous evaluation: TRUE
[10:49:40.669] Local evaluation: TRUE
[10:49:40.669] Environment: 0x5564a7f529a0
[10:49:40.669] Capture standard output: TRUE
[10:49:40.669] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:40.669] Immediate condition classes: ‘immediateCondition’
[10:49:40.669] Globals: 7 objects totaling 3.57 KiB (function ‘...future.FUN’ of 1.28 KiB, numeric ‘breaks’ of 463 bytes, factor ‘wool’ of 342 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.35 KiB, ...)
[10:49:40.669] Packages: 1 packages (‘stats’)
[10:49:40.669] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:40.669] Resolved: FALSE
[10:49:40.669] Value: <not collected>
[10:49:40.669] Conditions captured: <none>
[10:49:40.669] Early signaling: FALSE
[10:49:40.669] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:40.669] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.681] Chunk #2 of 2 ... DONE
[10:49:40.681] Launching 2 futures (chunks) ... DONE
[10:49:40.681] Resolving 2 futures (chunks) ...
[10:49:40.681] |  :  .  |  :  .  |  :  value() on list ...
[10:49:40.682] |  :  .  |  :  .  |  :  .  recursive: 0
[10:49:40.682] |  :  .  |  :  .  |  :  .  length: 2
[10:49:40.682] |  :  .  |  :  .  |  :  .  
[10:49:40.682] |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:49:40.682] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:49:40.682] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:40.682] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:40.682] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:40.683] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:40.683] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:40.683] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:40.683] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:40.683] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:49:40.683] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ :List of 13
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ coefficients : Named num [1:2] 44.6 -16.3
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:2] "(Intercept)" "woolB"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ residuals    : Named num [1:18] -18.56 -14.56 9.44 -19.56 25.44 ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:18] "1" "2" "3" "4" ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ effects      : Named num [1:18] -154.4 -34.6 14.7 -14.3 30.7 ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:18] "(Intercept)" "woolB" "" "" ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ rank         : int 2
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ fitted.values: Named num [1:18] 44.6 44.6 44.6 44.6 44.6 ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:18] "1" "2" "3" "4" ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ assign       : int [1:2] 0 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ qr           :List of 5
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ qr   : num [1:18, 1:2] -4.243 0.236 0.236 0.236 0.236 ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..$ : chr [1:18] "1" "2" "3" "4" ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..$ : chr [1:2] "(Intercept)" "woolB"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "assign")= int [1:2] 0 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "contrasts")=List of 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ qraux: num [1:2] 1.24 1.19
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ pivot: int [1:2] 1 2
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ tol  : num 1e-07
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ rank : int 2
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "class")= chr "qr"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ df.residual  : int 16
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ contrasts    :List of 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ xlevels      :List of 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ wool: chr [1:2] "A" "B"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ call         : language lm(formula = breaks ~ wool, data = x)
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ terms        :Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a7bad6d0> 
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ model        :'data.frame':	18 obs. of  2 variables:
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ breaks: num [1:18] 26 30 54 25 70 52 51 26 67 27 ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "terms")=Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a7bad6d0> 
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "class")= chr "lm"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "338f8542fcf452fbf7a67320b9456b9a"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 64023
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:40.684] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:49:40.714] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:49:40.714] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:40.715] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:49:40.715] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:40.715] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:40.715] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:49:40.715] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.715] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.715] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.715] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:40.715] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:40.715] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  :  until=1
[10:49:40.716] |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:49:40.717] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.717] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.717] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.717] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.717] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.717] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.717] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.717] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.717] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.717] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.718] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:40.719] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:40.720] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:40.720] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:40.720] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:49:40.720] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:40.720] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:40.720] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:49:40.720] |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 1)
[10:49:40.720] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:49:40.720] |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:49:40.720] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:40.721] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:40.721] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:40.721] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:40.721] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:40.721] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:40.721] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ :List of 13
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ coefficients : Named num [1:2] 24 4.78
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:2] "(Intercept)" "woolB"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ residuals    : Named num [1:18] -6 -3 5 -7 -12 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:18] "10" "11" "12" "13" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ effects      : Named num [1:18] -111.96 10.14 6.44 -5.56 -10.56 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:18] "(Intercept)" "woolB" "" "" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ rank         : int 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ fitted.values: Named num [1:18] 24 24 24 24 24 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:18] "10" "11" "12" "13" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ assign       : int [1:2] 0 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ qr           :List of 5
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ qr   : num [1:18, 1:2] -4.243 0.236 0.236 0.236 0.236 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..$ : chr [1:18] "10" "11" "12" "13" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..$ : chr [1:2] "(Intercept)" "woolB"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "assign")= int [1:2] 0 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "contrasts")=List of 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ qraux: num [1:2] 1.24 1.19
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ pivot: int [1:2] 1 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ tol  : num 1e-07
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ rank : int 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "class")= chr "qr"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ df.residual  : int 16
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ contrasts    :List of 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ xlevels      :List of 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ wool: chr [1:2] "A" "B"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ call         : language lm(formula = breaks ~ wool, data = x)
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ terms        :Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a5a64590> 
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ model        :'data.frame':	18 obs. of  2 variables:
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ breaks: num [1:18] 18 21 29 17 12 18 35 30 36 42 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "terms")=Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a5a64590> 
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "class")= chr "lm"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ :List of 13
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ coefficients : Named num [1:2] 24.56 -5.78
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:2] "(Intercept)" "woolB"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ residuals    : Named num [1:18] 11.444 -3.556 -0.556 -6.556 -14.556 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:18] "19" "20" "21" "22" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ effects      : Named num [1:18] -91.92 -12.26 -1.82 -7.82 -15.82 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:18] "(Intercept)" "woolB" "" "" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ rank         : int 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ fitted.values: Named num [1:18] 24.6 24.6 24.6 24.6 24.6 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:18] "19" "20" "21" "22" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ assign       : int [1:2] 0 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ qr           :List of 5
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ qr   : num [1:18, 1:2] -4.243 0.236 0.236 0.236 0.236 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..$ : chr [1:18] "19" "20" "21" "22" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..$ : chr [1:2] "(Intercept)" "woolB"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "assign")= int [1:2] 0 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "contrasts")=List of 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ qraux: num [1:2] 1.24 1.19
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ pivot: int [1:2] 1 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ tol  : num 1e-07
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ rank : int 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "class")= chr "qr"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ df.residual  : int 16
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ contrasts    :List of 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ wool: chr "contr.treatment"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ xlevels      :List of 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ wool: chr [1:2] "A" "B"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ call         : language lm(formula = breaks ~ wool, data = x)
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ terms        :Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a5a5e728> 
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ model        :'data.frame':	18 obs. of  2 variables:
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ breaks: num [1:18] 36 21 24 18 10 43 28 15 26 20 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ wool  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 2 ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "terms")=Classes 'terms', 'formula'  language breaks ~ wool
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "variables")= language list(breaks, wool)
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..- attr(*, "dimnames")=List of 2
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. .. ..$ : chr [1:2] "breaks" "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. .. ..$ : chr "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "term.labels")= chr "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "order")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "intercept")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "response")= int 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, ".Environment")=<environment: 0x5564a5a5e728> 
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "predvars")= language list(breaks, wool)
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "factor"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. .. ..- attr(*, "names")= chr [1:2] "breaks" "wool"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "class")= chr "lm"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "c9467a73b061973e3f5356f9952537d2"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 64022
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.004 0.001 0.005 0 0
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:40.722] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:49:40.769] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:49:40.769] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:40.769] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:49:40.769] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:40.769] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:40.769] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:49:40.769] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:40.769] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:40.769] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:40.769] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:40.770] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:40.771] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:40.771] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:49:40.771] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.771] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.771] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.771] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.771] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.771] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.771] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.771] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.772] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.774] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:40.774] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:40.775] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:40.776] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:40.776] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:40.776] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:40.776] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:40.776] |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 2)
[10:49:40.776] |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:49:40.776] |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:49:40.776] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:49:40.776] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:40.776] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:40.777] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:40.777] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:40.777] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:40.777] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:40.777] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:40.777] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:40.777] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:40.777] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:40.777] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:49:40.777] |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:49:40.777] |  :  .  |  :  .  |  :  value() on list ... done
[10:49:40.778]  - Number of value chunks collected: 2
[10:49:40.778] Resolving 2 futures (chunks) ... DONE
[10:49:40.778] Reducing values from 2 chunks ...
[10:49:40.778]  - Number of values collected after concatenation: 3
[10:49:40.778]  - Number of values expected: 3
[10:49:40.778] Reducing values from 2 chunks ... DONE
[10:49:40.778] future_lapply() ... DONE
[10:49:40.778] future_by_internal() ... DONE
[10:49:40.778] future_by_internal() ...
[10:49:40.779] future_lapply() ...
[10:49:40.779] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.780] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:40.780] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.780] Number of chunks: 2
[10:49:40.780] getGlobalsAndPackagesXApply() ...
[10:49:40.780]  - future.globals: TRUE
[10:49:40.780] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:40.780] |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:49:40.782] |  :  .  |  :  .  |  :  .  |  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:40.782] |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:49:40.782] |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:49:40.782] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:40.782] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:40.782] |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:49:40.783] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:40.783] |  :  .  |  :  .  |  :  .  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:40.783] |  :  .  |  :  .  |  :  .  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:40.783] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:49:40.783] |  :  .  |  :  .  |  :  .  globals: [1] ‘FUN’
[10:49:40.783] |  :  .  |  :  .  |  :  .  packages: [0] 
[10:49:40.783] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:40.784]  - globals found/used: [n=1] ‘FUN’
[10:49:40.784]  - needed namespaces: [n=0] 
[10:49:40.784] Finding globals ... DONE
[10:49:40.784]  - use_args: TRUE
[10:49:40.784]  - Getting '...' globals ...
[10:49:40.784] |  :  .  |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:40.784] |  :  .  |  :  .  |  :  .  recursive: 0
[10:49:40.784] |  :  .  |  :  .  |  :  .  length: 1
[10:49:40.785] |  :  .  |  :  .  |  :  .  elements: ‘...’
[10:49:40.785] |  :  .  |  :  .  |  :  .  'obj' is DotDotDotList
[10:49:40.785] |  :  .  |  :  .  |  :  .  resolve(obj, ...) ...
[10:49:40.785] |  :  .  |  :  .  |  :  .  resolve(obj, ...) ... done
[10:49:40.785] |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:49:40.785] |  :  .  |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:40.785]    - '...' content: [n=0] 
[10:49:40.785] List of 1
[10:49:40.785]  $ ...: list()
[10:49:40.785]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:40.785]  - attr(*, "where")=List of 1
[10:49:40.785]   ..$ ...:<environment: 0x5564a69633b8> 
[10:49:40.785]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:40.785]  - attr(*, "resolved")= logi TRUE
[10:49:40.785]  - attr(*, "total_size")= num NA
[10:49:40.788]  - Getting '...' globals ... DONE
[10:49:40.788] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:40.788] List of 2
[10:49:40.788]  $ ...future.FUN:function (object, ...)  
[10:49:40.788]  $ ...          : list()
[10:49:40.788]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:40.788]  - attr(*, "where")=List of 2
[10:49:40.788]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:40.788]   ..$ ...          :<environment: 0x5564a69633b8> 
[10:49:40.788]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:40.788]  - attr(*, "resolved")= logi FALSE
[10:49:40.788]  - attr(*, "total_size")= num 19278
[10:49:40.792] Packages to be attached in all futures: [n=0] 
[10:49:40.792] getGlobalsAndPackagesXApply() ... DONE
[10:49:40.793] Number of futures (= number of chunks): 2
[10:49:40.793] Launching 2 futures (chunks) ...
[10:49:40.793] Chunk #1 of 2 ...
[10:49:40.793]  - Finding globals in 'X' for chunk #1 ...
[10:49:40.793] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:40.793] |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:49:40.794] |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:49:40.794] |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:49:40.794] |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:49:40.794] |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:49:40.794] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:40.794]    + additional globals found: [n=0] 
[10:49:40.794]    + additional namespaces needed: [n=0] 
[10:49:40.795]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:40.795]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:40.795]  - seeds: <none>
[10:49:40.795]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.795] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:40.795] |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.795] |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:49:40.796] |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:40.796] |  :  .  |  :  .  |  :  .  |  {
[10:49:40.796] |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.796] |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:40.796] |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:49:40.796] |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:49:40.796] |  :  .  |  :  .  |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.796] |  :  .  |  :  .  |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.796] |  :  .  |  :  .  |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.796] |  :  .  |  :  .  |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:49:40.796] |  :  .  |  :  .  |  :  .  |          }
[10:49:40.796] |  :  .  |  :  .  |  :  .  |          {
[10:49:40.796] |  :  .  |  :  .  |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.796] |  :  .  |  :  .  |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.796] |  :  .  |  :  .  |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:49:40.796] |  :  .  |  :  .  |  :  .  |              })
[10:49:40.796] |  :  .  |  :  .  |  :  .  |          }
[10:49:40.796] |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:49:40.796] |  :  .  |  :  .  |  :  .  |  }
[10:49:40.796] |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:40.796] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:40.797] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:40.797] |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:49:40.797] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:40.797] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:49:40.798] |  :  .  |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.798] |  :  .  |  :  .  |  :  .  packages: [0] 
[10:49:40.798] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:40.798] |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:49:40.798] |  :  .  |  :  .  |  :  .  state: ‘created’
[10:49:40.798] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.799] |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.799] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:49:40.799] |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:49:40.799] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:40.799] |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:49:40.799] |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:40.801] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:40.801] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:49:40.801] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:49:40.802] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:40.802] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:40.802] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.802] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:40.802] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:40.802] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.802] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:40.802] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:40.803] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.803] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:40.803] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:40.803] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.803] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:49:40.803] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:40.884] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:40.885] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:40.885] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:40.885] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:49:40.885] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:40.885] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:40.885] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:49:40.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:40.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:40.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:40.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:49:40.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:40.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:40.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:40.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:40.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:40.887] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.887] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:40.887] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:40.887] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:40.887] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:40.887] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:49:40.887] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:40.888] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:40.888] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:49:40.888] |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:49:40.888] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:40.888] |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:49:40.888] |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.888] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:40.888] |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:40.888] Created future:
[10:49:40.889] |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:40.890] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:40.890] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:40.890] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:40.900] |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:40.888] MultisessionFuture:
[10:49:40.888] Label: ‘future_by-1’
[10:49:40.888] Expression:
[10:49:40.888] {
[10:49:40.888]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.888]     "# expression in do.call(), because function called uses '...'  "
[10:49:40.888]     "# as a global variable                                         "
[10:49:40.888]     do.call(function(...) {
[10:49:40.888]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.888]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.888]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.888]             on.exit(options(oopts), add = TRUE)
[10:49:40.888]         }
[10:49:40.888]         {
[10:49:40.888]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.888]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.888]                 ...future.FUN(...future.X_jj, ...)
[10:49:40.888]             })
[10:49:40.888]         }
[10:49:40.888]     }, args = future.call.arguments)
[10:49:40.888] }
[10:49:40.888] Lazy evaluation: FALSE
[10:49:40.888] Asynchronous evaluation: TRUE
[10:49:40.888] Local evaluation: TRUE
[10:49:40.888] Environment: 0x5564a699d990
[10:49:40.888] Capture standard output: TRUE
[10:49:40.888] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:40.888] Immediate condition classes: ‘immediateCondition’
[10:49:40.888] Globals: 5 objects totaling 1.14 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 736 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:40.888] Packages: <none>
[10:49:40.888] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:40.888] Resolved: FALSE
[10:49:40.888] Value: <not collected>
[10:49:40.888] Conditions captured: <none>
[10:49:40.888] Early signaling: FALSE
[10:49:40.888] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:40.888] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.901] Chunk #1 of 2 ... DONE
[10:49:40.901] Chunk #2 of 2 ...
[10:49:40.901]  - Finding globals in 'X' for chunk #2 ...
[10:49:40.901] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:40.901] |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:49:40.902] |  :  .  |  :  .  |  :  .  |  :  globals found: [0] 
[10:49:40.902] |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:49:40.902] |  :  .  |  :  .  |  :  .  |  globals: [0] <none>
[10:49:40.902] |  :  .  |  :  .  |  :  .  |  packages: [0] <none>
[10:49:40.902] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:40.902]    + additional globals found: [n=0] 
[10:49:40.902]    + additional namespaces needed: [n=0] 
[10:49:40.902]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:40.902]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:40.903]  - seeds: <none>
[10:49:40.903]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.903] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :  {
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :              on.exit(options(oopts), add = TRUE)
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :          }
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :          {
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :              })
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :          }
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:49:40.903] |  :  .  |  :  .  |  :  .  |  :  }
[10:49:40.904] |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:40.904] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:40.904] |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:40.904] |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:49:40.904] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:40.904] |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:49:40.904] |  :  .  |  :  .  |  :  .  |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:40.905] |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:49:40.905] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:40.905] |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:49:40.905] |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:49:40.905] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.905] |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.905] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:49:40.905] |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:49:40.906] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:40.906] |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:49:40.906] |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:40.907] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:40.907] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:49:40.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:49:40.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:40.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:40.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:40.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:40.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:40.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:40.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:40.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:40.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:40.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:40.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:49:40.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:40.987] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:40.988] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:40.988] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:40.988] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:40.988] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:40.988] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:40.989] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:40.989] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:40.989] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:40.989] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:40.989] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:40.989] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:40.989] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:40.989] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:40.989] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:40.989] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:40.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:40.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:40.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:40.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:40.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:40.990] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:40.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:49:40.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:49:40.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:40.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:40.991] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:40.991] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:40.991] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:49:40.991] |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:40.991] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:40.991] |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:40.992] Created future:
[10:49:40.993] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:40.993] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:40.993] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:40.993] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:41.004] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:40.992] MultisessionFuture:
[10:49:40.992] Label: ‘future_by-2’
[10:49:40.992] Expression:
[10:49:40.992] {
[10:49:40.992]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:40.992]     "# expression in do.call(), because function called uses '...'  "
[10:49:40.992]     "# as a global variable                                         "
[10:49:40.992]     do.call(function(...) {
[10:49:40.992]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:40.992]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:40.992]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:40.992]             on.exit(options(oopts), add = TRUE)
[10:49:40.992]         }
[10:49:40.992]         {
[10:49:40.992]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:40.992]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:40.992]                 ...future.FUN(...future.X_jj, ...)
[10:49:40.992]             })
[10:49:40.992]         }
[10:49:40.992]     }, args = future.call.arguments)
[10:49:40.992] }
[10:49:40.992] Lazy evaluation: FALSE
[10:49:40.992] Asynchronous evaluation: TRUE
[10:49:40.992] Local evaluation: TRUE
[10:49:40.992] Environment: 0x5564a699d990
[10:49:40.992] Capture standard output: TRUE
[10:49:40.992] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:40.992] Immediate condition classes: ‘immediateCondition’
[10:49:40.992] Globals: 5 objects totaling 1.77 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.35 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:40.992] Packages: <none>
[10:49:40.992] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:40.992] Resolved: FALSE
[10:49:40.992] Value: <not collected>
[10:49:40.992] Conditions captured: <none>
[10:49:40.992] Early signaling: FALSE
[10:49:40.992] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:40.992] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:41.004] Chunk #2 of 2 ... DONE
[10:49:41.004] Launching 2 futures (chunks) ... DONE
[10:49:41.004] Resolving 2 futures (chunks) ...
[10:49:41.004] |  :  .  |  :  .  |  :  .  |  value() on list ...
[10:49:41.004] |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:49:41.005] |  :  .  |  :  .  |  :  .  |  :  length: 2
[10:49:41.005] |  :  .  |  :  .  |  :  .  |  :  
[10:49:41.005] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 2
[10:49:41.005] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:49:41.005] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:41.005] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:41.005] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:41.005] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : 'table' chr [1:6, 1:3] "Min.   :14.00  " "1st Qu.:26.00  " "Median :29.50  " "Mean   :36.39  " ...
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "dimnames")=List of 2
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..$ : chr [1:6] "" "" "" "" ...
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..$ : chr [1:3] "    breaks" "wool" "tension"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:40"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "338f8542fcf452fbf7a67320b9456b9a"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 64023
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.006 0.001 0.007 0 0
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:41.006] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:41.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:49:41.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:41.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:41.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:41.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:41.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:41.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:41.018] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #1
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:41.019] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:41.020] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:49:41.020] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:49:41.020] |  :  .  |  :  .  |  :  .  |  :  .  |  until=1
[10:49:41.020] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #1
[10:49:41.020] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.020] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.020] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.020] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.020] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.021] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.021] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.021] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.021] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.021] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.021] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:41.021] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:41.021] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:41.021] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:41.022] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.022] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.022] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.022] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.022] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.022] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.022] |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:49:41.022] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:41.022] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:41.022] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:41.023] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:41.025] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:49:41.026] |  :  .  |  :  .  |  :  .  |  :  .  length: 1 (resolved future 1)
[10:49:41.026] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:49:41.026] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:49:41.026] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:41.026] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:41.026] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:41.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:41.027] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 2
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : 'table' chr [1:6, 1:3] "Min.   :12.00  " "1st Qu.:18.25  " "Median :27.00  " "Mean   :26.39  " ...
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "dimnames")=List of 2
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..$ : chr [1:6] "" "" "" "" ...
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..$ : chr [1:3] "    breaks" "wool" "tension"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : 'table' chr [1:6, 1:3] "Min.   :10.00  " "1st Qu.:15.25  " "Median :20.50  " "Mean   :21.67  " ...
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "dimnames")=List of 2
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..$ : chr [1:6] "" "" "" "" ...
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..$ : chr [1:3] "    breaks" "wool" "tension"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:41"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:41"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "c9467a73b061973e3f5356f9952537d2"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 64022
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:41.036] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:41.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:49:41.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:41.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #2
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:41.049] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.050] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.051] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.051] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.051] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.051] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.051] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.051] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.051] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.051] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:41.052] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:41.052] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:41.052] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:41.052] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.052] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.052] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.052] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.052] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.052] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.052] |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:49:41.053] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 2)
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ...
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:41.054] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:41.055] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:41.055] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:41.055] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:41.055] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:41.055] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:41.055] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:49:41.055] |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ... done
[10:49:41.055] |  :  .  |  :  .  |  :  .  |  value() on list ... done
[10:49:41.055]  - Number of value chunks collected: 2
[10:49:41.055] Resolving 2 futures (chunks) ... DONE
[10:49:41.055] Reducing values from 2 chunks ...
[10:49:41.056]  - Number of values collected after concatenation: 3
[10:49:41.056]  - Number of values expected: 3
[10:49:41.056] Reducing values from 2 chunks ... DONE
[10:49:41.056] future_lapply() ... DONE
[10:49:41.056] future_by_internal() ... DONE
[10:49:41.057] future_by_internal() ...
Warning in future_by_match_FUN(FUN) :
  Specifying the function 'FUN' for future_by() as a character string is deprecated in future.apply (>= 1.10.0) [2022-11-04], because base::by() does not support it. Instead, specify it as a function, e.g. FUN = sqrt and FUN = `[[`. It is deprecated.
[10:49:41.057] future_lapply() ...
[10:49:41.058] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.058] |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:41.058] |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.058] Number of chunks: 2
[10:49:41.059] getGlobalsAndPackagesXApply() ...
[10:49:41.059]  - future.globals: TRUE
[10:49:41.059] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:41.059] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:49:41.060] |  :  .  |  :  .  |  :  .  |  :  .  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:41.060] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:49:41.060] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:41.060] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:41.061] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:49:41.061] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:49:41.061] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:41.061] |  :  .  |  :  .  |  :  .  |  :  The total size of the 1 globals is 281 bytes (281 bytes)
[10:49:41.061] |  :  .  |  :  .  |  :  .  |  :  The total size of the 1 globals exported for future expression (‘FUN()’) is 281 bytes There is one global: ‘FUN’ (281 bytes of class ‘function’)
[10:49:41.061] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:41.062] |  :  .  |  :  .  |  :  .  |  :  globals: [1] ‘FUN’
[10:49:41.062] |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:49:41.062] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:41.062]  - globals found/used: [n=1] ‘FUN’
[10:49:41.062]  - needed namespaces: [n=0] 
[10:49:41.062] Finding globals ... DONE
[10:49:41.062]  - use_args: TRUE
[10:49:41.062]  - Getting '...' globals ...
[10:49:41.063] |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:41.063] |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:49:41.063] |  :  .  |  :  .  |  :  .  |  :  length: 1
[10:49:41.063] |  :  .  |  :  .  |  :  .  |  :  elements: ‘...’
[10:49:41.063] |  :  .  |  :  .  |  :  .  |  :  'obj' is DotDotDotList
[10:49:41.063] |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:49:41.063] |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:49:41.063] |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:49:41.064] |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:41.064]    - '...' content: [n=0] 
[10:49:41.064] List of 1
[10:49:41.064]  $ ...: list()
[10:49:41.064]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.064]  - attr(*, "where")=List of 1
[10:49:41.064]   ..$ ...:<environment: 0x5564a3878080> 
[10:49:41.064]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.064]  - attr(*, "resolved")= logi TRUE
[10:49:41.064]  - attr(*, "total_size")= num NA
[10:49:41.066]  - Getting '...' globals ... DONE
[10:49:41.066] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:41.066] List of 2
[10:49:41.066]  $ ...future.FUN:function (object, ...)  
[10:49:41.066]  $ ...          : list()
[10:49:41.066]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:41.066]  - attr(*, "where")=List of 2
[10:49:41.066]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:41.066]   ..$ ...          :<environment: 0x5564a3878080> 
[10:49:41.066]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:41.066]  - attr(*, "resolved")= logi FALSE
[10:49:41.066]  - attr(*, "total_size")= num 18647
[10:49:41.069] Packages to be attached in all futures: [n=0] 
[10:49:41.069] getGlobalsAndPackagesXApply() ... DONE
[10:49:41.069] Number of futures (= number of chunks): 2
[10:49:41.070] Launching 2 futures (chunks) ...
[10:49:41.070] Chunk #1 of 2 ...
[10:49:41.070]  - Finding globals in 'X' for chunk #1 ...
[10:49:41.070] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:41.070] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:49:41.070] |  :  .  |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:49:41.070] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:49:41.071] |  :  .  |  :  .  |  :  .  |  :  globals: [0] <none>
[10:49:41.071] |  :  .  |  :  .  |  :  .  |  :  packages: [0] <none>
[10:49:41.071] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:41.071]    + additional globals found: [n=0] 
[10:49:41.071]    + additional namespaces needed: [n=0] 
[10:49:41.071]  - Finding globals in 'X' for chunk #1 ... DONE
[10:49:41.071]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:41.071]  - seeds: <none>
[10:49:41.071]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.071] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:41.071] |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .  {
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .              on.exit(options(oopts), add = TRUE)
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .          {
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .              })
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .  }
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:41.072] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:49:41.073] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:49:41.073] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:41.073] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:41.073] |  :  .  |  :  .  |  :  .  |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.073] |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:49:41.073] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:41.073] |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:49:41.074] |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:49:41.074] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.074] |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.074] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:41.074] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:49:41.074] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:41.074] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:41.074] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:41.076] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:41.076] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:41.076] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:41.076] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:41.076] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:41.077] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:49:41.078] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:41.155] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:41.155] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:41.156] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:41.156] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:41.156] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:41.156] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:41.156] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:41.157] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:41.157] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:41.157] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:41.157] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:41.157] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:41.157] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:41.157] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:41.157] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:41.157] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.158] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:41.158] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.158] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:41.158] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:41.158] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:41.158] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:41.158] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:49:41.159] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:41.159] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:41.159] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:41.159] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:41.159] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:41.159] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:49:41.159] |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:41.159] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:41.159] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:41.159] Created future:
[10:49:41.160] |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:41.161] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:41.161] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:41.161] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:41.171] |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:41.160] MultisessionFuture:
[10:49:41.160] Label: ‘future_by-1’
[10:49:41.160] Expression:
[10:49:41.160] {
[10:49:41.160]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.160]     "# expression in do.call(), because function called uses '...'  "
[10:49:41.160]     "# as a global variable                                         "
[10:49:41.160]     do.call(function(...) {
[10:49:41.160]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.160]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.160]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.160]             on.exit(options(oopts), add = TRUE)
[10:49:41.160]         }
[10:49:41.160]         {
[10:49:41.160]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.160]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.160]                 ...future.FUN(...future.X_jj, ...)
[10:49:41.160]             })
[10:49:41.160]         }
[10:49:41.160]     }, args = future.call.arguments)
[10:49:41.160] }
[10:49:41.160] Lazy evaluation: FALSE
[10:49:41.160] Asynchronous evaluation: TRUE
[10:49:41.160] Local evaluation: TRUE
[10:49:41.160] Environment: 0x5564a3953d40
[10:49:41.160] Capture standard output: TRUE
[10:49:41.160] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:41.160] Immediate condition classes: ‘immediateCondition’
[10:49:41.160] Globals: 5 objects totaling 1.14 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 736 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:41.160] Packages: <none>
[10:49:41.160] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:41.160] Resolved: FALSE
[10:49:41.160] Value: <not collected>
[10:49:41.160] Conditions captured: <none>
[10:49:41.160] Early signaling: FALSE
[10:49:41.160] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:41.160] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:41.172] Chunk #1 of 2 ... DONE
[10:49:41.172] Chunk #2 of 2 ...
[10:49:41.172]  - Finding globals in 'X' for chunk #2 ...
[10:49:41.172] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:41.172] |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:49:41.173] |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:49:41.173] |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:49:41.173] |  :  .  |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:49:41.173] |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:49:41.173] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:41.173]    + additional globals found: [n=0] 
[10:49:41.173]    + additional namespaces needed: [n=0] 
[10:49:41.174]  - Finding globals in 'X' for chunk #2 ... DONE
[10:49:41.174]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:49:41.174]  - seeds: <none>
[10:49:41.174]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |              })
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:49:41.174] |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:49:41.175] |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:41.175] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:41.175] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:41.175] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:49:41.175] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:41.176] |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:49:41.176] |  :  .  |  :  .  |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:41.176] |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] 
[10:49:41.176] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:41.176] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:49:41.176] |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:49:41.176] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.176] |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.177] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:49:41.177] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:49:41.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:41.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:49:41.177] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:41.178] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-8c313972092992a842ab74c687cbd0db’
[10:49:41.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:49:41.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:49:41.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:41.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:41.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:41.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:41.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:41.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:41.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:41.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:41.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ...
[10:49:41.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:41.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:41.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'list', earlySignal = 0) ... done
[10:49:41.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:49:41.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:41.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:41.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:41.259] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:41.259] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:49:41.259] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:41.259] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:41.259] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:49:41.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:41.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:41.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:41.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:49:41.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:41.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:41.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:41.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:41.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.261] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:41.261] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.261] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:41.261] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:41.261] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:41.261] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ...
[10:49:41.261] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:49:41.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:49:41.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'add', earlySignal = 0) ... done
[10:49:41.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:49:41.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:49:41.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:41.262] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:49:41.264] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:41.264] |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:41.264] |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:41.264] Created future:
[10:49:41.265] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:41.266] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:41.266] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:41.266] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:41.276] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:41.265] MultisessionFuture:
[10:49:41.265] Label: ‘future_by-2’
[10:49:41.265] Expression:
[10:49:41.265] {
[10:49:41.265]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:41.265]     "# expression in do.call(), because function called uses '...'  "
[10:49:41.265]     "# as a global variable                                         "
[10:49:41.265]     do.call(function(...) {
[10:49:41.265]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:41.265]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:41.265]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:41.265]             on.exit(options(oopts), add = TRUE)
[10:49:41.265]         }
[10:49:41.265]         {
[10:49:41.265]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:41.265]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:41.265]                 ...future.FUN(...future.X_jj, ...)
[10:49:41.265]             })
[10:49:41.265]         }
[10:49:41.265]     }, args = future.call.arguments)
[10:49:41.265] }
[10:49:41.265] Lazy evaluation: FALSE
[10:49:41.265] Asynchronous evaluation: TRUE
[10:49:41.265] Local evaluation: TRUE
[10:49:41.265] Environment: 0x5564a3953d40
[10:49:41.265] Capture standard output: TRUE
[10:49:41.265] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:41.265] Immediate condition classes: ‘immediateCondition’
[10:49:41.265] Globals: 5 objects totaling 1.77 KiB (function ‘...future.FUN’ of 281 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.35 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:49:41.265] Packages: <none>
[10:49:41.265] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:41.265] Resolved: FALSE
[10:49:41.265] Value: <not collected>
[10:49:41.265] Conditions captured: <none>
[10:49:41.265] Early signaling: FALSE
[10:49:41.265] Owner process: cd0bdb1b955f1d27de558e3a0570bcff
[10:49:41.265] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:41.277] Chunk #2 of 2 ... DONE
[10:49:41.277] Launching 2 futures (chunks) ... DONE
[10:49:41.277] Resolving 2 futures (chunks) ...
[10:49:41.277] |  :  .  |  :  .  |  :  .  |  :  .  value() on list ...
[10:49:41.277] |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:49:41.277] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 2
[10:49:41.278] |  :  .  |  :  .  |  :  .  |  :  .  |  
[10:49:41.278] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 2
[10:49:41.278] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:49:41.278] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:41.278] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:41.278] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:41.278] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : 'table' chr [1:6, 1:3] "Min.   :14.00  " "1st Qu.:26.00  " "Median :29.50  " "Mean   :36.39  " ...
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "dimnames")=List of 2
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ : chr [1:6] "" "" "" "" ...
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ : chr [1:3] "    breaks" "wool" "tension"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:41"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:41"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "338f8542fcf452fbf7a67320b9456b9a"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 64023
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.005 0.001 0.005 0 0
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:41.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:41.290] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:41.290] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:41.290] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:41.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=1
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #1
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.292] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.294] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:49:41.295] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:41.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:41.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:41.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:41.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:49:41.296] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:49:41.296] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:49:41.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:41.296] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:41.297] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:41.297] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:41.297] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:41.306] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 2
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : 'table' chr [1:6, 1:3] "Min.   :12.00  " "1st Qu.:18.25  " "Median :27.00  " "Mean   :26.39  " ...
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "dimnames")=List of 2
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ : chr [1:6] "" "" "" "" ...
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ : chr [1:3] "    breaks" "wool" "tension"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : 'table' chr [1:6, 1:3] "Min.   :10.00  " "1st Qu.:15.25  " "Median :20.50  " "Mean   :21.67  " ...
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "dimnames")=List of 2
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ : chr [1:6] "" "" "" "" ...
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ : chr [1:3] "    breaks" "wool" "tension"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:41"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:41"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "c9467a73b061973e3f5356f9952537d2"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 64022
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:39"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:41.307] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:41.319] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:41.319] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ...
[10:49:41.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:41.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:41.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-8c313972092992a842ab74c687cbd0db', action = 'remove', earlySignal = 0) ... done
[10:49:41.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:41.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:41.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:41.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:41.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:41.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:41.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:49:41.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:41.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:41.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:41.324] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:41.325] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:41.325] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:49:41.325] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:41.325] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:41.325] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:41.325] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:49:41.325] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:49:41.325] |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ...
[10:49:41.325] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:41.325] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:41.326] |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:49:41.327] |  :  .  |  :  .  |  :  .  |  :  .  value() on list ... done
[10:49:41.327]  - Number of value chunks collected: 2
[10:49:41.327] Resolving 2 futures (chunks) ... DONE
[10:49:41.327] Reducing values from 2 chunks ...
[10:49:41.327]  - Number of values collected after concatenation: 3
[10:49:41.327]  - Number of values expected: 3
[10:49:41.327] Reducing values from 2 chunks ... DONE
[10:49:41.327] future_lapply() ... DONE
[10:49:41.327] future_by_internal() ... DONE
[10:49:41.328] future_by_internal() ...
Testing with 2 cores ... DONE
> 
> message("*** future_by() ... DONE")
*** future_by() ... DONE
> 
> source("incl/end.R")
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  New stack:
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 1
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:41.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Old stack:
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 1
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a6282408> 
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:41.332] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Not identical
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 2
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5564a6282408> 
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:41.335] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:41.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Formals differ
[10:49:41.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of future strategies:
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  1. FutureStrategy:
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - call: plan(sequential)
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:41.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:41.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:41.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:41.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stopWorkers() for MultisessionFutureBackend ...
[10:49:41.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Interrupt active futures ...
[10:49:41.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of futures: 0
[10:49:41.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Interrupt active futures ... done
[10:49:41.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Clear future registry ...
[10:49:41.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Clear future registry ... done
[10:49:41.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stop cluster workers ...
[10:49:41.346] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Stopping existing cluster ...
[10:49:41.346] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Cluster to shut down:
[10:49:41.346] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:41.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Stopped cluster: ‘NULL’
[10:49:41.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Stopping existing cluster ... done
[10:49:41.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stop cluster workers ... done
[10:49:41.357] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stopWorkers() for MultisessionFutureBackend ... done
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Legacy shutdown of cluster workers ...
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stopping existing cluster ...
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stopping existing cluster ... done
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Legacy shutdown of cluster workers ... done
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_init() of ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:41.358] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "call")= language plan(sequential)
[10:49:41.360] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  init: NULL
[10:49:41.360] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_init() of ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:49:41.360] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:41.360] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:41.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:41.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:49:41.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:41.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:49:41.363] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:41.363] |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
