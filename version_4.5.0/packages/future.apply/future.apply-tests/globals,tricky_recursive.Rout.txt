
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:51:46.882] plan(<NULL>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.882] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:46.882] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:46.882] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:46.924] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:46.924] |  :  all.equal() for FutureStrategyList ...
[10:51:46.924] |  :  .  New stack:
[10:51:46.924] |  :  .  List of 1
[10:51:46.924] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.924] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:46.924] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.924] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.924] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.924] |  :  .    ..- attr(*, "call")= language future::plan("sequential")
[10:51:46.924] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:46.928] |  :  .  Old stack:
[10:51:46.929] |  :  .  List of 1
[10:51:46.929] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.929] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:46.929] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.929] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.929] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.929] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:46.929] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:46.931] |  :  .  Not identical
[10:51:46.931] |  :  .  all.equal() for future ...
[10:51:46.931] |  :  .  |  List of 2
[10:51:46.931] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.931] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:46.931] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.931] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.931] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.931] |  :  .  |    ..- attr(*, "call")= language future::plan("sequential")
[10:51:46.931] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:46.931] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:46.931] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:46.931] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.931] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:46.931] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:46.935] |  :  .  all.equal() for future ... done
[10:51:46.935] |  :  all.equal() for FutureStrategyList ... done
[10:51:46.935] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:46.935] |  :  List of future strategies:
[10:51:46.935] |  :  1. sequential:
[10:51:46.935] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:46.935] |  :     - tweaked: FALSE
[10:51:46.935] |  :     - call: plan(sequential)
[10:51:46.936] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:46.936] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
> ## Test adopted from http://stackoverflow.com/questions/42561088/nested-do-call-within-a-foreach-dopar-environment-cant-find-function-passed-w
> 
> options(future.debug = FALSE)
> 
> message("*** Tricky globals requiring recursive search ...")
*** Tricky globals requiring recursive search ...
> 
> my_add <- function(a, b) a + b
> 
> call_my_add <- function(a, b) {
+   do.call(my_add, args = list(a = a, b = b))
+ }
> 
> call_my_add_caller <- function(a, b, FUN = call_my_add) {
+   do.call(FUN, args = list(a = a, b = b))
+ }
> 
> main_lapply <- function(x = 1:2, caller = call_my_add_caller,
+                                args = list(FUN = call_my_add)) {
+   lapply(x, FUN = function(i) {
+     do.call(caller, args = c(list(a = i, b = i+1L), args))
+   })
+ }
> 
> main_lapply_no_FUN <- function(x = 1:2, caller = call_my_add_caller,
+                                args = list(FUN = call_my_add)) {
+   lapply(x, FUN = function(i) {
+     do.call(caller, args = list(a = i, b = i+1L))
+   })
+ }
> 
> main_future_lapply <- function(x = 1:2, caller = call_my_add_caller,
+                                args = list(FUN = call_my_add)) {
+   future_lapply(x, FUN = function(i) {
+     do.call(caller, args = c(list(a = i, b = i + 1L), args))
+   })
+ }
> 
> main_future_lapply_no_FUN <- function(x = 1:2, caller = call_my_add_caller,
+                                args = list(FUN = call_my_add)) {
+   future_lapply(x, FUN = function(i) {
+     do.call(caller, args = list(a = i, b = i + 1L))
+   })
+ }
> 
> x0 <- y0 <- z0 <- NULL
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   
+   plan(strategy)
+ 
+   z <- main_lapply()
+   str(list(z = z))
+   if (is.null(z0)) z0 <- z
+   stopifnot(identical(z, z0))
+ 
+   z2 <- main_lapply_no_FUN()
+   str(list(z2 = z2))
+   stopifnot(identical(z2, z0))
+   
+   z3 <- main_future_lapply()
+   str(list(z3 = z3))
+   stopifnot(identical(z3, z0))
+ 
+   z4 <- main_future_lapply_no_FUN()
+   str(list(z4 = z4))
+   stopifnot(identical(z4, z0))
+   
+   message(sprintf("*** strategy = %s ... DONE", sQuote(strategy)))
+ }
*** strategy = ‘sequential’ ...
List of 1
 $ z:List of 2
  ..$ : int 3
  ..$ : int 5
List of 1
 $ z2:List of 2
  ..$ : int 3
  ..$ : int 5
List of 1
 $ z3:List of 2
  ..$ : int 3
  ..$ : int 5
List of 1
 $ z4:List of 2
  ..$ : int 3
  ..$ : int 5
*** strategy = ‘sequential’ ... DONE
*** strategy = ‘multicore’ ...
List of 1
 $ z:List of 2
  ..$ : int 3
  ..$ : int 5
List of 1
 $ z2:List of 2
  ..$ : int 3
  ..$ : int 5
List of 1
 $ z3:List of 2
  ..$ : int 3
  ..$ : int 5
List of 1
 $ z4:List of 2
  ..$ : int 3
  ..$ : int 5
*** strategy = ‘multicore’ ... DONE
*** strategy = ‘multisession’ ...
List of 1
 $ z:List of 2
  ..$ : int 3
  ..$ : int 5
List of 1
 $ z2:List of 2
  ..$ : int 3
  ..$ : int 5
List of 1
 $ z3:List of 2
  ..$ : int 3
  ..$ : int 5
List of 1
 $ z4:List of 2
  ..$ : int 3
  ..$ : int 5
*** strategy = ‘multisession’ ... DONE
> 
> message("*** Tricky globals requiring recursive search ... DONE")
*** Tricky globals requiring recursive search ... DONE
> 
> source("incl/end.R")
> 
