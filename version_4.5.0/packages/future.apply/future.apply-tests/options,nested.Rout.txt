
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:51:48.310] plan(<NULL>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:48.310] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:48.311] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:48.311] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:48.350] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:48.350] |  :  all.equal() for FutureStrategyList ...
[10:51:48.350] |  :  .  New stack:
[10:51:48.350] |  :  .  List of 1
[10:51:48.350] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:48.350] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:48.350] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:48.350] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:48.350] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:48.350] |  :  .    ..- attr(*, "call")= language future::plan("sequential")
[10:51:48.350] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:48.354] |  :  .  Old stack:
[10:51:48.354] |  :  .  List of 1
[10:51:48.354] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:48.354] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:48.354] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:48.354] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:48.354] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:48.354] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:48.354] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:48.356] |  :  .  Not identical
[10:51:48.357] |  :  .  all.equal() for future ...
[10:51:48.357] |  :  .  |  List of 2
[10:51:48.357] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:48.357] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:48.357] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:48.357] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:48.357] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:48.357] |  :  .  |    ..- attr(*, "call")= language future::plan("sequential")
[10:51:48.357] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:48.357] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:48.357] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:48.357] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:48.357] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:48.357] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:48.361] |  :  .  all.equal() for future ... done
[10:51:48.361] |  :  all.equal() for FutureStrategyList ... done
[10:51:48.361] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:48.361] |  :  List of future strategies:
[10:51:48.361] |  :  1. sequential:
[10:51:48.361] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:48.361] |  :     - tweaked: FALSE
[10:51:48.361] |  :     - call: plan(sequential)
[10:51:48.362] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:48.362] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
> message("*** Options in nested parallelization ...")
*** Options in nested parallelization ...
> 
> options(future.debug = FALSE)
> options(future.apply.debug = FALSE)
> options(future.globals.maxSize = 1234000)
> 
> for (cores in 1:availCores) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+   strategies <- supportedStrategies(cores)
+ 
+   for (strategy1 in strategies) {
+     for (strategy2 in strategies) {
+       message(sprintf("- plan('%s') ...", strategy2))
+       plan(list(outer = tweak(strategy1), inner = strategy2))
+ 
+       v <- future_lapply(1:2, FUN = function(x) {
+         outer <- data.frame(
+           label   = "outer",
+           idx     = x,
+           pid     = Sys.getpid(),
+           maxSize = getOption("future.globals.maxSize", NA_real_)
+         )
+         
+         inner <- future_lapply(3:4, FUN = function(x) {
+           data.frame(
+             label   = "inner",
+             idx     = x,
+             pid     = Sys.getpid(),
+             maxSize = getOption("future.globals.maxSize", NA_real_))
+         })
+         inner <- do.call(rbind, inner)
+         rbind(outer, inner)
+       })
+       v <- do.call(rbind, v)
+       print(v)
+       stopifnot(!anyNA(v$maxSize))
+     } ## for (strategy2 ...)
+   } ## for (strategy1 ...)
+ } ## for (cores in ...)
Testing with 1 cores ...
- plan('sequential') ...
  label idx   pid maxSize
1 outer   1 66634 1234000
2 inner   3 66634 1234000
3 inner   4 66634 1234000
4 outer   2 66634 1234000
5 inner   3 66634 1234000
6 inner   4 66634 1234000
- plan('multicore') ...
  label idx   pid maxSize
1 outer   1 66634 1234000
2 inner   3 66634 1234000
3 inner   4 66634 1234000
4 outer   2 66634 1234000
5 inner   3 66634 1234000
6 inner   4 66634 1234000
- plan('multisession') ...
  label idx   pid maxSize
1 outer   1 66634 1234000
2 inner   3 66634 1234000
3 inner   4 66634 1234000
4 outer   2 66634 1234000
5 inner   3 66634 1234000
6 inner   4 66634 1234000
- plan('sequential') ...
  label idx   pid maxSize
1 outer   1 66634 1234000
2 inner   3 66634 1234000
3 inner   4 66634 1234000
4 outer   2 66634 1234000
5 inner   3 66634 1234000
6 inner   4 66634 1234000
- plan('multicore') ...
  label idx   pid maxSize
1 outer   1 66634 1234000
2 inner   3 66634 1234000
3 inner   4 66634 1234000
4 outer   2 66634 1234000
5 inner   3 66634 1234000
6 inner   4 66634 1234000
- plan('multisession') ...
  label idx   pid maxSize
1 outer   1 66634 1234000
2 inner   3 66634 1234000
3 inner   4 66634 1234000
4 outer   2 66634 1234000
5 inner   3 66634 1234000
6 inner   4 66634 1234000
- plan('sequential') ...
  label idx   pid maxSize
1 outer   1 66634 1234000
2 inner   3 66634 1234000
3 inner   4 66634 1234000
4 outer   2 66634 1234000
5 inner   3 66634 1234000
6 inner   4 66634 1234000
- plan('multicore') ...
  label idx   pid maxSize
1 outer   1 66634 1234000
2 inner   3 66634 1234000
3 inner   4 66634 1234000
4 outer   2 66634 1234000
5 inner   3 66634 1234000
6 inner   4 66634 1234000
- plan('multisession') ...
  label idx   pid maxSize
1 outer   1 66634 1234000
2 inner   3 66634 1234000
3 inner   4 66634 1234000
4 outer   2 66634 1234000
5 inner   3 66634 1234000
6 inner   4 66634 1234000
Testing with 2 cores ...
- plan('multicore') ...
  label idx   pid maxSize
1 outer   1 66656 1234000
2 inner   3 66656 1234000
3 inner   4 66656 1234000
4 outer   2 66657 1234000
5 inner   3 66657 1234000
6 inner   4 66657 1234000
- plan('multisession') ...
  label idx   pid maxSize
1 outer   1 66658 1234000
2 inner   3 66658 1234000
3 inner   4 66658 1234000
4 outer   2 66659 1234000
5 inner   3 66659 1234000
6 inner   4 66659 1234000
- plan('multicore') ...
  label idx   pid maxSize
1 outer   1 66692 1234000
2 inner   3 66692 1234000
3 inner   4 66692 1234000
4 outer   2 66691 1234000
5 inner   3 66691 1234000
6 inner   4 66691 1234000
- plan('multisession') ...
  label idx   pid maxSize
1 outer   1 66792 1234000
2 inner   3 66792 1234000
3 inner   4 66792 1234000
4 outer   2 66793 1234000
5 inner   3 66793 1234000
6 inner   4 66793 1234000
> 
> message("*** Options in nested parallelization ... done")
*** Options in nested parallelization ... done
> 
> source("incl/end.R")
> 
