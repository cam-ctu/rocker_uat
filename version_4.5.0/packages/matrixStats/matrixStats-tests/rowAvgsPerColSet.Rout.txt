
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a           b           c           d           e           f
A  0.90079049 -0.51868256 -0.14252686  0.55283439  0.30967359  1.45146630
B  2.44035109  0.64336446 -0.75163768  0.05349335  0.41139062 -0.81695686
C  0.39487009  1.24749652 -0.64389048 -0.56521798  0.51928595 -0.56261817
D  0.50174107  1.58019856 -0.77053262  0.24283462 -0.17090243  0.30324024
E -0.61017974 -0.71930227  1.69235977 -0.14900104 -0.59695011  1.27451846
F -1.64447490 -3.14006289 -0.39801112  0.20547023  2.20373990 -0.39185142
G  0.31853135  0.17778160  0.10419650 -0.38342498  0.04027149  0.25754922
H -0.25059338 -0.81712943 -0.62237061  0.06046979  0.12717309 -1.41203352
I  0.62319073 -0.30299173  0.45109095 -1.03485786 -0.70627606  0.37757965
J -0.43452466  1.02352731  0.91543605  0.72420687  0.20135106 -0.88966860
K  0.08187151 -0.80422875 -0.18133971  1.38319535 -0.64248070  0.07765693
L -0.59832971  1.48751244  1.29496596  1.26763350  1.60655745 -0.16911838
M -0.72776989 -0.04937572  0.35241633  0.26851898  2.11958225 -0.90929962
N  0.81916655  0.23596671 -1.64376833 -0.28725732  0.95741234 -1.16948657
O -0.08951470 -1.13622725  1.37462136  1.23953287  0.81200689  0.13523714
P -2.38809239 -0.07364799 -1.05574334  0.05896389  1.07853993 -1.58889003
Q -0.63565016  0.60334909  1.59798231  0.14134526  0.58797371  0.06317477
R -0.09441584  0.75959470  0.31361029  0.76218558 -0.13981898 -1.12938176
S  1.00739331 -1.04050330 -0.07910455 -0.13983204 -0.26246429 -0.97604353
T  0.46696325  1.41900347  0.01446879 -0.82915306 -0.85252381  1.43582159
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2          s3
A  0.19105396  0.20515376  0.88056995
B  1.54185778 -0.34907217 -0.20278312
C  0.82118331 -0.60455423 -0.02166611
D  1.04096981 -0.26384900  0.06616891
E -0.66474101  0.77167936  0.33878417
F -2.39226889 -0.09627045  0.90594424
G  0.24815647 -0.13961424  0.14891036
H -0.53386141 -0.28095041 -0.64243022
I  0.16009950 -0.29188345 -0.16434820
J  0.29450132  0.81982146 -0.34415877
K -0.36117862  0.60092782 -0.28241188
L  0.44459137  1.28129973  0.71871953
M -0.38857280  0.31046766  0.60514132
N  0.52756663 -0.96551283 -0.10603712
O -0.61287098  1.30707711  0.47362202
P -1.23087019 -0.49838972 -0.25517505
Q -0.01615054  0.86966378  0.32557424
R  0.33258943  0.53789794 -0.63460037
S -0.01655499 -0.10946830 -0.61925391
T  0.94298336 -0.40734214  0.29164889
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b          c           d          e           f
s1  1.05943818  0.7380942 -0.5771469  0.07098609  0.2673619  0.09378288
s2 -0.54667917 -1.1246782  0.1940436 -0.06662150  0.4435586 -0.06795432
s3 -0.08194803  0.3509548  0.6200383  0.58504447  0.1147879 -0.15088760
s4 -0.59655261 -0.2558211 -0.2431185  0.31993960  1.2418854 -0.88310977
s5  0.18607264  0.4353610  0.4617392 -0.01636357 -0.1667083 -0.15160723
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.42559256
B  0.33000083
C  0.06498766
D  0.28109657
E  0.14857418
F -0.52753170
G  0.08581753
H -0.48574734
I -0.09871072
J  0.25672134
K -0.01422089
L  0.81487021
M  0.17567872
N -0.18132777
O  0.38927605
P -0.66147832
Q  0.39302916
R  0.07862900
S -0.24842573
T  0.27576337
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
             a          b          c        d         e          f
s1 0.004066203 0.02878215 0.09111115 0.178597 0.3801771 -0.2319552
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2          s3
A  0.19105396  0.20515376  0.88056995
B  1.54185778 -0.34907217 -0.20278312
C  0.82118331 -0.60455423 -0.02166611
D  1.04096981 -0.26384900  0.06616891
E -0.66474101  0.77167936  0.33878417
F -2.39226889 -0.09627045  0.90594424
G  0.24815647 -0.13961424  0.14891036
H -0.53386141 -0.28095041 -0.64243022
I  0.16009950 -0.29188345 -0.16434820
J  0.29450132  0.81982146 -0.34415877
K -0.36117862  0.60092782 -0.28241188
L  0.44459137  1.28129973  0.71871953
M -0.38857280  0.31046766  0.60514132
N  0.52756663 -0.96551283 -0.10603712
O -0.61287098  1.30707711  0.47362202
P -1.23087019 -0.49838972 -0.25517505
Q -0.01615054  0.86966378  0.32557424
R  0.33258943  0.53789794 -0.63460037
S -0.01655499 -0.10946830 -0.61925391
T  0.94298336 -0.40734214  0.29164889
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a           b          c          d         e          f
s1  1.6705708  0.06234095 -0.4470823  0.3031639 0.3605321  0.3172547
s2  0.4483056  1.41384754 -0.7072115 -0.1611917 0.1741918 -0.1296890
s3 -1.1273273 -1.92968258  0.6471743  0.0282346 0.8033949  0.4413335
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
