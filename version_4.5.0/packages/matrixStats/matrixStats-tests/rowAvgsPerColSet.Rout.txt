
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a           b          c           d           e           f
A  0.37074107  1.91689231  2.0618887  0.36868070  0.31974748  0.58426405
B -1.37590988 -0.85091200  0.5672349 -0.53325306 -0.02405399 -0.91485263
C -0.15074521  0.53118063 -0.1726909  0.73781043 -0.04929275  1.19069940
D -1.12347612  1.11505129 -1.7812419 -0.95132988 -0.80154073 -2.62313268
E -1.40030383 -2.70924363 -2.4481105  3.36774321  0.23170100  0.05495278
F -0.18046826  0.03529632 -0.8992220  0.18436993 -0.51246056  0.10888183
G  0.03693115  0.26199995 -0.1465393 -1.41753785  0.49193472 -0.13864700
H  1.06100126 -0.80535169  2.0384177  0.43283852 -0.19769600  0.35078267
I -0.38048380  0.13033551  1.5227047  0.76044295 -0.97625171  0.64765571
J  0.16161977 -1.20569627 -0.6537428 -0.01283219  0.46953021 -0.94040416
K -0.85679111 -1.35769142 -0.3375520  1.28595305  1.00719508 -1.36574239
L  1.16129212  0.15317060  1.0287713  1.29115680 -1.33650516  1.40238622
M -0.16015424  0.03979351  1.4329758 -0.34668024 -0.81396442  0.63962131
N  0.99211529 -1.18782772 -0.2589682  1.18604638 -1.94356292  0.52714044
O  0.03101689 -1.28638502 -0.2216203 -3.00625564  0.34547359  2.29847544
P  0.14262832 -0.79172614 -0.4479185 -0.11474592  0.79534272 -1.00319186
Q -0.90464235  0.86980036 -0.4230629  0.28482036  0.89569293 -0.50501238
R  0.17348872 -0.72434505  0.8114980 -0.10125082 -2.12286901  0.44631490
S  1.14677222 -0.10899414 -0.5745249 -0.72942320  0.38043918  0.09994957
T  1.37943547 -0.70125708 -1.3158196  0.44261714  0.46688693 -0.48805600
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
            s1          s2          s3
A  1.143816689  1.21528468  0.45200576
B -1.113410942  0.01699091 -0.46945331
C  0.190217708  0.28255978  0.57070333
D -0.004212415 -1.36628590 -1.71233671
E -2.054773732  0.45981634  0.14332689
F -0.072585970 -0.35742603 -0.20178937
G  0.149465554 -0.78203859  0.17664386
H  0.127824787  1.23562811  0.07654333
I -0.125074143  1.14157380 -0.16429800
J -0.522038249 -0.33328750 -0.23543698
K -1.107241266  0.47420052 -0.17927366
L  0.657231361  1.15996407  0.03294053
M -0.060180370  0.54314776 -0.08717155
N -0.097856217  0.46353907 -0.70821124
O -0.627684063 -1.61393797  1.32197451
P -0.324548907 -0.28133223 -0.10392457
Q -0.017420995 -0.06912128  0.19534027
R -0.275428165  0.35512358 -0.83827705
S  0.518889045 -0.65197403  0.24019437
T  0.339089192 -0.43660123 -0.01058453
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b          c           d            e           f
s1 -0.56984754  0.6780531  0.1687977 -0.09452295 -0.138784997 -0.44075546
s2 -0.12070992 -0.8043248 -0.3638635  0.64185345  0.003369791  0.09399257
s3  0.02140925 -0.5699704  0.3900453  0.83118015 -0.209007898 -0.06402616
s4  0.25140156 -0.8065363  0.1261172 -0.57040885 -0.404177758  0.61551133
s5  0.44876352 -0.1661990 -0.3754773 -0.02580913 -0.094962492 -0.11170098
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.93703571
B -0.52195778
C  0.34782694
D -1.02761167
E -0.48387683
F -0.21060045
G -0.15197639
H  0.47999874
I  0.28406722
J -0.36358758
K -0.27077147
L  0.61671199
M  0.13193194
N -0.11417613
O -0.30654917
P -0.23660190
Q  0.03626600
R -0.25286055
S  0.03570313
T -0.03603219
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
             a          b           c         d          e          f
s1 0.006203374 -0.3337955 -0.01087615 0.1564585 -0.1687127 0.01860426
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
            s1          s2          s3
A  1.143816689  1.21528468  0.45200576
B -1.113410942  0.01699091 -0.46945331
C  0.190217708  0.28255978  0.57070333
D -0.004212415 -1.36628590 -1.71233671
E -2.054773732  0.45981634  0.14332689
F -0.072585970 -0.35742603 -0.20178937
G  0.149465554 -0.78203859  0.17664386
H  0.127824787  1.23562811  0.07654333
I -0.125074143  1.14157380 -0.16429800
J -0.522038249 -0.33328750 -0.23543698
K -1.107241266  0.47420052 -0.17927366
L  0.657231361  1.15996407  0.03294053
M -0.060180370  0.54314776 -0.08717155
N -0.097856217  0.46353907 -0.70821124
O -0.627684063 -1.61393797  1.32197451
P -0.324548907 -0.28133223 -0.10392457
Q -0.017420995 -0.06912128  0.19534027
R -0.275428165  0.35512358 -0.83827705
S  0.518889045 -0.65197403  0.24019437
T  0.339089192 -0.43660123 -0.01058453
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b          c           d          e          f
s1 -0.5025844  0.5329902  1.3145618 -0.08228618  0.1478467 -0.1652943
s2 -0.6371107  0.8231160 -0.9769664 -0.10675972 -0.4254167 -0.7162166
s3 -0.7903860 -1.3369737 -1.6736663  1.77605657 -0.1403798  0.0819173
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
