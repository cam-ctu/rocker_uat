
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "shades"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('shades')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("complement")
> ### * complement
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: complement
> ### Title: Complementary colours
> ### Aliases: complement
> 
> ### ** Examples
> 
> complement("cyan")
 1 shade in sRGB space, without transparency
[1] #FF0000
> complement("cyan", space="HSV")
 1 shade in HSV space, without transparency
[1] #FF0000
> complement("cyan", space="Lab")
 1 shade in Lab space, without transparency
[1] #4F0002
> 
> 
> 
> cleanEx()
> nameEx("coords")
> ### * coords
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coords
> ### Title: Retrieve the coordinates of a colour vector
> ### Aliases: coords
> 
> ### ** Examples
> 
> coords("red")
     R G B
[1,] 1 0 0
> 
> 
> 
> cleanEx()
> nameEx("dichromat")
> ### * dichromat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dichromat
> ### Title: Simulate colour appearance for dichromats
> ### Aliases: dichromat
> 
> ### ** Examples
> 
> dichromat(c("red", "green", "blue"))
 3 shades in LMS space, without transparency
[1] #4D4222 #FFF600 #0027FF
> 
> 
> 
> cleanEx()
> nameEx("distance")
> ### * distance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distance
> ### Title: Colour distance
> ### Aliases: distance
> 
> ### ** Examples
> 
> distance(c("red","green","blue"), "red")
[1]  0.00000 86.52385 53.07649
> 
> 
> 
> cleanEx()
> nameEx("gradient")
> ### * gradient
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gradient
> ### Title: Colour gradients
> ### Aliases: gradient
> 
> ### ** Examples
> 
> gradient(c("red","blue"), 5)
 5 shades in sRGB space, without transparency
[1] #FF0000 #BF0040 #800080 #4000BF #0000FF
> gradient(c("red","blue"), 5, space="Lab")
 5 shades in Lab space, without transparency
[1] #FF0000 #E80050 #C90089 #9A00C3 #0000FF
> gradient("viridis", 5)
 5 shades in Lab space, without transparency
[1] #440154 #3B528B #22908D #5FC863 #FDE725
> 
> 
> 
> cleanEx()
> nameEx("mixtures")
> ### * mixtures
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addmix
> ### Title: Colour mixtures
> ### Aliases: addmix submix %.)% %_/%
> 
> ### ** Examples
> 
> addmix(c("red","green","blue"), "red")
 3 shades in sRGB space, without transparency
[1] #FF0000 #FFFF00 #FF00FF
> submix(c("cyan","magenta","yellow"), "cyan")
 3 shades in sRGB space, without transparency
[1] #00FFFF #0000FF #00FF00
> 
> 
> 
> cleanEx()
> nameEx("properties")
> ### * properties
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saturation
> ### Title: Query or change colour properties
> ### Aliases: saturation brightness lightness chroma hue opacity delta
> ###   scalefac recycle
> 
> ### ** Examples
> 
> saturation(c("papayawhip","lavenderblush","olivedrab"))
[1] 0.1647100 0.0588200 0.7535287
> 
> saturation("papayawhip", 0.7)
 1 shade in HSV space, without transparency
[1] #FFBB4D
> saturation("papayawhip", delta(0.2))
 1 shade in HSV space, without transparency
[1] #FFDCA2
> saturation("papayawhip", scalefac(1.5))
 1 shade in HSV space, without transparency
[1] #FFE7C0
> 
> saturation(c("red","green"), c(0.4,0.6))
 4 shades in HSV space, without transparency
     [,1]    [,2]   
[1,] #FF9999 #99FF99
[2,] #FF6666 #66FF66
> saturation(c("red","green"), recycle(0.4,0.6))
 2 shades in HSV space, without transparency
[1] #FF9999 #66FF66
> 
> 
> 
> cleanEx()
> nameEx("shade")
> ### * shade
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shade
> ### Title: The shade class
> ### Aliases: shade shades shade.shade shade.color shade.matrix
> ###   shade.character shade.default print.shade [.shade [<-.shade c.shade
> ###   rep.shade rev.shade ==.shade !=.shade all.equal.shade
> 
> ### ** Examples
> 
> s <- shade(c("red", "green", "blue"))
> s[1]
 1 shade in sRGB space, without transparency
[1] red
> s[1] <- "pink"
> 
> 
> 
> cleanEx()
> nameEx("space")
> ### * space
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: space
> ### Title: Retrieve the space of a colour vector
> ### Aliases: space
> 
> ### ** Examples
> 
> space("red")
[1] "sRGB"
> 
> 
> 
> cleanEx()
> nameEx("swatch")
> ### * swatch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: swatch
> ### Title: Simple colour swatches
> ### Aliases: swatch
> 
> ### ** Examples
> 
> swatch(c("red", "green", "blue"))
> 
> 
> 
> cleanEx()
> nameEx("warp")
> ### * warp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: warp
> ### Title: Shift colours between spaces
> ### Aliases: warp
> 
> ### ** Examples
> 
> warp("red", "HSV")
 1 shade in HSV space, without transparency
[1] #FF0000
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.099 0.012 0.112 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
