
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-multicore,multithreading.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("multicore,multithreading")
Test ‘multicore,multithreading’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-multicore,multithreading.R’

> library(future)
[08:09:20.101] Option 'future.startup.script': TRUE
[08:09:20.102] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:09:20.102] Future startup scripts found: <none>

> plan(multicore)
[08:09:20.103] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.103] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:09:20.103] | : all.equal() for FutureStrategyList ...
[08:09:20.103] | : . New stack:
[08:09:20.103] | : . List of 1
[08:09:20.103] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.103] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.103] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.103] | : .   ..- attr(*, "init")= logi TRUE
[08:09:20.103] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.103] | : .     ...)  
[08:09:20.103] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.103] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.103] | : .   ..- attr(*, "call")= language plan(multicore)
[08:09:20.103] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.108] | : . Old stack:
[08:09:20.108] | : . List of 1
[08:09:20.108] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.108] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.108] | : .   ..- attr(*, "init")= logi TRUE
[08:09:20.108] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.108] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.108] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.108] | : .   ..- attr(*, "call")= language plan(sequential)
[08:09:20.108] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.110] | : . Not identical
[08:09:20.111] | : . all.equal() for future ...
[08:09:20.111] | : . ' List of 2
[08:09:20.111] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.111] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.111] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.111] | : . '   ..- attr(*, "init")= logi TRUE
[08:09:20.111] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.111] | : . '     ...)  
[08:09:20.111] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.111] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.111] | : . '   ..- attr(*, "call")= language plan(multicore)
[08:09:20.111] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.111] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.111] | : . '   ..- attr(*, "init")= logi TRUE
[08:09:20.111] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.111] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.111] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.111] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:09:20.117] | : . ' Formals differ
[08:09:20.117] | : . all.equal() for future ... done
[08:09:20.117] | : . Future strategies differ at level 1
[08:09:20.117] | : all.equal() for FutureStrategyList ... done
[08:09:20.117] | : plan(): Setting new future backend stack:
[08:09:20.117] | : List of future strategies:
[08:09:20.117] | : 1. multicore:
[08:09:20.117] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:09:20.117] | :    - tweaked: FALSE
[08:09:20.117] | :    - call: plan(multicore)
[08:09:20.118] | : List of 1
[08:09:20.118] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.118] | :     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.118] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.118] | :   ..- attr(*, "init")= logi TRUE
[08:09:20.118] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.118] | :     ...)  
[08:09:20.118] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.118] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.118] | :   ..- attr(*, "call")= language plan(multicore)
[08:09:20.118] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.121] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:09:20.121] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.121] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:09:20.121] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.121] | : . Legacy shutdown of cluster workers ...
[08:09:20.122] | : . ' Stopping existing cluster ...
[08:09:20.122] | : . ' , No pre-existing cluster. Skipping
[08:09:20.122] | : . ' Stopping existing cluster ... done
[08:09:20.122] | : . Legacy shutdown of cluster workers ... done
[08:09:20.122] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:09:20.122] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:09:20.122] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.122] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.122] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.122] | : .  - attr(*, "init")= logi TRUE
[08:09:20.122] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.122] | : .     ...)  
[08:09:20.122] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.122] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.122] | : .  - attr(*, "call")= language plan(multicore)
[08:09:20.124] | : . init: TRUE
[08:09:20.125] | : . makeFutureBackend(<multicore>) ...
[08:09:20.125] | : . ' Backend function: <‘NULL’>
[08:09:20.125] | : . ' Evaluator tweak arguments: [n=0]
[08:09:20.125] | : . '  list()
[08:09:20.125] | : . ' Evaluator formal arguments: [n=3]
[08:09:20.125] | : . '  list()
[08:09:20.126] | : . ' Backend factory arguments: [n=3]
[08:09:20.126] | : . ' Dotted pair list of 3
[08:09:20.126] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:09:20.126] | : . '  $ gc         : logi FALSE
[08:09:20.126] | : . '  $ earlySignal: logi FALSE
[08:09:20.129] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:09:20.129] | : . makeFutureBackend(<multicore>) ... done
[08:09:20.129] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:09:20.129] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.129] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.129] | : plan(): nbrOfWorkers() = 2
[08:09:20.129] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:09:20.130] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done

> message("*** multicore() and multi-threading ...")
*** multicore() and multi-threading ...

> message("supportsMulticore(): ", sQuote(supportsMulticore()))
supportsMulticore(): ‘TRUE’

> message("availableCores('multicore'): ", sQuote(availableCores("multicore")))
availableCores('multicore'): ‘2’

> message("supports_omp_threads(): ", sQuote(supports_omp_threads()))
[08:09:20.136] supports_omp_threads() = TRUE
supports_omp_threads(): ‘TRUE’

> if (requireNamespace("RhpcBLASctl", quietly = TRUE)) {
+     message("Checking RhpcBLASctl capabilities ...")
+     nthreads_0 <- RhpcBLASctl::omp_g .... [TRUNCATED] 
Checking RhpcBLASctl capabilities ...
List of 1
 $ nthreads_0: int 4
- Number of OpenMP threads: ‘4’
- Trying to set number of OpenMP threads to one
List of 1
 $ nthreads_1: int 1
  - Number of OpenMP threads: ‘1’
[08:09:20.138] future(..., label = NULL) ...
[08:09:20.138] | lazy: FALSE
[08:09:20.138] | stdout: TRUE
[08:09:20.138] | conditions: [n=1] ‘condition’
[08:09:20.138] | gc: FALSE
[08:09:20.138] | earlySignal: FALSE
[08:09:20.139] | getGlobalsAndPackages() ...
[08:09:20.139] | : Searching for globals ...
[08:09:20.149] | : . globals found: [1] ‘::’
[08:09:20.149] | : Searching for globals ... done
[08:09:20.149] | : Resolving globals: FALSE
[08:09:20.150] | : Search for packages associated with the globals ...
[08:09:20.150] | : . Packages associated with globals: [1] ‘base’
[08:09:20.150] | : . Packages: [1] ‘base’
[08:09:20.150] | : Search for packages associated with the globals ... done
[08:09:20.150] | : Packages after dropping 'base': [0] 
[08:09:20.151] | : globals: [0] 
[08:09:20.151] | : packages: [0] 
[08:09:20.151] | getGlobalsAndPackages() ... done
[08:09:20.151] | run() for ‘Future’ (<unnamed-1>) ...
[08:09:20.152] | : state: ‘created’
[08:09:20.152] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.152] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.152] | : Using MulticoreFutureBackend ...
[08:09:20.152] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:09:20.152] | : . Launching futures ...
[08:09:20.153] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:09:20.153] | : . ' , getFutureData() ...
[08:09:20.153] | : . ' , ; getFutureCore() ...
[08:09:20.153] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:09:20.153] | : . ' , ; getFutureCore() ... done
[08:09:20.153] | : . ' , ; getFutureCapture() ...
[08:09:20.153] | : . ' , ; getFutureCapture() ... done
[08:09:20.154] | : . ' , ; getFutureContext() ...
[08:09:20.154] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.154] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:09:20.154] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.154] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:09:20.154] | : . ' , ; getFutureContext() ... done
[08:09:20.155] | : . ' , getFutureData() ... done
[08:09:20.155] | : . ' , requestCore(..., workers = 2) ...
[08:09:20.155] | : . ' , requestCore(..., workers = 2) ... done
[08:09:20.158] | : . ' , MulticoreFuture started
[08:09:20.159] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:09:20.159] | : . Launching futures ... done
[08:09:20.159] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:09:20.160] | : Using MulticoreFutureBackend ... done
[08:09:20.160] | run() for ‘Future’ (<unnamed-1>) ... done
[08:09:20.160] future(..., label = NULL) ... done
[08:09:20.161] value() for MulticoreFuture (<unnamed-1>) ...
[08:09:20.163] | result() for MulticoreFuture ...
[08:09:20.164] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.164] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:09:20.164] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.165] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:20.165] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:09:20.165] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:09:20.166] | : . ' , ; ` | New stack:
[08:09:20.166] | : . ' , ; ` | List of 1
[08:09:20.166] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.166] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.166] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:09:20.166] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.166] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.166] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.166] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.166] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.170] | : . ' , ; ` | Old stack:
[08:09:20.170] | : . ' , ; ` | List of 1
[08:09:20.170] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.170] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.170] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.170] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:09:20.170] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.170] | : . ' , ; ` |     ...)  
[08:09:20.170] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.170] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.170] | : . ' , ; ` |   ..- attr(*, "call")= language plan(multicore)
[08:09:20.170] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.170] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.170] | : . ' , ; ` |     ...)  
[08:09:20.170] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.170] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.175] | : . ' , ; ` | Not identical
[08:09:20.176] | : . ' , ; ` | all.equal() for future ...
[08:09:20.176] | : . ' , ; ` | : List of 2
[08:09:20.176] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.176] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.176] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.176] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.176] | : . ' , ; ` | :     ...)  
[08:09:20.176] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(multicore)
[08:09:20.176] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.176] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.176] | : . ' , ; ` | :     ...)  
[08:09:20.176] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.183] | : . ' , ; ` | : Formals differ
[08:09:20.184] | : . ' , ; ` | all.equal() for future ... done
[08:09:20.184] | : . ' , ; ` | Future strategies differ at level 1
[08:09:20.184] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:09:20.184] | : . ' , ; ` plan(): Setting new future backend stack:
[08:09:20.184] | : . ' , ; ` List of future strategies:
[08:09:20.184] | : . ' , ; ` 1. sequential:
[08:09:20.184] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:09:20.184] | : . ' , ; `    - tweaked: FALSE
[08:09:20.184] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.185] | : . ' , ; ` List of 1
[08:09:20.185] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.185] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.185] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:09:20.185] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.185] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.185] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.185] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.185] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.193] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:09:20.193] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:09:20.193] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.193] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:09:20.194] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.194] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.194] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:09:20.194] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.194] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.194] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.194] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.197] | : . ' , ; ` | : init: TRUE
[08:09:20.197] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:09:20.197] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:09:20.197] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:09:20.197] | : . ' , ; ` | : .  list()
[08:09:20.198] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:09:20.198] | : . ' , ; ` | : .  list()
[08:09:20.198] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:09:20.198] | : . ' , ; ` | : . Dotted pair list of 2
[08:09:20.198] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:09:20.198] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:09:20.200] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:09:20.200] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:09:20.200] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:09:20.200] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.200] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:09:20.200] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:09:20.200] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:20.203] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:20.204] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:20.204] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:09:20.204] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:09:20.204] | : . ' , ; ` | : New stack:
[08:09:20.204] | : . ' , ; ` | : List of 1
[08:09:20.204] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.204] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.204] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.204] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:20.204] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.204] | : . ' , ; ` | :     ...)  
[08:09:20.204] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.204] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.204] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(multicore)
[08:09:20.204] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.204] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.204] | : . ' , ; ` | :     ...)  
[08:09:20.204] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.204] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.207] | : . ' , ; ` | : Old stack:
[08:09:20.208] | : . ' , ; ` | : List of 1
[08:09:20.208] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.208] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.208] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:20.208] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.208] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.208] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.208] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.208] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e2fe31bf80> 
[08:09:20.208] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.208] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.208] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.211] | : . ' , ; ` | : Not identical
[08:09:20.211] | : . ' , ; ` | : all.equal() for future ...
[08:09:20.211] | : . ' , ; ` | : . List of 2
[08:09:20.211] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.211] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.211] | : . ' , ; ` | : .     ...)  
[08:09:20.211] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(multicore)
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.211] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.211] | : . ' , ; ` | : .     ...)  
[08:09:20.211] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.211] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.211] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.211] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e2fe31bf80> 
[08:09:20.211] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.211] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.218] | : . ' , ; ` | : . Formals differ
[08:09:20.218] | : . ' , ; ` | : all.equal() for future ... done
[08:09:20.218] | : . ' , ; ` | : Future strategies differ at level 1
[08:09:20.218] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:09:20.218] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:09:20.218] | : . ' , ; ` | List of future strategies:
[08:09:20.218] | : . ' , ; ` | 1. multicore:
[08:09:20.218] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:09:20.218] | : . ' , ; ` |    - tweaked: FALSE
[08:09:20.218] | : . ' , ; ` |    - call: plan(multicore)
[08:09:20.219] | : . ' , ; ` | List of 1
[08:09:20.219] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.219] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.219] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.219] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:09:20.219] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.219] | : . ' , ; ` |     ...)  
[08:09:20.219] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.219] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.219] | : . ' , ; ` |   ..- attr(*, "call")= language plan(multicore)
[08:09:20.219] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.219] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.219] | : . ' , ; ` |     ...)  
[08:09:20.219] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.219] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.222] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:09:20.222] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:09:20.222] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.222] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.222] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:09:20.223] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:09:20.223] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:20.223] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:20.224] | : readImmediateCondition() ...
[08:09:20.224] | : . Path: ‘/tmp/Rtmp53AsxL/.future/immediateConditions’
[08:09:20.224] | : . Number of RDS files: 0
[08:09:20.225] | : . Returned conditions set:
[08:09:20.225] | : .  list()
[08:09:20.225] | : readImmediateCondition() ... done
[08:09:20.230] | : result() for MulticoreFuture ...
[08:09:20.230] | : result() for MulticoreFuture ... done
[08:09:20.230] | : signalConditions() ...
[08:09:20.231] | : . include = ‘immediateCondition’
[08:09:20.231] | : . exclude = 
[08:09:20.231] | : . resignal = FALSE
[08:09:20.231] | : . Number of conditions: 6
[08:09:20.231] | : .  int 6
[08:09:20.232] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.232] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.232] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.232] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.232] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.232] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.233] | : signalConditions() ... done
[08:09:20.233] | result() for MulticoreFuture ... done
[08:09:20.233] | result() for MulticoreFuture ...
[08:09:20.233] | result() for MulticoreFuture ... done
[08:09:20.233] | signalConditions() ...
[08:09:20.233] | : include = ‘immediateCondition’
[08:09:20.233] | : exclude = 
[08:09:20.233] | : resignal = FALSE
[08:09:20.234] | : Number of conditions: 6
[08:09:20.234] | :  int 6
[08:09:20.234] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.234] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.234] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.235] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.235] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.235] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.235] | signalConditions() ... done
[08:09:20.235] | relay stdout ...
[08:09:20.235] | relay stdout ... done
[08:09:20.235] | check for misuse ...
[08:09:20.235] | check for misuse ... done
[08:09:20.236] | relay conditions ...
[08:09:20.236] | : Future state: ‘finished’
[08:09:20.236] | : result() for MulticoreFuture ...
[08:09:20.236] | : result() for MulticoreFuture ... done
[08:09:20.236] | : signalConditions() ...
[08:09:20.236] | : . include = ‘condition’
[08:09:20.236] | : . exclude = ‘immediateCondition’
[08:09:20.236] | : . resignal = TRUE
[08:09:20.237] | : . Number of conditions: 6
[08:09:20.237] | : .  int 6
[08:09:20.237] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.237] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.161] | : . ' , attachPackages() ...
[08:09:20.238] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.238] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.162] | : . ' , ; packages: [n=1] ‘future’
[08:09:20.238] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.238] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.162] | : . ' , attachPackages() ... done
[08:09:20.238] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.238] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.163] | : . ' , attachPackages() ...
[08:09:20.238] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.239] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.163] | : . ' , ; packages: [n=0] 
[08:09:20.239] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.239] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.163] | : . ' , attachPackages() ... done
[08:09:20.239] | : signalConditions() ... done
[08:09:20.239] | relay conditions ... done
[08:09:20.239] value() for MulticoreFuture (<unnamed-1>) ... done
List of 1
 $ nthreads_child: int 4
  - Number of OpenMP threads in ‘MulticoreFuture’ future: ‘4’
List of 1
 $ nthreads_children:List of 2
  ..$ : int 4
  ..$ : int 4
  - Number of OpenMP threads in mclapply(): ‘4’
- Trying to reset number of OpenMP threads
List of 1
 $ nthreads_2: int 4
  - Number of OpenMP threads: ‘4’
Checking RhpcBLASctl capabilities ... done

> if (supportsMulticore() && availableCores("multicore") >= 
+     2 && supports_omp_threads()) {
+     nthreads_0 <- RhpcBLASctl::omp_get_max_threads .... [TRUNCATED] 
[08:09:20.251] supports_omp_threads() = TRUE
'future.fork.multithreading.enable' = TRUE ...
[08:09:20.265] future(..., label = NULL) ...
[08:09:20.265] | lazy: FALSE
[08:09:20.265] | stdout: TRUE
[08:09:20.265] | conditions: [n=1] ‘condition’
[08:09:20.265] | gc: FALSE
[08:09:20.266] | earlySignal: FALSE
[08:09:20.266] | getGlobalsAndPackages() ...
[08:09:20.266] | : Searching for globals ...
[08:09:20.270] | : . globals found: [2] ‘list’, ‘::’
[08:09:20.270] | : Searching for globals ... done
[08:09:20.270] | : Resolving globals: FALSE
[08:09:20.270] | : Search for packages associated with the globals ...
[08:09:20.270] | : . Packages associated with globals: [1] ‘base’
[08:09:20.271] | : . Packages: [1] ‘base’
[08:09:20.271] | : Search for packages associated with the globals ... done
[08:09:20.271] | : Packages after dropping 'base': [0] 
[08:09:20.271] | : globals: [0] 
[08:09:20.271] | : packages: [0] 
[08:09:20.271] | getGlobalsAndPackages() ... done
[08:09:20.272] | run() for ‘Future’ (<unnamed-2>) ...
[08:09:20.272] | : state: ‘created’
[08:09:20.272] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.272] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.272] | : Using MulticoreFutureBackend ...
[08:09:20.272] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:09:20.272] | : . Launching futures ...
[08:09:20.272] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:09:20.273] | : . ' , getFutureData() ...
[08:09:20.273] | : . ' , ; getFutureCore() ...
[08:09:20.273] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:09:20.273] | : . ' , ; getFutureCore() ... done
[08:09:20.273] | : . ' , ; getFutureCapture() ...
[08:09:20.273] | : . ' , ; getFutureCapture() ... done
[08:09:20.273] | : . ' , ; getFutureContext() ...
[08:09:20.273] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.274] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:09:20.274] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.274] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:09:20.274] | : . ' , ; getFutureContext() ... done
[08:09:20.274] | : . ' , getFutureData() ... done
[08:09:20.274] | : . ' , requestCore(..., workers = 2) ...
[08:09:20.274] | : . ' , requestCore(..., workers = 2) ... done
[08:09:20.276] | : . ' , MulticoreFuture started
[08:09:20.276] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:09:20.277] | : . Launching futures ... done
[08:09:20.277] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:09:20.277] | : Using MulticoreFutureBackend ... done
[08:09:20.277] | run() for ‘Future’ (<unnamed-2>) ... done
[08:09:20.277] future(..., label = NULL) ... done
[08:09:20.278] value() for MulticoreFuture (<unnamed-2>) ...
[08:09:20.278] | result() for MulticoreFuture ...
[08:09:20.282] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.282] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:09:20.282] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.283] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:20.283] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:09:20.283] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:09:20.283] | : . ' , ; ` | New stack:
[08:09:20.284] | : . ' , ; ` | List of 1
[08:09:20.284] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.284] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.284] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:09:20.284] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.284] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.284] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.284] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.284] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.291] | : . ' , ; ` | Old stack:
[08:09:20.292] | : . ' , ; ` | List of 1
[08:09:20.292] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.292] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.292] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.292] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:09:20.292] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.292] | : . ' , ; ` |     ...)  
[08:09:20.292] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.292] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.292] | : . ' , ; ` |   ..- attr(*, "call")= language plan(multicore)
[08:09:20.292] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.292] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.292] | : . ' , ; ` |     ...)  
[08:09:20.292] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.292] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.297] | : . ' , ; ` | Not identical
[08:09:20.297] | : . ' , ; ` | all.equal() for future ...
[08:09:20.297] | : . ' , ; ` | : List of 2
[08:09:20.297] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.297] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.297] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.297] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.297] | : . ' , ; ` | :     ...)  
[08:09:20.297] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(multicore)
[08:09:20.297] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.297] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.297] | : . ' , ; ` | :     ...)  
[08:09:20.297] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.305] | : . ' , ; ` | : Formals differ
[08:09:20.305] | : . ' , ; ` | all.equal() for future ... done
[08:09:20.306] | : . ' , ; ` | Future strategies differ at level 1
[08:09:20.306] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:09:20.306] | : . ' , ; ` plan(): Setting new future backend stack:
[08:09:20.306] | : . ' , ; ` List of future strategies:
[08:09:20.306] | : . ' , ; ` 1. sequential:
[08:09:20.306] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:09:20.306] | : . ' , ; `    - tweaked: FALSE
[08:09:20.306] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.307] | : . ' , ; ` List of 1
[08:09:20.307] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.307] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.307] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:09:20.307] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.307] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.307] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.307] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.307] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.311] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:09:20.311] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:09:20.311] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.311] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:09:20.311] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.311] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.311] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:09:20.311] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.311] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.311] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.311] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.314] | : . ' , ; ` | : init: TRUE
[08:09:20.314] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:09:20.314] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:09:20.314] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:09:20.314] | : . ' , ; ` | : .  list()
[08:09:20.315] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:09:20.315] | : . ' , ; ` | : .  list()
[08:09:20.315] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:09:20.315] | : . ' , ; ` | : . Dotted pair list of 2
[08:09:20.315] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:09:20.315] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:09:20.318] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:09:20.318] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:09:20.319] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:09:20.319] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.319] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:09:20.319] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:09:20.319] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:20.322] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:20.323] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:20.323] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:09:20.323] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:09:20.323] | : . ' , ; ` | : New stack:
[08:09:20.323] | : . ' , ; ` | : List of 1
[08:09:20.323] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.323] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.323] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.323] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:20.323] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.323] | : . ' , ; ` | :     ...)  
[08:09:20.323] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.323] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.323] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(multicore)
[08:09:20.323] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.323] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.323] | : . ' , ; ` | :     ...)  
[08:09:20.323] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.323] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.326] | : . ' , ; ` | : Old stack:
[08:09:20.326] | : . ' , ; ` | : List of 1
[08:09:20.326] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.326] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.326] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:20.326] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.326] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.326] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.326] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.326] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e2ffb9ce80> 
[08:09:20.326] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.326] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.326] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.330] | : . ' , ; ` | : Not identical
[08:09:20.330] | : . ' , ; ` | : all.equal() for future ...
[08:09:20.330] | : . ' , ; ` | : . List of 2
[08:09:20.330] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.330] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.330] | : . ' , ; ` | : .     ...)  
[08:09:20.330] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(multicore)
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.330] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.330] | : . ' , ; ` | : .     ...)  
[08:09:20.330] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.330] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.330] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.330] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e2ffb9ce80> 
[08:09:20.330] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.330] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.336] | : . ' , ; ` | : . Formals differ
[08:09:20.336] | : . ' , ; ` | : all.equal() for future ... done
[08:09:20.336] | : . ' , ; ` | : Future strategies differ at level 1
[08:09:20.336] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:09:20.336] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:09:20.336] | : . ' , ; ` | List of future strategies:
[08:09:20.336] | : . ' , ; ` | 1. multicore:
[08:09:20.336] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:09:20.336] | : . ' , ; ` |    - tweaked: FALSE
[08:09:20.336] | : . ' , ; ` |    - call: plan(multicore)
[08:09:20.337] | : . ' , ; ` | List of 1
[08:09:20.337] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.337] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.337] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.337] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:09:20.337] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.337] | : . ' , ; ` |     ...)  
[08:09:20.337] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.337] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.337] | : . ' , ; ` |   ..- attr(*, "call")= language plan(multicore)
[08:09:20.337] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.337] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.337] | : . ' , ; ` |     ...)  
[08:09:20.337] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.337] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.342] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:09:20.342] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:09:20.342] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.343] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.343] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:09:20.343] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:09:20.343] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:20.343] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:20.344] | : readImmediateCondition() ...
[08:09:20.344] | : . Path: ‘/tmp/Rtmp53AsxL/.future/immediateConditions’
[08:09:20.344] | : . Number of RDS files: 0
[08:09:20.344] | : . Returned conditions set:
[08:09:20.345] | : .  list()
[08:09:20.345] | : readImmediateCondition() ... done
[08:09:20.346] | : result() for MulticoreFuture ...
[08:09:20.346] | : result() for MulticoreFuture ... done
[08:09:20.346] | : signalConditions() ...
[08:09:20.346] | : . include = ‘immediateCondition’
[08:09:20.346] | : . exclude = 
[08:09:20.346] | : . resignal = FALSE
[08:09:20.346] | : . Number of conditions: 6
[08:09:20.346] | : .  int 6
[08:09:20.349] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.349] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.349] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.349] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.350] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.350] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.350] | : signalConditions() ... done
[08:09:20.350] | result() for MulticoreFuture ... done
[08:09:20.350] | result() for MulticoreFuture ...
[08:09:20.350] | result() for MulticoreFuture ... done
[08:09:20.351] | signalConditions() ...
[08:09:20.351] | : include = ‘immediateCondition’
[08:09:20.351] | : exclude = 
[08:09:20.351] | : resignal = FALSE
[08:09:20.351] | : Number of conditions: 6
[08:09:20.351] | :  int 6
[08:09:20.352] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.352] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.352] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.352] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.353] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.353] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.353] | signalConditions() ... done
[08:09:20.353] | relay stdout ...
[08:09:20.353] | relay stdout ... done
[08:09:20.353] | check for misuse ...
[08:09:20.353] | check for misuse ... done
[08:09:20.354] | relay conditions ...
[08:09:20.354] | : Future state: ‘finished’
[08:09:20.354] | : result() for MulticoreFuture ...
[08:09:20.354] | : result() for MulticoreFuture ... done
[08:09:20.354] | : signalConditions() ...
[08:09:20.354] | : . include = ‘condition’
[08:09:20.354] | : . exclude = ‘immediateCondition’
[08:09:20.355] | : . resignal = TRUE
[08:09:20.355] | : . Number of conditions: 6
[08:09:20.355] | : .  int 6
[08:09:20.355] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.355] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.279] | : . ' , attachPackages() ...
[08:09:20.356] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.356] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.280] | : . ' , ; packages: [n=1] ‘future’
[08:09:20.356] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.356] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.280] | : . ' , attachPackages() ... done
[08:09:20.356] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.356] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.280] | : . ' , attachPackages() ...
[08:09:20.357] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.357] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.281] | : . ' , ; packages: [n=0] 
[08:09:20.357] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.357] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.281] | : . ' , attachPackages() ... done
[08:09:20.357] | : signalConditions() ... done
[08:09:20.357] | relay conditions ... done
[08:09:20.358] value() for MulticoreFuture (<unnamed-2>) ... done
Number of OpenMP threads in ‘MulticoreFuture’ future: 4
'future.fork.multithreading.enable' = TRUE ... DONE
'future.fork.multithreading.enable' = FALSE ...
[08:09:20.358] future(..., label = NULL) ...
[08:09:20.358] | lazy: FALSE
[08:09:20.358] | stdout: TRUE
[08:09:20.358] | conditions: [n=1] ‘condition’
[08:09:20.358] | gc: FALSE
[08:09:20.358] | earlySignal: FALSE
[08:09:20.359] | getGlobalsAndPackages() ...
[08:09:20.359] | : Searching for globals ...
[08:09:20.363] | : . globals found: [2] ‘list’, ‘::’
[08:09:20.363] | : Searching for globals ... done
[08:09:20.363] | : Resolving globals: FALSE
[08:09:20.363] | : Search for packages associated with the globals ...
[08:09:20.364] | : . Packages associated with globals: [1] ‘base’
[08:09:20.364] | : . Packages: [1] ‘base’
[08:09:20.364] | : Search for packages associated with the globals ... done
[08:09:20.364] | : Packages after dropping 'base': [0] 
[08:09:20.364] | : globals: [0] 
[08:09:20.365] | : packages: [0] 
[08:09:20.365] | getGlobalsAndPackages() ... done
[08:09:20.365] | run() for ‘Future’ (<unnamed-3>) ...
[08:09:20.365] | : state: ‘created’
[08:09:20.365] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.365] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.366] | : Using MulticoreFutureBackend ...
[08:09:20.366] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:09:20.366] | : . Launching futures ...
[08:09:20.366] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:09:20.366] | : . ' , getFutureData() ...
[08:09:20.366] | : . ' , ; getFutureCore() ...
[08:09:20.366] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:09:20.366] | : . ' , ; getFutureCore() ... done
[08:09:20.367] | : . ' , ; getFutureCapture() ...
[08:09:20.367] | : . ' , ; getFutureCapture() ... done
[08:09:20.367] | : . ' , ; getFutureContext() ...
[08:09:20.367] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.367] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:09:20.367] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.367] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:09:20.368] | : . ' , ; getFutureContext() ... done
[08:09:20.368] | : . ' , ; supports_omp_threads() = TRUE
[08:09:20.368] | : . ' , ; Force single-threaded (OpenMP and RcppParallel) processing in MulticoreFuture
[08:09:20.368] | : . ' , getFutureData() ... done
[08:09:20.368] | : . ' , requestCore(..., workers = 2) ...
[08:09:20.368] | : . ' , requestCore(..., workers = 2) ... done
[08:09:20.370] | : . ' , MulticoreFuture started
[08:09:20.371] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:09:20.371] | : . Launching futures ... done
[08:09:20.371] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:09:20.372] | : Using MulticoreFutureBackend ... done
[08:09:20.372] | run() for ‘Future’ (<unnamed-3>) ... done
[08:09:20.372] future(..., label = NULL) ... done
[08:09:20.372] value() for MulticoreFuture (<unnamed-3>) ...
[08:09:20.372] | result() for MulticoreFuture ...
[08:09:20.374] | : . ' , canForceSingleThreading() ...
[08:09:20.374] | : . ' , ; results: TRUE
[08:09:20.374] | : . ' , canForceSingleThreading() ... done
[08:09:20.377] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.377] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:09:20.378] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.378] | : . ' , setNumberOfThreads() ...
[08:09:20.379] | : . ' , ; arguments: openmp=1, rcpp=1
[08:09:20.379] | : . ' , ; canForceSingleThreading() ...
[08:09:20.379] | : . ' , ; ` results: TRUE (memoized)
[08:09:20.379] | : . ' , ; canForceSingleThreading() ... done
[08:09:20.379] | : . ' , ; previous settings: openmp=4, rcpp=
[08:09:20.379] | : . ' , ; new settings: openmp=1, rcpp=1
[08:09:20.380] | : . ' , setNumberOfThreads() ... done
[08:09:20.380] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:20.380] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:09:20.380] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:09:20.380] | : . ' , ; ` | New stack:
[08:09:20.381] | : . ' , ; ` | List of 1
[08:09:20.381] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.381] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.381] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:09:20.381] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.381] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.381] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.381] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.381] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.388] | : . ' , ; ` | Old stack:
[08:09:20.388] | : . ' , ; ` | List of 1
[08:09:20.388] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.388] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.388] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.388] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:09:20.388] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.388] | : . ' , ; ` |     ...)  
[08:09:20.388] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.388] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.388] | : . ' , ; ` |   ..- attr(*, "call")= language plan(multicore)
[08:09:20.388] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.388] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.388] | : . ' , ; ` |     ...)  
[08:09:20.388] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.388] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.394] | : . ' , ; ` | Not identical
[08:09:20.394] | : . ' , ; ` | all.equal() for future ...
[08:09:20.394] | : . ' , ; ` | : List of 2
[08:09:20.394] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.394] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.394] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.394] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.394] | : . ' , ; ` | :     ...)  
[08:09:20.394] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(multicore)
[08:09:20.394] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.394] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.394] | : . ' , ; ` | :     ...)  
[08:09:20.394] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.402] | : . ' , ; ` | : Formals differ
[08:09:20.402] | : . ' , ; ` | all.equal() for future ... done
[08:09:20.402] | : . ' , ; ` | Future strategies differ at level 1
[08:09:20.403] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:09:20.403] | : . ' , ; ` plan(): Setting new future backend stack:
[08:09:20.403] | : . ' , ; ` List of future strategies:
[08:09:20.403] | : . ' , ; ` 1. sequential:
[08:09:20.403] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:09:20.403] | : . ' , ; `    - tweaked: FALSE
[08:09:20.403] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.404] | : . ' , ; ` List of 1
[08:09:20.404] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.404] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.404] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:09:20.404] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.404] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.404] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.404] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.404] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.407] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:09:20.407] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:09:20.408] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.408] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:09:20.408] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.408] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.408] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:09:20.408] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.408] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.408] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.408] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.410] | : . ' , ; ` | : init: TRUE
[08:09:20.410] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:09:20.410] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:09:20.410] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:09:20.410] | : . ' , ; ` | : .  list()
[08:09:20.411] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:09:20.411] | : . ' , ; ` | : .  list()
[08:09:20.411] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:09:20.411] | : . ' , ; ` | : . Dotted pair list of 2
[08:09:20.411] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:09:20.411] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:09:20.413] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:09:20.413] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:09:20.414] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:09:20.414] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.415] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:09:20.415] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:09:20.415] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:20.418] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:20.418] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:20.418] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:09:20.418] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:09:20.418] | : . ' , ; ` | : New stack:
[08:09:20.419] | : . ' , ; ` | : List of 1
[08:09:20.419] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.419] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.419] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.419] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:20.419] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.419] | : . ' , ; ` | :     ...)  
[08:09:20.419] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.419] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.419] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(multicore)
[08:09:20.419] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.419] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.419] | : . ' , ; ` | :     ...)  
[08:09:20.419] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.419] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.422] | : . ' , ; ` | : Old stack:
[08:09:20.422] | : . ' , ; ` | : List of 1
[08:09:20.422] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.422] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.422] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:20.422] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.422] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.422] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.422] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.422] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e300ffa640> 
[08:09:20.422] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.422] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.422] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.425] | : . ' , ; ` | : Not identical
[08:09:20.425] | : . ' , ; ` | : all.equal() for future ...
[08:09:20.425] | : . ' , ; ` | : . List of 2
[08:09:20.425] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.425] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.425] | : . ' , ; ` | : .     ...)  
[08:09:20.425] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(multicore)
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.425] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.425] | : . ' , ; ` | : .     ...)  
[08:09:20.425] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.425] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.425] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:20.425] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e300ffa640> 
[08:09:20.425] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:20.425] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:20.431] | : . ' , ; ` | : . Formals differ
[08:09:20.431] | : . ' , ; ` | : all.equal() for future ... done
[08:09:20.431] | : . ' , ; ` | : Future strategies differ at level 1
[08:09:20.431] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:09:20.431] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:09:20.431] | : . ' , ; ` | List of future strategies:
[08:09:20.431] | : . ' , ; ` | 1. multicore:
[08:09:20.431] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:09:20.431] | : . ' , ; ` |    - tweaked: FALSE
[08:09:20.431] | : . ' , ; ` |    - call: plan(multicore)
[08:09:20.431] | : . ' , ; ` | List of 1
[08:09:20.431] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:09:20.431] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:09:20.431] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:09:20.431] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:09:20.431] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.431] | : . ' , ; ` |     ...)  
[08:09:20.431] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.431] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.431] | : . ' , ; ` |   ..- attr(*, "call")= language plan(multicore)
[08:09:20.431] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55e3002689e0> 
[08:09:20.431] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:20.431] | : . ' , ; ` |     ...)  
[08:09:20.431] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:20.431] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:20.436] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:09:20.436] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:09:20.436] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:20.436] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:20.436] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:09:20.436] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:09:20.436] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:20.437] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:20.437] | : . ' , setNumberOfThreads() ...
[08:09:20.437] | : . ' , ; arguments: openmp=4, rcpp=
[08:09:20.437] | : . ' , ; canForceSingleThreading() ...
[08:09:20.437] | : . ' , ; ` results: TRUE (memoized)
[08:09:20.437] | : . ' , ; canForceSingleThreading() ... done
[08:09:20.437] | : . ' , ; previous settings: openmp=1, rcpp=1
[08:09:20.437] | : . ' , ; new settings: openmp=4, rcpp=
[08:09:20.438] | : . ' , setNumberOfThreads() ... done
[08:09:20.438] | : readImmediateCondition() ...
[08:09:20.438] | : . Path: ‘/tmp/Rtmp53AsxL/.future/immediateConditions’
[08:09:20.439] | : . Number of RDS files: 0
[08:09:20.439] | : . Returned conditions set:
[08:09:20.439] | : .  list()
[08:09:20.439] | : readImmediateCondition() ... done
[08:09:20.440] | : result() for MulticoreFuture ...
[08:09:20.440] | : result() for MulticoreFuture ... done
[08:09:20.440] | : signalConditions() ...
[08:09:20.440] | : . include = ‘immediateCondition’
[08:09:20.440] | : . exclude = 
[08:09:20.440] | : . resignal = FALSE
[08:09:20.441] | : . Number of conditions: 6
[08:09:20.441] | : .  int 6
[08:09:20.441] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.442] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.442] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.442] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.442] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.442] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.442] | : signalConditions() ... done
[08:09:20.442] | result() for MulticoreFuture ... done
[08:09:20.443] | result() for MulticoreFuture ...
[08:09:20.443] | result() for MulticoreFuture ... done
[08:09:20.443] | signalConditions() ...
[08:09:20.443] | : include = ‘immediateCondition’
[08:09:20.443] | : exclude = 
[08:09:20.443] | : resignal = FALSE
[08:09:20.443] | : Number of conditions: 6
[08:09:20.443] | :  int 6
[08:09:20.444] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.444] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.446] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.446] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.446] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.446] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.446] | signalConditions() ... done
[08:09:20.447] | relay stdout ...
[08:09:20.447] | relay stdout ... done
[08:09:20.447] | check for misuse ...
[08:09:20.447] | check for misuse ... done
[08:09:20.447] | relay conditions ...
[08:09:20.447] | : Future state: ‘finished’
[08:09:20.447] | : result() for MulticoreFuture ...
[08:09:20.448] | : result() for MulticoreFuture ... done
[08:09:20.448] | : signalConditions() ...
[08:09:20.448] | : . include = ‘condition’
[08:09:20.448] | : . exclude = ‘immediateCondition’
[08:09:20.448] | : . resignal = TRUE
[08:09:20.448] | : . Number of conditions: 6
[08:09:20.448] | : .  int 6
[08:09:20.449] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.449] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.375] | : . ' , attachPackages() ...
[08:09:20.449] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.449] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.375] | : . ' , ; packages: [n=1] ‘future’
[08:09:20.450] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.450] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.376] | : . ' , attachPackages() ... done
[08:09:20.450] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.450] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.376] | : . ' , attachPackages() ...
[08:09:20.450] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.451] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.376] | : . ' , ; packages: [n=0] 
[08:09:20.451] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:20.451] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:20.376] | : . ' , attachPackages() ... done
[08:09:20.451] | : signalConditions() ... done
[08:09:20.451] | relay conditions ... done
[08:09:20.451] value() for MulticoreFuture (<unnamed-3>) ... done
Number of OpenMP threads in ‘MulticoreFuture’ future: 1
'future.fork.multithreading.enable' = FALSE ... DONE

> message("*** multicore() and multi-threading ... DONE")
*** multicore() and multi-threading ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.2s, sys.self=0.04s, elapsed=0.4s, user.child=0.1s, sys.child=0.07s
Test ‘multicore,multithreading’ ... success
> 
