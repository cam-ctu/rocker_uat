
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-globals,subassignment.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("globals,subassignment")
Test ‘globals,subassignment’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-globals,subassignment.R’

> library(future)
[08:08:55.013] Option 'future.startup.script': TRUE
[08:08:55.014] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:55.014] Future startup scripts found: <none>

> oopts <- c(oopts, options(future.globals.resolve = TRUE, 
+     future.globals.onMissing = "error"))

> message("*** Globals - subassignments ...")
*** Globals - subassignments ...

> message("*** Globals - subassignments w/ x$a <- value ...")
*** Globals - subassignments w/ x$a <- value ...

> x <- x0 <- list()

> y0 <- list(a = 1)

> str(list(x = x, y0 = y0))
List of 2
 $ x : list()
 $ y0:List of 1
  ..$ a: num 1

> y <- local({
+     x$a <- 1
+     x
+ })

> stopifnot(identical(y, y0))

> y <- local({
+     x[["a"]] <- 1
+     x
+ })

> stopifnot(identical(y, y0))

> y <- local({
+     x["a"] <- list(1)
+     x
+ })

> stopifnot(identical(y, y0))

> stopifnot(identical(x, list()))

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     message("availableCor ..." ... [TRUNCATED] 
Testing with 1 cores ...
availableCores(): 1
- plan('sequential') ...
[08:08:55.063] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.063] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:55.063] | : all.equal() for FutureStrategyList ...
[08:08:55.063] | : . New stack:
[08:08:55.063] | : . List of 1
[08:08:55.063] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.063] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.063] | : .   ..- attr(*, "init")= logi TRUE
[08:08:55.063] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.063] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.063] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.063] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:55.063] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.066] | : . Old stack:
[08:08:55.066] | : . List of 1
[08:08:55.066] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.066] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.066] | : .   ..- attr(*, "init")= logi TRUE
[08:08:55.066] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.066] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.066] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.066] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:55.066] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.068] | : . Not identical
[08:08:55.069] | : . all.equal() for future ...
[08:08:55.069] | : . ' List of 2
[08:08:55.069] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.069] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.069] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:55.069] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.069] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.069] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.069] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:55.069] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.069] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.069] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:55.069] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.069] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.069] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.069] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:55.074] | : . all.equal() for future ... done
[08:08:55.074] | : all.equal() for FutureStrategyList ... done
[08:08:55.074] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.074] | : List of future strategies:
[08:08:55.074] | : 1. sequential:
[08:08:55.074] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.074] | :    - tweaked: FALSE
[08:08:55.074] | :    - call: plan(sequential)
[08:08:55.075] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:55.075] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.075] future(..., label = NULL) ...
[08:08:55.075] | lazy: FALSE
[08:08:55.075] | stdout: TRUE
[08:08:55.075] | conditions: [n=1] ‘condition’
[08:08:55.076] | gc: FALSE
[08:08:55.076] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.077] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.077] | : Searching for globals ...
[08:08:55.093] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.093] | : Searching for globals ... done
[08:08:55.095] | : Resolving globals: TRUE
[08:08:55.095] | : Resolving any globals that are futures ...
[08:08:55.095] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.095] | : Resolving any globals that are futures ... done
[08:08:55.095] | : Search for packages associated with the globals ...
[08:08:55.096] | : . Packages associated with globals: [1] ‘base’
[08:08:55.096] | : . Packages: [1] ‘base’
[08:08:55.096] | : Search for packages associated with the globals ... done
[08:08:55.096] | : Resolving futures part of globals (recursively) ...
[08:08:55.097] | : . resolve() for FutureGlobals ...
[08:08:55.097] | : . ' recursive: 99
[08:08:55.097] | : . ' Number of elements: 1
[08:08:55.097] | : . ' elements: ‘x’
[08:08:55.098] | : . ' 'obj' is list
[08:08:55.098] | : . ' resolve(obj, ...) ...
[08:08:55.098] | : . ' , resolve() for list ...
[08:08:55.098] | : . ' , ; recursive: 98
[08:08:55.098] | : . ' , ; Number of elements: 0
[08:08:55.098] | : . ' , resolve() for list ... done
[08:08:55.098] | : . ' resolve(obj, ...) ... done
[08:08:55.098] | : . ' resolved() for list ...
[08:08:55.099] | : . ' , Number of elements: 0
[08:08:55.099] | : . ' , Number of futures: 0
[08:08:55.099] | : . ' resolved() for list ... done
[08:08:55.099] | : . ' length: 0 (resolved future 1)
[08:08:55.099] | : . resolve() for FutureGlobals ... done
[08:08:55.099] | : . globals: [1] ‘x’
[08:08:55.099] | : Resolving futures part of globals (recursively) ... done
[08:08:55.099] | : Packages after dropping 'base': [0] 
[08:08:55.099] | : globals: [1] ‘x’
[08:08:55.100] | : packages: [0] 
[08:08:55.100] | getGlobalsAndPackages() ... done
[08:08:55.100] | run() for ‘Future’ (<unnamed-1>) ...
[08:08:55.100] | : state: ‘created’
[08:08:55.101] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.101] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:55.101] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.101] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.101] | : . '  - attr(*, "init")= logi TRUE
[08:08:55.101] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.101] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.101] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.101] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:55.103] | : . ' init: TRUE
[08:08:55.103] | : . ' makeFutureBackend(<sequential>) ...
[08:08:55.103] | : . ' , Backend function: <‘NULL’>
[08:08:55.103] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:55.103] | : . ' ,  list()
[08:08:55.104] | : . ' , Evaluator formal arguments: [n=2]
[08:08:55.104] | : . ' ,  list()
[08:08:55.104] | : . ' , Backend factory arguments: [n=2]
[08:08:55.104] | : . ' , Dotted pair list of 2
[08:08:55.104] | : . ' ,  $ gc         : logi FALSE
[08:08:55.104] | : . ' ,  $ earlySignal: logi FALSE
[08:08:55.105] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:55.105] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:55.105] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:55.106] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.106] | : Using SequentialFutureBackend ...
[08:08:55.106] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:55.106] | : . Launching futures ...
[08:08:55.106] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.106] | : . ' , getFutureData() ...
[08:08:55.106] | : . ' , ; getFutureCore() ...
[08:08:55.107] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.107] | : . ' , ; getFutureCore() ... done
[08:08:55.107] | : . ' , ; getFutureCapture() ...
[08:08:55.107] | : . ' , ; getFutureCapture() ... done
[08:08:55.107] | : . ' , ; getFutureContext() ...
[08:08:55.107] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.107] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.108] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.108] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.108] | : . ' , ; getFutureContext() ... done
[08:08:55.108] | : . ' , getFutureData() ... done
[08:08:55.110] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.110] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.111] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.111] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.111] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.111] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.111] | : . ' , ; ` | New stack:
[08:08:55.111] | : . ' , ; ` | List of 1
[08:08:55.111] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.111] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.111] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.111] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.111] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.111] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.111] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.111] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.114] | : . ' , ; ` | Old stack:
[08:08:55.114] | : . ' , ; ` | List of 1
[08:08:55.114] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.114] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.114] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.114] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.114] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.114] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.114] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.114] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.114] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.114] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.114] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.117] | : . ' , ; ` | Not identical
[08:08:55.117] | : . ' , ; ` | all.equal() for future ...
[08:08:55.117] | : . ' , ; ` | : List of 2
[08:08:55.117] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.117] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.117] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.117] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.117] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.117] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.117] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.124] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.124] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.124] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.124] | : . ' , ; ` List of future strategies:
[08:08:55.124] | : . ' , ; ` 1. sequential:
[08:08:55.124] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.124] | : . ' , ; `    - tweaked: FALSE
[08:08:55.124] | : . ' , ; `    - call: plan(sequential)
[08:08:55.124] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.125] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.125] | : . ' , assign_globals() ...
[08:08:55.125] | : . ' , List of 1
[08:08:55.125] | : . ' ,  $ x: list()
[08:08:55.125] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.125] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.125] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.125] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.125] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.125] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.127] | : . ' , - copied ‘x’ to environment
[08:08:55.127] | : . ' , assign_globals() ... done
[08:08:55.130] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.130] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.130] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.130] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.130] | : . ' , ; ` | : New stack:
[08:08:55.130] | : . ' , ; ` | : List of 1
[08:08:55.130] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.130] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.130] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.130] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.130] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.130] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.130] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.130] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.130] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.130] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.130] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.133] | : . ' , ; ` | : Old stack:
[08:08:55.133] | : . ' , ; ` | : List of 1
[08:08:55.133] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.133] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.133] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.133] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.133] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.133] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.133] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.133] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.133] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.133] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.133] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.136] | : . ' , ; ` | : Identical
[08:08:55.137] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.137] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.137] | : . ' , ; ` | List of future strategies:
[08:08:55.137] | : . ' , ; ` | 1. sequential:
[08:08:55.137] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.137] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.137] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.137] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.137] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.137] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.141] | : . ' , SequentialFuture started (and completed)
[08:08:55.141] | : . ' , signalConditions() ...
[08:08:55.142] | : . ' , ; include = ‘immediateCondition’
[08:08:55.142] | : . ' , ; exclude = 
[08:08:55.142] | : . ' , ; resignal = FALSE
[08:08:55.142] | : . ' , ; Number of conditions: 6
[08:08:55.142] | : . ' , ;  int 6
[08:08:55.142] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.142] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.143] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.143] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.143] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.143] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.143] | : . ' , signalConditions() ... done
[08:08:55.143] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.143] | : . Launching futures ... done
[08:08:55.143] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.144] | : Using SequentialFutureBackend ... done
[08:08:55.144] | run() for ‘Future’ (<unnamed-1>) ... done
[08:08:55.144] future(..., label = NULL) ... done
[08:08:55.144] value() for SequentialFuture (<unnamed-1>) ...
[08:08:55.144] | signalConditions() ...
[08:08:55.144] | : include = ‘immediateCondition’
[08:08:55.145] | : exclude = 
[08:08:55.145] | : resignal = FALSE
[08:08:55.145] | : Number of conditions: 6
[08:08:55.145] | :  int 6
[08:08:55.145] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.145] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.145] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.146] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.146] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.146] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.146] | signalConditions() ... done
[08:08:55.146] | relay stdout ...
[08:08:55.146] | relay stdout ... done
[08:08:55.146] | check for misuse ...
[08:08:55.146] | check for misuse ... done
[08:08:55.146] | relay conditions ...
[08:08:55.146] | : Future state: ‘finished’
[08:08:55.147] | : signalConditions() ...
[08:08:55.147] | : . include = ‘condition’
[08:08:55.147] | : . exclude = ‘immediateCondition’
[08:08:55.147] | : . resignal = TRUE
[08:08:55.147] | : . Number of conditions: 6
[08:08:55.147] | : .  int 6
[08:08:55.147] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.148] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.109] | : . ' , attachPackages() ...
[08:08:55.148] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.148] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.109] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.148] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.148] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.109] | : . ' , attachPackages() ... done
[08:08:55.148] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.148] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.110] | : . ' , attachPackages() ...
[08:08:55.148] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.148] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.110] | : . ' , ; packages: [n=0] 
[08:08:55.149] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.149] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.110] | : . ' , attachPackages() ... done
[08:08:55.149] | : signalConditions() ... done
[08:08:55.149] | relay conditions ... done
[08:08:55.149] value() for SequentialFuture (<unnamed-1>) ... done
$a
[1] 1

[08:08:55.149] future(..., label = NULL) ...
[08:08:55.149] | lazy: TRUE
[08:08:55.149] | stdout: TRUE
[08:08:55.149] | conditions: [n=1] ‘condition’
[08:08:55.150] | gc: FALSE
[08:08:55.150] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.150] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.150] | : Searching for globals ...
[08:08:55.162] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.162] | : Searching for globals ... done
[08:08:55.162] | : Resolving globals: TRUE
[08:08:55.162] | : Resolving any globals that are futures ...
[08:08:55.163] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.163] | : Resolving any globals that are futures ... done
[08:08:55.163] | : Search for packages associated with the globals ...
[08:08:55.163] | : . Packages associated with globals: [1] ‘base’
[08:08:55.163] | : . Packages: [1] ‘base’
[08:08:55.163] | : Search for packages associated with the globals ... done
[08:08:55.164] | : Resolving futures part of globals (recursively) ...
[08:08:55.164] | : . resolve() for FutureGlobals ...
[08:08:55.164] | : . ' recursive: 99
[08:08:55.164] | : . ' Number of elements: 1
[08:08:55.164] | : . ' elements: ‘x’
[08:08:55.164] | : . ' 'obj' is list
[08:08:55.164] | : . ' resolve(obj, ...) ...
[08:08:55.164] | : . ' , resolve() for list ...
[08:08:55.165] | : . ' , ; recursive: 98
[08:08:55.165] | : . ' , ; Number of elements: 0
[08:08:55.165] | : . ' , resolve() for list ... done
[08:08:55.165] | : . ' resolve(obj, ...) ... done
[08:08:55.165] | : . ' resolved() for list ...
[08:08:55.165] | : . ' , Number of elements: 0
[08:08:55.165] | : . ' , Number of futures: 0
[08:08:55.165] | : . ' resolved() for list ... done
[08:08:55.165] | : . ' length: 0 (resolved future 1)
[08:08:55.165] | : . resolve() for FutureGlobals ... done
[08:08:55.166] | : . globals: [1] ‘x’
[08:08:55.166] | : Resolving futures part of globals (recursively) ... done
[08:08:55.166] | : Packages after dropping 'base': [0] 
[08:08:55.166] | : globals: [1] ‘x’
[08:08:55.166] | : packages: [0] 
[08:08:55.166] | getGlobalsAndPackages() ... done
[08:08:55.166] future(..., label = NULL) ... done
[08:08:55.166] value() for Future (<unnamed-2>) ...
[08:08:55.167] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:55.167] | : state: ‘created’
[08:08:55.167] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.167] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.167] | : Using SequentialFutureBackend ...
[08:08:55.167] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:55.167] | : . Launching futures ...
[08:08:55.167] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.167] | : . ' , getFutureData() ...
[08:08:55.168] | : . ' , ; getFutureCore() ...
[08:08:55.168] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.168] | : . ' , ; getFutureCore() ... done
[08:08:55.168] | : . ' , ; getFutureCapture() ...
[08:08:55.168] | : . ' , ; getFutureCapture() ... done
[08:08:55.168] | : . ' , ; getFutureContext() ...
[08:08:55.168] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.168] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.168] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.169] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.169] | : . ' , ; getFutureContext() ... done
[08:08:55.169] | : . ' , getFutureData() ... done
[08:08:55.170] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.170] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.170] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.171] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.171] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.171] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.171] | : . ' , ; ` | New stack:
[08:08:55.171] | : . ' , ; ` | List of 1
[08:08:55.171] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.171] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.171] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.171] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.171] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.171] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.171] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.171] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.174] | : . ' , ; ` | Old stack:
[08:08:55.174] | : . ' , ; ` | List of 1
[08:08:55.174] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.174] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.174] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.174] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.174] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.174] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.174] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.174] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.174] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.174] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.174] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.177] | : . ' , ; ` | Not identical
[08:08:55.177] | : . ' , ; ` | all.equal() for future ...
[08:08:55.177] | : . ' , ; ` | : List of 2
[08:08:55.177] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.177] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.177] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.177] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.177] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.177] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.177] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.183] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.184] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.184] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.184] | : . ' , ; ` List of future strategies:
[08:08:55.184] | : . ' , ; ` 1. sequential:
[08:08:55.184] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.184] | : . ' , ; `    - tweaked: FALSE
[08:08:55.184] | : . ' , ; `    - call: plan(sequential)
[08:08:55.184] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.184] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.185] | : . ' , assign_globals() ...
[08:08:55.185] | : . ' , List of 1
[08:08:55.185] | : . ' ,  $ x: list()
[08:08:55.185] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.185] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.185] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.185] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.185] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.185] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.187] | : . ' , - copied ‘x’ to environment
[08:08:55.187] | : . ' , assign_globals() ... done
[08:08:55.189] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.189] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.189] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.189] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.189] | : . ' , ; ` | : New stack:
[08:08:55.189] | : . ' , ; ` | : List of 1
[08:08:55.189] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.189] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.189] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.189] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.189] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.189] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.189] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.189] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.189] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.189] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.189] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.192] | : . ' , ; ` | : Old stack:
[08:08:55.192] | : . ' , ; ` | : List of 1
[08:08:55.192] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.192] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.192] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.192] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.192] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.192] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.192] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.192] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.192] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.192] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.192] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.195] | : . ' , ; ` | : Identical
[08:08:55.195] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.196] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.196] | : . ' , ; ` | List of future strategies:
[08:08:55.196] | : . ' , ; ` | 1. sequential:
[08:08:55.196] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.196] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.196] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.196] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.196] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.196] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.197] | : . ' , SequentialFuture started (and completed)
[08:08:55.197] | : . ' , signalConditions() ...
[08:08:55.197] | : . ' , ; include = ‘immediateCondition’
[08:08:55.197] | : . ' , ; exclude = 
[08:08:55.197] | : . ' , ; resignal = FALSE
[08:08:55.197] | : . ' , ; Number of conditions: 6
[08:08:55.197] | : . ' , ;  int 6
[08:08:55.198] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.198] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.198] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.198] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.198] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.198] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.198] | : . ' , signalConditions() ... done
[08:08:55.198] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.199] | : . Launching futures ... done
[08:08:55.199] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.199] | : Using SequentialFutureBackend ... done
[08:08:55.200] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:55.200] | signalConditions() ...
[08:08:55.200] | : include = ‘immediateCondition’
[08:08:55.200] | : exclude = 
[08:08:55.200] | : resignal = FALSE
[08:08:55.200] | : Number of conditions: 6
[08:08:55.201] | :  int 6
[08:08:55.201] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.201] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.201] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.201] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.201] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.201] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.202] | signalConditions() ... done
[08:08:55.202] | relay stdout ...
[08:08:55.202] | relay stdout ... done
[08:08:55.202] | check for misuse ...
[08:08:55.202] | check for misuse ... done
[08:08:55.202] | relay conditions ...
[08:08:55.202] | : Future state: ‘finished’
[08:08:55.202] | : signalConditions() ...
[08:08:55.202] | : . include = ‘condition’
[08:08:55.203] | : . exclude = ‘immediateCondition’
[08:08:55.203] | : . resignal = TRUE
[08:08:55.203] | : . Number of conditions: 6
[08:08:55.203] | : .  int 6
[08:08:55.203] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.203] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.169] | : . ' , attachPackages() ...
[08:08:55.203] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.204] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.169] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.204] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.204] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.169] | : . ' , attachPackages() ... done
[08:08:55.204] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.204] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.169] | : . ' , attachPackages() ...
[08:08:55.204] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.204] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.170] | : . ' , ; packages: [n=0] 
[08:08:55.204] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.204] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.170] | : . ' , attachPackages() ... done
[08:08:55.205] | : signalConditions() ... done
[08:08:55.205] | relay conditions ... done
[08:08:55.205] value() for Future (<unnamed-2>) ... done
$a
[1] 1

[08:08:55.206] future(..., label = NULL) ...
[08:08:55.206] | lazy: FALSE
[08:08:55.206] | stdout: TRUE
[08:08:55.206] | conditions: [n=1] ‘condition’
[08:08:55.206] | gc: FALSE
[08:08:55.206] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.206] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.207] | : Searching for globals ...
[08:08:55.218] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.218] | : Searching for globals ... done
[08:08:55.218] | : Resolving globals: TRUE
[08:08:55.218] | : Resolving any globals that are futures ...
[08:08:55.218] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.218] | : Resolving any globals that are futures ... done
[08:08:55.218] | : Search for packages associated with the globals ...
[08:08:55.219] | : . Packages associated with globals: [1] ‘base’
[08:08:55.219] | : . Packages: [1] ‘base’
[08:08:55.219] | : Search for packages associated with the globals ... done
[08:08:55.219] | : Resolving futures part of globals (recursively) ...
[08:08:55.219] | : . resolve() for FutureGlobals ...
[08:08:55.219] | : . ' recursive: 99
[08:08:55.220] | : . ' Number of elements: 1
[08:08:55.220] | : . ' elements: ‘x’
[08:08:55.220] | : . ' 'obj' is list
[08:08:55.220] | : . ' resolve(obj, ...) ...
[08:08:55.220] | : . ' , resolve() for list ...
[08:08:55.220] | : . ' , ; recursive: 98
[08:08:55.220] | : . ' , ; Number of elements: 0
[08:08:55.220] | : . ' , resolve() for list ... done
[08:08:55.220] | : . ' resolve(obj, ...) ... done
[08:08:55.220] | : . ' resolved() for list ...
[08:08:55.221] | : . ' , Number of elements: 0
[08:08:55.221] | : . ' , Number of futures: 0
[08:08:55.221] | : . ' resolved() for list ... done
[08:08:55.221] | : . ' length: 0 (resolved future 1)
[08:08:55.221] | : . resolve() for FutureGlobals ... done
[08:08:55.221] | : . globals: [1] ‘x’
[08:08:55.221] | : Resolving futures part of globals (recursively) ... done
[08:08:55.221] | : Packages after dropping 'base': [0] 
[08:08:55.221] | : globals: [1] ‘x’
[08:08:55.222] | : packages: [0] 
[08:08:55.222] | getGlobalsAndPackages() ... done
[08:08:55.222] | run() for ‘Future’ (<unnamed-3>) ...
[08:08:55.222] | : state: ‘created’
[08:08:55.222] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.222] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.222] | : Using SequentialFutureBackend ...
[08:08:55.222] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:55.223] | : . Launching futures ...
[08:08:55.223] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.223] | : . ' , getFutureData() ...
[08:08:55.223] | : . ' , ; getFutureCore() ...
[08:08:55.223] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.223] | : . ' , ; getFutureCore() ... done
[08:08:55.223] | : . ' , ; getFutureCapture() ...
[08:08:55.223] | : . ' , ; getFutureCapture() ... done
[08:08:55.223] | : . ' , ; getFutureContext() ...
[08:08:55.223] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.224] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.224] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.224] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.224] | : . ' , ; getFutureContext() ... done
[08:08:55.224] | : . ' , getFutureData() ... done
[08:08:55.225] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.225] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.225] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.226] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.226] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.226] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.226] | : . ' , ; ` | New stack:
[08:08:55.226] | : . ' , ; ` | List of 1
[08:08:55.226] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.226] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.226] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.226] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.226] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.226] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.226] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.226] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.229] | : . ' , ; ` | Old stack:
[08:08:55.229] | : . ' , ; ` | List of 1
[08:08:55.229] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.229] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.229] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.229] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.229] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.229] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.229] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.229] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.229] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.229] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.229] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.232] | : . ' , ; ` | Not identical
[08:08:55.232] | : . ' , ; ` | all.equal() for future ...
[08:08:55.232] | : . ' , ; ` | : List of 2
[08:08:55.232] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.232] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.232] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.232] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.232] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.232] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.232] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.238] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.238] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.238] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.238] | : . ' , ; ` List of future strategies:
[08:08:55.238] | : . ' , ; ` 1. sequential:
[08:08:55.238] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.238] | : . ' , ; `    - tweaked: FALSE
[08:08:55.238] | : . ' , ; `    - call: plan(sequential)
[08:08:55.239] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.239] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.239] | : . ' , assign_globals() ...
[08:08:55.239] | : . ' , List of 1
[08:08:55.239] | : . ' ,  $ x: list()
[08:08:55.239] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.239] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.239] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.239] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.239] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.239] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.241] | : . ' , - copied ‘x’ to environment
[08:08:55.242] | : . ' , assign_globals() ... done
[08:08:55.243] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.243] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.243] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.243] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.244] | : . ' , ; ` | : New stack:
[08:08:55.244] | : . ' , ; ` | : List of 1
[08:08:55.244] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.244] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.244] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.244] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.244] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.244] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.244] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.244] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.244] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.244] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.244] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.247] | : . ' , ; ` | : Old stack:
[08:08:55.247] | : . ' , ; ` | : List of 1
[08:08:55.247] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.247] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.247] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.247] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.247] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.247] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.247] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.247] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.247] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.247] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.247] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.250] | : . ' , ; ` | : Identical
[08:08:55.250] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.250] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.250] | : . ' , ; ` | List of future strategies:
[08:08:55.250] | : . ' , ; ` | 1. sequential:
[08:08:55.250] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.250] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.250] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.251] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.251] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.251] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.251] | : . ' , SequentialFuture started (and completed)
[08:08:55.251] | : . ' , signalConditions() ...
[08:08:55.252] | : . ' , ; include = ‘immediateCondition’
[08:08:55.252] | : . ' , ; exclude = 
[08:08:55.252] | : . ' , ; resignal = FALSE
[08:08:55.252] | : . ' , ; Number of conditions: 6
[08:08:55.252] | : . ' , ;  int 6
[08:08:55.252] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.252] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.253] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.253] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.253] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.253] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.253] | : . ' , signalConditions() ... done
[08:08:55.253] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.253] | : . Launching futures ... done
[08:08:55.253] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.253] | : Using SequentialFutureBackend ... done
[08:08:55.253] | run() for ‘Future’ (<unnamed-3>) ... done
[08:08:55.254] future(..., label = NULL) ... done
[08:08:55.254] value() for SequentialFuture (<unnamed-3>) ...
[08:08:55.255] | signalConditions() ...
[08:08:55.255] | : include = ‘immediateCondition’
[08:08:55.255] | : exclude = 
[08:08:55.255] | : resignal = FALSE
[08:08:55.255] | : Number of conditions: 6
[08:08:55.255] | :  int 6
[08:08:55.256] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.256] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.256] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.256] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.256] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.256] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.256] | signalConditions() ... done
[08:08:55.256] | relay stdout ...
[08:08:55.257] | relay stdout ... done
[08:08:55.257] | check for misuse ...
[08:08:55.257] | check for misuse ... done
[08:08:55.257] | relay conditions ...
[08:08:55.257] | : Future state: ‘finished’
[08:08:55.257] | : signalConditions() ...
[08:08:55.257] | : . include = ‘condition’
[08:08:55.257] | : . exclude = ‘immediateCondition’
[08:08:55.257] | : . resignal = TRUE
[08:08:55.257] | : . Number of conditions: 6
[08:08:55.258] | : .  int 6
[08:08:55.258] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.258] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.224] | : . ' , attachPackages() ...
[08:08:55.258] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.258] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.224] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.258] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.259] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.225] | : . ' , attachPackages() ... done
[08:08:55.259] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.259] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.225] | : . ' , attachPackages() ...
[08:08:55.259] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.259] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.225] | : . ' , ; packages: [n=0] 
[08:08:55.259] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.259] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.225] | : . ' , attachPackages() ... done
[08:08:55.259] | : signalConditions() ... done
[08:08:55.259] | relay conditions ... done
[08:08:55.260] value() for SequentialFuture (<unnamed-3>) ... done
$a
[1] 1

[08:08:55.260] future(..., label = NULL) ...
[08:08:55.260] | lazy: TRUE
[08:08:55.260] | stdout: TRUE
[08:08:55.260] | conditions: [n=1] ‘condition’
[08:08:55.260] | gc: FALSE
[08:08:55.260] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.260] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.261] | : Searching for globals ...
[08:08:55.272] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.272] | : Searching for globals ... done
[08:08:55.272] | : Resolving globals: TRUE
[08:08:55.272] | : Resolving any globals that are futures ...
[08:08:55.272] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.272] | : Resolving any globals that are futures ... done
[08:08:55.272] | : Search for packages associated with the globals ...
[08:08:55.273] | : . Packages associated with globals: [1] ‘base’
[08:08:55.273] | : . Packages: [1] ‘base’
[08:08:55.273] | : Search for packages associated with the globals ... done
[08:08:55.273] | : Resolving futures part of globals (recursively) ...
[08:08:55.273] | : . resolve() for FutureGlobals ...
[08:08:55.273] | : . ' recursive: 99
[08:08:55.273] | : . ' Number of elements: 1
[08:08:55.274] | : . ' elements: ‘x’
[08:08:55.274] | : . ' 'obj' is list
[08:08:55.274] | : . ' resolve(obj, ...) ...
[08:08:55.274] | : . ' , resolve() for list ...
[08:08:55.274] | : . ' , ; recursive: 98
[08:08:55.274] | : . ' , ; Number of elements: 0
[08:08:55.274] | : . ' , resolve() for list ... done
[08:08:55.274] | : . ' resolve(obj, ...) ... done
[08:08:55.274] | : . ' resolved() for list ...
[08:08:55.274] | : . ' , Number of elements: 0
[08:08:55.275] | : . ' , Number of futures: 0
[08:08:55.275] | : . ' resolved() for list ... done
[08:08:55.275] | : . ' length: 0 (resolved future 1)
[08:08:55.275] | : . resolve() for FutureGlobals ... done
[08:08:55.275] | : . globals: [1] ‘x’
[08:08:55.275] | : Resolving futures part of globals (recursively) ... done
[08:08:55.275] | : Packages after dropping 'base': [0] 
[08:08:55.275] | : globals: [1] ‘x’
[08:08:55.275] | : packages: [0] 
[08:08:55.276] | getGlobalsAndPackages() ... done
[08:08:55.276] future(..., label = NULL) ... done
[08:08:55.276] value() for Future (<unnamed-4>) ...
[08:08:55.276] | run() for ‘Future’ (<unnamed-4>) ...
[08:08:55.276] | : state: ‘created’
[08:08:55.276] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.276] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.276] | : Using SequentialFutureBackend ...
[08:08:55.277] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:55.277] | : . Launching futures ...
[08:08:55.277] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.277] | : . ' , getFutureData() ...
[08:08:55.277] | : . ' , ; getFutureCore() ...
[08:08:55.277] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.277] | : . ' , ; getFutureCore() ... done
[08:08:55.277] | : . ' , ; getFutureCapture() ...
[08:08:55.277] | : . ' , ; getFutureCapture() ... done
[08:08:55.277] | : . ' , ; getFutureContext() ...
[08:08:55.278] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.278] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.278] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.278] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.278] | : . ' , ; getFutureContext() ... done
[08:08:55.278] | : . ' , getFutureData() ... done
[08:08:55.279] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.279] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.280] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.280] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.280] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.280] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.280] | : . ' , ; ` | New stack:
[08:08:55.280] | : . ' , ; ` | List of 1
[08:08:55.280] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.280] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.280] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.280] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.280] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.280] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.280] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.280] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.283] | : . ' , ; ` | Old stack:
[08:08:55.283] | : . ' , ; ` | List of 1
[08:08:55.283] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.283] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.283] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.283] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.283] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.283] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.283] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.283] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.283] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.283] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.283] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.286] | : . ' , ; ` | Not identical
[08:08:55.286] | : . ' , ; ` | all.equal() for future ...
[08:08:55.286] | : . ' , ; ` | : List of 2
[08:08:55.286] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.286] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.286] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.286] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.286] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.286] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.286] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.292] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.292] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.292] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.292] | : . ' , ; ` List of future strategies:
[08:08:55.292] | : . ' , ; ` 1. sequential:
[08:08:55.292] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.292] | : . ' , ; `    - tweaked: FALSE
[08:08:55.292] | : . ' , ; `    - call: plan(sequential)
[08:08:55.293] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.293] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.293] | : . ' , assign_globals() ...
[08:08:55.293] | : . ' , List of 1
[08:08:55.293] | : . ' ,  $ x: list()
[08:08:55.293] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.293] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.293] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.293] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.293] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.293] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.296] | : . ' , - copied ‘x’ to environment
[08:08:55.296] | : . ' , assign_globals() ... done
[08:08:55.297] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.297] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.297] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.298] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.298] | : . ' , ; ` | : New stack:
[08:08:55.298] | : . ' , ; ` | : List of 1
[08:08:55.298] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.298] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.298] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.298] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.298] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.298] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.298] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.298] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.298] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.298] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.298] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.301] | : . ' , ; ` | : Old stack:
[08:08:55.301] | : . ' , ; ` | : List of 1
[08:08:55.301] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.301] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.301] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.301] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.301] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.301] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.301] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.301] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.301] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.301] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.301] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.304] | : . ' , ; ` | : Identical
[08:08:55.304] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.304] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.304] | : . ' , ; ` | List of future strategies:
[08:08:55.304] | : . ' , ; ` | 1. sequential:
[08:08:55.304] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.304] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.304] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.305] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.305] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.305] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.305] | : . ' , SequentialFuture started (and completed)
[08:08:55.305] | : . ' , signalConditions() ...
[08:08:55.305] | : . ' , ; include = ‘immediateCondition’
[08:08:55.305] | : . ' , ; exclude = 
[08:08:55.306] | : . ' , ; resignal = FALSE
[08:08:55.306] | : . ' , ; Number of conditions: 6
[08:08:55.306] | : . ' , ;  int 6
[08:08:55.306] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.306] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.306] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.306] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.307] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.308] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.308] | : . ' , signalConditions() ... done
[08:08:55.308] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.308] | : . Launching futures ... done
[08:08:55.308] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.308] | : Using SequentialFutureBackend ... done
[08:08:55.308] | run() for ‘Future’ (<unnamed-4>) ... done
[08:08:55.308] | signalConditions() ...
[08:08:55.308] | : include = ‘immediateCondition’
[08:08:55.308] | : exclude = 
[08:08:55.309] | : resignal = FALSE
[08:08:55.309] | : Number of conditions: 6
[08:08:55.309] | :  int 6
[08:08:55.309] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.309] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.309] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.309] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.310] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.310] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.310] | signalConditions() ... done
[08:08:55.310] | relay stdout ...
[08:08:55.310] | relay stdout ... done
[08:08:55.310] | check for misuse ...
[08:08:55.310] | check for misuse ... done
[08:08:55.310] | relay conditions ...
[08:08:55.310] | : Future state: ‘finished’
[08:08:55.311] | : signalConditions() ...
[08:08:55.311] | : . include = ‘condition’
[08:08:55.311] | : . exclude = ‘immediateCondition’
[08:08:55.311] | : . resignal = TRUE
[08:08:55.311] | : . Number of conditions: 6
[08:08:55.311] | : .  int 6
[08:08:55.311] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.311] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.278] | : . ' , attachPackages() ...
[08:08:55.312] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.312] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.278] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.312] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.312] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.279] | : . ' , attachPackages() ... done
[08:08:55.312] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.312] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.279] | : . ' , attachPackages() ...
[08:08:55.312] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.312] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.279] | : . ' , ; packages: [n=0] 
[08:08:55.313] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.313] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.279] | : . ' , attachPackages() ... done
[08:08:55.313] | : signalConditions() ... done
[08:08:55.313] | relay conditions ... done
[08:08:55.313] value() for Future (<unnamed-4>) ... done
$a
[1] 1

[08:08:55.313] future(..., label = NULL) ...
[08:08:55.313] | lazy: FALSE
[08:08:55.313] | stdout: TRUE
[08:08:55.314] | conditions: [n=1] ‘condition’
[08:08:55.314] | gc: FALSE
[08:08:55.314] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.314] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.314] | : Searching for globals ...
[08:08:55.329] | : . globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:55.330] | : Searching for globals ... done
[08:08:55.330] | : Resolving globals: TRUE
[08:08:55.330] | : Resolving any globals that are futures ...
[08:08:55.330] | : . globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:55.330] | : Resolving any globals that are futures ... done
[08:08:55.330] | : Search for packages associated with the globals ...
[08:08:55.330] | : . Packages associated with globals: [1] ‘base’
[08:08:55.331] | : . Packages: [1] ‘base’
[08:08:55.331] | : Search for packages associated with the globals ... done
[08:08:55.331] | : Packages after dropping 'base': [0] 
[08:08:55.331] | : globals: [0] 
[08:08:55.331] | : packages: [0] 
[08:08:55.331] | getGlobalsAndPackages() ... done
[08:08:55.331] | run() for ‘Future’ (<unnamed-5>) ...
[08:08:55.331] | : state: ‘created’
[08:08:55.332] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.332] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.332] | : Using SequentialFutureBackend ...
[08:08:55.332] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:55.332] | : . Launching futures ...
[08:08:55.332] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.332] | : . ' , getFutureData() ...
[08:08:55.332] | : . ' , ; getFutureCore() ...
[08:08:55.332] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.332] | : . ' , ; getFutureCore() ... done
[08:08:55.333] | : . ' , ; getFutureCapture() ...
[08:08:55.333] | : . ' , ; getFutureCapture() ... done
[08:08:55.333] | : . ' , ; getFutureContext() ...
[08:08:55.333] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.333] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.333] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.333] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.333] | : . ' , ; getFutureContext() ... done
[08:08:55.333] | : . ' , getFutureData() ... done
[08:08:55.335] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.335] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.335] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.335] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.335] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.335] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.335] | : . ' , ; ` | New stack:
[08:08:55.336] | : . ' , ; ` | List of 1
[08:08:55.336] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.336] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.336] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.336] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.336] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.336] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.336] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.336] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.338] | : . ' , ; ` | Old stack:
[08:08:55.338] | : . ' , ; ` | List of 1
[08:08:55.338] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.338] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.338] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.338] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.338] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.338] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.338] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.338] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.338] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.338] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.338] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.342] | : . ' , ; ` | Not identical
[08:08:55.342] | : . ' , ; ` | all.equal() for future ...
[08:08:55.342] | : . ' , ; ` | : List of 2
[08:08:55.342] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.342] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.342] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.342] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.342] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.342] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.342] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.347] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.347] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.347] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.348] | : . ' , ; ` List of future strategies:
[08:08:55.348] | : . ' , ; ` 1. sequential:
[08:08:55.348] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.348] | : . ' , ; `    - tweaked: FALSE
[08:08:55.348] | : . ' , ; `    - call: plan(sequential)
[08:08:55.348] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.348] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.350] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.350] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.350] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.350] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.350] | : . ' , ; ` | : New stack:
[08:08:55.350] | : . ' , ; ` | : List of 1
[08:08:55.350] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.350] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.350] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.350] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.350] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.350] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.350] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.350] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.350] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.350] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.350] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.353] | : . ' , ; ` | : Old stack:
[08:08:55.353] | : . ' , ; ` | : List of 1
[08:08:55.353] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.353] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.353] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.353] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.353] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.353] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.353] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.353] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.353] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.353] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.353] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.357] | : . ' , ; ` | : Identical
[08:08:55.357] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.357] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.358] | : . ' , ; ` | List of future strategies:
[08:08:55.358] | : . ' , ; ` | 1. sequential:
[08:08:55.358] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.358] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.358] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.358] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.358] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.358] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.358] | : . ' , SequentialFuture started (and completed)
[08:08:55.359] | : . ' , signalConditions() ...
[08:08:55.359] | : . ' , ; include = ‘immediateCondition’
[08:08:55.359] | : . ' , ; exclude = 
[08:08:55.359] | : . ' , ; resignal = FALSE
[08:08:55.359] | : . ' , ; Number of conditions: 6
[08:08:55.359] | : . ' , ;  int 6
[08:08:55.359] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.360] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.360] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.360] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.360] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.360] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.360] | : . ' , signalConditions() ... done
[08:08:55.360] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.360] | : . Launching futures ... done
[08:08:55.360] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.361] | : Using SequentialFutureBackend ... done
[08:08:55.361] | run() for ‘Future’ (<unnamed-5>) ... done
[08:08:55.361] future(..., label = NULL) ... done
[08:08:55.361] value() for SequentialFuture (<unnamed-5>) ...
[08:08:55.361] | signalConditions() ...
[08:08:55.361] | : include = ‘immediateCondition’
[08:08:55.361] | : exclude = 
[08:08:55.361] | : resignal = FALSE
[08:08:55.361] | : Number of conditions: 6
[08:08:55.361] | :  int 6
[08:08:55.362] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.362] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.362] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.362] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.362] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.362] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.362] | signalConditions() ... done
[08:08:55.363] | relay stdout ...
[08:08:55.363] | relay stdout ... done
[08:08:55.363] | check for misuse ...
[08:08:55.363] | check for misuse ... done
[08:08:55.363] | relay conditions ...
[08:08:55.363] | : Future state: ‘finished’
[08:08:55.363] | : signalConditions() ...
[08:08:55.363] | : . include = ‘condition’
[08:08:55.363] | : . exclude = ‘immediateCondition’
[08:08:55.363] | : . resignal = TRUE
[08:08:55.364] | : . Number of conditions: 6
[08:08:55.364] | : .  int 6
[08:08:55.364] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.364] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.334] | : . ' , attachPackages() ...
[08:08:55.364] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.364] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.334] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.365] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.365] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.334] | : . ' , attachPackages() ... done
[08:08:55.365] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.365] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.334] | : . ' , attachPackages() ...
[08:08:55.365] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.365] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.334] | : . ' , ; packages: [n=0] 
[08:08:55.365] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.365] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.334] | : . ' , attachPackages() ... done
[08:08:55.365] | : signalConditions() ... done
[08:08:55.366] | relay conditions ... done
[08:08:55.366] value() for SequentialFuture (<unnamed-5>) ... done
$b
[1] 2

$a
[1] 1

[08:08:55.366] future(..., label = NULL) ...
[08:08:55.366] | lazy: FALSE
[08:08:55.366] | stdout: TRUE
[08:08:55.366] | conditions: [n=1] ‘condition’
[08:08:55.366] | gc: FALSE
[08:08:55.366] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.366] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.367] | : Searching for globals ...
[08:08:55.402] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:55.402] | : Searching for globals ... done
[08:08:55.403] | : Resolving globals: TRUE
[08:08:55.403] | : Resolving any globals that are futures ...
[08:08:55.403] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:55.403] | : Resolving any globals that are futures ... done
[08:08:55.403] | : Search for packages associated with the globals ...
[08:08:55.403] | : . Packages associated with globals: [1] ‘base’
[08:08:55.403] | : . Packages: [1] ‘base’
[08:08:55.404] | : Search for packages associated with the globals ... done
[08:08:55.404] | : Resolving futures part of globals (recursively) ...
[08:08:55.404] | : . resolve() for FutureGlobals ...
[08:08:55.404] | : . ' recursive: 99
[08:08:55.404] | : . ' Number of elements: 1
[08:08:55.404] | : . ' elements: ‘x’
[08:08:55.404] | : . ' 'obj' is list
[08:08:55.404] | : . ' resolve(obj, ...) ...
[08:08:55.405] | : . ' , resolve() for list ...
[08:08:55.405] | : . ' , ; recursive: 98
[08:08:55.405] | : . ' , ; Number of elements: 0
[08:08:55.405] | : . ' , resolve() for list ... done
[08:08:55.405] | : . ' resolve(obj, ...) ... done
[08:08:55.405] | : . ' resolved() for list ...
[08:08:55.405] | : . ' , Number of elements: 0
[08:08:55.405] | : . ' , Number of futures: 0
[08:08:55.405] | : . ' resolved() for list ... done
[08:08:55.406] | : . ' length: 0 (resolved future 1)
[08:08:55.406] | : . resolve() for FutureGlobals ... done
[08:08:55.406] | : . globals: [1] ‘x’
[08:08:55.406] | : Resolving futures part of globals (recursively) ... done
[08:08:55.406] | : Packages after dropping 'base': [0] 
[08:08:55.406] | : globals: [1] ‘x’
[08:08:55.406] | : packages: [0] 
[08:08:55.406] | getGlobalsAndPackages() ... done
[08:08:55.406] | run() for ‘Future’ (<unnamed-6>) ...
[08:08:55.407] | : state: ‘created’
[08:08:55.407] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.407] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.407] | : Using SequentialFutureBackend ...
[08:08:55.407] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:55.407] | : . Launching futures ...
[08:08:55.407] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.407] | : . ' , getFutureData() ...
[08:08:55.408] | : . ' , ; getFutureCore() ...
[08:08:55.408] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.408] | : . ' , ; getFutureCore() ... done
[08:08:55.408] | : . ' , ; getFutureCapture() ...
[08:08:55.408] | : . ' , ; getFutureCapture() ... done
[08:08:55.408] | : . ' , ; getFutureContext() ...
[08:08:55.408] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.408] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.408] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.408] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.409] | : . ' , ; getFutureContext() ... done
[08:08:55.409] | : . ' , getFutureData() ... done
[08:08:55.410] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.410] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.410] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.410] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.411] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.411] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.411] | : . ' , ; ` | New stack:
[08:08:55.411] | : . ' , ; ` | List of 1
[08:08:55.411] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.411] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.411] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.411] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.411] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.411] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.411] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.411] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.414] | : . ' , ; ` | Old stack:
[08:08:55.414] | : . ' , ; ` | List of 1
[08:08:55.414] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.414] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.414] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.414] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.414] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.414] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.414] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.414] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.414] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.414] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.414] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.417] | : . ' , ; ` | Not identical
[08:08:55.417] | : . ' , ; ` | all.equal() for future ...
[08:08:55.418] | : . ' , ; ` | : List of 2
[08:08:55.418] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.418] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.418] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.418] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.418] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.418] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.418] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.423] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.423] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.423] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.423] | : . ' , ; ` List of future strategies:
[08:08:55.423] | : . ' , ; ` 1. sequential:
[08:08:55.423] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.423] | : . ' , ; `    - tweaked: FALSE
[08:08:55.423] | : . ' , ; `    - call: plan(sequential)
[08:08:55.424] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.424] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.424] | : . ' , assign_globals() ...
[08:08:55.424] | : . ' , List of 1
[08:08:55.424] | : . ' ,  $ x: list()
[08:08:55.424] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.424] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.424] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.424] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.424] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.424] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.427] | : . ' , - copied ‘x’ to environment
[08:08:55.427] | : . ' , assign_globals() ... done
[08:08:55.428] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.428] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.428] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.429] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.429] | : . ' , ; ` | : New stack:
[08:08:55.429] | : . ' , ; ` | : List of 1
[08:08:55.429] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.429] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.429] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.429] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.429] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.429] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.429] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.429] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.429] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.429] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.429] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.432] | : . ' , ; ` | : Old stack:
[08:08:55.432] | : . ' , ; ` | : List of 1
[08:08:55.432] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.432] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.432] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.432] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.432] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.432] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.432] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.432] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.432] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.432] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.432] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.435] | : . ' , ; ` | : Identical
[08:08:55.435] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.435] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.435] | : . ' , ; ` | List of future strategies:
[08:08:55.435] | : . ' , ; ` | 1. sequential:
[08:08:55.435] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.435] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.435] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.436] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.436] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.436] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.436] | : . ' , SequentialFuture started (and completed)
[08:08:55.436] | : . ' , signalConditions() ...
[08:08:55.437] | : . ' , ; include = ‘immediateCondition’
[08:08:55.437] | : . ' , ; exclude = 
[08:08:55.437] | : . ' , ; resignal = FALSE
[08:08:55.437] | : . ' , ; Number of conditions: 6
[08:08:55.438] | : . ' , ;  int 6
[08:08:55.438] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.438] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.438] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.438] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.439] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.439] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.439] | : . ' , signalConditions() ... done
[08:08:55.439] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.439] | : . Launching futures ... done
[08:08:55.439] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.439] | : Using SequentialFutureBackend ... done
[08:08:55.439] | run() for ‘Future’ (<unnamed-6>) ... done
[08:08:55.439] future(..., label = NULL) ... done
[08:08:55.440] value() for SequentialFuture (<unnamed-6>) ...
[08:08:55.440] | signalConditions() ...
[08:08:55.440] | : include = ‘immediateCondition’
[08:08:55.440] | : exclude = 
[08:08:55.440] | : resignal = FALSE
[08:08:55.440] | : Number of conditions: 6
[08:08:55.440] | :  int 6
[08:08:55.441] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.441] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.441] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.441] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.441] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.441] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.441] | signalConditions() ... done
[08:08:55.441] | relay stdout ...
[08:08:55.441] | relay stdout ... done
[08:08:55.441] | check for misuse ...
[08:08:55.442] | check for misuse ... done
[08:08:55.442] | relay conditions ...
[08:08:55.442] | : Future state: ‘finished’
[08:08:55.442] | : signalConditions() ...
[08:08:55.442] | : . include = ‘condition’
[08:08:55.442] | : . exclude = ‘immediateCondition’
[08:08:55.442] | : . resignal = TRUE
[08:08:55.442] | : . Number of conditions: 6
[08:08:55.442] | : .  int 6
[08:08:55.443] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.443] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.409] | : . ' , attachPackages() ...
[08:08:55.443] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.443] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.409] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.443] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.443] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.409] | : . ' , attachPackages() ... done
[08:08:55.443] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.444] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.409] | : . ' , attachPackages() ...
[08:08:55.444] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.444] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.410] | : . ' , ; packages: [n=0] 
[08:08:55.444] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.444] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.410] | : . ' , attachPackages() ... done
[08:08:55.444] | : signalConditions() ... done
[08:08:55.444] | relay conditions ... done
[08:08:55.444] value() for SequentialFuture (<unnamed-6>) ... done
$a
[1] 1

[08:08:55.445] future(..., label = NULL) ...
[08:08:55.445] | lazy: TRUE
[08:08:55.445] | stdout: TRUE
[08:08:55.445] | conditions: [n=1] ‘condition’
[08:08:55.445] | gc: FALSE
[08:08:55.445] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.445] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.445] | : Searching for globals ...
[08:08:55.456] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:55.456] | : Searching for globals ... done
[08:08:55.456] | : Resolving globals: TRUE
[08:08:55.457] | : Resolving any globals that are futures ...
[08:08:55.457] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:55.457] | : Resolving any globals that are futures ... done
[08:08:55.457] | : Search for packages associated with the globals ...
[08:08:55.457] | : . Packages associated with globals: [1] ‘base’
[08:08:55.457] | : . Packages: [1] ‘base’
[08:08:55.458] | : Search for packages associated with the globals ... done
[08:08:55.458] | : Resolving futures part of globals (recursively) ...
[08:08:55.458] | : . resolve() for FutureGlobals ...
[08:08:55.458] | : . ' recursive: 99
[08:08:55.458] | : . ' Number of elements: 1
[08:08:55.458] | : . ' elements: ‘x’
[08:08:55.458] | : . ' 'obj' is list
[08:08:55.458] | : . ' resolve(obj, ...) ...
[08:08:55.458] | : . ' , resolve() for list ...
[08:08:55.459] | : . ' , ; recursive: 98
[08:08:55.459] | : . ' , ; Number of elements: 0
[08:08:55.459] | : . ' , resolve() for list ... done
[08:08:55.459] | : . ' resolve(obj, ...) ... done
[08:08:55.459] | : . ' resolved() for list ...
[08:08:55.459] | : . ' , Number of elements: 0
[08:08:55.459] | : . ' , Number of futures: 0
[08:08:55.459] | : . ' resolved() for list ... done
[08:08:55.459] | : . ' length: 0 (resolved future 1)
[08:08:55.459] | : . resolve() for FutureGlobals ... done
[08:08:55.460] | : . globals: [1] ‘x’
[08:08:55.460] | : Resolving futures part of globals (recursively) ... done
[08:08:55.460] | : Packages after dropping 'base': [0] 
[08:08:55.460] | : globals: [1] ‘x’
[08:08:55.460] | : packages: [0] 
[08:08:55.460] | getGlobalsAndPackages() ... done
[08:08:55.460] future(..., label = NULL) ... done
[08:08:55.460] value() for Future (<unnamed-7>) ...
[08:08:55.460] | run() for ‘Future’ (<unnamed-7>) ...
[08:08:55.461] | : state: ‘created’
[08:08:55.461] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.461] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.461] | : Using SequentialFutureBackend ...
[08:08:55.461] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:55.461] | : . Launching futures ...
[08:08:55.461] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.461] | : . ' , getFutureData() ...
[08:08:55.461] | : . ' , ; getFutureCore() ...
[08:08:55.462] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.462] | : . ' , ; getFutureCore() ... done
[08:08:55.462] | : . ' , ; getFutureCapture() ...
[08:08:55.462] | : . ' , ; getFutureCapture() ... done
[08:08:55.462] | : . ' , ; getFutureContext() ...
[08:08:55.462] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.462] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.462] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.462] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.462] | : . ' , ; getFutureContext() ... done
[08:08:55.463] | : . ' , getFutureData() ... done
[08:08:55.464] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.464] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.464] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.464] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.464] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.465] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.465] | : . ' , ; ` | New stack:
[08:08:55.465] | : . ' , ; ` | List of 1
[08:08:55.465] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.465] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.465] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.465] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.465] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.465] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.465] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.465] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.467] | : . ' , ; ` | Old stack:
[08:08:55.467] | : . ' , ; ` | List of 1
[08:08:55.467] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.467] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.467] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.467] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.467] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.467] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.467] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.467] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.467] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.467] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.467] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.470] | : . ' , ; ` | Not identical
[08:08:55.470] | : . ' , ; ` | all.equal() for future ...
[08:08:55.471] | : . ' , ; ` | : List of 2
[08:08:55.471] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.471] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.471] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.471] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.471] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.471] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.471] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.477] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.477] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.477] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.477] | : . ' , ; ` List of future strategies:
[08:08:55.477] | : . ' , ; ` 1. sequential:
[08:08:55.477] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.477] | : . ' , ; `    - tweaked: FALSE
[08:08:55.477] | : . ' , ; `    - call: plan(sequential)
[08:08:55.477] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.478] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.478] | : . ' , assign_globals() ...
[08:08:55.478] | : . ' , List of 1
[08:08:55.478] | : . ' ,  $ x: list()
[08:08:55.478] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.478] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.478] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.478] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.478] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.478] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.480] | : . ' , - copied ‘x’ to environment
[08:08:55.480] | : . ' , assign_globals() ... done
[08:08:55.482] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.482] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.482] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.482] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.482] | : . ' , ; ` | : New stack:
[08:08:55.482] | : . ' , ; ` | : List of 1
[08:08:55.482] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.482] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.482] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.482] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.482] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.482] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.482] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.482] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.482] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.482] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.482] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.485] | : . ' , ; ` | : Old stack:
[08:08:55.485] | : . ' , ; ` | : List of 1
[08:08:55.485] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.485] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.485] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.485] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.485] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.485] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.485] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.485] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.485] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.485] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.485] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.488] | : . ' , ; ` | : Identical
[08:08:55.489] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.489] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.489] | : . ' , ; ` | List of future strategies:
[08:08:55.489] | : . ' , ; ` | 1. sequential:
[08:08:55.489] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.489] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.489] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.489] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.489] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.489] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.490] | : . ' , SequentialFuture started (and completed)
[08:08:55.490] | : . ' , signalConditions() ...
[08:08:55.490] | : . ' , ; include = ‘immediateCondition’
[08:08:55.490] | : . ' , ; exclude = 
[08:08:55.490] | : . ' , ; resignal = FALSE
[08:08:55.490] | : . ' , ; Number of conditions: 6
[08:08:55.490] | : . ' , ;  int 6
[08:08:55.491] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.491] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.491] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.491] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.491] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.491] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.491] | : . ' , signalConditions() ... done
[08:08:55.491] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.492] | : . Launching futures ... done
[08:08:55.492] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.492] | : Using SequentialFutureBackend ... done
[08:08:55.492] | run() for ‘Future’ (<unnamed-7>) ... done
[08:08:55.492] | signalConditions() ...
[08:08:55.492] | : include = ‘immediateCondition’
[08:08:55.492] | : exclude = 
[08:08:55.492] | : resignal = FALSE
[08:08:55.492] | : Number of conditions: 6
[08:08:55.492] | :  int 6
[08:08:55.493] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.493] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.493] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.493] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.493] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.493] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.493] | signalConditions() ... done
[08:08:55.494] | relay stdout ...
[08:08:55.494] | relay stdout ... done
[08:08:55.494] | check for misuse ...
[08:08:55.494] | check for misuse ... done
[08:08:55.494] | relay conditions ...
[08:08:55.495] | : Future state: ‘finished’
[08:08:55.495] | : signalConditions() ...
[08:08:55.495] | : . include = ‘condition’
[08:08:55.495] | : . exclude = ‘immediateCondition’
[08:08:55.495] | : . resignal = TRUE
[08:08:55.495] | : . Number of conditions: 6
[08:08:55.495] | : .  int 6
[08:08:55.496] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.496] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.463] | : . ' , attachPackages() ...
[08:08:55.496] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.496] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.463] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.496] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.496] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.463] | : . ' , attachPackages() ... done
[08:08:55.497] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.497] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.463] | : . ' , attachPackages() ...
[08:08:55.497] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.497] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.463] | : . ' , ; packages: [n=0] 
[08:08:55.497] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.497] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.463] | : . ' , attachPackages() ... done
[08:08:55.497] | : signalConditions() ... done
[08:08:55.497] | relay conditions ... done
[08:08:55.497] value() for Future (<unnamed-7>) ... done
$a
[1] 1

[08:08:55.498] future(..., label = NULL) ...
[08:08:55.498] | lazy: FALSE
[08:08:55.498] | stdout: TRUE
[08:08:55.498] | conditions: [n=1] ‘condition’
[08:08:55.498] | gc: FALSE
[08:08:55.498] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.498] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.499] | : Searching for globals ...
[08:08:55.508] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:55.509] | : Searching for globals ... done
[08:08:55.509] | : Resolving globals: TRUE
[08:08:55.509] | : Resolving any globals that are futures ...
[08:08:55.509] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:55.509] | : Resolving any globals that are futures ... done
[08:08:55.509] | : Search for packages associated with the globals ...
[08:08:55.509] | : . Packages associated with globals: [1] ‘base’
[08:08:55.510] | : . Packages: [1] ‘base’
[08:08:55.510] | : Search for packages associated with the globals ... done
[08:08:55.510] | : Resolving futures part of globals (recursively) ...
[08:08:55.510] | : . resolve() for FutureGlobals ...
[08:08:55.510] | : . ' recursive: 99
[08:08:55.510] | : . ' Number of elements: 1
[08:08:55.510] | : . ' elements: ‘x’
[08:08:55.510] | : . ' 'obj' is list
[08:08:55.511] | : . ' resolve(obj, ...) ...
[08:08:55.511] | : . ' , resolve() for list ...
[08:08:55.511] | : . ' , ; recursive: 98
[08:08:55.511] | : . ' , ; Number of elements: 0
[08:08:55.511] | : . ' , resolve() for list ... done
[08:08:55.512] | : . ' resolve(obj, ...) ... done
[08:08:55.512] | : . ' resolved() for list ...
[08:08:55.512] | : . ' , Number of elements: 0
[08:08:55.512] | : . ' , Number of futures: 0
[08:08:55.512] | : . ' resolved() for list ... done
[08:08:55.512] | : . ' length: 0 (resolved future 1)
[08:08:55.512] | : . resolve() for FutureGlobals ... done
[08:08:55.513] | : . globals: [1] ‘x’
[08:08:55.513] | : Resolving futures part of globals (recursively) ... done
[08:08:55.513] | : Packages after dropping 'base': [0] 
[08:08:55.513] | : globals: [1] ‘x’
[08:08:55.513] | : packages: [0] 
[08:08:55.513] | getGlobalsAndPackages() ... done
[08:08:55.513] | run() for ‘Future’ (<unnamed-8>) ...
[08:08:55.513] | : state: ‘created’
[08:08:55.514] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.514] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.514] | : Using SequentialFutureBackend ...
[08:08:55.514] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:08:55.514] | : . Launching futures ...
[08:08:55.514] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.514] | : . ' , getFutureData() ...
[08:08:55.514] | : . ' , ; getFutureCore() ...
[08:08:55.514] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.515] | : . ' , ; getFutureCore() ... done
[08:08:55.515] | : . ' , ; getFutureCapture() ...
[08:08:55.515] | : . ' , ; getFutureCapture() ... done
[08:08:55.515] | : . ' , ; getFutureContext() ...
[08:08:55.515] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.515] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.515] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.515] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.515] | : . ' , ; getFutureContext() ... done
[08:08:55.515] | : . ' , getFutureData() ... done
[08:08:55.517] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.517] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.517] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.517] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.517] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.517] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.518] | : . ' , ; ` | New stack:
[08:08:55.518] | : . ' , ; ` | List of 1
[08:08:55.518] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.518] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.518] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.518] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.518] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.518] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.518] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.518] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.520] | : . ' , ; ` | Old stack:
[08:08:55.520] | : . ' , ; ` | List of 1
[08:08:55.520] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.520] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.520] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.520] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.520] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.520] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.520] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.520] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.520] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.520] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.520] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.523] | : . ' , ; ` | Not identical
[08:08:55.523] | : . ' , ; ` | all.equal() for future ...
[08:08:55.523] | : . ' , ; ` | : List of 2
[08:08:55.523] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.523] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.523] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.523] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.523] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.523] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.523] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.528] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.529] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.529] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.529] | : . ' , ; ` List of future strategies:
[08:08:55.529] | : . ' , ; ` 1. sequential:
[08:08:55.529] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.529] | : . ' , ; `    - tweaked: FALSE
[08:08:55.529] | : . ' , ; `    - call: plan(sequential)
[08:08:55.529] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.529] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.529] | : . ' , assign_globals() ...
[08:08:55.530] | : . ' , List of 1
[08:08:55.530] | : . ' ,  $ x: list()
[08:08:55.530] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.530] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.530] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.530] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.530] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.530] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.533] | : . ' , - copied ‘x’ to environment
[08:08:55.533] | : . ' , assign_globals() ... done
[08:08:55.534] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.535] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.535] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.535] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.535] | : . ' , ; ` | : New stack:
[08:08:55.535] | : . ' , ; ` | : List of 1
[08:08:55.535] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.535] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.535] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.535] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.535] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.535] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.535] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.535] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.535] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.535] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.535] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.538] | : . ' , ; ` | : Old stack:
[08:08:55.538] | : . ' , ; ` | : List of 1
[08:08:55.538] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.538] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.538] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.538] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.538] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.538] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.538] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.538] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.538] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.538] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.538] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.541] | : . ' , ; ` | : Identical
[08:08:55.541] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.542] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.542] | : . ' , ; ` | List of future strategies:
[08:08:55.542] | : . ' , ; ` | 1. sequential:
[08:08:55.542] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.542] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.542] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.542] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.542] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.542] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.543] | : . ' , SequentialFuture started (and completed)
[08:08:55.543] | : . ' , signalConditions() ...
[08:08:55.543] | : . ' , ; include = ‘immediateCondition’
[08:08:55.543] | : . ' , ; exclude = 
[08:08:55.543] | : . ' , ; resignal = FALSE
[08:08:55.543] | : . ' , ; Number of conditions: 6
[08:08:55.543] | : . ' , ;  int 6
[08:08:55.544] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.544] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.544] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.544] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.544] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.544] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.544] | : . ' , signalConditions() ... done
[08:08:55.544] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.544] | : . Launching futures ... done
[08:08:55.545] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.545] | : Using SequentialFutureBackend ... done
[08:08:55.545] | run() for ‘Future’ (<unnamed-8>) ... done
[08:08:55.545] future(..., label = NULL) ... done
[08:08:55.545] value() for SequentialFuture (<unnamed-8>) ...
[08:08:55.545] | signalConditions() ...
[08:08:55.545] | : include = ‘immediateCondition’
[08:08:55.545] | : exclude = 
[08:08:55.545] | : resignal = FALSE
[08:08:55.546] | : Number of conditions: 6
[08:08:55.546] | :  int 6
[08:08:55.546] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.546] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.546] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.546] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.546] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.547] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.547] | signalConditions() ... done
[08:08:55.547] | relay stdout ...
[08:08:55.547] | relay stdout ... done
[08:08:55.547] | check for misuse ...
[08:08:55.547] | check for misuse ... done
[08:08:55.547] | relay conditions ...
[08:08:55.547] | : Future state: ‘finished’
[08:08:55.547] | : signalConditions() ...
[08:08:55.547] | : . include = ‘condition’
[08:08:55.548] | : . exclude = ‘immediateCondition’
[08:08:55.548] | : . resignal = TRUE
[08:08:55.548] | : . Number of conditions: 6
[08:08:55.548] | : .  int 6
[08:08:55.548] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.548] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.516] | : . ' , attachPackages() ...
[08:08:55.548] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.549] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.516] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.549] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.549] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.516] | : . ' , attachPackages() ... done
[08:08:55.549] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.549] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.516] | : . ' , attachPackages() ...
[08:08:55.549] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.549] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.516] | : . ' , ; packages: [n=0] 
[08:08:55.549] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.549] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.516] | : . ' , attachPackages() ... done
[08:08:55.550] | : signalConditions() ... done
[08:08:55.550] | relay conditions ... done
[08:08:55.550] value() for SequentialFuture (<unnamed-8>) ... done
$a
[1] 1

[08:08:55.551] future(..., label = NULL) ...
[08:08:55.551] | lazy: FALSE
[08:08:55.551] | stdout: TRUE
[08:08:55.551] | conditions: [n=1] ‘condition’
[08:08:55.551] | gc: FALSE
[08:08:55.551] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.551] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.552] | : Searching for globals ...
[08:08:55.563] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:55.563] | : Searching for globals ... done
[08:08:55.563] | : Resolving globals: TRUE
[08:08:55.563] | : Resolving any globals that are futures ...
[08:08:55.564] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:55.564] | : Resolving any globals that are futures ... done
[08:08:55.564] | : Search for packages associated with the globals ...
[08:08:55.564] | : . Packages associated with globals: [1] ‘base’
[08:08:55.564] | : . Packages: [1] ‘base’
[08:08:55.564] | : Search for packages associated with the globals ... done
[08:08:55.565] | : Resolving futures part of globals (recursively) ...
[08:08:55.565] | : . resolve() for FutureGlobals ...
[08:08:55.565] | : . ' recursive: 99
[08:08:55.565] | : . ' Number of elements: 1
[08:08:55.565] | : . ' elements: ‘x’
[08:08:55.565] | : . ' 'obj' is list
[08:08:55.565] | : . ' resolve(obj, ...) ...
[08:08:55.565] | : . ' , resolve() for list ...
[08:08:55.565] | : . ' , ; recursive: 98
[08:08:55.566] | : . ' , ; Number of elements: 0
[08:08:55.566] | : . ' , resolve() for list ... done
[08:08:55.566] | : . ' resolve(obj, ...) ... done
[08:08:55.566] | : . ' resolved() for list ...
[08:08:55.566] | : . ' , Number of elements: 0
[08:08:55.566] | : . ' , Number of futures: 0
[08:08:55.566] | : . ' resolved() for list ... done
[08:08:55.566] | : . ' length: 0 (resolved future 1)
[08:08:55.567] | : . resolve() for FutureGlobals ... done
[08:08:55.567] | : . globals: [1] ‘x’
[08:08:55.568] | : Resolving futures part of globals (recursively) ... done
[08:08:55.568] | : Packages after dropping 'base': [0] 
[08:08:55.568] | : globals: [1] ‘x’
[08:08:55.568] | : packages: [0] 
[08:08:55.568] | getGlobalsAndPackages() ... done
[08:08:55.568] | run() for ‘Future’ (<unnamed-9>) ...
[08:08:55.568] | : state: ‘created’
[08:08:55.569] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.569] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.569] | : Using SequentialFutureBackend ...
[08:08:55.569] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:55.569] | : . Launching futures ...
[08:08:55.569] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.569] | : . ' , getFutureData() ...
[08:08:55.569] | : . ' , ; getFutureCore() ...
[08:08:55.570] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.570] | : . ' , ; getFutureCore() ... done
[08:08:55.570] | : . ' , ; getFutureCapture() ...
[08:08:55.570] | : . ' , ; getFutureCapture() ... done
[08:08:55.570] | : . ' , ; getFutureContext() ...
[08:08:55.570] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.570] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.570] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.570] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.571] | : . ' , ; getFutureContext() ... done
[08:08:55.571] | : . ' , getFutureData() ... done
[08:08:55.572] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.572] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.572] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.572] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.573] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.573] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.573] | : . ' , ; ` | New stack:
[08:08:55.573] | : . ' , ; ` | List of 1
[08:08:55.573] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.573] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.573] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.573] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.573] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.573] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.573] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.573] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.576] | : . ' , ; ` | Old stack:
[08:08:55.576] | : . ' , ; ` | List of 1
[08:08:55.576] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.576] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.576] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.576] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.576] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.576] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.576] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.576] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.576] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.576] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.576] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.579] | : . ' , ; ` | Not identical
[08:08:55.579] | : . ' , ; ` | all.equal() for future ...
[08:08:55.580] | : . ' , ; ` | : List of 2
[08:08:55.580] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.580] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.580] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.580] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.580] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.580] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.580] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.585] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.585] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.585] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.585] | : . ' , ; ` List of future strategies:
[08:08:55.585] | : . ' , ; ` 1. sequential:
[08:08:55.585] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.585] | : . ' , ; `    - tweaked: FALSE
[08:08:55.585] | : . ' , ; `    - call: plan(sequential)
[08:08:55.586] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.586] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.586] | : . ' , assign_globals() ...
[08:08:55.586] | : . ' , List of 1
[08:08:55.586] | : . ' ,  $ x: list()
[08:08:55.586] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.586] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.586] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.586] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.586] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.586] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.590] | : . ' , - copied ‘x’ to environment
[08:08:55.590] | : . ' , assign_globals() ... done
[08:08:55.592] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.592] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.592] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.592] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.593] | : . ' , ; ` | : New stack:
[08:08:55.593] | : . ' , ; ` | : List of 1
[08:08:55.593] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.593] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.593] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.593] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.593] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.593] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.593] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.593] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.593] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.593] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.593] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.596] | : . ' , ; ` | : Old stack:
[08:08:55.596] | : . ' , ; ` | : List of 1
[08:08:55.596] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.596] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.596] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.596] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.596] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.596] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.596] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.596] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.596] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.596] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.596] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.599] | : . ' , ; ` | : Identical
[08:08:55.599] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.599] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.600] | : . ' , ; ` | List of future strategies:
[08:08:55.600] | : . ' , ; ` | 1. sequential:
[08:08:55.600] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.600] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.600] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.600] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.600] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.600] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.601] | : . ' , SequentialFuture started (and completed)
[08:08:55.601] | : . ' , signalConditions() ...
[08:08:55.601] | : . ' , ; include = ‘immediateCondition’
[08:08:55.601] | : . ' , ; exclude = 
[08:08:55.601] | : . ' , ; resignal = FALSE
[08:08:55.601] | : . ' , ; Number of conditions: 6
[08:08:55.601] | : . ' , ;  int 6
[08:08:55.602] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.602] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.602] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.602] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.602] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.602] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.602] | : . ' , signalConditions() ... done
[08:08:55.602] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.603] | : . Launching futures ... done
[08:08:55.603] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.603] | : Using SequentialFutureBackend ... done
[08:08:55.603] | run() for ‘Future’ (<unnamed-9>) ... done
[08:08:55.603] future(..., label = NULL) ... done
[08:08:55.603] value() for SequentialFuture (<unnamed-9>) ...
[08:08:55.603] | signalConditions() ...
[08:08:55.603] | : include = ‘immediateCondition’
[08:08:55.603] | : exclude = 
[08:08:55.604] | : resignal = FALSE
[08:08:55.604] | : Number of conditions: 6
[08:08:55.604] | :  int 6
[08:08:55.604] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.604] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.604] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.604] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.605] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.605] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.605] | signalConditions() ... done
[08:08:55.605] | relay stdout ...
[08:08:55.605] | relay stdout ... done
[08:08:55.605] | check for misuse ...
[08:08:55.605] | check for misuse ... done
[08:08:55.605] | relay conditions ...
[08:08:55.605] | : Future state: ‘finished’
[08:08:55.606] | : signalConditions() ...
[08:08:55.606] | : . include = ‘condition’
[08:08:55.606] | : . exclude = ‘immediateCondition’
[08:08:55.606] | : . resignal = TRUE
[08:08:55.606] | : . Number of conditions: 6
[08:08:55.606] | : .  int 6
[08:08:55.606] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.606] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.571] | : . ' , attachPackages() ...
[08:08:55.607] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.607] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.571] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.607] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.607] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.571] | : . ' , attachPackages() ... done
[08:08:55.607] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.607] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.571] | : . ' , attachPackages() ...
[08:08:55.607] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.607] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.571] | : . ' , ; packages: [n=0] 
[08:08:55.608] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.608] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.572] | : . ' , attachPackages() ... done
[08:08:55.608] | : signalConditions() ... done
[08:08:55.608] | relay conditions ... done
[08:08:55.608] value() for SequentialFuture (<unnamed-9>) ... done
$a
[1] 1

[08:08:55.608] future(..., label = NULL) ...
[08:08:55.608] | lazy: TRUE
[08:08:55.610] | stdout: TRUE
[08:08:55.610] | conditions: [n=1] ‘condition’
[08:08:55.610] | gc: FALSE
[08:08:55.610] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.610] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.611] | : Searching for globals ...
[08:08:55.623] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:55.623] | : Searching for globals ... done
[08:08:55.623] | : Resolving globals: TRUE
[08:08:55.623] | : Resolving any globals that are futures ...
[08:08:55.623] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:55.623] | : Resolving any globals that are futures ... done
[08:08:55.624] | : Search for packages associated with the globals ...
[08:08:55.624] | : . Packages associated with globals: [1] ‘base’
[08:08:55.624] | : . Packages: [1] ‘base’
[08:08:55.624] | : Search for packages associated with the globals ... done
[08:08:55.624] | : Resolving futures part of globals (recursively) ...
[08:08:55.624] | : . resolve() for FutureGlobals ...
[08:08:55.624] | : . ' recursive: 99
[08:08:55.625] | : . ' Number of elements: 1
[08:08:55.625] | : . ' elements: ‘x’
[08:08:55.625] | : . ' 'obj' is list
[08:08:55.625] | : . ' resolve(obj, ...) ...
[08:08:55.625] | : . ' , resolve() for list ...
[08:08:55.625] | : . ' , ; recursive: 98
[08:08:55.625] | : . ' , ; Number of elements: 0
[08:08:55.625] | : . ' , resolve() for list ... done
[08:08:55.626] | : . ' resolve(obj, ...) ... done
[08:08:55.626] | : . ' resolved() for list ...
[08:08:55.626] | : . ' , Number of elements: 0
[08:08:55.626] | : . ' , Number of futures: 0
[08:08:55.626] | : . ' resolved() for list ... done
[08:08:55.627] | : . ' length: 0 (resolved future 1)
[08:08:55.627] | : . resolve() for FutureGlobals ... done
[08:08:55.627] | : . globals: [1] ‘x’
[08:08:55.628] | : Resolving futures part of globals (recursively) ... done
[08:08:55.628] | : Packages after dropping 'base': [0] 
[08:08:55.628] | : globals: [1] ‘x’
[08:08:55.628] | : packages: [0] 
[08:08:55.628] | getGlobalsAndPackages() ... done
[08:08:55.628] future(..., label = NULL) ... done
[08:08:55.628] value() for Future (<unnamed-10>) ...
[08:08:55.628] | run() for ‘Future’ (<unnamed-10>) ...
[08:08:55.629] | : state: ‘created’
[08:08:55.629] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.629] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.629] | : Using SequentialFutureBackend ...
[08:08:55.629] | : . Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:08:55.629] | : . Launching futures ...
[08:08:55.629] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.629] | : . ' , getFutureData() ...
[08:08:55.630] | : . ' , ; getFutureCore() ...
[08:08:55.630] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.630] | : . ' , ; getFutureCore() ... done
[08:08:55.630] | : . ' , ; getFutureCapture() ...
[08:08:55.630] | : . ' , ; getFutureCapture() ... done
[08:08:55.630] | : . ' , ; getFutureContext() ...
[08:08:55.630] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.630] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.630] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.630] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.631] | : . ' , ; getFutureContext() ... done
[08:08:55.631] | : . ' , getFutureData() ... done
[08:08:55.632] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.632] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.632] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.632] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.633] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.633] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.633] | : . ' , ; ` | New stack:
[08:08:55.633] | : . ' , ; ` | List of 1
[08:08:55.633] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.633] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.633] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.633] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.633] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.633] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.633] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.633] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.636] | : . ' , ; ` | Old stack:
[08:08:55.636] | : . ' , ; ` | List of 1
[08:08:55.636] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.636] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.636] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.636] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.636] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.636] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.636] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.636] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.636] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.636] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.636] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.639] | : . ' , ; ` | Not identical
[08:08:55.639] | : . ' , ; ` | all.equal() for future ...
[08:08:55.639] | : . ' , ; ` | : List of 2
[08:08:55.639] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.639] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.639] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.639] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.639] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.639] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.639] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.644] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.644] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.644] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.644] | : . ' , ; ` List of future strategies:
[08:08:55.644] | : . ' , ; ` 1. sequential:
[08:08:55.644] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.644] | : . ' , ; `    - tweaked: FALSE
[08:08:55.644] | : . ' , ; `    - call: plan(sequential)
[08:08:55.645] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.645] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.645] | : . ' , assign_globals() ...
[08:08:55.645] | : . ' , List of 1
[08:08:55.645] | : . ' ,  $ x: list()
[08:08:55.645] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.645] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.645] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.645] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.645] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.645] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.649] | : . ' , - copied ‘x’ to environment
[08:08:55.649] | : . ' , assign_globals() ... done
[08:08:55.650] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.651] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.651] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.651] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.651] | : . ' , ; ` | : New stack:
[08:08:55.651] | : . ' , ; ` | : List of 1
[08:08:55.651] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.651] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.651] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.651] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.651] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.651] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.651] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.651] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.651] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.651] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.651] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.654] | : . ' , ; ` | : Old stack:
[08:08:55.654] | : . ' , ; ` | : List of 1
[08:08:55.654] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.654] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.654] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.654] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.654] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.654] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.654] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.654] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.654] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.654] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.654] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.657] | : . ' , ; ` | : Identical
[08:08:55.657] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.657] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.658] | : . ' , ; ` | List of future strategies:
[08:08:55.658] | : . ' , ; ` | 1. sequential:
[08:08:55.658] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.658] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.658] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.658] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.658] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.658] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.659] | : . ' , SequentialFuture started (and completed)
[08:08:55.659] | : . ' , signalConditions() ...
[08:08:55.659] | : . ' , ; include = ‘immediateCondition’
[08:08:55.659] | : . ' , ; exclude = 
[08:08:55.659] | : . ' , ; resignal = FALSE
[08:08:55.659] | : . ' , ; Number of conditions: 6
[08:08:55.659] | : . ' , ;  int 6
[08:08:55.660] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.660] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.660] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.660] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.660] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.660] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.660] | : . ' , signalConditions() ... done
[08:08:55.660] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.660] | : . Launching futures ... done
[08:08:55.661] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.661] | : Using SequentialFutureBackend ... done
[08:08:55.661] | run() for ‘Future’ (<unnamed-10>) ... done
[08:08:55.661] | signalConditions() ...
[08:08:55.661] | : include = ‘immediateCondition’
[08:08:55.661] | : exclude = 
[08:08:55.661] | : resignal = FALSE
[08:08:55.661] | : Number of conditions: 6
[08:08:55.661] | :  int 6
[08:08:55.662] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.662] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.662] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.662] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.662] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.662] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.662] | signalConditions() ... done
[08:08:55.662] | relay stdout ...
[08:08:55.663] | relay stdout ... done
[08:08:55.663] | check for misuse ...
[08:08:55.663] | check for misuse ... done
[08:08:55.663] | relay conditions ...
[08:08:55.663] | : Future state: ‘finished’
[08:08:55.663] | : signalConditions() ...
[08:08:55.663] | : . include = ‘condition’
[08:08:55.663] | : . exclude = ‘immediateCondition’
[08:08:55.663] | : . resignal = TRUE
[08:08:55.663] | : . Number of conditions: 6
[08:08:55.664] | : .  int 6
[08:08:55.664] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.664] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.631] | : . ' , attachPackages() ...
[08:08:55.664] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.664] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.631] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.664] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.665] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.631] | : . ' , attachPackages() ... done
[08:08:55.665] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.665] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.631] | : . ' , attachPackages() ...
[08:08:55.665] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.665] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.632] | : . ' , ; packages: [n=0] 
[08:08:55.665] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.665] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.632] | : . ' , attachPackages() ... done
[08:08:55.666] | : signalConditions() ... done
[08:08:55.667] | relay conditions ... done
[08:08:55.667] value() for Future (<unnamed-10>) ... done
$a
[1] 1

[08:08:55.667] future(..., label = NULL) ...
[08:08:55.667] | lazy: FALSE
[08:08:55.667] | stdout: TRUE
[08:08:55.667] | conditions: [n=1] ‘condition’
[08:08:55.667] | gc: FALSE
[08:08:55.667] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.668] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.668] | : Searching for globals ...
[08:08:55.679] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:55.680] | : Searching for globals ... done
[08:08:55.680] | : Resolving globals: TRUE
[08:08:55.680] | : Resolving any globals that are futures ...
[08:08:55.680] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:55.680] | : Resolving any globals that are futures ... done
[08:08:55.680] | : Search for packages associated with the globals ...
[08:08:55.680] | : . Packages associated with globals: [1] ‘base’
[08:08:55.681] | : . Packages: [1] ‘base’
[08:08:55.681] | : Search for packages associated with the globals ... done
[08:08:55.681] | : Resolving futures part of globals (recursively) ...
[08:08:55.681] | : . resolve() for FutureGlobals ...
[08:08:55.681] | : . ' recursive: 99
[08:08:55.681] | : . ' Number of elements: 1
[08:08:55.681] | : . ' elements: ‘x’
[08:08:55.682] | : . ' 'obj' is list
[08:08:55.682] | : . ' resolve(obj, ...) ...
[08:08:55.682] | : . ' , resolve() for list ...
[08:08:55.683] | : . ' , ; recursive: 98
[08:08:55.683] | : . ' , ; Number of elements: 0
[08:08:55.683] | : . ' , resolve() for list ... done
[08:08:55.683] | : . ' resolve(obj, ...) ... done
[08:08:55.683] | : . ' resolved() for list ...
[08:08:55.683] | : . ' , Number of elements: 0
[08:08:55.683] | : . ' , Number of futures: 0
[08:08:55.684] | : . ' resolved() for list ... done
[08:08:55.684] | : . ' length: 0 (resolved future 1)
[08:08:55.684] | : . resolve() for FutureGlobals ... done
[08:08:55.684] | : . globals: [1] ‘x’
[08:08:55.684] | : Resolving futures part of globals (recursively) ... done
[08:08:55.684] | : Packages after dropping 'base': [0] 
[08:08:55.684] | : globals: [1] ‘x’
[08:08:55.684] | : packages: [0] 
[08:08:55.685] | getGlobalsAndPackages() ... done
[08:08:55.685] | run() for ‘Future’ (<unnamed-11>) ...
[08:08:55.685] | : state: ‘created’
[08:08:55.685] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.685] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.685] | : Using SequentialFutureBackend ...
[08:08:55.685] | : . Number of futures since start: 10 (10 created, 10 launched, 10 finished)
[08:08:55.685] | : . Launching futures ...
[08:08:55.686] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.686] | : . ' , getFutureData() ...
[08:08:55.686] | : . ' , ; getFutureCore() ...
[08:08:55.686] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.686] | : . ' , ; getFutureCore() ... done
[08:08:55.686] | : . ' , ; getFutureCapture() ...
[08:08:55.686] | : . ' , ; getFutureCapture() ... done
[08:08:55.686] | : . ' , ; getFutureContext() ...
[08:08:55.686] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.686] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.687] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.687] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.687] | : . ' , ; getFutureContext() ... done
[08:08:55.687] | : . ' , getFutureData() ... done
[08:08:55.688] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.688] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.689] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.689] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.689] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.689] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.689] | : . ' , ; ` | New stack:
[08:08:55.689] | : . ' , ; ` | List of 1
[08:08:55.689] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.689] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.689] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.689] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.689] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.689] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.689] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.689] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.692] | : . ' , ; ` | Old stack:
[08:08:55.692] | : . ' , ; ` | List of 1
[08:08:55.692] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.692] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.692] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.692] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.692] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.692] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.692] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.692] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.692] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.692] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.692] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.695] | : . ' , ; ` | Not identical
[08:08:55.695] | : . ' , ; ` | all.equal() for future ...
[08:08:55.695] | : . ' , ; ` | : List of 2
[08:08:55.695] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.695] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.695] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.695] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.695] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.695] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.695] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.700] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.700] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.700] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.701] | : . ' , ; ` List of future strategies:
[08:08:55.701] | : . ' , ; ` 1. sequential:
[08:08:55.701] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.701] | : . ' , ; `    - tweaked: FALSE
[08:08:55.701] | : . ' , ; `    - call: plan(sequential)
[08:08:55.701] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.702] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.702] | : . ' , assign_globals() ...
[08:08:55.703] | : . ' , List of 1
[08:08:55.703] | : . ' ,  $ x: list()
[08:08:55.703] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.703] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.703] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.703] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.703] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.703] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.705] | : . ' , - copied ‘x’ to environment
[08:08:55.705] | : . ' , assign_globals() ... done
[08:08:55.707] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.707] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.707] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.707] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.707] | : . ' , ; ` | : New stack:
[08:08:55.707] | : . ' , ; ` | : List of 1
[08:08:55.707] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.707] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.707] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.707] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.707] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.707] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.707] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.707] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.707] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.707] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.707] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.710] | : . ' , ; ` | : Old stack:
[08:08:55.710] | : . ' , ; ` | : List of 1
[08:08:55.710] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.710] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.710] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.710] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.710] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.710] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.710] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.710] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.710] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.710] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.710] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.714] | : . ' , ; ` | : Identical
[08:08:55.714] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.714] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.714] | : . ' , ; ` | List of future strategies:
[08:08:55.714] | : . ' , ; ` | 1. sequential:
[08:08:55.714] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.714] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.714] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.714] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.714] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.715] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.715] | : . ' , SequentialFuture started (and completed)
[08:08:55.715] | : . ' , signalConditions() ...
[08:08:55.715] | : . ' , ; include = ‘immediateCondition’
[08:08:55.715] | : . ' , ; exclude = 
[08:08:55.715] | : . ' , ; resignal = FALSE
[08:08:55.715] | : . ' , ; Number of conditions: 6
[08:08:55.715] | : . ' , ;  int 6
[08:08:55.716] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.716] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.716] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.716] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.716] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.716] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.716] | : . ' , signalConditions() ... done
[08:08:55.717] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.717] | : . Launching futures ... done
[08:08:55.717] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.717] | : Using SequentialFutureBackend ... done
[08:08:55.717] | run() for ‘Future’ (<unnamed-11>) ... done
[08:08:55.717] future(..., label = NULL) ... done
[08:08:55.717] value() for SequentialFuture (<unnamed-11>) ...
[08:08:55.717] | signalConditions() ...
[08:08:55.717] | : include = ‘immediateCondition’
[08:08:55.718] | : exclude = 
[08:08:55.718] | : resignal = FALSE
[08:08:55.718] | : Number of conditions: 6
[08:08:55.718] | :  int 6
[08:08:55.718] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.718] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.718] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.719] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.719] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.719] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.719] | signalConditions() ... done
[08:08:55.719] | relay stdout ...
[08:08:55.719] | relay stdout ... done
[08:08:55.719] | check for misuse ...
[08:08:55.719] | check for misuse ... done
[08:08:55.719] | relay conditions ...
[08:08:55.719] | : Future state: ‘finished’
[08:08:55.720] | : signalConditions() ...
[08:08:55.720] | : . include = ‘condition’
[08:08:55.720] | : . exclude = ‘immediateCondition’
[08:08:55.720] | : . resignal = TRUE
[08:08:55.720] | : . Number of conditions: 6
[08:08:55.720] | : .  int 6
[08:08:55.721] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.721] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.687] | : . ' , attachPackages() ...
[08:08:55.722] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.722] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.687] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.722] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.722] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.687] | : . ' , attachPackages() ... done
[08:08:55.722] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.722] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.688] | : . ' , attachPackages() ...
[08:08:55.722] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.722] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.688] | : . ' , ; packages: [n=0] 
[08:08:55.723] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.723] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.688] | : . ' , attachPackages() ... done
[08:08:55.723] | : signalConditions() ... done
[08:08:55.723] | relay conditions ... done
[08:08:55.723] value() for SequentialFuture (<unnamed-11>) ... done
$a
[1] 1

[08:08:55.723] future(..., label = NULL) ...
[08:08:55.723] | lazy: FALSE
[08:08:55.724] | stdout: TRUE
[08:08:55.724] | conditions: [n=1] ‘condition’
[08:08:55.724] | gc: FALSE
[08:08:55.724] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.724] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.724] | : Searching for globals ...
[08:08:55.736] | : . globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:55.736] | : Searching for globals ... done
[08:08:55.736] | : Resolving globals: TRUE
[08:08:55.736] | : Resolving any globals that are futures ...
[08:08:55.737] | : . globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:55.738] | : Resolving any globals that are futures ... done
[08:08:55.738] | : Search for packages associated with the globals ...
[08:08:55.738] | : . Packages associated with globals: [1] ‘base’
[08:08:55.738] | : . Packages: [1] ‘base’
[08:08:55.738] | : Search for packages associated with the globals ... done
[08:08:55.738] | : Resolving futures part of globals (recursively) ...
[08:08:55.739] | : . resolve() for FutureGlobals ...
[08:08:55.739] | : . ' recursive: 99
[08:08:55.739] | : . ' Number of elements: 2
[08:08:55.739] | : . ' elements: ‘x’, ‘name’
[08:08:55.739] | : . ' 'obj' is list
[08:08:55.739] | : . ' resolve(obj, ...) ...
[08:08:55.739] | : . ' , resolve() for list ...
[08:08:55.739] | : . ' , ; recursive: 98
[08:08:55.740] | : . ' , ; Number of elements: 0
[08:08:55.740] | : . ' , resolve() for list ... done
[08:08:55.740] | : . ' resolve(obj, ...) ... done
[08:08:55.740] | : . ' resolved() for list ...
[08:08:55.740] | : . ' , Number of elements: 0
[08:08:55.740] | : . ' , Number of futures: 0
[08:08:55.740] | : . ' resolved() for list ... done
[08:08:55.740] | : . ' length: 1 (resolved future 1)
[08:08:55.740] | : . ' 'obj' is atomic
[08:08:55.741] | : . ' length: 0 (resolved future 2)
[08:08:55.741] | : . resolve() for FutureGlobals ... done
[08:08:55.741] | : . globals: [2] ‘x’, ‘name’
[08:08:55.741] | : Resolving futures part of globals (recursively) ... done
[08:08:55.741] | : Packages after dropping 'base': [0] 
[08:08:55.741] | : globals: [2] ‘x’, ‘name’
[08:08:55.741] | : packages: [0] 
[08:08:55.741] | getGlobalsAndPackages() ... done
[08:08:55.741] | run() for ‘Future’ (<unnamed-12>) ...
[08:08:55.742] | : state: ‘created’
[08:08:55.742] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.742] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.742] | : Using SequentialFutureBackend ...
[08:08:55.742] | : . Number of futures since start: 11 (11 created, 11 launched, 11 finished)
[08:08:55.742] | : . Launching futures ...
[08:08:55.742] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:55.742] | : . ' , getFutureData() ...
[08:08:55.742] | : . ' , ; getFutureCore() ...
[08:08:55.743] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.743] | : . ' , ; getFutureCore() ... done
[08:08:55.743] | : . ' , ; getFutureCapture() ...
[08:08:55.743] | : . ' , ; getFutureCapture() ... done
[08:08:55.743] | : . ' , ; getFutureContext() ...
[08:08:55.743] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.743] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.743] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.743] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.744] | : . ' , ; getFutureContext() ... done
[08:08:55.744] | : . ' , getFutureData() ... done
[08:08:55.745] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.745] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.745] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.745] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.746] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.746] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.746] | : . ' , ; ` | New stack:
[08:08:55.746] | : . ' , ; ` | List of 1
[08:08:55.746] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.746] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.746] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.746] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.746] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.746] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.746] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.746] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.748] | : . ' , ; ` | Old stack:
[08:08:55.748] | : . ' , ; ` | List of 1
[08:08:55.748] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.748] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.748] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.748] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.748] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.748] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.748] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:55.748] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.748] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.748] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.748] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.751] | : . ' , ; ` | Not identical
[08:08:55.752] | : . ' , ; ` | all.equal() for future ...
[08:08:55.752] | : . ' , ; ` | : List of 2
[08:08:55.752] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.752] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.752] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.752] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.752] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.752] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.752] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.758] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.758] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.758] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.758] | : . ' , ; ` List of future strategies:
[08:08:55.758] | : . ' , ; ` 1. sequential:
[08:08:55.758] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.758] | : . ' , ; `    - tweaked: FALSE
[08:08:55.758] | : . ' , ; `    - call: plan(sequential)
[08:08:55.758] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.759] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.759] | : . ' , assign_globals() ...
[08:08:55.759] | : . ' , List of 2
[08:08:55.759] | : . ' ,  $ x   : list()
[08:08:55.759] | : . ' ,  $ name: chr "a"
[08:08:55.759] | : . ' ,  - attr(*, "where")=List of 2
[08:08:55.759] | : . ' ,   ..$ x   :<environment: R_GlobalEnv> 
[08:08:55.759] | : . ' ,   ..$ name:<environment: R_GlobalEnv> 
[08:08:55.759] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.759] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.759] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.759] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.762] | : . ' , - copied ‘x’ to environment
[08:08:55.762] | : . ' , - copied ‘name’ to environment
[08:08:55.762] | : . ' , assign_globals() ... done
[08:08:55.763] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.764] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.764] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.764] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.764] | : . ' , ; ` | : New stack:
[08:08:55.764] | : . ' , ; ` | : List of 1
[08:08:55.764] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.764] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.764] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.764] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.764] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.764] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.764] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.764] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.764] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.764] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.764] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.767] | : . ' , ; ` | : Old stack:
[08:08:55.767] | : . ' , ; ` | : List of 1
[08:08:55.767] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.767] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.767] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.767] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.767] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.767] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.767] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:55.767] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.767] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.767] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.767] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.770] | : . ' , ; ` | : Identical
[08:08:55.770] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.770] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:55.770] | : . ' , ; ` | List of future strategies:
[08:08:55.770] | : . ' , ; ` | 1. sequential:
[08:08:55.770] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.770] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.770] | : . ' , ; ` |    - call: plan(sequential)
[08:08:55.771] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.771] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.771] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.771] | : . ' , SequentialFuture started (and completed)
[08:08:55.771] | : . ' , signalConditions() ...
[08:08:55.772] | : . ' , ; include = ‘immediateCondition’
[08:08:55.772] | : . ' , ; exclude = 
[08:08:55.772] | : . ' , ; resignal = FALSE
[08:08:55.772] | : . ' , ; Number of conditions: 6
[08:08:55.772] | : . ' , ;  int 6
[08:08:55.772] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.772] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.773] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.773] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.773] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.773] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.773] | : . ' , signalConditions() ... done
[08:08:55.773] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:55.773] | : . Launching futures ... done
[08:08:55.773] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:55.773] | : Using SequentialFutureBackend ... done
[08:08:55.773] | run() for ‘Future’ (<unnamed-12>) ... done
[08:08:55.774] future(..., label = NULL) ... done
[08:08:55.775] value() for SequentialFuture (<unnamed-12>) ...
[08:08:55.775] | signalConditions() ...
[08:08:55.775] | : include = ‘immediateCondition’
[08:08:55.775] | : exclude = 
[08:08:55.775] | : resignal = FALSE
[08:08:55.775] | : Number of conditions: 6
[08:08:55.775] | :  int 6
[08:08:55.776] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.776] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.776] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.776] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.776] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.776] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.776] | signalConditions() ... done
[08:08:55.776] | relay stdout ...
[08:08:55.777] | relay stdout ... done
[08:08:55.777] | check for misuse ...
[08:08:55.777] | check for misuse ... done
[08:08:55.777] | relay conditions ...
[08:08:55.777] | : Future state: ‘finished’
[08:08:55.777] | : signalConditions() ...
[08:08:55.777] | : . include = ‘condition’
[08:08:55.777] | : . exclude = ‘immediateCondition’
[08:08:55.777] | : . resignal = TRUE
[08:08:55.777] | : . Number of conditions: 6
[08:08:55.777] | : .  int 6
[08:08:55.778] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.778] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.744] | : . ' , attachPackages() ...
[08:08:55.778] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.778] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.744] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.778] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.778] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.744] | : . ' , attachPackages() ... done
[08:08:55.779] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.779] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.744] | : . ' , attachPackages() ...
[08:08:55.779] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.779] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.744] | : . ' , ; packages: [n=0] 
[08:08:55.779] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.779] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.745] | : . ' , attachPackages() ... done
[08:08:55.779] | : signalConditions() ... done
[08:08:55.779] | relay conditions ... done
[08:08:55.780] value() for SequentialFuture (<unnamed-12>) ... done
$a
[1] 1

Testing with 1 cores ... DONE
Testing with 2 cores ...
availableCores(): 2
- plan('multicore') ...
[08:08:55.781] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.782] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:55.782] | : all.equal() for FutureStrategyList ...
[08:08:55.782] | : . New stack:
[08:08:55.782] | : . List of 1
[08:08:55.782] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.782] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.782] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.782] | : .   ..- attr(*, "init")= logi TRUE
[08:08:55.782] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.782] | : .     ...)  
[08:08:55.782] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.782] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.782] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:55.782] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.784] | : . Old stack:
[08:08:55.785] | : . List of 1
[08:08:55.785] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.785] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.785] | : .   ..- attr(*, "init")= chr "done"
[08:08:55.785] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.785] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.785] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.785] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:55.785] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.785] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.785] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.785] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.787] | : . Not identical
[08:08:55.788] | : . all.equal() for future ...
[08:08:55.788] | : . ' List of 2
[08:08:55.788] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.788] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.788] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.788] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:55.788] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.788] | : . '     ...)  
[08:08:55.788] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.788] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.788] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:55.788] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.788] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.788] | : . '   ..- attr(*, "init")= chr "done"
[08:08:55.788] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.788] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.788] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.788] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:55.788] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f4ef18> 
[08:08:55.788] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.788] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.794] | : . ' Formals differ
[08:08:55.795] | : . all.equal() for future ... done
[08:08:55.795] | : . Future strategies differ at level 1
[08:08:55.795] | : all.equal() for FutureStrategyList ... done
[08:08:55.795] | : plan(): Setting new future backend stack:
[08:08:55.795] | : List of future strategies:
[08:08:55.795] | : 1. multicore:
[08:08:55.795] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:55.795] | :    - tweaked: FALSE
[08:08:55.795] | :    - call: plan(strategy)
[08:08:55.795] | : List of 1
[08:08:55.795] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.795] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.795] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.795] | :   ..- attr(*, "init")= logi TRUE
[08:08:55.795] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.795] | :     ...)  
[08:08:55.795] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.795] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.795] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:55.795] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.798] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:55.798] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.798] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:55.799] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.799] | : . Legacy shutdown of cluster workers ...
[08:08:55.799] | : . ' Stopping existing cluster ...
[08:08:55.799] | : . ' , No pre-existing cluster. Skipping
[08:08:55.799] | : . ' Stopping existing cluster ... done
[08:08:55.799] | : . Legacy shutdown of cluster workers ... done
[08:08:55.799] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:55.800] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:55.800] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.800] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.800] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.800] | : .  - attr(*, "init")= logi TRUE
[08:08:55.800] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.800] | : .     ...)  
[08:08:55.800] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.800] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.800] | : .  - attr(*, "call")= language plan(strategy)
[08:08:55.802] | : . init: TRUE
[08:08:55.802] | : . makeFutureBackend(<multicore>) ...
[08:08:55.802] | : . ' Backend function: <‘NULL’>
[08:08:55.802] | : . ' Evaluator tweak arguments: [n=0]
[08:08:55.802] | : . '  list()
[08:08:55.802] | : . ' Evaluator formal arguments: [n=3]
[08:08:55.802] | : . '  list()
[08:08:55.803] | : . ' Backend factory arguments: [n=3]
[08:08:55.803] | : . ' Dotted pair list of 3
[08:08:55.803] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:55.803] | : . '  $ gc         : logi FALSE
[08:08:55.803] | : . '  $ earlySignal: logi FALSE
[08:08:55.806] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:55.806] | : . makeFutureBackend(<multicore>) ... done
[08:08:55.806] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:55.806] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.806] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.806] | : plan(): nbrOfWorkers() = 2
[08:08:55.807] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:55.807] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.807] future(..., label = NULL) ...
[08:08:55.807] | lazy: FALSE
[08:08:55.807] | stdout: TRUE
[08:08:55.807] | conditions: [n=1] ‘condition’
[08:08:55.807] | gc: FALSE
[08:08:55.807] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.807] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.808] | : Searching for globals ...
[08:08:55.819] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.819] | : Searching for globals ... done
[08:08:55.819] | : Resolving globals: TRUE
[08:08:55.820] | : Resolving any globals that are futures ...
[08:08:55.820] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.820] | : Resolving any globals that are futures ... done
[08:08:55.820] | : Search for packages associated with the globals ...
[08:08:55.820] | : . Packages associated with globals: [1] ‘base’
[08:08:55.820] | : . Packages: [1] ‘base’
[08:08:55.820] | : Search for packages associated with the globals ... done
[08:08:55.821] | : Resolving futures part of globals (recursively) ...
[08:08:55.821] | : . resolve() for FutureGlobals ...
[08:08:55.821] | : . ' recursive: 99
[08:08:55.821] | : . ' Number of elements: 1
[08:08:55.821] | : . ' elements: ‘x’
[08:08:55.821] | : . ' 'obj' is list
[08:08:55.821] | : . ' resolve(obj, ...) ...
[08:08:55.821] | : . ' , resolve() for list ...
[08:08:55.821] | : . ' , ; recursive: 98
[08:08:55.822] | : . ' , ; Number of elements: 0
[08:08:55.822] | : . ' , resolve() for list ... done
[08:08:55.822] | : . ' resolve(obj, ...) ... done
[08:08:55.822] | : . ' resolved() for list ...
[08:08:55.822] | : . ' , Number of elements: 0
[08:08:55.822] | : . ' , Number of futures: 0
[08:08:55.822] | : . ' resolved() for list ... done
[08:08:55.822] | : . ' length: 0 (resolved future 1)
[08:08:55.822] | : . resolve() for FutureGlobals ... done
[08:08:55.822] | : . globals: [1] ‘x’
[08:08:55.823] | : Resolving futures part of globals (recursively) ... done
[08:08:55.823] | : Packages after dropping 'base': [0] 
[08:08:55.823] | : globals: [1] ‘x’
[08:08:55.823] | : packages: [0] 
[08:08:55.823] | getGlobalsAndPackages() ... done
[08:08:55.823] | run() for ‘Future’ (<unnamed-13>) ...
[08:08:55.823] | : state: ‘created’
[08:08:55.823] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.824] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.824] | : Using MulticoreFutureBackend ...
[08:08:55.824] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:55.824] | : . Launching futures ...
[08:08:55.824] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:55.824] | : . ' , getFutureData() ...
[08:08:55.824] | : . ' , ; getFutureCore() ...
[08:08:55.825] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.825] | : . ' , ; getFutureCore() ... done
[08:08:55.825] | : . ' , ; getFutureCapture() ...
[08:08:55.825] | : . ' , ; getFutureCapture() ... done
[08:08:55.825] | : . ' , ; getFutureContext() ...
[08:08:55.825] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.825] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.825] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.825] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.825] | : . ' , ; getFutureContext() ... done
[08:08:55.826] | : . ' , getFutureData() ... done
[08:08:55.826] | : . ' , requestCore(..., workers = 2) ...
[08:08:55.826] | : . ' , requestCore(..., workers = 2) ... done
[08:08:55.829] | : . ' , MulticoreFuture started
[08:08:55.830] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:55.830] | : . Launching futures ... done
[08:08:55.830] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:55.831] | : Using MulticoreFutureBackend ... done
[08:08:55.831] | run() for ‘Future’ (<unnamed-13>) ... done
[08:08:55.831] future(..., label = NULL) ... done
[08:08:55.831] value() for MulticoreFuture (<unnamed-13>) ...
[08:08:55.832] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.833] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:55.833] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.833] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.834] | result() for MulticoreFuture ...
[08:08:55.834] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.834] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.834] | : . ' , ; ` | New stack:
[08:08:55.834] | : . ' , ; ` | List of 1
[08:08:55.834] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.834] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.834] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.834] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.834] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.834] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.834] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.834] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.839] | : . ' , ; ` | Old stack:
[08:08:55.839] | : . ' , ; ` | List of 1
[08:08:55.839] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.839] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.839] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.839] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.839] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.839] | : . ' , ; ` |     ...)  
[08:08:55.839] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.839] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.839] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:55.839] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:55.839] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.839] | : . ' , ; ` |     ...)  
[08:08:55.839] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.839] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.850] | : . ' , ; ` | Not identical
[08:08:55.850] | : . ' , ; ` | all.equal() for future ...
[08:08:55.850] | : . ' , ; ` | : List of 2
[08:08:55.850] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.850] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.850] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.850] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.850] | : . ' , ; ` | :     ...)  
[08:08:55.850] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:55.850] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:55.850] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.850] | : . ' , ; ` | :     ...)  
[08:08:55.850] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.858] | : . ' , ; ` | : Formals differ
[08:08:55.858] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.859] | : . ' , ; ` | Future strategies differ at level 1
[08:08:55.859] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.859] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:55.859] | : . ' , ; ` List of future strategies:
[08:08:55.859] | : . ' , ; ` 1. sequential:
[08:08:55.859] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.859] | : . ' , ; `    - tweaked: FALSE
[08:08:55.859] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.859] | : . ' , ; ` List of 1
[08:08:55.859] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.859] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.859] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:55.859] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.859] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.859] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.859] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.859] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.863] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:55.863] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:55.863] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.863] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:55.863] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.863] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.863] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:55.863] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.863] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.863] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.863] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.866] | : . ' , ; ` | : init: TRUE
[08:08:55.866] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:55.866] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:55.866] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:55.866] | : . ' , ; ` | : .  list()
[08:08:55.866] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:55.866] | : . ' , ; ` | : .  list()
[08:08:55.867] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:55.867] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:55.867] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:55.867] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:55.868] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:55.868] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:55.868] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:55.868] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.868] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:55.869] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.869] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.869] | : . ' , assign_globals() ...
[08:08:55.869] | : . ' , List of 1
[08:08:55.869] | : . ' ,  $ x: list()
[08:08:55.869] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.869] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.869] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.869] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.869] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.869] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.873] | : . ' , - copied ‘x’ to environment
[08:08:55.873] | : . ' , assign_globals() ... done
[08:08:55.875] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.876] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.876] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.876] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.876] | : . ' , ; ` | : New stack:
[08:08:55.876] | : . ' , ; ` | : List of 1
[08:08:55.876] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.876] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.876] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.876] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.876] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.876] | : . ' , ; ` | :     ...)  
[08:08:55.876] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.876] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.876] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:55.876] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:55.876] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.876] | : . ' , ; ` | :     ...)  
[08:08:55.876] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.876] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.879] | : . ' , ; ` | : Old stack:
[08:08:55.879] | : . ' , ; ` | : List of 1
[08:08:55.879] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.879] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.879] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.879] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.879] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.879] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.879] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.879] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245abd5e0> 
[08:08:55.879] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.879] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.879] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.883] | : . ' , ; ` | : Not identical
[08:08:55.883] | : . ' , ; ` | : all.equal() for future ...
[08:08:55.883] | : . ' , ; ` | : . List of 2
[08:08:55.883] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.883] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.883] | : . ' , ; ` | : .     ...)  
[08:08:55.883] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:55.883] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.883] | : . ' , ; ` | : .     ...)  
[08:08:55.883] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.883] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.883] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.883] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245abd5e0> 
[08:08:55.883] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.883] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.888] | : . ' , ; ` | : . Formals differ
[08:08:55.889] | : . ' , ; ` | : all.equal() for future ... done
[08:08:55.889] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:55.889] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.889] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:55.889] | : . ' , ; ` | List of future strategies:
[08:08:55.889] | : . ' , ; ` | 1. multicore:
[08:08:55.889] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:55.889] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.889] | : . ' , ; ` |    - call: plan(strategy)
[08:08:55.889] | : . ' , ; ` | List of 1
[08:08:55.889] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.889] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.889] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.889] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.889] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.889] | : . ' , ; ` |     ...)  
[08:08:55.889] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.889] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.889] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:55.889] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:55.889] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.889] | : . ' , ; ` |     ...)  
[08:08:55.889] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.889] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.894] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:55.894] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:55.894] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.894] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.894] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:55.894] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.895] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.895] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.896] | : readImmediateCondition() ...
[08:08:55.896] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:55.896] | : . Number of RDS files: 0
[08:08:55.896] | : . Returned conditions set:
[08:08:55.897] | : .  list()
[08:08:55.897] | : readImmediateCondition() ... done
[08:08:55.897] | : result() for MulticoreFuture ...
[08:08:55.898] | : result() for MulticoreFuture ... done
[08:08:55.898] | : signalConditions() ...
[08:08:55.898] | : . include = ‘immediateCondition’
[08:08:55.898] | : . exclude = 
[08:08:55.898] | : . resignal = FALSE
[08:08:55.898] | : . Number of conditions: 6
[08:08:55.898] | : .  int 6
[08:08:55.899] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.899] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.899] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.899] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.900] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.900] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.900] | : signalConditions() ... done
[08:08:55.900] | result() for MulticoreFuture ... done
[08:08:55.900] | result() for MulticoreFuture ...
[08:08:55.900] | result() for MulticoreFuture ... done
[08:08:55.900] | signalConditions() ...
[08:08:55.901] | : include = ‘immediateCondition’
[08:08:55.901] | : exclude = 
[08:08:55.901] | : resignal = FALSE
[08:08:55.901] | : Number of conditions: 6
[08:08:55.901] | :  int 6
[08:08:55.902] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.902] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.902] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.902] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.902] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.904] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.905] | signalConditions() ... done
[08:08:55.905] | relay stdout ...
[08:08:55.905] | relay stdout ... done
[08:08:55.905] | check for misuse ...
[08:08:55.905] | check for misuse ... done
[08:08:55.906] | relay conditions ...
[08:08:55.906] | : Future state: ‘finished’
[08:08:55.906] | : result() for MulticoreFuture ...
[08:08:55.906] | : result() for MulticoreFuture ... done
[08:08:55.907] | : signalConditions() ...
[08:08:55.907] | : . include = ‘condition’
[08:08:55.907] | : . exclude = ‘immediateCondition’
[08:08:55.907] | : . resignal = TRUE
[08:08:55.907] | : . Number of conditions: 6
[08:08:55.908] | : .  int 6
[08:08:55.908] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.909] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.830] | : . ' , attachPackages() ...
[08:08:55.909] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.909] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.830] | : . ' , ; packages: [n=1] ‘future’
[08:08:55.909] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.909] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.831] | : . ' , attachPackages() ... done
[08:08:55.910] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.910] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.831] | : . ' , attachPackages() ...
[08:08:55.910] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.910] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.831] | : . ' , ; packages: [n=0] 
[08:08:55.910] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:55.910] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.831] | : . ' , attachPackages() ... done
[08:08:55.911] | : signalConditions() ... done
[08:08:55.911] | relay conditions ... done
[08:08:55.911] value() for MulticoreFuture (<unnamed-13>) ... done
$a
[1] 1

[08:08:55.911] future(..., label = NULL) ...
[08:08:55.911] | lazy: TRUE
[08:08:55.911] | stdout: TRUE
[08:08:55.911] | conditions: [n=1] ‘condition’
[08:08:55.912] | gc: FALSE
[08:08:55.912] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:55.912] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:55.912] | : Searching for globals ...
[08:08:55.924] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.925] | : Searching for globals ... done
[08:08:55.925] | : Resolving globals: TRUE
[08:08:55.925] | : Resolving any globals that are futures ...
[08:08:55.926] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:55.926] | : Resolving any globals that are futures ... done
[08:08:55.927] | : Search for packages associated with the globals ...
[08:08:55.927] | : . Packages associated with globals: [1] ‘base’
[08:08:55.927] | : . Packages: [1] ‘base’
[08:08:55.927] | : Search for packages associated with the globals ... done
[08:08:55.927] | : Resolving futures part of globals (recursively) ...
[08:08:55.928] | : . resolve() for FutureGlobals ...
[08:08:55.928] | : . ' recursive: 99
[08:08:55.928] | : . ' Number of elements: 1
[08:08:55.928] | : . ' elements: ‘x’
[08:08:55.928] | : . ' 'obj' is list
[08:08:55.928] | : . ' resolve(obj, ...) ...
[08:08:55.929] | : . ' , resolve() for list ...
[08:08:55.929] | : . ' , ; recursive: 98
[08:08:55.929] | : . ' , ; Number of elements: 0
[08:08:55.929] | : . ' , resolve() for list ... done
[08:08:55.929] | : . ' resolve(obj, ...) ... done
[08:08:55.929] | : . ' resolved() for list ...
[08:08:55.929] | : . ' , Number of elements: 0
[08:08:55.929] | : . ' , Number of futures: 0
[08:08:55.929] | : . ' resolved() for list ... done
[08:08:55.930] | : . ' length: 0 (resolved future 1)
[08:08:55.930] | : . resolve() for FutureGlobals ... done
[08:08:55.930] | : . globals: [1] ‘x’
[08:08:55.930] | : Resolving futures part of globals (recursively) ... done
[08:08:55.930] | : Packages after dropping 'base': [0] 
[08:08:55.930] | : globals: [1] ‘x’
[08:08:55.930] | : packages: [0] 
[08:08:55.930] | getGlobalsAndPackages() ... done
[08:08:55.931] future(..., label = NULL) ... done
[08:08:55.931] value() for Future (<unnamed-14>) ...
[08:08:55.931] | run() for ‘Future’ (<unnamed-14>) ...
[08:08:55.931] | : state: ‘created’
[08:08:55.931] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.931] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.931] | : Using MulticoreFutureBackend ...
[08:08:55.932] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:55.932] | : . Launching futures ...
[08:08:55.932] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:55.932] | : . ' , getFutureData() ...
[08:08:55.932] | : . ' , ; getFutureCore() ...
[08:08:55.932] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:55.932] | : . ' , ; getFutureCore() ... done
[08:08:55.932] | : . ' , ; getFutureCapture() ...
[08:08:55.932] | : . ' , ; getFutureCapture() ... done
[08:08:55.933] | : . ' , ; getFutureContext() ...
[08:08:55.933] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.933] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:55.933] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.933] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:55.933] | : . ' , ; getFutureContext() ... done
[08:08:55.933] | : . ' , getFutureData() ... done
[08:08:55.933] | : . ' , requestCore(..., workers = 2) ...
[08:08:55.934] | : . ' , requestCore(..., workers = 2) ... done
[08:08:55.936] | : . ' , MulticoreFuture started
[08:08:55.936] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:55.936] | : . Launching futures ... done
[08:08:55.937] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:55.937] | : Using MulticoreFutureBackend ... done
[08:08:55.937] | run() for ‘Future’ (<unnamed-14>) ... done
[08:08:55.937] | result() for MulticoreFuture ...
[08:08:55.939] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.939] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:55.940] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.940] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.941] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.941] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:55.941] | : . ' , ; ` | New stack:
[08:08:55.941] | : . ' , ; ` | List of 1
[08:08:55.941] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.941] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.941] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:55.941] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.941] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.941] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.941] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.941] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.946] | : . ' , ; ` | Old stack:
[08:08:55.946] | : . ' , ; ` | List of 1
[08:08:55.946] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.946] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.946] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.946] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.946] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.946] | : . ' , ; ` |     ...)  
[08:08:55.946] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.946] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.946] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:55.946] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:55.946] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.946] | : . ' , ; ` |     ...)  
[08:08:55.946] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.946] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.952] | : . ' , ; ` | Not identical
[08:08:55.952] | : . ' , ; ` | all.equal() for future ...
[08:08:55.952] | : . ' , ; ` | : List of 2
[08:08:55.952] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.952] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.952] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.952] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.952] | : . ' , ; ` | :     ...)  
[08:08:55.952] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:55.952] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:55.952] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.952] | : . ' , ; ` | :     ...)  
[08:08:55.952] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.964] | : . ' , ; ` | : Formals differ
[08:08:55.964] | : . ' , ; ` | all.equal() for future ... done
[08:08:55.964] | : . ' , ; ` | Future strategies differ at level 1
[08:08:55.964] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:55.965] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:55.965] | : . ' , ; ` List of future strategies:
[08:08:55.965] | : . ' , ; ` 1. sequential:
[08:08:55.965] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:55.965] | : . ' , ; `    - tweaked: FALSE
[08:08:55.965] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.966] | : . ' , ; ` List of 1
[08:08:55.966] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.966] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.966] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:55.966] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.966] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.966] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.966] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.966] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.969] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:55.969] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:55.969] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:55.970] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:55.970] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.970] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.970] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:55.970] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.970] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.970] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.970] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.972] | : . ' , ; ` | : init: TRUE
[08:08:55.972] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:55.972] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:55.972] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:55.972] | : . ' , ; ` | : .  list()
[08:08:55.973] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:55.973] | : . ' , ; ` | : .  list()
[08:08:55.973] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:55.973] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:55.973] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:55.973] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:55.974] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:55.975] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:55.975] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:55.975] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:55.975] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:55.975] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:55.975] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:55.975] | : . ' , assign_globals() ...
[08:08:55.975] | : . ' , List of 1
[08:08:55.975] | : . ' ,  $ x: list()
[08:08:55.975] | : . ' ,  - attr(*, "where")=List of 1
[08:08:55.975] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:55.975] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:55.975] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:55.975] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:55.975] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:55.978] | : . ' , - copied ‘x’ to environment
[08:08:55.978] | : . ' , assign_globals() ... done
[08:08:55.980] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.980] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:55.980] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:55.981] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:55.981] | : . ' , ; ` | : New stack:
[08:08:55.981] | : . ' , ; ` | : List of 1
[08:08:55.981] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.981] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.981] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.981] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.981] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.981] | : . ' , ; ` | :     ...)  
[08:08:55.981] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.981] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.981] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:55.981] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:55.981] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.981] | : . ' , ; ` | :     ...)  
[08:08:55.981] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.981] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.986] | : . ' , ; ` | : Old stack:
[08:08:55.986] | : . ' , ; ` | : List of 1
[08:08:55.986] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.986] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.986] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:55.986] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.986] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.986] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.986] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.986] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244fcd590> 
[08:08:55.986] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.986] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.986] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:55.989] | : . ' , ; ` | : Not identical
[08:08:55.990] | : . ' , ; ` | : all.equal() for future ...
[08:08:55.990] | : . ' , ; ` | : . List of 2
[08:08:55.990] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.990] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.990] | : . ' , ; ` | : .     ...)  
[08:08:55.990] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:55.990] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.990] | : . ' , ; ` | : .     ...)  
[08:08:55.990] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.990] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.990] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:55.990] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244fcd590> 
[08:08:55.990] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:55.990] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:55.996] | : . ' , ; ` | : . Formals differ
[08:08:55.996] | : . ' , ; ` | : all.equal() for future ... done
[08:08:55.996] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:55.996] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:55.996] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:55.996] | : . ' , ; ` | List of future strategies:
[08:08:55.996] | : . ' , ; ` | 1. multicore:
[08:08:55.996] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:55.996] | : . ' , ; ` |    - tweaked: FALSE
[08:08:55.996] | : . ' , ; ` |    - call: plan(strategy)
[08:08:55.996] | : . ' , ; ` | List of 1
[08:08:55.996] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:55.996] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:55.996] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:55.996] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:55.996] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.996] | : . ' , ; ` |     ...)  
[08:08:55.996] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.996] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.996] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:55.996] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:55.996] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:55.996] | : . ' , ; ` |     ...)  
[08:08:55.996] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:55.996] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.000] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.000] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.000] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.000] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.000] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:56.000] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.000] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.001] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.001] | : readImmediateCondition() ...
[08:08:56.001] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:56.002] | : . Number of RDS files: 0
[08:08:56.002] | : . Returned conditions set:
[08:08:56.002] | : .  list()
[08:08:56.003] | : readImmediateCondition() ... done
[08:08:56.003] | : result() for MulticoreFuture ...
[08:08:56.003] | : result() for MulticoreFuture ... done
[08:08:56.003] | : signalConditions() ...
[08:08:56.003] | : . include = ‘immediateCondition’
[08:08:56.004] | : . exclude = 
[08:08:56.004] | : . resignal = FALSE
[08:08:56.004] | : . Number of conditions: 6
[08:08:56.004] | : .  int 6
[08:08:56.005] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.005] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.005] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.005] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.005] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.005] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.006] | : signalConditions() ... done
[08:08:56.006] | result() for MulticoreFuture ... done
[08:08:56.006] | result() for MulticoreFuture ...
[08:08:56.006] | result() for MulticoreFuture ... done
[08:08:56.006] | signalConditions() ...
[08:08:56.006] | : include = ‘immediateCondition’
[08:08:56.007] | : exclude = 
[08:08:56.007] | : resignal = FALSE
[08:08:56.007] | : Number of conditions: 6
[08:08:56.007] | :  int 6
[08:08:56.007] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.008] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.008] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.008] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.008] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.008] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.008] | signalConditions() ... done
[08:08:56.008] | relay stdout ...
[08:08:56.009] | relay stdout ... done
[08:08:56.009] | check for misuse ...
[08:08:56.009] | check for misuse ... done
[08:08:56.009] | relay conditions ...
[08:08:56.009] | : Future state: ‘finished’
[08:08:56.009] | : result() for MulticoreFuture ...
[08:08:56.009] | : result() for MulticoreFuture ... done
[08:08:56.010] | : signalConditions() ...
[08:08:56.010] | : . include = ‘condition’
[08:08:56.010] | : . exclude = ‘immediateCondition’
[08:08:56.010] | : . resignal = TRUE
[08:08:56.010] | : . Number of conditions: 6
[08:08:56.010] | : .  int 6
[08:08:56.011] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.011] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.937] | : . ' , attachPackages() ...
[08:08:56.011] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.011] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.937] | : . ' , ; packages: [n=1] ‘future’
[08:08:56.011] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.012] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.938] | : . ' , attachPackages() ... done
[08:08:56.012] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.012] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.938] | : . ' , attachPackages() ...
[08:08:56.012] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.012] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.938] | : . ' , ; packages: [n=0] 
[08:08:56.012] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.013] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:55.938] | : . ' , attachPackages() ... done
[08:08:56.013] | : signalConditions() ... done
[08:08:56.013] | relay conditions ... done
[08:08:56.013] value() for Future (<unnamed-14>) ... done
$a
[1] 1

[08:08:56.013] future(..., label = NULL) ...
[08:08:56.014] | lazy: FALSE
[08:08:56.014] | stdout: TRUE
[08:08:56.014] | conditions: [n=1] ‘condition’
[08:08:56.014] | gc: FALSE
[08:08:56.014] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:56.014] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:56.015] | : Searching for globals ...
[08:08:56.031] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:56.031] | : Searching for globals ... done
[08:08:56.031] | : Resolving globals: TRUE
[08:08:56.031] | : Resolving any globals that are futures ...
[08:08:56.032] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:56.032] | : Resolving any globals that are futures ... done
[08:08:56.032] | : Search for packages associated with the globals ...
[08:08:56.032] | : . Packages associated with globals: [1] ‘base’
[08:08:56.032] | : . Packages: [1] ‘base’
[08:08:56.032] | : Search for packages associated with the globals ... done
[08:08:56.033] | : Resolving futures part of globals (recursively) ...
[08:08:56.033] | : . resolve() for FutureGlobals ...
[08:08:56.033] | : . ' recursive: 99
[08:08:56.033] | : . ' Number of elements: 1
[08:08:56.033] | : . ' elements: ‘x’
[08:08:56.033] | : . ' 'obj' is list
[08:08:56.033] | : . ' resolve(obj, ...) ...
[08:08:56.034] | : . ' , resolve() for list ...
[08:08:56.034] | : . ' , ; recursive: 98
[08:08:56.034] | : . ' , ; Number of elements: 0
[08:08:56.034] | : . ' , resolve() for list ... done
[08:08:56.034] | : . ' resolve(obj, ...) ... done
[08:08:56.034] | : . ' resolved() for list ...
[08:08:56.034] | : . ' , Number of elements: 0
[08:08:56.034] | : . ' , Number of futures: 0
[08:08:56.034] | : . ' resolved() for list ... done
[08:08:56.035] | : . ' length: 0 (resolved future 1)
[08:08:56.035] | : . resolve() for FutureGlobals ... done
[08:08:56.035] | : . globals: [1] ‘x’
[08:08:56.035] | : Resolving futures part of globals (recursively) ... done
[08:08:56.035] | : Packages after dropping 'base': [0] 
[08:08:56.035] | : globals: [1] ‘x’
[08:08:56.035] | : packages: [0] 
[08:08:56.035] | getGlobalsAndPackages() ... done
[08:08:56.036] | run() for ‘Future’ (<unnamed-15>) ...
[08:08:56.036] | : state: ‘created’
[08:08:56.036] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.036] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.036] | : Using MulticoreFutureBackend ...
[08:08:56.036] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:56.036] | : . Launching futures ...
[08:08:56.036] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:56.037] | : . ' , getFutureData() ...
[08:08:56.037] | : . ' , ; getFutureCore() ...
[08:08:56.037] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:56.037] | : . ' , ; getFutureCore() ... done
[08:08:56.037] | : . ' , ; getFutureCapture() ...
[08:08:56.037] | : . ' , ; getFutureCapture() ... done
[08:08:56.037] | : . ' , ; getFutureContext() ...
[08:08:56.037] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.037] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:56.038] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.038] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:56.038] | : . ' , ; getFutureContext() ... done
[08:08:56.038] | : . ' , getFutureData() ... done
[08:08:56.038] | : . ' , requestCore(..., workers = 2) ...
[08:08:56.038] | : . ' , requestCore(..., workers = 2) ... done
[08:08:56.040] | : . ' , MulticoreFuture started
[08:08:56.041] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:56.044] | : . Launching futures ... done
[08:08:56.044] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:56.045] | : Using MulticoreFutureBackend ... done
[08:08:56.045] | run() for ‘Future’ (<unnamed-15>) ... done
[08:08:56.046] future(..., label = NULL) ... done
[08:08:56.046] value() for MulticoreFuture (<unnamed-15>) ...
[08:08:56.047] | result() for MulticoreFuture ...
[08:08:56.048] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.048] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:56.049] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.049] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.050] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.050] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:56.051] | : . ' , ; ` | New stack:
[08:08:56.051] | : . ' , ; ` | List of 1
[08:08:56.051] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.051] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.051] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:56.051] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.051] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.051] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.051] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.051] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.057] | : . ' , ; ` | Old stack:
[08:08:56.057] | : . ' , ; ` | List of 1
[08:08:56.057] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.057] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.057] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.057] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.057] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.057] | : . ' , ; ` |     ...)  
[08:08:56.057] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.057] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.057] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.057] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.057] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.057] | : . ' , ; ` |     ...)  
[08:08:56.057] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.057] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.062] | : . ' , ; ` | Not identical
[08:08:56.062] | : . ' , ; ` | all.equal() for future ...
[08:08:56.062] | : . ' , ; ` | : List of 2
[08:08:56.062] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.062] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.062] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.062] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.062] | : . ' , ; ` | :     ...)  
[08:08:56.062] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.062] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.062] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.062] | : . ' , ; ` | :     ...)  
[08:08:56.062] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.069] | : . ' , ; ` | : Formals differ
[08:08:56.069] | : . ' , ; ` | all.equal() for future ... done
[08:08:56.069] | : . ' , ; ` | Future strategies differ at level 1
[08:08:56.069] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:56.069] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:56.069] | : . ' , ; ` List of future strategies:
[08:08:56.069] | : . ' , ; ` 1. sequential:
[08:08:56.069] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:56.069] | : . ' , ; `    - tweaked: FALSE
[08:08:56.069] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.070] | : . ' , ; ` List of 1
[08:08:56.070] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.070] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.070] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:56.070] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.070] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.070] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.070] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.070] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.073] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.073] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.073] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.074] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:56.074] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.074] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.074] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:56.074] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.074] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.074] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.074] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.077] | : . ' , ; ` | : init: TRUE
[08:08:56.078] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:56.078] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:56.078] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:56.078] | : . ' , ; ` | : .  list()
[08:08:56.078] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:56.078] | : . ' , ; ` | : .  list()
[08:08:56.079] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:56.079] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:56.079] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:56.079] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:56.080] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:56.080] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:56.080] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:56.080] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.081] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:56.081] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.081] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.081] | : . ' , assign_globals() ...
[08:08:56.081] | : . ' , List of 1
[08:08:56.081] | : . ' ,  $ x: list()
[08:08:56.081] | : . ' ,  - attr(*, "where")=List of 1
[08:08:56.081] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:56.081] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:56.081] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:56.081] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:56.081] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:56.084] | : . ' , - copied ‘x’ to environment
[08:08:56.084] | : . ' , assign_globals() ... done
[08:08:56.086] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.086] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.086] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.086] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:56.086] | : . ' , ; ` | : New stack:
[08:08:56.087] | : . ' , ; ` | : List of 1
[08:08:56.087] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.087] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.087] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.087] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.087] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.087] | : . ' , ; ` | :     ...)  
[08:08:56.087] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.087] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.087] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.087] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.087] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.087] | : . ' , ; ` | :     ...)  
[08:08:56.087] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.087] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.090] | : . ' , ; ` | : Old stack:
[08:08:56.090] | : . ' , ; ` | : List of 1
[08:08:56.090] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.090] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.090] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.090] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.090] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.090] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.090] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.090] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5632442912d0> 
[08:08:56.090] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.090] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.090] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.093] | : . ' , ; ` | : Not identical
[08:08:56.093] | : . ' , ; ` | : all.equal() for future ...
[08:08:56.093] | : . ' , ; ` | : . List of 2
[08:08:56.093] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.093] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.093] | : . ' , ; ` | : .     ...)  
[08:08:56.093] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.093] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.093] | : . ' , ; ` | : .     ...)  
[08:08:56.093] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.093] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.093] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.093] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5632442912d0> 
[08:08:56.093] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.093] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.101] | : . ' , ; ` | : . Formals differ
[08:08:56.101] | : . ' , ; ` | : all.equal() for future ... done
[08:08:56.101] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:56.101] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:56.101] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:56.101] | : . ' , ; ` | List of future strategies:
[08:08:56.101] | : . ' , ; ` | 1. multicore:
[08:08:56.101] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:56.101] | : . ' , ; ` |    - tweaked: FALSE
[08:08:56.101] | : . ' , ; ` |    - call: plan(strategy)
[08:08:56.102] | : . ' , ; ` | List of 1
[08:08:56.102] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.102] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.102] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.102] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.102] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.102] | : . ' , ; ` |     ...)  
[08:08:56.102] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.102] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.102] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.102] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.102] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.102] | : . ' , ; ` |     ...)  
[08:08:56.102] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.102] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.105] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.105] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.105] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.105] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.105] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:56.106] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.106] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.106] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.106] | : readImmediateCondition() ...
[08:08:56.107] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:56.107] | : . Number of RDS files: 0
[08:08:56.107] | : . Returned conditions set:
[08:08:56.107] | : .  list()
[08:08:56.108] | : readImmediateCondition() ... done
[08:08:56.109] | : result() for MulticoreFuture ...
[08:08:56.109] | : result() for MulticoreFuture ... done
[08:08:56.109] | : signalConditions() ...
[08:08:56.109] | : . include = ‘immediateCondition’
[08:08:56.110] | : . exclude = 
[08:08:56.110] | : . resignal = FALSE
[08:08:56.110] | : . Number of conditions: 6
[08:08:56.110] | : .  int 6
[08:08:56.111] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.111] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.111] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.111] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.111] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.112] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.112] | : signalConditions() ... done
[08:08:56.112] | result() for MulticoreFuture ... done
[08:08:56.112] | result() for MulticoreFuture ...
[08:08:56.112] | result() for MulticoreFuture ... done
[08:08:56.112] | signalConditions() ...
[08:08:56.112] | : include = ‘immediateCondition’
[08:08:56.113] | : exclude = 
[08:08:56.113] | : resignal = FALSE
[08:08:56.113] | : Number of conditions: 6
[08:08:56.113] | :  int 6
[08:08:56.113] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.114] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.114] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.114] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.114] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.114] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.114] | signalConditions() ... done
[08:08:56.114] | relay stdout ...
[08:08:56.114] | relay stdout ... done
[08:08:56.115] | check for misuse ...
[08:08:56.115] | check for misuse ... done
[08:08:56.115] | relay conditions ...
[08:08:56.115] | : Future state: ‘finished’
[08:08:56.115] | : result() for MulticoreFuture ...
[08:08:56.115] | : result() for MulticoreFuture ... done
[08:08:56.115] | : signalConditions() ...
[08:08:56.115] | : . include = ‘condition’
[08:08:56.116] | : . exclude = ‘immediateCondition’
[08:08:56.116] | : . resignal = TRUE
[08:08:56.116] | : . Number of conditions: 6
[08:08:56.116] | : .  int 6
[08:08:56.116] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.117] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.044] | : . ' , attachPackages() ...
[08:08:56.117] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.117] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.044] | : . ' , ; packages: [n=1] ‘future’
[08:08:56.117] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.117] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.045] | : . ' , attachPackages() ... done
[08:08:56.117] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.117] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.046] | : . ' , attachPackages() ...
[08:08:56.118] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.118] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.046] | : . ' , ; packages: [n=0] 
[08:08:56.118] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.118] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.047] | : . ' , attachPackages() ... done
[08:08:56.118] | : signalConditions() ... done
[08:08:56.118] | relay conditions ... done
[08:08:56.118] value() for MulticoreFuture (<unnamed-15>) ... done
$a
[1] 1

[08:08:56.119] future(..., label = NULL) ...
[08:08:56.119] | lazy: TRUE
[08:08:56.119] | stdout: TRUE
[08:08:56.119] | conditions: [n=1] ‘condition’
[08:08:56.119] | gc: FALSE
[08:08:56.119] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:56.120] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:56.120] | : Searching for globals ...
[08:08:56.134] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:56.134] | : Searching for globals ... done
[08:08:56.134] | : Resolving globals: TRUE
[08:08:56.134] | : Resolving any globals that are futures ...
[08:08:56.134] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:56.134] | : Resolving any globals that are futures ... done
[08:08:56.134] | : Search for packages associated with the globals ...
[08:08:56.135] | : . Packages associated with globals: [1] ‘base’
[08:08:56.135] | : . Packages: [1] ‘base’
[08:08:56.135] | : Search for packages associated with the globals ... done
[08:08:56.135] | : Resolving futures part of globals (recursively) ...
[08:08:56.135] | : . resolve() for FutureGlobals ...
[08:08:56.135] | : . ' recursive: 99
[08:08:56.136] | : . ' Number of elements: 1
[08:08:56.136] | : . ' elements: ‘x’
[08:08:56.136] | : . ' 'obj' is list
[08:08:56.136] | : . ' resolve(obj, ...) ...
[08:08:56.136] | : . ' , resolve() for list ...
[08:08:56.136] | : . ' , ; recursive: 98
[08:08:56.136] | : . ' , ; Number of elements: 0
[08:08:56.136] | : . ' , resolve() for list ... done
[08:08:56.137] | : . ' resolve(obj, ...) ... done
[08:08:56.137] | : . ' resolved() for list ...
[08:08:56.137] | : . ' , Number of elements: 0
[08:08:56.137] | : . ' , Number of futures: 0
[08:08:56.137] | : . ' resolved() for list ... done
[08:08:56.137] | : . ' length: 0 (resolved future 1)
[08:08:56.137] | : . resolve() for FutureGlobals ... done
[08:08:56.137] | : . globals: [1] ‘x’
[08:08:56.137] | : Resolving futures part of globals (recursively) ... done
[08:08:56.138] | : Packages after dropping 'base': [0] 
[08:08:56.138] | : globals: [1] ‘x’
[08:08:56.138] | : packages: [0] 
[08:08:56.138] | getGlobalsAndPackages() ... done
[08:08:56.138] future(..., label = NULL) ... done
[08:08:56.138] value() for Future (<unnamed-16>) ...
[08:08:56.138] | run() for ‘Future’ (<unnamed-16>) ...
[08:08:56.139] | : state: ‘created’
[08:08:56.139] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.139] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.139] | : Using MulticoreFutureBackend ...
[08:08:56.139] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:56.139] | : . Launching futures ...
[08:08:56.139] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:56.139] | : . ' , getFutureData() ...
[08:08:56.139] | : . ' , ; getFutureCore() ...
[08:08:56.140] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:56.140] | : . ' , ; getFutureCore() ... done
[08:08:56.140] | : . ' , ; getFutureCapture() ...
[08:08:56.140] | : . ' , ; getFutureCapture() ... done
[08:08:56.140] | : . ' , ; getFutureContext() ...
[08:08:56.140] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.140] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:56.140] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.140] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:56.141] | : . ' , ; getFutureContext() ... done
[08:08:56.141] | : . ' , getFutureData() ... done
[08:08:56.141] | : . ' , requestCore(..., workers = 2) ...
[08:08:56.141] | : . ' , requestCore(..., workers = 2) ... done
[08:08:56.143] | : . ' , MulticoreFuture started
[08:08:56.143] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:56.144] | : . Launching futures ... done
[08:08:56.144] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:56.144] | : Using MulticoreFutureBackend ... done
[08:08:56.144] | run() for ‘Future’ (<unnamed-16>) ... done
[08:08:56.145] | result() for MulticoreFuture ...
[08:08:56.146] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.147] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:56.147] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.147] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.148] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.148] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:56.148] | : . ' , ; ` | New stack:
[08:08:56.148] | : . ' , ; ` | List of 1
[08:08:56.148] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.148] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.148] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:56.148] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.148] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.148] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.148] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.148] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.153] | : . ' , ; ` | Old stack:
[08:08:56.153] | : . ' , ; ` | List of 1
[08:08:56.153] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.153] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.153] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.153] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.153] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.153] | : . ' , ; ` |     ...)  
[08:08:56.153] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.153] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.153] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.153] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.153] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.153] | : . ' , ; ` |     ...)  
[08:08:56.153] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.153] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.163] | : . ' , ; ` | Not identical
[08:08:56.164] | : . ' , ; ` | all.equal() for future ...
[08:08:56.164] | : . ' , ; ` | : List of 2
[08:08:56.164] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.164] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.164] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.164] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.164] | : . ' , ; ` | :     ...)  
[08:08:56.164] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.164] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.164] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.164] | : . ' , ; ` | :     ...)  
[08:08:56.164] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.172] | : . ' , ; ` | : Formals differ
[08:08:56.172] | : . ' , ; ` | all.equal() for future ... done
[08:08:56.172] | : . ' , ; ` | Future strategies differ at level 1
[08:08:56.172] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:56.172] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:56.172] | : . ' , ; ` List of future strategies:
[08:08:56.172] | : . ' , ; ` 1. sequential:
[08:08:56.172] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:56.172] | : . ' , ; `    - tweaked: FALSE
[08:08:56.172] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.173] | : . ' , ; ` List of 1
[08:08:56.173] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.173] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.173] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:56.173] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.173] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.173] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.173] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.173] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.176] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.176] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.177] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.177] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:56.177] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.177] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.177] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:56.177] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.177] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.177] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.177] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.179] | : . ' , ; ` | : init: TRUE
[08:08:56.179] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:56.179] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:56.179] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:56.179] | : . ' , ; ` | : .  list()
[08:08:56.180] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:56.180] | : . ' , ; ` | : .  list()
[08:08:56.180] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:56.180] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:56.180] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:56.180] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:56.181] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:56.181] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:56.182] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:56.182] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.182] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:56.182] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.182] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.182] | : . ' , assign_globals() ...
[08:08:56.182] | : . ' , List of 1
[08:08:56.182] | : . ' ,  $ x: list()
[08:08:56.182] | : . ' ,  - attr(*, "where")=List of 1
[08:08:56.182] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:56.182] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:56.182] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:56.182] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:56.182] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:56.186] | : . ' , - copied ‘x’ to environment
[08:08:56.187] | : . ' , assign_globals() ... done
[08:08:56.189] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.189] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.189] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.189] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:56.189] | : . ' , ; ` | : New stack:
[08:08:56.189] | : . ' , ; ` | : List of 1
[08:08:56.189] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.189] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.189] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.189] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.189] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.189] | : . ' , ; ` | :     ...)  
[08:08:56.189] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.189] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.189] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.189] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.189] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.189] | : . ' , ; ` | :     ...)  
[08:08:56.189] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.189] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.193] | : . ' , ; ` | : Old stack:
[08:08:56.193] | : . ' , ; ` | : List of 1
[08:08:56.193] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.193] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.193] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.193] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.193] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.193] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.193] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.193] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245b81570> 
[08:08:56.193] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.193] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.193] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.196] | : . ' , ; ` | : Not identical
[08:08:56.196] | : . ' , ; ` | : all.equal() for future ...
[08:08:56.196] | : . ' , ; ` | : . List of 2
[08:08:56.196] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.196] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.196] | : . ' , ; ` | : .     ...)  
[08:08:56.196] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.196] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.196] | : . ' , ; ` | : .     ...)  
[08:08:56.196] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.196] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.196] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.196] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245b81570> 
[08:08:56.196] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.196] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.202] | : . ' , ; ` | : . Formals differ
[08:08:56.202] | : . ' , ; ` | : all.equal() for future ... done
[08:08:56.202] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:56.202] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:56.203] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:56.204] | : . ' , ; ` | List of future strategies:
[08:08:56.204] | : . ' , ; ` | 1. multicore:
[08:08:56.204] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:56.204] | : . ' , ; ` |    - tweaked: FALSE
[08:08:56.204] | : . ' , ; ` |    - call: plan(strategy)
[08:08:56.204] | : . ' , ; ` | List of 1
[08:08:56.204] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.204] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.204] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.204] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.204] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.204] | : . ' , ; ` |     ...)  
[08:08:56.204] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.204] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.204] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.204] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.204] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.204] | : . ' , ; ` |     ...)  
[08:08:56.204] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.204] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.207] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.208] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.208] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.208] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.208] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:56.208] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.208] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.208] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.209] | : readImmediateCondition() ...
[08:08:56.209] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:56.209] | : . Number of RDS files: 0
[08:08:56.210] | : . Returned conditions set:
[08:08:56.210] | : .  list()
[08:08:56.210] | : readImmediateCondition() ... done
[08:08:56.211] | : result() for MulticoreFuture ...
[08:08:56.211] | : result() for MulticoreFuture ... done
[08:08:56.211] | : signalConditions() ...
[08:08:56.211] | : . include = ‘immediateCondition’
[08:08:56.211] | : . exclude = 
[08:08:56.211] | : . resignal = FALSE
[08:08:56.212] | : . Number of conditions: 6
[08:08:56.212] | : .  int 6
[08:08:56.212] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.212] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.213] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.213] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.213] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.213] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.213] | : signalConditions() ... done
[08:08:56.213] | result() for MulticoreFuture ... done
[08:08:56.213] | result() for MulticoreFuture ...
[08:08:56.214] | result() for MulticoreFuture ... done
[08:08:56.214] | signalConditions() ...
[08:08:56.214] | : include = ‘immediateCondition’
[08:08:56.214] | : exclude = 
[08:08:56.214] | : resignal = FALSE
[08:08:56.214] | : Number of conditions: 6
[08:08:56.214] | :  int 6
[08:08:56.215] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.215] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.215] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.215] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.215] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.215] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.216] | signalConditions() ... done
[08:08:56.216] | relay stdout ...
[08:08:56.216] | relay stdout ... done
[08:08:56.216] | check for misuse ...
[08:08:56.218] | check for misuse ... done
[08:08:56.218] | relay conditions ...
[08:08:56.218] | : Future state: ‘finished’
[08:08:56.219] | : result() for MulticoreFuture ...
[08:08:56.219] | : result() for MulticoreFuture ... done
[08:08:56.219] | : signalConditions() ...
[08:08:56.219] | : . include = ‘condition’
[08:08:56.219] | : . exclude = ‘immediateCondition’
[08:08:56.220] | : . resignal = TRUE
[08:08:56.220] | : . Number of conditions: 6
[08:08:56.220] | : .  int 6
[08:08:56.221] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.221] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.144] | : . ' , attachPackages() ...
[08:08:56.221] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.221] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.144] | : . ' , ; packages: [n=1] ‘future’
[08:08:56.222] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.222] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.145] | : . ' , attachPackages() ... done
[08:08:56.222] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.222] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.145] | : . ' , attachPackages() ...
[08:08:56.223] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.223] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.145] | : . ' , ; packages: [n=0] 
[08:08:56.223] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.223] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.145] | : . ' , attachPackages() ... done
[08:08:56.223] | : signalConditions() ... done
[08:08:56.223] | relay conditions ... done
[08:08:56.224] value() for Future (<unnamed-16>) ... done
$a
[1] 1

[08:08:56.224] future(..., label = NULL) ...
[08:08:56.224] | lazy: FALSE
[08:08:56.224] | stdout: TRUE
[08:08:56.224] | conditions: [n=1] ‘condition’
[08:08:56.224] | gc: FALSE
[08:08:56.225] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:56.225] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:56.225] | : Searching for globals ...
[08:08:56.244] | : . globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:56.244] | : Searching for globals ... done
[08:08:56.244] | : Resolving globals: TRUE
[08:08:56.244] | : Resolving any globals that are futures ...
[08:08:56.244] | : . globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:56.244] | : Resolving any globals that are futures ... done
[08:08:56.245] | : Search for packages associated with the globals ...
[08:08:56.245] | : . Packages associated with globals: [1] ‘base’
[08:08:56.245] | : . Packages: [1] ‘base’
[08:08:56.245] | : Search for packages associated with the globals ... done
[08:08:56.245] | : Packages after dropping 'base': [0] 
[08:08:56.246] | : globals: [0] 
[08:08:56.246] | : packages: [0] 
[08:08:56.246] | getGlobalsAndPackages() ... done
[08:08:56.246] | run() for ‘Future’ (<unnamed-17>) ...
[08:08:56.246] | : state: ‘created’
[08:08:56.246] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.246] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.247] | : Using MulticoreFutureBackend ...
[08:08:56.247] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:56.247] | : . Launching futures ...
[08:08:56.247] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:56.247] | : . ' , getFutureData() ...
[08:08:56.247] | : . ' , ; getFutureCore() ...
[08:08:56.247] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:56.247] | : . ' , ; getFutureCore() ... done
[08:08:56.247] | : . ' , ; getFutureCapture() ...
[08:08:56.248] | : . ' , ; getFutureCapture() ... done
[08:08:56.248] | : . ' , ; getFutureContext() ...
[08:08:56.248] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.248] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:56.248] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.248] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:56.248] | : . ' , ; getFutureContext() ... done
[08:08:56.248] | : . ' , getFutureData() ... done
[08:08:56.249] | : . ' , requestCore(..., workers = 2) ...
[08:08:56.249] | : . ' , requestCore(..., workers = 2) ... done
[08:08:56.251] | : . ' , MulticoreFuture started
[08:08:56.251] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:56.251] | : . Launching futures ... done
[08:08:56.252] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:56.252] | : Using MulticoreFutureBackend ... done
[08:08:56.252] | run() for ‘Future’ (<unnamed-17>) ... done
[08:08:56.252] future(..., label = NULL) ... done
[08:08:56.253] value() for MulticoreFuture (<unnamed-17>) ...
[08:08:56.253] | result() for MulticoreFuture ...
[08:08:56.254] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.254] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:56.255] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.255] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.255] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.256] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:56.256] | : . ' , ; ` | New stack:
[08:08:56.256] | : . ' , ; ` | List of 1
[08:08:56.256] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.256] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.256] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:56.256] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.256] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.256] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.256] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.256] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.261] | : . ' , ; ` | Old stack:
[08:08:56.261] | : . ' , ; ` | List of 1
[08:08:56.261] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.261] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.261] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.261] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.261] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.261] | : . ' , ; ` |     ...)  
[08:08:56.261] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.261] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.261] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.261] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.261] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.261] | : . ' , ; ` |     ...)  
[08:08:56.261] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.261] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.270] | : . ' , ; ` | Not identical
[08:08:56.270] | : . ' , ; ` | all.equal() for future ...
[08:08:56.270] | : . ' , ; ` | : List of 2
[08:08:56.270] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.270] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.270] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.270] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.270] | : . ' , ; ` | :     ...)  
[08:08:56.270] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.270] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.270] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.270] | : . ' , ; ` | :     ...)  
[08:08:56.270] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.280] | : . ' , ; ` | : Formals differ
[08:08:56.280] | : . ' , ; ` | all.equal() for future ... done
[08:08:56.280] | : . ' , ; ` | Future strategies differ at level 1
[08:08:56.280] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:56.280] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:56.280] | : . ' , ; ` List of future strategies:
[08:08:56.280] | : . ' , ; ` 1. sequential:
[08:08:56.280] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:56.280] | : . ' , ; `    - tweaked: FALSE
[08:08:56.280] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.281] | : . ' , ; ` List of 1
[08:08:56.281] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.281] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.281] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:56.281] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.281] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.281] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.281] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.281] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.284] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.284] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.285] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.285] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:56.285] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.285] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.285] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:56.285] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.285] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.285] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.285] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.287] | : . ' , ; ` | : init: TRUE
[08:08:56.287] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:56.287] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:56.287] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:56.287] | : . ' , ; ` | : .  list()
[08:08:56.288] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:56.288] | : . ' , ; ` | : .  list()
[08:08:56.288] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:56.288] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:56.288] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:56.288] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:56.289] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:56.290] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:56.290] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:56.290] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.290] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:56.290] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.290] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.292] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.292] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.293] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.293] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:56.293] | : . ' , ; ` | : New stack:
[08:08:56.293] | : . ' , ; ` | : List of 1
[08:08:56.293] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.293] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.293] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.293] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.293] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.293] | : . ' , ; ` | :     ...)  
[08:08:56.293] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.293] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.293] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.293] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.293] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.293] | : . ' , ; ` | :     ...)  
[08:08:56.293] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.293] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.298] | : . ' , ; ` | : Old stack:
[08:08:56.298] | : . ' , ; ` | : List of 1
[08:08:56.298] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.298] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.298] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.298] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.298] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.298] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.298] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.298] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5632459f34a0> 
[08:08:56.298] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.298] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.298] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.302] | : . ' , ; ` | : Not identical
[08:08:56.302] | : . ' , ; ` | : all.equal() for future ...
[08:08:56.302] | : . ' , ; ` | : . List of 2
[08:08:56.302] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.302] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.302] | : . ' , ; ` | : .     ...)  
[08:08:56.302] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.302] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.302] | : . ' , ; ` | : .     ...)  
[08:08:56.302] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.302] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.302] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.302] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5632459f34a0> 
[08:08:56.302] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.302] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.308] | : . ' , ; ` | : . Formals differ
[08:08:56.308] | : . ' , ; ` | : all.equal() for future ... done
[08:08:56.308] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:56.308] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:56.308] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:56.308] | : . ' , ; ` | List of future strategies:
[08:08:56.308] | : . ' , ; ` | 1. multicore:
[08:08:56.308] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:56.308] | : . ' , ; ` |    - tweaked: FALSE
[08:08:56.308] | : . ' , ; ` |    - call: plan(strategy)
[08:08:56.309] | : . ' , ; ` | List of 1
[08:08:56.309] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.309] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.309] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.309] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.309] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.309] | : . ' , ; ` |     ...)  
[08:08:56.309] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.309] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.309] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.309] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.309] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.309] | : . ' , ; ` |     ...)  
[08:08:56.309] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.309] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.313] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.313] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.313] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.314] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.314] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:56.314] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.314] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.314] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.315] | : readImmediateCondition() ...
[08:08:56.315] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:56.315] | : . Number of RDS files: 0
[08:08:56.315] | : . Returned conditions set:
[08:08:56.316] | : .  list()
[08:08:56.316] | : readImmediateCondition() ... done
[08:08:56.317] | : result() for MulticoreFuture ...
[08:08:56.317] | : result() for MulticoreFuture ... done
[08:08:56.317] | : signalConditions() ...
[08:08:56.317] | : . include = ‘immediateCondition’
[08:08:56.317] | : . exclude = 
[08:08:56.317] | : . resignal = FALSE
[08:08:56.317] | : . Number of conditions: 6
[08:08:56.318] | : .  int 6
[08:08:56.318] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.318] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.319] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.319] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.319] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.319] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.319] | : signalConditions() ... done
[08:08:56.319] | result() for MulticoreFuture ... done
[08:08:56.319] | result() for MulticoreFuture ...
[08:08:56.320] | result() for MulticoreFuture ... done
[08:08:56.320] | signalConditions() ...
[08:08:56.320] | : include = ‘immediateCondition’
[08:08:56.320] | : exclude = 
[08:08:56.320] | : resignal = FALSE
[08:08:56.320] | : Number of conditions: 6
[08:08:56.320] | :  int 6
[08:08:56.321] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.321] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.321] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.321] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.321] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.322] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.322] | signalConditions() ... done
[08:08:56.322] | relay stdout ...
[08:08:56.322] | relay stdout ... done
[08:08:56.322] | check for misuse ...
[08:08:56.322] | check for misuse ... done
[08:08:56.322] | relay conditions ...
[08:08:56.322] | : Future state: ‘finished’
[08:08:56.323] | : result() for MulticoreFuture ...
[08:08:56.323] | : result() for MulticoreFuture ... done
[08:08:56.323] | : signalConditions() ...
[08:08:56.323] | : . include = ‘condition’
[08:08:56.323] | : . exclude = ‘immediateCondition’
[08:08:56.323] | : . resignal = TRUE
[08:08:56.323] | : . Number of conditions: 6
[08:08:56.324] | : .  int 6
[08:08:56.326] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.326] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.252] | : . ' , attachPackages() ...
[08:08:56.327] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.327] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.252] | : . ' , ; packages: [n=1] ‘future’
[08:08:56.327] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.327] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.253] | : . ' , attachPackages() ... done
[08:08:56.328] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.328] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.253] | : . ' , attachPackages() ...
[08:08:56.328] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.329] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.253] | : . ' , ; packages: [n=0] 
[08:08:56.329] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.329] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.253] | : . ' , attachPackages() ... done
[08:08:56.329] | : signalConditions() ... done
[08:08:56.330] | relay conditions ... done
[08:08:56.330] value() for MulticoreFuture (<unnamed-17>) ... done
$b
[1] 2

$a
[1] 1

[08:08:56.330] future(..., label = NULL) ...
[08:08:56.330] | lazy: FALSE
[08:08:56.330] | stdout: TRUE
[08:08:56.330] | conditions: [n=1] ‘condition’
[08:08:56.331] | gc: FALSE
[08:08:56.331] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:56.331] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:56.332] | : Searching for globals ...
[08:08:56.344] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:56.344] | : Searching for globals ... done
[08:08:56.344] | : Resolving globals: TRUE
[08:08:56.344] | : Resolving any globals that are futures ...
[08:08:56.344] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:56.344] | : Resolving any globals that are futures ... done
[08:08:56.345] | : Search for packages associated with the globals ...
[08:08:56.345] | : . Packages associated with globals: [1] ‘base’
[08:08:56.345] | : . Packages: [1] ‘base’
[08:08:56.345] | : Search for packages associated with the globals ... done
[08:08:56.345] | : Resolving futures part of globals (recursively) ...
[08:08:56.345] | : . resolve() for FutureGlobals ...
[08:08:56.346] | : . ' recursive: 99
[08:08:56.347] | : . ' Number of elements: 1
[08:08:56.347] | : . ' elements: ‘x’
[08:08:56.347] | : . ' 'obj' is list
[08:08:56.348] | : . ' resolve(obj, ...) ...
[08:08:56.348] | : . ' , resolve() for list ...
[08:08:56.348] | : . ' , ; recursive: 98
[08:08:56.348] | : . ' , ; Number of elements: 0
[08:08:56.348] | : . ' , resolve() for list ... done
[08:08:56.348] | : . ' resolve(obj, ...) ... done
[08:08:56.348] | : . ' resolved() for list ...
[08:08:56.348] | : . ' , Number of elements: 0
[08:08:56.349] | : . ' , Number of futures: 0
[08:08:56.349] | : . ' resolved() for list ... done
[08:08:56.349] | : . ' length: 0 (resolved future 1)
[08:08:56.349] | : . resolve() for FutureGlobals ... done
[08:08:56.349] | : . globals: [1] ‘x’
[08:08:56.349] | : Resolving futures part of globals (recursively) ... done
[08:08:56.349] | : Packages after dropping 'base': [0] 
[08:08:56.350] | : globals: [1] ‘x’
[08:08:56.350] | : packages: [0] 
[08:08:56.350] | getGlobalsAndPackages() ... done
[08:08:56.350] | run() for ‘Future’ (<unnamed-18>) ...
[08:08:56.350] | : state: ‘created’
[08:08:56.350] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.351] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.351] | : Using MulticoreFutureBackend ...
[08:08:56.351] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:56.351] | : . Launching futures ...
[08:08:56.351] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:56.351] | : . ' , getFutureData() ...
[08:08:56.351] | : . ' , ; getFutureCore() ...
[08:08:56.351] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:56.351] | : . ' , ; getFutureCore() ... done
[08:08:56.352] | : . ' , ; getFutureCapture() ...
[08:08:56.352] | : . ' , ; getFutureCapture() ... done
[08:08:56.352] | : . ' , ; getFutureContext() ...
[08:08:56.352] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.352] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:56.352] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.352] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:56.352] | : . ' , ; getFutureContext() ... done
[08:08:56.353] | : . ' , getFutureData() ... done
[08:08:56.353] | : . ' , requestCore(..., workers = 2) ...
[08:08:56.353] | : . ' , requestCore(..., workers = 2) ... done
[08:08:56.355] | : . ' , MulticoreFuture started
[08:08:56.355] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:56.356] | : . Launching futures ... done
[08:08:56.356] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:56.356] | : Using MulticoreFutureBackend ... done
[08:08:56.357] | run() for ‘Future’ (<unnamed-18>) ... done
[08:08:56.357] future(..., label = NULL) ... done
[08:08:56.357] value() for MulticoreFuture (<unnamed-18>) ...
[08:08:56.357] | result() for MulticoreFuture ...
[08:08:56.359] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.359] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:56.359] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.360] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.360] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.360] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:56.360] | : . ' , ; ` | New stack:
[08:08:56.361] | : . ' , ; ` | List of 1
[08:08:56.361] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.361] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.361] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:56.361] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.361] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.361] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.361] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.361] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.366] | : . ' , ; ` | Old stack:
[08:08:56.366] | : . ' , ; ` | List of 1
[08:08:56.366] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.366] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.366] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.366] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.366] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.366] | : . ' , ; ` |     ...)  
[08:08:56.366] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.366] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.366] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.366] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.366] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.366] | : . ' , ; ` |     ...)  
[08:08:56.366] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.366] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.371] | : . ' , ; ` | Not identical
[08:08:56.371] | : . ' , ; ` | all.equal() for future ...
[08:08:56.372] | : . ' , ; ` | : List of 2
[08:08:56.372] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.372] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.372] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.372] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.372] | : . ' , ; ` | :     ...)  
[08:08:56.372] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.372] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.372] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.372] | : . ' , ; ` | :     ...)  
[08:08:56.372] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.383] | : . ' , ; ` | : Formals differ
[08:08:56.383] | : . ' , ; ` | all.equal() for future ... done
[08:08:56.383] | : . ' , ; ` | Future strategies differ at level 1
[08:08:56.383] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:56.384] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:56.384] | : . ' , ; ` List of future strategies:
[08:08:56.384] | : . ' , ; ` 1. sequential:
[08:08:56.384] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:56.384] | : . ' , ; `    - tweaked: FALSE
[08:08:56.384] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.385] | : . ' , ; ` List of 1
[08:08:56.385] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.385] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.385] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:56.385] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.385] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.385] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.385] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.385] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.389] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.389] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.389] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.389] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:56.389] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.389] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.389] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:56.389] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.389] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.389] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.389] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.391] | : . ' , ; ` | : init: TRUE
[08:08:56.391] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:56.392] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:56.392] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:56.392] | : . ' , ; ` | : .  list()
[08:08:56.392] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:56.392] | : . ' , ; ` | : .  list()
[08:08:56.392] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:56.393] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:56.393] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:56.393] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:56.394] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:56.394] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:56.394] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:56.394] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.394] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:56.394] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.394] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.395] | : . ' , assign_globals() ...
[08:08:56.395] | : . ' , List of 1
[08:08:56.395] | : . ' ,  $ x: list()
[08:08:56.395] | : . ' ,  - attr(*, "where")=List of 1
[08:08:56.395] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:56.395] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:56.395] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:56.395] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:56.395] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:56.397] | : . ' , - copied ‘x’ to environment
[08:08:56.397] | : . ' , assign_globals() ... done
[08:08:56.400] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.400] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.400] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.400] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:56.400] | : . ' , ; ` | : New stack:
[08:08:56.400] | : . ' , ; ` | : List of 1
[08:08:56.400] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.400] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.400] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.400] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.400] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.400] | : . ' , ; ` | :     ...)  
[08:08:56.400] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.400] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.400] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.400] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.400] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.400] | : . ' , ; ` | :     ...)  
[08:08:56.400] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.400] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.405] | : . ' , ; ` | : Old stack:
[08:08:56.405] | : . ' , ; ` | : List of 1
[08:08:56.405] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.405] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.405] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.405] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.405] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.405] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.405] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.405] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f51f58> 
[08:08:56.405] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.405] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.405] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.409] | : . ' , ; ` | : Not identical
[08:08:56.409] | : . ' , ; ` | : all.equal() for future ...
[08:08:56.409] | : . ' , ; ` | : . List of 2
[08:08:56.409] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.409] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.409] | : . ' , ; ` | : .     ...)  
[08:08:56.409] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.409] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.409] | : . ' , ; ` | : .     ...)  
[08:08:56.409] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.409] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.409] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.409] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244f51f58> 
[08:08:56.409] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.409] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.415] | : . ' , ; ` | : . Formals differ
[08:08:56.415] | : . ' , ; ` | : all.equal() for future ... done
[08:08:56.415] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:56.415] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:56.415] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:56.416] | : . ' , ; ` | List of future strategies:
[08:08:56.416] | : . ' , ; ` | 1. multicore:
[08:08:56.416] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:56.416] | : . ' , ; ` |    - tweaked: FALSE
[08:08:56.416] | : . ' , ; ` |    - call: plan(strategy)
[08:08:56.416] | : . ' , ; ` | List of 1
[08:08:56.416] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.416] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.416] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.416] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.416] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.416] | : . ' , ; ` |     ...)  
[08:08:56.416] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.416] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.416] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.416] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.416] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.416] | : . ' , ; ` |     ...)  
[08:08:56.416] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.416] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.419] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.419] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.419] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.420] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.420] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:56.420] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.420] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.420] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.421] | : readImmediateCondition() ...
[08:08:56.421] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:56.421] | : . Number of RDS files: 0
[08:08:56.421] | : . Returned conditions set:
[08:08:56.422] | : .  list()
[08:08:56.422] | : readImmediateCondition() ... done
[08:08:56.423] | : result() for MulticoreFuture ...
[08:08:56.423] | : result() for MulticoreFuture ... done
[08:08:56.423] | : signalConditions() ...
[08:08:56.423] | : . include = ‘immediateCondition’
[08:08:56.423] | : . exclude = 
[08:08:56.423] | : . resignal = FALSE
[08:08:56.423] | : . Number of conditions: 6
[08:08:56.424] | : .  int 6
[08:08:56.424] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.424] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.425] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.425] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.425] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.425] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.425] | : signalConditions() ... done
[08:08:56.425] | result() for MulticoreFuture ... done
[08:08:56.426] | result() for MulticoreFuture ...
[08:08:56.426] | result() for MulticoreFuture ... done
[08:08:56.426] | signalConditions() ...
[08:08:56.426] | : include = ‘immediateCondition’
[08:08:56.426] | : exclude = 
[08:08:56.426] | : resignal = FALSE
[08:08:56.426] | : Number of conditions: 6
[08:08:56.426] | :  int 6
[08:08:56.427] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.427] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.427] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.427] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.428] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.428] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.428] | signalConditions() ... done
[08:08:56.428] | relay stdout ...
[08:08:56.428] | relay stdout ... done
[08:08:56.428] | check for misuse ...
[08:08:56.428] | check for misuse ... done
[08:08:56.429] | relay conditions ...
[08:08:56.429] | : Future state: ‘finished’
[08:08:56.429] | : result() for MulticoreFuture ...
[08:08:56.429] | : result() for MulticoreFuture ... done
[08:08:56.429] | : signalConditions() ...
[08:08:56.429] | : . include = ‘condition’
[08:08:56.429] | : . exclude = ‘immediateCondition’
[08:08:56.430] | : . resignal = TRUE
[08:08:56.430] | : . Number of conditions: 6
[08:08:56.430] | : .  int 6
[08:08:56.430] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.430] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.356] | : . ' , attachPackages() ...
[08:08:56.431] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.431] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.356] | : . ' , ; packages: [n=1] ‘future’
[08:08:56.431] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.431] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.357] | : . ' , attachPackages() ... done
[08:08:56.431] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.431] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.357] | : . ' , attachPackages() ...
[08:08:56.432] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.432] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.357] | : . ' , ; packages: [n=0] 
[08:08:56.432] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.432] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.358] | : . ' , attachPackages() ... done
[08:08:56.432] | : signalConditions() ... done
[08:08:56.432] | relay conditions ... done
[08:08:56.433] value() for MulticoreFuture (<unnamed-18>) ... done
$a
[1] 1

[08:08:56.433] future(..., label = NULL) ...
[08:08:56.433] | lazy: TRUE
[08:08:56.433] | stdout: TRUE
[08:08:56.433] | conditions: [n=1] ‘condition’
[08:08:56.433] | gc: FALSE
[08:08:56.433] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:56.434] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:56.434] | : Searching for globals ...
[08:08:56.449] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:56.449] | : Searching for globals ... done
[08:08:56.450] | : Resolving globals: TRUE
[08:08:56.450] | : Resolving any globals that are futures ...
[08:08:56.450] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:56.450] | : Resolving any globals that are futures ... done
[08:08:56.450] | : Search for packages associated with the globals ...
[08:08:56.450] | : . Packages associated with globals: [1] ‘base’
[08:08:56.451] | : . Packages: [1] ‘base’
[08:08:56.451] | : Search for packages associated with the globals ... done
[08:08:56.451] | : Resolving futures part of globals (recursively) ...
[08:08:56.451] | : . resolve() for FutureGlobals ...
[08:08:56.451] | : . ' recursive: 99
[08:08:56.451] | : . ' Number of elements: 1
[08:08:56.451] | : . ' elements: ‘x’
[08:08:56.452] | : . ' 'obj' is list
[08:08:56.452] | : . ' resolve(obj, ...) ...
[08:08:56.452] | : . ' , resolve() for list ...
[08:08:56.452] | : . ' , ; recursive: 98
[08:08:56.452] | : . ' , ; Number of elements: 0
[08:08:56.452] | : . ' , resolve() for list ... done
[08:08:56.452] | : . ' resolve(obj, ...) ... done
[08:08:56.452] | : . ' resolved() for list ...
[08:08:56.452] | : . ' , Number of elements: 0
[08:08:56.452] | : . ' , Number of futures: 0
[08:08:56.453] | : . ' resolved() for list ... done
[08:08:56.453] | : . ' length: 0 (resolved future 1)
[08:08:56.453] | : . resolve() for FutureGlobals ... done
[08:08:56.453] | : . globals: [1] ‘x’
[08:08:56.453] | : Resolving futures part of globals (recursively) ... done
[08:08:56.453] | : Packages after dropping 'base': [0] 
[08:08:56.453] | : globals: [1] ‘x’
[08:08:56.453] | : packages: [0] 
[08:08:56.454] | getGlobalsAndPackages() ... done
[08:08:56.454] future(..., label = NULL) ... done
[08:08:56.454] value() for Future (<unnamed-19>) ...
[08:08:56.454] | run() for ‘Future’ (<unnamed-19>) ...
[08:08:56.454] | : state: ‘created’
[08:08:56.454] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.454] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.454] | : Using MulticoreFutureBackend ...
[08:08:56.455] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:56.455] | : . Launching futures ...
[08:08:56.455] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:56.455] | : . ' , getFutureData() ...
[08:08:56.455] | : . ' , ; getFutureCore() ...
[08:08:56.455] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:56.455] | : . ' , ; getFutureCore() ... done
[08:08:56.455] | : . ' , ; getFutureCapture() ...
[08:08:56.455] | : . ' , ; getFutureCapture() ... done
[08:08:56.456] | : . ' , ; getFutureContext() ...
[08:08:56.456] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.456] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:56.456] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.456] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:56.456] | : . ' , ; getFutureContext() ... done
[08:08:56.456] | : . ' , getFutureData() ... done
[08:08:56.456] | : . ' , requestCore(..., workers = 2) ...
[08:08:56.457] | : . ' , requestCore(..., workers = 2) ... done
[08:08:56.460] | : . ' , MulticoreFuture started
[08:08:56.461] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:56.461] | : . Launching futures ... done
[08:08:56.462] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:56.463] | : Using MulticoreFutureBackend ... done
[08:08:56.463] | run() for ‘Future’ (<unnamed-19>) ... done
[08:08:56.464] | result() for MulticoreFuture ...
[08:08:56.466] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.466] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:56.467] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.468] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.468] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.469] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:56.469] | : . ' , ; ` | New stack:
[08:08:56.469] | : . ' , ; ` | List of 1
[08:08:56.469] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.469] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.469] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:56.469] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.469] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.469] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.469] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.469] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.475] | : . ' , ; ` | Old stack:
[08:08:56.475] | : . ' , ; ` | List of 1
[08:08:56.475] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.475] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.475] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.475] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.475] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.475] | : . ' , ; ` |     ...)  
[08:08:56.475] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.475] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.475] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.475] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.475] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.475] | : . ' , ; ` |     ...)  
[08:08:56.475] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.475] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.480] | : . ' , ; ` | Not identical
[08:08:56.480] | : . ' , ; ` | all.equal() for future ...
[08:08:56.480] | : . ' , ; ` | : List of 2
[08:08:56.480] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.480] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.480] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.480] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.480] | : . ' , ; ` | :     ...)  
[08:08:56.480] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.480] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.480] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.480] | : . ' , ; ` | :     ...)  
[08:08:56.480] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.487] | : . ' , ; ` | : Formals differ
[08:08:56.487] | : . ' , ; ` | all.equal() for future ... done
[08:08:56.487] | : . ' , ; ` | Future strategies differ at level 1
[08:08:56.488] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:56.488] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:56.488] | : . ' , ; ` List of future strategies:
[08:08:56.488] | : . ' , ; ` 1. sequential:
[08:08:56.488] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:56.488] | : . ' , ; `    - tweaked: FALSE
[08:08:56.488] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.489] | : . ' , ; ` List of 1
[08:08:56.489] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.489] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.489] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:56.489] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.489] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.489] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.489] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.489] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.492] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.494] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.494] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.494] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:56.494] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.494] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.494] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:56.494] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.494] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.494] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.494] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.497] | : . ' , ; ` | : init: TRUE
[08:08:56.497] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:56.497] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:56.497] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:56.497] | : . ' , ; ` | : .  list()
[08:08:56.497] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:56.497] | : . ' , ; ` | : .  list()
[08:08:56.498] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:56.498] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:56.498] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:56.498] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:56.499] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:56.499] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:56.499] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:56.499] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.500] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:56.500] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.500] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.500] | : . ' , assign_globals() ...
[08:08:56.500] | : . ' , List of 1
[08:08:56.500] | : . ' ,  $ x: list()
[08:08:56.500] | : . ' ,  - attr(*, "where")=List of 1
[08:08:56.500] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:56.500] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:56.500] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:56.500] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:56.500] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:56.503] | : . ' , - copied ‘x’ to environment
[08:08:56.503] | : . ' , assign_globals() ... done
[08:08:56.505] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.505] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.505] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.505] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:56.505] | : . ' , ; ` | : New stack:
[08:08:56.506] | : . ' , ; ` | : List of 1
[08:08:56.506] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.506] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.506] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.506] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.506] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.506] | : . ' , ; ` | :     ...)  
[08:08:56.506] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.506] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.506] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.506] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.506] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.506] | : . ' , ; ` | :     ...)  
[08:08:56.506] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.506] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.509] | : . ' , ; ` | : Old stack:
[08:08:56.509] | : . ' , ; ` | : List of 1
[08:08:56.509] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.509] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.509] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.509] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.509] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.509] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.509] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.509] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563243dca078> 
[08:08:56.509] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.509] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.509] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.512] | : . ' , ; ` | : Not identical
[08:08:56.512] | : . ' , ; ` | : all.equal() for future ...
[08:08:56.513] | : . ' , ; ` | : . List of 2
[08:08:56.513] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.513] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.513] | : . ' , ; ` | : .     ...)  
[08:08:56.513] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.513] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.513] | : . ' , ; ` | : .     ...)  
[08:08:56.513] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.513] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.513] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.513] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563243dca078> 
[08:08:56.513] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.513] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.520] | : . ' , ; ` | : . Formals differ
[08:08:56.520] | : . ' , ; ` | : all.equal() for future ... done
[08:08:56.521] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:56.521] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:56.521] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:56.521] | : . ' , ; ` | List of future strategies:
[08:08:56.521] | : . ' , ; ` | 1. multicore:
[08:08:56.521] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:56.521] | : . ' , ; ` |    - tweaked: FALSE
[08:08:56.521] | : . ' , ; ` |    - call: plan(strategy)
[08:08:56.521] | : . ' , ; ` | List of 1
[08:08:56.521] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.521] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.521] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.521] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.521] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.521] | : . ' , ; ` |     ...)  
[08:08:56.521] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.521] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.521] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.521] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.521] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.521] | : . ' , ; ` |     ...)  
[08:08:56.521] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.521] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.524] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.525] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.525] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.525] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.525] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:56.525] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.525] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.525] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.526] | : readImmediateCondition() ...
[08:08:56.527] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:56.527] | : . Number of RDS files: 0
[08:08:56.527] | : . Returned conditions set:
[08:08:56.527] | : .  list()
[08:08:56.528] | : readImmediateCondition() ... done
[08:08:56.529] | : result() for MulticoreFuture ...
[08:08:56.529] | : result() for MulticoreFuture ... done
[08:08:56.529] | : signalConditions() ...
[08:08:56.529] | : . include = ‘immediateCondition’
[08:08:56.530] | : . exclude = 
[08:08:56.530] | : . resignal = FALSE
[08:08:56.530] | : . Number of conditions: 6
[08:08:56.530] | : .  int 6
[08:08:56.531] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.531] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.531] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.532] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.532] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.532] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.532] | : signalConditions() ... done
[08:08:56.532] | result() for MulticoreFuture ... done
[08:08:56.532] | result() for MulticoreFuture ...
[08:08:56.532] | result() for MulticoreFuture ... done
[08:08:56.533] | signalConditions() ...
[08:08:56.533] | : include = ‘immediateCondition’
[08:08:56.533] | : exclude = 
[08:08:56.533] | : resignal = FALSE
[08:08:56.533] | : Number of conditions: 6
[08:08:56.533] | :  int 6
[08:08:56.534] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.534] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.534] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.534] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.534] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.534] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.534] | signalConditions() ... done
[08:08:56.535] | relay stdout ...
[08:08:56.535] | relay stdout ... done
[08:08:56.535] | check for misuse ...
[08:08:56.535] | check for misuse ... done
[08:08:56.535] | relay conditions ...
[08:08:56.535] | : Future state: ‘finished’
[08:08:56.535] | : result() for MulticoreFuture ...
[08:08:56.536] | : result() for MulticoreFuture ... done
[08:08:56.536] | : signalConditions() ...
[08:08:56.536] | : . include = ‘condition’
[08:08:56.536] | : . exclude = ‘immediateCondition’
[08:08:56.536] | : . resignal = TRUE
[08:08:56.536] | : . Number of conditions: 6
[08:08:56.536] | : .  int 6
[08:08:56.537] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.537] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.461] | : . ' , attachPackages() ...
[08:08:56.537] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.537] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.462] | : . ' , ; packages: [n=1] ‘future’
[08:08:56.537] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.537] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.463] | : . ' , attachPackages() ... done
[08:08:56.538] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.538] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.463] | : . ' , attachPackages() ...
[08:08:56.538] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.538] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.464] | : . ' , ; packages: [n=0] 
[08:08:56.538] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.538] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.464] | : . ' , attachPackages() ... done
[08:08:56.539] | : signalConditions() ... done
[08:08:56.539] | relay conditions ... done
[08:08:56.539] value() for Future (<unnamed-19>) ... done
$a
[1] 1

[08:08:56.539] future(..., label = NULL) ...
[08:08:56.539] | lazy: FALSE
[08:08:56.539] | stdout: TRUE
[08:08:56.540] | conditions: [n=1] ‘condition’
[08:08:56.540] | gc: FALSE
[08:08:56.540] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:56.540] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:56.540] | : Searching for globals ...
[08:08:56.555] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:56.555] | : Searching for globals ... done
[08:08:56.555] | : Resolving globals: TRUE
[08:08:56.556] | : Resolving any globals that are futures ...
[08:08:56.556] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:56.556] | : Resolving any globals that are futures ... done
[08:08:56.556] | : Search for packages associated with the globals ...
[08:08:56.556] | : . Packages associated with globals: [1] ‘base’
[08:08:56.557] | : . Packages: [1] ‘base’
[08:08:56.557] | : Search for packages associated with the globals ... done
[08:08:56.557] | : Resolving futures part of globals (recursively) ...
[08:08:56.557] | : . resolve() for FutureGlobals ...
[08:08:56.557] | : . ' recursive: 99
[08:08:56.557] | : . ' Number of elements: 1
[08:08:56.557] | : . ' elements: ‘x’
[08:08:56.558] | : . ' 'obj' is list
[08:08:56.558] | : . ' resolve(obj, ...) ...
[08:08:56.558] | : . ' , resolve() for list ...
[08:08:56.558] | : . ' , ; recursive: 98
[08:08:56.558] | : . ' , ; Number of elements: 0
[08:08:56.558] | : . ' , resolve() for list ... done
[08:08:56.558] | : . ' resolve(obj, ...) ... done
[08:08:56.558] | : . ' resolved() for list ...
[08:08:56.558] | : . ' , Number of elements: 0
[08:08:56.559] | : . ' , Number of futures: 0
[08:08:56.559] | : . ' resolved() for list ... done
[08:08:56.559] | : . ' length: 0 (resolved future 1)
[08:08:56.559] | : . resolve() for FutureGlobals ... done
[08:08:56.559] | : . globals: [1] ‘x’
[08:08:56.559] | : Resolving futures part of globals (recursively) ... done
[08:08:56.559] | : Packages after dropping 'base': [0] 
[08:08:56.559] | : globals: [1] ‘x’
[08:08:56.559] | : packages: [0] 
[08:08:56.560] | getGlobalsAndPackages() ... done
[08:08:56.560] | run() for ‘Future’ (<unnamed-20>) ...
[08:08:56.560] | : state: ‘created’
[08:08:56.560] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.560] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.560] | : Using MulticoreFutureBackend ...
[08:08:56.560] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:08:56.561] | : . Launching futures ...
[08:08:56.561] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:56.561] | : . ' , getFutureData() ...
[08:08:56.561] | : . ' , ; getFutureCore() ...
[08:08:56.561] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:56.561] | : . ' , ; getFutureCore() ... done
[08:08:56.561] | : . ' , ; getFutureCapture() ...
[08:08:56.561] | : . ' , ; getFutureCapture() ... done
[08:08:56.562] | : . ' , ; getFutureContext() ...
[08:08:56.562] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.562] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:56.562] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.562] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:56.562] | : . ' , ; getFutureContext() ... done
[08:08:56.562] | : . ' , getFutureData() ... done
[08:08:56.562] | : . ' , requestCore(..., workers = 2) ...
[08:08:56.563] | : . ' , requestCore(..., workers = 2) ... done
[08:08:56.565] | : . ' , MulticoreFuture started
[08:08:56.565] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:56.565] | : . Launching futures ... done
[08:08:56.566] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:56.566] | : Using MulticoreFutureBackend ... done
[08:08:56.566] | run() for ‘Future’ (<unnamed-20>) ... done
[08:08:56.566] future(..., label = NULL) ... done
[08:08:56.567] value() for MulticoreFuture (<unnamed-20>) ...
[08:08:56.567] | result() for MulticoreFuture ...
[08:08:56.568] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.568] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:56.569] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.569] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.569] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.570] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:56.570] | : . ' , ; ` | New stack:
[08:08:56.570] | : . ' , ; ` | List of 1
[08:08:56.570] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.570] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.570] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:56.570] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.570] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.570] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.570] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.570] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.575] | : . ' , ; ` | Old stack:
[08:08:56.575] | : . ' , ; ` | List of 1
[08:08:56.575] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.575] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.575] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.575] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.575] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.575] | : . ' , ; ` |     ...)  
[08:08:56.575] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.575] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.575] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.575] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.575] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.575] | : . ' , ; ` |     ...)  
[08:08:56.575] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.575] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.587] | : . ' , ; ` | Not identical
[08:08:56.587] | : . ' , ; ` | all.equal() for future ...
[08:08:56.588] | : . ' , ; ` | : List of 2
[08:08:56.588] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.588] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.588] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.588] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.588] | : . ' , ; ` | :     ...)  
[08:08:56.588] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.588] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.588] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.588] | : . ' , ; ` | :     ...)  
[08:08:56.588] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.595] | : . ' , ; ` | : Formals differ
[08:08:56.595] | : . ' , ; ` | all.equal() for future ... done
[08:08:56.595] | : . ' , ; ` | Future strategies differ at level 1
[08:08:56.595] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:56.595] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:56.595] | : . ' , ; ` List of future strategies:
[08:08:56.595] | : . ' , ; ` 1. sequential:
[08:08:56.595] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:56.595] | : . ' , ; `    - tweaked: FALSE
[08:08:56.595] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.596] | : . ' , ; ` List of 1
[08:08:56.596] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.596] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.596] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:56.596] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.596] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.596] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.596] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.596] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.599] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.599] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.599] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.600] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:56.600] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.600] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.600] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:56.600] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.600] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.600] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.600] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.602] | : . ' , ; ` | : init: TRUE
[08:08:56.602] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:56.602] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:56.602] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:56.602] | : . ' , ; ` | : .  list()
[08:08:56.603] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:56.603] | : . ' , ; ` | : .  list()
[08:08:56.603] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:56.603] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:56.603] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:56.603] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:56.606] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:56.606] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:56.606] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:56.606] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.607] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:56.607] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.607] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.607] | : . ' , assign_globals() ...
[08:08:56.607] | : . ' , List of 1
[08:08:56.607] | : . ' ,  $ x: list()
[08:08:56.607] | : . ' ,  - attr(*, "where")=List of 1
[08:08:56.607] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:56.607] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:56.607] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:56.607] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:56.607] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:56.610] | : . ' , - copied ‘x’ to environment
[08:08:56.610] | : . ' , assign_globals() ... done
[08:08:56.612] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.613] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.613] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.613] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:56.613] | : . ' , ; ` | : New stack:
[08:08:56.613] | : . ' , ; ` | : List of 1
[08:08:56.613] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.613] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.613] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.613] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.613] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.613] | : . ' , ; ` | :     ...)  
[08:08:56.613] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.613] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.613] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.613] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.613] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.613] | : . ' , ; ` | :     ...)  
[08:08:56.613] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.613] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.616] | : . ' , ; ` | : Old stack:
[08:08:56.616] | : . ' , ; ` | : List of 1
[08:08:56.616] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.616] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.616] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.616] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.616] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.616] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.616] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.616] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245f1b028> 
[08:08:56.616] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.616] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.616] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.620] | : . ' , ; ` | : Not identical
[08:08:56.620] | : . ' , ; ` | : all.equal() for future ...
[08:08:56.620] | : . ' , ; ` | : . List of 2
[08:08:56.620] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.620] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.620] | : . ' , ; ` | : .     ...)  
[08:08:56.620] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.620] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.620] | : . ' , ; ` | : .     ...)  
[08:08:56.620] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.620] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.620] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.620] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245f1b028> 
[08:08:56.620] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.620] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.627] | : . ' , ; ` | : . Formals differ
[08:08:56.627] | : . ' , ; ` | : all.equal() for future ... done
[08:08:56.628] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:56.628] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:56.628] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:56.628] | : . ' , ; ` | List of future strategies:
[08:08:56.628] | : . ' , ; ` | 1. multicore:
[08:08:56.628] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:56.628] | : . ' , ; ` |    - tweaked: FALSE
[08:08:56.628] | : . ' , ; ` |    - call: plan(strategy)
[08:08:56.628] | : . ' , ; ` | List of 1
[08:08:56.628] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.628] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.628] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.628] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.628] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.628] | : . ' , ; ` |     ...)  
[08:08:56.628] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.628] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.628] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.628] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.628] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.628] | : . ' , ; ` |     ...)  
[08:08:56.628] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.628] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.632] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.632] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.632] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.632] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.632] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:56.632] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.632] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.632] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.633] | : readImmediateCondition() ...
[08:08:56.633] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:56.634] | : . Number of RDS files: 0
[08:08:56.634] | : . Returned conditions set:
[08:08:56.634] | : .  list()
[08:08:56.635] | : readImmediateCondition() ... done
[08:08:56.635] | : result() for MulticoreFuture ...
[08:08:56.635] | : result() for MulticoreFuture ... done
[08:08:56.635] | : signalConditions() ...
[08:08:56.635] | : . include = ‘immediateCondition’
[08:08:56.636] | : . exclude = 
[08:08:56.636] | : . resignal = FALSE
[08:08:56.636] | : . Number of conditions: 6
[08:08:56.636] | : .  int 6
[08:08:56.637] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.637] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.637] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.637] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.637] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.637] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.638] | : signalConditions() ... done
[08:08:56.638] | result() for MulticoreFuture ... done
[08:08:56.638] | result() for MulticoreFuture ...
[08:08:56.638] | result() for MulticoreFuture ... done
[08:08:56.638] | signalConditions() ...
[08:08:56.638] | : include = ‘immediateCondition’
[08:08:56.638] | : exclude = 
[08:08:56.639] | : resignal = FALSE
[08:08:56.639] | : Number of conditions: 6
[08:08:56.639] | :  int 6
[08:08:56.642] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.642] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.642] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.643] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.643] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.643] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.643] | signalConditions() ... done
[08:08:56.644] | relay stdout ...
[08:08:56.644] | relay stdout ... done
[08:08:56.644] | check for misuse ...
[08:08:56.644] | check for misuse ... done
[08:08:56.645] | relay conditions ...
[08:08:56.645] | : Future state: ‘finished’
[08:08:56.645] | : result() for MulticoreFuture ...
[08:08:56.645] | : result() for MulticoreFuture ... done
[08:08:56.645] | : signalConditions() ...
[08:08:56.646] | : . include = ‘condition’
[08:08:56.646] | : . exclude = ‘immediateCondition’
[08:08:56.646] | : . resignal = TRUE
[08:08:56.646] | : . Number of conditions: 6
[08:08:56.646] | : .  int 6
[08:08:56.647] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.647] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.566] | : . ' , attachPackages() ...
[08:08:56.647] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.648] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.566] | : . ' , ; packages: [n=1] ‘future’
[08:08:56.648] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.648] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.567] | : . ' , attachPackages() ... done
[08:08:56.648] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.648] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.567] | : . ' , attachPackages() ...
[08:08:56.648] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.649] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.567] | : . ' , ; packages: [n=0] 
[08:08:56.649] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.649] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.567] | : . ' , attachPackages() ... done
[08:08:56.649] | : signalConditions() ... done
[08:08:56.649] | relay conditions ... done
[08:08:56.649] value() for MulticoreFuture (<unnamed-20>) ... done
$a
[1] 1

[08:08:56.649] future(..., label = NULL) ...
[08:08:56.650] | lazy: FALSE
[08:08:56.650] | stdout: TRUE
[08:08:56.650] | conditions: [n=1] ‘condition’
[08:08:56.650] | gc: FALSE
[08:08:56.650] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:56.650] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:56.651] | : Searching for globals ...
[08:08:56.667] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:56.667] | : Searching for globals ... done
[08:08:56.667] | : Resolving globals: TRUE
[08:08:56.668] | : Resolving any globals that are futures ...
[08:08:56.668] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:56.668] | : Resolving any globals that are futures ... done
[08:08:56.668] | : Search for packages associated with the globals ...
[08:08:56.668] | : . Packages associated with globals: [1] ‘base’
[08:08:56.669] | : . Packages: [1] ‘base’
[08:08:56.669] | : Search for packages associated with the globals ... done
[08:08:56.669] | : Resolving futures part of globals (recursively) ...
[08:08:56.669] | : . resolve() for FutureGlobals ...
[08:08:56.669] | : . ' recursive: 99
[08:08:56.669] | : . ' Number of elements: 1
[08:08:56.669] | : . ' elements: ‘x’
[08:08:56.670] | : . ' 'obj' is list
[08:08:56.670] | : . ' resolve(obj, ...) ...
[08:08:56.670] | : . ' , resolve() for list ...
[08:08:56.670] | : . ' , ; recursive: 98
[08:08:56.670] | : . ' , ; Number of elements: 0
[08:08:56.670] | : . ' , resolve() for list ... done
[08:08:56.670] | : . ' resolve(obj, ...) ... done
[08:08:56.670] | : . ' resolved() for list ...
[08:08:56.670] | : . ' , Number of elements: 0
[08:08:56.671] | : . ' , Number of futures: 0
[08:08:56.671] | : . ' resolved() for list ... done
[08:08:56.671] | : . ' length: 0 (resolved future 1)
[08:08:56.671] | : . resolve() for FutureGlobals ... done
[08:08:56.671] | : . globals: [1] ‘x’
[08:08:56.671] | : Resolving futures part of globals (recursively) ... done
[08:08:56.671] | : Packages after dropping 'base': [0] 
[08:08:56.671] | : globals: [1] ‘x’
[08:08:56.671] | : packages: [0] 
[08:08:56.672] | getGlobalsAndPackages() ... done
[08:08:56.672] | run() for ‘Future’ (<unnamed-21>) ...
[08:08:56.672] | : state: ‘created’
[08:08:56.672] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.672] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.672] | : Using MulticoreFutureBackend ...
[08:08:56.672] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:56.673] | : . Launching futures ...
[08:08:56.673] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:56.673] | : . ' , getFutureData() ...
[08:08:56.673] | : . ' , ; getFutureCore() ...
[08:08:56.673] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:56.673] | : . ' , ; getFutureCore() ... done
[08:08:56.673] | : . ' , ; getFutureCapture() ...
[08:08:56.673] | : . ' , ; getFutureCapture() ... done
[08:08:56.673] | : . ' , ; getFutureContext() ...
[08:08:56.674] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.674] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:56.674] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.674] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:56.674] | : . ' , ; getFutureContext() ... done
[08:08:56.674] | : . ' , getFutureData() ... done
[08:08:56.674] | : . ' , requestCore(..., workers = 2) ...
[08:08:56.675] | : . ' , requestCore(..., workers = 2) ... done
[08:08:56.677] | : . ' , MulticoreFuture started
[08:08:56.677] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:56.677] | : . Launching futures ... done
[08:08:56.678] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:56.678] | : Using MulticoreFutureBackend ... done
[08:08:56.678] | run() for ‘Future’ (<unnamed-21>) ... done
[08:08:56.678] future(..., label = NULL) ... done
[08:08:56.679] value() for MulticoreFuture (<unnamed-21>) ...
[08:08:56.679] | result() for MulticoreFuture ...
[08:08:56.680] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.681] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:56.681] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.681] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.682] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.682] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:56.682] | : . ' , ; ` | New stack:
[08:08:56.682] | : . ' , ; ` | List of 1
[08:08:56.682] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.682] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.682] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:56.682] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.682] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.682] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.682] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.682] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.687] | : . ' , ; ` | Old stack:
[08:08:56.687] | : . ' , ; ` | List of 1
[08:08:56.687] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.687] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.687] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.687] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.687] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.687] | : . ' , ; ` |     ...)  
[08:08:56.687] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.687] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.687] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.687] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.687] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.687] | : . ' , ; ` |     ...)  
[08:08:56.687] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.687] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.698] | : . ' , ; ` | Not identical
[08:08:56.698] | : . ' , ; ` | all.equal() for future ...
[08:08:56.698] | : . ' , ; ` | : List of 2
[08:08:56.698] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.698] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.698] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.698] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.698] | : . ' , ; ` | :     ...)  
[08:08:56.698] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.698] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.698] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.698] | : . ' , ; ` | :     ...)  
[08:08:56.698] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.707] | : . ' , ; ` | : Formals differ
[08:08:56.707] | : . ' , ; ` | all.equal() for future ... done
[08:08:56.707] | : . ' , ; ` | Future strategies differ at level 1
[08:08:56.708] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:56.708] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:56.708] | : . ' , ; ` List of future strategies:
[08:08:56.708] | : . ' , ; ` 1. sequential:
[08:08:56.708] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:56.708] | : . ' , ; `    - tweaked: FALSE
[08:08:56.708] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.709] | : . ' , ; ` List of 1
[08:08:56.709] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.709] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.709] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:56.709] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.709] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.709] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.709] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.709] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.712] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.712] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.712] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.712] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:56.712] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.712] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.712] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:56.712] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.712] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.712] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.712] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.715] | : . ' , ; ` | : init: TRUE
[08:08:56.715] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:56.715] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:56.715] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:56.715] | : . ' , ; ` | : .  list()
[08:08:56.715] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:56.715] | : . ' , ; ` | : .  list()
[08:08:56.716] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:56.716] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:56.716] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:56.716] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:56.717] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:56.717] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:56.717] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:56.717] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.718] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:56.718] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.718] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.718] | : . ' , assign_globals() ...
[08:08:56.718] | : . ' , List of 1
[08:08:56.718] | : . ' ,  $ x: list()
[08:08:56.718] | : . ' ,  - attr(*, "where")=List of 1
[08:08:56.718] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:56.718] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:56.718] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:56.718] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:56.718] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:56.723] | : . ' , - copied ‘x’ to environment
[08:08:56.723] | : . ' , assign_globals() ... done
[08:08:56.725] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.725] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.726] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.726] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:56.726] | : . ' , ; ` | : New stack:
[08:08:56.726] | : . ' , ; ` | : List of 1
[08:08:56.726] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.726] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.726] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.726] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.726] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.726] | : . ' , ; ` | :     ...)  
[08:08:56.726] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.726] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.726] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.726] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.726] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.726] | : . ' , ; ` | :     ...)  
[08:08:56.726] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.726] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.729] | : . ' , ; ` | : Old stack:
[08:08:56.729] | : . ' , ; ` | : List of 1
[08:08:56.729] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.729] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.729] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.729] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.729] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.729] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.729] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.729] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245afcb28> 
[08:08:56.729] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.729] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.729] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.733] | : . ' , ; ` | : Not identical
[08:08:56.733] | : . ' , ; ` | : all.equal() for future ...
[08:08:56.733] | : . ' , ; ` | : . List of 2
[08:08:56.733] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.733] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.733] | : . ' , ; ` | : .     ...)  
[08:08:56.733] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.733] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.733] | : . ' , ; ` | : .     ...)  
[08:08:56.733] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.733] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.733] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.733] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245afcb28> 
[08:08:56.733] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.733] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.740] | : . ' , ; ` | : . Formals differ
[08:08:56.740] | : . ' , ; ` | : all.equal() for future ... done
[08:08:56.740] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:56.741] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:56.741] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:56.741] | : . ' , ; ` | List of future strategies:
[08:08:56.741] | : . ' , ; ` | 1. multicore:
[08:08:56.741] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:56.741] | : . ' , ; ` |    - tweaked: FALSE
[08:08:56.741] | : . ' , ; ` |    - call: plan(strategy)
[08:08:56.741] | : . ' , ; ` | List of 1
[08:08:56.741] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.741] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.741] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.741] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.741] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.741] | : . ' , ; ` |     ...)  
[08:08:56.741] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.741] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.741] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.741] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.741] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.741] | : . ' , ; ` |     ...)  
[08:08:56.741] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.741] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.745] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.745] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.745] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.745] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.745] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:56.745] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.745] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.746] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.746] | : readImmediateCondition() ...
[08:08:56.746] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:56.747] | : . Number of RDS files: 0
[08:08:56.747] | : . Returned conditions set:
[08:08:56.747] | : .  list()
[08:08:56.748] | : readImmediateCondition() ... done
[08:08:56.748] | : result() for MulticoreFuture ...
[08:08:56.748] | : result() for MulticoreFuture ... done
[08:08:56.748] | : signalConditions() ...
[08:08:56.749] | : . include = ‘immediateCondition’
[08:08:56.749] | : . exclude = 
[08:08:56.749] | : . resignal = FALSE
[08:08:56.749] | : . Number of conditions: 6
[08:08:56.749] | : .  int 6
[08:08:56.750] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.750] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.750] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.750] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.750] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.751] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.751] | : signalConditions() ... done
[08:08:56.751] | result() for MulticoreFuture ... done
[08:08:56.751] | result() for MulticoreFuture ...
[08:08:56.751] | result() for MulticoreFuture ... done
[08:08:56.751] | signalConditions() ...
[08:08:56.751] | : include = ‘immediateCondition’
[08:08:56.751] | : exclude = 
[08:08:56.752] | : resignal = FALSE
[08:08:56.752] | : Number of conditions: 6
[08:08:56.752] | :  int 6
[08:08:56.752] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.753] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.753] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.753] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.753] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.753] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.753] | signalConditions() ... done
[08:08:56.753] | relay stdout ...
[08:08:56.754] | relay stdout ... done
[08:08:56.754] | check for misuse ...
[08:08:56.754] | check for misuse ... done
[08:08:56.754] | relay conditions ...
[08:08:56.754] | : Future state: ‘finished’
[08:08:56.754] | : result() for MulticoreFuture ...
[08:08:56.754] | : result() for MulticoreFuture ... done
[08:08:56.755] | : signalConditions() ...
[08:08:56.755] | : . include = ‘condition’
[08:08:56.755] | : . exclude = ‘immediateCondition’
[08:08:56.755] | : . resignal = TRUE
[08:08:56.757] | : . Number of conditions: 6
[08:08:56.757] | : .  int 6
[08:08:56.758] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.759] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.678] | : . ' , attachPackages() ...
[08:08:56.759] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.759] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.678] | : . ' , ; packages: [n=1] ‘future’
[08:08:56.760] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.760] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.679] | : . ' , attachPackages() ... done
[08:08:56.760] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.760] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.679] | : . ' , attachPackages() ...
[08:08:56.761] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.761] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.679] | : . ' , ; packages: [n=0] 
[08:08:56.761] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.761] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.679] | : . ' , attachPackages() ... done
[08:08:56.761] | : signalConditions() ... done
[08:08:56.762] | relay conditions ... done
[08:08:56.762] value() for MulticoreFuture (<unnamed-21>) ... done
$a
[1] 1

[08:08:56.762] future(..., label = NULL) ...
[08:08:56.762] | lazy: TRUE
[08:08:56.762] | stdout: TRUE
[08:08:56.762] | conditions: [n=1] ‘condition’
[08:08:56.763] | gc: FALSE
[08:08:56.763] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:56.763] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:56.763] | : Searching for globals ...
[08:08:56.779] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:56.779] | : Searching for globals ... done
[08:08:56.779] | : Resolving globals: TRUE
[08:08:56.780] | : Resolving any globals that are futures ...
[08:08:56.780] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:56.780] | : Resolving any globals that are futures ... done
[08:08:56.780] | : Search for packages associated with the globals ...
[08:08:56.780] | : . Packages associated with globals: [1] ‘base’
[08:08:56.781] | : . Packages: [1] ‘base’
[08:08:56.781] | : Search for packages associated with the globals ... done
[08:08:56.781] | : Resolving futures part of globals (recursively) ...
[08:08:56.781] | : . resolve() for FutureGlobals ...
[08:08:56.781] | : . ' recursive: 99
[08:08:56.781] | : . ' Number of elements: 1
[08:08:56.782] | : . ' elements: ‘x’
[08:08:56.782] | : . ' 'obj' is list
[08:08:56.782] | : . ' resolve(obj, ...) ...
[08:08:56.782] | : . ' , resolve() for list ...
[08:08:56.782] | : . ' , ; recursive: 98
[08:08:56.782] | : . ' , ; Number of elements: 0
[08:08:56.782] | : . ' , resolve() for list ... done
[08:08:56.782] | : . ' resolve(obj, ...) ... done
[08:08:56.782] | : . ' resolved() for list ...
[08:08:56.783] | : . ' , Number of elements: 0
[08:08:56.783] | : . ' , Number of futures: 0
[08:08:56.783] | : . ' resolved() for list ... done
[08:08:56.783] | : . ' length: 0 (resolved future 1)
[08:08:56.783] | : . resolve() for FutureGlobals ... done
[08:08:56.783] | : . globals: [1] ‘x’
[08:08:56.783] | : Resolving futures part of globals (recursively) ... done
[08:08:56.783] | : Packages after dropping 'base': [0] 
[08:08:56.783] | : globals: [1] ‘x’
[08:08:56.784] | : packages: [0] 
[08:08:56.784] | getGlobalsAndPackages() ... done
[08:08:56.784] future(..., label = NULL) ... done
[08:08:56.784] value() for Future (<unnamed-22>) ...
[08:08:56.784] | run() for ‘Future’ (<unnamed-22>) ...
[08:08:56.784] | : state: ‘created’
[08:08:56.784] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.785] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.785] | : Using MulticoreFutureBackend ...
[08:08:56.785] | : . Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:08:56.785] | : . Launching futures ...
[08:08:56.785] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:56.785] | : . ' , getFutureData() ...
[08:08:56.785] | : . ' , ; getFutureCore() ...
[08:08:56.785] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:56.785] | : . ' , ; getFutureCore() ... done
[08:08:56.786] | : . ' , ; getFutureCapture() ...
[08:08:56.786] | : . ' , ; getFutureCapture() ... done
[08:08:56.786] | : . ' , ; getFutureContext() ...
[08:08:56.786] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.786] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:56.786] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.786] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:56.786] | : . ' , ; getFutureContext() ... done
[08:08:56.787] | : . ' , getFutureData() ... done
[08:08:56.787] | : . ' , requestCore(..., workers = 2) ...
[08:08:56.787] | : . ' , requestCore(..., workers = 2) ... done
[08:08:56.789] | : . ' , MulticoreFuture started
[08:08:56.789] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:56.790] | : . Launching futures ... done
[08:08:56.790] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:56.790] | : Using MulticoreFutureBackend ... done
[08:08:56.790] | run() for ‘Future’ (<unnamed-22>) ... done
[08:08:56.791] | result() for MulticoreFuture ...
[08:08:56.792] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.793] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:56.793] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.793] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.794] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.794] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:56.794] | : . ' , ; ` | New stack:
[08:08:56.794] | : . ' , ; ` | List of 1
[08:08:56.794] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.794] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.794] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:56.794] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.794] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.794] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.794] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.794] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.799] | : . ' , ; ` | Old stack:
[08:08:56.799] | : . ' , ; ` | List of 1
[08:08:56.799] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.799] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.799] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.799] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.799] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.799] | : . ' , ; ` |     ...)  
[08:08:56.799] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.799] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.799] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.799] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.799] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.799] | : . ' , ; ` |     ...)  
[08:08:56.799] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.799] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.805] | : . ' , ; ` | Not identical
[08:08:56.805] | : . ' , ; ` | all.equal() for future ...
[08:08:56.805] | : . ' , ; ` | : List of 2
[08:08:56.805] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.805] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.805] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.805] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.805] | : . ' , ; ` | :     ...)  
[08:08:56.805] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.805] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.805] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.805] | : . ' , ; ` | :     ...)  
[08:08:56.805] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.819] | : . ' , ; ` | : Formals differ
[08:08:56.819] | : . ' , ; ` | all.equal() for future ... done
[08:08:56.819] | : . ' , ; ` | Future strategies differ at level 1
[08:08:56.819] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:56.819] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:56.819] | : . ' , ; ` List of future strategies:
[08:08:56.819] | : . ' , ; ` 1. sequential:
[08:08:56.819] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:56.819] | : . ' , ; `    - tweaked: FALSE
[08:08:56.819] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.820] | : . ' , ; ` List of 1
[08:08:56.820] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.820] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.820] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:56.820] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.820] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.820] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.820] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.820] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.823] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.823] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.823] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.824] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:56.824] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.824] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.824] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:56.824] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.824] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.824] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.824] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.826] | : . ' , ; ` | : init: TRUE
[08:08:56.826] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:56.826] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:56.826] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:56.826] | : . ' , ; ` | : .  list()
[08:08:56.827] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:56.827] | : . ' , ; ` | : .  list()
[08:08:56.827] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:56.827] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:56.827] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:56.827] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:56.828] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:56.828] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:56.828] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:56.829] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.829] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:56.829] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.829] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.829] | : . ' , assign_globals() ...
[08:08:56.829] | : . ' , List of 1
[08:08:56.829] | : . ' ,  $ x: list()
[08:08:56.829] | : . ' ,  - attr(*, "where")=List of 1
[08:08:56.829] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:56.829] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:56.829] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:56.829] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:56.829] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:56.832] | : . ' , - copied ‘x’ to environment
[08:08:56.834] | : . ' , assign_globals() ... done
[08:08:56.836] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.836] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.837] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.837] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:56.837] | : . ' , ; ` | : New stack:
[08:08:56.837] | : . ' , ; ` | : List of 1
[08:08:56.837] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.837] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.837] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.837] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.837] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.837] | : . ' , ; ` | :     ...)  
[08:08:56.837] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.837] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.837] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.837] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.837] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.837] | : . ' , ; ` | :     ...)  
[08:08:56.837] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.837] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.840] | : . ' , ; ` | : Old stack:
[08:08:56.841] | : . ' , ; ` | : List of 1
[08:08:56.841] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.841] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.841] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.841] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.841] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.841] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.841] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.841] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245960120> 
[08:08:56.841] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.841] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.841] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.844] | : . ' , ; ` | : Not identical
[08:08:56.844] | : . ' , ; ` | : all.equal() for future ...
[08:08:56.844] | : . ' , ; ` | : . List of 2
[08:08:56.844] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.844] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.844] | : . ' , ; ` | : .     ...)  
[08:08:56.844] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.844] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.844] | : . ' , ; ` | : .     ...)  
[08:08:56.844] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.844] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.844] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.844] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245960120> 
[08:08:56.844] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.844] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.850] | : . ' , ; ` | : . Formals differ
[08:08:56.850] | : . ' , ; ` | : all.equal() for future ... done
[08:08:56.850] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:56.850] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:56.850] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:56.850] | : . ' , ; ` | List of future strategies:
[08:08:56.850] | : . ' , ; ` | 1. multicore:
[08:08:56.850] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:56.850] | : . ' , ; ` |    - tweaked: FALSE
[08:08:56.850] | : . ' , ; ` |    - call: plan(strategy)
[08:08:56.851] | : . ' , ; ` | List of 1
[08:08:56.851] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.851] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.851] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.851] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.851] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.851] | : . ' , ; ` |     ...)  
[08:08:56.851] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.851] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.851] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.851] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.851] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.851] | : . ' , ; ` |     ...)  
[08:08:56.851] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.851] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.856] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.856] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.856] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.856] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.856] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:56.856] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.857] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.857] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.857] | : readImmediateCondition() ...
[08:08:56.858] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:56.858] | : . Number of RDS files: 0
[08:08:56.858] | : . Returned conditions set:
[08:08:56.858] | : .  list()
[08:08:56.859] | : readImmediateCondition() ... done
[08:08:56.859] | : result() for MulticoreFuture ...
[08:08:56.859] | : result() for MulticoreFuture ... done
[08:08:56.859] | : signalConditions() ...
[08:08:56.860] | : . include = ‘immediateCondition’
[08:08:56.860] | : . exclude = 
[08:08:56.860] | : . resignal = FALSE
[08:08:56.860] | : . Number of conditions: 6
[08:08:56.860] | : .  int 6
[08:08:56.861] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.861] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.861] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.861] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.861] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.862] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.862] | : signalConditions() ... done
[08:08:56.862] | result() for MulticoreFuture ... done
[08:08:56.862] | result() for MulticoreFuture ...
[08:08:56.862] | result() for MulticoreFuture ... done
[08:08:56.862] | signalConditions() ...
[08:08:56.862] | : include = ‘immediateCondition’
[08:08:56.863] | : exclude = 
[08:08:56.863] | : resignal = FALSE
[08:08:56.863] | : Number of conditions: 6
[08:08:56.863] | :  int 6
[08:08:56.864] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.864] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.864] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.864] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.864] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.864] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.864] | signalConditions() ... done
[08:08:56.865] | relay stdout ...
[08:08:56.865] | relay stdout ... done
[08:08:56.865] | check for misuse ...
[08:08:56.865] | check for misuse ... done
[08:08:56.865] | relay conditions ...
[08:08:56.865] | : Future state: ‘finished’
[08:08:56.865] | : result() for MulticoreFuture ...
[08:08:56.866] | : result() for MulticoreFuture ... done
[08:08:56.866] | : signalConditions() ...
[08:08:56.866] | : . include = ‘condition’
[08:08:56.866] | : . exclude = ‘immediateCondition’
[08:08:56.866] | : . resignal = TRUE
[08:08:56.866] | : . Number of conditions: 6
[08:08:56.866] | : .  int 6
[08:08:56.867] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.867] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.790] | : . ' , attachPackages() ...
[08:08:56.867] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.867] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.790] | : . ' , ; packages: [n=1] ‘future’
[08:08:56.867] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.868] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.791] | : . ' , attachPackages() ... done
[08:08:56.868] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.868] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.791] | : . ' , attachPackages() ...
[08:08:56.868] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.868] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.791] | : . ' , ; packages: [n=0] 
[08:08:56.870] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.871] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.791] | : . ' , attachPackages() ... done
[08:08:56.871] | : signalConditions() ... done
[08:08:56.871] | relay conditions ... done
[08:08:56.872] value() for Future (<unnamed-22>) ... done
$a
[1] 1

[08:08:56.872] future(..., label = NULL) ...
[08:08:56.872] | lazy: FALSE
[08:08:56.873] | stdout: TRUE
[08:08:56.873] | conditions: [n=1] ‘condition’
[08:08:56.873] | gc: FALSE
[08:08:56.873] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:56.874] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:56.874] | : Searching for globals ...
[08:08:56.890] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:56.890] | : Searching for globals ... done
[08:08:56.890] | : Resolving globals: TRUE
[08:08:56.890] | : Resolving any globals that are futures ...
[08:08:56.890] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:56.890] | : Resolving any globals that are futures ... done
[08:08:56.891] | : Search for packages associated with the globals ...
[08:08:56.891] | : . Packages associated with globals: [1] ‘base’
[08:08:56.891] | : . Packages: [1] ‘base’
[08:08:56.891] | : Search for packages associated with the globals ... done
[08:08:56.891] | : Resolving futures part of globals (recursively) ...
[08:08:56.892] | : . resolve() for FutureGlobals ...
[08:08:56.892] | : . ' recursive: 99
[08:08:56.892] | : . ' Number of elements: 1
[08:08:56.892] | : . ' elements: ‘x’
[08:08:56.892] | : . ' 'obj' is list
[08:08:56.892] | : . ' resolve(obj, ...) ...
[08:08:56.893] | : . ' , resolve() for list ...
[08:08:56.893] | : . ' , ; recursive: 98
[08:08:56.893] | : . ' , ; Number of elements: 0
[08:08:56.893] | : . ' , resolve() for list ... done
[08:08:56.893] | : . ' resolve(obj, ...) ... done
[08:08:56.893] | : . ' resolved() for list ...
[08:08:56.893] | : . ' , Number of elements: 0
[08:08:56.893] | : . ' , Number of futures: 0
[08:08:56.893] | : . ' resolved() for list ... done
[08:08:56.894] | : . ' length: 0 (resolved future 1)
[08:08:56.894] | : . resolve() for FutureGlobals ... done
[08:08:56.894] | : . globals: [1] ‘x’
[08:08:56.894] | : Resolving futures part of globals (recursively) ... done
[08:08:56.894] | : Packages after dropping 'base': [0] 
[08:08:56.894] | : globals: [1] ‘x’
[08:08:56.894] | : packages: [0] 
[08:08:56.894] | getGlobalsAndPackages() ... done
[08:08:56.895] | run() for ‘Future’ (<unnamed-23>) ...
[08:08:56.895] | : state: ‘created’
[08:08:56.895] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.895] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.895] | : Using MulticoreFutureBackend ...
[08:08:56.895] | : . Number of futures since start: 10 (10 created, 10 launched, 10 finished)
[08:08:56.895] | : . Launching futures ...
[08:08:56.895] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:56.896] | : . ' , getFutureData() ...
[08:08:56.896] | : . ' , ; getFutureCore() ...
[08:08:56.896] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:56.896] | : . ' , ; getFutureCore() ... done
[08:08:56.896] | : . ' , ; getFutureCapture() ...
[08:08:56.896] | : . ' , ; getFutureCapture() ... done
[08:08:56.896] | : . ' , ; getFutureContext() ...
[08:08:56.896] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.896] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:56.897] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.897] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:56.897] | : . ' , ; getFutureContext() ... done
[08:08:56.897] | : . ' , getFutureData() ... done
[08:08:56.897] | : . ' , requestCore(..., workers = 2) ...
[08:08:56.897] | : . ' , requestCore(..., workers = 2) ... done
[08:08:56.899] | : . ' , MulticoreFuture started
[08:08:56.900] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:56.900] | : . Launching futures ... done
[08:08:56.900] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:56.901] | : Using MulticoreFutureBackend ... done
[08:08:56.901] | run() for ‘Future’ (<unnamed-23>) ... done
[08:08:56.901] future(..., label = NULL) ... done
[08:08:56.901] value() for MulticoreFuture (<unnamed-23>) ...
[08:08:56.902] | result() for MulticoreFuture ...
[08:08:56.903] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.903] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:56.903] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.904] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.904] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.904] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:56.905] | : . ' , ; ` | New stack:
[08:08:56.905] | : . ' , ; ` | List of 1
[08:08:56.905] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.905] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.905] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:56.905] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.905] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.905] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.905] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.905] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.910] | : . ' , ; ` | Old stack:
[08:08:56.910] | : . ' , ; ` | List of 1
[08:08:56.910] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.910] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.910] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.910] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.910] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.910] | : . ' , ; ` |     ...)  
[08:08:56.910] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.910] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.910] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.910] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.910] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.910] | : . ' , ; ` |     ...)  
[08:08:56.910] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.910] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.915] | : . ' , ; ` | Not identical
[08:08:56.915] | : . ' , ; ` | all.equal() for future ...
[08:08:56.916] | : . ' , ; ` | : List of 2
[08:08:56.916] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.916] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.916] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.916] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.916] | : . ' , ; ` | :     ...)  
[08:08:56.916] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.916] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.916] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.916] | : . ' , ; ` | :     ...)  
[08:08:56.916] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.929] | : . ' , ; ` | : Formals differ
[08:08:56.929] | : . ' , ; ` | all.equal() for future ... done
[08:08:56.929] | : . ' , ; ` | Future strategies differ at level 1
[08:08:56.929] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:56.929] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:56.929] | : . ' , ; ` List of future strategies:
[08:08:56.929] | : . ' , ; ` 1. sequential:
[08:08:56.929] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:56.929] | : . ' , ; `    - tweaked: FALSE
[08:08:56.929] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.930] | : . ' , ; ` List of 1
[08:08:56.930] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.930] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.930] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:56.930] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.930] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.930] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.930] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.930] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.933] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.933] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.934] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.934] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:56.934] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.934] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.934] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:56.934] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.934] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.934] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.934] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.936] | : . ' , ; ` | : init: TRUE
[08:08:56.936] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:56.936] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:56.936] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:56.936] | : . ' , ; ` | : .  list()
[08:08:56.937] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:56.937] | : . ' , ; ` | : .  list()
[08:08:56.937] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:56.937] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:56.937] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:56.937] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:56.938] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:56.939] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:56.939] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:56.939] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.939] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:56.939] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.939] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.939] | : . ' , assign_globals() ...
[08:08:56.939] | : . ' , List of 1
[08:08:56.939] | : . ' ,  $ x: list()
[08:08:56.939] | : . ' ,  - attr(*, "where")=List of 1
[08:08:56.939] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:56.939] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:56.939] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:56.939] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:56.939] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:56.942] | : . ' , - copied ‘x’ to environment
[08:08:56.942] | : . ' , assign_globals() ... done
[08:08:56.948] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.949] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:56.949] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:56.949] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:56.949] | : . ' , ; ` | : New stack:
[08:08:56.949] | : . ' , ; ` | : List of 1
[08:08:56.949] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.949] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.949] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.949] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.949] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.949] | : . ' , ; ` | :     ...)  
[08:08:56.949] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.949] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.949] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:56.949] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.949] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.949] | : . ' , ; ` | :     ...)  
[08:08:56.949] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.949] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.953] | : . ' , ; ` | : Old stack:
[08:08:56.954] | : . ' , ; ` | : List of 1
[08:08:56.954] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.954] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.954] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:56.954] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.954] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.954] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.954] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.954] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245316628> 
[08:08:56.954] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.954] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.954] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.957] | : . ' , ; ` | : Not identical
[08:08:56.957] | : . ' , ; ` | : all.equal() for future ...
[08:08:56.957] | : . ' , ; ` | : . List of 2
[08:08:56.957] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.957] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.957] | : . ' , ; ` | : .     ...)  
[08:08:56.957] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.957] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.957] | : . ' , ; ` | : .     ...)  
[08:08:56.957] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.957] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.957] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:56.957] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563245316628> 
[08:08:56.957] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:56.957] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:56.963] | : . ' , ; ` | : . Formals differ
[08:08:56.963] | : . ' , ; ` | : all.equal() for future ... done
[08:08:56.963] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:56.963] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:56.963] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:56.964] | : . ' , ; ` | List of future strategies:
[08:08:56.964] | : . ' , ; ` | 1. multicore:
[08:08:56.964] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:56.964] | : . ' , ; ` |    - tweaked: FALSE
[08:08:56.964] | : . ' , ; ` |    - call: plan(strategy)
[08:08:56.964] | : . ' , ; ` | List of 1
[08:08:56.964] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:56.964] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:56.964] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:56.964] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:56.964] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.964] | : . ' , ; ` |     ...)  
[08:08:56.964] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.964] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.964] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:56.964] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:56.964] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:56.964] | : . ' , ; ` |     ...)  
[08:08:56.964] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:56.964] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:56.969] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:56.969] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:56.970] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:56.970] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:56.970] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:56.970] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:56.970] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.970] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:56.971] | : readImmediateCondition() ...
[08:08:56.971] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:56.972] | : . Number of RDS files: 0
[08:08:56.972] | : . Returned conditions set:
[08:08:56.972] | : .  list()
[08:08:56.972] | : readImmediateCondition() ... done
[08:08:56.973] | : result() for MulticoreFuture ...
[08:08:56.973] | : result() for MulticoreFuture ... done
[08:08:56.973] | : signalConditions() ...
[08:08:56.973] | : . include = ‘immediateCondition’
[08:08:56.973] | : . exclude = 
[08:08:56.974] | : . resignal = FALSE
[08:08:56.974] | : . Number of conditions: 6
[08:08:56.974] | : .  int 6
[08:08:56.975] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.975] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.975] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.975] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.975] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.975] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.976] | : signalConditions() ... done
[08:08:56.976] | result() for MulticoreFuture ... done
[08:08:56.976] | result() for MulticoreFuture ...
[08:08:56.976] | result() for MulticoreFuture ... done
[08:08:56.976] | signalConditions() ...
[08:08:56.976] | : include = ‘immediateCondition’
[08:08:56.976] | : exclude = 
[08:08:56.977] | : resignal = FALSE
[08:08:56.977] | : Number of conditions: 6
[08:08:56.977] | :  int 6
[08:08:56.977] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.978] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.978] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.978] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.978] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.978] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.978] | signalConditions() ... done
[08:08:56.978] | relay stdout ...
[08:08:56.979] | relay stdout ... done
[08:08:56.979] | check for misuse ...
[08:08:56.979] | check for misuse ... done
[08:08:56.979] | relay conditions ...
[08:08:56.979] | : Future state: ‘finished’
[08:08:56.979] | : result() for MulticoreFuture ...
[08:08:56.979] | : result() for MulticoreFuture ... done
[08:08:56.980] | : signalConditions() ...
[08:08:56.980] | : . include = ‘condition’
[08:08:56.980] | : . exclude = ‘immediateCondition’
[08:08:56.980] | : . resignal = TRUE
[08:08:56.980] | : . Number of conditions: 6
[08:08:56.980] | : .  int 6
[08:08:56.981] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.981] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.900] | : . ' , attachPackages() ...
[08:08:56.981] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.981] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.901] | : . ' , ; packages: [n=1] ‘future’
[08:08:56.981] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.982] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.901] | : . ' , attachPackages() ... done
[08:08:56.982] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.982] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.902] | : . ' , attachPackages() ...
[08:08:56.982] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.982] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.902] | : . ' , ; packages: [n=0] 
[08:08:56.982] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:56.982] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:56.902] | : . ' , attachPackages() ... done
[08:08:56.983] | : signalConditions() ... done
[08:08:56.983] | relay conditions ... done
[08:08:56.983] value() for MulticoreFuture (<unnamed-23>) ... done
$a
[1] 1

[08:08:56.983] future(..., label = NULL) ...
[08:08:56.983] | lazy: FALSE
[08:08:56.984] | stdout: TRUE
[08:08:56.984] | conditions: [n=1] ‘condition’
[08:08:56.984] | gc: FALSE
[08:08:56.984] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:56.984] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:56.987] | : Searching for globals ...
[08:08:57.002] | : . globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:57.003] | : Searching for globals ... done
[08:08:57.003] | : Resolving globals: TRUE
[08:08:57.003] | : Resolving any globals that are futures ...
[08:08:57.003] | : . globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:57.003] | : Resolving any globals that are futures ... done
[08:08:57.003] | : Search for packages associated with the globals ...
[08:08:57.004] | : . Packages associated with globals: [1] ‘base’
[08:08:57.004] | : . Packages: [1] ‘base’
[08:08:57.007] | : Search for packages associated with the globals ... done
[08:08:57.008] | : Resolving futures part of globals (recursively) ...
[08:08:57.008] | : . resolve() for FutureGlobals ...
[08:08:57.008] | : . ' recursive: 99
[08:08:57.008] | : . ' Number of elements: 2
[08:08:57.008] | : . ' elements: ‘x’, ‘name’
[08:08:57.008] | : . ' 'obj' is list
[08:08:57.009] | : . ' resolve(obj, ...) ...
[08:08:57.009] | : . ' , resolve() for list ...
[08:08:57.009] | : . ' , ; recursive: 98
[08:08:57.009] | : . ' , ; Number of elements: 0
[08:08:57.009] | : . ' , resolve() for list ... done
[08:08:57.009] | : . ' resolve(obj, ...) ... done
[08:08:57.009] | : . ' resolved() for list ...
[08:08:57.009] | : . ' , Number of elements: 0
[08:08:57.010] | : . ' , Number of futures: 0
[08:08:57.010] | : . ' resolved() for list ... done
[08:08:57.010] | : . ' length: 1 (resolved future 1)
[08:08:57.010] | : . ' 'obj' is atomic
[08:08:57.010] | : . ' length: 0 (resolved future 2)
[08:08:57.010] | : . resolve() for FutureGlobals ... done
[08:08:57.010] | : . globals: [2] ‘x’, ‘name’
[08:08:57.011] | : Resolving futures part of globals (recursively) ... done
[08:08:57.011] | : Packages after dropping 'base': [0] 
[08:08:57.011] | : globals: [2] ‘x’, ‘name’
[08:08:57.011] | : packages: [0] 
[08:08:57.011] | getGlobalsAndPackages() ... done
[08:08:57.012] | run() for ‘Future’ (<unnamed-24>) ...
[08:08:57.012] | : state: ‘created’
[08:08:57.012] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.012] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.012] | : Using MulticoreFutureBackend ...
[08:08:57.012] | : . Number of futures since start: 11 (11 created, 11 launched, 11 finished)
[08:08:57.013] | : . Launching futures ...
[08:08:57.013] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:57.013] | : . ' , getFutureData() ...
[08:08:57.013] | : . ' , ; getFutureCore() ...
[08:08:57.013] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:57.013] | : . ' , ; getFutureCore() ... done
[08:08:57.013] | : . ' , ; getFutureCapture() ...
[08:08:57.014] | : . ' , ; getFutureCapture() ... done
[08:08:57.014] | : . ' , ; getFutureContext() ...
[08:08:57.014] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.014] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:57.014] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.014] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:57.014] | : . ' , ; getFutureContext() ... done
[08:08:57.014] | : . ' , getFutureData() ... done
[08:08:57.015] | : . ' , requestCore(..., workers = 2) ...
[08:08:57.015] | : . ' , requestCore(..., workers = 2) ... done
[08:08:57.017] | : . ' , MulticoreFuture started
[08:08:57.018] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:57.018] | : . Launching futures ... done
[08:08:57.018] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:57.019] | : Using MulticoreFutureBackend ... done
[08:08:57.019] | run() for ‘Future’ (<unnamed-24>) ... done
[08:08:57.019] future(..., label = NULL) ... done
[08:08:57.020] value() for MulticoreFuture (<unnamed-24>) ...
[08:08:57.020] | result() for MulticoreFuture ...
[08:08:57.021] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.022] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:57.022] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.023] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:57.024] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:57.024] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:57.024] | : . ' , ; ` | New stack:
[08:08:57.024] | : . ' , ; ` | List of 1
[08:08:57.024] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:57.024] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:57.024] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:57.024] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:57.024] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.024] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.024] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:57.024] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:57.031] | : . ' , ; ` | Old stack:
[08:08:57.031] | : . ' , ; ` | List of 1
[08:08:57.031] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:57.031] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:57.031] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:57.031] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:57.031] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.031] | : . ' , ; ` |     ...)  
[08:08:57.031] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.031] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.031] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:57.031] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:57.031] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.031] | : . ' , ; ` |     ...)  
[08:08:57.031] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.031] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:57.038] | : . ' , ; ` | Not identical
[08:08:57.039] | : . ' , ; ` | all.equal() for future ...
[08:08:57.039] | : . ' , ; ` | : List of 2
[08:08:57.039] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:57.039] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:57.039] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:57.039] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.039] | : . ' , ; ` | :     ...)  
[08:08:57.039] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:57.039] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:57.039] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.039] | : . ' , ; ` | :     ...)  
[08:08:57.039] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.053] | : . ' , ; ` | : Formals differ
[08:08:57.053] | : . ' , ; ` | all.equal() for future ... done
[08:08:57.053] | : . ' , ; ` | Future strategies differ at level 1
[08:08:57.053] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:57.054] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:57.054] | : . ' , ; ` List of future strategies:
[08:08:57.054] | : . ' , ; ` 1. sequential:
[08:08:57.054] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:57.054] | : . ' , ; `    - tweaked: FALSE
[08:08:57.054] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:57.055] | : . ' , ; ` List of 1
[08:08:57.055] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:57.055] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:57.055] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:57.055] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:57.055] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.055] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.055] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:57.055] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:57.060] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:57.060] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:57.060] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.061] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:57.061] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:57.061] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:57.061] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:57.061] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:57.061] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.061] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.061] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:57.063] | : . ' , ; ` | : init: TRUE
[08:08:57.063] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:57.064] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:57.064] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:57.064] | : . ' , ; ` | : .  list()
[08:08:57.064] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:57.064] | : . ' , ; ` | : .  list()
[08:08:57.064] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:57.064] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:57.064] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:57.064] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:57.066] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:57.066] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:57.066] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:57.066] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.066] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:57.066] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:57.066] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:57.067] | : . ' , assign_globals() ...
[08:08:57.067] | : . ' , List of 2
[08:08:57.067] | : . ' ,  $ x   : list()
[08:08:57.067] | : . ' ,  $ name: chr "a"
[08:08:57.067] | : . ' ,  - attr(*, "where")=List of 2
[08:08:57.067] | : . ' ,   ..$ x   :<environment: R_GlobalEnv> 
[08:08:57.067] | : . ' ,   ..$ name:<environment: R_GlobalEnv> 
[08:08:57.067] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:57.067] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:57.067] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:57.067] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:57.070] | : . ' , - copied ‘x’ to environment
[08:08:57.070] | : . ' , - copied ‘name’ to environment
[08:08:57.070] | : . ' , assign_globals() ... done
[08:08:57.073] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:57.073] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:57.073] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:57.073] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:57.073] | : . ' , ; ` | : New stack:
[08:08:57.073] | : . ' , ; ` | : List of 1
[08:08:57.073] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:57.073] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:57.073] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:57.073] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:57.073] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.073] | : . ' , ; ` | :     ...)  
[08:08:57.073] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.073] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.073] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:57.073] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:57.073] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.073] | : . ' , ; ` | :     ...)  
[08:08:57.073] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.073] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:57.078] | : . ' , ; ` | : Old stack:
[08:08:57.079] | : . ' , ; ` | : List of 1
[08:08:57.079] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:57.079] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:57.079] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:57.079] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:57.079] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.079] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.079] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:57.079] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244e5f850> 
[08:08:57.079] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:57.079] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.079] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:57.082] | : . ' , ; ` | : Not identical
[08:08:57.082] | : . ' , ; ` | : all.equal() for future ...
[08:08:57.083] | : . ' , ; ` | : . List of 2
[08:08:57.083] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:57.083] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.083] | : . ' , ; ` | : .     ...)  
[08:08:57.083] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:57.083] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.083] | : . ' , ; ` | : .     ...)  
[08:08:57.083] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.083] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:57.083] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:57.083] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563244e5f850> 
[08:08:57.083] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:57.083] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:57.088] | : . ' , ; ` | : . Formals differ
[08:08:57.089] | : . ' , ; ` | : all.equal() for future ... done
[08:08:57.089] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:57.089] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:57.089] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:57.089] | : . ' , ; ` | List of future strategies:
[08:08:57.089] | : . ' , ; ` | 1. multicore:
[08:08:57.089] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:57.089] | : . ' , ; ` |    - tweaked: FALSE
[08:08:57.089] | : . ' , ; ` |    - call: plan(strategy)
[08:08:57.089] | : . ' , ; ` | List of 1
[08:08:57.089] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:57.089] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:57.089] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:57.089] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:57.089] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.089] | : . ' , ; ` |     ...)  
[08:08:57.089] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.089] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.089] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:57.089] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:57.089] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.089] | : . ' , ; ` |     ...)  
[08:08:57.089] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.089] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:57.093] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:57.093] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:57.093] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.093] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.093] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:57.093] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:57.093] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:57.093] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:57.094] | : readImmediateCondition() ...
[08:08:57.094] | : . Path: ‘/tmp/RtmpGgYB77/.future/immediateConditions’
[08:08:57.095] | : . Number of RDS files: 0
[08:08:57.095] | : . Returned conditions set:
[08:08:57.095] | : .  list()
[08:08:57.096] | : readImmediateCondition() ... done
[08:08:57.096] | : result() for MulticoreFuture ...
[08:08:57.096] | : result() for MulticoreFuture ... done
[08:08:57.096] | : signalConditions() ...
[08:08:57.097] | : . include = ‘immediateCondition’
[08:08:57.097] | : . exclude = 
[08:08:57.097] | : . resignal = FALSE
[08:08:57.097] | : . Number of conditions: 6
[08:08:57.097] | : .  int 6
[08:08:57.098] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.098] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.098] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.098] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.099] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.099] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.099] | : signalConditions() ... done
[08:08:57.099] | result() for MulticoreFuture ... done
[08:08:57.099] | result() for MulticoreFuture ...
[08:08:57.099] | result() for MulticoreFuture ... done
[08:08:57.099] | signalConditions() ...
[08:08:57.100] | : include = ‘immediateCondition’
[08:08:57.100] | : exclude = 
[08:08:57.100] | : resignal = FALSE
[08:08:57.100] | : Number of conditions: 6
[08:08:57.100] | :  int 6
[08:08:57.101] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.101] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.101] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.101] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.101] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.101] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.102] | signalConditions() ... done
[08:08:57.102] | relay stdout ...
[08:08:57.102] | relay stdout ... done
[08:08:57.102] | check for misuse ...
[08:08:57.102] | check for misuse ... done
[08:08:57.102] | relay conditions ...
[08:08:57.102] | : Future state: ‘finished’
[08:08:57.103] | : result() for MulticoreFuture ...
[08:08:57.103] | : result() for MulticoreFuture ... done
[08:08:57.103] | : signalConditions() ...
[08:08:57.103] | : . include = ‘condition’
[08:08:57.103] | : . exclude = ‘immediateCondition’
[08:08:57.103] | : . resignal = TRUE
[08:08:57.103] | : . Number of conditions: 6
[08:08:57.103] | : .  int 6
[08:08:57.104] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.104] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:57.018] | : . ' , attachPackages() ...
[08:08:57.104] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.104] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:57.019] | : . ' , ; packages: [n=1] ‘future’
[08:08:57.105] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.105] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:57.019] | : . ' , attachPackages() ... done
[08:08:57.105] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.105] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:57.020] | : . ' , attachPackages() ...
[08:08:57.105] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.105] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:57.020] | : . ' , ; packages: [n=0] 
[08:08:57.106] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:57.106] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:57.020] | : . ' , attachPackages() ... done
[08:08:57.106] | : signalConditions() ... done
[08:08:57.106] | relay conditions ... done
[08:08:57.106] value() for MulticoreFuture (<unnamed-24>) ... done
$a
[1] 1

- plan('multisession') ...
[08:08:57.107] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.107] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:57.107] | : all.equal() for FutureStrategyList ...
[08:08:57.107] | : . New stack:
[08:08:57.107] | : . List of 1
[08:08:57.107] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:57.107] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:57.107] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:57.107] | : .   ..- attr(*, "init")= logi TRUE
[08:08:57.107] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:57.107] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:57.107] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:57.107] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:57.107] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:57.107] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:57.107] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:57.113] | : . Old stack:
[08:08:57.113] | : . List of 1
[08:08:57.113] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:57.113] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:57.113] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:57.113] | : .   ..- attr(*, "init")= chr "done"
[08:08:57.113] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.113] | : .     ...)  
[08:08:57.113] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.113] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.113] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:57.113] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:57.113] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.113] | : .     ...)  
[08:08:57.113] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.113] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:57.119] | : . Not identical
[08:08:57.119] | : . all.equal() for future ...
[08:08:57.119] | : . ' List of 2
[08:08:57.119] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:57.119] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:57.119] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:57.119] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:57.119] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:57.119] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:57.119] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:57.119] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:57.119] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:57.119] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:57.119] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:57.119] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:57.119] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:57.119] | : . '   ..- attr(*, "init")= chr "done"
[08:08:57.119] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.119] | : . '     ...)  
[08:08:57.119] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.119] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.119] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:57.119] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56324502c488> 
[08:08:57.119] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:57.119] | : . '     ...)  
[08:08:57.119] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:57.125] | : . ' Formals differ
[08:08:57.125] | : . all.equal() for future ... done
[08:08:57.125] | : . Future strategies differ at level 1
[08:08:57.125] | : all.equal() for FutureStrategyList ... done
[08:08:57.126] | : plan(): Setting new future backend stack:
[08:08:57.126] | : List of future strategies:
[08:08:57.126] | : 1. multisession:
[08:08:57.126] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:57.126] | :    - tweaked: FALSE
[08:08:57.126] | :    - call: plan(strategy)
[08:08:57.126] | : List of 1
[08:08:57.126] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:57.126] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:57.126] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:57.126] | :   ..- attr(*, "init")= logi TRUE
[08:08:57.126] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:57.126] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:57.126] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:57.126] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:57.126] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:57.126] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:57.126] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:57.129] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:57.129] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.129] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:57.129] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.130] | : . Legacy shutdown of cluster workers ...
[08:08:57.130] | : . ' Stopping existing cluster ...
[08:08:57.130] | : . ' , No pre-existing cluster. Skipping
[08:08:57.131] | : . ' Stopping existing cluster ... done
[08:08:57.131] | : . Legacy shutdown of cluster workers ... done
[08:08:57.131] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:57.131] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:57.131] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:57.131] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:57.131] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:57.131] | : .  - attr(*, "init")= logi TRUE
[08:08:57.131] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:57.131] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:57.131] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:57.131] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:57.131] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:57.131] | : .  - attr(*, "call")= language plan(strategy)
[08:08:57.133] | : . init: TRUE
[08:08:57.134] | : . makeFutureBackend(<multisession>) ...
[08:08:57.134] | : . ' Backend function: <‘NULL’>
[08:08:57.135] | : . ' Evaluator tweak arguments: [n=0]
[08:08:57.136] | : . '  list()
[08:08:57.136] | : . ' Evaluator formal arguments: [n=4]
[08:08:57.136] | : . '  list()
[08:08:57.136] | : . ' Backend factory arguments: [n=4]
[08:08:57.136] | : . ' Dotted pair list of 4
[08:08:57.136] | : . '  $ workers     : language availableCores()
[08:08:57.136] | : . '  $ rscript_libs: language .libPaths()
[08:08:57.136] | : . '  $ gc          : logi FALSE
[08:08:57.136] | : . '  $ earlySignal : logi FALSE
[08:08:57.138] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:57.138] | : . ' , Arguments:
[08:08:57.139] | : . ' , List of 5
[08:08:57.139] | : . ' ,  $ workers     : Named int 2
[08:08:57.139] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:57.139] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:57.139] | : . ' ,  $ interrupts  : logi TRUE
[08:08:57.139] | : . ' ,  $ gc          : logi FALSE
[08:08:57.139] | : . ' ,  $ earlySignal : logi FALSE
[08:08:57.143] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:57.143] | : . ' , ; workers: 2
[08:08:57.143] | : . ' , ; getCluster() ...
[08:08:57.143] | : . ' , ; getCluster() ... done
[08:08:57.143] | : . ' , ; Stopping existing cluster ...
[08:08:57.144] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:57.144] | : . ' , ; Stopping existing cluster ... done
[08:08:57.144] | : . ' , ; Starting new cluster ...
[08:08:57.144] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:57.144] | : . ' , ; ` | Arguments:
[08:08:57.144] | : . ' , ; ` | List of 2
[08:08:57.144] | : . ' , ; ` |  $             : int 2
[08:08:57.144] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:57.145] | : . ' , ; ` | .makeCluster() ...
[08:08:57.145] | : . ' , ; ` | : workers: ‘2’
[08:08:57.145] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:57.146] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:57.146] | : . ' , ; ` | : List of 2
[08:08:57.146] | : . ' , ; ` | :  $             : int 2
[08:08:57.146] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:57.657] | : . ' , ; ` | : Generated cluster UUID
[08:08:57.658] | : . ' , ; ` | : Cluster UUID: ‘738e3bb29df483fb10ec72c38cf424e2’
[08:08:57.658] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:57.660] | : . ' , ; ` | .makeCluster() ... done
[08:08:57.660] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:57.662] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:57.662] | : . ' , ; ` Number of workers: 2
[08:08:57.662] | : . ' , ; ` Workers UUID: ‘738e3bb29df483fb10ec72c38cf424e2’
[08:08:57.662] | : . ' , ; Starting new cluster ... done
[08:08:57.662] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:57.662] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:57.663] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:57.663] | : . makeFutureBackend(<multisession>) ... done
[08:08:57.663] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.663] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.663] | : . plan(): nbrOfWorkers() = 2
[08:08:57.663] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:57.663] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:57.663] | future(..., label = NULL) ...
[08:08:57.664] | : lazy: FALSE
[08:08:57.664] | : stdout: TRUE
[08:08:57.664] | : conditions: [n=1] ‘condition’
[08:08:57.664] | : gc: FALSE
[08:08:57.664] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:57.664] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:57.664] | : . Searching for globals ...
[08:08:57.675] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:57.676] | : . Searching for globals ... done
[08:08:57.676] | : . Resolving globals: TRUE
[08:08:57.676] | : . Resolving any globals that are futures ...
[08:08:57.676] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:57.676] | : . Resolving any globals that are futures ... done
[08:08:57.676] | : . Search for packages associated with the globals ...
[08:08:57.677] | : . ' Packages associated with globals: [1] ‘base’
[08:08:57.677] | : . ' Packages: [1] ‘base’
[08:08:57.677] | : . Search for packages associated with the globals ... done
[08:08:57.677] | : . Resolving futures part of globals (recursively) ...
[08:08:57.677] | : . ' resolve() for FutureGlobals ...
[08:08:57.677] | : . ' , recursive: 99
[08:08:57.678] | : . ' , Number of elements: 1
[08:08:57.678] | : . ' , elements: ‘x’
[08:08:57.678] | : . ' , 'obj' is list
[08:08:57.678] | : . ' , resolve(obj, ...) ...
[08:08:57.678] | : . ' , ; resolve() for list ...
[08:08:57.678] | : . ' , ; ` recursive: 98
[08:08:57.679] | : . ' , ; ` Number of elements: 0
[08:08:57.679] | : . ' , ; resolve() for list ... done
[08:08:57.679] | : . ' , resolve(obj, ...) ... done
[08:08:57.679] | : . ' , resolved() for list ...
[08:08:57.679] | : . ' , ; Number of elements: 0
[08:08:57.679] | : . ' , ; Number of futures: 0
[08:08:57.679] | : . ' , resolved() for list ... done
[08:08:57.679] | : . ' , length: 0 (resolved future 1)
[08:08:57.680] | : . ' resolve() for FutureGlobals ... done
[08:08:57.680] | : . ' globals: [1] ‘x’
[08:08:57.680] | : . Resolving futures part of globals (recursively) ... done
[08:08:57.680] | : . Packages after dropping 'base': [0] 
[08:08:57.680] | : . globals: [1] ‘x’
[08:08:57.680] | : . packages: [0] 
[08:08:57.680] | : getGlobalsAndPackages() ... done
[08:08:57.681] | : run() for ‘Future’ (<unnamed-25>) ...
[08:08:57.681] | : . state: ‘created’
[08:08:57.681] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.681] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.681] | : . Using MultisessionFutureBackend ...
[08:08:57.681] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:57.682] | : . ' Launching futures ...
[08:08:57.682] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:57.682] | : . ' , ; Workers: [n=2]
[08:08:57.682] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:57.684] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:57.684] | : . ' , ; requestWorker() ...
[08:08:57.684] | : . ' , ; ` requestNode() ...
[08:08:57.685] | : . ' , ; ` | Number of workers: 2
[08:08:57.685] | : . ' , ; ` | Polling for a free worker ...
[08:08:57.685] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:57.685] | : . ' , ; ` | : . Created empty registry ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:57.685] | : . ' , ; ` | : . Listing all futures
[08:08:57.685] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:57.685] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:57.686] | : . ' , ; ` | : Total time: 0
[08:08:57.686] | : . ' , ; ` | Polling for a free worker ... done
[08:08:57.686] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:57.686] | : . ' , ; ` | : Listing all futures
[08:08:57.686] | : . ' , ; ` | : Number of registered futures: 0
[08:08:57.686] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:57.686] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:57.686] | : . ' , ; ` | Index of first available worker: 1
[08:08:57.687] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:57.754] | : . ' , ; ` | : Worker is functional
[08:08:57.755] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:57.755] | : . ' , ; ` | : . Listing all futures
[08:08:57.755] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:57.755] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:57.755] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:57.755] | : . ' , ; ` requestNode() ... done
[08:08:57.755] | : . ' , ; ` cluster node index: 1
[08:08:57.756] | : . ' , ; requestWorker() ... done
[08:08:57.756] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:57.756] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:57.757] | : . ' , ; launchFuture() ...
[08:08:57.757] | : . ' , ; ` cluster node index: 1
[08:08:57.757] | : . ' , ; ` getFutureData() ...
[08:08:57.757] | : . ' , ; ` | getFutureCore() ...
[08:08:57.757] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:57.757] | : . ' , ; ` | getFutureCore() ... done
[08:08:57.757] | : . ' , ; ` | getFutureCapture() ...
[08:08:57.758] | : . ' , ; ` | getFutureCapture() ... done
[08:08:57.758] | : . ' , ; ` | getFutureContext() ...
[08:08:57.758] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.758] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:57.758] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.758] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:57.758] | : . ' , ; ` | getFutureContext() ... done
[08:08:57.759] | : . ' , ; ` getFutureData() ... done
[08:08:57.759] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:57.759] | : . ' , ; ` | Appended future to position #1
[08:08:57.759] | : . ' , ; ` | Number of registered futures: 1
[08:08:57.760] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:57.760] | : . ' , ; launchFuture() ... done
[08:08:57.760] | : . ' , ; MultisessionFuture started
[08:08:57.760] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:57.760] | : . ' Launching futures ... done
[08:08:57.760] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:57.760] | : . Using MultisessionFutureBackend ... done
[08:08:57.761] | : run() for ‘Future’ (<unnamed-25>) ... done
[08:08:57.761] | future(..., label = NULL) ... done
[08:08:57.761] | value() for MultisessionFuture (<unnamed-25>) ...
[08:08:57.761] | : result() for ClusterFuture ...
[08:08:57.761] | : . assertValidConnection() ...
[08:08:57.762] | : . ' cluster node index: 1
[08:08:57.762] | : . assertValidConnection() ... done
[08:08:57.763] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:57.763] | : . ' cluster node index: 1
[08:08:57.850] | : . ' [1] TRUE
[08:08:57.850] | : . ' received data:
[08:08:57.850] | : . ' List of 5
[08:08:57.850] | : . '  $ type   : chr "VALUE"
[08:08:57.850] | : . '  $ value  :List of 16
[08:08:57.850] | : . '   ..$ value              :List of 1
[08:08:57.850] | : . '   .. ..$ a: num 1
[08:08:57.850] | : . '   ..$ visible            : logi TRUE
[08:08:57.850] | : . '   ..$ stdout             : chr ""
[08:08:57.850] | : . '   ..$ conditions         : list()
[08:08:57.850] | : . '   ..$ rng                : logi FALSE
[08:08:57.850] | : . '   ..$ seed               : NULL
[08:08:57.850] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:57.850] | : . '   ..$ misuseConnections  :List of 3
[08:08:57.850] | : . '   .. ..$ added   : NULL
[08:08:57.850] | : . '   .. ..$ removed : NULL
[08:08:57.850] | : . '   .. ..$ replaced: NULL
[08:08:57.850] | : . '   ..$ misuseDevices      : NULL
[08:08:57.850] | : . '   ..$ misuseDefaultDevice: list()
[08:08:57.850] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:57.850] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:57.850] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "25"
[08:08:57.850] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:57.850] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:57.850] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:57.850] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:57.850] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:57.850] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:57.850] | : . '   .. .. ..$ pid   : int 70439
[08:08:57.850] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:57.850] | : . '   .. .. ..$ random: int 2147483647
[08:08:57.850] | : . '   ..$ r_info             :List of 4
[08:08:57.850] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:57.850] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:57.850] | : . '   .. ..$ os           : chr "unix"
[08:08:57.850] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:57.850] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:57.850] | : . '   ..$ version            : chr "1.8"
[08:08:57.850] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:57.850] | : . '  $ success: logi TRUE
[08:08:57.850] | : . '  $ time   : 'proc_time' Named num [1:5] 0.046 0.005 0.05 0 0
[08:08:57.850] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:57.850] | : . '  $ tag    : NULL
[08:08:57.865] | : . ' Received FutureResult
[08:08:57.866] | : . ' FutureResult:
[08:08:57.866] | : . ' value: ‘list’
[08:08:57.866] | : . ' visible: TRUE
[08:08:57.866] | : . ' stdout: character
[08:08:57.866] | : . ' conditions: [n = 0] 
[08:08:57.866] | : . ' RNG used: FALSE
[08:08:57.866] | : . ' duration: 0.04806376 secs (started 2025-06-17 08:08:57.801474)
[08:08:57.866] | : . ' version: 1.8
[08:08:57.867] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:57.867] | : . ' , Removed future from position #1
[08:08:57.867] | : . ' , Number of registered futures: 0
[08:08:57.867] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:57.867] | : . ' Erased future from future backend
[08:08:57.867] | : . ' result() for ClusterFuture ...
[08:08:57.867] | : . ' , result already collected: FutureResult
[08:08:57.868] | : . ' result() for ClusterFuture ... done
[08:08:57.868] | : . ' signalConditions() ...
[08:08:57.868] | : . ' , include = ‘immediateCondition’
[08:08:57.868] | : . ' , exclude = 
[08:08:57.868] | : . ' , resignal = FALSE
[08:08:57.868] | : . ' , Number of conditions: 0
[08:08:57.868] | : . ' ,  int 0
[08:08:57.869] | : . ' signalConditions() ... done
[08:08:57.869] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:57.869] | : result() for ClusterFuture ... done
[08:08:57.869] | : result() for ClusterFuture ...
[08:08:57.869] | : . result already collected: FutureResult
[08:08:57.870] | : result() for ClusterFuture ... done
[08:08:57.870] | : signalConditions() ...
[08:08:57.870] | : . include = ‘immediateCondition’
[08:08:57.870] | : . exclude = 
[08:08:57.870] | : . resignal = FALSE
[08:08:57.870] | : . Number of conditions: 0
[08:08:57.870] | : .  int 0
[08:08:57.871] | : signalConditions() ... done
[08:08:57.871] | : relay stdout ...
[08:08:57.871] | : relay stdout ... done
[08:08:57.871] | : check for misuse ...
[08:08:57.871] | : check for misuse ... done
[08:08:57.872] | value() for MultisessionFuture (<unnamed-25>) ... done
$a
[1] 1

[08:08:57.872] | future(..., label = NULL) ...
[08:08:57.872] | : lazy: TRUE
[08:08:57.872] | : stdout: TRUE
[08:08:57.872] | : conditions: [n=1] ‘condition’
[08:08:57.872] | : gc: FALSE
[08:08:57.872] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:57.873] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:57.873] | : . Searching for globals ...
[08:08:57.889] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:57.889] | : . Searching for globals ... done
[08:08:57.889] | : . Resolving globals: TRUE
[08:08:57.889] | : . Resolving any globals that are futures ...
[08:08:57.889] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:57.889] | : . Resolving any globals that are futures ... done
[08:08:57.889] | : . Search for packages associated with the globals ...
[08:08:57.890] | : . ' Packages associated with globals: [1] ‘base’
[08:08:57.890] | : . ' Packages: [1] ‘base’
[08:08:57.890] | : . Search for packages associated with the globals ... done
[08:08:57.890] | : . Resolving futures part of globals (recursively) ...
[08:08:57.890] | : . ' resolve() for FutureGlobals ...
[08:08:57.890] | : . ' , recursive: 99
[08:08:57.891] | : . ' , Number of elements: 1
[08:08:57.891] | : . ' , elements: ‘x’
[08:08:57.891] | : . ' , 'obj' is list
[08:08:57.891] | : . ' , resolve(obj, ...) ...
[08:08:57.891] | : . ' , ; resolve() for list ...
[08:08:57.891] | : . ' , ; ` recursive: 98
[08:08:57.891] | : . ' , ; ` Number of elements: 0
[08:08:57.891] | : . ' , ; resolve() for list ... done
[08:08:57.891] | : . ' , resolve(obj, ...) ... done
[08:08:57.891] | : . ' , resolved() for list ...
[08:08:57.892] | : . ' , ; Number of elements: 0
[08:08:57.892] | : . ' , ; Number of futures: 0
[08:08:57.892] | : . ' , resolved() for list ... done
[08:08:57.892] | : . ' , length: 0 (resolved future 1)
[08:08:57.892] | : . ' resolve() for FutureGlobals ... done
[08:08:57.892] | : . ' globals: [1] ‘x’
[08:08:57.892] | : . Resolving futures part of globals (recursively) ... done
[08:08:57.892] | : . Packages after dropping 'base': [0] 
[08:08:57.892] | : . globals: [1] ‘x’
[08:08:57.893] | : . packages: [0] 
[08:08:57.893] | : getGlobalsAndPackages() ... done
[08:08:57.893] | future(..., label = NULL) ... done
[08:08:57.893] | value() for Future (<unnamed-26>) ...
[08:08:57.893] | : run() for ‘Future’ (<unnamed-26>) ...
[08:08:57.893] | : . state: ‘created’
[08:08:57.893] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.893] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.894] | : . Using MultisessionFutureBackend ...
[08:08:57.894] | : . ' Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:57.894] | : . ' Launching futures ...
[08:08:57.894] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:57.894] | : . ' , ; Workers: [n=2]
[08:08:57.894] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:57.896] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:57.896] | : . ' , ; requestWorker() ...
[08:08:57.896] | : . ' , ; ` requestNode() ...
[08:08:57.896] | : . ' , ; ` | Number of workers: 2
[08:08:57.896] | : . ' , ; ` | Polling for a free worker ...
[08:08:57.896] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:57.896] | : . ' , ; ` | : . Listing all futures
[08:08:57.896] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:57.897] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:57.897] | : . ' , ; ` | : Total time: 0
[08:08:57.897] | : . ' , ; ` | Polling for a free worker ... done
[08:08:57.897] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:57.897] | : . ' , ; ` | : Listing all futures
[08:08:57.897] | : . ' , ; ` | : Number of registered futures: 0
[08:08:57.897] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:57.897] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:57.897] | : . ' , ; ` | Index of first available worker: 1
[08:08:57.897] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:57.956] | : . ' , ; ` | : Worker is functional
[08:08:57.956] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:57.957] | : . ' , ; ` | : . Listing all futures
[08:08:57.957] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:57.957] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:57.957] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:57.957] | : . ' , ; ` requestNode() ... done
[08:08:57.957] | : . ' , ; ` cluster node index: 1
[08:08:57.957] | : . ' , ; requestWorker() ... done
[08:08:57.957] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:57.958] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:57.958] | : . ' , ; launchFuture() ...
[08:08:57.958] | : . ' , ; ` cluster node index: 1
[08:08:57.958] | : . ' , ; ` getFutureData() ...
[08:08:57.958] | : . ' , ; ` | getFutureCore() ...
[08:08:57.958] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:57.958] | : . ' , ; ` | getFutureCore() ... done
[08:08:57.958] | : . ' , ; ` | getFutureCapture() ...
[08:08:57.959] | : . ' , ; ` | getFutureCapture() ... done
[08:08:57.959] | : . ' , ; ` | getFutureContext() ...
[08:08:57.959] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:57.959] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:57.959] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:57.959] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:57.959] | : . ' , ; ` | getFutureContext() ... done
[08:08:57.959] | : . ' , ; ` getFutureData() ... done
[08:08:57.960] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:57.960] | : . ' , ; ` | Appended future to position #1
[08:08:57.960] | : . ' , ; ` | Number of registered futures: 1
[08:08:57.960] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:57.960] | : . ' , ; launchFuture() ... done
[08:08:57.960] | : . ' , ; MultisessionFuture started
[08:08:57.960] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:57.960] | : . ' Launching futures ... done
[08:08:57.961] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:57.961] | : . Using MultisessionFutureBackend ... done
[08:08:57.961] | : run() for ‘Future’ (<unnamed-26>) ... done
[08:08:57.961] | : result() for ClusterFuture ...
[08:08:57.961] | : . assertValidConnection() ...
[08:08:57.961] | : . ' cluster node index: 1
[08:08:57.961] | : . assertValidConnection() ... done
[08:08:57.962] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:57.962] | : . ' cluster node index: 1
[08:08:58.005] | : . ' [1] TRUE
[08:08:58.006] | : . ' received data:
[08:08:58.006] | : . ' List of 5
[08:08:58.006] | : . '  $ type   : chr "VALUE"
[08:08:58.006] | : . '  $ value  :List of 16
[08:08:58.006] | : . '   ..$ value              :List of 1
[08:08:58.006] | : . '   .. ..$ a: num 1
[08:08:58.006] | : . '   ..$ visible            : logi TRUE
[08:08:58.006] | : . '   ..$ stdout             : chr ""
[08:08:58.006] | : . '   ..$ conditions         : list()
[08:08:58.006] | : . '   ..$ rng                : logi FALSE
[08:08:58.006] | : . '   ..$ seed               : NULL
[08:08:58.006] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:58.006] | : . '   ..$ misuseConnections  :List of 3
[08:08:58.006] | : . '   .. ..$ added   : NULL
[08:08:58.006] | : . '   .. ..$ removed : NULL
[08:08:58.006] | : . '   .. ..$ replaced: NULL
[08:08:58.006] | : . '   ..$ misuseDevices      : NULL
[08:08:58.006] | : . '   ..$ misuseDefaultDevice: list()
[08:08:58.006] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.006] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.006] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "26"
[08:08:58.006] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:58.006] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:58.006] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:58.006] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:58.006] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:58.006] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:58.006] | : . '   .. .. ..$ pid   : int 70439
[08:08:58.006] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:58.006] | : . '   .. .. ..$ random: int 2147483647
[08:08:58.006] | : . '   ..$ r_info             :List of 4
[08:08:58.006] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:58.006] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:58.006] | : . '   .. ..$ os           : chr "unix"
[08:08:58.006] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:58.006] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:58.006] | : . '   ..$ version            : chr "1.8"
[08:08:58.006] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:58.006] | : . '  $ success: logi TRUE
[08:08:58.006] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[08:08:58.006] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:58.006] | : . '  $ tag    : NULL
[08:08:58.021] | : . ' Received FutureResult
[08:08:58.021] | : . ' FutureResult:
[08:08:58.021] | : . ' value: ‘list’
[08:08:58.021] | : . ' visible: TRUE
[08:08:58.021] | : . ' stdout: character
[08:08:58.021] | : . ' conditions: [n = 0] 
[08:08:58.021] | : . ' RNG used: FALSE
[08:08:58.021] | : . ' duration: 0.003827333 secs (started 2025-06-17 08:08:58.001231)
[08:08:58.021] | : . ' version: 1.8
[08:08:58.022] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:58.022] | : . ' , Removed future from position #1
[08:08:58.022] | : . ' , Number of registered futures: 0
[08:08:58.022] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:58.023] | : . ' Erased future from future backend
[08:08:58.023] | : . ' result() for ClusterFuture ...
[08:08:58.023] | : . ' , result already collected: FutureResult
[08:08:58.023] | : . ' result() for ClusterFuture ... done
[08:08:58.023] | : . ' signalConditions() ...
[08:08:58.023] | : . ' , include = ‘immediateCondition’
[08:08:58.023] | : . ' , exclude = 
[08:08:58.023] | : . ' , resignal = FALSE
[08:08:58.023] | : . ' , Number of conditions: 0
[08:08:58.023] | : . ' ,  int 0
[08:08:58.024] | : . ' signalConditions() ... done
[08:08:58.024] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:58.024] | : result() for ClusterFuture ... done
[08:08:58.025] | : result() for ClusterFuture ...
[08:08:58.025] | : . result already collected: FutureResult
[08:08:58.025] | : result() for ClusterFuture ... done
[08:08:58.025] | : signalConditions() ...
[08:08:58.025] | : . include = ‘immediateCondition’
[08:08:58.026] | : . exclude = 
[08:08:58.026] | : . resignal = FALSE
[08:08:58.026] | : . Number of conditions: 0
[08:08:58.026] | : .  int 0
[08:08:58.027] | : signalConditions() ... done
[08:08:58.027] | : relay stdout ...
[08:08:58.027] | : relay stdout ... done
[08:08:58.028] | : check for misuse ...
[08:08:58.028] | : check for misuse ... done
[08:08:58.028] | value() for Future (<unnamed-26>) ... done
$a
[1] 1

[08:08:58.029] | future(..., label = NULL) ...
[08:08:58.029] | : lazy: FALSE
[08:08:58.029] | : stdout: TRUE
[08:08:58.029] | : conditions: [n=1] ‘condition’
[08:08:58.029] | : gc: FALSE
[08:08:58.030] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:58.030] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:58.031] | : . Searching for globals ...
[08:08:58.050] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:58.050] | : . Searching for globals ... done
[08:08:58.050] | : . Resolving globals: TRUE
[08:08:58.050] | : . Resolving any globals that are futures ...
[08:08:58.050] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:58.051] | : . Resolving any globals that are futures ... done
[08:08:58.051] | : . Search for packages associated with the globals ...
[08:08:58.051] | : . ' Packages associated with globals: [1] ‘base’
[08:08:58.051] | : . ' Packages: [1] ‘base’
[08:08:58.052] | : . Search for packages associated with the globals ... done
[08:08:58.052] | : . Resolving futures part of globals (recursively) ...
[08:08:58.052] | : . ' resolve() for FutureGlobals ...
[08:08:58.052] | : . ' , recursive: 99
[08:08:58.052] | : . ' , Number of elements: 1
[08:08:58.053] | : . ' , elements: ‘x’
[08:08:58.053] | : . ' , 'obj' is list
[08:08:58.053] | : . ' , resolve(obj, ...) ...
[08:08:58.053] | : . ' , ; resolve() for list ...
[08:08:58.053] | : . ' , ; ` recursive: 98
[08:08:58.053] | : . ' , ; ` Number of elements: 0
[08:08:58.053] | : . ' , ; resolve() for list ... done
[08:08:58.054] | : . ' , resolve(obj, ...) ... done
[08:08:58.054] | : . ' , resolved() for list ...
[08:08:58.054] | : . ' , ; Number of elements: 0
[08:08:58.054] | : . ' , ; Number of futures: 0
[08:08:58.054] | : . ' , resolved() for list ... done
[08:08:58.054] | : . ' , length: 0 (resolved future 1)
[08:08:58.055] | : . ' resolve() for FutureGlobals ... done
[08:08:58.055] | : . ' globals: [1] ‘x’
[08:08:58.055] | : . Resolving futures part of globals (recursively) ... done
[08:08:58.055] | : . Packages after dropping 'base': [0] 
[08:08:58.055] | : . globals: [1] ‘x’
[08:08:58.055] | : . packages: [0] 
[08:08:58.056] | : getGlobalsAndPackages() ... done
[08:08:58.056] | : run() for ‘Future’ (<unnamed-27>) ...
[08:08:58.056] | : . state: ‘created’
[08:08:58.056] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.057] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.057] | : . Using MultisessionFutureBackend ...
[08:08:58.057] | : . ' Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:58.057] | : . ' Launching futures ...
[08:08:58.057] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:58.057] | : . ' , ; Workers: [n=2]
[08:08:58.057] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:58.059] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:58.059] | : . ' , ; requestWorker() ...
[08:08:58.059] | : . ' , ; ` requestNode() ...
[08:08:58.059] | : . ' , ; ` | Number of workers: 2
[08:08:58.059] | : . ' , ; ` | Polling for a free worker ...
[08:08:58.059] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.060] | : . ' , ; ` | : . Listing all futures
[08:08:58.060] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.060] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.060] | : . ' , ; ` | : Total time: 0
[08:08:58.060] | : . ' , ; ` | Polling for a free worker ... done
[08:08:58.060] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.060] | : . ' , ; ` | : Listing all futures
[08:08:58.060] | : . ' , ; ` | : Number of registered futures: 0
[08:08:58.060] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.060] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:58.061] | : . ' , ; ` | Index of first available worker: 1
[08:08:58.061] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:58.159] | : . ' , ; ` | : Worker is functional
[08:08:58.159] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.159] | : . ' , ; ` | : . Listing all futures
[08:08:58.159] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.159] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.160] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:58.160] | : . ' , ; ` requestNode() ... done
[08:08:58.160] | : . ' , ; ` cluster node index: 1
[08:08:58.160] | : . ' , ; requestWorker() ... done
[08:08:58.160] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:58.160] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:58.161] | : . ' , ; launchFuture() ...
[08:08:58.161] | : . ' , ; ` cluster node index: 1
[08:08:58.161] | : . ' , ; ` getFutureData() ...
[08:08:58.161] | : . ' , ; ` | getFutureCore() ...
[08:08:58.161] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:58.161] | : . ' , ; ` | getFutureCore() ... done
[08:08:58.161] | : . ' , ; ` | getFutureCapture() ...
[08:08:58.161] | : . ' , ; ` | getFutureCapture() ... done
[08:08:58.161] | : . ' , ; ` | getFutureContext() ...
[08:08:58.162] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.162] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:58.162] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.162] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:58.162] | : . ' , ; ` | getFutureContext() ... done
[08:08:58.162] | : . ' , ; ` getFutureData() ... done
[08:08:58.162] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:58.163] | : . ' , ; ` | Appended future to position #1
[08:08:58.163] | : . ' , ; ` | Number of registered futures: 1
[08:08:58.163] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:58.163] | : . ' , ; launchFuture() ... done
[08:08:58.163] | : . ' , ; MultisessionFuture started
[08:08:58.163] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:58.163] | : . ' Launching futures ... done
[08:08:58.163] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:58.165] | : . Using MultisessionFutureBackend ... done
[08:08:58.165] | : run() for ‘Future’ (<unnamed-27>) ... done
[08:08:58.165] | future(..., label = NULL) ... done
[08:08:58.165] | value() for MultisessionFuture (<unnamed-27>) ...
[08:08:58.166] | : result() for ClusterFuture ...
[08:08:58.166] | : . assertValidConnection() ...
[08:08:58.166] | : . ' cluster node index: 1
[08:08:58.166] | : . assertValidConnection() ... done
[08:08:58.166] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:58.166] | : . ' cluster node index: 1
[08:08:58.206] | : . ' [1] TRUE
[08:08:58.206] | : . ' received data:
[08:08:58.206] | : . ' List of 5
[08:08:58.206] | : . '  $ type   : chr "VALUE"
[08:08:58.206] | : . '  $ value  :List of 16
[08:08:58.206] | : . '   ..$ value              :List of 1
[08:08:58.206] | : . '   .. ..$ a: num 1
[08:08:58.206] | : . '   ..$ visible            : logi TRUE
[08:08:58.206] | : . '   ..$ stdout             : chr ""
[08:08:58.206] | : . '   ..$ conditions         : list()
[08:08:58.206] | : . '   ..$ rng                : logi FALSE
[08:08:58.206] | : . '   ..$ seed               : NULL
[08:08:58.206] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:58.206] | : . '   ..$ misuseConnections  :List of 3
[08:08:58.206] | : . '   .. ..$ added   : NULL
[08:08:58.206] | : . '   .. ..$ removed : NULL
[08:08:58.206] | : . '   .. ..$ replaced: NULL
[08:08:58.206] | : . '   ..$ misuseDevices      : NULL
[08:08:58.206] | : . '   ..$ misuseDefaultDevice: list()
[08:08:58.206] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.206] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.206] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "27"
[08:08:58.206] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:58.206] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:58.206] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:58.206] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:58.206] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:58.206] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:58.206] | : . '   .. .. ..$ pid   : int 70439
[08:08:58.206] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:58.206] | : . '   .. .. ..$ random: int 2147483647
[08:08:58.206] | : . '   ..$ r_info             :List of 4
[08:08:58.206] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:58.206] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:58.206] | : . '   .. ..$ os           : chr "unix"
[08:08:58.206] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:58.206] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:58.206] | : . '   ..$ version            : chr "1.8"
[08:08:58.206] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:58.206] | : . '  $ success: logi TRUE
[08:08:58.206] | : . '  $ time   : 'proc_time' Named num [1:5] 0.002 0 0.003 0 0
[08:08:58.206] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:58.206] | : . '  $ tag    : NULL
[08:08:58.217] | : . ' Received FutureResult
[08:08:58.218] | : . ' FutureResult:
[08:08:58.218] | : . ' value: ‘list’
[08:08:58.218] | : . ' visible: TRUE
[08:08:58.218] | : . ' stdout: character
[08:08:58.218] | : . ' conditions: [n = 0] 
[08:08:58.218] | : . ' RNG used: FALSE
[08:08:58.218] | : . ' duration: 0.002657413 secs (started 2025-06-17 08:08:58.203161)
[08:08:58.218] | : . ' version: 1.8
[08:08:58.218] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:58.218] | : . ' , Removed future from position #1
[08:08:58.218] | : . ' , Number of registered futures: 0
[08:08:58.218] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:58.218] | : . ' Erased future from future backend
[08:08:58.219] | : . ' result() for ClusterFuture ...
[08:08:58.219] | : . ' , result already collected: FutureResult
[08:08:58.219] | : . ' result() for ClusterFuture ... done
[08:08:58.219] | : . ' signalConditions() ...
[08:08:58.219] | : . ' , include = ‘immediateCondition’
[08:08:58.219] | : . ' , exclude = 
[08:08:58.219] | : . ' , resignal = FALSE
[08:08:58.219] | : . ' , Number of conditions: 0
[08:08:58.219] | : . ' ,  int 0
[08:08:58.220] | : . ' signalConditions() ... done
[08:08:58.220] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:58.220] | : result() for ClusterFuture ... done
[08:08:58.220] | : result() for ClusterFuture ...
[08:08:58.220] | : . result already collected: FutureResult
[08:08:58.220] | : result() for ClusterFuture ... done
[08:08:58.220] | : signalConditions() ...
[08:08:58.221] | : . include = ‘immediateCondition’
[08:08:58.221] | : . exclude = 
[08:08:58.221] | : . resignal = FALSE
[08:08:58.221] | : . Number of conditions: 0
[08:08:58.221] | : .  int 0
[08:08:58.221] | : signalConditions() ... done
[08:08:58.221] | : relay stdout ...
[08:08:58.222] | : relay stdout ... done
[08:08:58.222] | : check for misuse ...
[08:08:58.222] | : check for misuse ... done
[08:08:58.222] | value() for MultisessionFuture (<unnamed-27>) ... done
$a
[1] 1

[08:08:58.222] | future(..., label = NULL) ...
[08:08:58.222] | : lazy: TRUE
[08:08:58.222] | : stdout: TRUE
[08:08:58.222] | : conditions: [n=1] ‘condition’
[08:08:58.223] | : gc: FALSE
[08:08:58.223] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:58.223] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:58.223] | : . Searching for globals ...
[08:08:58.234] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:58.234] | : . Searching for globals ... done
[08:08:58.234] | : . Resolving globals: TRUE
[08:08:58.234] | : . Resolving any globals that are futures ...
[08:08:58.234] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:58.234] | : . Resolving any globals that are futures ... done
[08:08:58.235] | : . Search for packages associated with the globals ...
[08:08:58.235] | : . ' Packages associated with globals: [1] ‘base’
[08:08:58.235] | : . ' Packages: [1] ‘base’
[08:08:58.235] | : . Search for packages associated with the globals ... done
[08:08:58.235] | : . Resolving futures part of globals (recursively) ...
[08:08:58.235] | : . ' resolve() for FutureGlobals ...
[08:08:58.235] | : . ' , recursive: 99
[08:08:58.236] | : . ' , Number of elements: 1
[08:08:58.236] | : . ' , elements: ‘x’
[08:08:58.236] | : . ' , 'obj' is list
[08:08:58.236] | : . ' , resolve(obj, ...) ...
[08:08:58.236] | : . ' , ; resolve() for list ...
[08:08:58.236] | : . ' , ; ` recursive: 98
[08:08:58.236] | : . ' , ; ` Number of elements: 0
[08:08:58.236] | : . ' , ; resolve() for list ... done
[08:08:58.237] | : . ' , resolve(obj, ...) ... done
[08:08:58.237] | : . ' , resolved() for list ...
[08:08:58.237] | : . ' , ; Number of elements: 0
[08:08:58.237] | : . ' , ; Number of futures: 0
[08:08:58.237] | : . ' , resolved() for list ... done
[08:08:58.237] | : . ' , length: 0 (resolved future 1)
[08:08:58.237] | : . ' resolve() for FutureGlobals ... done
[08:08:58.237] | : . ' globals: [1] ‘x’
[08:08:58.237] | : . Resolving futures part of globals (recursively) ... done
[08:08:58.237] | : . Packages after dropping 'base': [0] 
[08:08:58.238] | : . globals: [1] ‘x’
[08:08:58.238] | : . packages: [0] 
[08:08:58.238] | : getGlobalsAndPackages() ... done
[08:08:58.238] | future(..., label = NULL) ... done
[08:08:58.238] | value() for Future (<unnamed-28>) ...
[08:08:58.238] | : run() for ‘Future’ (<unnamed-28>) ...
[08:08:58.238] | : . state: ‘created’
[08:08:58.239] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.239] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.239] | : . Using MultisessionFutureBackend ...
[08:08:58.239] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:58.239] | : . ' Launching futures ...
[08:08:58.239] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:58.239] | : . ' , ; Workers: [n=2]
[08:08:58.239] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:58.241] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:58.241] | : . ' , ; requestWorker() ...
[08:08:58.241] | : . ' , ; ` requestNode() ...
[08:08:58.241] | : . ' , ; ` | Number of workers: 2
[08:08:58.241] | : . ' , ; ` | Polling for a free worker ...
[08:08:58.241] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.242] | : . ' , ; ` | : . Listing all futures
[08:08:58.242] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.242] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.242] | : . ' , ; ` | : Total time: 0
[08:08:58.242] | : . ' , ; ` | Polling for a free worker ... done
[08:08:58.242] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.242] | : . ' , ; ` | : Listing all futures
[08:08:58.242] | : . ' , ; ` | : Number of registered futures: 0
[08:08:58.242] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.242] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:58.243] | : . ' , ; ` | Index of first available worker: 1
[08:08:58.243] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:58.336] | : . ' , ; ` | : Worker is functional
[08:08:58.336] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.337] | : . ' , ; ` | : . Listing all futures
[08:08:58.337] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.337] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.337] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:58.337] | : . ' , ; ` requestNode() ... done
[08:08:58.337] | : . ' , ; ` cluster node index: 1
[08:08:58.337] | : . ' , ; requestWorker() ... done
[08:08:58.338] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:58.338] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:58.338] | : . ' , ; launchFuture() ...
[08:08:58.338] | : . ' , ; ` cluster node index: 1
[08:08:58.338] | : . ' , ; ` getFutureData() ...
[08:08:58.339] | : . ' , ; ` | getFutureCore() ...
[08:08:58.339] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:58.339] | : . ' , ; ` | getFutureCore() ... done
[08:08:58.339] | : . ' , ; ` | getFutureCapture() ...
[08:08:58.339] | : . ' , ; ` | getFutureCapture() ... done
[08:08:58.339] | : . ' , ; ` | getFutureContext() ...
[08:08:58.339] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.339] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:58.340] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.340] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:58.340] | : . ' , ; ` | getFutureContext() ... done
[08:08:58.340] | : . ' , ; ` getFutureData() ... done
[08:08:58.340] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:58.340] | : . ' , ; ` | Appended future to position #1
[08:08:58.340] | : . ' , ; ` | Number of registered futures: 1
[08:08:58.341] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:58.341] | : . ' , ; launchFuture() ... done
[08:08:58.341] | : . ' , ; MultisessionFuture started
[08:08:58.341] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:58.341] | : . ' Launching futures ... done
[08:08:58.341] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:58.341] | : . Using MultisessionFutureBackend ... done
[08:08:58.341] | : run() for ‘Future’ (<unnamed-28>) ... done
[08:08:58.341] | : result() for ClusterFuture ...
[08:08:58.342] | : . assertValidConnection() ...
[08:08:58.342] | : . ' cluster node index: 1
[08:08:58.342] | : . assertValidConnection() ... done
[08:08:58.342] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:58.342] | : . ' cluster node index: 1
[08:08:58.384] | : . ' [1] TRUE
[08:08:58.384] | : . ' received data:
[08:08:58.384] | : . ' List of 5
[08:08:58.384] | : . '  $ type   : chr "VALUE"
[08:08:58.384] | : . '  $ value  :List of 16
[08:08:58.384] | : . '   ..$ value              :List of 1
[08:08:58.384] | : . '   .. ..$ a: num 1
[08:08:58.384] | : . '   ..$ visible            : logi TRUE
[08:08:58.384] | : . '   ..$ stdout             : chr ""
[08:08:58.384] | : . '   ..$ conditions         : list()
[08:08:58.384] | : . '   ..$ rng                : logi FALSE
[08:08:58.384] | : . '   ..$ seed               : NULL
[08:08:58.384] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:58.384] | : . '   ..$ misuseConnections  :List of 3
[08:08:58.384] | : . '   .. ..$ added   : NULL
[08:08:58.384] | : . '   .. ..$ removed : NULL
[08:08:58.384] | : . '   .. ..$ replaced: NULL
[08:08:58.384] | : . '   ..$ misuseDevices      : NULL
[08:08:58.384] | : . '   ..$ misuseDefaultDevice: list()
[08:08:58.384] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.384] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.384] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "28"
[08:08:58.384] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:58.384] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:58.384] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:58.384] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:58.384] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:58.384] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:58.384] | : . '   .. .. ..$ pid   : int 70439
[08:08:58.384] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:58.384] | : . '   .. .. ..$ random: int 2147483647
[08:08:58.384] | : . '   ..$ r_info             :List of 4
[08:08:58.384] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:58.384] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:58.384] | : . '   .. ..$ os           : chr "unix"
[08:08:58.384] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:58.384] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:58.384] | : . '   ..$ version            : chr "1.8"
[08:08:58.384] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:58.384] | : . '  $ success: logi TRUE
[08:08:58.384] | : . '  $ time   : 'proc_time' Named num [1:5] 0.002 0 0.003 0 0
[08:08:58.384] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:58.384] | : . '  $ tag    : NULL
[08:08:58.396] | : . ' Received FutureResult
[08:08:58.396] | : . ' FutureResult:
[08:08:58.396] | : . ' value: ‘list’
[08:08:58.396] | : . ' visible: TRUE
[08:08:58.396] | : . ' stdout: character
[08:08:58.396] | : . ' conditions: [n = 0] 
[08:08:58.396] | : . ' RNG used: FALSE
[08:08:58.396] | : . ' duration: 0.002586365 secs (started 2025-06-17 08:08:58.381252)
[08:08:58.396] | : . ' version: 1.8
[08:08:58.396] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:58.396] | : . ' , Removed future from position #1
[08:08:58.397] | : . ' , Number of registered futures: 0
[08:08:58.397] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:58.397] | : . ' Erased future from future backend
[08:08:58.397] | : . ' result() for ClusterFuture ...
[08:08:58.397] | : . ' , result already collected: FutureResult
[08:08:58.397] | : . ' result() for ClusterFuture ... done
[08:08:58.397] | : . ' signalConditions() ...
[08:08:58.397] | : . ' , include = ‘immediateCondition’
[08:08:58.397] | : . ' , exclude = 
[08:08:58.398] | : . ' , resignal = FALSE
[08:08:58.398] | : . ' , Number of conditions: 0
[08:08:58.398] | : . ' ,  int 0
[08:08:58.398] | : . ' signalConditions() ... done
[08:08:58.398] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:58.398] | : result() for ClusterFuture ... done
[08:08:58.399] | : result() for ClusterFuture ...
[08:08:58.399] | : . result already collected: FutureResult
[08:08:58.399] | : result() for ClusterFuture ... done
[08:08:58.399] | : signalConditions() ...
[08:08:58.399] | : . include = ‘immediateCondition’
[08:08:58.399] | : . exclude = 
[08:08:58.399] | : . resignal = FALSE
[08:08:58.399] | : . Number of conditions: 0
[08:08:58.399] | : .  int 0
[08:08:58.400] | : signalConditions() ... done
[08:08:58.400] | : relay stdout ...
[08:08:58.400] | : relay stdout ... done
[08:08:58.400] | : check for misuse ...
[08:08:58.400] | : check for misuse ... done
[08:08:58.400] | value() for Future (<unnamed-28>) ... done
$a
[1] 1

[08:08:58.401] | future(..., label = NULL) ...
[08:08:58.401] | : lazy: FALSE
[08:08:58.401] | : stdout: TRUE
[08:08:58.401] | : conditions: [n=1] ‘condition’
[08:08:58.401] | : gc: FALSE
[08:08:58.401] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:58.401] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:58.402] | : . Searching for globals ...
[08:08:58.419] | : . ' globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:58.419] | : . Searching for globals ... done
[08:08:58.419] | : . Resolving globals: TRUE
[08:08:58.419] | : . Resolving any globals that are futures ...
[08:08:58.419] | : . ' globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:58.419] | : . Resolving any globals that are futures ... done
[08:08:58.420] | : . Search for packages associated with the globals ...
[08:08:58.420] | : . ' Packages associated with globals: [1] ‘base’
[08:08:58.420] | : . ' Packages: [1] ‘base’
[08:08:58.420] | : . Search for packages associated with the globals ... done
[08:08:58.420] | : . Packages after dropping 'base': [0] 
[08:08:58.420] | : . globals: [0] 
[08:08:58.420] | : . packages: [0] 
[08:08:58.421] | : getGlobalsAndPackages() ... done
[08:08:58.421] | : run() for ‘Future’ (<unnamed-29>) ...
[08:08:58.421] | : . state: ‘created’
[08:08:58.421] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.421] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.421] | : . Using MultisessionFutureBackend ...
[08:08:58.421] | : . ' Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:58.422] | : . ' Launching futures ...
[08:08:58.422] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:58.422] | : . ' , ; Workers: [n=2]
[08:08:58.422] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:58.423] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:58.424] | : . ' , ; requestWorker() ...
[08:08:58.424] | : . ' , ; ` requestNode() ...
[08:08:58.424] | : . ' , ; ` | Number of workers: 2
[08:08:58.424] | : . ' , ; ` | Polling for a free worker ...
[08:08:58.424] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.424] | : . ' , ; ` | : . Listing all futures
[08:08:58.424] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.424] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.424] | : . ' , ; ` | : Total time: 0
[08:08:58.425] | : . ' , ; ` | Polling for a free worker ... done
[08:08:58.425] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.425] | : . ' , ; ` | : Listing all futures
[08:08:58.425] | : . ' , ; ` | : Number of registered futures: 0
[08:08:58.425] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.425] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:58.425] | : . ' , ; ` | Index of first available worker: 1
[08:08:58.425] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:58.488] | : . ' , ; ` | : Worker is functional
[08:08:58.489] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.489] | : . ' , ; ` | : . Listing all futures
[08:08:58.489] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.489] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.489] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:58.489] | : . ' , ; ` requestNode() ... done
[08:08:58.489] | : . ' , ; ` cluster node index: 1
[08:08:58.490] | : . ' , ; requestWorker() ... done
[08:08:58.490] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:58.490] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:58.490] | : . ' , ; launchFuture() ...
[08:08:58.490] | : . ' , ; ` cluster node index: 1
[08:08:58.491] | : . ' , ; ` getFutureData() ...
[08:08:58.491] | : . ' , ; ` | getFutureCore() ...
[08:08:58.491] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:58.491] | : . ' , ; ` | getFutureCore() ... done
[08:08:58.491] | : . ' , ; ` | getFutureCapture() ...
[08:08:58.491] | : . ' , ; ` | getFutureCapture() ... done
[08:08:58.491] | : . ' , ; ` | getFutureContext() ...
[08:08:58.491] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.491] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:58.492] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.492] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:58.492] | : . ' , ; ` | getFutureContext() ... done
[08:08:58.492] | : . ' , ; ` getFutureData() ... done
[08:08:58.492] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:58.492] | : . ' , ; ` | Appended future to position #1
[08:08:58.493] | : . ' , ; ` | Number of registered futures: 1
[08:08:58.493] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:58.493] | : . ' , ; launchFuture() ... done
[08:08:58.493] | : . ' , ; MultisessionFuture started
[08:08:58.493] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:58.493] | : . ' Launching futures ... done
[08:08:58.493] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:58.493] | : . Using MultisessionFutureBackend ... done
[08:08:58.493] | : run() for ‘Future’ (<unnamed-29>) ... done
[08:08:58.493] | future(..., label = NULL) ... done
[08:08:58.494] | value() for MultisessionFuture (<unnamed-29>) ...
[08:08:58.494] | : result() for ClusterFuture ...
[08:08:58.494] | : . assertValidConnection() ...
[08:08:58.494] | : . ' cluster node index: 1
[08:08:58.494] | : . assertValidConnection() ... done
[08:08:58.495] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:58.495] | : . ' cluster node index: 1
[08:08:58.536] | : . ' [1] TRUE
[08:08:58.536] | : . ' received data:
[08:08:58.536] | : . ' List of 5
[08:08:58.536] | : . '  $ type   : chr "VALUE"
[08:08:58.536] | : . '  $ value  :List of 16
[08:08:58.536] | : . '   ..$ value              :List of 2
[08:08:58.536] | : . '   .. ..$ b: num 2
[08:08:58.536] | : . '   .. ..$ a: num 1
[08:08:58.536] | : . '   ..$ visible            : logi TRUE
[08:08:58.536] | : . '   ..$ stdout             : chr ""
[08:08:58.536] | : . '   ..$ conditions         : list()
[08:08:58.536] | : . '   ..$ rng                : logi FALSE
[08:08:58.536] | : . '   ..$ seed               : NULL
[08:08:58.536] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:58.536] | : . '   ..$ misuseConnections  :List of 3
[08:08:58.536] | : . '   .. ..$ added   : NULL
[08:08:58.536] | : . '   .. ..$ removed : NULL
[08:08:58.536] | : . '   .. ..$ replaced: NULL
[08:08:58.536] | : . '   ..$ misuseDevices      : NULL
[08:08:58.536] | : . '   ..$ misuseDefaultDevice: list()
[08:08:58.536] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.536] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.536] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "29"
[08:08:58.536] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:58.536] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:58.536] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:58.536] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:58.536] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:58.536] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:58.536] | : . '   .. .. ..$ pid   : int 70439
[08:08:58.536] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:58.536] | : . '   .. .. ..$ random: int 2147483647
[08:08:58.536] | : . '   ..$ r_info             :List of 4
[08:08:58.536] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:58.536] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:58.536] | : . '   .. ..$ os           : chr "unix"
[08:08:58.536] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:58.536] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:58.536] | : . '   ..$ version            : chr "1.8"
[08:08:58.536] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:58.536] | : . '  $ success: logi TRUE
[08:08:58.536] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[08:08:58.536] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:58.536] | : . '  $ tag    : NULL
[08:08:58.548] | : . ' Received FutureResult
[08:08:58.548] | : . ' FutureResult:
[08:08:58.548] | : . ' value: ‘list’
[08:08:58.548] | : . ' visible: TRUE
[08:08:58.548] | : . ' stdout: character
[08:08:58.548] | : . ' conditions: [n = 0] 
[08:08:58.548] | : . ' RNG used: FALSE
[08:08:58.548] | : . ' duration: 0.00259757 secs (started 2025-06-17 08:08:58.533187)
[08:08:58.548] | : . ' version: 1.8
[08:08:58.549] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:58.549] | : . ' , Removed future from position #1
[08:08:58.549] | : . ' , Number of registered futures: 0
[08:08:58.549] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:58.549] | : . ' Erased future from future backend
[08:08:58.549] | : . ' result() for ClusterFuture ...
[08:08:58.549] | : . ' , result already collected: FutureResult
[08:08:58.549] | : . ' result() for ClusterFuture ... done
[08:08:58.550] | : . ' signalConditions() ...
[08:08:58.550] | : . ' , include = ‘immediateCondition’
[08:08:58.550] | : . ' , exclude = 
[08:08:58.550] | : . ' , resignal = FALSE
[08:08:58.550] | : . ' , Number of conditions: 0
[08:08:58.550] | : . ' ,  int 0
[08:08:58.550] | : . ' signalConditions() ... done
[08:08:58.551] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:58.551] | : result() for ClusterFuture ... done
[08:08:58.551] | : result() for ClusterFuture ...
[08:08:58.551] | : . result already collected: FutureResult
[08:08:58.551] | : result() for ClusterFuture ... done
[08:08:58.551] | : signalConditions() ...
[08:08:58.551] | : . include = ‘immediateCondition’
[08:08:58.551] | : . exclude = 
[08:08:58.551] | : . resignal = FALSE
[08:08:58.551] | : . Number of conditions: 0
[08:08:58.552] | : .  int 0
[08:08:58.552] | : signalConditions() ... done
[08:08:58.552] | : relay stdout ...
[08:08:58.552] | : relay stdout ... done
[08:08:58.552] | : check for misuse ...
[08:08:58.552] | : check for misuse ... done
[08:08:58.552] | value() for MultisessionFuture (<unnamed-29>) ... done
$b
[1] 2

$a
[1] 1

[08:08:58.553] | future(..., label = NULL) ...
[08:08:58.553] | : lazy: FALSE
[08:08:58.553] | : stdout: TRUE
[08:08:58.553] | : conditions: [n=1] ‘condition’
[08:08:58.553] | : gc: FALSE
[08:08:58.553] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:58.553] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:58.554] | : . Searching for globals ...
[08:08:58.564] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:58.564] | : . Searching for globals ... done
[08:08:58.564] | : . Resolving globals: TRUE
[08:08:58.564] | : . Resolving any globals that are futures ...
[08:08:58.565] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:58.565] | : . Resolving any globals that are futures ... done
[08:08:58.565] | : . Search for packages associated with the globals ...
[08:08:58.565] | : . ' Packages associated with globals: [1] ‘base’
[08:08:58.565] | : . ' Packages: [1] ‘base’
[08:08:58.565] | : . Search for packages associated with the globals ... done
[08:08:58.566] | : . Resolving futures part of globals (recursively) ...
[08:08:58.566] | : . ' resolve() for FutureGlobals ...
[08:08:58.566] | : . ' , recursive: 99
[08:08:58.566] | : . ' , Number of elements: 1
[08:08:58.566] | : . ' , elements: ‘x’
[08:08:58.566] | : . ' , 'obj' is list
[08:08:58.566] | : . ' , resolve(obj, ...) ...
[08:08:58.566] | : . ' , ; resolve() for list ...
[08:08:58.567] | : . ' , ; ` recursive: 98
[08:08:58.567] | : . ' , ; ` Number of elements: 0
[08:08:58.567] | : . ' , ; resolve() for list ... done
[08:08:58.567] | : . ' , resolve(obj, ...) ... done
[08:08:58.567] | : . ' , resolved() for list ...
[08:08:58.567] | : . ' , ; Number of elements: 0
[08:08:58.567] | : . ' , ; Number of futures: 0
[08:08:58.567] | : . ' , resolved() for list ... done
[08:08:58.567] | : . ' , length: 0 (resolved future 1)
[08:08:58.567] | : . ' resolve() for FutureGlobals ... done
[08:08:58.568] | : . ' globals: [1] ‘x’
[08:08:58.568] | : . Resolving futures part of globals (recursively) ... done
[08:08:58.568] | : . Packages after dropping 'base': [0] 
[08:08:58.568] | : . globals: [1] ‘x’
[08:08:58.568] | : . packages: [0] 
[08:08:58.568] | : getGlobalsAndPackages() ... done
[08:08:58.568] | : run() for ‘Future’ (<unnamed-30>) ...
[08:08:58.568] | : . state: ‘created’
[08:08:58.569] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.569] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.569] | : . Using MultisessionFutureBackend ...
[08:08:58.569] | : . ' Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:58.569] | : . ' Launching futures ...
[08:08:58.569] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:58.569] | : . ' , ; Workers: [n=2]
[08:08:58.569] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:58.571] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:58.571] | : . ' , ; requestWorker() ...
[08:08:58.571] | : . ' , ; ` requestNode() ...
[08:08:58.571] | : . ' , ; ` | Number of workers: 2
[08:08:58.571] | : . ' , ; ` | Polling for a free worker ...
[08:08:58.571] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.572] | : . ' , ; ` | : . Listing all futures
[08:08:58.573] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.574] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.574] | : . ' , ; ` | : Total time: 0
[08:08:58.574] | : . ' , ; ` | Polling for a free worker ... done
[08:08:58.574] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.574] | : . ' , ; ` | : Listing all futures
[08:08:58.574] | : . ' , ; ` | : Number of registered futures: 0
[08:08:58.574] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.574] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:58.574] | : . ' , ; ` | Index of first available worker: 1
[08:08:58.575] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:58.670] | : . ' , ; ` | : Worker is functional
[08:08:58.670] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.670] | : . ' , ; ` | : . Listing all futures
[08:08:58.671] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.671] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.671] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:58.671] | : . ' , ; ` requestNode() ... done
[08:08:58.671] | : . ' , ; ` cluster node index: 1
[08:08:58.671] | : . ' , ; requestWorker() ... done
[08:08:58.671] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:58.672] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:58.672] | : . ' , ; launchFuture() ...
[08:08:58.672] | : . ' , ; ` cluster node index: 1
[08:08:58.672] | : . ' , ; ` getFutureData() ...
[08:08:58.672] | : . ' , ; ` | getFutureCore() ...
[08:08:58.672] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:58.672] | : . ' , ; ` | getFutureCore() ... done
[08:08:58.672] | : . ' , ; ` | getFutureCapture() ...
[08:08:58.672] | : . ' , ; ` | getFutureCapture() ... done
[08:08:58.673] | : . ' , ; ` | getFutureContext() ...
[08:08:58.673] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.673] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:58.673] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.673] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:58.673] | : . ' , ; ` | getFutureContext() ... done
[08:08:58.673] | : . ' , ; ` getFutureData() ... done
[08:08:58.674] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:58.674] | : . ' , ; ` | Appended future to position #1
[08:08:58.674] | : . ' , ; ` | Number of registered futures: 1
[08:08:58.674] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:58.674] | : . ' , ; launchFuture() ... done
[08:08:58.674] | : . ' , ; MultisessionFuture started
[08:08:58.674] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:58.674] | : . ' Launching futures ... done
[08:08:58.674] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:58.675] | : . Using MultisessionFutureBackend ... done
[08:08:58.675] | : run() for ‘Future’ (<unnamed-30>) ... done
[08:08:58.675] | future(..., label = NULL) ... done
[08:08:58.675] | value() for MultisessionFuture (<unnamed-30>) ...
[08:08:58.675] | : result() for ClusterFuture ...
[08:08:58.675] | : . assertValidConnection() ...
[08:08:58.675] | : . ' cluster node index: 1
[08:08:58.676] | : . assertValidConnection() ... done
[08:08:58.676] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:58.676] | : . ' cluster node index: 1
[08:08:58.718] | : . ' [1] TRUE
[08:08:58.718] | : . ' received data:
[08:08:58.719] | : . ' List of 5
[08:08:58.719] | : . '  $ type   : chr "VALUE"
[08:08:58.719] | : . '  $ value  :List of 16
[08:08:58.719] | : . '   ..$ value              :List of 1
[08:08:58.719] | : . '   .. ..$ a: num 1
[08:08:58.719] | : . '   ..$ visible            : logi TRUE
[08:08:58.719] | : . '   ..$ stdout             : chr ""
[08:08:58.719] | : . '   ..$ conditions         : list()
[08:08:58.719] | : . '   ..$ rng                : logi FALSE
[08:08:58.719] | : . '   ..$ seed               : NULL
[08:08:58.719] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:58.719] | : . '   ..$ misuseConnections  :List of 3
[08:08:58.719] | : . '   .. ..$ added   : NULL
[08:08:58.719] | : . '   .. ..$ removed : NULL
[08:08:58.719] | : . '   .. ..$ replaced: NULL
[08:08:58.719] | : . '   ..$ misuseDevices      : NULL
[08:08:58.719] | : . '   ..$ misuseDefaultDevice: list()
[08:08:58.719] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.719] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.719] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "30"
[08:08:58.719] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:58.719] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:58.719] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:58.719] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:58.719] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:58.719] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:58.719] | : . '   .. .. ..$ pid   : int 70439
[08:08:58.719] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:58.719] | : . '   .. .. ..$ random: int 2147483647
[08:08:58.719] | : . '   ..$ r_info             :List of 4
[08:08:58.719] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:58.719] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:58.719] | : . '   .. ..$ os           : chr "unix"
[08:08:58.719] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:58.719] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:58.719] | : . '   ..$ version            : chr "1.8"
[08:08:58.719] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:58.719] | : . '  $ success: logi TRUE
[08:08:58.719] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[08:08:58.719] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:58.719] | : . '  $ tag    : NULL
[08:08:58.730] | : . ' Received FutureResult
[08:08:58.730] | : . ' FutureResult:
[08:08:58.730] | : . ' value: ‘list’
[08:08:58.730] | : . ' visible: TRUE
[08:08:58.730] | : . ' stdout: character
[08:08:58.730] | : . ' conditions: [n = 0] 
[08:08:58.730] | : . ' RNG used: FALSE
[08:08:58.730] | : . ' duration: 0.002809286 secs (started 2025-06-17 08:08:58.715199)
[08:08:58.730] | : . ' version: 1.8
[08:08:58.730] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:58.730] | : . ' , Removed future from position #1
[08:08:58.730] | : . ' , Number of registered futures: 0
[08:08:58.731] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:58.731] | : . ' Erased future from future backend
[08:08:58.731] | : . ' result() for ClusterFuture ...
[08:08:58.731] | : . ' , result already collected: FutureResult
[08:08:58.731] | : . ' result() for ClusterFuture ... done
[08:08:58.731] | : . ' signalConditions() ...
[08:08:58.731] | : . ' , include = ‘immediateCondition’
[08:08:58.731] | : . ' , exclude = 
[08:08:58.731] | : . ' , resignal = FALSE
[08:08:58.731] | : . ' , Number of conditions: 0
[08:08:58.732] | : . ' ,  int 0
[08:08:58.732] | : . ' signalConditions() ... done
[08:08:58.732] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:58.732] | : result() for ClusterFuture ... done
[08:08:58.732] | : result() for ClusterFuture ...
[08:08:58.732] | : . result already collected: FutureResult
[08:08:58.733] | : result() for ClusterFuture ... done
[08:08:58.733] | : signalConditions() ...
[08:08:58.733] | : . include = ‘immediateCondition’
[08:08:58.733] | : . exclude = 
[08:08:58.733] | : . resignal = FALSE
[08:08:58.733] | : . Number of conditions: 0
[08:08:58.733] | : .  int 0
[08:08:58.734] | : signalConditions() ... done
[08:08:58.734] | : relay stdout ...
[08:08:58.734] | : relay stdout ... done
[08:08:58.734] | : check for misuse ...
[08:08:58.734] | : check for misuse ... done
[08:08:58.734] | value() for MultisessionFuture (<unnamed-30>) ... done
$a
[1] 1

[08:08:58.734] | future(..., label = NULL) ...
[08:08:58.734] | : lazy: TRUE
[08:08:58.734] | : stdout: TRUE
[08:08:58.734] | : conditions: [n=1] ‘condition’
[08:08:58.735] | : gc: FALSE
[08:08:58.735] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:58.735] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:58.735] | : . Searching for globals ...
[08:08:58.746] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:58.746] | : . Searching for globals ... done
[08:08:58.746] | : . Resolving globals: TRUE
[08:08:58.746] | : . Resolving any globals that are futures ...
[08:08:58.746] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:58.746] | : . Resolving any globals that are futures ... done
[08:08:58.746] | : . Search for packages associated with the globals ...
[08:08:58.747] | : . ' Packages associated with globals: [1] ‘base’
[08:08:58.747] | : . ' Packages: [1] ‘base’
[08:08:58.747] | : . Search for packages associated with the globals ... done
[08:08:58.747] | : . Resolving futures part of globals (recursively) ...
[08:08:58.747] | : . ' resolve() for FutureGlobals ...
[08:08:58.747] | : . ' , recursive: 99
[08:08:58.748] | : . ' , Number of elements: 1
[08:08:58.748] | : . ' , elements: ‘x’
[08:08:58.748] | : . ' , 'obj' is list
[08:08:58.748] | : . ' , resolve(obj, ...) ...
[08:08:58.748] | : . ' , ; resolve() for list ...
[08:08:58.748] | : . ' , ; ` recursive: 98
[08:08:58.748] | : . ' , ; ` Number of elements: 0
[08:08:58.748] | : . ' , ; resolve() for list ... done
[08:08:58.748] | : . ' , resolve(obj, ...) ... done
[08:08:58.749] | : . ' , resolved() for list ...
[08:08:58.749] | : . ' , ; Number of elements: 0
[08:08:58.749] | : . ' , ; Number of futures: 0
[08:08:58.749] | : . ' , resolved() for list ... done
[08:08:58.749] | : . ' , length: 0 (resolved future 1)
[08:08:58.749] | : . ' resolve() for FutureGlobals ... done
[08:08:58.749] | : . ' globals: [1] ‘x’
[08:08:58.749] | : . Resolving futures part of globals (recursively) ... done
[08:08:58.749] | : . Packages after dropping 'base': [0] 
[08:08:58.750] | : . globals: [1] ‘x’
[08:08:58.750] | : . packages: [0] 
[08:08:58.750] | : getGlobalsAndPackages() ... done
[08:08:58.750] | future(..., label = NULL) ... done
[08:08:58.750] | value() for Future (<unnamed-31>) ...
[08:08:58.750] | : run() for ‘Future’ (<unnamed-31>) ...
[08:08:58.750] | : . state: ‘created’
[08:08:58.750] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.751] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.751] | : . Using MultisessionFutureBackend ...
[08:08:58.751] | : . ' Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:58.751] | : . ' Launching futures ...
[08:08:58.751] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:58.751] | : . ' , ; Workers: [n=2]
[08:08:58.751] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:58.753] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:58.753] | : . ' , ; requestWorker() ...
[08:08:58.753] | : . ' , ; ` requestNode() ...
[08:08:58.753] | : . ' , ; ` | Number of workers: 2
[08:08:58.753] | : . ' , ; ` | Polling for a free worker ...
[08:08:58.753] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.753] | : . ' , ; ` | : . Listing all futures
[08:08:58.754] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.754] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.754] | : . ' , ; ` | : Total time: 0
[08:08:58.754] | : . ' , ; ` | Polling for a free worker ... done
[08:08:58.754] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.754] | : . ' , ; ` | : Listing all futures
[08:08:58.754] | : . ' , ; ` | : Number of registered futures: 0
[08:08:58.754] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.754] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:58.754] | : . ' , ; ` | Index of first available worker: 1
[08:08:58.755] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:58.847] | : . ' , ; ` | : Worker is functional
[08:08:58.848] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.848] | : . ' , ; ` | : . Listing all futures
[08:08:58.848] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.848] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.848] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:58.848] | : . ' , ; ` requestNode() ... done
[08:08:58.848] | : . ' , ; ` cluster node index: 1
[08:08:58.848] | : . ' , ; requestWorker() ... done
[08:08:58.849] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:58.849] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:58.849] | : . ' , ; launchFuture() ...
[08:08:58.849] | : . ' , ; ` cluster node index: 1
[08:08:58.849] | : . ' , ; ` getFutureData() ...
[08:08:58.849] | : . ' , ; ` | getFutureCore() ...
[08:08:58.850] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:58.850] | : . ' , ; ` | getFutureCore() ... done
[08:08:58.850] | : . ' , ; ` | getFutureCapture() ...
[08:08:58.850] | : . ' , ; ` | getFutureCapture() ... done
[08:08:58.850] | : . ' , ; ` | getFutureContext() ...
[08:08:58.850] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.850] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:58.850] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.850] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:58.851] | : . ' , ; ` | getFutureContext() ... done
[08:08:58.851] | : . ' , ; ` getFutureData() ... done
[08:08:58.851] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:58.851] | : . ' , ; ` | Appended future to position #1
[08:08:58.851] | : . ' , ; ` | Number of registered futures: 1
[08:08:58.851] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:58.852] | : . ' , ; launchFuture() ... done
[08:08:58.852] | : . ' , ; MultisessionFuture started
[08:08:58.852] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:58.852] | : . ' Launching futures ... done
[08:08:58.852] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:58.852] | : . Using MultisessionFutureBackend ... done
[08:08:58.852] | : run() for ‘Future’ (<unnamed-31>) ... done
[08:08:58.852] | : result() for ClusterFuture ...
[08:08:58.852] | : . assertValidConnection() ...
[08:08:58.853] | : . ' cluster node index: 1
[08:08:58.853] | : . assertValidConnection() ... done
[08:08:58.853] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:58.853] | : . ' cluster node index: 1
[08:08:58.897] | : . ' [1] TRUE
[08:08:58.897] | : . ' received data:
[08:08:58.897] | : . ' List of 5
[08:08:58.897] | : . '  $ type   : chr "VALUE"
[08:08:58.897] | : . '  $ value  :List of 16
[08:08:58.897] | : . '   ..$ value              :List of 1
[08:08:58.897] | : . '   .. ..$ a: num 1
[08:08:58.897] | : . '   ..$ visible            : logi TRUE
[08:08:58.897] | : . '   ..$ stdout             : chr ""
[08:08:58.897] | : . '   ..$ conditions         : list()
[08:08:58.897] | : . '   ..$ rng                : logi FALSE
[08:08:58.897] | : . '   ..$ seed               : NULL
[08:08:58.897] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:58.897] | : . '   ..$ misuseConnections  :List of 3
[08:08:58.897] | : . '   .. ..$ added   : NULL
[08:08:58.897] | : . '   .. ..$ removed : NULL
[08:08:58.897] | : . '   .. ..$ replaced: NULL
[08:08:58.897] | : . '   ..$ misuseDevices      : NULL
[08:08:58.897] | : . '   ..$ misuseDefaultDevice: list()
[08:08:58.897] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.897] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:58"
[08:08:58.897] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "31"
[08:08:58.897] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:58.897] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:58.897] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:58.897] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:58.897] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:58.897] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:58.897] | : . '   .. .. ..$ pid   : int 70439
[08:08:58.897] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:58.897] | : . '   .. .. ..$ random: int 2147483647
[08:08:58.897] | : . '   ..$ r_info             :List of 4
[08:08:58.897] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:58.897] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:58.897] | : . '   .. ..$ os           : chr "unix"
[08:08:58.897] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:58.897] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:58.897] | : . '   ..$ version            : chr "1.8"
[08:08:58.897] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:58.897] | : . '  $ success: logi TRUE
[08:08:58.897] | : . '  $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[08:08:58.897] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:58.897] | : . '  $ tag    : NULL
[08:08:58.911] | : . ' Received FutureResult
[08:08:58.911] | : . ' FutureResult:
[08:08:58.911] | : . ' value: ‘list’
[08:08:58.911] | : . ' visible: TRUE
[08:08:58.911] | : . ' stdout: character
[08:08:58.911] | : . ' conditions: [n = 0] 
[08:08:58.911] | : . ' RNG used: FALSE
[08:08:58.911] | : . ' duration: 0.004698992 secs (started 2025-06-17 08:08:58.89218)
[08:08:58.911] | : . ' version: 1.8
[08:08:58.911] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:58.912] | : . ' , Removed future from position #1
[08:08:58.912] | : . ' , Number of registered futures: 0
[08:08:58.912] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:58.912] | : . ' Erased future from future backend
[08:08:58.912] | : . ' result() for ClusterFuture ...
[08:08:58.912] | : . ' , result already collected: FutureResult
[08:08:58.912] | : . ' result() for ClusterFuture ... done
[08:08:58.912] | : . ' signalConditions() ...
[08:08:58.912] | : . ' , include = ‘immediateCondition’
[08:08:58.913] | : . ' , exclude = 
[08:08:58.913] | : . ' , resignal = FALSE
[08:08:58.913] | : . ' , Number of conditions: 0
[08:08:58.913] | : . ' ,  int 0
[08:08:58.913] | : . ' signalConditions() ... done
[08:08:58.913] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:58.913] | : result() for ClusterFuture ... done
[08:08:58.914] | : result() for ClusterFuture ...
[08:08:58.914] | : . result already collected: FutureResult
[08:08:58.914] | : result() for ClusterFuture ... done
[08:08:58.914] | : signalConditions() ...
[08:08:58.914] | : . include = ‘immediateCondition’
[08:08:58.914] | : . exclude = 
[08:08:58.914] | : . resignal = FALSE
[08:08:58.914] | : . Number of conditions: 0
[08:08:58.914] | : .  int 0
[08:08:58.915] | : signalConditions() ... done
[08:08:58.915] | : relay stdout ...
[08:08:58.915] | : relay stdout ... done
[08:08:58.915] | : check for misuse ...
[08:08:58.915] | : check for misuse ... done
[08:08:58.915] | value() for Future (<unnamed-31>) ... done
$a
[1] 1

[08:08:58.916] | future(..., label = NULL) ...
[08:08:58.916] | : lazy: FALSE
[08:08:58.916] | : stdout: TRUE
[08:08:58.916] | : conditions: [n=1] ‘condition’
[08:08:58.916] | : gc: FALSE
[08:08:58.916] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:58.916] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:58.916] | : . Searching for globals ...
[08:08:58.927] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:58.927] | : . Searching for globals ... done
[08:08:58.928] | : . Resolving globals: TRUE
[08:08:58.928] | : . Resolving any globals that are futures ...
[08:08:58.928] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:58.928] | : . Resolving any globals that are futures ... done
[08:08:58.928] | : . Search for packages associated with the globals ...
[08:08:58.928] | : . ' Packages associated with globals: [1] ‘base’
[08:08:58.929] | : . ' Packages: [1] ‘base’
[08:08:58.929] | : . Search for packages associated with the globals ... done
[08:08:58.929] | : . Resolving futures part of globals (recursively) ...
[08:08:58.929] | : . ' resolve() for FutureGlobals ...
[08:08:58.929] | : . ' , recursive: 99
[08:08:58.929] | : . ' , Number of elements: 1
[08:08:58.929] | : . ' , elements: ‘x’
[08:08:58.929] | : . ' , 'obj' is list
[08:08:58.930] | : . ' , resolve(obj, ...) ...
[08:08:58.930] | : . ' , ; resolve() for list ...
[08:08:58.930] | : . ' , ; ` recursive: 98
[08:08:58.930] | : . ' , ; ` Number of elements: 0
[08:08:58.930] | : . ' , ; resolve() for list ... done
[08:08:58.930] | : . ' , resolve(obj, ...) ... done
[08:08:58.930] | : . ' , resolved() for list ...
[08:08:58.930] | : . ' , ; Number of elements: 0
[08:08:58.930] | : . ' , ; Number of futures: 0
[08:08:58.930] | : . ' , resolved() for list ... done
[08:08:58.931] | : . ' , length: 0 (resolved future 1)
[08:08:58.931] | : . ' resolve() for FutureGlobals ... done
[08:08:58.931] | : . ' globals: [1] ‘x’
[08:08:58.931] | : . Resolving futures part of globals (recursively) ... done
[08:08:58.931] | : . Packages after dropping 'base': [0] 
[08:08:58.931] | : . globals: [1] ‘x’
[08:08:58.931] | : . packages: [0] 
[08:08:58.931] | : getGlobalsAndPackages() ... done
[08:08:58.932] | : run() for ‘Future’ (<unnamed-32>) ...
[08:08:58.932] | : . state: ‘created’
[08:08:58.932] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:58.932] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:58.932] | : . Using MultisessionFutureBackend ...
[08:08:58.932] | : . ' Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:08:58.932] | : . ' Launching futures ...
[08:08:58.932] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:58.933] | : . ' , ; Workers: [n=2]
[08:08:58.933] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:58.934] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:58.934] | : . ' , ; requestWorker() ...
[08:08:58.934] | : . ' , ; ` requestNode() ...
[08:08:58.935] | : . ' , ; ` | Number of workers: 2
[08:08:58.935] | : . ' , ; ` | Polling for a free worker ...
[08:08:58.935] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.935] | : . ' , ; ` | : . Listing all futures
[08:08:58.935] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:58.935] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.935] | : . ' , ; ` | : Total time: 0
[08:08:58.935] | : . ' , ; ` | Polling for a free worker ... done
[08:08:58.935] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:58.935] | : . ' , ; ` | : Listing all futures
[08:08:58.936] | : . ' , ; ` | : Number of registered futures: 0
[08:08:58.936] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:58.936] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:58.936] | : . ' , ; ` | Index of first available worker: 1
[08:08:58.936] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:59.029] | : . ' , ; ` | : Worker is functional
[08:08:59.029] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.029] | : . ' , ; ` | : . Listing all futures
[08:08:59.030] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:59.030] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.030] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:59.030] | : . ' , ; ` requestNode() ... done
[08:08:59.030] | : . ' , ; ` cluster node index: 1
[08:08:59.030] | : . ' , ; requestWorker() ... done
[08:08:59.030] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:59.031] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:59.031] | : . ' , ; launchFuture() ...
[08:08:59.031] | : . ' , ; ` cluster node index: 1
[08:08:59.031] | : . ' , ; ` getFutureData() ...
[08:08:59.031] | : . ' , ; ` | getFutureCore() ...
[08:08:59.031] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:59.031] | : . ' , ; ` | getFutureCore() ... done
[08:08:59.032] | : . ' , ; ` | getFutureCapture() ...
[08:08:59.032] | : . ' , ; ` | getFutureCapture() ... done
[08:08:59.032] | : . ' , ; ` | getFutureContext() ...
[08:08:59.032] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.032] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:59.032] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.032] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:59.032] | : . ' , ; ` | getFutureContext() ... done
[08:08:59.032] | : . ' , ; ` getFutureData() ... done
[08:08:59.033] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:59.033] | : . ' , ; ` | Appended future to position #1
[08:08:59.033] | : . ' , ; ` | Number of registered futures: 1
[08:08:59.033] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:59.033] | : . ' , ; launchFuture() ... done
[08:08:59.033] | : . ' , ; MultisessionFuture started
[08:08:59.033] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:59.034] | : . ' Launching futures ... done
[08:08:59.034] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:59.034] | : . Using MultisessionFutureBackend ... done
[08:08:59.034] | : run() for ‘Future’ (<unnamed-32>) ... done
[08:08:59.034] | future(..., label = NULL) ... done
[08:08:59.034] | value() for MultisessionFuture (<unnamed-32>) ...
[08:08:59.034] | : result() for ClusterFuture ...
[08:08:59.035] | : . assertValidConnection() ...
[08:08:59.035] | : . ' cluster node index: 1
[08:08:59.035] | : . assertValidConnection() ... done
[08:08:59.035] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:59.035] | : . ' cluster node index: 1
[08:08:59.077] | : . ' [1] TRUE
[08:08:59.078] | : . ' received data:
[08:08:59.078] | : . ' List of 5
[08:08:59.078] | : . '  $ type   : chr "VALUE"
[08:08:59.078] | : . '  $ value  :List of 16
[08:08:59.078] | : . '   ..$ value              :List of 1
[08:08:59.078] | : . '   .. ..$ a: num 1
[08:08:59.078] | : . '   ..$ visible            : logi TRUE
[08:08:59.078] | : . '   ..$ stdout             : chr ""
[08:08:59.078] | : . '   ..$ conditions         : list()
[08:08:59.078] | : . '   ..$ rng                : logi FALSE
[08:08:59.078] | : . '   ..$ seed               : NULL
[08:08:59.078] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:59.078] | : . '   ..$ misuseConnections  :List of 3
[08:08:59.078] | : . '   .. ..$ added   : NULL
[08:08:59.078] | : . '   .. ..$ removed : NULL
[08:08:59.078] | : . '   .. ..$ replaced: NULL
[08:08:59.078] | : . '   ..$ misuseDevices      : NULL
[08:08:59.078] | : . '   ..$ misuseDefaultDevice: list()
[08:08:59.078] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:59"
[08:08:59.078] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:59"
[08:08:59.078] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "32"
[08:08:59.078] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:59.078] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:59.078] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:59.078] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:59.078] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:59.078] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:59.078] | : . '   .. .. ..$ pid   : int 70439
[08:08:59.078] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:59.078] | : . '   .. .. ..$ random: int 2147483647
[08:08:59.078] | : . '   ..$ r_info             :List of 4
[08:08:59.078] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:59.078] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:59.078] | : . '   .. ..$ os           : chr "unix"
[08:08:59.078] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:59.078] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:59.078] | : . '   ..$ version            : chr "1.8"
[08:08:59.078] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:59.078] | : . '  $ success: logi TRUE
[08:08:59.078] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:59.078] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:59.078] | : . '  $ tag    : NULL
[08:08:59.089] | : . ' Received FutureResult
[08:08:59.089] | : . ' FutureResult:
[08:08:59.089] | : . ' value: ‘list’
[08:08:59.089] | : . ' visible: TRUE
[08:08:59.089] | : . ' stdout: character
[08:08:59.089] | : . ' conditions: [n = 0] 
[08:08:59.089] | : . ' RNG used: FALSE
[08:08:59.089] | : . ' duration: 0.002969027 secs (started 2025-06-17 08:08:59.074299)
[08:08:59.089] | : . ' version: 1.8
[08:08:59.090] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:59.090] | : . ' , Removed future from position #1
[08:08:59.090] | : . ' , Number of registered futures: 0
[08:08:59.090] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:59.090] | : . ' Erased future from future backend
[08:08:59.091] | : . ' result() for ClusterFuture ...
[08:08:59.091] | : . ' , result already collected: FutureResult
[08:08:59.091] | : . ' result() for ClusterFuture ... done
[08:08:59.091] | : . ' signalConditions() ...
[08:08:59.091] | : . ' , include = ‘immediateCondition’
[08:08:59.091] | : . ' , exclude = 
[08:08:59.091] | : . ' , resignal = FALSE
[08:08:59.091] | : . ' , Number of conditions: 0
[08:08:59.091] | : . ' ,  int 0
[08:08:59.092] | : . ' signalConditions() ... done
[08:08:59.092] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:59.092] | : result() for ClusterFuture ... done
[08:08:59.092] | : result() for ClusterFuture ...
[08:08:59.092] | : . result already collected: FutureResult
[08:08:59.092] | : result() for ClusterFuture ... done
[08:08:59.092] | : signalConditions() ...
[08:08:59.093] | : . include = ‘immediateCondition’
[08:08:59.093] | : . exclude = 
[08:08:59.093] | : . resignal = FALSE
[08:08:59.093] | : . Number of conditions: 0
[08:08:59.093] | : .  int 0
[08:08:59.093] | : signalConditions() ... done
[08:08:59.093] | : relay stdout ...
[08:08:59.094] | : relay stdout ... done
[08:08:59.094] | : check for misuse ...
[08:08:59.094] | : check for misuse ... done
[08:08:59.094] | value() for MultisessionFuture (<unnamed-32>) ... done
$a
[1] 1

[08:08:59.094] | future(..., label = NULL) ...
[08:08:59.094] | : lazy: FALSE
[08:08:59.094] | : stdout: TRUE
[08:08:59.094] | : conditions: [n=1] ‘condition’
[08:08:59.094] | : gc: FALSE
[08:08:59.095] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:59.095] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:59.095] | : . Searching for globals ...
[08:08:59.109] | : . ' globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:59.109] | : . Searching for globals ... done
[08:08:59.109] | : . Resolving globals: TRUE
[08:08:59.109] | : . Resolving any globals that are futures ...
[08:08:59.109] | : . ' globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:59.110] | : . Resolving any globals that are futures ... done
[08:08:59.110] | : . Search for packages associated with the globals ...
[08:08:59.110] | : . ' Packages associated with globals: [1] ‘base’
[08:08:59.110] | : . ' Packages: [1] ‘base’
[08:08:59.110] | : . Search for packages associated with the globals ... done
[08:08:59.110] | : . Resolving futures part of globals (recursively) ...
[08:08:59.111] | : . ' resolve() for FutureGlobals ...
[08:08:59.111] | : . ' , recursive: 99
[08:08:59.111] | : . ' , Number of elements: 1
[08:08:59.111] | : . ' , elements: ‘x’
[08:08:59.111] | : . ' , 'obj' is list
[08:08:59.111] | : . ' , resolve(obj, ...) ...
[08:08:59.111] | : . ' , ; resolve() for list ...
[08:08:59.111] | : . ' , ; ` recursive: 98
[08:08:59.112] | : . ' , ; ` Number of elements: 0
[08:08:59.112] | : . ' , ; resolve() for list ... done
[08:08:59.112] | : . ' , resolve(obj, ...) ... done
[08:08:59.112] | : . ' , resolved() for list ...
[08:08:59.112] | : . ' , ; Number of elements: 0
[08:08:59.112] | : . ' , ; Number of futures: 0
[08:08:59.112] | : . ' , resolved() for list ... done
[08:08:59.112] | : . ' , length: 0 (resolved future 1)
[08:08:59.112] | : . ' resolve() for FutureGlobals ... done
[08:08:59.112] | : . ' globals: [1] ‘x’
[08:08:59.113] | : . Resolving futures part of globals (recursively) ... done
[08:08:59.113] | : . Packages after dropping 'base': [0] 
[08:08:59.113] | : . globals: [1] ‘x’
[08:08:59.113] | : . packages: [0] 
[08:08:59.113] | : getGlobalsAndPackages() ... done
[08:08:59.113] | : run() for ‘Future’ (<unnamed-33>) ...
[08:08:59.113] | : . state: ‘created’
[08:08:59.113] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.114] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.114] | : . Using MultisessionFutureBackend ...
[08:08:59.114] | : . ' Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:59.114] | : . ' Launching futures ...
[08:08:59.114] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:59.114] | : . ' , ; Workers: [n=2]
[08:08:59.114] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:59.116] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:59.116] | : . ' , ; requestWorker() ...
[08:08:59.116] | : . ' , ; ` requestNode() ...
[08:08:59.116] | : . ' , ; ` | Number of workers: 2
[08:08:59.116] | : . ' , ; ` | Polling for a free worker ...
[08:08:59.116] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.116] | : . ' , ; ` | : . Listing all futures
[08:08:59.117] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:59.117] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.117] | : . ' , ; ` | : Total time: 0
[08:08:59.117] | : . ' , ; ` | Polling for a free worker ... done
[08:08:59.117] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.117] | : . ' , ; ` | : Listing all futures
[08:08:59.117] | : . ' , ; ` | : Number of registered futures: 0
[08:08:59.117] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.117] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:59.118] | : . ' , ; ` | Index of first available worker: 1
[08:08:59.118] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:59.215] | : . ' , ; ` | : Worker is functional
[08:08:59.216] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.216] | : . ' , ; ` | : . Listing all futures
[08:08:59.216] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:59.216] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.216] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:59.216] | : . ' , ; ` requestNode() ... done
[08:08:59.216] | : . ' , ; ` cluster node index: 1
[08:08:59.216] | : . ' , ; requestWorker() ... done
[08:08:59.217] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:59.217] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:59.217] | : . ' , ; launchFuture() ...
[08:08:59.217] | : . ' , ; ` cluster node index: 1
[08:08:59.217] | : . ' , ; ` getFutureData() ...
[08:08:59.217] | : . ' , ; ` | getFutureCore() ...
[08:08:59.218] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:59.218] | : . ' , ; ` | getFutureCore() ... done
[08:08:59.218] | : . ' , ; ` | getFutureCapture() ...
[08:08:59.218] | : . ' , ; ` | getFutureCapture() ... done
[08:08:59.218] | : . ' , ; ` | getFutureContext() ...
[08:08:59.218] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.218] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:59.218] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.218] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:59.219] | : . ' , ; ` | getFutureContext() ... done
[08:08:59.219] | : . ' , ; ` getFutureData() ... done
[08:08:59.219] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:59.219] | : . ' , ; ` | Appended future to position #1
[08:08:59.219] | : . ' , ; ` | Number of registered futures: 1
[08:08:59.219] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:59.219] | : . ' , ; launchFuture() ... done
[08:08:59.220] | : . ' , ; MultisessionFuture started
[08:08:59.220] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:59.220] | : . ' Launching futures ... done
[08:08:59.220] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:59.220] | : . Using MultisessionFutureBackend ... done
[08:08:59.220] | : run() for ‘Future’ (<unnamed-33>) ... done
[08:08:59.220] | future(..., label = NULL) ... done
[08:08:59.220] | value() for MultisessionFuture (<unnamed-33>) ...
[08:08:59.220] | : result() for ClusterFuture ...
[08:08:59.221] | : . assertValidConnection() ...
[08:08:59.221] | : . ' cluster node index: 1
[08:08:59.221] | : . assertValidConnection() ... done
[08:08:59.221] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:59.221] | : . ' cluster node index: 1
[08:08:59.263] | : . ' [1] TRUE
[08:08:59.263] | : . ' received data:
[08:08:59.264] | : . ' List of 5
[08:08:59.264] | : . '  $ type   : chr "VALUE"
[08:08:59.264] | : . '  $ value  :List of 16
[08:08:59.264] | : . '   ..$ value              :List of 1
[08:08:59.264] | : . '   .. ..$ a: num 1
[08:08:59.264] | : . '   ..$ visible            : logi TRUE
[08:08:59.264] | : . '   ..$ stdout             : chr ""
[08:08:59.264] | : . '   ..$ conditions         : list()
[08:08:59.264] | : . '   ..$ rng                : logi FALSE
[08:08:59.264] | : . '   ..$ seed               : NULL
[08:08:59.264] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:59.264] | : . '   ..$ misuseConnections  :List of 3
[08:08:59.264] | : . '   .. ..$ added   : NULL
[08:08:59.264] | : . '   .. ..$ removed : NULL
[08:08:59.264] | : . '   .. ..$ replaced: NULL
[08:08:59.264] | : . '   ..$ misuseDevices      : NULL
[08:08:59.264] | : . '   ..$ misuseDefaultDevice: list()
[08:08:59.264] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:59"
[08:08:59.264] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:59"
[08:08:59.264] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "33"
[08:08:59.264] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:59.264] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:59.264] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:59.264] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:59.264] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:59.264] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:59.264] | : . '   .. .. ..$ pid   : int 70439
[08:08:59.264] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:59.264] | : . '   .. .. ..$ random: int 2147483647
[08:08:59.264] | : . '   ..$ r_info             :List of 4
[08:08:59.264] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:59.264] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:59.264] | : . '   .. ..$ os           : chr "unix"
[08:08:59.264] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:59.264] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:59.264] | : . '   ..$ version            : chr "1.8"
[08:08:59.264] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:59.264] | : . '  $ success: logi TRUE
[08:08:59.264] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:59.264] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:59.264] | : . '  $ tag    : NULL
[08:08:59.275] | : . ' Received FutureResult
[08:08:59.275] | : . ' FutureResult:
[08:08:59.275] | : . ' value: ‘list’
[08:08:59.275] | : . ' visible: TRUE
[08:08:59.275] | : . ' stdout: character
[08:08:59.275] | : . ' conditions: [n = 0] 
[08:08:59.275] | : . ' RNG used: FALSE
[08:08:59.275] | : . ' duration: 0.002728224 secs (started 2025-06-17 08:08:59.260249)
[08:08:59.275] | : . ' version: 1.8
[08:08:59.275] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:59.276] | : . ' , Removed future from position #1
[08:08:59.276] | : . ' , Number of registered futures: 0
[08:08:59.276] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:59.276] | : . ' Erased future from future backend
[08:08:59.276] | : . ' result() for ClusterFuture ...
[08:08:59.276] | : . ' , result already collected: FutureResult
[08:08:59.276] | : . ' result() for ClusterFuture ... done
[08:08:59.276] | : . ' signalConditions() ...
[08:08:59.276] | : . ' , include = ‘immediateCondition’
[08:08:59.277] | : . ' , exclude = 
[08:08:59.277] | : . ' , resignal = FALSE
[08:08:59.277] | : . ' , Number of conditions: 0
[08:08:59.277] | : . ' ,  int 0
[08:08:59.277] | : . ' signalConditions() ... done
[08:08:59.277] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:59.277] | : result() for ClusterFuture ... done
[08:08:59.278] | : result() for ClusterFuture ...
[08:08:59.278] | : . result already collected: FutureResult
[08:08:59.278] | : result() for ClusterFuture ... done
[08:08:59.278] | : signalConditions() ...
[08:08:59.278] | : . include = ‘immediateCondition’
[08:08:59.278] | : . exclude = 
[08:08:59.278] | : . resignal = FALSE
[08:08:59.278] | : . Number of conditions: 0
[08:08:59.278] | : .  int 0
[08:08:59.279] | : signalConditions() ... done
[08:08:59.279] | : relay stdout ...
[08:08:59.279] | : relay stdout ... done
[08:08:59.279] | : check for misuse ...
[08:08:59.279] | : check for misuse ... done
[08:08:59.279] | value() for MultisessionFuture (<unnamed-33>) ... done
$a
[1] 1

[08:08:59.279] | future(..., label = NULL) ...
[08:08:59.280] | : lazy: TRUE
[08:08:59.280] | : stdout: TRUE
[08:08:59.280] | : conditions: [n=1] ‘condition’
[08:08:59.280] | : gc: FALSE
[08:08:59.280] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:59.280] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:59.280] | : . Searching for globals ...
[08:08:59.292] | : . ' globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:59.293] | : . Searching for globals ... done
[08:08:59.293] | : . Resolving globals: TRUE
[08:08:59.293] | : . Resolving any globals that are futures ...
[08:08:59.293] | : . ' globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:59.293] | : . Resolving any globals that are futures ... done
[08:08:59.293] | : . Search for packages associated with the globals ...
[08:08:59.293] | : . ' Packages associated with globals: [1] ‘base’
[08:08:59.294] | : . ' Packages: [1] ‘base’
[08:08:59.294] | : . Search for packages associated with the globals ... done
[08:08:59.294] | : . Resolving futures part of globals (recursively) ...
[08:08:59.294] | : . ' resolve() for FutureGlobals ...
[08:08:59.294] | : . ' , recursive: 99
[08:08:59.294] | : . ' , Number of elements: 1
[08:08:59.295] | : . ' , elements: ‘x’
[08:08:59.295] | : . ' , 'obj' is list
[08:08:59.295] | : . ' , resolve(obj, ...) ...
[08:08:59.295] | : . ' , ; resolve() for list ...
[08:08:59.295] | : . ' , ; ` recursive: 98
[08:08:59.295] | : . ' , ; ` Number of elements: 0
[08:08:59.295] | : . ' , ; resolve() for list ... done
[08:08:59.295] | : . ' , resolve(obj, ...) ... done
[08:08:59.295] | : . ' , resolved() for list ...
[08:08:59.295] | : . ' , ; Number of elements: 0
[08:08:59.296] | : . ' , ; Number of futures: 0
[08:08:59.296] | : . ' , resolved() for list ... done
[08:08:59.296] | : . ' , length: 0 (resolved future 1)
[08:08:59.296] | : . ' resolve() for FutureGlobals ... done
[08:08:59.296] | : . ' globals: [1] ‘x’
[08:08:59.296] | : . Resolving futures part of globals (recursively) ... done
[08:08:59.296] | : . Packages after dropping 'base': [0] 
[08:08:59.296] | : . globals: [1] ‘x’
[08:08:59.296] | : . packages: [0] 
[08:08:59.297] | : getGlobalsAndPackages() ... done
[08:08:59.297] | future(..., label = NULL) ... done
[08:08:59.297] | value() for Future (<unnamed-34>) ...
[08:08:59.297] | : run() for ‘Future’ (<unnamed-34>) ...
[08:08:59.297] | : . state: ‘created’
[08:08:59.297] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.297] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.297] | : . Using MultisessionFutureBackend ...
[08:08:59.298] | : . ' Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:08:59.298] | : . ' Launching futures ...
[08:08:59.298] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:59.298] | : . ' , ; Workers: [n=2]
[08:08:59.298] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:59.300] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:59.300] | : . ' , ; requestWorker() ...
[08:08:59.300] | : . ' , ; ` requestNode() ...
[08:08:59.300] | : . ' , ; ` | Number of workers: 2
[08:08:59.300] | : . ' , ; ` | Polling for a free worker ...
[08:08:59.300] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.300] | : . ' , ; ` | : . Listing all futures
[08:08:59.300] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:59.300] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.301] | : . ' , ; ` | : Total time: 0
[08:08:59.301] | : . ' , ; ` | Polling for a free worker ... done
[08:08:59.301] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.301] | : . ' , ; ` | : Listing all futures
[08:08:59.301] | : . ' , ; ` | : Number of registered futures: 0
[08:08:59.301] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.301] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:59.301] | : . ' , ; ` | Index of first available worker: 1
[08:08:59.301] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:59.395] | : . ' , ; ` | : Worker is functional
[08:08:59.395] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.396] | : . ' , ; ` | : . Listing all futures
[08:08:59.396] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:59.396] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.396] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:59.396] | : . ' , ; ` requestNode() ... done
[08:08:59.396] | : . ' , ; ` cluster node index: 1
[08:08:59.396] | : . ' , ; requestWorker() ... done
[08:08:59.396] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:59.397] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:59.397] | : . ' , ; launchFuture() ...
[08:08:59.397] | : . ' , ; ` cluster node index: 1
[08:08:59.397] | : . ' , ; ` getFutureData() ...
[08:08:59.397] | : . ' , ; ` | getFutureCore() ...
[08:08:59.398] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:59.398] | : . ' , ; ` | getFutureCore() ... done
[08:08:59.398] | : . ' , ; ` | getFutureCapture() ...
[08:08:59.398] | : . ' , ; ` | getFutureCapture() ... done
[08:08:59.398] | : . ' , ; ` | getFutureContext() ...
[08:08:59.398] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.400] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:59.400] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.400] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:59.401] | : . ' , ; ` | getFutureContext() ... done
[08:08:59.401] | : . ' , ; ` getFutureData() ... done
[08:08:59.401] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:59.401] | : . ' , ; ` | Appended future to position #1
[08:08:59.401] | : . ' , ; ` | Number of registered futures: 1
[08:08:59.401] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:59.402] | : . ' , ; launchFuture() ... done
[08:08:59.402] | : . ' , ; MultisessionFuture started
[08:08:59.402] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:59.402] | : . ' Launching futures ... done
[08:08:59.402] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:59.402] | : . Using MultisessionFutureBackend ... done
[08:08:59.402] | : run() for ‘Future’ (<unnamed-34>) ... done
[08:08:59.402] | : result() for ClusterFuture ...
[08:08:59.402] | : . assertValidConnection() ...
[08:08:59.403] | : . ' cluster node index: 1
[08:08:59.403] | : . assertValidConnection() ... done
[08:08:59.403] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:59.403] | : . ' cluster node index: 1
[08:08:59.445] | : . ' [1] TRUE
[08:08:59.446] | : . ' received data:
[08:08:59.446] | : . ' List of 5
[08:08:59.446] | : . '  $ type   : chr "VALUE"
[08:08:59.446] | : . '  $ value  :List of 16
[08:08:59.446] | : . '   ..$ value              :List of 1
[08:08:59.446] | : . '   .. ..$ a: num 1
[08:08:59.446] | : . '   ..$ visible            : logi TRUE
[08:08:59.446] | : . '   ..$ stdout             : chr ""
[08:08:59.446] | : . '   ..$ conditions         : list()
[08:08:59.446] | : . '   ..$ rng                : logi FALSE
[08:08:59.446] | : . '   ..$ seed               : NULL
[08:08:59.446] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:59.446] | : . '   ..$ misuseConnections  :List of 3
[08:08:59.446] | : . '   .. ..$ added   : NULL
[08:08:59.446] | : . '   .. ..$ removed : NULL
[08:08:59.446] | : . '   .. ..$ replaced: NULL
[08:08:59.446] | : . '   ..$ misuseDevices      : NULL
[08:08:59.446] | : . '   ..$ misuseDefaultDevice: list()
[08:08:59.446] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:59"
[08:08:59.446] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:59"
[08:08:59.446] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "34"
[08:08:59.446] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:59.446] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:59.446] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:59.446] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:59.446] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:59.446] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:59.446] | : . '   .. .. ..$ pid   : int 70439
[08:08:59.446] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:59.446] | : . '   .. .. ..$ random: int 2147483647
[08:08:59.446] | : . '   ..$ r_info             :List of 4
[08:08:59.446] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:59.446] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:59.446] | : . '   .. ..$ os           : chr "unix"
[08:08:59.446] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:59.446] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:59.446] | : . '   ..$ version            : chr "1.8"
[08:08:59.446] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:59.446] | : . '  $ success: logi TRUE
[08:08:59.446] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:59.446] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:59.446] | : . '  $ tag    : NULL
[08:08:59.457] | : . ' Received FutureResult
[08:08:59.457] | : . ' FutureResult:
[08:08:59.457] | : . ' value: ‘list’
[08:08:59.457] | : . ' visible: TRUE
[08:08:59.457] | : . ' stdout: character
[08:08:59.457] | : . ' conditions: [n = 0] 
[08:08:59.457] | : . ' RNG used: FALSE
[08:08:59.457] | : . ' duration: 0.002822161 secs (started 2025-06-17 08:08:59.442335)
[08:08:59.457] | : . ' version: 1.8
[08:08:59.458] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:59.458] | : . ' , Removed future from position #1
[08:08:59.458] | : . ' , Number of registered futures: 0
[08:08:59.458] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:59.458] | : . ' Erased future from future backend
[08:08:59.458] | : . ' result() for ClusterFuture ...
[08:08:59.458] | : . ' , result already collected: FutureResult
[08:08:59.458] | : . ' result() for ClusterFuture ... done
[08:08:59.459] | : . ' signalConditions() ...
[08:08:59.459] | : . ' , include = ‘immediateCondition’
[08:08:59.459] | : . ' , exclude = 
[08:08:59.459] | : . ' , resignal = FALSE
[08:08:59.459] | : . ' , Number of conditions: 0
[08:08:59.459] | : . ' ,  int 0
[08:08:59.459] | : . ' signalConditions() ... done
[08:08:59.460] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:59.460] | : result() for ClusterFuture ... done
[08:08:59.460] | : result() for ClusterFuture ...
[08:08:59.460] | : . result already collected: FutureResult
[08:08:59.460] | : result() for ClusterFuture ... done
[08:08:59.460] | : signalConditions() ...
[08:08:59.460] | : . include = ‘immediateCondition’
[08:08:59.460] | : . exclude = 
[08:08:59.460] | : . resignal = FALSE
[08:08:59.461] | : . Number of conditions: 0
[08:08:59.461] | : .  int 0
[08:08:59.461] | : signalConditions() ... done
[08:08:59.461] | : relay stdout ...
[08:08:59.461] | : relay stdout ... done
[08:08:59.461] | : check for misuse ...
[08:08:59.461] | : check for misuse ... done
[08:08:59.462] | value() for Future (<unnamed-34>) ... done
$a
[1] 1

[08:08:59.462] | future(..., label = NULL) ...
[08:08:59.462] | : lazy: FALSE
[08:08:59.462] | : stdout: TRUE
[08:08:59.462] | : conditions: [n=1] ‘condition’
[08:08:59.462] | : gc: FALSE
[08:08:59.462] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:59.463] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:59.463] | : . Searching for globals ...
[08:08:59.475] | : . ' globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:59.475] | : . Searching for globals ... done
[08:08:59.475] | : . Resolving globals: TRUE
[08:08:59.475] | : . Resolving any globals that are futures ...
[08:08:59.476] | : . ' globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:59.476] | : . Resolving any globals that are futures ... done
[08:08:59.476] | : . Search for packages associated with the globals ...
[08:08:59.476] | : . ' Packages associated with globals: [1] ‘base’
[08:08:59.476] | : . ' Packages: [1] ‘base’
[08:08:59.476] | : . Search for packages associated with the globals ... done
[08:08:59.477] | : . Resolving futures part of globals (recursively) ...
[08:08:59.477] | : . ' resolve() for FutureGlobals ...
[08:08:59.477] | : . ' , recursive: 99
[08:08:59.477] | : . ' , Number of elements: 1
[08:08:59.477] | : . ' , elements: ‘x’
[08:08:59.477] | : . ' , 'obj' is list
[08:08:59.477] | : . ' , resolve(obj, ...) ...
[08:08:59.477] | : . ' , ; resolve() for list ...
[08:08:59.478] | : . ' , ; ` recursive: 98
[08:08:59.478] | : . ' , ; ` Number of elements: 0
[08:08:59.478] | : . ' , ; resolve() for list ... done
[08:08:59.478] | : . ' , resolve(obj, ...) ... done
[08:08:59.478] | : . ' , resolved() for list ...
[08:08:59.478] | : . ' , ; Number of elements: 0
[08:08:59.478] | : . ' , ; Number of futures: 0
[08:08:59.478] | : . ' , resolved() for list ... done
[08:08:59.478] | : . ' , length: 0 (resolved future 1)
[08:08:59.479] | : . ' resolve() for FutureGlobals ... done
[08:08:59.479] | : . ' globals: [1] ‘x’
[08:08:59.479] | : . Resolving futures part of globals (recursively) ... done
[08:08:59.479] | : . Packages after dropping 'base': [0] 
[08:08:59.479] | : . globals: [1] ‘x’
[08:08:59.479] | : . packages: [0] 
[08:08:59.479] | : getGlobalsAndPackages() ... done
[08:08:59.479] | : run() for ‘Future’ (<unnamed-35>) ...
[08:08:59.480] | : . state: ‘created’
[08:08:59.480] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.480] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.480] | : . Using MultisessionFutureBackend ...
[08:08:59.480] | : . ' Number of futures since start: 10 (10 created, 10 launched, 10 finished)
[08:08:59.480] | : . ' Launching futures ...
[08:08:59.480] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:59.480] | : . ' , ; Workers: [n=2]
[08:08:59.481] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:59.482] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:59.482] | : . ' , ; requestWorker() ...
[08:08:59.482] | : . ' , ; ` requestNode() ...
[08:08:59.482] | : . ' , ; ` | Number of workers: 2
[08:08:59.483] | : . ' , ; ` | Polling for a free worker ...
[08:08:59.483] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.483] | : . ' , ; ` | : . Listing all futures
[08:08:59.483] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:59.483] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.483] | : . ' , ; ` | : Total time: 0
[08:08:59.483] | : . ' , ; ` | Polling for a free worker ... done
[08:08:59.483] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.483] | : . ' , ; ` | : Listing all futures
[08:08:59.483] | : . ' , ; ` | : Number of registered futures: 0
[08:08:59.484] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.484] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:59.484] | : . ' , ; ` | Index of first available worker: 1
[08:08:59.484] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:59.577] | : . ' , ; ` | : Worker is functional
[08:08:59.577] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.577] | : . ' , ; ` | : . Listing all futures
[08:08:59.577] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:59.577] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.578] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:59.578] | : . ' , ; ` requestNode() ... done
[08:08:59.578] | : . ' , ; ` cluster node index: 1
[08:08:59.578] | : . ' , ; requestWorker() ... done
[08:08:59.578] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:59.578] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:59.579] | : . ' , ; launchFuture() ...
[08:08:59.579] | : . ' , ; ` cluster node index: 1
[08:08:59.579] | : . ' , ; ` getFutureData() ...
[08:08:59.579] | : . ' , ; ` | getFutureCore() ...
[08:08:59.579] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:59.579] | : . ' , ; ` | getFutureCore() ... done
[08:08:59.579] | : . ' , ; ` | getFutureCapture() ...
[08:08:59.579] | : . ' , ; ` | getFutureCapture() ... done
[08:08:59.580] | : . ' , ; ` | getFutureContext() ...
[08:08:59.580] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.580] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:59.580] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.580] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:59.580] | : . ' , ; ` | getFutureContext() ... done
[08:08:59.580] | : . ' , ; ` getFutureData() ... done
[08:08:59.581] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:59.581] | : . ' , ; ` | Appended future to position #1
[08:08:59.581] | : . ' , ; ` | Number of registered futures: 1
[08:08:59.581] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:59.581] | : . ' , ; launchFuture() ... done
[08:08:59.581] | : . ' , ; MultisessionFuture started
[08:08:59.581] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:59.581] | : . ' Launching futures ... done
[08:08:59.581] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:59.582] | : . Using MultisessionFutureBackend ... done
[08:08:59.582] | : run() for ‘Future’ (<unnamed-35>) ... done
[08:08:59.582] | future(..., label = NULL) ... done
[08:08:59.582] | value() for MultisessionFuture (<unnamed-35>) ...
[08:08:59.582] | : result() for ClusterFuture ...
[08:08:59.582] | : . assertValidConnection() ...
[08:08:59.582] | : . ' cluster node index: 1
[08:08:59.583] | : . assertValidConnection() ... done
[08:08:59.583] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:59.583] | : . ' cluster node index: 1
[08:08:59.625] | : . ' [1] TRUE
[08:08:59.626] | : . ' received data:
[08:08:59.626] | : . ' List of 5
[08:08:59.626] | : . '  $ type   : chr "VALUE"
[08:08:59.626] | : . '  $ value  :List of 16
[08:08:59.626] | : . '   ..$ value              :List of 1
[08:08:59.626] | : . '   .. ..$ a: num 1
[08:08:59.626] | : . '   ..$ visible            : logi TRUE
[08:08:59.626] | : . '   ..$ stdout             : chr ""
[08:08:59.626] | : . '   ..$ conditions         : list()
[08:08:59.626] | : . '   ..$ rng                : logi FALSE
[08:08:59.626] | : . '   ..$ seed               : NULL
[08:08:59.626] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:59.626] | : . '   ..$ misuseConnections  :List of 3
[08:08:59.626] | : . '   .. ..$ added   : NULL
[08:08:59.626] | : . '   .. ..$ removed : NULL
[08:08:59.626] | : . '   .. ..$ replaced: NULL
[08:08:59.626] | : . '   ..$ misuseDevices      : NULL
[08:08:59.626] | : . '   ..$ misuseDefaultDevice: list()
[08:08:59.626] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:59"
[08:08:59.626] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:59"
[08:08:59.626] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "35"
[08:08:59.626] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:59.626] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:59.626] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:59.626] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:59.626] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:59.626] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:59.626] | : . '   .. .. ..$ pid   : int 70439
[08:08:59.626] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:59.626] | : . '   .. .. ..$ random: int 2147483647
[08:08:59.626] | : . '   ..$ r_info             :List of 4
[08:08:59.626] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:59.626] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:59.626] | : . '   .. ..$ os           : chr "unix"
[08:08:59.626] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:59.626] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:59.626] | : . '   ..$ version            : chr "1.8"
[08:08:59.626] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:59.626] | : . '  $ success: logi TRUE
[08:08:59.626] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:59.626] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:59.626] | : . '  $ tag    : NULL
[08:08:59.637] | : . ' Received FutureResult
[08:08:59.637] | : . ' FutureResult:
[08:08:59.637] | : . ' value: ‘list’
[08:08:59.637] | : . ' visible: TRUE
[08:08:59.637] | : . ' stdout: character
[08:08:59.637] | : . ' conditions: [n = 0] 
[08:08:59.637] | : . ' RNG used: FALSE
[08:08:59.637] | : . ' duration: 0.002827883 secs (started 2025-06-17 08:08:59.622291)
[08:08:59.637] | : . ' version: 1.8
[08:08:59.638] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:59.638] | : . ' , Removed future from position #1
[08:08:59.638] | : . ' , Number of registered futures: 0
[08:08:59.638] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:59.638] | : . ' Erased future from future backend
[08:08:59.638] | : . ' result() for ClusterFuture ...
[08:08:59.638] | : . ' , result already collected: FutureResult
[08:08:59.639] | : . ' result() for ClusterFuture ... done
[08:08:59.639] | : . ' signalConditions() ...
[08:08:59.639] | : . ' , include = ‘immediateCondition’
[08:08:59.639] | : . ' , exclude = 
[08:08:59.639] | : . ' , resignal = FALSE
[08:08:59.639] | : . ' , Number of conditions: 0
[08:08:59.639] | : . ' ,  int 0
[08:08:59.640] | : . ' signalConditions() ... done
[08:08:59.640] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:59.640] | : result() for ClusterFuture ... done
[08:08:59.640] | : result() for ClusterFuture ...
[08:08:59.640] | : . result already collected: FutureResult
[08:08:59.640] | : result() for ClusterFuture ... done
[08:08:59.640] | : signalConditions() ...
[08:08:59.640] | : . include = ‘immediateCondition’
[08:08:59.640] | : . exclude = 
[08:08:59.640] | : . resignal = FALSE
[08:08:59.641] | : . Number of conditions: 0
[08:08:59.641] | : .  int 0
[08:08:59.641] | : signalConditions() ... done
[08:08:59.641] | : relay stdout ...
[08:08:59.641] | : relay stdout ... done
[08:08:59.641] | : check for misuse ...
[08:08:59.641] | : check for misuse ... done
[08:08:59.644] | value() for MultisessionFuture (<unnamed-35>) ... done
$a
[1] 1

[08:08:59.644] | future(..., label = NULL) ...
[08:08:59.644] | : lazy: FALSE
[08:08:59.644] | : stdout: TRUE
[08:08:59.644] | : conditions: [n=1] ‘condition’
[08:08:59.644] | : gc: FALSE
[08:08:59.644] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:59.645] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:59.645] | : . Searching for globals ...
[08:08:59.657] | : . ' globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:59.657] | : . Searching for globals ... done
[08:08:59.657] | : . Resolving globals: TRUE
[08:08:59.657] | : . Resolving any globals that are futures ...
[08:08:59.658] | : . ' globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:59.658] | : . Resolving any globals that are futures ... done
[08:08:59.658] | : . Search for packages associated with the globals ...
[08:08:59.658] | : . ' Packages associated with globals: [1] ‘base’
[08:08:59.658] | : . ' Packages: [1] ‘base’
[08:08:59.658] | : . Search for packages associated with the globals ... done
[08:08:59.659] | : . Resolving futures part of globals (recursively) ...
[08:08:59.659] | : . ' resolve() for FutureGlobals ...
[08:08:59.659] | : . ' , recursive: 99
[08:08:59.659] | : . ' , Number of elements: 2
[08:08:59.659] | : . ' , elements: ‘x’, ‘name’
[08:08:59.659] | : . ' , 'obj' is list
[08:08:59.659] | : . ' , resolve(obj, ...) ...
[08:08:59.659] | : . ' , ; resolve() for list ...
[08:08:59.660] | : . ' , ; ` recursive: 98
[08:08:59.660] | : . ' , ; ` Number of elements: 0
[08:08:59.660] | : . ' , ; resolve() for list ... done
[08:08:59.660] | : . ' , resolve(obj, ...) ... done
[08:08:59.660] | : . ' , resolved() for list ...
[08:08:59.660] | : . ' , ; Number of elements: 0
[08:08:59.660] | : . ' , ; Number of futures: 0
[08:08:59.660] | : . ' , resolved() for list ... done
[08:08:59.660] | : . ' , length: 1 (resolved future 1)
[08:08:59.661] | : . ' , 'obj' is atomic
[08:08:59.661] | : . ' , length: 0 (resolved future 2)
[08:08:59.661] | : . ' resolve() for FutureGlobals ... done
[08:08:59.661] | : . ' globals: [2] ‘x’, ‘name’
[08:08:59.661] | : . Resolving futures part of globals (recursively) ... done
[08:08:59.661] | : . Packages after dropping 'base': [0] 
[08:08:59.661] | : . globals: [2] ‘x’, ‘name’
[08:08:59.661] | : . packages: [0] 
[08:08:59.661] | : getGlobalsAndPackages() ... done
[08:08:59.662] | : run() for ‘Future’ (<unnamed-36>) ...
[08:08:59.662] | : . state: ‘created’
[08:08:59.662] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.662] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.662] | : . Using MultisessionFutureBackend ...
[08:08:59.662] | : . ' Number of futures since start: 11 (11 created, 11 launched, 11 finished)
[08:08:59.662] | : . ' Launching futures ...
[08:08:59.663] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:59.663] | : . ' , ; Workers: [n=2]
[08:08:59.663] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:59.664] | : . ' , ; FutureRegistry: ‘workers-738e3bb29df483fb10ec72c38cf424e2’
[08:08:59.665] | : . ' , ; requestWorker() ...
[08:08:59.665] | : . ' , ; ` requestNode() ...
[08:08:59.665] | : . ' , ; ` | Number of workers: 2
[08:08:59.665] | : . ' , ; ` | Polling for a free worker ...
[08:08:59.665] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.665] | : . ' , ; ` | : . Listing all futures
[08:08:59.665] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:59.665] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.665] | : . ' , ; ` | : Total time: 0
[08:08:59.666] | : . ' , ; ` | Polling for a free worker ... done
[08:08:59.666] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.666] | : . ' , ; ` | : Listing all futures
[08:08:59.666] | : . ' , ; ` | : Number of registered futures: 0
[08:08:59.666] | : . ' , ; ` | FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.666] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:59.666] | : . ' , ; ` | Index of first available worker: 1
[08:08:59.666] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:59.759] | : . ' , ; ` | : Worker is functional
[08:08:59.759] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ...
[08:08:59.759] | : . ' , ; ` | : . Listing all futures
[08:08:59.760] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:59.760] | : . ' , ; ` | : FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'list', earlySignal = 0) ... done
[08:08:59.760] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:59.760] | : . ' , ; ` requestNode() ... done
[08:08:59.760] | : . ' , ; ` cluster node index: 1
[08:08:59.760] | : . ' , ; requestWorker() ... done
[08:08:59.760] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:59.761] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:59.761] | : . ' , ; launchFuture() ...
[08:08:59.761] | : . ' , ; ` cluster node index: 1
[08:08:59.761] | : . ' , ; ` getFutureData() ...
[08:08:59.761] | : . ' , ; ` | getFutureCore() ...
[08:08:59.761] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:59.761] | : . ' , ; ` | getFutureCore() ... done
[08:08:59.762] | : . ' , ; ` | getFutureCapture() ...
[08:08:59.762] | : . ' , ; ` | getFutureCapture() ... done
[08:08:59.762] | : . ' , ; ` | getFutureContext() ...
[08:08:59.762] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.762] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:59.762] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.762] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:59.762] | : . ' , ; ` | getFutureContext() ... done
[08:08:59.763] | : . ' , ; ` getFutureData() ... done
[08:08:59.763] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ...
[08:08:59.763] | : . ' , ; ` | Appended future to position #1
[08:08:59.763] | : . ' , ; ` | Number of registered futures: 1
[08:08:59.763] | : . ' , ; ` FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'add', earlySignal = 0) ... done
[08:08:59.763] | : . ' , ; launchFuture() ... done
[08:08:59.763] | : . ' , ; MultisessionFuture started
[08:08:59.763] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:59.764] | : . ' Launching futures ... done
[08:08:59.764] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:59.764] | : . Using MultisessionFutureBackend ... done
[08:08:59.764] | : run() for ‘Future’ (<unnamed-36>) ... done
[08:08:59.764] | future(..., label = NULL) ... done
[08:08:59.764] | value() for MultisessionFuture (<unnamed-36>) ...
[08:08:59.764] | : result() for ClusterFuture ...
[08:08:59.765] | : . assertValidConnection() ...
[08:08:59.765] | : . ' cluster node index: 1
[08:08:59.765] | : . assertValidConnection() ... done
[08:08:59.765] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:59.765] | : . ' cluster node index: 1
[08:08:59.807] | : . ' [1] TRUE
[08:08:59.808] | : . ' received data:
[08:08:59.808] | : . ' List of 5
[08:08:59.808] | : . '  $ type   : chr "VALUE"
[08:08:59.808] | : . '  $ value  :List of 16
[08:08:59.808] | : . '   ..$ value              :List of 1
[08:08:59.808] | : . '   .. ..$ a: num 1
[08:08:59.808] | : . '   ..$ visible            : logi TRUE
[08:08:59.808] | : . '   ..$ stdout             : chr ""
[08:08:59.808] | : . '   ..$ conditions         : list()
[08:08:59.808] | : . '   ..$ rng                : logi FALSE
[08:08:59.808] | : . '   ..$ seed               : NULL
[08:08:59.808] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:59.808] | : . '   ..$ misuseConnections  :List of 3
[08:08:59.808] | : . '   .. ..$ added   : NULL
[08:08:59.808] | : . '   .. ..$ removed : NULL
[08:08:59.808] | : . '   .. ..$ replaced: NULL
[08:08:59.808] | : . '   ..$ misuseDevices      : NULL
[08:08:59.808] | : . '   ..$ misuseDefaultDevice: list()
[08:08:59.808] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:59"
[08:08:59.808] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:59"
[08:08:59.808] | : . '   ..$ uuid               : chr [1:2] "15c9731839d149dbdc2e119986dc701b" "36"
[08:08:59.808] | : . '   ..$ session_uuid       : chr "001caa07516751271f98e139a49f296e"
[08:08:59.808] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:59.808] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:59.808] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:59.808] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:59.808] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:59.808] | : . '   .. .. ..$ pid   : int 70439
[08:08:59.808] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:57"
[08:08:59.808] | : . '   .. .. ..$ random: int 2147483647
[08:08:59.808] | : . '   ..$ r_info             :List of 4
[08:08:59.808] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:59.808] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:59.808] | : . '   .. ..$ os           : chr "unix"
[08:08:59.808] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:59.808] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:59.808] | : . '   ..$ version            : chr "1.8"
[08:08:59.808] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:59.808] | : . '  $ success: logi TRUE
[08:08:59.808] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:59.808] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:59.808] | : . '  $ tag    : NULL
[08:08:59.819] | : . ' Received FutureResult
[08:08:59.819] | : . ' FutureResult:
[08:08:59.819] | : . ' value: ‘list’
[08:08:59.819] | : . ' visible: TRUE
[08:08:59.819] | : . ' stdout: character
[08:08:59.819] | : . ' conditions: [n = 0] 
[08:08:59.819] | : . ' RNG used: FALSE
[08:08:59.819] | : . ' duration: 0.00297308 secs (started 2025-06-17 08:08:59.80433)
[08:08:59.819] | : . ' version: 1.8
[08:08:59.820] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ...
[08:08:59.820] | : . ' , Removed future from position #1
[08:08:59.820] | : . ' , Number of registered futures: 0
[08:08:59.820] | : . ' FutureRegistry('workers-738e3bb29df483fb10ec72c38cf424e2', action = 'remove', earlySignal = 0) ... done
[08:08:59.820] | : . ' Erased future from future backend
[08:08:59.820] | : . ' result() for ClusterFuture ...
[08:08:59.821] | : . ' , result already collected: FutureResult
[08:08:59.821] | : . ' result() for ClusterFuture ... done
[08:08:59.821] | : . ' signalConditions() ...
[08:08:59.821] | : . ' , include = ‘immediateCondition’
[08:08:59.821] | : . ' , exclude = 
[08:08:59.821] | : . ' , resignal = FALSE
[08:08:59.821] | : . ' , Number of conditions: 0
[08:08:59.821] | : . ' ,  int 0
[08:08:59.822] | : . ' signalConditions() ... done
[08:08:59.822] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:59.822] | : result() for ClusterFuture ... done
[08:08:59.822] | : result() for ClusterFuture ...
[08:08:59.822] | : . result already collected: FutureResult
[08:08:59.822] | : result() for ClusterFuture ... done
[08:08:59.822] | : signalConditions() ...
[08:08:59.822] | : . include = ‘immediateCondition’
[08:08:59.823] | : . exclude = 
[08:08:59.823] | : . resignal = FALSE
[08:08:59.823] | : . Number of conditions: 0
[08:08:59.823] | : .  int 0
[08:08:59.823] | : signalConditions() ... done
[08:08:59.823] | : relay stdout ...
[08:08:59.823] | : relay stdout ... done
[08:08:59.824] | : check for misuse ...
[08:08:59.824] | : check for misuse ... done
[08:08:59.824] | value() for MultisessionFuture (<unnamed-36>) ... done
$a
[1] 1

Testing with 2 cores ... DONE

> message("*** Globals - subassignments w/ x$a <- value ... DONE")
*** Globals - subassignments w/ x$a <- value ... DONE

> message("*** Globals - subassignments ... DONE")
*** Globals - subassignments ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=3s, sys.self=0.2s, elapsed=5s, user.child=0.8s, sys.child=0.5s
Test ‘globals,subassignment’ ... success
> 
