
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-globals,subassignment.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("globals,subassignment")
Test ‘globals,subassignment’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-globals,subassignment.R’

> library(future)
[10:53:23.769] Option 'future.startup.script': TRUE
[10:53:23.769] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:53:23.769] Future startup scripts found: <none>

> oopts <- c(oopts, options(future.globals.resolve = TRUE, 
+     future.globals.onMissing = "error"))

> message("*** Globals - subassignments ...")
*** Globals - subassignments ...

> message("*** Globals - subassignments w/ x$a <- value ...")
*** Globals - subassignments w/ x$a <- value ...

> x <- x0 <- list()

> y0 <- list(a = 1)

> str(list(x = x, y0 = y0))
List of 2
 $ x : list()
 $ y0:List of 1
  ..$ a: num 1

> y <- local({
+     x$a <- 1
+     x
+ })

> stopifnot(identical(y, y0))

> y <- local({
+     x[["a"]] <- 1
+     x
+ })

> stopifnot(identical(y, y0))

> y <- local({
+     x["a"] <- list(1)
+     x
+ })

> stopifnot(identical(y, y0))

> stopifnot(identical(x, list()))

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     message("availableCor ..." ... [TRUNCATED] 
Testing with 1 cores ...
availableCores(): 1
- plan('sequential') ...
[10:53:23.819] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.819] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:53:23.819] |  :  all.equal() for FutureStrategyList ...
[10:53:23.819] |  :  .  New stack:
[10:53:23.819] |  :  .  List of 1
[10:53:23.819] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.819] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.819] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.819] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.819] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.819] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:23.819] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.822] |  :  .  Old stack:
[10:53:23.822] |  :  .  List of 1
[10:53:23.822] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.822] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.822] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.822] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.822] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.822] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:53:23.822] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.824] |  :  .  Not identical
[10:53:23.824] |  :  .  all.equal() for future ...
[10:53:23.824] |  :  .  |  List of 2
[10:53:23.824] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.824] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.824] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.824] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.824] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.824] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:23.824] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.824] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.824] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.824] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.824] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.824] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:23.829] |  :  .  all.equal() for future ... done
[10:53:23.829] |  :  all.equal() for FutureStrategyList ... done
[10:53:23.829] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:23.829] |  :  List of future strategies:
[10:53:23.829] |  :  1. sequential:
[10:53:23.829] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:23.829] |  :     - tweaked: FALSE
[10:53:23.829] |  :     - call: plan(sequential)
[10:53:23.830] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:53:23.830] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:23.831] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:23.831] |  Searching for globals ...
[10:53:23.838] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:23.838] |  Searching for globals ... DONE
[10:53:23.838] |  Resolving globals: TRUE
[10:53:23.839] |  Resolving any globals that are futures ...
[10:53:23.839] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:23.839] |  Resolving any globals that are futures ... DONE
[10:53:23.839] |  Search for packages associated with the globals ...
[10:53:23.839] |  :  Packages associated with globals: [1] ‘base’
[10:53:23.840] |  :  Packages: [1] ‘base’
[10:53:23.840] |  Search for packages associated with the globals ... DONE
[10:53:23.840] |  Resolving futures part of globals (recursively) ...
[10:53:23.840] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:23.840] |  :  .  recursive: 99
[10:53:23.841] |  :  .  length: 1
[10:53:23.841] |  :  .  elements: ‘x’
[10:53:23.841] |  :  .  'obj' is list
[10:53:23.841] |  :  .  resolve(obj, ...) ...
[10:53:23.841] |  :  .  resolve(obj, ...) ... done
[10:53:23.841] |  :  .  length: 0 (resolved future 1)
[10:53:23.841] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:23.842] |  :  globals: [1] ‘x’
[10:53:23.842] |  Resolving futures part of globals (recursively) ... DONE
[10:53:23.842] |  Packages after dropping 'base': [0] 
[10:53:23.842] |  globals: [1] ‘x’
[10:53:23.842] |  packages: [0] 
[10:53:23.842] getGlobalsAndPackages() ... done
[10:53:23.843] run() for Future (‘Future’) ...
[10:53:23.843] |  state: ‘created’
[10:53:23.843] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.843] |  :  makeFutureBackend(<sequential>) ...
[10:53:23.843] |  :  .  Backend function: <‘NULL’>
[10:53:23.843] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:23.844] |  :  makeFutureBackend(<sequential>) ... done
[10:53:23.844] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.844] |  Using SequentialFutureBackend ...
[10:53:23.844] |  :  Launching futures ...
[10:53:23.844] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:23.844] |  :  .  |  getFutureData() ...
[10:53:23.844] |  :  .  |  :  getFutureCore() ...
[10:53:23.845] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:23.845] |  :  .  |  :  getFutureCore() ... done
[10:53:23.845] |  :  .  |  :  getFutureCapture() ...
[10:53:23.845] |  :  .  |  :  getFutureCapture() ... done
[10:53:23.845] |  :  .  |  :  getFutureContext() ...
[10:53:23.845] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.845] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:23.845] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.845] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:23.846] |  :  .  |  :  getFutureContext() ... done
[10:53:23.846] |  :  .  |  getFutureData() ... done
[10:53:23.847] |  :  .  |  attachPackages() ...
[10:53:23.847] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:23.847] |  :  .  |  attachPackages() ... DONE
[10:53:23.847] |  :  .  |  attachPackages() ...
[10:53:23.847] |  :  .  |  :  packages: [n=0] 
[10:53:23.847] |  :  .  |  attachPackages() ... DONE
[10:53:23.848] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.848] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:23.848] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.848] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.848] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:23.849] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:23.849] |  :  .  |  :  .  |  New stack:
[10:53:23.849] |  :  .  |  :  .  |  List of 1
[10:53:23.849] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.849] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.849] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.849] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.849] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.849] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:23.849] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.851] |  :  .  |  :  .  |  Old stack:
[10:53:23.851] |  :  .  |  :  .  |  List of 1
[10:53:23.851] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.851] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.851] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.851] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.851] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.851] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:23.851] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.851] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.851] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.851] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.854] |  :  .  |  :  .  |  Not identical
[10:53:23.854] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:23.854] |  :  .  |  :  .  |  :  List of 2
[10:53:23.854] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.854] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.854] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.854] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.854] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.854] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:23.854] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.854] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.854] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.854] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.854] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.854] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.854] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.854] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.854] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.860] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:23.860] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:23.860] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:23.860] |  :  .  |  :  .  List of future strategies:
[10:53:23.860] |  :  .  |  :  .  1. sequential:
[10:53:23.860] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:23.860] |  :  .  |  :  .     - tweaked: FALSE
[10:53:23.860] |  :  .  |  :  .     - call: plan(sequential)
[10:53:23.861] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:23.861] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.861] |  :  .  |  assign_globals() ...
[10:53:23.861] |  :  .  |  List of 1
[10:53:23.861] |  :  .  |   $ x: list()
[10:53:23.861] |  :  .  |   - attr(*, "where")=List of 1
[10:53:23.861] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:23.861] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:23.861] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:23.861] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:23.861] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:23.864] |  :  .  |  - copied ‘x’ to environment
[10:53:23.864] |  :  .  |  assign_globals() ... done
[10:53:23.866] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.866] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.866] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:23.866] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:23.866] |  :  .  |  :  .  |  :  New stack:
[10:53:23.867] |  :  .  |  :  .  |  :  List of 1
[10:53:23.867] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.867] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.867] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.867] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.867] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.867] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.867] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.867] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.867] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.867] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.869] |  :  .  |  :  .  |  :  Old stack:
[10:53:23.869] |  :  .  |  :  .  |  :  List of 1
[10:53:23.869] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.869] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.869] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.869] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.869] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.869] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.869] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.869] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.869] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.869] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.872] |  :  .  |  :  .  |  :  Identical
[10:53:23.872] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:23.872] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:23.872] |  :  .  |  :  .  |  List of future strategies:
[10:53:23.872] |  :  .  |  :  .  |  1. sequential:
[10:53:23.872] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:23.872] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:23.872] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:23.873] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:23.873] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.873] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.873] |  :  .  |  SequentialFuture started (and completed)
[10:53:23.874] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:23.874] |  :  Launching futures ... done
[10:53:23.874] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:23.874] |  Using SequentialFutureBackend ... done
[10:53:23.874] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:23.875] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:23.875] |  Searching for globals ...
[10:53:23.877] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:23.877] |  Searching for globals ... DONE
[10:53:23.877] |  Resolving globals: TRUE
[10:53:23.877] |  Resolving any globals that are futures ...
[10:53:23.877] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:23.877] |  Resolving any globals that are futures ... DONE
[10:53:23.878] |  Search for packages associated with the globals ...
[10:53:23.879] |  :  Packages associated with globals: [1] ‘base’
[10:53:23.879] |  :  Packages: [1] ‘base’
[10:53:23.879] |  Search for packages associated with the globals ... DONE
[10:53:23.879] |  Resolving futures part of globals (recursively) ...
[10:53:23.879] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:23.879] |  :  .  recursive: 99
[10:53:23.880] |  :  .  length: 1
[10:53:23.880] |  :  .  elements: ‘x’
[10:53:23.880] |  :  .  'obj' is list
[10:53:23.880] |  :  .  resolve(obj, ...) ...
[10:53:23.880] |  :  .  resolve(obj, ...) ... done
[10:53:23.880] |  :  .  length: 0 (resolved future 1)
[10:53:23.880] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:23.880] |  :  globals: [1] ‘x’
[10:53:23.880] |  Resolving futures part of globals (recursively) ... DONE
[10:53:23.880] |  Packages after dropping 'base': [0] 
[10:53:23.881] |  globals: [1] ‘x’
[10:53:23.881] |  packages: [0] 
[10:53:23.881] getGlobalsAndPackages() ... done
[10:53:23.881] run() for Future (‘Future’) ...
[10:53:23.881] |  state: ‘created’
[10:53:23.881] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.881] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.881] |  Using SequentialFutureBackend ...
[10:53:23.881] |  :  Launching futures ...
[10:53:23.882] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:23.882] |  :  .  |  getFutureData() ...
[10:53:23.882] |  :  .  |  :  getFutureCore() ...
[10:53:23.882] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:23.882] |  :  .  |  :  getFutureCore() ... done
[10:53:23.882] |  :  .  |  :  getFutureCapture() ...
[10:53:23.882] |  :  .  |  :  getFutureCapture() ... done
[10:53:23.882] |  :  .  |  :  getFutureContext() ...
[10:53:23.882] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.882] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:23.882] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.883] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:23.883] |  :  .  |  :  getFutureContext() ... done
[10:53:23.883] |  :  .  |  getFutureData() ... done
[10:53:23.883] |  :  .  |  attachPackages() ...
[10:53:23.883] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:23.883] |  :  .  |  attachPackages() ... DONE
[10:53:23.883] |  :  .  |  attachPackages() ...
[10:53:23.883] |  :  .  |  :  packages: [n=0] 
[10:53:23.883] |  :  .  |  attachPackages() ... DONE
[10:53:23.884] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.884] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:23.884] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.884] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.884] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:23.884] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:23.885] |  :  .  |  :  .  |  New stack:
[10:53:23.885] |  :  .  |  :  .  |  List of 1
[10:53:23.885] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.885] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.885] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.885] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.885] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.885] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:23.885] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.887] |  :  .  |  :  .  |  Old stack:
[10:53:23.887] |  :  .  |  :  .  |  List of 1
[10:53:23.887] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.887] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.887] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.887] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.887] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.887] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:23.887] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.887] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.887] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.887] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.890] |  :  .  |  :  .  |  Not identical
[10:53:23.890] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:23.890] |  :  .  |  :  .  |  :  List of 2
[10:53:23.890] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.890] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.890] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.890] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.890] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.890] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:23.890] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.890] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.890] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.890] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.890] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.890] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.890] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.890] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.890] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.894] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:23.894] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:23.894] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:23.894] |  :  .  |  :  .  List of future strategies:
[10:53:23.894] |  :  .  |  :  .  1. sequential:
[10:53:23.894] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:23.894] |  :  .  |  :  .     - tweaked: FALSE
[10:53:23.894] |  :  .  |  :  .     - call: plan(sequential)
[10:53:23.895] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:23.895] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.895] |  :  .  |  assign_globals() ...
[10:53:23.895] |  :  .  |  List of 1
[10:53:23.895] |  :  .  |   $ x: list()
[10:53:23.895] |  :  .  |   - attr(*, "where")=List of 1
[10:53:23.895] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:23.895] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:23.895] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:23.895] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:23.895] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:23.897] |  :  .  |  - copied ‘x’ to environment
[10:53:23.898] |  :  .  |  assign_globals() ... done
[10:53:23.900] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.900] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.900] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:23.900] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:23.900] |  :  .  |  :  .  |  :  New stack:
[10:53:23.900] |  :  .  |  :  .  |  :  List of 1
[10:53:23.900] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.900] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.900] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.900] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.900] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.900] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.900] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.900] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.900] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.900] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.903] |  :  .  |  :  .  |  :  Old stack:
[10:53:23.903] |  :  .  |  :  .  |  :  List of 1
[10:53:23.903] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.903] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.903] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.903] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.903] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.903] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.903] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.903] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.903] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.903] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.906] |  :  .  |  :  .  |  :  Identical
[10:53:23.906] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:23.906] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:23.906] |  :  .  |  :  .  |  List of future strategies:
[10:53:23.906] |  :  .  |  :  .  |  1. sequential:
[10:53:23.906] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:23.906] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:23.906] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:23.907] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:23.907] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.907] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.907] |  :  .  |  SequentialFuture started (and completed)
[10:53:23.907] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:23.907] |  :  Launching futures ... done
[10:53:23.907] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:23.907] |  Using SequentialFutureBackend ... done
[10:53:23.908] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:23.909] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:23.909] |  Searching for globals ...
[10:53:23.911] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:23.911] |  Searching for globals ... DONE
[10:53:23.911] |  Resolving globals: TRUE
[10:53:23.911] |  Resolving any globals that are futures ...
[10:53:23.911] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:23.911] |  Resolving any globals that are futures ... DONE
[10:53:23.911] |  Search for packages associated with the globals ...
[10:53:23.912] |  :  Packages associated with globals: [1] ‘base’
[10:53:23.912] |  :  Packages: [1] ‘base’
[10:53:23.912] |  Search for packages associated with the globals ... DONE
[10:53:23.912] |  Resolving futures part of globals (recursively) ...
[10:53:23.912] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:23.912] |  :  .  recursive: 99
[10:53:23.912] |  :  .  length: 1
[10:53:23.912] |  :  .  elements: ‘x’
[10:53:23.913] |  :  .  'obj' is list
[10:53:23.913] |  :  .  resolve(obj, ...) ...
[10:53:23.913] |  :  .  resolve(obj, ...) ... done
[10:53:23.913] |  :  .  length: 0 (resolved future 1)
[10:53:23.913] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:23.913] |  :  globals: [1] ‘x’
[10:53:23.913] |  Resolving futures part of globals (recursively) ... DONE
[10:53:23.913] |  Packages after dropping 'base': [0] 
[10:53:23.913] |  globals: [1] ‘x’
[10:53:23.914] |  packages: [0] 
[10:53:23.914] getGlobalsAndPackages() ... done
[10:53:23.914] run() for Future (‘Future’) ...
[10:53:23.914] |  state: ‘created’
[10:53:23.914] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.914] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.914] |  Using SequentialFutureBackend ...
[10:53:23.914] |  :  Launching futures ...
[10:53:23.914] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:23.915] |  :  .  |  getFutureData() ...
[10:53:23.915] |  :  .  |  :  getFutureCore() ...
[10:53:23.915] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:23.915] |  :  .  |  :  getFutureCore() ... done
[10:53:23.915] |  :  .  |  :  getFutureCapture() ...
[10:53:23.915] |  :  .  |  :  getFutureCapture() ... done
[10:53:23.915] |  :  .  |  :  getFutureContext() ...
[10:53:23.915] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.915] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:23.915] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.915] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:23.916] |  :  .  |  :  getFutureContext() ... done
[10:53:23.916] |  :  .  |  getFutureData() ... done
[10:53:23.916] |  :  .  |  attachPackages() ...
[10:53:23.916] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:23.916] |  :  .  |  attachPackages() ... DONE
[10:53:23.916] |  :  .  |  attachPackages() ...
[10:53:23.916] |  :  .  |  :  packages: [n=0] 
[10:53:23.916] |  :  .  |  attachPackages() ... DONE
[10:53:23.917] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.917] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:23.917] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.917] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.917] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:23.917] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:23.917] |  :  .  |  :  .  |  New stack:
[10:53:23.918] |  :  .  |  :  .  |  List of 1
[10:53:23.918] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.918] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.918] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.918] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.918] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.918] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:23.918] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.921] |  :  .  |  :  .  |  Old stack:
[10:53:23.921] |  :  .  |  :  .  |  List of 1
[10:53:23.921] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.921] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.921] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.921] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.921] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.921] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:23.921] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.921] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.921] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.921] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.923] |  :  .  |  :  .  |  Not identical
[10:53:23.924] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:23.924] |  :  .  |  :  .  |  :  List of 2
[10:53:23.924] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.924] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.924] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.924] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.924] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.924] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:23.924] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.924] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.924] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.924] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.924] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.924] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.924] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.924] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.924] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.928] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:23.928] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:23.928] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:23.928] |  :  .  |  :  .  List of future strategies:
[10:53:23.928] |  :  .  |  :  .  1. sequential:
[10:53:23.928] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:23.928] |  :  .  |  :  .     - tweaked: FALSE
[10:53:23.928] |  :  .  |  :  .     - call: plan(sequential)
[10:53:23.929] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:23.929] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.929] |  :  .  |  assign_globals() ...
[10:53:23.929] |  :  .  |  List of 1
[10:53:23.929] |  :  .  |   $ x: list()
[10:53:23.929] |  :  .  |   - attr(*, "where")=List of 1
[10:53:23.929] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:23.929] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:23.929] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:23.929] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:23.929] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:23.931] |  :  .  |  - copied ‘x’ to environment
[10:53:23.932] |  :  .  |  assign_globals() ... done
[10:53:23.933] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.933] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.933] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:23.933] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:23.933] |  :  .  |  :  .  |  :  New stack:
[10:53:23.933] |  :  .  |  :  .  |  :  List of 1
[10:53:23.933] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.933] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.933] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.933] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.933] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.933] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.933] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.933] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.933] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.933] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.936] |  :  .  |  :  .  |  :  Old stack:
[10:53:23.936] |  :  .  |  :  .  |  :  List of 1
[10:53:23.936] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.936] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.936] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.936] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.936] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.936] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.936] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.936] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.936] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.936] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.940] |  :  .  |  :  .  |  :  Identical
[10:53:23.940] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:23.940] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:23.940] |  :  .  |  :  .  |  List of future strategies:
[10:53:23.940] |  :  .  |  :  .  |  1. sequential:
[10:53:23.940] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:23.940] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:23.940] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:23.941] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:23.941] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.941] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.941] |  :  .  |  SequentialFuture started (and completed)
[10:53:23.941] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:23.941] |  :  Launching futures ... done
[10:53:23.941] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:23.941] |  Using SequentialFutureBackend ... done
[10:53:23.941] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:23.942] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:23.942] |  Searching for globals ...
[10:53:23.944] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:23.944] |  Searching for globals ... DONE
[10:53:23.944] |  Resolving globals: TRUE
[10:53:23.944] |  Resolving any globals that are futures ...
[10:53:23.944] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:23.945] |  Resolving any globals that are futures ... DONE
[10:53:23.945] |  Search for packages associated with the globals ...
[10:53:23.945] |  :  Packages associated with globals: [1] ‘base’
[10:53:23.945] |  :  Packages: [1] ‘base’
[10:53:23.945] |  Search for packages associated with the globals ... DONE
[10:53:23.945] |  Resolving futures part of globals (recursively) ...
[10:53:23.946] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:23.946] |  :  .  recursive: 99
[10:53:23.946] |  :  .  length: 1
[10:53:23.946] |  :  .  elements: ‘x’
[10:53:23.946] |  :  .  'obj' is list
[10:53:23.946] |  :  .  resolve(obj, ...) ...
[10:53:23.946] |  :  .  resolve(obj, ...) ... done
[10:53:23.946] |  :  .  length: 0 (resolved future 1)
[10:53:23.946] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:23.946] |  :  globals: [1] ‘x’
[10:53:23.946] |  Resolving futures part of globals (recursively) ... DONE
[10:53:23.947] |  Packages after dropping 'base': [0] 
[10:53:23.947] |  globals: [1] ‘x’
[10:53:23.947] |  packages: [0] 
[10:53:23.947] getGlobalsAndPackages() ... done
[10:53:23.947] run() for Future (‘Future’) ...
[10:53:23.947] |  state: ‘created’
[10:53:23.947] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.947] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.947] |  Using SequentialFutureBackend ...
[10:53:23.948] |  :  Launching futures ...
[10:53:23.948] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:23.948] |  :  .  |  getFutureData() ...
[10:53:23.948] |  :  .  |  :  getFutureCore() ...
[10:53:23.948] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:23.948] |  :  .  |  :  getFutureCore() ... done
[10:53:23.948] |  :  .  |  :  getFutureCapture() ...
[10:53:23.948] |  :  .  |  :  getFutureCapture() ... done
[10:53:23.948] |  :  .  |  :  getFutureContext() ...
[10:53:23.948] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.948] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:23.949] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.949] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:23.949] |  :  .  |  :  getFutureContext() ... done
[10:53:23.949] |  :  .  |  getFutureData() ... done
[10:53:23.949] |  :  .  |  attachPackages() ...
[10:53:23.949] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:23.949] |  :  .  |  attachPackages() ... DONE
[10:53:23.949] |  :  .  |  attachPackages() ...
[10:53:23.949] |  :  .  |  :  packages: [n=0] 
[10:53:23.950] |  :  .  |  attachPackages() ... DONE
[10:53:23.950] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.950] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:23.950] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.950] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.950] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:23.951] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:23.951] |  :  .  |  :  .  |  New stack:
[10:53:23.951] |  :  .  |  :  .  |  List of 1
[10:53:23.951] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.951] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.951] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.951] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.951] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.951] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:23.951] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.953] |  :  .  |  :  .  |  Old stack:
[10:53:23.953] |  :  .  |  :  .  |  List of 1
[10:53:23.953] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.953] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.953] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.953] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.953] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.953] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:23.953] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.953] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.953] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.953] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.956] |  :  .  |  :  .  |  Not identical
[10:53:23.956] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:23.956] |  :  .  |  :  .  |  :  List of 2
[10:53:23.956] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.956] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.956] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.956] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.956] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.956] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:23.956] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.956] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.956] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.956] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.956] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.956] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.956] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.956] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.956] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.961] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:23.961] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:23.961] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:23.961] |  :  .  |  :  .  List of future strategies:
[10:53:23.961] |  :  .  |  :  .  1. sequential:
[10:53:23.961] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:23.961] |  :  .  |  :  .     - tweaked: FALSE
[10:53:23.961] |  :  .  |  :  .     - call: plan(sequential)
[10:53:23.962] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:23.962] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.962] |  :  .  |  assign_globals() ...
[10:53:23.962] |  :  .  |  List of 1
[10:53:23.962] |  :  .  |   $ x: list()
[10:53:23.962] |  :  .  |   - attr(*, "where")=List of 1
[10:53:23.962] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:23.962] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:23.962] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:23.962] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:23.962] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:23.964] |  :  .  |  - copied ‘x’ to environment
[10:53:23.965] |  :  .  |  assign_globals() ... done
[10:53:23.966] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.966] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.966] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:23.966] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:23.966] |  :  .  |  :  .  |  :  New stack:
[10:53:23.966] |  :  .  |  :  .  |  :  List of 1
[10:53:23.966] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.966] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.966] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.966] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.966] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.966] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.966] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.966] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.966] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.966] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.969] |  :  .  |  :  .  |  :  Old stack:
[10:53:23.969] |  :  .  |  :  .  |  :  List of 1
[10:53:23.969] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.969] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.969] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.969] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.969] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.969] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.969] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.969] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.969] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.969] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.972] |  :  .  |  :  .  |  :  Identical
[10:53:23.972] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:23.972] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:23.972] |  :  .  |  :  .  |  List of future strategies:
[10:53:23.972] |  :  .  |  :  .  |  1. sequential:
[10:53:23.972] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:23.972] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:23.972] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:23.973] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:23.973] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.973] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.973] |  :  .  |  SequentialFuture started (and completed)
[10:53:23.973] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:23.973] |  :  Launching futures ... done
[10:53:23.973] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:23.973] |  Using SequentialFutureBackend ... done
[10:53:23.974] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:23.974] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:23.974] |  Searching for globals ...
[10:53:23.978] |  :  globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[10:53:23.978] |  Searching for globals ... DONE
[10:53:23.978] |  Resolving globals: TRUE
[10:53:23.978] |  Resolving any globals that are futures ...
[10:53:23.979] |  :  globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[10:53:23.979] |  Resolving any globals that are futures ... DONE
[10:53:23.979] |  Search for packages associated with the globals ...
[10:53:23.979] |  :  Packages associated with globals: [1] ‘base’
[10:53:23.979] |  :  Packages: [1] ‘base’
[10:53:23.979] |  Search for packages associated with the globals ... DONE
[10:53:23.979] |  Packages after dropping 'base': [0] 
[10:53:23.980] |  globals: [0] 
[10:53:23.980] |  packages: [0] 
[10:53:23.980] getGlobalsAndPackages() ... done
[10:53:23.980] run() for Future (‘Future’) ...
[10:53:23.980] |  state: ‘created’
[10:53:23.980] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.980] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.980] |  Using SequentialFutureBackend ...
[10:53:23.981] |  :  Launching futures ...
[10:53:23.981] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:23.981] |  :  .  |  getFutureData() ...
[10:53:23.981] |  :  .  |  :  getFutureCore() ...
[10:53:23.981] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:23.981] |  :  .  |  :  getFutureCore() ... done
[10:53:23.981] |  :  .  |  :  getFutureCapture() ...
[10:53:23.981] |  :  .  |  :  getFutureCapture() ... done
[10:53:23.981] |  :  .  |  :  getFutureContext() ...
[10:53:23.981] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.981] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:23.982] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.982] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:23.982] |  :  .  |  :  getFutureContext() ... done
[10:53:23.982] |  :  .  |  getFutureData() ... done
[10:53:23.982] |  :  .  |  attachPackages() ...
[10:53:23.982] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:23.982] |  :  .  |  attachPackages() ... DONE
[10:53:23.982] |  :  .  |  attachPackages() ...
[10:53:23.983] |  :  .  |  :  packages: [n=0] 
[10:53:23.983] |  :  .  |  attachPackages() ... DONE
[10:53:23.983] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:23.983] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:23.983] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:23.983] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.984] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:23.984] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:23.984] |  :  .  |  :  .  |  New stack:
[10:53:23.984] |  :  .  |  :  .  |  List of 1
[10:53:23.984] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.984] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.984] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.984] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.984] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.984] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:23.984] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.986] |  :  .  |  :  .  |  Old stack:
[10:53:23.986] |  :  .  |  :  .  |  List of 1
[10:53:23.986] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.986] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.986] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.986] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.986] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.986] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:23.986] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.986] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.986] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.986] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:23.989] |  :  .  |  :  .  |  Not identical
[10:53:23.989] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:23.989] |  :  .  |  :  .  |  :  List of 2
[10:53:23.989] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.989] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.989] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.989] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.989] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.989] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:23.989] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.989] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.989] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.989] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.989] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.989] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.989] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.989] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.989] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.994] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:23.994] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:23.994] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:23.994] |  :  .  |  :  .  List of future strategies:
[10:53:23.994] |  :  .  |  :  .  1. sequential:
[10:53:23.994] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:23.994] |  :  .  |  :  .     - tweaked: FALSE
[10:53:23.994] |  :  .  |  :  .     - call: plan(sequential)
[10:53:23.995] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:23.995] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:23.996] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.996] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:23.996] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:23.997] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:23.998] |  :  .  |  :  .  |  :  New stack:
[10:53:23.998] |  :  .  |  :  .  |  :  List of 1
[10:53:23.998] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:23.998] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:23.998] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.998] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.998] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.998] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:23.998] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:23.998] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:23.998] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:23.998] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.001] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.001] |  :  .  |  :  .  |  :  List of 1
[10:53:24.001] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.001] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.001] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.001] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.001] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.001] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.001] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.001] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.001] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.001] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.004] |  :  .  |  :  .  |  :  Identical
[10:53:24.004] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.004] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.004] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.004] |  :  .  |  :  .  |  1. sequential:
[10:53:24.004] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.004] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.004] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:24.005] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.005] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.005] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.005] |  :  .  |  SequentialFuture started (and completed)
[10:53:24.005] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:24.005] |  :  Launching futures ... done
[10:53:24.005] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:24.005] |  Using SequentialFutureBackend ... done
[10:53:24.006] run() for Future (‘SequentialFuture’) ... done
$b
[1] 2

$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.006] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.006] |  Searching for globals ...
[10:53:24.008] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.008] |  Searching for globals ... DONE
[10:53:24.008] |  Resolving globals: TRUE
[10:53:24.008] |  Resolving any globals that are futures ...
[10:53:24.009] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.009] |  Resolving any globals that are futures ... DONE
[10:53:24.009] |  Search for packages associated with the globals ...
[10:53:24.009] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.009] |  :  Packages: [1] ‘base’
[10:53:24.009] |  Search for packages associated with the globals ... DONE
[10:53:24.009] |  Resolving futures part of globals (recursively) ...
[10:53:24.010] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.010] |  :  .  recursive: 99
[10:53:24.010] |  :  .  length: 1
[10:53:24.010] |  :  .  elements: ‘x’
[10:53:24.010] |  :  .  'obj' is list
[10:53:24.010] |  :  .  resolve(obj, ...) ...
[10:53:24.010] |  :  .  resolve(obj, ...) ... done
[10:53:24.010] |  :  .  length: 0 (resolved future 1)
[10:53:24.010] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.011] |  :  globals: [1] ‘x’
[10:53:24.011] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.011] |  Packages after dropping 'base': [0] 
[10:53:24.011] |  globals: [1] ‘x’
[10:53:24.011] |  packages: [0] 
[10:53:24.011] getGlobalsAndPackages() ... done
[10:53:24.011] run() for Future (‘Future’) ...
[10:53:24.011] |  state: ‘created’
[10:53:24.011] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.012] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.012] |  Using SequentialFutureBackend ...
[10:53:24.012] |  :  Launching futures ...
[10:53:24.012] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:24.012] |  :  .  |  getFutureData() ...
[10:53:24.012] |  :  .  |  :  getFutureCore() ...
[10:53:24.012] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.012] |  :  .  |  :  getFutureCore() ... done
[10:53:24.012] |  :  .  |  :  getFutureCapture() ...
[10:53:24.012] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.013] |  :  .  |  :  getFutureContext() ...
[10:53:24.013] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.013] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.013] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.013] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.013] |  :  .  |  :  getFutureContext() ... done
[10:53:24.013] |  :  .  |  getFutureData() ... done
[10:53:24.013] |  :  .  |  attachPackages() ...
[10:53:24.013] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.014] |  :  .  |  attachPackages() ... DONE
[10:53:24.014] |  :  .  |  attachPackages() ...
[10:53:24.014] |  :  .  |  :  packages: [n=0] 
[10:53:24.014] |  :  .  |  attachPackages() ... DONE
[10:53:24.014] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.014] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.014] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.015] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.015] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.015] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.015] |  :  .  |  :  .  |  New stack:
[10:53:24.015] |  :  .  |  :  .  |  List of 1
[10:53:24.015] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.015] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.015] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.015] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.015] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.015] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.015] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.018] |  :  .  |  :  .  |  Old stack:
[10:53:24.019] |  :  .  |  :  .  |  List of 1
[10:53:24.019] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.019] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.019] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.019] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.019] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.019] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:24.019] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.019] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.019] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.019] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.021] |  :  .  |  :  .  |  Not identical
[10:53:24.022] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.022] |  :  .  |  :  .  |  :  List of 2
[10:53:24.022] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.022] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.022] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.022] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.022] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.022] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.022] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.022] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.022] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.022] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.022] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.022] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.022] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.022] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.022] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.026] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.026] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.026] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.027] |  :  .  |  :  .  List of future strategies:
[10:53:24.027] |  :  .  |  :  .  1. sequential:
[10:53:24.027] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.027] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.027] |  :  .  |  :  .     - call: plan(sequential)
[10:53:24.027] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.027] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.027] |  :  .  |  assign_globals() ...
[10:53:24.027] |  :  .  |  List of 1
[10:53:24.027] |  :  .  |   $ x: list()
[10:53:24.027] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.027] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.027] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.027] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.027] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.027] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.030] |  :  .  |  - copied ‘x’ to environment
[10:53:24.030] |  :  .  |  assign_globals() ... done
[10:53:24.031] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.031] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.031] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.032] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.032] |  :  .  |  :  .  |  :  New stack:
[10:53:24.032] |  :  .  |  :  .  |  :  List of 1
[10:53:24.032] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.032] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.032] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.032] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.032] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.032] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.032] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.032] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.032] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.032] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.035] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.035] |  :  .  |  :  .  |  :  List of 1
[10:53:24.035] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.035] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.035] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.035] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.035] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.035] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.035] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.035] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.035] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.035] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.039] |  :  .  |  :  .  |  :  Identical
[10:53:24.039] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.039] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.039] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.039] |  :  .  |  :  .  |  1. sequential:
[10:53:24.039] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.039] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.039] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:24.039] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.040] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.040] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.040] |  :  .  |  SequentialFuture started (and completed)
[10:53:24.040] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:24.040] |  :  Launching futures ... done
[10:53:24.040] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:24.040] |  Using SequentialFutureBackend ... done
[10:53:24.040] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.041] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.041] |  Searching for globals ...
[10:53:24.043] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.043] |  Searching for globals ... DONE
[10:53:24.043] |  Resolving globals: TRUE
[10:53:24.043] |  Resolving any globals that are futures ...
[10:53:24.043] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.043] |  Resolving any globals that are futures ... DONE
[10:53:24.044] |  Search for packages associated with the globals ...
[10:53:24.044] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.044] |  :  Packages: [1] ‘base’
[10:53:24.044] |  Search for packages associated with the globals ... DONE
[10:53:24.044] |  Resolving futures part of globals (recursively) ...
[10:53:24.044] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.045] |  :  .  recursive: 99
[10:53:24.045] |  :  .  length: 1
[10:53:24.045] |  :  .  elements: ‘x’
[10:53:24.045] |  :  .  'obj' is list
[10:53:24.045] |  :  .  resolve(obj, ...) ...
[10:53:24.045] |  :  .  resolve(obj, ...) ... done
[10:53:24.045] |  :  .  length: 0 (resolved future 1)
[10:53:24.045] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.045] |  :  globals: [1] ‘x’
[10:53:24.045] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.046] |  Packages after dropping 'base': [0] 
[10:53:24.046] |  globals: [1] ‘x’
[10:53:24.046] |  packages: [0] 
[10:53:24.046] getGlobalsAndPackages() ... done
[10:53:24.046] run() for Future (‘Future’) ...
[10:53:24.046] |  state: ‘created’
[10:53:24.046] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.046] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.047] |  Using SequentialFutureBackend ...
[10:53:24.047] |  :  Launching futures ...
[10:53:24.047] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:24.047] |  :  .  |  getFutureData() ...
[10:53:24.047] |  :  .  |  :  getFutureCore() ...
[10:53:24.047] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.047] |  :  .  |  :  getFutureCore() ... done
[10:53:24.047] |  :  .  |  :  getFutureCapture() ...
[10:53:24.047] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.047] |  :  .  |  :  getFutureContext() ...
[10:53:24.048] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.048] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.048] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.048] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.048] |  :  .  |  :  getFutureContext() ... done
[10:53:24.048] |  :  .  |  getFutureData() ... done
[10:53:24.048] |  :  .  |  attachPackages() ...
[10:53:24.048] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.048] |  :  .  |  attachPackages() ... DONE
[10:53:24.049] |  :  .  |  attachPackages() ...
[10:53:24.049] |  :  .  |  :  packages: [n=0] 
[10:53:24.049] |  :  .  |  attachPackages() ... DONE
[10:53:24.049] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.049] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.049] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.050] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.050] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.050] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.050] |  :  .  |  :  .  |  New stack:
[10:53:24.050] |  :  .  |  :  .  |  List of 1
[10:53:24.050] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.050] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.050] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.050] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.050] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.050] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.050] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.052] |  :  .  |  :  .  |  Old stack:
[10:53:24.052] |  :  .  |  :  .  |  List of 1
[10:53:24.052] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.052] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.052] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.052] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.052] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.052] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:24.052] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.052] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.052] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.052] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.055] |  :  .  |  :  .  |  Not identical
[10:53:24.056] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.056] |  :  .  |  :  .  |  :  List of 2
[10:53:24.056] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.056] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.056] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.056] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.056] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.056] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.056] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.056] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.056] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.056] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.056] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.056] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.056] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.056] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.056] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.062] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.062] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.062] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.062] |  :  .  |  :  .  List of future strategies:
[10:53:24.062] |  :  .  |  :  .  1. sequential:
[10:53:24.062] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.062] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.062] |  :  .  |  :  .     - call: plan(sequential)
[10:53:24.063] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.063] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.063] |  :  .  |  assign_globals() ...
[10:53:24.063] |  :  .  |  List of 1
[10:53:24.063] |  :  .  |   $ x: list()
[10:53:24.063] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.063] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.063] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.063] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.063] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.063] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.065] |  :  .  |  - copied ‘x’ to environment
[10:53:24.066] |  :  .  |  assign_globals() ... done
[10:53:24.067] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.067] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.067] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.067] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.068] |  :  .  |  :  .  |  :  New stack:
[10:53:24.068] |  :  .  |  :  .  |  :  List of 1
[10:53:24.068] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.068] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.068] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.068] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.068] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.068] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.068] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.068] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.068] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.068] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.071] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.071] |  :  .  |  :  .  |  :  List of 1
[10:53:24.071] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.071] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.071] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.071] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.071] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.071] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.071] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.071] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.071] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.071] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.073] |  :  .  |  :  .  |  :  Identical
[10:53:24.074] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.074] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.074] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.074] |  :  .  |  :  .  |  1. sequential:
[10:53:24.074] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.074] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.074] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:24.074] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.074] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.074] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.075] |  :  .  |  SequentialFuture started (and completed)
[10:53:24.075] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:24.075] |  :  Launching futures ... done
[10:53:24.075] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:24.075] |  Using SequentialFutureBackend ... done
[10:53:24.075] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.076] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.076] |  Searching for globals ...
[10:53:24.079] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.079] |  Searching for globals ... DONE
[10:53:24.079] |  Resolving globals: TRUE
[10:53:24.079] |  Resolving any globals that are futures ...
[10:53:24.079] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.080] |  Resolving any globals that are futures ... DONE
[10:53:24.080] |  Search for packages associated with the globals ...
[10:53:24.080] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.080] |  :  Packages: [1] ‘base’
[10:53:24.080] |  Search for packages associated with the globals ... DONE
[10:53:24.080] |  Resolving futures part of globals (recursively) ...
[10:53:24.081] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.081] |  :  .  recursive: 99
[10:53:24.081] |  :  .  length: 1
[10:53:24.081] |  :  .  elements: ‘x’
[10:53:24.081] |  :  .  'obj' is list
[10:53:24.081] |  :  .  resolve(obj, ...) ...
[10:53:24.081] |  :  .  resolve(obj, ...) ... done
[10:53:24.081] |  :  .  length: 0 (resolved future 1)
[10:53:24.081] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.082] |  :  globals: [1] ‘x’
[10:53:24.082] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.082] |  Packages after dropping 'base': [0] 
[10:53:24.082] |  globals: [1] ‘x’
[10:53:24.082] |  packages: [0] 
[10:53:24.082] getGlobalsAndPackages() ... done
[10:53:24.082] run() for Future (‘Future’) ...
[10:53:24.082] |  state: ‘created’
[10:53:24.082] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.083] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.083] |  Using SequentialFutureBackend ...
[10:53:24.083] |  :  Launching futures ...
[10:53:24.083] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:24.083] |  :  .  |  getFutureData() ...
[10:53:24.083] |  :  .  |  :  getFutureCore() ...
[10:53:24.083] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.083] |  :  .  |  :  getFutureCore() ... done
[10:53:24.083] |  :  .  |  :  getFutureCapture() ...
[10:53:24.083] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.084] |  :  .  |  :  getFutureContext() ...
[10:53:24.084] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.084] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.084] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.084] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.084] |  :  .  |  :  getFutureContext() ... done
[10:53:24.084] |  :  .  |  getFutureData() ... done
[10:53:24.084] |  :  .  |  attachPackages() ...
[10:53:24.084] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.085] |  :  .  |  attachPackages() ... DONE
[10:53:24.085] |  :  .  |  attachPackages() ...
[10:53:24.085] |  :  .  |  :  packages: [n=0] 
[10:53:24.085] |  :  .  |  attachPackages() ... DONE
[10:53:24.085] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.085] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.085] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.086] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.086] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.086] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.086] |  :  .  |  :  .  |  New stack:
[10:53:24.086] |  :  .  |  :  .  |  List of 1
[10:53:24.086] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.086] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.086] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.086] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.086] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.086] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.086] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.088] |  :  .  |  :  .  |  Old stack:
[10:53:24.088] |  :  .  |  :  .  |  List of 1
[10:53:24.088] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.088] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.088] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.088] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.088] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.088] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:24.088] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.088] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.088] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.088] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.091] |  :  .  |  :  .  |  Not identical
[10:53:24.091] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.091] |  :  .  |  :  .  |  :  List of 2
[10:53:24.091] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.091] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.091] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.091] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.091] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.091] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.091] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.091] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.091] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.091] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.091] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.091] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.091] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.091] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.091] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.096] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.096] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.096] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.096] |  :  .  |  :  .  List of future strategies:
[10:53:24.096] |  :  .  |  :  .  1. sequential:
[10:53:24.096] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.096] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.096] |  :  .  |  :  .     - call: plan(sequential)
[10:53:24.096] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.097] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.098] |  :  .  |  assign_globals() ...
[10:53:24.098] |  :  .  |  List of 1
[10:53:24.098] |  :  .  |   $ x: list()
[10:53:24.098] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.098] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.098] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.098] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.098] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.098] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.100] |  :  .  |  - copied ‘x’ to environment
[10:53:24.100] |  :  .  |  assign_globals() ... done
[10:53:24.102] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.102] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.102] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.102] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.102] |  :  .  |  :  .  |  :  New stack:
[10:53:24.102] |  :  .  |  :  .  |  :  List of 1
[10:53:24.102] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.102] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.102] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.102] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.102] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.102] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.102] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.102] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.102] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.102] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.105] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.105] |  :  .  |  :  .  |  :  List of 1
[10:53:24.105] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.105] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.105] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.105] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.105] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.105] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.105] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.105] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.105] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.105] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.108] |  :  .  |  :  .  |  :  Identical
[10:53:24.108] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.108] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.108] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.108] |  :  .  |  :  .  |  1. sequential:
[10:53:24.108] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.108] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.108] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:24.109] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.109] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.109] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.109] |  :  .  |  SequentialFuture started (and completed)
[10:53:24.109] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:24.109] |  :  Launching futures ... done
[10:53:24.109] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:24.110] |  Using SequentialFutureBackend ... done
[10:53:24.110] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.110] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.110] |  Searching for globals ...
[10:53:24.112] |  :  globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:24.112] |  Searching for globals ... DONE
[10:53:24.113] |  Resolving globals: TRUE
[10:53:24.113] |  Resolving any globals that are futures ...
[10:53:24.113] |  :  globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:24.113] |  Resolving any globals that are futures ... DONE
[10:53:24.113] |  Search for packages associated with the globals ...
[10:53:24.113] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.113] |  :  Packages: [1] ‘base’
[10:53:24.113] |  Search for packages associated with the globals ... DONE
[10:53:24.114] |  Resolving futures part of globals (recursively) ...
[10:53:24.114] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.114] |  :  .  recursive: 99
[10:53:24.114] |  :  .  length: 1
[10:53:24.114] |  :  .  elements: ‘x’
[10:53:24.114] |  :  .  'obj' is list
[10:53:24.114] |  :  .  resolve(obj, ...) ...
[10:53:24.114] |  :  .  resolve(obj, ...) ... done
[10:53:24.114] |  :  .  length: 0 (resolved future 1)
[10:53:24.115] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.115] |  :  globals: [1] ‘x’
[10:53:24.115] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.115] |  Packages after dropping 'base': [0] 
[10:53:24.115] |  globals: [1] ‘x’
[10:53:24.115] |  packages: [0] 
[10:53:24.115] getGlobalsAndPackages() ... done
[10:53:24.115] run() for Future (‘Future’) ...
[10:53:24.115] |  state: ‘created’
[10:53:24.116] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.117] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.117] |  Using SequentialFutureBackend ...
[10:53:24.117] |  :  Launching futures ...
[10:53:24.117] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:24.117] |  :  .  |  getFutureData() ...
[10:53:24.117] |  :  .  |  :  getFutureCore() ...
[10:53:24.117] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.117] |  :  .  |  :  getFutureCore() ... done
[10:53:24.117] |  :  .  |  :  getFutureCapture() ...
[10:53:24.117] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.118] |  :  .  |  :  getFutureContext() ...
[10:53:24.118] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.118] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.118] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.118] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.118] |  :  .  |  :  getFutureContext() ... done
[10:53:24.118] |  :  .  |  getFutureData() ... done
[10:53:24.118] |  :  .  |  attachPackages() ...
[10:53:24.118] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.119] |  :  .  |  attachPackages() ... DONE
[10:53:24.119] |  :  .  |  attachPackages() ...
[10:53:24.119] |  :  .  |  :  packages: [n=0] 
[10:53:24.119] |  :  .  |  attachPackages() ... DONE
[10:53:24.119] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.119] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.119] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.120] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.120] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.120] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.120] |  :  .  |  :  .  |  New stack:
[10:53:24.120] |  :  .  |  :  .  |  List of 1
[10:53:24.120] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.120] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.120] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.120] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.120] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.120] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.120] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.122] |  :  .  |  :  .  |  Old stack:
[10:53:24.122] |  :  .  |  :  .  |  List of 1
[10:53:24.122] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.122] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.122] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.122] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.122] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.122] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:24.122] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.122] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.122] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.122] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.125] |  :  .  |  :  .  |  Not identical
[10:53:24.125] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.125] |  :  .  |  :  .  |  :  List of 2
[10:53:24.125] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.125] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.125] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.125] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.125] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.125] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.125] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.125] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.125] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.125] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.125] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.125] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.125] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.125] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.125] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.130] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.130] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.130] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.130] |  :  .  |  :  .  List of future strategies:
[10:53:24.130] |  :  .  |  :  .  1. sequential:
[10:53:24.130] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.130] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.130] |  :  .  |  :  .     - call: plan(sequential)
[10:53:24.130] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.131] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.131] |  :  .  |  assign_globals() ...
[10:53:24.131] |  :  .  |  List of 1
[10:53:24.131] |  :  .  |   $ x: list()
[10:53:24.131] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.131] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.131] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.131] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.131] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.131] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.133] |  :  .  |  - copied ‘x’ to environment
[10:53:24.133] |  :  .  |  assign_globals() ... done
[10:53:24.135] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.136] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.136] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.136] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.136] |  :  .  |  :  .  |  :  New stack:
[10:53:24.136] |  :  .  |  :  .  |  :  List of 1
[10:53:24.136] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.136] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.136] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.136] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.136] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.136] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.136] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.136] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.136] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.136] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.139] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.139] |  :  .  |  :  .  |  :  List of 1
[10:53:24.139] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.139] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.139] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.139] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.139] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.139] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.139] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.139] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.139] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.139] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.142] |  :  .  |  :  .  |  :  Identical
[10:53:24.142] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.142] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.142] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.142] |  :  .  |  :  .  |  1. sequential:
[10:53:24.142] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.142] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.142] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:24.142] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.143] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.143] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.143] |  :  .  |  SequentialFuture started (and completed)
[10:53:24.143] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:24.143] |  :  Launching futures ... done
[10:53:24.143] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:24.143] |  Using SequentialFutureBackend ... done
[10:53:24.143] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.144] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.144] |  Searching for globals ...
[10:53:24.146] |  :  globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:24.146] |  Searching for globals ... DONE
[10:53:24.146] |  Resolving globals: TRUE
[10:53:24.146] |  Resolving any globals that are futures ...
[10:53:24.146] |  :  globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:24.147] |  Resolving any globals that are futures ... DONE
[10:53:24.147] |  Search for packages associated with the globals ...
[10:53:24.147] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.147] |  :  Packages: [1] ‘base’
[10:53:24.147] |  Search for packages associated with the globals ... DONE
[10:53:24.147] |  Resolving futures part of globals (recursively) ...
[10:53:24.148] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.148] |  :  .  recursive: 99
[10:53:24.148] |  :  .  length: 1
[10:53:24.148] |  :  .  elements: ‘x’
[10:53:24.148] |  :  .  'obj' is list
[10:53:24.148] |  :  .  resolve(obj, ...) ...
[10:53:24.148] |  :  .  resolve(obj, ...) ... done
[10:53:24.148] |  :  .  length: 0 (resolved future 1)
[10:53:24.148] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.148] |  :  globals: [1] ‘x’
[10:53:24.149] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.149] |  Packages after dropping 'base': [0] 
[10:53:24.149] |  globals: [1] ‘x’
[10:53:24.149] |  packages: [0] 
[10:53:24.149] getGlobalsAndPackages() ... done
[10:53:24.149] run() for Future (‘Future’) ...
[10:53:24.149] |  state: ‘created’
[10:53:24.149] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.149] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.150] |  Using SequentialFutureBackend ...
[10:53:24.150] |  :  Launching futures ...
[10:53:24.150] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:24.150] |  :  .  |  getFutureData() ...
[10:53:24.150] |  :  .  |  :  getFutureCore() ...
[10:53:24.150] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.150] |  :  .  |  :  getFutureCore() ... done
[10:53:24.150] |  :  .  |  :  getFutureCapture() ...
[10:53:24.150] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.150] |  :  .  |  :  getFutureContext() ...
[10:53:24.151] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.151] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.151] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.151] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.151] |  :  .  |  :  getFutureContext() ... done
[10:53:24.151] |  :  .  |  getFutureData() ... done
[10:53:24.151] |  :  .  |  attachPackages() ...
[10:53:24.151] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.151] |  :  .  |  attachPackages() ... DONE
[10:53:24.152] |  :  .  |  attachPackages() ...
[10:53:24.152] |  :  .  |  :  packages: [n=0] 
[10:53:24.152] |  :  .  |  attachPackages() ... DONE
[10:53:24.152] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.152] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.152] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.153] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.153] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.153] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.153] |  :  .  |  :  .  |  New stack:
[10:53:24.153] |  :  .  |  :  .  |  List of 1
[10:53:24.153] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.153] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.153] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.153] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.153] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.153] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.153] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.183] |  :  .  |  :  .  |  Old stack:
[10:53:24.183] |  :  .  |  :  .  |  List of 1
[10:53:24.183] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.183] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.183] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.183] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.183] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.183] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:24.183] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.183] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.183] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.183] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.186] |  :  .  |  :  .  |  Not identical
[10:53:24.186] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.186] |  :  .  |  :  .  |  :  List of 2
[10:53:24.186] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.186] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.186] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.186] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.186] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.186] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.186] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.186] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.186] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.186] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.186] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.186] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.186] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.186] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.186] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.191] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.191] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.191] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.191] |  :  .  |  :  .  List of future strategies:
[10:53:24.191] |  :  .  |  :  .  1. sequential:
[10:53:24.191] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.191] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.191] |  :  .  |  :  .     - call: plan(sequential)
[10:53:24.191] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.192] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.192] |  :  .  |  assign_globals() ...
[10:53:24.192] |  :  .  |  List of 1
[10:53:24.192] |  :  .  |   $ x: list()
[10:53:24.192] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.192] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.192] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.192] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.192] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.192] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.194] |  :  .  |  - copied ‘x’ to environment
[10:53:24.194] |  :  .  |  assign_globals() ... done
[10:53:24.196] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.196] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.196] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.196] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.196] |  :  .  |  :  .  |  :  New stack:
[10:53:24.196] |  :  .  |  :  .  |  :  List of 1
[10:53:24.196] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.196] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.196] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.196] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.196] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.196] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.196] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.196] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.196] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.196] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.199] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.199] |  :  .  |  :  .  |  :  List of 1
[10:53:24.199] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.199] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.199] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.199] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.199] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.199] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.199] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.199] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.199] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.199] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.203] |  :  .  |  :  .  |  :  Identical
[10:53:24.203] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.203] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.203] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.203] |  :  .  |  :  .  |  1. sequential:
[10:53:24.203] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.203] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.203] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:24.204] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.204] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.204] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.204] |  :  .  |  SequentialFuture started (and completed)
[10:53:24.204] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:24.204] |  :  Launching futures ... done
[10:53:24.205] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:24.205] |  Using SequentialFutureBackend ... done
[10:53:24.205] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.205] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.205] |  Searching for globals ...
[10:53:24.208] |  :  globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:24.208] |  Searching for globals ... DONE
[10:53:24.208] |  Resolving globals: TRUE
[10:53:24.208] |  Resolving any globals that are futures ...
[10:53:24.208] |  :  globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:24.208] |  Resolving any globals that are futures ... DONE
[10:53:24.208] |  Search for packages associated with the globals ...
[10:53:24.208] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.209] |  :  Packages: [1] ‘base’
[10:53:24.209] |  Search for packages associated with the globals ... DONE
[10:53:24.209] |  Resolving futures part of globals (recursively) ...
[10:53:24.209] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.209] |  :  .  recursive: 99
[10:53:24.209] |  :  .  length: 1
[10:53:24.209] |  :  .  elements: ‘x’
[10:53:24.209] |  :  .  'obj' is list
[10:53:24.210] |  :  .  resolve(obj, ...) ...
[10:53:24.210] |  :  .  resolve(obj, ...) ... done
[10:53:24.210] |  :  .  length: 0 (resolved future 1)
[10:53:24.210] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.210] |  :  globals: [1] ‘x’
[10:53:24.210] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.210] |  Packages after dropping 'base': [0] 
[10:53:24.210] |  globals: [1] ‘x’
[10:53:24.210] |  packages: [0] 
[10:53:24.210] getGlobalsAndPackages() ... done
[10:53:24.211] run() for Future (‘Future’) ...
[10:53:24.211] |  state: ‘created’
[10:53:24.211] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.211] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.211] |  Using SequentialFutureBackend ...
[10:53:24.211] |  :  Launching futures ...
[10:53:24.211] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:24.211] |  :  .  |  getFutureData() ...
[10:53:24.211] |  :  .  |  :  getFutureCore() ...
[10:53:24.212] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.212] |  :  .  |  :  getFutureCore() ... done
[10:53:24.212] |  :  .  |  :  getFutureCapture() ...
[10:53:24.212] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.212] |  :  .  |  :  getFutureContext() ...
[10:53:24.212] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.212] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.212] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.212] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.212] |  :  .  |  :  getFutureContext() ... done
[10:53:24.212] |  :  .  |  getFutureData() ... done
[10:53:24.213] |  :  .  |  attachPackages() ...
[10:53:24.213] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.213] |  :  .  |  attachPackages() ... DONE
[10:53:24.213] |  :  .  |  attachPackages() ...
[10:53:24.213] |  :  .  |  :  packages: [n=0] 
[10:53:24.213] |  :  .  |  attachPackages() ... DONE
[10:53:24.213] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.214] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.214] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.214] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.214] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.214] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.214] |  :  .  |  :  .  |  New stack:
[10:53:24.214] |  :  .  |  :  .  |  List of 1
[10:53:24.214] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.214] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.214] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.214] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.214] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.214] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.214] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.217] |  :  .  |  :  .  |  Old stack:
[10:53:24.217] |  :  .  |  :  .  |  List of 1
[10:53:24.217] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.217] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.217] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.217] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.217] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.217] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:24.217] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.217] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.217] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.217] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.219] |  :  .  |  :  .  |  Not identical
[10:53:24.219] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.220] |  :  .  |  :  .  |  :  List of 2
[10:53:24.220] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.220] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.220] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.220] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.220] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.220] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.220] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.220] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.220] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.220] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.220] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.220] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.220] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.220] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.220] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.225] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.225] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.225] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.225] |  :  .  |  :  .  List of future strategies:
[10:53:24.225] |  :  .  |  :  .  1. sequential:
[10:53:24.225] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.225] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.225] |  :  .  |  :  .     - call: plan(sequential)
[10:53:24.226] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.226] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.226] |  :  .  |  assign_globals() ...
[10:53:24.226] |  :  .  |  List of 1
[10:53:24.226] |  :  .  |   $ x: list()
[10:53:24.226] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.226] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.226] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.226] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.226] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.226] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.228] |  :  .  |  - copied ‘x’ to environment
[10:53:24.228] |  :  .  |  assign_globals() ... done
[10:53:24.230] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.230] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.230] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.230] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.230] |  :  .  |  :  .  |  :  New stack:
[10:53:24.230] |  :  .  |  :  .  |  :  List of 1
[10:53:24.230] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.230] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.230] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.230] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.230] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.230] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.230] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.230] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.230] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.230] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.233] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.233] |  :  .  |  :  .  |  :  List of 1
[10:53:24.233] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.233] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.233] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.233] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.233] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.233] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.233] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.233] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.233] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.233] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.236] |  :  .  |  :  .  |  :  Identical
[10:53:24.236] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.236] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.236] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.236] |  :  .  |  :  .  |  1. sequential:
[10:53:24.236] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.236] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.236] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:24.237] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.237] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.237] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.237] |  :  .  |  SequentialFuture started (and completed)
[10:53:24.237] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:24.237] |  :  Launching futures ... done
[10:53:24.237] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:24.237] |  Using SequentialFutureBackend ... done
[10:53:24.238] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.238] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.238] |  Searching for globals ...
[10:53:24.240] |  :  globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[10:53:24.241] |  Searching for globals ... DONE
[10:53:24.241] |  Resolving globals: TRUE
[10:53:24.241] |  Resolving any globals that are futures ...
[10:53:24.241] |  :  globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[10:53:24.241] |  Resolving any globals that are futures ... DONE
[10:53:24.241] |  Search for packages associated with the globals ...
[10:53:24.241] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.242] |  :  Packages: [1] ‘base’
[10:53:24.242] |  Search for packages associated with the globals ... DONE
[10:53:24.242] |  Resolving futures part of globals (recursively) ...
[10:53:24.242] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.242] |  :  .  recursive: 99
[10:53:24.242] |  :  .  length: 2
[10:53:24.242] |  :  .  elements: ‘x’, ‘name’
[10:53:24.243] |  :  .  'obj' is list
[10:53:24.243] |  :  .  resolve(obj, ...) ...
[10:53:24.243] |  :  .  resolve(obj, ...) ... done
[10:53:24.243] |  :  .  length: 1 (resolved future 1)
[10:53:24.243] |  :  .  'obj' is atomic
[10:53:24.243] |  :  .  length: 0 (resolved future 2)
[10:53:24.244] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.245] |  :  globals: [2] ‘x’, ‘name’
[10:53:24.245] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.245] |  Packages after dropping 'base': [0] 
[10:53:24.245] |  globals: [2] ‘x’, ‘name’
[10:53:24.245] |  packages: [0] 
[10:53:24.245] getGlobalsAndPackages() ... done
[10:53:24.245] run() for Future (‘Future’) ...
[10:53:24.246] |  state: ‘created’
[10:53:24.246] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.246] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.246] |  Using SequentialFutureBackend ...
[10:53:24.246] |  :  Launching futures ...
[10:53:24.246] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:24.246] |  :  .  |  getFutureData() ...
[10:53:24.246] |  :  .  |  :  getFutureCore() ...
[10:53:24.247] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.247] |  :  .  |  :  getFutureCore() ... done
[10:53:24.247] |  :  .  |  :  getFutureCapture() ...
[10:53:24.247] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.247] |  :  .  |  :  getFutureContext() ...
[10:53:24.247] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.247] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.247] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.247] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.247] |  :  .  |  :  getFutureContext() ... done
[10:53:24.248] |  :  .  |  getFutureData() ... done
[10:53:24.248] |  :  .  |  attachPackages() ...
[10:53:24.248] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.248] |  :  .  |  attachPackages() ... DONE
[10:53:24.248] |  :  .  |  attachPackages() ...
[10:53:24.248] |  :  .  |  :  packages: [n=0] 
[10:53:24.248] |  :  .  |  attachPackages() ... DONE
[10:53:24.249] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.249] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.249] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.249] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.249] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.249] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.249] |  :  .  |  :  .  |  New stack:
[10:53:24.250] |  :  .  |  :  .  |  List of 1
[10:53:24.250] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.250] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.250] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.250] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.250] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.250] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.250] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.252] |  :  .  |  :  .  |  Old stack:
[10:53:24.252] |  :  .  |  :  .  |  List of 1
[10:53:24.252] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.252] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.252] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.252] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.252] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.252] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:24.252] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.252] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.252] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.252] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.255] |  :  .  |  :  .  |  Not identical
[10:53:24.255] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.255] |  :  .  |  :  .  |  :  List of 2
[10:53:24.255] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.255] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.255] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.255] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.255] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.255] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.255] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.255] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.255] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.255] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.255] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.255] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.255] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.255] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.255] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.260] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.260] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.260] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.260] |  :  .  |  :  .  List of future strategies:
[10:53:24.260] |  :  .  |  :  .  1. sequential:
[10:53:24.260] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.260] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.260] |  :  .  |  :  .     - call: plan(sequential)
[10:53:24.261] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.261] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.261] |  :  .  |  assign_globals() ...
[10:53:24.261] |  :  .  |  List of 2
[10:53:24.261] |  :  .  |   $ x   : list()
[10:53:24.261] |  :  .  |   $ name: chr "a"
[10:53:24.261] |  :  .  |   - attr(*, "where")=List of 2
[10:53:24.261] |  :  .  |    ..$ x   :<environment: R_EmptyEnv> 
[10:53:24.261] |  :  .  |    ..$ name:<environment: R_EmptyEnv> 
[10:53:24.261] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.261] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.261] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.261] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.264] |  :  .  |  - copied ‘x’ to environment
[10:53:24.264] |  :  .  |  - copied ‘name’ to environment
[10:53:24.264] |  :  .  |  assign_globals() ... done
[10:53:24.267] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.267] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.267] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.267] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.267] |  :  .  |  :  .  |  :  New stack:
[10:53:24.267] |  :  .  |  :  .  |  :  List of 1
[10:53:24.267] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.267] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.267] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.267] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.267] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.267] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.267] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.267] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.267] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.267] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.270] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.270] |  :  .  |  :  .  |  :  List of 1
[10:53:24.270] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.270] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.270] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.270] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.270] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.270] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:24.270] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.270] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.270] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.270] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.273] |  :  .  |  :  .  |  :  Identical
[10:53:24.273] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.273] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:24.274] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.274] |  :  .  |  :  .  |  1. sequential:
[10:53:24.274] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.274] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.274] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:24.274] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.274] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.274] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.274] |  :  .  |  SequentialFuture started (and completed)
[10:53:24.275] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:24.275] |  :  Launching futures ... done
[10:53:24.275] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:24.275] |  Using SequentialFutureBackend ... done
[10:53:24.275] run() for Future (‘SequentialFuture’) ... done
$a
[1] 1

Testing with 1 cores ... DONE
Testing with 2 cores ...
availableCores(): 2
- plan('multicore') ...
[10:53:24.277] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.277] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:53:24.277] |  :  all.equal() for FutureStrategyList ...
[10:53:24.277] |  :  .  New stack:
[10:53:24.277] |  :  .  List of 1
[10:53:24.277] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.277] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.277] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.277] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.277] |  :  .      ...)  
[10:53:24.277] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.277] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.277] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:24.277] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.280] |  :  .  Old stack:
[10:53:24.280] |  :  .  List of 1
[10:53:24.280] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.280] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.280] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.280] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.280] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.280] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:53:24.280] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.280] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.280] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.280] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.283] |  :  .  Not identical
[10:53:24.283] |  :  .  all.equal() for future ...
[10:53:24.283] |  :  .  |  List of 2
[10:53:24.283] |  :  .  |   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.283] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.283] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.283] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.283] |  :  .  |      ...)  
[10:53:24.283] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.283] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.283] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.283] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.283] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.283] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.283] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.283] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.283] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:24.283] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eee987ee8> 
[10:53:24.283] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.283] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.288] |  :  .  |  Formals differ
[10:53:24.288] |  :  .  all.equal() for future ... done
[10:53:24.288] |  :  .  Future strategies differ at level 1
[10:53:24.288] |  :  all.equal() for FutureStrategyList ... done
[10:53:24.288] |  :  plan(): Setting new future strategy stack:
[10:53:24.288] |  :  List of future strategies:
[10:53:24.288] |  :  1. multicore:
[10:53:24.288] |  :     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:24.288] |  :     - tweaked: FALSE
[10:53:24.288] |  :     - call: plan(strategy)
[10:53:24.289] |  :  List of 1
[10:53:24.289] |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.289] |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.289] |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.289] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.289] |  :      ...)  
[10:53:24.289] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.289] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.289] |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.289] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.291] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:53:24.291] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.291] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.291] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.292] |  :  .  Legacy shutdown of cluster workers ...
[10:53:24.292] |  :  .  |  Stopping existing cluster ...
[10:53:24.292] |  :  .  |  :  No pre-existing cluster. Skipping
[10:53:24.292] |  :  .  |  Stopping existing cluster ... done
[10:53:24.292] |  :  .  Legacy shutdown of cluster workers ... done
[10:53:24.292] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:53:24.292] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:53:24.292] |  :  .  function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.292] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.292] |  :  .   - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.292] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.292] |  :  .      ...)  
[10:53:24.292] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.292] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.292] |  :  .   - attr(*, "call")= language plan(strategy)
[10:53:24.294] |  :  .  init: NULL
[10:53:24.294] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:53:24.295] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.295] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.295] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.295] |  :  Backend function: <‘NULL’>
[10:53:24.297] |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.297] |  :  plan(): nbrOfWorkers() = 2
[10:53:24.297] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:53:24.297] plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.297] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.297] |  Searching for globals ...
[10:53:24.299] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:24.300] |  Searching for globals ... DONE
[10:53:24.300] |  Resolving globals: TRUE
[10:53:24.300] |  Resolving any globals that are futures ...
[10:53:24.300] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:24.300] |  Resolving any globals that are futures ... DONE
[10:53:24.300] |  Search for packages associated with the globals ...
[10:53:24.300] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.300] |  :  Packages: [1] ‘base’
[10:53:24.301] |  Search for packages associated with the globals ... DONE
[10:53:24.301] |  Resolving futures part of globals (recursively) ...
[10:53:24.301] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.301] |  :  .  recursive: 99
[10:53:24.301] |  :  .  length: 1
[10:53:24.301] |  :  .  elements: ‘x’
[10:53:24.301] |  :  .  'obj' is list
[10:53:24.301] |  :  .  resolve(obj, ...) ...
[10:53:24.301] |  :  .  resolve(obj, ...) ... done
[10:53:24.302] |  :  .  length: 0 (resolved future 1)
[10:53:24.302] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.302] |  :  globals: [1] ‘x’
[10:53:24.302] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.302] |  Packages after dropping 'base': [0] 
[10:53:24.302] |  globals: [1] ‘x’
[10:53:24.302] |  packages: [0] 
[10:53:24.302] getGlobalsAndPackages() ... done
[10:53:24.302] run() for Future (‘Future’) ...
[10:53:24.303] |  state: ‘created’
[10:53:24.303] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.303] |  :  makeFutureBackend(<multicore>) ...
[10:53:24.303] |  :  .  Backend function: <‘NULL’>
[10:53:24.314] |  :  .  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.314] |  :  makeFutureBackend(<multicore>) ... done
[10:53:24.314] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.314] |  Using MulticoreFutureBackend ...
[10:53:24.315] |  :  Launching futures ...
[10:53:24.315] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.315] |  :  .  |  getFutureData() ...
[10:53:24.315] |  :  .  |  :  getFutureCore() ...
[10:53:24.315] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.315] |  :  .  |  :  getFutureCore() ... done
[10:53:24.315] |  :  .  |  :  getFutureCapture() ...
[10:53:24.315] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.316] |  :  .  |  :  getFutureContext() ...
[10:53:24.316] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.316] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.316] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.316] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.316] |  :  .  |  :  getFutureContext() ... done
[10:53:24.317] |  :  .  |  getFutureData() ... done
[10:53:24.317] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.317] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.320] |  :  .  |  MulticoreFuture started
[10:53:24.320] |  :  .  |  attachPackages() ...
[10:53:24.320] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.320] |  :  Launching futures ... done
[10:53:24.320] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.321] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:24.321] |  :  .  |  attachPackages() ... DONE
[10:53:24.321] |  Using MulticoreFutureBackend ... done
[10:53:24.321] |  :  .  |  attachPackages() ...
[10:53:24.321] run() for Future (‘MulticoreFuture’) ... done
[10:53:24.321] |  :  .  |  :  packages: [n=0] 
[10:53:24.322] |  :  .  |  attachPackages() ... DONE
[10:53:24.322] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.323] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.323] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.324] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.324] result() for MulticoreFuture ...
[10:53:24.324] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.324] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.324] |  :  .  |  :  .  |  New stack:
[10:53:24.325] |  :  .  |  :  .  |  List of 1
[10:53:24.325] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.325] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.325] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.325] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.325] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.325] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.325] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.329] |  :  .  |  :  .  |  Old stack:
[10:53:24.329] |  :  .  |  :  .  |  List of 1
[10:53:24.329] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.329] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.329] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.329] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.329] |  :  .  |  :  .  |      ...)  
[10:53:24.329] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.329] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.329] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.329] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.329] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.329] |  :  .  |  :  .  |      ...)  
[10:53:24.329] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.329] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.334] |  :  .  |  :  .  |  Not identical
[10:53:24.334] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.334] |  :  .  |  :  .  |  :  List of 2
[10:53:24.334] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.334] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.334] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.334] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.334] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.334] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.334] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.334] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.334] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.334] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.334] |  :  .  |  :  .  |  :      ...)  
[10:53:24.334] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.334] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.334] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.334] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.334] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.334] |  :  .  |  :  .  |  :      ...)  
[10:53:24.334] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.341] |  :  .  |  :  .  |  :  Formals differ
[10:53:24.341] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.342] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:24.342] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.345] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:24.345] |  :  .  |  :  .  List of future strategies:
[10:53:24.345] |  :  .  |  :  .  1. sequential:
[10:53:24.345] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.345] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.345] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.346] |  :  .  |  :  .  List of 1
[10:53:24.346] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.346] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.346] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.346] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.346] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.346] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.346] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.350] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.350] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.350] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.351] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.351] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.351] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:24.351] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.352] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:24.352] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.352] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.353] |  :  .  |  assign_globals() ...
[10:53:24.353] |  :  .  |  List of 1
[10:53:24.353] |  :  .  |   $ x: list()
[10:53:24.353] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.353] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.353] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.353] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.353] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.353] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.356] |  :  .  |  - copied ‘x’ to environment
[10:53:24.356] |  :  .  |  assign_globals() ... done
[10:53:24.359] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.359] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.359] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.359] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.359] |  :  .  |  :  .  |  :  New stack:
[10:53:24.359] |  :  .  |  :  .  |  :  List of 1
[10:53:24.359] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.359] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.359] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.359] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.359] |  :  .  |  :  .  |  :      ...)  
[10:53:24.359] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.359] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.359] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.359] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.359] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.359] |  :  .  |  :  .  |  :      ...)  
[10:53:24.359] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.359] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.362] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.362] |  :  .  |  :  .  |  :  List of 1
[10:53:24.362] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.362] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.362] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.362] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.362] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.362] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.362] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.365] |  :  .  |  :  .  |  :  Not identical
[10:53:24.365] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:24.365] |  :  .  |  :  .  |  :  .  List of 2
[10:53:24.365] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.365] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.365] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.365] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.365] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.365] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.365] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.365] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:24.365] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.365] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.365] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.365] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.365] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.365] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.365] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.365] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.365] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.365] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.369] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:24.369] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:24.369] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:24.370] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.370] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:24.370] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.370] |  :  .  |  :  .  |  1. multicore:
[10:53:24.370] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:24.370] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.370] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:24.370] |  :  .  |  :  .  |  List of 1
[10:53:24.370] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.370] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.370] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.370] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.370] |  :  .  |  :  .  |      ...)  
[10:53:24.370] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.370] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.370] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.370] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.370] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.370] |  :  .  |  :  .  |      ...)  
[10:53:24.370] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.370] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.374] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.375] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.375] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.375] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.375] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.375] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:24.375] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.375] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.375] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.376] |  readImmediateCondition() ...
[10:53:24.377] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:24.377] |   - Number of RDS files: 0
[10:53:24.377] |  readImmediateCondition() ... DONE
[10:53:24.381] |  result() for MulticoreFuture ...
[10:53:24.381] |  result() for MulticoreFuture ... done
[10:53:24.381] result() for MulticoreFuture ... done
[10:53:24.381] result() for MulticoreFuture ...
[10:53:24.381] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.382] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.382] |  Searching for globals ...
[10:53:24.385] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:24.385] |  Searching for globals ... DONE
[10:53:24.385] |  Resolving globals: TRUE
[10:53:24.385] |  Resolving any globals that are futures ...
[10:53:24.385] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:24.385] |  Resolving any globals that are futures ... DONE
[10:53:24.386] |  Search for packages associated with the globals ...
[10:53:24.386] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.386] |  :  Packages: [1] ‘base’
[10:53:24.386] |  Search for packages associated with the globals ... DONE
[10:53:24.386] |  Resolving futures part of globals (recursively) ...
[10:53:24.387] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.387] |  :  .  recursive: 99
[10:53:24.387] |  :  .  length: 1
[10:53:24.387] |  :  .  elements: ‘x’
[10:53:24.387] |  :  .  'obj' is list
[10:53:24.387] |  :  .  resolve(obj, ...) ...
[10:53:24.388] |  :  .  resolve(obj, ...) ... done
[10:53:24.388] |  :  .  length: 0 (resolved future 1)
[10:53:24.388] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.388] |  :  globals: [1] ‘x’
[10:53:24.388] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.388] |  Packages after dropping 'base': [0] 
[10:53:24.388] |  globals: [1] ‘x’
[10:53:24.389] |  packages: [0] 
[10:53:24.389] getGlobalsAndPackages() ... done
[10:53:24.389] run() for Future (‘Future’) ...
[10:53:24.389] |  state: ‘created’
[10:53:24.389] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.389] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.390] |  Using MulticoreFutureBackend ...
[10:53:24.390] |  :  Launching futures ...
[10:53:24.390] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.390] |  :  .  |  getFutureData() ...
[10:53:24.390] |  :  .  |  :  getFutureCore() ...
[10:53:24.390] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.390] |  :  .  |  :  getFutureCore() ... done
[10:53:24.390] |  :  .  |  :  getFutureCapture() ...
[10:53:24.391] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.391] |  :  .  |  :  getFutureContext() ...
[10:53:24.391] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.391] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.391] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.391] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.393] |  :  .  |  :  getFutureContext() ... done
[10:53:24.393] |  :  .  |  getFutureData() ... done
[10:53:24.394] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.394] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.396] |  :  .  |  MulticoreFuture started
[10:53:24.397] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.397] |  :  .  |  attachPackages() ...
[10:53:24.397] |  :  Launching futures ... done
[10:53:24.397] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.397] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:24.398] |  :  .  |  attachPackages() ... DONE
[10:53:24.398] |  Using MulticoreFutureBackend ... done
[10:53:24.398] |  :  .  |  attachPackages() ...
[10:53:24.398] run() for Future (‘MulticoreFuture’) ... done
[10:53:24.399] |  :  .  |  :  packages: [n=0] 
[10:53:24.399] result() for MulticoreFuture ...
[10:53:24.399] |  :  .  |  attachPackages() ... DONE
[10:53:24.400] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.400] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.401] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.402] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.402] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.403] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.403] |  :  .  |  :  .  |  New stack:
[10:53:24.403] |  :  .  |  :  .  |  List of 1
[10:53:24.403] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.403] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.403] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.403] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.403] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.403] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.403] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.408] |  :  .  |  :  .  |  Old stack:
[10:53:24.408] |  :  .  |  :  .  |  List of 1
[10:53:24.408] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.408] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.408] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.408] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.408] |  :  .  |  :  .  |      ...)  
[10:53:24.408] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.408] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.408] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.408] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.408] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.408] |  :  .  |  :  .  |      ...)  
[10:53:24.408] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.408] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.413] |  :  .  |  :  .  |  Not identical
[10:53:24.414] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.414] |  :  .  |  :  .  |  :  List of 2
[10:53:24.414] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.414] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.414] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.414] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.414] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.414] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.414] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.414] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.414] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.414] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.414] |  :  .  |  :  .  |  :      ...)  
[10:53:24.414] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.414] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.414] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.414] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.414] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.414] |  :  .  |  :  .  |  :      ...)  
[10:53:24.414] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.420] |  :  .  |  :  .  |  :  Formals differ
[10:53:24.421] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.421] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:24.421] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.421] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:24.421] |  :  .  |  :  .  List of future strategies:
[10:53:24.421] |  :  .  |  :  .  1. sequential:
[10:53:24.421] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.421] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.421] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.422] |  :  .  |  :  .  List of 1
[10:53:24.422] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.422] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.422] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.422] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.422] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.422] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.422] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.425] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.425] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.425] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.425] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.425] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.426] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:24.426] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.426] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:24.426] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.426] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.426] |  :  .  |  assign_globals() ...
[10:53:24.427] |  :  .  |  List of 1
[10:53:24.427] |  :  .  |   $ x: list()
[10:53:24.427] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.427] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.427] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.427] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.427] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.427] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.431] |  :  .  |  - copied ‘x’ to environment
[10:53:24.431] |  :  .  |  assign_globals() ... done
[10:53:24.434] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.434] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.434] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.434] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.434] |  :  .  |  :  .  |  :  New stack:
[10:53:24.435] |  :  .  |  :  .  |  :  List of 1
[10:53:24.435] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.435] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.435] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.435] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.435] |  :  .  |  :  .  |  :      ...)  
[10:53:24.435] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.435] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.435] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.435] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.435] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.435] |  :  .  |  :  .  |  :      ...)  
[10:53:24.435] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.435] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.437] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.438] |  :  .  |  :  .  |  :  List of 1
[10:53:24.438] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.438] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.438] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.438] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.438] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.438] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.438] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.440] |  :  .  |  :  .  |  :  Not identical
[10:53:24.440] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:24.440] |  :  .  |  :  .  |  :  .  List of 2
[10:53:24.440] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.440] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.440] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.440] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.440] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.440] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.440] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.440] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:24.440] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.440] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.440] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.440] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.440] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.440] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.440] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.440] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.440] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.440] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.444] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:24.444] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:24.445] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:24.445] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.445] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:24.445] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.445] |  :  .  |  :  .  |  1. multicore:
[10:53:24.445] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:24.445] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.445] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:24.445] |  :  .  |  :  .  |  List of 1
[10:53:24.445] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.445] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.445] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.445] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.445] |  :  .  |  :  .  |      ...)  
[10:53:24.445] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.445] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.445] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.445] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.445] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.445] |  :  .  |  :  .  |      ...)  
[10:53:24.445] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.445] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.448] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.448] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.448] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.448] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.449] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.449] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:24.449] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.449] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.449] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.450] |  readImmediateCondition() ...
[10:53:24.450] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:24.450] |   - Number of RDS files: 0
[10:53:24.450] |  readImmediateCondition() ... DONE
[10:53:24.451] |  result() for MulticoreFuture ...
[10:53:24.451] |  result() for MulticoreFuture ... done
[10:53:24.451] result() for MulticoreFuture ... done
[10:53:24.451] result() for MulticoreFuture ...
[10:53:24.452] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.452] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.453] |  Searching for globals ...
[10:53:24.456] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:24.456] |  Searching for globals ... DONE
[10:53:24.456] |  Resolving globals: TRUE
[10:53:24.456] |  Resolving any globals that are futures ...
[10:53:24.456] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:24.457] |  Resolving any globals that are futures ... DONE
[10:53:24.457] |  Search for packages associated with the globals ...
[10:53:24.457] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.457] |  :  Packages: [1] ‘base’
[10:53:24.458] |  Search for packages associated with the globals ... DONE
[10:53:24.458] |  Resolving futures part of globals (recursively) ...
[10:53:24.458] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.458] |  :  .  recursive: 99
[10:53:24.458] |  :  .  length: 1
[10:53:24.458] |  :  .  elements: ‘x’
[10:53:24.459] |  :  .  'obj' is list
[10:53:24.459] |  :  .  resolve(obj, ...) ...
[10:53:24.459] |  :  .  resolve(obj, ...) ... done
[10:53:24.459] |  :  .  length: 0 (resolved future 1)
[10:53:24.459] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.459] |  :  globals: [1] ‘x’
[10:53:24.459] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.460] |  Packages after dropping 'base': [0] 
[10:53:24.460] |  globals: [1] ‘x’
[10:53:24.460] |  packages: [0] 
[10:53:24.460] getGlobalsAndPackages() ... done
[10:53:24.460] run() for Future (‘Future’) ...
[10:53:24.460] |  state: ‘created’
[10:53:24.461] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.461] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.461] |  Using MulticoreFutureBackend ...
[10:53:24.461] |  :  Launching futures ...
[10:53:24.461] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.461] |  :  .  |  getFutureData() ...
[10:53:24.461] |  :  .  |  :  getFutureCore() ...
[10:53:24.461] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.462] |  :  .  |  :  getFutureCore() ... done
[10:53:24.462] |  :  .  |  :  getFutureCapture() ...
[10:53:24.462] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.462] |  :  .  |  :  getFutureContext() ...
[10:53:24.462] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.462] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.462] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.463] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.463] |  :  .  |  :  getFutureContext() ... done
[10:53:24.463] |  :  .  |  getFutureData() ... done
[10:53:24.463] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.463] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.465] |  :  .  |  MulticoreFuture started
[10:53:24.465] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.466] |  :  Launching futures ... done
[10:53:24.466] |  :  .  |  attachPackages() ...
[10:53:24.466] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:24.466] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.466] |  Using MulticoreFutureBackend ... done
[10:53:24.466] run() for Future (‘MulticoreFuture’) ... done
[10:53:24.466] |  :  .  |  attachPackages() ... DONE
[10:53:24.466] |  :  .  |  attachPackages() ...
[10:53:24.467] |  :  .  |  :  packages: [n=0] 
[10:53:24.467] result() for MulticoreFuture ...
[10:53:24.467] |  :  .  |  attachPackages() ... DONE
[10:53:24.468] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.468] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.468] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.469] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.469] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.469] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.470] |  :  .  |  :  .  |  New stack:
[10:53:24.470] |  :  .  |  :  .  |  List of 1
[10:53:24.470] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.470] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.470] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.470] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.470] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.470] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.470] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.474] |  :  .  |  :  .  |  Old stack:
[10:53:24.474] |  :  .  |  :  .  |  List of 1
[10:53:24.474] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.474] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.474] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.474] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.474] |  :  .  |  :  .  |      ...)  
[10:53:24.474] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.474] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.474] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.474] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.474] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.474] |  :  .  |  :  .  |      ...)  
[10:53:24.474] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.474] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.479] |  :  .  |  :  .  |  Not identical
[10:53:24.479] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.479] |  :  .  |  :  .  |  :  List of 2
[10:53:24.479] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.479] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.479] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.479] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.479] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.479] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.479] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.479] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.479] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.479] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.479] |  :  .  |  :  .  |  :      ...)  
[10:53:24.479] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.479] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.479] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.479] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.479] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.479] |  :  .  |  :  .  |  :      ...)  
[10:53:24.479] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.490] |  :  .  |  :  .  |  :  Formals differ
[10:53:24.491] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.491] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:24.491] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.491] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:24.491] |  :  .  |  :  .  List of future strategies:
[10:53:24.491] |  :  .  |  :  .  1. sequential:
[10:53:24.491] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.491] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.491] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.493] |  :  .  |  :  .  List of 1
[10:53:24.493] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.493] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.493] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.493] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.493] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.493] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.493] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.496] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.496] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.496] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.496] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.496] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.497] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:24.497] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.497] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:24.497] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.498] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.498] |  :  .  |  assign_globals() ...
[10:53:24.498] |  :  .  |  List of 1
[10:53:24.498] |  :  .  |   $ x: list()
[10:53:24.498] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.498] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.498] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.498] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.498] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.498] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.501] |  :  .  |  - copied ‘x’ to environment
[10:53:24.502] |  :  .  |  assign_globals() ... done
[10:53:24.504] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.504] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.504] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.504] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.504] |  :  .  |  :  .  |  :  New stack:
[10:53:24.504] |  :  .  |  :  .  |  :  List of 1
[10:53:24.504] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.504] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.504] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.504] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.504] |  :  .  |  :  .  |  :      ...)  
[10:53:24.504] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.504] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.504] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.504] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.504] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.504] |  :  .  |  :  .  |  :      ...)  
[10:53:24.504] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.504] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.507] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.508] |  :  .  |  :  .  |  :  List of 1
[10:53:24.508] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.508] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.508] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.508] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.508] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.508] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.508] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.510] |  :  .  |  :  .  |  :  Not identical
[10:53:24.510] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:24.510] |  :  .  |  :  .  |  :  .  List of 2
[10:53:24.510] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.510] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.510] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.510] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.510] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.510] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.510] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.510] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:24.510] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.510] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.510] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.510] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.510] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.510] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.510] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.510] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.510] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.510] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.516] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:24.516] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:24.516] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:24.516] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.516] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:24.517] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.517] |  :  .  |  :  .  |  1. multicore:
[10:53:24.517] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:24.517] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.517] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:24.517] |  :  .  |  :  .  |  List of 1
[10:53:24.517] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.517] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.517] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.517] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.517] |  :  .  |  :  .  |      ...)  
[10:53:24.517] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.517] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.517] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.517] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.517] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.517] |  :  .  |  :  .  |      ...)  
[10:53:24.517] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.517] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.520] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.520] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.520] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.520] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.520] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.521] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:24.521] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.521] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.521] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.521] |  readImmediateCondition() ...
[10:53:24.522] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:24.522] |   - Number of RDS files: 0
[10:53:24.522] |  readImmediateCondition() ... DONE
[10:53:24.522] |  result() for MulticoreFuture ...
[10:53:24.522] |  result() for MulticoreFuture ... done
[10:53:24.523] result() for MulticoreFuture ... done
[10:53:24.523] result() for MulticoreFuture ...
[10:53:24.523] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.524] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.524] |  Searching for globals ...
[10:53:24.527] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:24.527] |  Searching for globals ... DONE
[10:53:24.527] |  Resolving globals: TRUE
[10:53:24.527] |  Resolving any globals that are futures ...
[10:53:24.528] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:24.528] |  Resolving any globals that are futures ... DONE
[10:53:24.528] |  Search for packages associated with the globals ...
[10:53:24.528] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.528] |  :  Packages: [1] ‘base’
[10:53:24.529] |  Search for packages associated with the globals ... DONE
[10:53:24.529] |  Resolving futures part of globals (recursively) ...
[10:53:24.529] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.529] |  :  .  recursive: 99
[10:53:24.529] |  :  .  length: 1
[10:53:24.529] |  :  .  elements: ‘x’
[10:53:24.530] |  :  .  'obj' is list
[10:53:24.530] |  :  .  resolve(obj, ...) ...
[10:53:24.530] |  :  .  resolve(obj, ...) ... done
[10:53:24.530] |  :  .  length: 0 (resolved future 1)
[10:53:24.530] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.530] |  :  globals: [1] ‘x’
[10:53:24.531] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.531] |  Packages after dropping 'base': [0] 
[10:53:24.531] |  globals: [1] ‘x’
[10:53:24.531] |  packages: [0] 
[10:53:24.531] getGlobalsAndPackages() ... done
[10:53:24.531] run() for Future (‘Future’) ...
[10:53:24.532] |  state: ‘created’
[10:53:24.532] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.532] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.532] |  Using MulticoreFutureBackend ...
[10:53:24.532] |  :  Launching futures ...
[10:53:24.532] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.533] |  :  .  |  getFutureData() ...
[10:53:24.533] |  :  .  |  :  getFutureCore() ...
[10:53:24.533] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.533] |  :  .  |  :  getFutureCore() ... done
[10:53:24.535] |  :  .  |  :  getFutureCapture() ...
[10:53:24.535] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.535] |  :  .  |  :  getFutureContext() ...
[10:53:24.535] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.535] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.536] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.536] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.536] |  :  .  |  :  getFutureContext() ... done
[10:53:24.536] |  :  .  |  getFutureData() ... done
[10:53:24.536] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.537] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.539] |  :  .  |  MulticoreFuture started
[10:53:24.539] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.539] |  :  .  |  attachPackages() ...
[10:53:24.540] |  :  Launching futures ... done
[10:53:24.540] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.540] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:24.541] |  :  .  |  attachPackages() ... DONE
[10:53:24.541] |  Using MulticoreFutureBackend ... done
[10:53:24.541] |  :  .  |  attachPackages() ...
[10:53:24.541] run() for Future (‘MulticoreFuture’) ... done
[10:53:24.541] |  :  .  |  :  packages: [n=0] 
[10:53:24.541] result() for MulticoreFuture ...
[10:53:24.542] |  :  .  |  attachPackages() ... DONE
[10:53:24.543] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.543] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.543] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.544] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.544] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.545] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.545] |  :  .  |  :  .  |  New stack:
[10:53:24.545] |  :  .  |  :  .  |  List of 1
[10:53:24.545] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.545] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.545] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.545] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.545] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.545] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.545] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.550] |  :  .  |  :  .  |  Old stack:
[10:53:24.550] |  :  .  |  :  .  |  List of 1
[10:53:24.550] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.550] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.550] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.550] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.550] |  :  .  |  :  .  |      ...)  
[10:53:24.550] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.550] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.550] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.550] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.550] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.550] |  :  .  |  :  .  |      ...)  
[10:53:24.550] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.550] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.555] |  :  .  |  :  .  |  Not identical
[10:53:24.556] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.556] |  :  .  |  :  .  |  :  List of 2
[10:53:24.556] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.556] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.556] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.556] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.556] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.556] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.556] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.556] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.556] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.556] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.556] |  :  .  |  :  .  |  :      ...)  
[10:53:24.556] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.556] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.556] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.556] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.556] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.556] |  :  .  |  :  .  |  :      ...)  
[10:53:24.556] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.562] |  :  .  |  :  .  |  :  Formals differ
[10:53:24.563] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.563] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:24.563] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.563] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:24.563] |  :  .  |  :  .  List of future strategies:
[10:53:24.563] |  :  .  |  :  .  1. sequential:
[10:53:24.563] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.563] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.563] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.564] |  :  .  |  :  .  List of 1
[10:53:24.564] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.564] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.564] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.564] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.564] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.564] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.564] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.567] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.567] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.567] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.567] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.567] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.568] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:24.568] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.568] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:24.568] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.568] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.569] |  :  .  |  assign_globals() ...
[10:53:24.569] |  :  .  |  List of 1
[10:53:24.569] |  :  .  |   $ x: list()
[10:53:24.569] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.569] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.569] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.569] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.569] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.569] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.574] |  :  .  |  - copied ‘x’ to environment
[10:53:24.574] |  :  .  |  assign_globals() ... done
[10:53:24.576] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.576] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.576] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.577] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.577] |  :  .  |  :  .  |  :  New stack:
[10:53:24.577] |  :  .  |  :  .  |  :  List of 1
[10:53:24.577] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.577] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.577] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.577] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.577] |  :  .  |  :  .  |  :      ...)  
[10:53:24.577] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.577] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.577] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.577] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.577] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.577] |  :  .  |  :  .  |  :      ...)  
[10:53:24.577] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.577] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.580] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.580] |  :  .  |  :  .  |  :  List of 1
[10:53:24.580] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.580] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.580] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.580] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.580] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.580] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.580] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.582] |  :  .  |  :  .  |  :  Not identical
[10:53:24.582] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:24.582] |  :  .  |  :  .  |  :  .  List of 2
[10:53:24.582] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.582] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.582] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.582] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:24.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.582] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.582] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.582] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.582] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.582] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.582] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.587] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:24.587] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:24.587] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:24.587] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.587] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:24.587] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.587] |  :  .  |  :  .  |  1. multicore:
[10:53:24.587] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:24.587] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.587] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:24.587] |  :  .  |  :  .  |  List of 1
[10:53:24.587] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.587] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.587] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.587] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.587] |  :  .  |  :  .  |      ...)  
[10:53:24.587] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.587] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.587] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.587] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.587] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.587] |  :  .  |  :  .  |      ...)  
[10:53:24.587] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.587] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.590] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.590] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.591] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.591] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.591] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.591] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:24.591] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.591] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.591] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.592] |  readImmediateCondition() ...
[10:53:24.592] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:24.592] |   - Number of RDS files: 0
[10:53:24.593] |  readImmediateCondition() ... DONE
[10:53:24.593] |  result() for MulticoreFuture ...
[10:53:24.593] |  result() for MulticoreFuture ... done
[10:53:24.593] result() for MulticoreFuture ... done
[10:53:24.593] result() for MulticoreFuture ...
[10:53:24.593] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.594] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.595] |  Searching for globals ...
[10:53:24.598] |  :  globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[10:53:24.599] |  Searching for globals ... DONE
[10:53:24.599] |  Resolving globals: TRUE
[10:53:24.599] |  Resolving any globals that are futures ...
[10:53:24.599] |  :  globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[10:53:24.599] |  Resolving any globals that are futures ... DONE
[10:53:24.599] |  Search for packages associated with the globals ...
[10:53:24.600] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.600] |  :  Packages: [1] ‘base’
[10:53:24.600] |  Search for packages associated with the globals ... DONE
[10:53:24.600] |  Packages after dropping 'base': [0] 
[10:53:24.601] |  globals: [0] 
[10:53:24.601] |  packages: [0] 
[10:53:24.601] getGlobalsAndPackages() ... done
[10:53:24.601] run() for Future (‘Future’) ...
[10:53:24.601] |  state: ‘created’
[10:53:24.601] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.602] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.602] |  Using MulticoreFutureBackend ...
[10:53:24.602] |  :  Launching futures ...
[10:53:24.602] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.602] |  :  .  |  getFutureData() ...
[10:53:24.602] |  :  .  |  :  getFutureCore() ...
[10:53:24.602] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.602] |  :  .  |  :  getFutureCore() ... done
[10:53:24.603] |  :  .  |  :  getFutureCapture() ...
[10:53:24.603] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.603] |  :  .  |  :  getFutureContext() ...
[10:53:24.603] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.603] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.603] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.603] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.603] |  :  .  |  :  getFutureContext() ... done
[10:53:24.604] |  :  .  |  getFutureData() ... done
[10:53:24.604] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.604] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.606] |  :  .  |  MulticoreFuture started
[10:53:24.606] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.606] |  :  Launching futures ... done
[10:53:24.606] |  :  .  |  attachPackages() ...
[10:53:24.606] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:24.607] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.607] |  Using MulticoreFutureBackend ... done
[10:53:24.607] run() for Future (‘MulticoreFuture’) ... done
[10:53:24.607] |  :  .  |  attachPackages() ... DONE
[10:53:24.607] |  :  .  |  attachPackages() ...
[10:53:24.607] |  :  .  |  :  packages: [n=0] 
[10:53:24.607] result() for MulticoreFuture ...
[10:53:24.608] |  :  .  |  attachPackages() ... DONE
[10:53:24.608] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.609] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.609] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.610] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.610] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.610] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.610] |  :  .  |  :  .  |  New stack:
[10:53:24.611] |  :  .  |  :  .  |  List of 1
[10:53:24.611] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.611] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.611] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.611] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.611] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.611] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.611] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.615] |  :  .  |  :  .  |  Old stack:
[10:53:24.615] |  :  .  |  :  .  |  List of 1
[10:53:24.615] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.615] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.615] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.615] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.615] |  :  .  |  :  .  |      ...)  
[10:53:24.615] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.615] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.615] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.615] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.615] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.615] |  :  .  |  :  .  |      ...)  
[10:53:24.615] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.615] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.619] |  :  .  |  :  .  |  Not identical
[10:53:24.620] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.620] |  :  .  |  :  .  |  :  List of 2
[10:53:24.620] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.620] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.620] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.620] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.620] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.620] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.620] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.620] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.620] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.620] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.620] |  :  .  |  :  .  |  :      ...)  
[10:53:24.620] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.620] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.620] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.620] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.620] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.620] |  :  .  |  :  .  |  :      ...)  
[10:53:24.620] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.631] |  :  .  |  :  .  |  :  Formals differ
[10:53:24.631] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.632] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:24.632] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.632] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:24.632] |  :  .  |  :  .  List of future strategies:
[10:53:24.632] |  :  .  |  :  .  1. sequential:
[10:53:24.632] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.632] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.632] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.633] |  :  .  |  :  .  List of 1
[10:53:24.633] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.633] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.633] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.633] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.633] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.633] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.633] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.636] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.637] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.637] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.637] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.637] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.637] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:24.638] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.638] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:24.638] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.638] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.641] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.641] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.641] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.641] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.642] |  :  .  |  :  .  |  :  New stack:
[10:53:24.642] |  :  .  |  :  .  |  :  List of 1
[10:53:24.642] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.642] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.642] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.642] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.642] |  :  .  |  :  .  |  :      ...)  
[10:53:24.642] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.642] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.642] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.642] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.642] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.642] |  :  .  |  :  .  |  :      ...)  
[10:53:24.642] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.642] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.645] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.645] |  :  .  |  :  .  |  :  List of 1
[10:53:24.645] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.645] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.645] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.645] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.645] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.645] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.645] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.647] |  :  .  |  :  .  |  :  Not identical
[10:53:24.647] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:24.647] |  :  .  |  :  .  |  :  .  List of 2
[10:53:24.647] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.647] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.647] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.647] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.647] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.647] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.647] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.647] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:24.647] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.647] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.647] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.647] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.647] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.647] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.647] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.647] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.647] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.647] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.654] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:24.654] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:24.654] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:24.654] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.654] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:24.654] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.654] |  :  .  |  :  .  |  1. multicore:
[10:53:24.654] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:24.654] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.654] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:24.655] |  :  .  |  :  .  |  List of 1
[10:53:24.655] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.655] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.655] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.655] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.655] |  :  .  |  :  .  |      ...)  
[10:53:24.655] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.655] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.655] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.655] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.655] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.655] |  :  .  |  :  .  |      ...)  
[10:53:24.655] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.655] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.658] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.658] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.658] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.658] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.658] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.658] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:24.658] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.659] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.659] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.659] |  readImmediateCondition() ...
[10:53:24.659] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:24.660] |   - Number of RDS files: 0
[10:53:24.660] |  readImmediateCondition() ... DONE
[10:53:24.660] |  result() for MulticoreFuture ...
[10:53:24.660] |  result() for MulticoreFuture ... done
[10:53:24.660] result() for MulticoreFuture ... done
[10:53:24.661] result() for MulticoreFuture ...
[10:53:24.661] result() for MulticoreFuture ... done
$b
[1] 2

$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.661] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.662] |  Searching for globals ...
[10:53:24.665] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.665] |  Searching for globals ... DONE
[10:53:24.665] |  Resolving globals: TRUE
[10:53:24.665] |  Resolving any globals that are futures ...
[10:53:24.665] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.665] |  Resolving any globals that are futures ... DONE
[10:53:24.665] |  Search for packages associated with the globals ...
[10:53:24.666] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.666] |  :  Packages: [1] ‘base’
[10:53:24.666] |  Search for packages associated with the globals ... DONE
[10:53:24.666] |  Resolving futures part of globals (recursively) ...
[10:53:24.667] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.667] |  :  .  recursive: 99
[10:53:24.667] |  :  .  length: 1
[10:53:24.667] |  :  .  elements: ‘x’
[10:53:24.667] |  :  .  'obj' is list
[10:53:24.667] |  :  .  resolve(obj, ...) ...
[10:53:24.668] |  :  .  resolve(obj, ...) ... done
[10:53:24.668] |  :  .  length: 0 (resolved future 1)
[10:53:24.668] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.668] |  :  globals: [1] ‘x’
[10:53:24.668] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.668] |  Packages after dropping 'base': [0] 
[10:53:24.668] |  globals: [1] ‘x’
[10:53:24.669] |  packages: [0] 
[10:53:24.669] getGlobalsAndPackages() ... done
[10:53:24.669] run() for Future (‘Future’) ...
[10:53:24.669] |  state: ‘created’
[10:53:24.669] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.669] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.670] |  Using MulticoreFutureBackend ...
[10:53:24.670] |  :  Launching futures ...
[10:53:24.670] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.670] |  :  .  |  getFutureData() ...
[10:53:24.670] |  :  .  |  :  getFutureCore() ...
[10:53:24.670] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.670] |  :  .  |  :  getFutureCore() ... done
[10:53:24.672] |  :  .  |  :  getFutureCapture() ...
[10:53:24.672] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.673] |  :  .  |  :  getFutureContext() ...
[10:53:24.673] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.673] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.673] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.673] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.674] |  :  .  |  :  getFutureContext() ... done
[10:53:24.674] |  :  .  |  getFutureData() ... done
[10:53:24.674] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.674] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.677] |  :  .  |  MulticoreFuture started
[10:53:24.677] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.678] |  :  .  |  attachPackages() ...
[10:53:24.678] |  :  Launching futures ... done
[10:53:24.678] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.678] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:24.679] |  :  .  |  attachPackages() ... DONE
[10:53:24.679] |  Using MulticoreFutureBackend ... done
[10:53:24.679] |  :  .  |  attachPackages() ...
[10:53:24.679] run() for Future (‘MulticoreFuture’) ... done
[10:53:24.679] |  :  .  |  :  packages: [n=0] 
[10:53:24.680] result() for MulticoreFuture ...
[10:53:24.680] |  :  .  |  attachPackages() ... DONE
[10:53:24.681] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.681] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.681] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.682] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.683] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.683] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.683] |  :  .  |  :  .  |  New stack:
[10:53:24.683] |  :  .  |  :  .  |  List of 1
[10:53:24.683] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.683] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.683] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.683] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.683] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.683] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.683] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.688] |  :  .  |  :  .  |  Old stack:
[10:53:24.689] |  :  .  |  :  .  |  List of 1
[10:53:24.689] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.689] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.689] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.689] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.689] |  :  .  |  :  .  |      ...)  
[10:53:24.689] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.689] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.689] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.689] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.689] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.689] |  :  .  |  :  .  |      ...)  
[10:53:24.689] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.689] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.694] |  :  .  |  :  .  |  Not identical
[10:53:24.694] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.694] |  :  .  |  :  .  |  :  List of 2
[10:53:24.694] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.694] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.694] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.694] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.694] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.694] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.694] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.694] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.694] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.694] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.694] |  :  .  |  :  .  |  :      ...)  
[10:53:24.694] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.694] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.694] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.694] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.694] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.694] |  :  .  |  :  .  |  :      ...)  
[10:53:24.694] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.701] |  :  .  |  :  .  |  :  Formals differ
[10:53:24.701] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.701] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:24.702] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.702] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:24.702] |  :  .  |  :  .  List of future strategies:
[10:53:24.702] |  :  .  |  :  .  1. sequential:
[10:53:24.702] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.702] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.702] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.703] |  :  .  |  :  .  List of 1
[10:53:24.703] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.703] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.703] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.703] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.703] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.703] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.703] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.706] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.706] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.706] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.706] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.706] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.707] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:24.707] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.707] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:24.707] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.707] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.708] |  :  .  |  assign_globals() ...
[10:53:24.708] |  :  .  |  List of 1
[10:53:24.708] |  :  .  |   $ x: list()
[10:53:24.708] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.708] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.708] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.708] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.708] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.708] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.713] |  :  .  |  - copied ‘x’ to environment
[10:53:24.714] |  :  .  |  assign_globals() ... done
[10:53:24.716] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.716] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.716] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.716] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.716] |  :  .  |  :  .  |  :  New stack:
[10:53:24.716] |  :  .  |  :  .  |  :  List of 1
[10:53:24.716] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.716] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.716] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.716] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.716] |  :  .  |  :  .  |  :      ...)  
[10:53:24.716] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.716] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.716] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.716] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.716] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.716] |  :  .  |  :  .  |  :      ...)  
[10:53:24.716] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.716] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.720] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.720] |  :  .  |  :  .  |  :  List of 1
[10:53:24.720] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.720] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.720] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.720] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.720] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.720] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.720] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.722] |  :  .  |  :  .  |  :  Not identical
[10:53:24.722] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:24.722] |  :  .  |  :  .  |  :  .  List of 2
[10:53:24.722] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.722] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.722] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.722] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.722] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.722] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.722] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.722] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:24.722] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.722] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.722] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.722] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.722] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.722] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.722] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.722] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.722] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.722] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.727] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:24.727] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:24.727] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:24.727] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.727] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:24.727] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.727] |  :  .  |  :  .  |  1. multicore:
[10:53:24.727] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:24.727] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.727] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:24.727] |  :  .  |  :  .  |  List of 1
[10:53:24.727] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.727] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.727] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.727] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.727] |  :  .  |  :  .  |      ...)  
[10:53:24.727] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.727] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.727] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.727] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.727] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.727] |  :  .  |  :  .  |      ...)  
[10:53:24.727] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.727] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.730] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.730] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.731] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.731] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.731] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.731] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:24.731] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.731] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.731] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.732] |  readImmediateCondition() ...
[10:53:24.732] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:24.732] |   - Number of RDS files: 0
[10:53:24.733] |  readImmediateCondition() ... DONE
[10:53:24.733] |  result() for MulticoreFuture ...
[10:53:24.733] |  result() for MulticoreFuture ... done
[10:53:24.733] result() for MulticoreFuture ... done
[10:53:24.733] result() for MulticoreFuture ...
[10:53:24.734] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.734] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.734] |  Searching for globals ...
[10:53:24.738] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.738] |  Searching for globals ... DONE
[10:53:24.738] |  Resolving globals: TRUE
[10:53:24.738] |  Resolving any globals that are futures ...
[10:53:24.738] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.738] |  Resolving any globals that are futures ... DONE
[10:53:24.739] |  Search for packages associated with the globals ...
[10:53:24.739] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.739] |  :  Packages: [1] ‘base’
[10:53:24.739] |  Search for packages associated with the globals ... DONE
[10:53:24.740] |  Resolving futures part of globals (recursively) ...
[10:53:24.740] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.740] |  :  .  recursive: 99
[10:53:24.740] |  :  .  length: 1
[10:53:24.740] |  :  .  elements: ‘x’
[10:53:24.740] |  :  .  'obj' is list
[10:53:24.741] |  :  .  resolve(obj, ...) ...
[10:53:24.741] |  :  .  resolve(obj, ...) ... done
[10:53:24.741] |  :  .  length: 0 (resolved future 1)
[10:53:24.741] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.741] |  :  globals: [1] ‘x’
[10:53:24.741] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.741] |  Packages after dropping 'base': [0] 
[10:53:24.742] |  globals: [1] ‘x’
[10:53:24.742] |  packages: [0] 
[10:53:24.742] getGlobalsAndPackages() ... done
[10:53:24.742] run() for Future (‘Future’) ...
[10:53:24.742] |  state: ‘created’
[10:53:24.742] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.742] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.743] |  Using MulticoreFutureBackend ...
[10:53:24.743] |  :  Launching futures ...
[10:53:24.743] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.743] |  :  .  |  getFutureData() ...
[10:53:24.743] |  :  .  |  :  getFutureCore() ...
[10:53:24.743] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.743] |  :  .  |  :  getFutureCore() ... done
[10:53:24.743] |  :  .  |  :  getFutureCapture() ...
[10:53:24.744] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.744] |  :  .  |  :  getFutureContext() ...
[10:53:24.744] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.744] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.744] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.744] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.744] |  :  .  |  :  getFutureContext() ... done
[10:53:24.745] |  :  .  |  getFutureData() ... done
[10:53:24.745] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.745] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.747] |  :  .  |  MulticoreFuture started
[10:53:24.747] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.747] |  :  Launching futures ... done
[10:53:24.747] |  :  .  |  attachPackages() ...
[10:53:24.747] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:24.748] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.748] |  Using MulticoreFutureBackend ... done
[10:53:24.748] run() for Future (‘MulticoreFuture’) ... done
[10:53:24.748] |  :  .  |  attachPackages() ... DONE
[10:53:24.748] |  :  .  |  attachPackages() ...
[10:53:24.748] result() for MulticoreFuture ...
[10:53:24.748] |  :  .  |  :  packages: [n=0] 
[10:53:24.749] |  :  .  |  attachPackages() ... DONE
[10:53:24.750] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.750] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.750] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.751] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.751] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.751] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.751] |  :  .  |  :  .  |  New stack:
[10:53:24.752] |  :  .  |  :  .  |  List of 1
[10:53:24.752] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.752] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.752] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.752] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.752] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.752] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.752] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.756] |  :  .  |  :  .  |  Old stack:
[10:53:24.756] |  :  .  |  :  .  |  List of 1
[10:53:24.756] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.756] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.756] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.756] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.756] |  :  .  |  :  .  |      ...)  
[10:53:24.756] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.756] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.756] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.756] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.756] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.756] |  :  .  |  :  .  |      ...)  
[10:53:24.756] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.756] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.761] |  :  .  |  :  .  |  Not identical
[10:53:24.761] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.761] |  :  .  |  :  .  |  :  List of 2
[10:53:24.761] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.761] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.761] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.761] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.761] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.761] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.761] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.761] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.761] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.761] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.761] |  :  .  |  :  .  |  :      ...)  
[10:53:24.761] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.761] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.761] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.761] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.761] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.761] |  :  .  |  :  .  |  :      ...)  
[10:53:24.761] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.773] |  :  .  |  :  .  |  :  Formals differ
[10:53:24.774] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.774] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:24.774] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.774] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:24.774] |  :  .  |  :  .  List of future strategies:
[10:53:24.774] |  :  .  |  :  .  1. sequential:
[10:53:24.774] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.774] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.774] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.775] |  :  .  |  :  .  List of 1
[10:53:24.775] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.775] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.775] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.775] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.775] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.775] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.775] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.778] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.778] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.779] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.779] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.779] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.779] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:24.780] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.780] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:24.780] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.780] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.780] |  :  .  |  assign_globals() ...
[10:53:24.780] |  :  .  |  List of 1
[10:53:24.780] |  :  .  |   $ x: list()
[10:53:24.780] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.780] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.780] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.780] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.780] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.780] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.784] |  :  .  |  - copied ‘x’ to environment
[10:53:24.784] |  :  .  |  assign_globals() ... done
[10:53:24.786] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.786] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.786] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.786] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.787] |  :  .  |  :  .  |  :  New stack:
[10:53:24.787] |  :  .  |  :  .  |  :  List of 1
[10:53:24.787] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.787] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.787] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.787] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.787] |  :  .  |  :  .  |  :      ...)  
[10:53:24.787] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.787] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.787] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.787] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.787] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.787] |  :  .  |  :  .  |  :      ...)  
[10:53:24.787] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.787] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.790] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.790] |  :  .  |  :  .  |  :  List of 1
[10:53:24.790] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.790] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.790] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.790] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.790] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.790] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.790] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.792] |  :  .  |  :  .  |  :  Not identical
[10:53:24.792] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:24.792] |  :  .  |  :  .  |  :  .  List of 2
[10:53:24.792] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.792] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.792] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.792] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.792] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.792] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.792] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.792] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:24.792] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.792] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.792] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.792] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.792] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.792] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.792] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.792] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.792] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.792] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.799] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:24.799] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:24.799] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:24.799] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.799] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:24.799] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.799] |  :  .  |  :  .  |  1. multicore:
[10:53:24.799] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:24.799] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.799] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:24.800] |  :  .  |  :  .  |  List of 1
[10:53:24.800] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.800] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.800] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.800] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.800] |  :  .  |  :  .  |      ...)  
[10:53:24.800] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.800] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.800] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.800] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.800] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.800] |  :  .  |  :  .  |      ...)  
[10:53:24.800] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.800] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.803] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.803] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.803] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.804] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.804] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.804] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:24.804] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.804] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.804] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.805] |  readImmediateCondition() ...
[10:53:24.805] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:24.805] |   - Number of RDS files: 0
[10:53:24.806] |  readImmediateCondition() ... DONE
[10:53:24.806] |  result() for MulticoreFuture ...
[10:53:24.806] |  result() for MulticoreFuture ... done
[10:53:24.806] result() for MulticoreFuture ... done
[10:53:24.807] result() for MulticoreFuture ...
[10:53:24.807] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.808] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.808] |  Searching for globals ...
[10:53:24.811] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.811] |  Searching for globals ... DONE
[10:53:24.811] |  Resolving globals: TRUE
[10:53:24.811] |  Resolving any globals that are futures ...
[10:53:24.812] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:24.812] |  Resolving any globals that are futures ... DONE
[10:53:24.812] |  Search for packages associated with the globals ...
[10:53:24.812] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.813] |  :  Packages: [1] ‘base’
[10:53:24.813] |  Search for packages associated with the globals ... DONE
[10:53:24.813] |  Resolving futures part of globals (recursively) ...
[10:53:24.813] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.813] |  :  .  recursive: 99
[10:53:24.813] |  :  .  length: 1
[10:53:24.814] |  :  .  elements: ‘x’
[10:53:24.814] |  :  .  'obj' is list
[10:53:24.814] |  :  .  resolve(obj, ...) ...
[10:53:24.814] |  :  .  resolve(obj, ...) ... done
[10:53:24.814] |  :  .  length: 0 (resolved future 1)
[10:53:24.814] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.814] |  :  globals: [1] ‘x’
[10:53:24.815] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.815] |  Packages after dropping 'base': [0] 
[10:53:24.815] |  globals: [1] ‘x’
[10:53:24.815] |  packages: [0] 
[10:53:24.815] getGlobalsAndPackages() ... done
[10:53:24.815] run() for Future (‘Future’) ...
[10:53:24.816] |  state: ‘created’
[10:53:24.816] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.816] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.816] |  Using MulticoreFutureBackend ...
[10:53:24.818] |  :  Launching futures ...
[10:53:24.818] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.818] |  :  .  |  getFutureData() ...
[10:53:24.819] |  :  .  |  :  getFutureCore() ...
[10:53:24.819] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.819] |  :  .  |  :  getFutureCore() ... done
[10:53:24.819] |  :  .  |  :  getFutureCapture() ...
[10:53:24.819] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.819] |  :  .  |  :  getFutureContext() ...
[10:53:24.820] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.820] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.820] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.820] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.820] |  :  .  |  :  getFutureContext() ... done
[10:53:24.821] |  :  .  |  getFutureData() ... done
[10:53:24.821] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.821] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.823] |  :  .  |  MulticoreFuture started
[10:53:24.824] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.824] |  :  .  |  attachPackages() ...
[10:53:24.824] |  :  Launching futures ... done
[10:53:24.824] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.824] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:24.824] |  Using MulticoreFutureBackend ... done
[10:53:24.825] |  :  .  |  attachPackages() ... DONE
[10:53:24.825] |  :  .  |  attachPackages() ...
[10:53:24.825] run() for Future (‘MulticoreFuture’) ... done
[10:53:24.825] |  :  .  |  :  packages: [n=0] 
[10:53:24.825] result() for MulticoreFuture ...
[10:53:24.825] |  :  .  |  attachPackages() ... DONE
[10:53:24.826] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.827] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.827] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.828] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.828] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.829] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.829] |  :  .  |  :  .  |  New stack:
[10:53:24.829] |  :  .  |  :  .  |  List of 1
[10:53:24.829] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.829] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.829] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.829] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.829] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.829] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.829] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.834] |  :  .  |  :  .  |  Old stack:
[10:53:24.834] |  :  .  |  :  .  |  List of 1
[10:53:24.834] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.834] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.834] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.834] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.834] |  :  .  |  :  .  |      ...)  
[10:53:24.834] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.834] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.834] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.834] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.834] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.834] |  :  .  |  :  .  |      ...)  
[10:53:24.834] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.834] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.839] |  :  .  |  :  .  |  Not identical
[10:53:24.839] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.840] |  :  .  |  :  .  |  :  List of 2
[10:53:24.840] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.840] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.840] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.840] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.840] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.840] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.840] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.840] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.840] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.840] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.840] |  :  .  |  :  .  |  :      ...)  
[10:53:24.840] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.840] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.840] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.840] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.840] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.840] |  :  .  |  :  .  |  :      ...)  
[10:53:24.840] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.846] |  :  .  |  :  .  |  :  Formals differ
[10:53:24.847] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.847] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:24.847] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.847] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:24.847] |  :  .  |  :  .  List of future strategies:
[10:53:24.847] |  :  .  |  :  .  1. sequential:
[10:53:24.847] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.847] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.847] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.848] |  :  .  |  :  .  List of 1
[10:53:24.848] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.848] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.848] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.848] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.848] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.848] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.848] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.851] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.851] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.851] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.852] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.852] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.852] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:24.852] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.852] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:24.853] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.853] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.853] |  :  .  |  assign_globals() ...
[10:53:24.853] |  :  .  |  List of 1
[10:53:24.853] |  :  .  |   $ x: list()
[10:53:24.853] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.853] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.853] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.853] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.853] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.853] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.859] |  :  .  |  - copied ‘x’ to environment
[10:53:24.859] |  :  .  |  assign_globals() ... done
[10:53:24.861] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.861] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.861] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.862] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.862] |  :  .  |  :  .  |  :  New stack:
[10:53:24.862] |  :  .  |  :  .  |  :  List of 1
[10:53:24.862] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.862] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.862] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.862] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.862] |  :  .  |  :  .  |  :      ...)  
[10:53:24.862] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.862] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.862] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.862] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.862] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.862] |  :  .  |  :  .  |  :      ...)  
[10:53:24.862] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.862] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.865] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.865] |  :  .  |  :  .  |  :  List of 1
[10:53:24.865] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.865] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.865] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.865] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.865] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.865] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.865] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.867] |  :  .  |  :  .  |  :  Not identical
[10:53:24.867] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:24.867] |  :  .  |  :  .  |  :  .  List of 2
[10:53:24.867] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.867] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.867] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.867] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:24.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.867] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.867] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.867] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.867] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.867] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.867] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.872] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:24.872] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:24.872] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:24.872] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.872] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:24.872] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.872] |  :  .  |  :  .  |  1. multicore:
[10:53:24.872] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:24.872] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.872] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:24.873] |  :  .  |  :  .  |  List of 1
[10:53:24.873] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.873] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.873] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.873] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.873] |  :  .  |  :  .  |      ...)  
[10:53:24.873] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.873] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.873] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.873] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.873] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.873] |  :  .  |  :  .  |      ...)  
[10:53:24.873] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.873] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.876] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.876] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.876] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.876] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.876] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.876] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:24.877] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.878] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.878] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.878] |  readImmediateCondition() ...
[10:53:24.878] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:24.879] |   - Number of RDS files: 0
[10:53:24.879] |  readImmediateCondition() ... DONE
[10:53:24.879] |  result() for MulticoreFuture ...
[10:53:24.880] |  result() for MulticoreFuture ... done
[10:53:24.880] result() for MulticoreFuture ... done
[10:53:24.880] result() for MulticoreFuture ...
[10:53:24.880] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.880] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.881] |  Searching for globals ...
[10:53:24.884] |  :  globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:24.884] |  Searching for globals ... DONE
[10:53:24.885] |  Resolving globals: TRUE
[10:53:24.885] |  Resolving any globals that are futures ...
[10:53:24.885] |  :  globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:24.885] |  Resolving any globals that are futures ... DONE
[10:53:24.885] |  Search for packages associated with the globals ...
[10:53:24.885] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.886] |  :  Packages: [1] ‘base’
[10:53:24.886] |  Search for packages associated with the globals ... DONE
[10:53:24.886] |  Resolving futures part of globals (recursively) ...
[10:53:24.887] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.887] |  :  .  recursive: 99
[10:53:24.887] |  :  .  length: 1
[10:53:24.887] |  :  .  elements: ‘x’
[10:53:24.887] |  :  .  'obj' is list
[10:53:24.887] |  :  .  resolve(obj, ...) ...
[10:53:24.887] |  :  .  resolve(obj, ...) ... done
[10:53:24.887] |  :  .  length: 0 (resolved future 1)
[10:53:24.888] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.888] |  :  globals: [1] ‘x’
[10:53:24.888] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.888] |  Packages after dropping 'base': [0] 
[10:53:24.888] |  globals: [1] ‘x’
[10:53:24.888] |  packages: [0] 
[10:53:24.888] getGlobalsAndPackages() ... done
[10:53:24.889] run() for Future (‘Future’) ...
[10:53:24.889] |  state: ‘created’
[10:53:24.889] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.889] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.889] |  Using MulticoreFutureBackend ...
[10:53:24.889] |  :  Launching futures ...
[10:53:24.890] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.890] |  :  .  |  getFutureData() ...
[10:53:24.890] |  :  .  |  :  getFutureCore() ...
[10:53:24.890] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.890] |  :  .  |  :  getFutureCore() ... done
[10:53:24.890] |  :  .  |  :  getFutureCapture() ...
[10:53:24.890] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.890] |  :  .  |  :  getFutureContext() ...
[10:53:24.890] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.891] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.891] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.891] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.891] |  :  .  |  :  getFutureContext() ... done
[10:53:24.891] |  :  .  |  getFutureData() ... done
[10:53:24.891] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.892] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.893] |  :  .  |  MulticoreFuture started
[10:53:24.894] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.894] |  :  Launching futures ... done
[10:53:24.894] |  :  .  |  attachPackages() ...
[10:53:24.894] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:24.894] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.894] |  Using MulticoreFutureBackend ... done
[10:53:24.895] run() for Future (‘MulticoreFuture’) ... done
[10:53:24.895] |  :  .  |  attachPackages() ... DONE
[10:53:24.895] |  :  .  |  attachPackages() ...
[10:53:24.895] result() for MulticoreFuture ...
[10:53:24.895] |  :  .  |  :  packages: [n=0] 
[10:53:24.895] |  :  .  |  attachPackages() ... DONE
[10:53:24.896] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.896] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.897] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.897] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.898] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.898] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.898] |  :  .  |  :  .  |  New stack:
[10:53:24.898] |  :  .  |  :  .  |  List of 1
[10:53:24.898] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.898] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.898] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.898] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.898] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.898] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.898] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.902] |  :  .  |  :  .  |  Old stack:
[10:53:24.902] |  :  .  |  :  .  |  List of 1
[10:53:24.902] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.902] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.902] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.902] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.902] |  :  .  |  :  .  |      ...)  
[10:53:24.902] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.902] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.902] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.902] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.902] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.902] |  :  .  |  :  .  |      ...)  
[10:53:24.902] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.902] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.910] |  :  .  |  :  .  |  Not identical
[10:53:24.910] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.910] |  :  .  |  :  .  |  :  List of 2
[10:53:24.910] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.910] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.910] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.910] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.910] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.910] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.910] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.910] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.910] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.910] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.910] |  :  .  |  :  .  |  :      ...)  
[10:53:24.910] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.910] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.910] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.910] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.910] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.910] |  :  .  |  :  .  |  :      ...)  
[10:53:24.910] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.920] |  :  .  |  :  .  |  :  Formals differ
[10:53:24.920] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.920] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:24.920] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.921] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:24.921] |  :  .  |  :  .  List of future strategies:
[10:53:24.921] |  :  .  |  :  .  1. sequential:
[10:53:24.921] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.921] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.921] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.921] |  :  .  |  :  .  List of 1
[10:53:24.921] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.921] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.921] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.921] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.921] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.921] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.921] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.925] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.925] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.925] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.925] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.925] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.926] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:24.926] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.926] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:24.926] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.927] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.927] |  :  .  |  assign_globals() ...
[10:53:24.927] |  :  .  |  List of 1
[10:53:24.927] |  :  .  |   $ x: list()
[10:53:24.927] |  :  .  |   - attr(*, "where")=List of 1
[10:53:24.927] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:24.927] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:24.927] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:24.927] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:24.927] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:24.930] |  :  .  |  - copied ‘x’ to environment
[10:53:24.930] |  :  .  |  assign_globals() ... done
[10:53:24.932] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.932] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.933] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.933] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:24.933] |  :  .  |  :  .  |  :  New stack:
[10:53:24.933] |  :  .  |  :  .  |  :  List of 1
[10:53:24.933] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.933] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.933] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.933] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.933] |  :  .  |  :  .  |  :      ...)  
[10:53:24.933] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.933] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.933] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.933] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.933] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.933] |  :  .  |  :  .  |  :      ...)  
[10:53:24.933] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.933] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.936] |  :  .  |  :  .  |  :  Old stack:
[10:53:24.936] |  :  .  |  :  .  |  :  List of 1
[10:53:24.936] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.936] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.936] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.936] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.936] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.936] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.936] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.940] |  :  .  |  :  .  |  :  Not identical
[10:53:24.940] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:24.940] |  :  .  |  :  .  |  :  .  List of 2
[10:53:24.940] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.940] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.940] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.940] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.940] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.940] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.940] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.940] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:24.940] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.940] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.940] |  :  .  |  :  .  |  :  .      ...)  
[10:53:24.940] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.940] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.940] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.940] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.940] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.940] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.940] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.944] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:24.945] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:24.945] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:24.945] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:24.945] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:24.945] |  :  .  |  :  .  |  List of future strategies:
[10:53:24.945] |  :  .  |  :  .  |  1. multicore:
[10:53:24.945] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:24.945] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:24.945] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:24.945] |  :  .  |  :  .  |  List of 1
[10:53:24.945] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.945] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.945] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.945] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.945] |  :  .  |  :  .  |      ...)  
[10:53:24.945] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.945] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.945] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.945] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.945] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.945] |  :  .  |  :  .  |      ...)  
[10:53:24.945] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.945] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.948] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.948] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.949] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.949] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.949] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.949] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:24.949] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.949] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.949] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.950] |  readImmediateCondition() ...
[10:53:24.950] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:24.950] |   - Number of RDS files: 0
[10:53:24.950] |  readImmediateCondition() ... DONE
[10:53:24.951] |  result() for MulticoreFuture ...
[10:53:24.951] |  result() for MulticoreFuture ... done
[10:53:24.951] result() for MulticoreFuture ... done
[10:53:24.951] result() for MulticoreFuture ...
[10:53:24.951] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:24.952] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:24.952] |  Searching for globals ...
[10:53:24.955] |  :  globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:24.955] |  Searching for globals ... DONE
[10:53:24.956] |  Resolving globals: TRUE
[10:53:24.956] |  Resolving any globals that are futures ...
[10:53:24.956] |  :  globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:24.956] |  Resolving any globals that are futures ... DONE
[10:53:24.956] |  Search for packages associated with the globals ...
[10:53:24.956] |  :  Packages associated with globals: [1] ‘base’
[10:53:24.957] |  :  Packages: [1] ‘base’
[10:53:24.957] |  Search for packages associated with the globals ... DONE
[10:53:24.957] |  Resolving futures part of globals (recursively) ...
[10:53:24.957] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:24.958] |  :  .  recursive: 99
[10:53:24.958] |  :  .  length: 1
[10:53:24.958] |  :  .  elements: ‘x’
[10:53:24.958] |  :  .  'obj' is list
[10:53:24.958] |  :  .  resolve(obj, ...) ...
[10:53:24.958] |  :  .  resolve(obj, ...) ... done
[10:53:24.958] |  :  .  length: 0 (resolved future 1)
[10:53:24.959] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:24.960] |  :  globals: [1] ‘x’
[10:53:24.961] |  Resolving futures part of globals (recursively) ... DONE
[10:53:24.961] |  Packages after dropping 'base': [0] 
[10:53:24.961] |  globals: [1] ‘x’
[10:53:24.961] |  packages: [0] 
[10:53:24.962] getGlobalsAndPackages() ... done
[10:53:24.962] run() for Future (‘Future’) ...
[10:53:24.962] |  state: ‘created’
[10:53:24.962] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.963] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.963] |  Using MulticoreFutureBackend ...
[10:53:24.963] |  :  Launching futures ...
[10:53:24.963] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.963] |  :  .  |  getFutureData() ...
[10:53:24.964] |  :  .  |  :  getFutureCore() ...
[10:53:24.964] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:24.964] |  :  .  |  :  getFutureCore() ... done
[10:53:24.964] |  :  .  |  :  getFutureCapture() ...
[10:53:24.964] |  :  .  |  :  getFutureCapture() ... done
[10:53:24.964] |  :  .  |  :  getFutureContext() ...
[10:53:24.964] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.964] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:24.965] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.965] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:24.965] |  :  .  |  :  getFutureContext() ... done
[10:53:24.965] |  :  .  |  getFutureData() ... done
[10:53:24.965] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.966] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:24.967] |  :  .  |  MulticoreFuture started
[10:53:24.968] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:24.968] |  :  Launching futures ... done
[10:53:24.968] |  :  .  |  attachPackages() ...
[10:53:24.968] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:24.968] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:24.969] |  Using MulticoreFutureBackend ... done
[10:53:24.969] |  :  .  |  attachPackages() ... DONE
[10:53:24.969] run() for Future (‘MulticoreFuture’) ... done
[10:53:24.969] |  :  .  |  attachPackages() ...
[10:53:24.969] |  :  .  |  :  packages: [n=0] 
[10:53:24.969] result() for MulticoreFuture ...
[10:53:24.969] |  :  .  |  attachPackages() ... DONE
[10:53:24.970] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.971] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:24.971] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.972] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:24.972] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:24.972] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:24.973] |  :  .  |  :  .  |  New stack:
[10:53:24.973] |  :  .  |  :  .  |  List of 1
[10:53:24.973] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.973] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.973] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.973] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.973] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.973] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.973] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.978] |  :  .  |  :  .  |  Old stack:
[10:53:24.978] |  :  .  |  :  .  |  List of 1
[10:53:24.978] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.978] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.978] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.978] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.978] |  :  .  |  :  .  |      ...)  
[10:53:24.978] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.978] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.978] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:24.978] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.978] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.978] |  :  .  |  :  .  |      ...)  
[10:53:24.978] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.978] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.983] |  :  .  |  :  .  |  Not identical
[10:53:24.983] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:24.983] |  :  .  |  :  .  |  :  List of 2
[10:53:24.983] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.983] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.983] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.983] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.983] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.983] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.983] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:24.983] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:24.983] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:24.983] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.983] |  :  .  |  :  .  |  :      ...)  
[10:53:24.983] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.983] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.983] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:24.983] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:24.983] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:24.983] |  :  .  |  :  .  |  :      ...)  
[10:53:24.983] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:24.990] |  :  .  |  :  .  |  :  Formals differ
[10:53:24.990] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:24.990] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:24.990] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:24.991] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:24.991] |  :  .  |  :  .  List of future strategies:
[10:53:24.991] |  :  .  |  :  .  1. sequential:
[10:53:24.991] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:24.991] |  :  .  |  :  .     - tweaked: FALSE
[10:53:24.991] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.991] |  :  .  |  :  .  List of 1
[10:53:24.991] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:24.991] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:24.991] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:24.991] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.991] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:24.991] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:24.991] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:24.995] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:24.995] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:24.995] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:24.995] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:24.996] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:24.998] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:24.998] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:24.999] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:24.999] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:24.999] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:24.999] |  :  .  |  assign_globals() ...
[10:53:25.000] |  :  .  |  List of 1
[10:53:25.000] |  :  .  |   $ x: list()
[10:53:25.000] |  :  .  |   - attr(*, "where")=List of 1
[10:53:25.000] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:25.000] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:25.000] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:25.000] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:25.000] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:25.003] |  :  .  |  - copied ‘x’ to environment
[10:53:25.004] |  :  .  |  assign_globals() ... done
[10:53:25.006] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:25.006] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:25.006] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:25.007] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:25.007] |  :  .  |  :  .  |  :  New stack:
[10:53:25.007] |  :  .  |  :  .  |  :  List of 1
[10:53:25.007] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.007] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.007] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.007] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.007] |  :  .  |  :  .  |  :      ...)  
[10:53:25.007] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.007] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.007] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:25.007] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.007] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.007] |  :  .  |  :  .  |  :      ...)  
[10:53:25.007] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.007] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.010] |  :  .  |  :  .  |  :  Old stack:
[10:53:25.010] |  :  .  |  :  .  |  :  List of 1
[10:53:25.010] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.010] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.010] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.010] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.010] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.010] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.010] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.012] |  :  .  |  :  .  |  :  Not identical
[10:53:25.012] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:25.013] |  :  .  |  :  .  |  :  .  List of 2
[10:53:25.013] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.013] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.013] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.013] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.013] |  :  .  |  :  .  |  :  .      ...)  
[10:53:25.013] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.013] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.013] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:25.013] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.013] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.013] |  :  .  |  :  .  |  :  .      ...)  
[10:53:25.013] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.013] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.013] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.013] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.013] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.013] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.013] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.017] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:25.017] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:25.017] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:25.017] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:25.017] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:25.018] |  :  .  |  :  .  |  List of future strategies:
[10:53:25.018] |  :  .  |  :  .  |  1. multicore:
[10:53:25.018] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:25.018] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:25.018] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:25.018] |  :  .  |  :  .  |  List of 1
[10:53:25.018] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.018] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.018] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.018] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.018] |  :  .  |  :  .  |      ...)  
[10:53:25.018] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.018] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.018] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:25.018] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.018] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.018] |  :  .  |  :  .  |      ...)  
[10:53:25.018] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.018] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.023] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:25.023] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:25.023] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.023] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:25.023] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.023] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:25.023] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:25.024] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:25.024] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:25.024] |  readImmediateCondition() ...
[10:53:25.024] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:25.025] |   - Number of RDS files: 0
[10:53:25.025] |  readImmediateCondition() ... DONE
[10:53:25.025] |  result() for MulticoreFuture ...
[10:53:25.026] |  result() for MulticoreFuture ... done
[10:53:25.026] result() for MulticoreFuture ... done
[10:53:25.026] result() for MulticoreFuture ...
[10:53:25.026] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:25.027] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:25.027] |  Searching for globals ...
[10:53:25.031] |  :  globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:25.031] |  Searching for globals ... DONE
[10:53:25.031] |  Resolving globals: TRUE
[10:53:25.031] |  Resolving any globals that are futures ...
[10:53:25.031] |  :  globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:25.031] |  Resolving any globals that are futures ... DONE
[10:53:25.031] |  Search for packages associated with the globals ...
[10:53:25.032] |  :  Packages associated with globals: [1] ‘base’
[10:53:25.032] |  :  Packages: [1] ‘base’
[10:53:25.032] |  Search for packages associated with the globals ... DONE
[10:53:25.032] |  Resolving futures part of globals (recursively) ...
[10:53:25.033] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:25.033] |  :  .  recursive: 99
[10:53:25.033] |  :  .  length: 1
[10:53:25.033] |  :  .  elements: ‘x’
[10:53:25.033] |  :  .  'obj' is list
[10:53:25.034] |  :  .  resolve(obj, ...) ...
[10:53:25.034] |  :  .  resolve(obj, ...) ... done
[10:53:25.034] |  :  .  length: 0 (resolved future 1)
[10:53:25.034] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:25.034] |  :  globals: [1] ‘x’
[10:53:25.034] |  Resolving futures part of globals (recursively) ... DONE
[10:53:25.034] |  Packages after dropping 'base': [0] 
[10:53:25.035] |  globals: [1] ‘x’
[10:53:25.035] |  packages: [0] 
[10:53:25.035] getGlobalsAndPackages() ... done
[10:53:25.035] run() for Future (‘Future’) ...
[10:53:25.035] |  state: ‘created’
[10:53:25.035] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.035] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.036] |  Using MulticoreFutureBackend ...
[10:53:25.036] |  :  Launching futures ...
[10:53:25.036] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:25.036] |  :  .  |  getFutureData() ...
[10:53:25.036] |  :  .  |  :  getFutureCore() ...
[10:53:25.036] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:25.036] |  :  .  |  :  getFutureCore() ... done
[10:53:25.036] |  :  .  |  :  getFutureCapture() ...
[10:53:25.037] |  :  .  |  :  getFutureCapture() ... done
[10:53:25.037] |  :  .  |  :  getFutureContext() ...
[10:53:25.037] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.037] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:25.037] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.037] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:25.037] |  :  .  |  :  getFutureContext() ... done
[10:53:25.038] |  :  .  |  getFutureData() ... done
[10:53:25.038] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:25.038] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:25.040] |  :  .  |  MulticoreFuture started
[10:53:25.040] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:25.040] |  :  Launching futures ... done
[10:53:25.040] |  :  .  |  attachPackages() ...
[10:53:25.041] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:25.041] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:25.041] |  Using MulticoreFutureBackend ... done
[10:53:25.041] run() for Future (‘MulticoreFuture’) ... done
[10:53:25.041] |  :  .  |  attachPackages() ... DONE
[10:53:25.041] |  :  .  |  attachPackages() ...
[10:53:25.041] |  :  .  |  :  packages: [n=0] 
[10:53:25.041] result() for MulticoreFuture ...
[10:53:25.041] |  :  .  |  attachPackages() ... DONE
[10:53:25.042] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.043] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:25.043] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.043] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:25.044] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:25.044] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:25.044] |  :  .  |  :  .  |  New stack:
[10:53:25.044] |  :  .  |  :  .  |  List of 1
[10:53:25.044] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.044] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.044] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.044] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.044] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.044] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.044] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.048] |  :  .  |  :  .  |  Old stack:
[10:53:25.048] |  :  .  |  :  .  |  List of 1
[10:53:25.048] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.048] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.048] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.048] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.048] |  :  .  |  :  .  |      ...)  
[10:53:25.048] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.048] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.048] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:25.048] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.048] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.048] |  :  .  |  :  .  |      ...)  
[10:53:25.048] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.048] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.058] |  :  .  |  :  .  |  Not identical
[10:53:25.058] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:25.059] |  :  .  |  :  .  |  :  List of 2
[10:53:25.059] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.059] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.059] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.059] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.059] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.059] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.059] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.059] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.059] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.059] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.059] |  :  .  |  :  .  |  :      ...)  
[10:53:25.059] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.059] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.059] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:25.059] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.059] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.059] |  :  .  |  :  .  |  :      ...)  
[10:53:25.059] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.066] |  :  .  |  :  .  |  :  Formals differ
[10:53:25.067] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:25.067] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:25.067] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:25.067] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:25.067] |  :  .  |  :  .  List of future strategies:
[10:53:25.067] |  :  .  |  :  .  1. sequential:
[10:53:25.067] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:25.067] |  :  .  |  :  .     - tweaked: FALSE
[10:53:25.067] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.068] |  :  .  |  :  .  List of 1
[10:53:25.068] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.068] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.068] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.068] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.068] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.068] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.068] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.071] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:25.071] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:25.072] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.072] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:25.072] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.072] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:25.072] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:25.073] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:25.073] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:25.073] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:25.073] |  :  .  |  assign_globals() ...
[10:53:25.073] |  :  .  |  List of 1
[10:53:25.073] |  :  .  |   $ x: list()
[10:53:25.073] |  :  .  |   - attr(*, "where")=List of 1
[10:53:25.073] |  :  .  |    ..$ x:<environment: R_EmptyEnv> 
[10:53:25.073] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:25.073] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:25.073] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:25.073] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:25.076] |  :  .  |  - copied ‘x’ to environment
[10:53:25.076] |  :  .  |  assign_globals() ... done
[10:53:25.079] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:25.079] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:25.079] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:25.079] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:25.079] |  :  .  |  :  .  |  :  New stack:
[10:53:25.079] |  :  .  |  :  .  |  :  List of 1
[10:53:25.079] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.079] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.079] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.079] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.079] |  :  .  |  :  .  |  :      ...)  
[10:53:25.079] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.079] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.079] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:25.079] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.079] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.079] |  :  .  |  :  .  |  :      ...)  
[10:53:25.079] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.079] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.082] |  :  .  |  :  .  |  :  Old stack:
[10:53:25.083] |  :  .  |  :  .  |  :  List of 1
[10:53:25.083] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.083] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.083] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.083] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.083] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.083] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.083] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.086] |  :  .  |  :  .  |  :  Not identical
[10:53:25.087] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:25.087] |  :  .  |  :  .  |  :  .  List of 2
[10:53:25.087] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.087] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.087] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.087] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.087] |  :  .  |  :  .  |  :  .      ...)  
[10:53:25.087] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.087] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.087] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:25.087] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.087] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.087] |  :  .  |  :  .  |  :  .      ...)  
[10:53:25.087] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.087] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.087] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.087] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.087] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.087] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.087] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.091] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:25.091] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:25.091] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:25.091] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:25.092] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:25.092] |  :  .  |  :  .  |  List of future strategies:
[10:53:25.092] |  :  .  |  :  .  |  1. multicore:
[10:53:25.092] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:25.092] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:25.092] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:25.092] |  :  .  |  :  .  |  List of 1
[10:53:25.092] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.092] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.092] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.092] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.092] |  :  .  |  :  .  |      ...)  
[10:53:25.092] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.092] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.092] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:25.092] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.092] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.092] |  :  .  |  :  .  |      ...)  
[10:53:25.092] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.092] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.095] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:25.095] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:25.095] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.095] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:25.095] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.096] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:25.096] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:25.096] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:25.096] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:25.096] |  readImmediateCondition() ...
[10:53:25.097] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:25.097] |   - Number of RDS files: 0
[10:53:25.097] |  readImmediateCondition() ... DONE
[10:53:25.097] |  result() for MulticoreFuture ...
[10:53:25.098] |  result() for MulticoreFuture ... done
[10:53:25.098] result() for MulticoreFuture ... done
[10:53:25.098] result() for MulticoreFuture ...
[10:53:25.098] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:25.099] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:25.099] |  Searching for globals ...
[10:53:25.102] |  :  globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[10:53:25.103] |  Searching for globals ... DONE
[10:53:25.103] |  Resolving globals: TRUE
[10:53:25.103] |  Resolving any globals that are futures ...
[10:53:25.103] |  :  globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[10:53:25.103] |  Resolving any globals that are futures ... DONE
[10:53:25.103] |  Search for packages associated with the globals ...
[10:53:25.106] |  :  Packages associated with globals: [1] ‘base’
[10:53:25.106] |  :  Packages: [1] ‘base’
[10:53:25.106] |  Search for packages associated with the globals ... DONE
[10:53:25.107] |  Resolving futures part of globals (recursively) ...
[10:53:25.107] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:25.107] |  :  .  recursive: 99
[10:53:25.108] |  :  .  length: 2
[10:53:25.108] |  :  .  elements: ‘x’, ‘name’
[10:53:25.108] |  :  .  'obj' is list
[10:53:25.108] |  :  .  resolve(obj, ...) ...
[10:53:25.108] |  :  .  resolve(obj, ...) ... done
[10:53:25.109] |  :  .  length: 1 (resolved future 1)
[10:53:25.109] |  :  .  'obj' is atomic
[10:53:25.109] |  :  .  length: 0 (resolved future 2)
[10:53:25.109] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:25.109] |  :  globals: [2] ‘x’, ‘name’
[10:53:25.109] |  Resolving futures part of globals (recursively) ... DONE
[10:53:25.110] |  Packages after dropping 'base': [0] 
[10:53:25.110] |  globals: [2] ‘x’, ‘name’
[10:53:25.110] |  packages: [0] 
[10:53:25.110] getGlobalsAndPackages() ... done
[10:53:25.110] run() for Future (‘Future’) ...
[10:53:25.110] |  state: ‘created’
[10:53:25.111] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.111] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.111] |  Using MulticoreFutureBackend ...
[10:53:25.111] |  :  Launching futures ...
[10:53:25.111] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:25.111] |  :  .  |  getFutureData() ...
[10:53:25.112] |  :  .  |  :  getFutureCore() ...
[10:53:25.112] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:25.112] |  :  .  |  :  getFutureCore() ... done
[10:53:25.112] |  :  .  |  :  getFutureCapture() ...
[10:53:25.112] |  :  .  |  :  getFutureCapture() ... done
[10:53:25.112] |  :  .  |  :  getFutureContext() ...
[10:53:25.112] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.112] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:25.113] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.113] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:25.113] |  :  .  |  :  getFutureContext() ... done
[10:53:25.113] |  :  .  |  getFutureData() ... done
[10:53:25.113] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:25.114] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:25.115] |  :  .  |  MulticoreFuture started
[10:53:25.116] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:25.116] |  :  Launching futures ... done
[10:53:25.116] |  :  .  |  attachPackages() ...
[10:53:25.116] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:25.117] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:25.117] |  Using MulticoreFutureBackend ... done
[10:53:25.117] run() for Future (‘MulticoreFuture’) ... done
[10:53:25.117] |  :  .  |  attachPackages() ... DONE
[10:53:25.117] |  :  .  |  attachPackages() ...
[10:53:25.117] |  :  .  |  :  packages: [n=0] 
[10:53:25.117] result() for MulticoreFuture ...
[10:53:25.117] |  :  .  |  attachPackages() ... DONE
[10:53:25.118] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.119] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:25.119] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.120] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:25.120] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:25.120] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:25.121] |  :  .  |  :  .  |  New stack:
[10:53:25.121] |  :  .  |  :  .  |  List of 1
[10:53:25.121] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.121] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.121] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.121] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.121] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.121] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.121] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.125] |  :  .  |  :  .  |  Old stack:
[10:53:25.126] |  :  .  |  :  .  |  List of 1
[10:53:25.126] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.126] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.126] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.126] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.126] |  :  .  |  :  .  |      ...)  
[10:53:25.126] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.126] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.126] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:25.126] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.126] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.126] |  :  .  |  :  .  |      ...)  
[10:53:25.126] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.126] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.131] |  :  .  |  :  .  |  Not identical
[10:53:25.131] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:25.131] |  :  .  |  :  .  |  :  List of 2
[10:53:25.131] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.131] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.131] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.131] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.131] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.131] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.131] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.131] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.131] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.131] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.131] |  :  .  |  :  .  |  :      ...)  
[10:53:25.131] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.131] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.131] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:25.131] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.131] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.131] |  :  .  |  :  .  |  :      ...)  
[10:53:25.131] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.138] |  :  .  |  :  .  |  :  Formals differ
[10:53:25.138] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:25.138] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:25.138] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:25.138] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:25.138] |  :  .  |  :  .  List of future strategies:
[10:53:25.138] |  :  .  |  :  .  1. sequential:
[10:53:25.138] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:25.138] |  :  .  |  :  .     - tweaked: FALSE
[10:53:25.138] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.139] |  :  .  |  :  .  List of 1
[10:53:25.139] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.139] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.139] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.139] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.139] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.139] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.139] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.146] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:25.146] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:25.146] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.147] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:25.147] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.147] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:25.147] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:25.148] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:25.148] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:25.148] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:25.148] |  :  .  |  assign_globals() ...
[10:53:25.148] |  :  .  |  List of 2
[10:53:25.148] |  :  .  |   $ x   : list()
[10:53:25.148] |  :  .  |   $ name: chr "a"
[10:53:25.148] |  :  .  |   - attr(*, "where")=List of 2
[10:53:25.148] |  :  .  |    ..$ x   :<environment: R_EmptyEnv> 
[10:53:25.148] |  :  .  |    ..$ name:<environment: R_EmptyEnv> 
[10:53:25.148] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:25.148] |  :  .  |   - attr(*, "resolved")= logi TRUE
[10:53:25.148] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:25.148] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:25.153] |  :  .  |  - copied ‘x’ to environment
[10:53:25.153] |  :  .  |  - copied ‘name’ to environment
[10:53:25.153] |  :  .  |  assign_globals() ... done
[10:53:25.155] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:25.156] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:25.156] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:25.156] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:25.156] |  :  .  |  :  .  |  :  New stack:
[10:53:25.156] |  :  .  |  :  .  |  :  List of 1
[10:53:25.156] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.156] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.156] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.156] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.156] |  :  .  |  :  .  |  :      ...)  
[10:53:25.156] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.156] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.156] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:25.156] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.156] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.156] |  :  .  |  :  .  |  :      ...)  
[10:53:25.156] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.156] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.159] |  :  .  |  :  .  |  :  Old stack:
[10:53:25.159] |  :  .  |  :  .  |  :  List of 1
[10:53:25.159] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.159] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.159] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.159] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.159] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.159] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.159] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.161] |  :  .  |  :  .  |  :  Not identical
[10:53:25.162] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:53:25.162] |  :  .  |  :  .  |  :  .  List of 2
[10:53:25.162] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.162] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.162] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.162] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.162] |  :  .  |  :  .  |  :  .      ...)  
[10:53:25.162] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.162] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.162] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:25.162] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.162] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.162] |  :  .  |  :  .  |  :  .      ...)  
[10:53:25.162] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.162] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.162] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:25.162] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:25.162] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.162] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:25.162] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:25.166] |  :  .  |  :  .  |  :  .  Formals differ
[10:53:25.166] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:53:25.166] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:53:25.167] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:25.168] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:53:25.168] |  :  .  |  :  .  |  List of future strategies:
[10:53:25.168] |  :  .  |  :  .  |  1. multicore:
[10:53:25.168] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:25.168] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:25.168] |  :  .  |  :  .  |     - call: plan(strategy)
[10:53:25.169] |  :  .  |  :  .  |  List of 1
[10:53:25.169] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.169] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.169] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.169] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.169] |  :  .  |  :  .  |      ...)  
[10:53:25.169] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.169] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.169] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:25.169] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.169] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.169] |  :  .  |  :  .  |      ...)  
[10:53:25.169] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.169] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.172] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:25.172] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:25.172] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.172] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:25.172] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.173] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:53:25.173] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:25.173] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:25.173] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:25.173] |  readImmediateCondition() ...
[10:53:25.174] |    - path: ‘/tmp/RtmpXkr608/.future/immediateConditions’
[10:53:25.174] |   - Number of RDS files: 0
[10:53:25.174] |  readImmediateCondition() ... DONE
[10:53:25.175] |  result() for MulticoreFuture ...
[10:53:25.175] |  result() for MulticoreFuture ... done
[10:53:25.175] result() for MulticoreFuture ... done
[10:53:25.175] result() for MulticoreFuture ...
[10:53:25.175] result() for MulticoreFuture ... done
$a
[1] 1

- plan('multisession') ...
[10:53:25.176] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.176] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:53:25.176] |  :  all.equal() for FutureStrategyList ...
[10:53:25.176] |  :  .  New stack:
[10:53:25.177] |  :  .  List of 1
[10:53:25.177] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:53:25.177] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.177] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:53:25.177] |  :  .    ..- attr(*, "init")= logi TRUE
[10:53:25.177] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:53:25.177] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:25.177] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:25.177] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:53:25.177] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:25.177] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.181] |  :  .  Old stack:
[10:53:25.181] |  :  .  List of 1
[10:53:25.181] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.181] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.181] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.181] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.181] |  :  .      ...)  
[10:53:25.181] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.181] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.181] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:53:25.181] |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.181] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.181] |  :  .      ...)  
[10:53:25.181] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.181] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.185] |  :  .  Not identical
[10:53:25.185] |  :  .  all.equal() for future ...
[10:53:25.185] |  :  .  |  List of 2
[10:53:25.185] |  :  .  |   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:53:25.185] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.185] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:53:25.185] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:53:25.185] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:53:25.185] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:25.185] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:25.185] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:53:25.185] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:25.185] |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:53:25.185] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:53:25.185] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:53:25.185] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.185] |  :  .  |      ...)  
[10:53:25.185] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.185] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.185] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:53:25.185] |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x563eecd2ca60> 
[10:53:25.185] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:25.185] |  :  .  |      ...)  
[10:53:25.185] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:25.194] |  :  .  |  Formals differ
[10:53:25.194] |  :  .  all.equal() for future ... done
[10:53:25.194] |  :  .  Future strategies differ at level 1
[10:53:25.194] |  :  all.equal() for FutureStrategyList ... done
[10:53:25.194] |  :  plan(): Setting new future strategy stack:
[10:53:25.194] |  :  List of future strategies:
[10:53:25.194] |  :  1. multisession:
[10:53:25.194] |  :     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:53:25.194] |  :     - tweaked: FALSE
[10:53:25.194] |  :     - call: plan(strategy)
[10:53:25.195] |  :  List of 1
[10:53:25.195] |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:53:25.195] |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.195] |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:53:25.195] |  :    ..- attr(*, "init")= logi TRUE
[10:53:25.195] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:53:25.195] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:25.195] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:25.195] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:53:25.195] |  :    ..- attr(*, "call")= language plan(strategy)
[10:53:25.195] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:25.199] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:53:25.199] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.199] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:25.199] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.201] |  :  .  Legacy shutdown of cluster workers ...
[10:53:25.201] |  :  .  |  Stopping existing cluster ...
[10:53:25.201] |  :  .  |  :  No pre-existing cluster. Skipping
[10:53:25.201] |  :  .  |  Stopping existing cluster ... done
[10:53:25.201] |  :  .  Legacy shutdown of cluster workers ... done
[10:53:25.201] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:53:25.201] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:53:25.201] |  :  .  function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:53:25.201] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:25.201] |  :  .   - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:53:25.201] |  :  .   - attr(*, "init")= logi TRUE
[10:53:25.201] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:53:25.201] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:25.201] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:25.201] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:53:25.201] |  :  .   - attr(*, "call")= language plan(strategy)
[10:53:25.204] |  :  .  init: TRUE
[10:53:25.204] |  :  .  makeFutureBackend(<multisession>) ...
[10:53:25.204] |  :  .  |  Backend function: <‘NULL’>
[10:53:25.206] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[10:53:25.206] |  :  .  |  :  workers: 2
[10:53:25.206] |  :  .  |  :  getCluster() ...
[10:53:25.206] |  :  .  |  :  getCluster() ... done
[10:53:25.206] |  :  .  |  :  Stopping existing cluster ...
[10:53:25.206] |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:53:25.206] |  :  .  |  :  Stopping existing cluster ... done
[10:53:25.207] |  :  .  |  :  Starting new cluster ...
[10:53:25.207] |  :  .  |  :  .  makeCluster(workers, ...) ...
[10:53:25.207] |  :  .  |  :  .  |  Arguments:
[10:53:25.207] |  :  .  |  :  .  |  List of 2
[10:53:25.207] |  :  .  |  :  .  |   $             : int 2
[10:53:25.207] |  :  .  |  :  .  |   $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:53:25.729] |  :  .  |  :  .  |  Generated cluster UUID
[10:53:25.729] |  :  .  |  :  .  |  Cluster UUID: ‘eca95cd3ded2cc371784101c661aa4b4’
[10:53:25.729] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:25.732] |  :  .  |  :  .  makeCluster(workers, ...) ... done
[10:53:25.732] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:25.733] |  :  .  |  :  Starting new cluster ... done
[10:53:25.733] |  :  .  |  :  Number of workers: 2
[10:53:25.733] |  :  .  |  :  Workers UUID: ‘eca95cd3ded2cc371784101c661aa4b4’
[10:53:25.734] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[10:53:25.734] |  :  .  |  Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:25.734] |  :  .  makeFutureBackend(<multisession>) ... done
[10:53:25.734] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:53:25.734] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.734] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:53:25.734] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.735] |  :  plan(): nbrOfWorkers() = 2
[10:53:25.735] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:53:25.735] plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:25.735] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:25.735] |  Searching for globals ...
[10:53:25.737] |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:25.738] |  Searching for globals ... DONE
[10:53:25.738] |  Resolving globals: TRUE
[10:53:25.738] |  Resolving any globals that are futures ...
[10:53:25.738] |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:25.738] |  Resolving any globals that are futures ... DONE
[10:53:25.738] |  Search for packages associated with the globals ...
[10:53:25.738] |  :  Packages associated with globals: [1] ‘base’
[10:53:25.739] |  :  Packages: [1] ‘base’
[10:53:25.739] |  Search for packages associated with the globals ... DONE
[10:53:25.739] |  Resolving futures part of globals (recursively) ...
[10:53:25.739] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:25.739] |  :  .  recursive: 99
[10:53:25.739] |  :  .  length: 1
[10:53:25.739] |  :  .  elements: ‘x’
[10:53:25.739] |  :  .  'obj' is list
[10:53:25.740] |  :  .  resolve(obj, ...) ...
[10:53:25.740] |  :  .  resolve(obj, ...) ... done
[10:53:25.740] |  :  .  length: 0 (resolved future 1)
[10:53:25.740] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:25.740] |  :  globals: [1] ‘x’
[10:53:25.740] |  Resolving futures part of globals (recursively) ... DONE
[10:53:25.740] |  Packages after dropping 'base': [0] 
[10:53:25.740] |  globals: [1] ‘x’
[10:53:25.740] |  packages: [0] 
[10:53:25.740] getGlobalsAndPackages() ... done
[10:53:25.741] run() for Future (‘Future’) ...
[10:53:25.741] |  state: ‘created’
[10:53:25.741] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.741] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.741] |  Using MultisessionFutureBackend ...
[10:53:25.741] |  :  Launching futures ...
[10:53:25.742] |  :  .  launchFuture() for ClusterFutureBackend ...
[10:53:25.742] |  :  .  |  Workers: [n=2]
[10:53:25.742] |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:25.743] |  :  .  |  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:25.743] |  :  .  |  requestWorker() ...
[10:53:25.743] |  :  .  |  :  requestNode() ...
[10:53:25.744] |  :  .  |  :  .  Number of workers: 2
[10:53:25.744] |  :  .  |  :  .  Polling for a free worker ...
[10:53:25.744] |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:25.744] |  :  .  |  :  .  |  :  Created empty registry ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:25.744] |  :  .  |  :  .  |  :  Listing all futures
[10:53:25.744] |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:25.744] |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:25.744] |  :  .  |  :  .  |  Total time: 0
[10:53:25.744] |  :  .  |  :  .  Polling for a free worker ... done
[10:53:25.744] |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:25.745] |  :  .  |  :  .  |  Listing all futures
[10:53:25.745] |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:25.745] |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:25.745] |  :  .  |  :  .  Index of first available worker: 1
[10:53:25.745] |  :  .  |  :  .  Validate that the worker is functional ...
[10:53:25.803] |  :  .  |  :  .  |  Worker is functional
[10:53:25.803] |  :  .  |  :  .  requestNode() ... done
[10:53:25.803] |  :  .  |  :  .  cluster node index: 1
[10:53:25.804] |  :  .  |  :  requestWorker() ... done
[10:53:25.804] |  :  .  |  :  eraseGlobalEnvironment() ...
[10:53:25.805] |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:53:25.805] |  :  .  |  :  launchFuture() ...
[10:53:25.805] |  :  .  |  :  .  cluster node index: 1
[10:53:25.805] |  :  .  |  :  .  getFutureData() ...
[10:53:25.805] |  :  .  |  :  .  |  getFutureCore() ...
[10:53:25.806] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:53:25.806] |  :  .  |  :  .  |  getFutureCore() ... done
[10:53:25.806] |  :  .  |  :  .  |  getFutureCapture() ...
[10:53:25.806] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:53:25.806] |  :  .  |  :  .  |  getFutureContext() ...
[10:53:25.806] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.806] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:53:25.807] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.807] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:53:25.807] |  :  .  |  :  .  |  getFutureContext() ... done
[10:53:25.807] |  :  .  |  :  .  getFutureData() ... done
[10:53:25.808] |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:25.808] |  :  .  |  :  .  |  Appended future to position #1
[10:53:25.808] |  :  .  |  :  .  |  Number of registered futures: 1
[10:53:25.808] |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:25.808] |  :  .  |  :  launchFuture() ... done
[10:53:25.808] |  :  .  |  :  MultisessionFuture started
[10:53:25.809] |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:53:25.809] |  :  .  Launching futures ... done
[10:53:25.809] |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:25.809] |  :  Using MultisessionFutureBackend ... done
[10:53:25.809] |  run() for Future (‘MultisessionFuture’) ... done
[10:53:25.809] |  result() for ClusterFuture ...
[10:53:25.810] |  :  assertValidConnection() ...
[10:53:25.810] |  :  .  cluster node index: 1
[10:53:25.810] |  :  assertValidConnection() ... done
[10:53:25.811] |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:53:25.811] |  :  .  cluster node index: 1
[10:53:25.896] |  :  .  [1] TRUE
[10:53:25.897] |  :  .  received data:
[10:53:25.897] |  :  .  List of 5
[10:53:25.897] |  :  .   $ type   : chr "VALUE"
[10:53:25.897] |  :  .   $ value  :List of 13
[10:53:25.897] |  :  .    ..$ value            :List of 1
[10:53:25.897] |  :  .    .. ..$ a: num 1
[10:53:25.897] |  :  .    ..$ visible          : logi TRUE
[10:53:25.897] |  :  .    ..$ stdout           : chr ""
[10:53:25.897] |  :  .    ..$ conditions       : list()
[10:53:25.897] |  :  .    ..$ rng              : logi FALSE
[10:53:25.897] |  :  .    ..$ misuseGlobalEnv  : NULL
[10:53:25.897] |  :  .    ..$ misuseConnections:List of 3
[10:53:25.897] |  :  .    .. ..$ added   : NULL
[10:53:25.897] |  :  .    .. ..$ removed : NULL
[10:53:25.897] |  :  .    .. ..$ replaced: NULL
[10:53:25.897] |  :  .    ..$ misuseDevices    : NULL
[10:53:25.897] |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:25.897] |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:25.897] |  :  .    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:25.897] |  :  .    .. ..- attr(*, "source")=List of 5
[10:53:25.897] |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:25.897] |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:25.897] |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:25.897] |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:25.897] |  :  .    .. .. ..$ pid   : int 71399
[10:53:25.897] |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:25.897] |  :  .    .. .. ..$ random: int 2147483647
[10:53:25.897] |  :  .    ..$ r_info           :List of 4
[10:53:25.897] |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:25.897] |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:53:25.897] |  :  .    .. ..$ os           : chr "unix"
[10:53:25.897] |  :  .    .. ..$ os_name      : chr "Linux"
[10:53:25.897] |  :  .    .. ..$ captures_utf8: logi TRUE
[10:53:25.897] |  :  .    ..$ version          : chr "1.8"
[10:53:25.897] |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:53:25.897] |  :  .   $ success: logi TRUE
[10:53:25.897] |  :  .   $ time   : 'proc_time' Named num [1:5] 0.045 0.003 0.048 0 0
[10:53:25.897] |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:25.897] |  :  .   $ tag    : NULL
[10:53:25.911] |  :  .  Received FutureResult
[10:53:25.911] |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:25.911] |  :  .  |  Removed future from position #1
[10:53:25.912] |  :  .  |  Number of registered futures: 0
[10:53:25.912] |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:25.912] |  :  .  Erased future from future backend
[10:53:25.912] |  :  .  result() for ClusterFuture ...
[10:53:25.912] |  :  .  |  result already collected: FutureResult
[10:53:25.912] |  :  .  result() for ClusterFuture ... done
[10:53:25.912] |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:25.912] |  result() for ClusterFuture ... done
[10:53:25.913] |  result() for ClusterFuture ...
[10:53:25.913] |  :  result already collected: FutureResult
[10:53:25.913] |  result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:25.913] |  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:25.913] |  :  Searching for globals ...
[10:53:25.916] |  :  .  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:25.916] |  :  Searching for globals ... DONE
[10:53:25.917] |  :  Resolving globals: TRUE
[10:53:25.917] |  :  Resolving any globals that are futures ...
[10:53:25.917] |  :  .  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:25.917] |  :  Resolving any globals that are futures ... DONE
[10:53:25.917] |  :  Search for packages associated with the globals ...
[10:53:25.917] |  :  .  Packages associated with globals: [1] ‘base’
[10:53:25.918] |  :  .  Packages: [1] ‘base’
[10:53:25.918] |  :  Search for packages associated with the globals ... DONE
[10:53:25.918] |  :  Resolving futures part of globals (recursively) ...
[10:53:25.918] |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:25.918] |  :  .  |  recursive: 99
[10:53:25.919] |  :  .  |  length: 1
[10:53:25.919] |  :  .  |  elements: ‘x’
[10:53:25.919] |  :  .  |  'obj' is list
[10:53:25.919] |  :  .  |  resolve(obj, ...) ...
[10:53:25.919] |  :  .  |  resolve(obj, ...) ... done
[10:53:25.919] |  :  .  |  length: 0 (resolved future 1)
[10:53:25.919] |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:25.919] |  :  .  globals: [1] ‘x’
[10:53:25.920] |  :  Resolving futures part of globals (recursively) ... DONE
[10:53:25.920] |  :  Packages after dropping 'base': [0] 
[10:53:25.920] |  :  globals: [1] ‘x’
[10:53:25.920] |  :  packages: [0] 
[10:53:25.920] |  getGlobalsAndPackages() ... done
[10:53:25.920] |  run() for Future (‘Future’) ...
[10:53:25.921] |  :  state: ‘created’
[10:53:25.921] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.921] |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.921] |  :  Using MultisessionFutureBackend ...
[10:53:25.921] |  :  .  Launching futures ...
[10:53:25.921] |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:53:25.921] |  :  .  |  :  Workers: [n=2]
[10:53:25.922] |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:25.924] |  :  .  |  :  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:25.924] |  :  .  |  :  requestWorker() ...
[10:53:25.924] |  :  .  |  :  .  requestNode() ...
[10:53:25.924] |  :  .  |  :  .  |  Number of workers: 2
[10:53:25.924] |  :  .  |  :  .  |  Polling for a free worker ...
[10:53:25.924] |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:25.924] |  :  .  |  :  .  |  :  .  Listing all futures
[10:53:25.924] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:25.925] |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:25.925] |  :  .  |  :  .  |  :  Total time: 0
[10:53:25.925] |  :  .  |  :  .  |  Polling for a free worker ... done
[10:53:25.925] |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:25.925] |  :  .  |  :  .  |  :  Listing all futures
[10:53:25.925] |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:25.925] |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:25.925] |  :  .  |  :  .  |  Index of first available worker: 1
[10:53:25.925] |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:53:25.965] |  :  .  |  :  .  |  :  Worker is functional
[10:53:25.965] |  :  .  |  :  .  |  requestNode() ... done
[10:53:25.965] |  :  .  |  :  .  |  cluster node index: 1
[10:53:25.965] |  :  .  |  :  .  requestWorker() ... done
[10:53:25.966] |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:53:25.966] |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:53:25.966] |  :  .  |  :  .  launchFuture() ...
[10:53:25.966] |  :  .  |  :  .  |  cluster node index: 1
[10:53:25.966] |  :  .  |  :  .  |  getFutureData() ...
[10:53:25.966] |  :  .  |  :  .  |  :  getFutureCore() ...
[10:53:25.967] |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:25.967] |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:53:25.967] |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:53:25.967] |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:53:25.967] |  :  .  |  :  .  |  :  getFutureContext() ...
[10:53:25.967] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:25.967] |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:25.967] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:25.968] |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:25.968] |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:53:25.968] |  :  .  |  :  .  |  getFutureData() ... done
[10:53:25.968] |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:25.968] |  :  .  |  :  .  |  :  Appended future to position #1
[10:53:25.969] |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:53:25.969] |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:25.969] |  :  .  |  :  .  launchFuture() ... done
[10:53:25.969] |  :  .  |  :  .  MultisessionFuture started
[10:53:25.969] |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:53:25.969] |  :  .  |  Launching futures ... done
[10:53:25.969] |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:25.969] |  :  .  Using MultisessionFutureBackend ... done
[10:53:25.969] |  :  run() for Future (‘MultisessionFuture’) ... done
[10:53:25.970] |  :  result() for ClusterFuture ...
[10:53:25.970] |  :  .  assertValidConnection() ...
[10:53:25.970] |  :  .  |  cluster node index: 1
[10:53:25.970] |  :  .  assertValidConnection() ... done
[10:53:25.970] |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:53:25.971] |  :  .  |  cluster node index: 1
[10:53:26.012] |  :  .  |  [1] TRUE
[10:53:26.012] |  :  .  |  received data:
[10:53:26.013] |  :  .  |  List of 5
[10:53:26.013] |  :  .  |   $ type   : chr "VALUE"
[10:53:26.013] |  :  .  |   $ value  :List of 13
[10:53:26.013] |  :  .  |    ..$ value            :List of 1
[10:53:26.013] |  :  .  |    .. ..$ a: num 1
[10:53:26.013] |  :  .  |    ..$ visible          : logi TRUE
[10:53:26.013] |  :  .  |    ..$ stdout           : chr ""
[10:53:26.013] |  :  .  |    ..$ conditions       : list()
[10:53:26.013] |  :  .  |    ..$ rng              : logi FALSE
[10:53:26.013] |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:53:26.013] |  :  .  |    ..$ misuseConnections:List of 3
[10:53:26.013] |  :  .  |    .. ..$ added   : NULL
[10:53:26.013] |  :  .  |    .. ..$ removed : NULL
[10:53:26.013] |  :  .  |    .. ..$ replaced: NULL
[10:53:26.013] |  :  .  |    ..$ misuseDevices    : NULL
[10:53:26.013] |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.013] |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.013] |  :  .  |    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:26.013] |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:53:26.013] |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:26.013] |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:26.013] |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:26.013] |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:26.013] |  :  .  |    .. .. ..$ pid   : int 71399
[10:53:26.013] |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:26.013] |  :  .  |    .. .. ..$ random: int 2147483647
[10:53:26.013] |  :  .  |    ..$ r_info           :List of 4
[10:53:26.013] |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:26.013] |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:53:26.013] |  :  .  |    .. ..$ os           : chr "unix"
[10:53:26.013] |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:53:26.013] |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:53:26.013] |  :  .  |    ..$ version          : chr "1.8"
[10:53:26.013] |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:53:26.013] |  :  .  |   $ success: logi TRUE
[10:53:26.013] |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:53:26.013] |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:26.013] |  :  .  |   $ tag    : NULL
[10:53:26.028] |  :  .  |  Received FutureResult
[10:53:26.028] |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:26.028] |  :  .  |  :  Removed future from position #1
[10:53:26.028] |  :  .  |  :  Number of registered futures: 0
[10:53:26.028] |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:26.029] |  :  .  |  Erased future from future backend
[10:53:26.029] |  :  .  |  result() for ClusterFuture ...
[10:53:26.029] |  :  .  |  :  result already collected: FutureResult
[10:53:26.029] |  :  .  |  result() for ClusterFuture ... done
[10:53:26.029] |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:26.029] |  :  result() for ClusterFuture ... done
[10:53:26.029] |  :  result() for ClusterFuture ...
[10:53:26.029] |  :  .  result already collected: FutureResult
[10:53:26.029] |  :  result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:26.030] |  :  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:26.030] |  :  .  Searching for globals ...
[10:53:26.032] |  :  .  |  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:26.032] |  :  .  Searching for globals ... DONE
[10:53:26.032] |  :  .  Resolving globals: TRUE
[10:53:26.032] |  :  .  Resolving any globals that are futures ...
[10:53:26.032] |  :  .  |  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:26.032] |  :  .  Resolving any globals that are futures ... DONE
[10:53:26.033] |  :  .  Search for packages associated with the globals ...
[10:53:26.033] |  :  .  |  Packages associated with globals: [1] ‘base’
[10:53:26.033] |  :  .  |  Packages: [1] ‘base’
[10:53:26.033] |  :  .  Search for packages associated with the globals ... DONE
[10:53:26.033] |  :  .  Resolving futures part of globals (recursively) ...
[10:53:26.033] |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:26.034] |  :  .  |  :  recursive: 99
[10:53:26.034] |  :  .  |  :  length: 1
[10:53:26.034] |  :  .  |  :  elements: ‘x’
[10:53:26.034] |  :  .  |  :  'obj' is list
[10:53:26.034] |  :  .  |  :  resolve(obj, ...) ...
[10:53:26.034] |  :  .  |  :  resolve(obj, ...) ... done
[10:53:26.034] |  :  .  |  :  length: 0 (resolved future 1)
[10:53:26.034] |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:26.034] |  :  .  |  globals: [1] ‘x’
[10:53:26.034] |  :  .  Resolving futures part of globals (recursively) ... DONE
[10:53:26.035] |  :  .  Packages after dropping 'base': [0] 
[10:53:26.035] |  :  .  globals: [1] ‘x’
[10:53:26.035] |  :  .  packages: [0] 
[10:53:26.035] |  :  getGlobalsAndPackages() ... done
[10:53:26.035] |  :  run() for Future (‘Future’) ...
[10:53:26.035] |  :  .  state: ‘created’
[10:53:26.035] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.035] |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.036] |  :  .  Using MultisessionFutureBackend ...
[10:53:26.036] |  :  .  |  Launching futures ...
[10:53:26.036] |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:53:26.036] |  :  .  |  :  .  Workers: [n=2]
[10:53:26.036] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:26.037] |  :  .  |  :  .  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:26.038] |  :  .  |  :  .  requestWorker() ...
[10:53:26.038] |  :  .  |  :  .  |  requestNode() ...
[10:53:26.038] |  :  .  |  :  .  |  :  Number of workers: 2
[10:53:26.038] |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:53:26.038] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.038] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:53:26.038] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:26.038] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.038] |  :  .  |  :  .  |  :  .  Total time: 0
[10:53:26.038] |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:53:26.038] |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.039] |  :  .  |  :  .  |  :  .  Listing all futures
[10:53:26.039] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:26.039] |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.039] |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:53:26.039] |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:53:26.118] |  :  .  |  :  .  |  :  .  Worker is functional
[10:53:26.119] |  :  .  |  :  .  |  :  requestNode() ... done
[10:53:26.119] |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:26.119] |  :  .  |  :  .  |  requestWorker() ... done
[10:53:26.119] |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:53:26.120] |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:53:26.120] |  :  .  |  :  .  |  launchFuture() ...
[10:53:26.120] |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:26.120] |  :  .  |  :  .  |  :  getFutureData() ...
[10:53:26.120] |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:53:26.120] |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:53:26.120] |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:53:26.120] |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:53:26.120] |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:53:26.120] |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:53:26.121] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.121] |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:53:26.121] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.121] |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:53:26.121] |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:53:26.121] |  :  .  |  :  .  |  :  getFutureData() ... done
[10:53:26.121] |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:26.122] |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:53:26.122] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:53:26.122] |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:26.122] |  :  .  |  :  .  |  launchFuture() ... done
[10:53:26.122] |  :  .  |  :  .  |  MultisessionFuture started
[10:53:26.122] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:53:26.122] |  :  .  |  :  Launching futures ... done
[10:53:26.122] |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:26.122] |  :  .  |  Using MultisessionFutureBackend ... done
[10:53:26.122] |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:53:26.123] |  :  .  result() for ClusterFuture ...
[10:53:26.123] |  :  .  |  assertValidConnection() ...
[10:53:26.123] |  :  .  |  :  cluster node index: 1
[10:53:26.123] |  :  .  |  assertValidConnection() ... done
[10:53:26.123] |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:53:26.123] |  :  .  |  :  cluster node index: 1
[10:53:26.165] |  :  .  |  :  [1] TRUE
[10:53:26.166] |  :  .  |  :  received data:
[10:53:26.166] |  :  .  |  :  List of 5
[10:53:26.166] |  :  .  |  :   $ type   : chr "VALUE"
[10:53:26.166] |  :  .  |  :   $ value  :List of 13
[10:53:26.166] |  :  .  |  :    ..$ value            :List of 1
[10:53:26.166] |  :  .  |  :    .. ..$ a: num 1
[10:53:26.166] |  :  .  |  :    ..$ visible          : logi TRUE
[10:53:26.166] |  :  .  |  :    ..$ stdout           : chr ""
[10:53:26.166] |  :  .  |  :    ..$ conditions       : list()
[10:53:26.166] |  :  .  |  :    ..$ rng              : logi FALSE
[10:53:26.166] |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:53:26.166] |  :  .  |  :    ..$ misuseConnections:List of 3
[10:53:26.166] |  :  .  |  :    .. ..$ added   : NULL
[10:53:26.166] |  :  .  |  :    .. ..$ removed : NULL
[10:53:26.166] |  :  .  |  :    .. ..$ replaced: NULL
[10:53:26.166] |  :  .  |  :    ..$ misuseDevices    : NULL
[10:53:26.166] |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.166] |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.166] |  :  .  |  :    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:26.166] |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:53:26.166] |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:26.166] |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:26.166] |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:26.166] |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:26.166] |  :  .  |  :    .. .. ..$ pid   : int 71399
[10:53:26.166] |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:26.166] |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:53:26.166] |  :  .  |  :    ..$ r_info           :List of 4
[10:53:26.166] |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:26.166] |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:53:26.166] |  :  .  |  :    .. ..$ os           : chr "unix"
[10:53:26.166] |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:53:26.166] |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:53:26.166] |  :  .  |  :    ..$ version          : chr "1.8"
[10:53:26.166] |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:53:26.166] |  :  .  |  :   $ success: logi TRUE
[10:53:26.166] |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:53:26.166] |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:26.166] |  :  .  |  :   $ tag    : NULL
[10:53:26.177] |  :  .  |  :  Received FutureResult
[10:53:26.177] |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:26.177] |  :  .  |  :  .  Removed future from position #1
[10:53:26.177] |  :  .  |  :  .  Number of registered futures: 0
[10:53:26.177] |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:26.177] |  :  .  |  :  Erased future from future backend
[10:53:26.177] |  :  .  |  :  result() for ClusterFuture ...
[10:53:26.177] |  :  .  |  :  .  result already collected: FutureResult
[10:53:26.177] |  :  .  |  :  result() for ClusterFuture ... done
[10:53:26.178] |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:26.178] |  :  .  result() for ClusterFuture ... done
[10:53:26.178] |  :  .  result() for ClusterFuture ...
[10:53:26.178] |  :  .  |  result already collected: FutureResult
[10:53:26.178] |  :  .  result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:26.178] |  :  .  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:26.179] |  :  .  |  Searching for globals ...
[10:53:26.181] |  :  .  |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:26.181] |  :  .  |  Searching for globals ... DONE
[10:53:26.181] |  :  .  |  Resolving globals: TRUE
[10:53:26.181] |  :  .  |  Resolving any globals that are futures ...
[10:53:26.181] |  :  .  |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[10:53:26.181] |  :  .  |  Resolving any globals that are futures ... DONE
[10:53:26.181] |  :  .  |  Search for packages associated with the globals ...
[10:53:26.182] |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:53:26.182] |  :  .  |  :  Packages: [1] ‘base’
[10:53:26.182] |  :  .  |  Search for packages associated with the globals ... DONE
[10:53:26.182] |  :  .  |  Resolving futures part of globals (recursively) ...
[10:53:26.182] |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:26.182] |  :  .  |  :  .  recursive: 99
[10:53:26.183] |  :  .  |  :  .  length: 1
[10:53:26.183] |  :  .  |  :  .  elements: ‘x’
[10:53:26.183] |  :  .  |  :  .  'obj' is list
[10:53:26.183] |  :  .  |  :  .  resolve(obj, ...) ...
[10:53:26.183] |  :  .  |  :  .  resolve(obj, ...) ... done
[10:53:26.183] |  :  .  |  :  .  length: 0 (resolved future 1)
[10:53:26.183] |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:26.183] |  :  .  |  :  globals: [1] ‘x’
[10:53:26.183] |  :  .  |  Resolving futures part of globals (recursively) ... DONE
[10:53:26.183] |  :  .  |  Packages after dropping 'base': [0] 
[10:53:26.184] |  :  .  |  globals: [1] ‘x’
[10:53:26.184] |  :  .  |  packages: [0] 
[10:53:26.184] |  :  .  getGlobalsAndPackages() ... done
[10:53:26.184] |  :  .  run() for Future (‘Future’) ...
[10:53:26.184] |  :  .  |  state: ‘created’
[10:53:26.184] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.184] |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.184] |  :  .  |  Using MultisessionFutureBackend ...
[10:53:26.185] |  :  .  |  :  Launching futures ...
[10:53:26.185] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:53:26.185] |  :  .  |  :  .  |  Workers: [n=2]
[10:53:26.185] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:26.186] |  :  .  |  :  .  |  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:26.187] |  :  .  |  :  .  |  requestWorker() ...
[10:53:26.187] |  :  .  |  :  .  |  :  requestNode() ...
[10:53:26.187] |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:53:26.187] |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:53:26.187] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.187] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:53:26.187] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:26.187] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.187] |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:53:26.187] |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:53:26.188] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.188] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:53:26.188] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:26.188] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.188] |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:53:26.188] |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:53:26.266] |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:53:26.266] |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:53:26.267] |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:53:26.267] |  :  .  |  :  .  |  :  requestWorker() ... done
[10:53:26.267] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:53:26.267] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:53:26.267] |  :  .  |  :  .  |  :  launchFuture() ...
[10:53:26.268] |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:53:26.268] |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:53:26.268] |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:53:26.268] |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:53:26.268] |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:53:26.268] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:53:26.268] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:53:26.268] |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:53:26.268] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.268] |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:53:26.269] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.269] |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:53:26.269] |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:53:26.269] |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:53:26.269] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:26.269] |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:53:26.269] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:53:26.269] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:26.270] |  :  .  |  :  .  |  :  launchFuture() ... done
[10:53:26.270] |  :  .  |  :  .  |  :  MultisessionFuture started
[10:53:26.270] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:53:26.270] |  :  .  |  :  .  Launching futures ... done
[10:53:26.270] |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:26.270] |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:53:26.270] |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:53:26.270] |  :  .  |  result() for ClusterFuture ...
[10:53:26.270] |  :  .  |  :  assertValidConnection() ...
[10:53:26.271] |  :  .  |  :  .  cluster node index: 1
[10:53:26.271] |  :  .  |  :  assertValidConnection() ... done
[10:53:26.271] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:53:26.271] |  :  .  |  :  .  cluster node index: 1
[10:53:26.313] |  :  .  |  :  .  [1] TRUE
[10:53:26.314] |  :  .  |  :  .  received data:
[10:53:26.314] |  :  .  |  :  .  List of 5
[10:53:26.314] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:53:26.314] |  :  .  |  :  .   $ value  :List of 13
[10:53:26.314] |  :  .  |  :  .    ..$ value            :List of 1
[10:53:26.314] |  :  .  |  :  .    .. ..$ a: num 1
[10:53:26.314] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:53:26.314] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:53:26.314] |  :  .  |  :  .    ..$ conditions       : list()
[10:53:26.314] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:53:26.314] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:53:26.314] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:53:26.314] |  :  .  |  :  .    .. ..$ added   : NULL
[10:53:26.314] |  :  .  |  :  .    .. ..$ removed : NULL
[10:53:26.314] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:53:26.314] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:53:26.314] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.314] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.314] |  :  .  |  :  .    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:26.314] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:53:26.314] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:26.314] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:26.314] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:26.314] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:26.314] |  :  .  |  :  .    .. .. ..$ pid   : int 71399
[10:53:26.314] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:26.314] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:53:26.314] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:53:26.314] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:26.314] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:53:26.314] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:53:26.314] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:53:26.314] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:53:26.314] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:53:26.314] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:53:26.314] |  :  .  |  :  .   $ success: logi TRUE
[10:53:26.314] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:53:26.314] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:26.314] |  :  .  |  :  .   $ tag    : NULL
[10:53:26.325] |  :  .  |  :  .  Received FutureResult
[10:53:26.325] |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:26.325] |  :  .  |  :  .  |  Removed future from position #1
[10:53:26.325] |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:26.325] |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:26.325] |  :  .  |  :  .  Erased future from future backend
[10:53:26.325] |  :  .  |  :  .  result() for ClusterFuture ...
[10:53:26.325] |  :  .  |  :  .  |  result already collected: FutureResult
[10:53:26.325] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:53:26.325] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:26.326] |  :  .  |  result() for ClusterFuture ... done
[10:53:26.326] |  :  .  |  result() for ClusterFuture ...
[10:53:26.326] |  :  .  |  :  result already collected: FutureResult
[10:53:26.326] |  :  .  |  result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:26.326] |  :  .  |  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:26.327] |  :  .  |  :  Searching for globals ...
[10:53:26.329] |  :  .  |  :  .  globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[10:53:26.329] |  :  .  |  :  Searching for globals ... DONE
[10:53:26.329] |  :  .  |  :  Resolving globals: TRUE
[10:53:26.330] |  :  .  |  :  Resolving any globals that are futures ...
[10:53:26.330] |  :  .  |  :  .  globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[10:53:26.330] |  :  .  |  :  Resolving any globals that are futures ... DONE
[10:53:26.330] |  :  .  |  :  Search for packages associated with the globals ...
[10:53:26.330] |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:53:26.330] |  :  .  |  :  .  Packages: [1] ‘base’
[10:53:26.330] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:53:26.331] |  :  .  |  :  Packages after dropping 'base': [0] 
[10:53:26.331] |  :  .  |  :  globals: [0] 
[10:53:26.331] |  :  .  |  :  packages: [0] 
[10:53:26.331] |  :  .  |  getGlobalsAndPackages() ... done
[10:53:26.331] |  :  .  |  run() for Future (‘Future’) ...
[10:53:26.331] |  :  .  |  :  state: ‘created’
[10:53:26.331] |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.331] |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.332] |  :  .  |  :  Using MultisessionFutureBackend ...
[10:53:26.332] |  :  .  |  :  .  Launching futures ...
[10:53:26.332] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:53:26.332] |  :  .  |  :  .  |  :  Workers: [n=2]
[10:53:26.332] |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:26.335] |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:26.336] |  :  .  |  :  .  |  :  requestWorker() ...
[10:53:26.336] |  :  .  |  :  .  |  :  .  requestNode() ...
[10:53:26.336] |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:53:26.336] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:53:26.336] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.336] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:53:26.336] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:26.336] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.336] |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:53:26.336] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:53:26.336] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.337] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:53:26.337] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:26.337] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.337] |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:53:26.337] |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:53:26.416] |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:53:26.416] |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:53:26.417] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:53:26.417] |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:53:26.417] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:53:26.417] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:53:26.417] |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:53:26.417] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:53:26.418] |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:53:26.418] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:53:26.418] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:26.418] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:53:26.418] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:53:26.418] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:53:26.418] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:53:26.418] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.418] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:26.418] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.419] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:26.419] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:53:26.419] |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:53:26.419] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:26.419] |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:53:26.419] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:53:26.419] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:26.420] |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:53:26.420] |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:53:26.420] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:53:26.420] |  :  .  |  :  .  |  Launching futures ... done
[10:53:26.420] |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:26.420] |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:53:26.420] |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:53:26.420] |  :  .  |  :  result() for ClusterFuture ...
[10:53:26.420] |  :  .  |  :  .  assertValidConnection() ...
[10:53:26.421] |  :  .  |  :  .  |  cluster node index: 1
[10:53:26.421] |  :  .  |  :  .  assertValidConnection() ... done
[10:53:26.421] |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:53:26.421] |  :  .  |  :  .  |  cluster node index: 1
[10:53:26.463] |  :  .  |  :  .  |  [1] TRUE
[10:53:26.463] |  :  .  |  :  .  |  received data:
[10:53:26.463] |  :  .  |  :  .  |  List of 5
[10:53:26.463] |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:53:26.463] |  :  .  |  :  .  |   $ value  :List of 13
[10:53:26.463] |  :  .  |  :  .  |    ..$ value            :List of 2
[10:53:26.463] |  :  .  |  :  .  |    .. ..$ b: num 2
[10:53:26.463] |  :  .  |  :  .  |    .. ..$ a: num 1
[10:53:26.463] |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:53:26.463] |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:53:26.463] |  :  .  |  :  .  |    ..$ conditions       : list()
[10:53:26.463] |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:53:26.463] |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:53:26.463] |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:53:26.463] |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:53:26.463] |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:53:26.463] |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:53:26.463] |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:53:26.463] |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.463] |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.463] |  :  .  |  :  .  |    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:26.463] |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:53:26.463] |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:26.463] |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:26.463] |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:26.463] |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:26.463] |  :  .  |  :  .  |    .. .. ..$ pid   : int 71399
[10:53:26.463] |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:26.463] |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:53:26.463] |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:53:26.463] |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:26.463] |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:53:26.463] |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:53:26.463] |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:53:26.463] |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:53:26.463] |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:53:26.463] |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:53:26.463] |  :  .  |  :  .  |   $ success: logi TRUE
[10:53:26.463] |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.002 0 0.002 0 0
[10:53:26.463] |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:26.463] |  :  .  |  :  .  |   $ tag    : NULL
[10:53:26.474] |  :  .  |  :  .  |  Received FutureResult
[10:53:26.475] |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:26.475] |  :  .  |  :  .  |  :  Removed future from position #1
[10:53:26.475] |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:26.475] |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:26.475] |  :  .  |  :  .  |  Erased future from future backend
[10:53:26.475] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:53:26.475] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:53:26.475] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:53:26.475] |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:26.475] |  :  .  |  :  result() for ClusterFuture ... done
[10:53:26.476] |  :  .  |  :  result() for ClusterFuture ...
[10:53:26.476] |  :  .  |  :  .  result already collected: FutureResult
[10:53:26.476] |  :  .  |  :  result() for ClusterFuture ... done
$b
[1] 2

$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:26.476] |  :  .  |  :  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:26.476] |  :  .  |  :  .  Searching for globals ...
[10:53:26.478] |  :  .  |  :  .  |  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:26.478] |  :  .  |  :  .  Searching for globals ... DONE
[10:53:26.479] |  :  .  |  :  .  Resolving globals: TRUE
[10:53:26.479] |  :  .  |  :  .  Resolving any globals that are futures ...
[10:53:26.479] |  :  .  |  :  .  |  globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:26.479] |  :  .  |  :  .  Resolving any globals that are futures ... DONE
[10:53:26.479] |  :  .  |  :  .  Search for packages associated with the globals ...
[10:53:26.479] |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:53:26.479] |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:53:26.480] |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:53:26.480] |  :  .  |  :  .  Resolving futures part of globals (recursively) ...
[10:53:26.480] |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:26.480] |  :  .  |  :  .  |  :  recursive: 99
[10:53:26.480] |  :  .  |  :  .  |  :  length: 1
[10:53:26.480] |  :  .  |  :  .  |  :  elements: ‘x’
[10:53:26.480] |  :  .  |  :  .  |  :  'obj' is list
[10:53:26.480] |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:53:26.480] |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:53:26.481] |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:53:26.481] |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:26.481] |  :  .  |  :  .  |  globals: [1] ‘x’
[10:53:26.481] |  :  .  |  :  .  Resolving futures part of globals (recursively) ... DONE
[10:53:26.481] |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:53:26.481] |  :  .  |  :  .  globals: [1] ‘x’
[10:53:26.481] |  :  .  |  :  .  packages: [0] 
[10:53:26.481] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:53:26.482] |  :  .  |  :  run() for Future (‘Future’) ...
[10:53:26.482] |  :  .  |  :  .  state: ‘created’
[10:53:26.482] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.482] |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.482] |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:53:26.482] |  :  .  |  :  .  |  Launching futures ...
[10:53:26.482] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:53:26.482] |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:53:26.482] |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:26.484] |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:26.484] |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:53:26.484] |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:53:26.484] |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:53:26.484] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:53:26.484] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:53:26.485] |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:53:26.563] |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:53:26.563] |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:53:26.564] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:26.564] |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:53:26.564] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:53:26.564] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:53:26.564] |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:53:26.564] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:26.565] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:53:26.565] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:53:26.565] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:53:26.565] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:53:26.565] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:53:26.565] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:53:26.565] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:53:26.565] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.565] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:53:26.565] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.566] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:53:26.566] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:53:26.566] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:53:26.566] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:26.566] |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:53:26.566] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:53:26.566] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:26.567] |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:53:26.567] |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:53:26.567] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:53:26.567] |  :  .  |  :  .  |  :  Launching futures ... done
[10:53:26.567] |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:26.567] |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:53:26.567] |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:53:26.567] |  :  .  |  :  .  result() for ClusterFuture ...
[10:53:26.567] |  :  .  |  :  .  |  assertValidConnection() ...
[10:53:26.567] |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:26.568] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:53:26.568] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:53:26.568] |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:26.610] |  :  .  |  :  .  |  :  [1] TRUE
[10:53:26.610] |  :  .  |  :  .  |  :  received data:
[10:53:26.611] |  :  .  |  :  .  |  :  List of 5
[10:53:26.611] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:53:26.611] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:53:26.611] |  :  .  |  :  .  |  :    .. ..$ a: num 1
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:53:26.611] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:53:26.611] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:53:26.611] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:26.611] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:53:26.611] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:26.611] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:26.611] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:26.611] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:26.611] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 71399
[10:53:26.611] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:26.611] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:53:26.611] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:26.611] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:53:26.611] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:53:26.611] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:53:26.611] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:53:26.611] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:53:26.611] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:53:26.611] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:53:26.611] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.002 0 0
[10:53:26.611] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:26.611] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:53:26.621] |  :  .  |  :  .  |  :  Received FutureResult
[10:53:26.621] |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:26.621] |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:53:26.621] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:26.621] |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:26.622] |  :  .  |  :  .  |  :  Erased future from future backend
[10:53:26.622] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:53:26.622] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:53:26.622] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:53:26.622] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:26.622] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:53:26.622] |  :  .  |  :  .  result() for ClusterFuture ...
[10:53:26.622] |  :  .  |  :  .  |  result already collected: FutureResult
[10:53:26.622] |  :  .  |  :  .  result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:26.623] |  :  .  |  :  .  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:26.623] |  :  .  |  :  .  |  Searching for globals ...
[10:53:26.625] |  :  .  |  :  .  |  :  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:26.625] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:53:26.625] |  :  .  |  :  .  |  Resolving globals: TRUE
[10:53:26.625] |  :  .  |  :  .  |  Resolving any globals that are futures ...
[10:53:26.625] |  :  .  |  :  .  |  :  globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:26.625] |  :  .  |  :  .  |  Resolving any globals that are futures ... DONE
[10:53:26.625] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:53:26.626] |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:53:26.626] |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:53:26.626] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:53:26.626] |  :  .  |  :  .  |  Resolving futures part of globals (recursively) ...
[10:53:26.626] |  :  .  |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:26.627] |  :  .  |  :  .  |  :  .  recursive: 99
[10:53:26.627] |  :  .  |  :  .  |  :  .  length: 1
[10:53:26.627] |  :  .  |  :  .  |  :  .  elements: ‘x’
[10:53:26.627] |  :  .  |  :  .  |  :  .  'obj' is list
[10:53:26.627] |  :  .  |  :  .  |  :  .  resolve(obj, ...) ...
[10:53:26.627] |  :  .  |  :  .  |  :  .  resolve(obj, ...) ... done
[10:53:26.627] |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:53:26.627] |  :  .  |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:26.627] |  :  .  |  :  .  |  :  globals: [1] ‘x’
[10:53:26.628] |  :  .  |  :  .  |  Resolving futures part of globals (recursively) ... DONE
[10:53:26.628] |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:53:26.628] |  :  .  |  :  .  |  globals: [1] ‘x’
[10:53:26.628] |  :  .  |  :  .  |  packages: [0] 
[10:53:26.628] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:53:26.628] |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:53:26.628] |  :  .  |  :  .  |  state: ‘created’
[10:53:26.628] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.629] |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.629] |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:53:26.629] |  :  .  |  :  .  |  :  Launching futures ...
[10:53:26.629] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:53:26.629] |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:53:26.629] |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:26.631] |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:26.631] |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:53:26.631] |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:53:26.631] |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:53:26.631] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:53:26.631] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:53:26.631] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:26.631] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.632] |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:53:26.632] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:53:26.632] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.632] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:53:26.632] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:26.632] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.632] |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:53:26.632] |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:53:26.710] |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:53:26.710] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:53:26.710] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:53:26.711] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:53:26.711] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:53:26.711] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:53:26.711] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:53:26.711] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:53:26.712] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:53:26.712] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:53:26.712] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:53:26.712] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:53:26.712] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:53:26.712] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:53:26.712] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:53:26.712] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.712] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:53:26.713] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.713] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:53:26.715] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:53:26.715] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:53:26.715] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:26.715] |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:53:26.715] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:53:26.715] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:26.715] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:53:26.715] |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:53:26.716] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:53:26.716] |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:53:26.716] |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:26.716] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:53:26.716] |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:53:26.716] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:53:26.716] |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:53:26.716] |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:53:26.717] |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:53:26.717] |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:53:26.717] |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:53:26.759] |  :  .  |  :  .  |  :  .  [1] TRUE
[10:53:26.760] |  :  .  |  :  .  |  :  .  received data:
[10:53:26.760] |  :  .  |  :  .  |  :  .  List of 5
[10:53:26.760] |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:53:26.760] |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. ..$ a: num 1
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 71399
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:53:26.760] |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:53:26.760] |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:53:26.760] |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:53:26.760] |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:26.760] |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:53:26.770] |  :  .  |  :  .  |  :  .  Received FutureResult
[10:53:26.770] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:26.770] |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:53:26.770] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:26.771] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:26.771] |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:53:26.771] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:53:26.771] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:53:26.771] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:53:26.771] |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:26.771] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:53:26.771] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:53:26.771] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:53:26.771] |  :  .  |  :  .  |  result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:26.772] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:26.772] |  :  .  |  :  .  |  :  Searching for globals ...
[10:53:26.774] |  :  .  |  :  .  |  :  .  globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:26.774] |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:53:26.774] |  :  .  |  :  .  |  :  Resolving globals: TRUE
[10:53:26.775] |  :  .  |  :  .  |  :  Resolving any globals that are futures ...
[10:53:26.775] |  :  .  |  :  .  |  :  .  globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[10:53:26.775] |  :  .  |  :  .  |  :  Resolving any globals that are futures ... DONE
[10:53:26.775] |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:53:26.775] |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:53:26.775] |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:53:26.776] |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:53:26.776] |  :  .  |  :  .  |  :  Resolving futures part of globals (recursively) ...
[10:53:26.776] |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:26.776] |  :  .  |  :  .  |  :  .  |  recursive: 99
[10:53:26.776] |  :  .  |  :  .  |  :  .  |  length: 1
[10:53:26.776] |  :  .  |  :  .  |  :  .  |  elements: ‘x’
[10:53:26.776] |  :  .  |  :  .  |  :  .  |  'obj' is list
[10:53:26.776] |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:53:26.776] |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:53:26.777] |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:53:26.777] |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:26.777] |  :  .  |  :  .  |  :  .  globals: [1] ‘x’
[10:53:26.777] |  :  .  |  :  .  |  :  Resolving futures part of globals (recursively) ... DONE
[10:53:26.777] |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:53:26.777] |  :  .  |  :  .  |  :  globals: [1] ‘x’
[10:53:26.777] |  :  .  |  :  .  |  :  packages: [0] 
[10:53:26.777] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:53:26.778] |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:53:26.778] |  :  .  |  :  .  |  :  state: ‘created’
[10:53:26.778] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.778] |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.778] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:53:26.778] |  :  .  |  :  .  |  :  .  Launching futures ...
[10:53:26.778] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:53:26.778] |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:53:26.778] |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:26.780] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:26.780] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:53:26.780] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:53:26.780] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:53:26.780] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.781] |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:53:26.782] |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:53:26.859] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:53:26.860] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:53:26.860] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:53:26.860] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:53:26.860] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:53:26.860] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:53:26.861] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:53:26.861] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:53:26.861] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:53:26.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:53:26.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:26.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:53:26.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:53:26.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:53:26.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:53:26.861] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:26.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:26.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:53:26.862] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:53:26.862] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:26.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:53:26.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:53:26.863] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:26.863] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:53:26.863] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:53:26.863] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:53:26.863] |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:53:26.863] |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:26.863] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:53:26.863] |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:53:26.864] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:53:26.864] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:53:26.864] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:53:26.864] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:53:26.864] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:53:26.864] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:53:26.909] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:53:26.909] |  :  .  |  :  .  |  :  .  |  received data:
[10:53:26.909] |  :  .  |  :  .  |  :  .  |  List of 5
[10:53:26.909] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. ..$ a: num 1
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:26"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 71399
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:53:26.909] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:53:26.909] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:53:26.909] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:26.909] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:53:26.920] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:53:26.920] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:26.920] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:53:26.920] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:26.920] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:26.920] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:53:26.920] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:53:26.920] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:53:26.921] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:53:26.921] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:26.921] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:53:26.921] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:53:26.921] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:53:26.921] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:26.921] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:26.922] |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:53:26.924] |  :  .  |  :  .  |  :  .  |  globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:26.924] |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:53:26.924] |  :  .  |  :  .  |  :  .  Resolving globals: TRUE
[10:53:26.924] |  :  .  |  :  .  |  :  .  Resolving any globals that are futures ...
[10:53:26.924] |  :  .  |  :  .  |  :  .  |  globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:26.924] |  :  .  |  :  .  |  :  .  Resolving any globals that are futures ... DONE
[10:53:26.924] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:53:26.925] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:53:26.925] |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:53:26.925] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:53:26.925] |  :  .  |  :  .  |  :  .  Resolving futures part of globals (recursively) ...
[10:53:26.926] |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:26.926] |  :  .  |  :  .  |  :  .  |  :  recursive: 99
[10:53:26.926] |  :  .  |  :  .  |  :  .  |  :  length: 1
[10:53:26.926] |  :  .  |  :  .  |  :  .  |  :  elements: ‘x’
[10:53:26.926] |  :  .  |  :  .  |  :  .  |  :  'obj' is list
[10:53:26.926] |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:53:26.926] |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:53:26.926] |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:53:26.926] |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:26.926] |  :  .  |  :  .  |  :  .  |  globals: [1] ‘x’
[10:53:26.927] |  :  .  |  :  .  |  :  .  Resolving futures part of globals (recursively) ... DONE
[10:53:26.927] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:53:26.927] |  :  .  |  :  .  |  :  .  globals: [1] ‘x’
[10:53:26.927] |  :  .  |  :  .  |  :  .  packages: [0] 
[10:53:26.927] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:53:26.927] |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:53:26.927] |  :  .  |  :  .  |  :  .  state: ‘created’
[10:53:26.927] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:26.927] |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:26.928] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:53:26.928] |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:53:26.928] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:53:26.928] |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:53:26.928] |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:26.930] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:26.930] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:53:26.930] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:53:26.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:53:26.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:53:26.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:53:26.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:26.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.930] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:53:26.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:53:26.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:26.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:53:26.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:26.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:26.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:53:26.931] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:53:27.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:53:27.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:53:27.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:27.012] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:53:27.012] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:53:27.012] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:53:27.012] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:53:27.012] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:27.012] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:53:27.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:53:27.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:53:27.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:53:27.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:53:27.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:53:27.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:53:27.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:27.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:53:27.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:27.014] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:53:27.014] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:53:27.014] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:53:27.014] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:27.014] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:53:27.014] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:53:27.014] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:27.015] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:53:27.015] |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:53:27.015] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:53:27.015] |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:53:27.015] |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:27.015] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:53:27.015] |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:53:27.015] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:53:27.015] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:53:27.016] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:27.016] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:53:27.016] |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:53:27.016] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:27.058] |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :  received data:
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. ..$ a: num 1
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:27"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:27"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 71399
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.004 0 0
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:27.059] |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:53:27.071] |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:53:27.071] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:27.071] |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:53:27.071] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:27.071] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:27.072] |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:53:27.072] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:53:27.072] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:53:27.072] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:53:27.072] |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:27.072] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:53:27.072] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:53:27.072] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:53:27.072] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:27.073] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:27.073] |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:53:27.075] |  :  .  |  :  .  |  :  .  |  :  globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:27.075] |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:53:27.075] |  :  .  |  :  .  |  :  .  |  Resolving globals: TRUE
[10:53:27.075] |  :  .  |  :  .  |  :  .  |  Resolving any globals that are futures ...
[10:53:27.075] |  :  .  |  :  .  |  :  .  |  :  globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:27.076] |  :  .  |  :  .  |  :  .  |  Resolving any globals that are futures ... DONE
[10:53:27.076] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:53:27.076] |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:53:27.076] |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:53:27.076] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:53:27.076] |  :  .  |  :  .  |  :  .  |  Resolving futures part of globals (recursively) ...
[10:53:27.077] |  :  .  |  :  .  |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:27.077] |  :  .  |  :  .  |  :  .  |  :  .  recursive: 99
[10:53:27.077] |  :  .  |  :  .  |  :  .  |  :  .  length: 1
[10:53:27.077] |  :  .  |  :  .  |  :  .  |  :  .  elements: ‘x’
[10:53:27.077] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is list
[10:53:27.077] |  :  .  |  :  .  |  :  .  |  :  .  resolve(obj, ...) ...
[10:53:27.077] |  :  .  |  :  .  |  :  .  |  :  .  resolve(obj, ...) ... done
[10:53:27.077] |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:53:27.077] |  :  .  |  :  .  |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:27.078] |  :  .  |  :  .  |  :  .  |  :  globals: [1] ‘x’
[10:53:27.078] |  :  .  |  :  .  |  :  .  |  Resolving futures part of globals (recursively) ... DONE
[10:53:27.078] |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:53:27.078] |  :  .  |  :  .  |  :  .  |  globals: [1] ‘x’
[10:53:27.078] |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:53:27.078] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:53:27.078] |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:53:27.078] |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:53:27.079] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:27.079] |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:27.079] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:53:27.079] |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:53:27.079] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:53:27.079] |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:53:27.079] |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:27.081] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:27.081] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:53:27.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:53:27.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:53:27.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:53:27.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:27.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:53:27.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:27.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:27.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:53:27.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:53:27.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:27.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:53:27.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:27.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:27.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:53:27.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:53:27.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:53:27.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:53:27.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:53:27.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:53:27.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:53:27.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:53:27.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:53:27.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:53:27.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:53:27.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:53:27.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:53:27.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:53:27.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:53:27.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:53:27.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:53:27.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:27.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:53:27.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:27.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:53:27.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:53:27.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:53:27.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:27.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:53:27.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:53:27.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:27.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:53:27.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:53:27.173] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:53:27.173] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:53:27.173] |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:27.173] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:53:27.173] |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:53:27.173] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:53:27.174] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:53:27.174] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:53:27.174] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:53:27.174] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:53:27.174] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ a: num 1
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:27"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:27"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 71399
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:27.218] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:53:27.229] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:53:27.229] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:27.229] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:53:27.229] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:27.229] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:27.229] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:53:27.229] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:53:27.229] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:53:27.229] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:53:27.230] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:27.230] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:53:27.230] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:53:27.230] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:53:27.230] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:27.230] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:27.231] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:53:27.233] |  :  .  |  :  .  |  :  .  |  :  .  globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:27.233] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:53:27.233] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: TRUE
[10:53:27.233] |  :  .  |  :  .  |  :  .  |  :  Resolving any globals that are futures ...
[10:53:27.233] |  :  .  |  :  .  |  :  .  |  :  .  globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[10:53:27.233] |  :  .  |  :  .  |  :  .  |  :  Resolving any globals that are futures ... DONE
[10:53:27.234] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:53:27.234] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:53:27.234] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:53:27.234] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:53:27.234] |  :  .  |  :  .  |  :  .  |  :  Resolving futures part of globals (recursively) ...
[10:53:27.235] |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:27.235] |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 99
[10:53:27.235] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1
[10:53:27.235] |  :  .  |  :  .  |  :  .  |  :  .  |  elements: ‘x’
[10:53:27.235] |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is list
[10:53:27.235] |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:53:27.235] |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:53:27.235] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:53:27.235] |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:27.235] |  :  .  |  :  .  |  :  .  |  :  .  globals: [1] ‘x’
[10:53:27.236] |  :  .  |  :  .  |  :  .  |  :  Resolving futures part of globals (recursively) ... DONE
[10:53:27.236] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:53:27.236] |  :  .  |  :  .  |  :  .  |  :  globals: [1] ‘x’
[10:53:27.236] |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:53:27.236] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:53:27.236] |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:53:27.236] |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:53:27.236] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:27.237] |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:27.237] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:53:27.237] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:53:27.237] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:53:27.237] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:53:27.237] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:27.239] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:27.239] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:53:27.239] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:53:27.239] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:53:27.239] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:53:27.239] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:27.239] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:53:27.239] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:27.239] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:27.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:53:27.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:53:27.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:27.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:53:27.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:27.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:27.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:53:27.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:53:27.318] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:53:27.318] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:53:27.319] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:53:27.319] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:53:27.319] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:53:27.319] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:53:27.319] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:53:27.319] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:53:27.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:53:27.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:53:27.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:27.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:53:27.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:53:27.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:53:27.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:53:27.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:27.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:27.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:27.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:27.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:53:27.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:53:27.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:27.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:53:27.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:53:27.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:27.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:53:27.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:53:27.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:53:27.322] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:53:27.322] |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:27.322] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:53:27.322] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:53:27.322] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:53:27.322] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:53:27.323] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:53:27.323] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:53:27.323] |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:53:27.323] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:53:27.365] |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ a: num 1
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:27"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:27"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 71399
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:27.366] |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:53:27.376] |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:53:27.376] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:27.376] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:53:27.376] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:53:27.377] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:27.377] |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:53:27.377] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:53:27.377] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:53:27.377] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:53:27.377] |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:27.377] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:53:27.377] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:53:27.377] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:53:27.377] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:53:27.378] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:53:27.378] |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:53:27.382] |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[10:53:27.382] |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:53:27.382] |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: TRUE
[10:53:27.382] |  :  .  |  :  .  |  :  .  |  :  .  Resolving any globals that are futures ...
[10:53:27.383] |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[10:53:27.383] |  :  .  |  :  .  |  :  .  |  :  .  Resolving any globals that are futures ... DONE
[10:53:27.383] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:53:27.383] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:53:27.383] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:53:27.383] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:53:27.383] |  :  .  |  :  .  |  :  .  |  :  .  Resolving futures part of globals (recursively) ...
[10:53:27.384] |  :  .  |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:53:27.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  recursive: 99
[10:53:27.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 2
[10:53:27.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  elements: ‘x’, ‘name’
[10:53:27.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is list
[10:53:27.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:53:27.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:53:27.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:53:27.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is atomic
[10:53:27.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:53:27.385] |  :  .  |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:53:27.385] |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [2] ‘x’, ‘name’
[10:53:27.385] |  :  .  |  :  .  |  :  .  |  :  .  Resolving futures part of globals (recursively) ... DONE
[10:53:27.385] |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:53:27.385] |  :  .  |  :  .  |  :  .  |  :  .  globals: [2] ‘x’, ‘name’
[10:53:27.385] |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] 
[10:53:27.385] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:53:27.386] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:53:27.386] |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:53:27.386] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:27.386] |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:27.386] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:53:27.386] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:53:27.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:53:27.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:53:27.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:27.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-eca95cd3ded2cc371784101c661aa4b4’
[10:53:27.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:53:27.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:53:27.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:53:27.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:53:27.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:27.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:53:27.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:53:27.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:27.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:53:27.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:53:27.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ...
[10:53:27.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:53:27.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:27.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'list', earlySignal = 0) ... done
[10:53:27.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:53:27.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:53:27.468] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:53:27.468] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:53:27.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:27.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:53:27.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:53:27.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:53:27.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:53:27.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:27.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:53:27.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:53:27.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:53:27.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:53:27.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:53:27.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:53:27.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:53:27.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:27.470] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:53:27.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:27.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:53:27.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:53:27.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:53:27.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ...
[10:53:27.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:53:27.471] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:53:27.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'add', earlySignal = 0) ... done
[10:53:27.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:53:27.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:53:27.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:53:27.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:53:27.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:27.472] |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:53:27.472] |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:53:27.472] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:53:27.473] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:53:27.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:27.473] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:53:27.473] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:53:27.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:53:27.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ a: num 1
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:53:27"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:53:27"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "6d0b06043a105fa3efab364678617e2b"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 71399
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:53:25"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:53:27.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:53:27.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:53:27.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ...
[10:53:27.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:53:27.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:53:27.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-eca95cd3ded2cc371784101c661aa4b4', action = 'remove', earlySignal = 0) ... done
[10:53:27.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:53:27.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:53:27.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:53:27.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:53:27.527] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:53:27.527] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:53:27.527] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:53:27.528] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:53:27.528] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
$a
[1] 1

Testing with 2 cores ... DONE

> message("*** Globals - subassignments w/ x$a <- value ... DONE")
*** Globals - subassignments w/ x$a <- value ... DONE

> message("*** Globals - subassignments ... DONE")
*** Globals - subassignments ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=2s, sys.self=0.1s, elapsed=4s, user.child=0.7s, sys.child=0.6s
Test ‘globals,subassignment’ ... success
> 
