
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-globals,tricky.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("globals,tricky")
Test ‘globals,tricky’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-globals,tricky.R’

> library(future)
[08:09:02.593] Option 'future.startup.script': TRUE
[08:09:02.593] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:09:02.594] Future startup scripts found: <none>

> library(listenv)

> oopts <- c(oopts, options(future.debug = FALSE, future.globals.resolve = TRUE, 
+     future.globals.onMissing = "error"))

> if (getRversion() >= "4.0.0") {
+     globalCallingHandlers(deprecatedWarning = function(w) {
+         invokeRestart("muffleWarning")
+     })
+ }

> message("*** Tricky use cases related to globals ...")
*** Tricky use cases related to globals ...

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     message("availableCor ..." ... [TRUNCATED] 
Testing with 1 cores ...
availableCores(): 1
- Local variables with the same name as globals ...
- plan('sequential') ...
Method for identifying globals: 'conservative' ...
y = 6
List of 1
 $ res: 'try-error' chr "Error in eval(quote({ : object 'a' not found\n"
  ..- attr(*, "condition")=List of 2
  .. ..$ message: chr "object 'a' not found"
  .. ..$ call   : language eval(quote({     { ...
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
[1] 1 2 3
List of 1
 $ res: 'try-error' chr "Error in eval(quote({ : object 'a' not found\n"
  ..- attr(*, "condition")=List of 2
  .. ..$ message: chr "object 'a' not found"
  .. ..$ call   : language eval(quote({     { ...
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
value(b) = 2
value(b) = 2
value(b) = 2
value(b) = 2
value(f) = ‘foo’
Method for identifying globals: 'conservative' ... DONE
Method for identifying globals: 'ordered' ...
y = 6
y = 6
[1] 1 2 3
[1] 1 2 3
value(b) = 2
value(b) = 2
value(b) = 2
value(b) = 2
value(f) = ‘foo’
Method for identifying globals: 'ordered' ... DONE
value(f) = ‘1’
value(f) = ‘2’
value(f) = ‘TRUE’
Testing with 1 cores ... DONE
Testing with 2 cores ...
availableCores(): 2
- Local variables with the same name as globals ...
- plan('multicore') ...
Method for identifying globals: 'conservative' ...
y = 6
List of 1
 $ res: 'try-error' chr "Error in eval(quote({ : object 'a' not found\n"
  ..- attr(*, "condition")=List of 2
  .. ..$ message: chr "object 'a' not found"
  .. ..$ call   : language eval(quote({     { ...
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
[1] 1 2 3
List of 1
 $ res: 'try-error' chr "Error in eval(quote({ : object 'a' not found\n"
  ..- attr(*, "condition")=List of 2
  .. ..$ message: chr "object 'a' not found"
  .. ..$ call   : language eval(quote({     { ...
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
value(b) = 2
value(b) = 2
value(b) = 2
value(b) = 2
value(f) = ‘foo’
Method for identifying globals: 'conservative' ... DONE
Method for identifying globals: 'ordered' ...
y = 6
y = 6
[1] 1 2 3
[1] 1 2 3
value(b) = 2
value(b) = 2
value(b) = 2
value(b) = 2
value(f) = ‘foo’
Method for identifying globals: 'ordered' ... DONE
value(f) = ‘1’
value(f) = ‘2’
value(f) = ‘TRUE’
- plan('multisession') ...
Method for identifying globals: 'conservative' ...
List of 1
 $ res: 'try-error' chr "Error in eval(quote({ : object 'a' not found\n"
  ..- attr(*, "condition")=List of 2
  .. ..$ message: chr "object 'a' not found"
  .. ..$ call   : language eval(quote({     { ...
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
List of 1
 $ res: 'try-error' chr "Error in eval(quote({ : object 'a' not found\n"
  ..- attr(*, "condition")=List of 2
  .. ..$ message: chr "object 'a' not found"
  .. ..$ call   : language eval(quote({     { ...
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
List of 1
 $ res: 'try-error' chr "Error in eval(quote({ : object 'a' not found\n"
  ..- attr(*, "condition")=List of 2
  .. ..$ message: chr "object 'a' not found"
  .. ..$ call   : language eval(quote({     { ...
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
List of 1
 $ res: 'try-error' chr "Error in eval(quote({ : object 'a' not found\n"
  ..- attr(*, "condition")=List of 2
  .. ..$ message: chr "object 'a' not found"
  .. ..$ call   : language eval(quote({     { ...
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
value(b) = 2
value(b) = 2
value(b) = 2
value(b) = 2
value(f) = ‘foo’
Method for identifying globals: 'conservative' ... DONE
Method for identifying globals: 'ordered' ...
y = 6
y = 6
[1] 1 2 3
[1] 1 2 3
value(b) = 2
value(b) = 2
value(b) = 2
value(b) = 2
value(f) = ‘foo’
Method for identifying globals: 'ordered' ... DONE
value(f) = ‘1’
value(f) = ‘2’
value(f) = ‘TRUE’
Testing with 2 cores ... DONE

> message("*** Tricky use cases related to globals ... DONE")
*** Tricky use cases related to globals ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=3s, sys.self=0.3s, elapsed=6s, user.child=0.3s, sys.child=0.6s
Test ‘globals,tricky’ ... success
> 
