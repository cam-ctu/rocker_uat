
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-demo-fibonacci.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("demo-fibonacci")
Test ‘demo-fibonacci’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-demo-fibonacci.R’

> library(future)
[10:52:30.211] Option 'future.startup.script': TRUE
[10:52:30.212] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:52:30.212] Future startup scripts found: <none>

> plan(sequential)
[10:52:30.212] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:30.213] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:52:30.213] |  :  all.equal() for FutureStrategyList ...
[10:52:30.213] |  :  .  New stack:
[10:52:30.213] |  :  .  List of 1
[10:52:30.213] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:30.213] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:30.213] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:30.213] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.213] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.213] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:30.213] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:30.217] |  :  .  Old stack:
[10:52:30.217] |  :  .  List of 1
[10:52:30.217] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:30.217] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:30.217] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:30.217] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.217] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.217] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:30.217] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:30.219] |  :  .  Identical
[10:52:30.219] |  :  all.equal() for FutureStrategyList ... done
[10:52:30.219] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:30.219] |  :  List of future strategies:
[10:52:30.219] |  :  1. sequential:
[10:52:30.219] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:30.219] |  :     - tweaked: FALSE
[10:52:30.219] |  :     - call: plan(sequential)
[10:52:30.220] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:52:30.220] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done

> options(future.debug = FALSE)

> message("*** Fibonacci demo of the 'future' package ...")
*** Fibonacci demo of the 'future' package ...

> oopts <- options(future.plan = NULL)

> demo("fibonacci", package = "future", ask = FALSE)


	demo(fibonacci)
	---- ~~~~~~~~~

> library(future)

> library(listenv)

> ## IMPORTANT:
> ## 1. The below usage of lazy futures will only work when they are
> ##    all evaluated in the same process.
> ## 2. We disable the capturing of standard output (stdout=NA) to avoid
> ##    'sink stack is full' errors
> ## 3. We disable the capturing of most conditions (condition="error") to
> ##    avoid stacking up too many conditions
> oplan <- plan(sequential)

> ## Defines the first 100 Fibonacci numbers
> ## (0, 1, 1, 2, 3, 5, 8, ...)
> ## but calculate only the ones need when
> ## a number is actually requested.
> 
> x <- listenv()

> x[[1]] <- 0

> x[[2]] <- 1

> for (i in 3:100) {
+   x[[i]] %<-% { x[[i - 2]] + x[[i - 1]] } %lazy% TRUE %stdout% NA %conditions% "error"
+ }

> ## At this point nothing has been calculated,
> ## because lazy evaluation is in place.
> 
> ## Get the 7:th Fibonnaci numbers (should be 8)
> print(x[[7]])
[1] 8

> ## At this point x[1:7] have been calculated,
> ## but nothing beyond.
> 
> ## Let's get the 50:th number.
> print(x[[50]])
[1] 7778742049

> ## Reset plan
> plan(oplan)

> options(oopts)

> message("*** Fibonacci demo of the 'future' package ... DONE")
*** Fibonacci demo of the 'future' package ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.4s, sys.self=0.008s, elapsed=0.4s, user.child=0.001s, sys.child=0.006s
Test ‘demo-fibonacci’ ... success
> 
