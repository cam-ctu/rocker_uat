
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-globals,S4methods.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("globals,S4methods")
Test ‘globals,S4methods’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-globals,S4methods.R’

> library(future)
[08:08:53.283] Option 'future.startup.script': TRUE
[08:08:53.284] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:53.284] Future startup scripts found: <none>

> library(methods)

> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...

> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"

> setMethod("my_fcn", signature(x = "numeric"), function(x) {
+     -x
+ })

> org_my_fcn <- my_fcn

> truth <- my_fcn(3)

> for (strategy in supportedStrategies()) {
+     message("Type of future: ", strategy)
+     plan(strategy)
+     f <- future({
+         my_fcn
+    .... [TRUNCATED] 
Type of future: sequential
[08:08:53.303] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.304] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:53.304] | : all.equal() for FutureStrategyList ...
[08:08:53.304] | : . New stack:
[08:08:53.304] | : . List of 1
[08:08:53.304] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.304] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.304] | : .   ..- attr(*, "init")= logi TRUE
[08:08:53.304] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.304] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.304] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.304] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:53.304] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.308] | : . Old stack:
[08:08:53.308] | : . List of 1
[08:08:53.308] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.308] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.308] | : .   ..- attr(*, "init")= logi TRUE
[08:08:53.308] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.308] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.308] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.308] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:53.308] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.311] | : . Not identical
[08:08:53.311] | : . all.equal() for future ...
[08:08:53.311] | : . ' List of 2
[08:08:53.311] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.311] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.311] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:53.311] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.311] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.311] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.311] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:53.311] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.311] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.311] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:53.311] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.311] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.311] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.311] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:53.315] | : . all.equal() for future ... done
[08:08:53.316] | : all.equal() for FutureStrategyList ... done
[08:08:53.316] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:53.316] | : List of future strategies:
[08:08:53.316] | : 1. sequential:
[08:08:53.316] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:53.316] | :    - tweaked: FALSE
[08:08:53.316] | :    - call: plan(sequential)
[08:08:53.316] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:53.316] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.317] future(..., label = NULL) ...
[08:08:53.317] | lazy: TRUE
[08:08:53.317] | stdout: TRUE
[08:08:53.317] | conditions: [n=1] ‘condition’
[08:08:53.317] | gc: FALSE
[08:08:53.317] | earlySignal: FALSE
[08:08:53.318] | getGlobalsAndPackages() ...
[08:08:53.318] | : Searching for globals ...
[08:08:53.336] | : . globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:53.336] | : Searching for globals ... done
[08:08:53.336] | : Resolving globals: FALSE
[08:08:53.336] | : Search for packages associated with the globals ...
[08:08:53.337] | : . Packages associated with globals: [1] ‘base’
[08:08:53.337] | : . Packages: [1] ‘base’
[08:08:53.337] | : Search for packages associated with the globals ... done
[08:08:53.337] | : Packages after dropping 'base': [0] 
[08:08:53.338] | : globals: [1] ‘my_fcn’
[08:08:53.338] | : packages: [0] 
[08:08:53.338] | getGlobalsAndPackages() ... done
[08:08:53.338] future(..., label = NULL) ... done
[08:08:53.339] value() for Future (<unnamed-1>) ...
[08:08:53.339] | run() for ‘Future’ (<unnamed-1>) ...
[08:08:53.339] | : state: ‘created’
[08:08:53.339] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.339] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:53.339] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.339] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.339] | : . '  - attr(*, "init")= logi TRUE
[08:08:53.339] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.339] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.339] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.339] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:53.343] | : . ' init: TRUE
[08:08:53.343] | : . ' makeFutureBackend(<sequential>) ...
[08:08:53.343] | : . ' , Backend function: <‘NULL’>
[08:08:53.343] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:53.343] | : . ' ,  list()
[08:08:53.344] | : . ' , Evaluator formal arguments: [n=2]
[08:08:53.344] | : . ' ,  list()
[08:08:53.344] | : . ' , Backend factory arguments: [n=2]
[08:08:53.344] | : . ' , Dotted pair list of 2
[08:08:53.344] | : . ' ,  $ gc         : logi FALSE
[08:08:53.344] | : . ' ,  $ earlySignal: logi FALSE
[08:08:53.345] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:53.345] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:53.345] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:53.346] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.346] | : Using SequentialFutureBackend ...
[08:08:53.346] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:53.346] | : . Launching futures ...
[08:08:53.346] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:53.346] | : . ' , getFutureData() ...
[08:08:53.346] | : . ' , ; getFutureCore() ...
[08:08:53.347] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:53.347] | : . ' , ; getFutureCore() ... done
[08:08:53.347] | : . ' , ; getFutureCapture() ...
[08:08:53.347] | : . ' , ; getFutureCapture() ... done
[08:08:53.347] | : . ' , ; getFutureContext() ...
[08:08:53.347] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.347] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:53.347] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.348] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:53.348] | : . ' , ; getFutureContext() ... done
[08:08:53.348] | : . ' , getFutureData() ... done
[08:08:53.350] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.350] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:53.351] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.351] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.351] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:53.351] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:53.351] | : . ' , ; ` | New stack:
[08:08:53.351] | : . ' , ; ` | List of 1
[08:08:53.351] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.351] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.351] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:53.351] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.351] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.351] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.351] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.351] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.354] | : . ' , ; ` | Old stack:
[08:08:53.354] | : . ' , ; ` | List of 1
[08:08:53.354] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.354] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.354] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:53.354] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.354] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.354] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.354] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:53.354] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.354] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.354] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.354] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.357] | : . ' , ; ` | Not identical
[08:08:53.357] | : . ' , ; ` | all.equal() for future ...
[08:08:53.357] | : . ' , ; ` | : List of 2
[08:08:53.357] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.357] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.357] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.357] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:53.357] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.357] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.357] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.363] | : . ' , ; ` | all.equal() for future ... done
[08:08:53.363] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:53.363] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:53.364] | : . ' , ; ` List of future strategies:
[08:08:53.364] | : . ' , ; ` 1. sequential:
[08:08:53.364] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:53.364] | : . ' , ; `    - tweaked: FALSE
[08:08:53.364] | : . ' , ; `    - call: plan(sequential)
[08:08:53.364] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:53.364] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.364] | : . ' , assign_globals() ...
[08:08:53.364] | : . ' , List of 1
[08:08:53.364] | : . ' ,  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:08:53.364] | : . ' ,   .. ..@ .Data     :function (x)  
[08:08:53.364] | : . ' ,   .. ..@ generic   : chr "my_fcn"
[08:08:53.364] | : . ' ,   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:08:53.364] | : . ' ,   .. ..@ package   : chr ".GlobalEnv"
[08:08:53.364] | : . ' ,   .. ..@ group     : list()
[08:08:53.364] | : . ' ,   .. ..@ valueClass: chr(0) 
[08:08:53.364] | : . ' ,   .. ..@ signature : chr "x"
[08:08:53.364] | : . ' ,   .. ..@ default   : NULL
[08:08:53.364] | : . ' ,   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:08:53.364] | : . ' ,  - attr(*, "where")=List of 1
[08:08:53.364] | : . ' ,   ..$ my_fcn:<environment: R_GlobalEnv> 
[08:08:53.364] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:53.364] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:53.364] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:53.364] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:53.369] | : . ' , - copied ‘my_fcn’ to environment
[08:08:53.369] | : . ' , assign_globals() ... done
[08:08:53.371] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.372] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.372] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:53.372] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:53.372] | : . ' , ; ` | : New stack:
[08:08:53.372] | : . ' , ; ` | : List of 1
[08:08:53.372] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.372] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.372] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.372] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.372] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.372] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.372] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:53.372] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.372] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.372] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.372] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.375] | : . ' , ; ` | : Old stack:
[08:08:53.375] | : . ' , ; ` | : List of 1
[08:08:53.375] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.375] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.375] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.375] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.375] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.375] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.375] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:53.375] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.375] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.375] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.375] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.378] | : . ' , ; ` | : Identical
[08:08:53.378] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:53.378] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:53.379] | : . ' , ; ` | List of future strategies:
[08:08:53.379] | : . ' , ; ` | 1. sequential:
[08:08:53.379] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:53.379] | : . ' , ; ` |    - tweaked: FALSE
[08:08:53.379] | : . ' , ; ` |    - call: plan(sequential)
[08:08:53.379] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:53.379] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.379] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.383] | : . ' , SequentialFuture started (and completed)
[08:08:53.383] | : . ' , signalConditions() ...
[08:08:53.383] | : . ' , ; include = ‘immediateCondition’
[08:08:53.383] | : . ' , ; exclude = 
[08:08:53.383] | : . ' , ; resignal = FALSE
[08:08:53.383] | : . ' , ; Number of conditions: 6
[08:08:53.384] | : . ' , ;  int 6
[08:08:53.384] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.384] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.384] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.384] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.384] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.384] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.385] | : . ' , signalConditions() ... done
[08:08:53.385] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:53.385] | : . Launching futures ... done
[08:08:53.385] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:53.385] | : Using SequentialFutureBackend ... done
[08:08:53.385] | run() for ‘Future’ (<unnamed-1>) ... done
[08:08:53.385] | signalConditions() ...
[08:08:53.385] | : include = ‘immediateCondition’
[08:08:53.385] | : exclude = 
[08:08:53.386] | : resignal = FALSE
[08:08:53.386] | : Number of conditions: 6
[08:08:53.386] | :  int 6
[08:08:53.386] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.386] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.386] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.386] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.387] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.387] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.387] | signalConditions() ... done
[08:08:53.387] | relay stdout ...
[08:08:53.387] | relay stdout ... done
[08:08:53.387] | check for misuse ...
[08:08:53.387] | check for misuse ... done
[08:08:53.387] | relay conditions ...
[08:08:53.387] | : Future state: ‘finished’
[08:08:53.387] | : signalConditions() ...
[08:08:53.387] | : . include = ‘condition’
[08:08:53.388] | : . exclude = ‘immediateCondition’
[08:08:53.388] | : . resignal = TRUE
[08:08:53.388] | : . Number of conditions: 6
[08:08:53.388] | : .  int 6
[08:08:53.388] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.388] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.349] | : . ' , attachPackages() ...
[08:08:53.388] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.389] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.349] | : . ' , ; packages: [n=1] ‘future’
[08:08:53.389] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.389] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.349] | : . ' , attachPackages() ... done
[08:08:53.389] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.389] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.350] | : . ' , attachPackages() ...
[08:08:53.389] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.389] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.350] | : . ' , ; packages: [n=0] 
[08:08:53.389] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.389] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.350] | : . ' , attachPackages() ... done
[08:08:53.390] | : signalConditions() ... done
[08:08:53.390] | relay conditions ... done
[08:08:53.390] value() for Future (<unnamed-1>) ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x56440c9a8698>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[08:08:53.390] future(..., label = NULL) ...
[08:08:53.390] | lazy: TRUE
[08:08:53.390] | stdout: TRUE
[08:08:53.390] | conditions: [n=1] ‘condition’
[08:08:53.390] | gc: FALSE
[08:08:53.391] | earlySignal: FALSE
[08:08:53.391] | getGlobalsAndPackages() ...
[08:08:53.391] | : Searching for globals ...
[08:08:53.403] | : . globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:53.403] | : Searching for globals ... done
[08:08:53.404] | : Resolving globals: FALSE
[08:08:53.404] | : Search for packages associated with the globals ...
[08:08:53.404] | : . Packages associated with globals: [1] ‘base’
[08:08:53.404] | : . Packages: [1] ‘base’
[08:08:53.404] | : Search for packages associated with the globals ... done
[08:08:53.404] | : Packages after dropping 'base': [0] 
[08:08:53.405] | : globals: [1] ‘my_fcn’
[08:08:53.405] | : packages: [0] 
[08:08:53.405] | getGlobalsAndPackages() ... done
[08:08:53.405] future(..., label = NULL) ... done
[08:08:53.405] value() for Future (<unnamed-2>) ...
[08:08:53.405] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:53.405] | : state: ‘created’
[08:08:53.405] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.405] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.406] | : Using SequentialFutureBackend ...
[08:08:53.406] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:53.406] | : . Launching futures ...
[08:08:53.406] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:53.406] | : . ' , getFutureData() ...
[08:08:53.406] | : . ' , ; getFutureCore() ...
[08:08:53.406] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:53.406] | : . ' , ; getFutureCore() ... done
[08:08:53.406] | : . ' , ; getFutureCapture() ...
[08:08:53.407] | : . ' , ; getFutureCapture() ... done
[08:08:53.407] | : . ' , ; getFutureContext() ...
[08:08:53.407] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.407] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:53.407] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.407] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:53.407] | : . ' , ; getFutureContext() ... done
[08:08:53.407] | : . ' , getFutureData() ... done
[08:08:53.408] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.409] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:53.409] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.409] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.409] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:53.409] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:53.409] | : . ' , ; ` | New stack:
[08:08:53.409] | : . ' , ; ` | List of 1
[08:08:53.409] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.409] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.409] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:53.409] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.409] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.409] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.409] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.409] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.412] | : . ' , ; ` | Old stack:
[08:08:53.412] | : . ' , ; ` | List of 1
[08:08:53.412] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.412] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.412] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:53.412] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.412] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.412] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.412] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:53.412] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.412] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.412] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.412] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.416] | : . ' , ; ` | Not identical
[08:08:53.416] | : . ' , ; ` | all.equal() for future ...
[08:08:53.416] | : . ' , ; ` | : List of 2
[08:08:53.416] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.416] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.416] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.416] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:53.416] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.416] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.416] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.421] | : . ' , ; ` | all.equal() for future ... done
[08:08:53.421] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:53.421] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:53.421] | : . ' , ; ` List of future strategies:
[08:08:53.421] | : . ' , ; ` 1. sequential:
[08:08:53.421] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:53.421] | : . ' , ; `    - tweaked: FALSE
[08:08:53.421] | : . ' , ; `    - call: plan(sequential)
[08:08:53.421] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:53.421] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.422] | : . ' , assign_globals() ...
[08:08:53.422] | : . ' , List of 1
[08:08:53.422] | : . ' ,  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:08:53.422] | : . ' ,   .. ..@ .Data     :function (x)  
[08:08:53.422] | : . ' ,   .. ..@ generic   : chr "my_fcn"
[08:08:53.422] | : . ' ,   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:08:53.422] | : . ' ,   .. ..@ package   : chr ".GlobalEnv"
[08:08:53.422] | : . ' ,   .. ..@ group     : list()
[08:08:53.422] | : . ' ,   .. ..@ valueClass: chr(0) 
[08:08:53.422] | : . ' ,   .. ..@ signature : chr "x"
[08:08:53.422] | : . ' ,   .. ..@ default   : NULL
[08:08:53.422] | : . ' ,   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:08:53.422] | : . ' ,  - attr(*, "where")=List of 1
[08:08:53.422] | : . ' ,   ..$ my_fcn:<environment: R_GlobalEnv> 
[08:08:53.422] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:53.422] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:53.422] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:53.422] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:53.426] | : . ' , - copied ‘my_fcn’ to environment
[08:08:53.426] | : . ' , assign_globals() ... done
[08:08:53.429] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.429] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.429] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:53.429] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:53.429] | : . ' , ; ` | : New stack:
[08:08:53.429] | : . ' , ; ` | : List of 1
[08:08:53.429] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.429] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.429] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.429] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.429] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.429] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.429] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:53.429] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.429] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.429] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.429] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.433] | : . ' , ; ` | : Old stack:
[08:08:53.433] | : . ' , ; ` | : List of 1
[08:08:53.433] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.433] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.433] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.433] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.433] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.433] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.433] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:53.433] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.433] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.433] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.433] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.436] | : . ' , ; ` | : Identical
[08:08:53.436] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:53.436] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:53.436] | : . ' , ; ` | List of future strategies:
[08:08:53.436] | : . ' , ; ` | 1. sequential:
[08:08:53.436] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:53.436] | : . ' , ; ` |    - tweaked: FALSE
[08:08:53.436] | : . ' , ; ` |    - call: plan(sequential)
[08:08:53.437] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:53.437] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.437] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.437] | : . ' , SequentialFuture started (and completed)
[08:08:53.437] | : . ' , signalConditions() ...
[08:08:53.437] | : . ' , ; include = ‘immediateCondition’
[08:08:53.438] | : . ' , ; exclude = 
[08:08:53.438] | : . ' , ; resignal = FALSE
[08:08:53.438] | : . ' , ; Number of conditions: 6
[08:08:53.438] | : . ' , ;  int 6
[08:08:53.438] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.438] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.438] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.439] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.439] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.439] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.439] | : . ' , signalConditions() ... done
[08:08:53.439] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:53.439] | : . Launching futures ... done
[08:08:53.439] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:53.439] | : Using SequentialFutureBackend ... done
[08:08:53.439] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:53.439] | signalConditions() ...
[08:08:53.440] | : include = ‘immediateCondition’
[08:08:53.440] | : exclude = 
[08:08:53.440] | : resignal = FALSE
[08:08:53.440] | : Number of conditions: 6
[08:08:53.440] | :  int 6
[08:08:53.440] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.440] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.441] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.441] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.441] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.441] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.441] | signalConditions() ... done
[08:08:53.441] | relay stdout ...
[08:08:53.441] | relay stdout ... done
[08:08:53.441] | check for misuse ...
[08:08:53.441] | check for misuse ... done
[08:08:53.441] | relay conditions ...
[08:08:53.442] | : Future state: ‘finished’
[08:08:53.442] | : signalConditions() ...
[08:08:53.442] | : . include = ‘condition’
[08:08:53.442] | : . exclude = ‘immediateCondition’
[08:08:53.442] | : . resignal = TRUE
[08:08:53.442] | : . Number of conditions: 6
[08:08:53.442] | : .  int 6
[08:08:53.442] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.443] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.407] | : . ' , attachPackages() ...
[08:08:53.443] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.443] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.408] | : . ' , ; packages: [n=1] ‘future’
[08:08:53.443] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.443] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.408] | : . ' , attachPackages() ... done
[08:08:53.443] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.443] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.408] | : . ' , attachPackages() ...
[08:08:53.443] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.443] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.408] | : . ' , ; packages: [n=0] 
[08:08:53.444] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.444] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.408] | : . ' , attachPackages() ... done
[08:08:53.444] | : signalConditions() ... done
[08:08:53.444] | relay conditions ... done
[08:08:53.444] value() for Future (<unnamed-2>) ... done
[1] -3
future.globals.keepWhere=TRUE
[08:08:53.444] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.444] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:53.444] | : all.equal() for FutureStrategyList ...
[08:08:53.445] | : . New stack:
[08:08:53.445] | : . List of 1
[08:08:53.445] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.445] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.445] | : .   ..- attr(*, "init")= logi TRUE
[08:08:53.445] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.445] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.445] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.445] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:53.445] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.448] | : . Old stack:
[08:08:53.448] | : . List of 1
[08:08:53.448] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.448] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.448] | : .   ..- attr(*, "init")= chr "done"
[08:08:53.448] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.448] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.448] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.448] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:53.448] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.448] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.448] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.448] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.451] | : . Not identical
[08:08:53.451] | : . all.equal() for future ...
[08:08:53.451] | : . ' List of 2
[08:08:53.451] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.451] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.451] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:53.451] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.451] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.451] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.451] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:53.451] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.451] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.451] | : . '   ..- attr(*, "init")= chr "done"
[08:08:53.451] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.451] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.451] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.451] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:53.451] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.451] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.451] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.456] | : . all.equal() for future ... done
[08:08:53.456] | : all.equal() for FutureStrategyList ... done
[08:08:53.456] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:53.456] | : List of future strategies:
[08:08:53.456] | : 1. sequential:
[08:08:53.456] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:53.456] | :    - tweaked: FALSE
[08:08:53.456] | :    - call: plan(sequential)
[08:08:53.457] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:53.457] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Type of future: multicore
[08:08:53.457] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.457] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:53.457] | : all.equal() for FutureStrategyList ...
[08:08:53.457] | : . New stack:
[08:08:53.457] | : . List of 1
[08:08:53.457] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.457] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.457] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.457] | : .   ..- attr(*, "init")= logi TRUE
[08:08:53.457] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.457] | : .     ...)  
[08:08:53.457] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.457] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.457] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:53.457] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.460] | : . Old stack:
[08:08:53.460] | : . List of 1
[08:08:53.460] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.460] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.460] | : .   ..- attr(*, "init")= chr "done"
[08:08:53.460] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.460] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.460] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.460] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:53.460] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.460] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.460] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.460] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.463] | : . Not identical
[08:08:53.464] | : . all.equal() for future ...
[08:08:53.464] | : . ' List of 2
[08:08:53.464] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.464] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.464] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.464] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:53.464] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.464] | : . '     ...)  
[08:08:53.464] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.464] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.464] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:53.464] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.464] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.464] | : . '   ..- attr(*, "init")= chr "done"
[08:08:53.464] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.464] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.464] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.464] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:53.464] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ac58808> 
[08:08:53.464] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.464] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.468] | : . ' Formals differ
[08:08:53.468] | : . all.equal() for future ... done
[08:08:53.469] | : . Future strategies differ at level 1
[08:08:53.469] | : all.equal() for FutureStrategyList ... done
[08:08:53.469] | : plan(): Setting new future backend stack:
[08:08:53.469] | : List of future strategies:
[08:08:53.469] | : 1. multicore:
[08:08:53.469] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:53.469] | :    - tweaked: FALSE
[08:08:53.469] | :    - call: plan(strategy)
[08:08:53.469] | : List of 1
[08:08:53.469] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.469] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.469] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.469] | :   ..- attr(*, "init")= logi TRUE
[08:08:53.469] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.469] | :     ...)  
[08:08:53.469] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.469] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.469] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:53.469] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.472] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:53.472] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.472] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:53.472] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.472] | : . Legacy shutdown of cluster workers ...
[08:08:53.472] | : . ' Stopping existing cluster ...
[08:08:53.472] | : . ' , No pre-existing cluster. Skipping
[08:08:53.473] | : . ' Stopping existing cluster ... done
[08:08:53.473] | : . Legacy shutdown of cluster workers ... done
[08:08:53.473] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:53.473] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:53.473] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.473] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.473] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.473] | : .  - attr(*, "init")= logi TRUE
[08:08:53.473] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.473] | : .     ...)  
[08:08:53.473] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.473] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.473] | : .  - attr(*, "call")= language plan(strategy)
[08:08:53.475] | : . init: TRUE
[08:08:53.475] | : . makeFutureBackend(<multicore>) ...
[08:08:53.475] | : . ' Backend function: <‘NULL’>
[08:08:53.475] | : . ' Evaluator tweak arguments: [n=0]
[08:08:53.475] | : . '  list()
[08:08:53.476] | : . ' Evaluator formal arguments: [n=3]
[08:08:53.476] | : . '  list()
[08:08:53.476] | : . ' Backend factory arguments: [n=3]
[08:08:53.476] | : . ' Dotted pair list of 3
[08:08:53.476] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:53.476] | : . '  $ gc         : logi FALSE
[08:08:53.476] | : . '  $ earlySignal: logi FALSE
[08:08:53.479] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:53.479] | : . makeFutureBackend(<multicore>) ... done
[08:08:53.479] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:53.479] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.479] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.480] | : plan(): nbrOfWorkers() = 2
[08:08:53.480] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:53.481] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.481] future(..., label = NULL) ...
[08:08:53.481] | lazy: TRUE
[08:08:53.481] | stdout: TRUE
[08:08:53.481] | conditions: [n=1] ‘condition’
[08:08:53.481] | gc: FALSE
[08:08:53.481] | earlySignal: FALSE
[08:08:53.481] | getGlobalsAndPackages() ...
[08:08:53.481] | : Searching for globals ...
[08:08:53.492] | : . globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:53.492] | : Searching for globals ... done
[08:08:53.492] | : Resolving globals: FALSE
[08:08:53.492] | : Search for packages associated with the globals ...
[08:08:53.492] | : . Packages associated with globals: [1] ‘base’
[08:08:53.492] | : . Packages: [1] ‘base’
[08:08:53.493] | : Search for packages associated with the globals ... done
[08:08:53.493] | : Packages after dropping 'base': [0] 
[08:08:53.493] | : globals: [1] ‘my_fcn’
[08:08:53.493] | : packages: [0] 
[08:08:53.493] | getGlobalsAndPackages() ... done
[08:08:53.493] future(..., label = NULL) ... done
[08:08:53.493] value() for Future (<unnamed-3>) ...
[08:08:53.493] | run() for ‘Future’ (<unnamed-3>) ...
[08:08:53.493] | : state: ‘created’
[08:08:53.494] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.494] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.494] | : Using MulticoreFutureBackend ...
[08:08:53.495] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:53.495] | : . Launching futures ...
[08:08:53.495] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:53.495] | : . ' , getFutureData() ...
[08:08:53.495] | : . ' , ; getFutureCore() ...
[08:08:53.495] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:53.495] | : . ' , ; getFutureCore() ... done
[08:08:53.495] | : . ' , ; getFutureCapture() ...
[08:08:53.496] | : . ' , ; getFutureCapture() ... done
[08:08:53.496] | : . ' , ; getFutureContext() ...
[08:08:53.496] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.496] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:53.496] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.496] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:53.496] | : . ' , ; getFutureContext() ... done
[08:08:53.497] | : . ' , getFutureData() ... done
[08:08:53.497] | : . ' , requestCore(..., workers = 2) ...
[08:08:53.497] | : . ' , requestCore(..., workers = 2) ... done
[08:08:53.500] | : . ' , MulticoreFuture started
[08:08:53.500] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:53.501] | : . Launching futures ... done
[08:08:53.501] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:53.501] | : Using MulticoreFutureBackend ... done
[08:08:53.502] | run() for ‘Future’ (<unnamed-3>) ... done
[08:08:53.503] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.503] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:53.503] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.504] | result() for MulticoreFuture ...
[08:08:53.504] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.504] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:53.504] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:53.505] | : . ' , ; ` | New stack:
[08:08:53.505] | : . ' , ; ` | List of 1
[08:08:53.505] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.505] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.505] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:53.505] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.505] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.505] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.505] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.505] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.509] | : . ' , ; ` | Old stack:
[08:08:53.509] | : . ' , ; ` | List of 1
[08:08:53.509] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.509] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.509] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.509] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:53.509] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.509] | : . ' , ; ` |     ...)  
[08:08:53.509] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.509] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.509] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:53.509] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.509] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.509] | : . ' , ; ` |     ...)  
[08:08:53.509] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.509] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.514] | : . ' , ; ` | Not identical
[08:08:53.515] | : . ' , ; ` | all.equal() for future ...
[08:08:53.515] | : . ' , ; ` | : List of 2
[08:08:53.515] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.515] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.515] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.515] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.515] | : . ' , ; ` | :     ...)  
[08:08:53.515] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:53.515] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.515] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.515] | : . ' , ; ` | :     ...)  
[08:08:53.515] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.523] | : . ' , ; ` | : Formals differ
[08:08:53.523] | : . ' , ; ` | all.equal() for future ... done
[08:08:53.523] | : . ' , ; ` | Future strategies differ at level 1
[08:08:53.526] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:53.526] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:53.526] | : . ' , ; ` List of future strategies:
[08:08:53.526] | : . ' , ; ` 1. sequential:
[08:08:53.526] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:53.526] | : . ' , ; `    - tweaked: FALSE
[08:08:53.526] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.527] | : . ' , ; ` List of 1
[08:08:53.527] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.527] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.527] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:53.527] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.527] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.527] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.527] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.527] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.531] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:53.531] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:53.531] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.531] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:53.531] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.531] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.531] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:53.531] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.531] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.531] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.531] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.533] | : . ' , ; ` | : init: TRUE
[08:08:53.533] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:53.533] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:53.534] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:53.534] | : . ' , ; ` | : .  list()
[08:08:53.534] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:53.534] | : . ' , ; ` | : .  list()
[08:08:53.534] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:53.534] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:53.534] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:53.534] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:53.535] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:53.536] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:53.536] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:53.536] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.536] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:53.536] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:53.536] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.536] | : . ' , assign_globals() ...
[08:08:53.536] | : . ' , List of 1
[08:08:53.536] | : . ' ,  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:08:53.536] | : . ' ,   .. ..@ .Data     :function (x)  
[08:08:53.536] | : . ' ,   .. ..@ generic   : chr "my_fcn"
[08:08:53.536] | : . ' ,   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:08:53.536] | : . ' ,   .. ..@ package   : chr ".GlobalEnv"
[08:08:53.536] | : . ' ,   .. ..@ group     : list()
[08:08:53.536] | : . ' ,   .. ..@ valueClass: chr(0) 
[08:08:53.536] | : . ' ,   .. ..@ signature : chr "x"
[08:08:53.536] | : . ' ,   .. ..@ default   : NULL
[08:08:53.536] | : . ' ,   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:08:53.536] | : . ' ,  - attr(*, "where")=List of 1
[08:08:53.536] | : . ' ,   ..$ my_fcn:<environment: R_GlobalEnv> 
[08:08:53.536] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:53.536] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:53.536] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:53.536] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:53.542] | : . ' , - copied ‘my_fcn’ to environment
[08:08:53.542] | : . ' , assign_globals() ... done
[08:08:53.544] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.544] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.544] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:53.544] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:53.544] | : . ' , ; ` | : New stack:
[08:08:53.545] | : . ' , ; ` | : List of 1
[08:08:53.545] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.545] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.545] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.545] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.545] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.545] | : . ' , ; ` | :     ...)  
[08:08:53.545] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.545] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.545] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:53.545] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.545] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.545] | : . ' , ; ` | :     ...)  
[08:08:53.545] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.545] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.549] | : . ' , ; ` | : Old stack:
[08:08:53.549] | : . ' , ; ` | : List of 1
[08:08:53.549] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.549] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.549] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.549] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.549] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.549] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.549] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.549] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440c0a8178> 
[08:08:53.549] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.549] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.549] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.552] | : . ' , ; ` | : Not identical
[08:08:53.552] | : . ' , ; ` | : all.equal() for future ...
[08:08:53.552] | : . ' , ; ` | : . List of 2
[08:08:53.552] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.552] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.552] | : . ' , ; ` | : .     ...)  
[08:08:53.552] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.552] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.552] | : . ' , ; ` | : .     ...)  
[08:08:53.552] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.552] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.552] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.552] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440c0a8178> 
[08:08:53.552] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.552] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.558] | : . ' , ; ` | : . Formals differ
[08:08:53.558] | : . ' , ; ` | : all.equal() for future ... done
[08:08:53.558] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:53.558] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:53.558] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:53.558] | : . ' , ; ` | List of future strategies:
[08:08:53.558] | : . ' , ; ` | 1. multicore:
[08:08:53.558] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:53.558] | : . ' , ; ` |    - tweaked: FALSE
[08:08:53.558] | : . ' , ; ` |    - call: plan(strategy)
[08:08:53.559] | : . ' , ; ` | List of 1
[08:08:53.559] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.559] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.559] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.559] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:53.559] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.559] | : . ' , ; ` |     ...)  
[08:08:53.559] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.559] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.559] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:53.559] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.559] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.559] | : . ' , ; ` |     ...)  
[08:08:53.559] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.559] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.563] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:53.563] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:53.563] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.563] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.563] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:53.563] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:53.563] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.563] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.565] | : readImmediateCondition() ...
[08:08:53.565] | : . Path: ‘/tmp/Rtmp0q8tf4/.future/immediateConditions’
[08:08:53.565] | : . Number of RDS files: 0
[08:08:53.565] | : . Returned conditions set:
[08:08:53.566] | : .  list()
[08:08:53.566] | : readImmediateCondition() ... done
[08:08:53.566] | : result() for MulticoreFuture ...
[08:08:53.567] | : result() for MulticoreFuture ... done
[08:08:53.567] | : signalConditions() ...
[08:08:53.567] | : . include = ‘immediateCondition’
[08:08:53.567] | : . exclude = 
[08:08:53.567] | : . resignal = FALSE
[08:08:53.567] | : . Number of conditions: 6
[08:08:53.567] | : .  int 6
[08:08:53.568] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.568] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.568] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.568] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.569] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.569] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.569] | : signalConditions() ... done
[08:08:53.569] | result() for MulticoreFuture ... done
[08:08:53.569] | result() for MulticoreFuture ...
[08:08:53.569] | result() for MulticoreFuture ... done
[08:08:53.569] | signalConditions() ...
[08:08:53.570] | : include = ‘immediateCondition’
[08:08:53.570] | : exclude = 
[08:08:53.570] | : resignal = FALSE
[08:08:53.570] | : Number of conditions: 6
[08:08:53.570] | :  int 6
[08:08:53.571] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.571] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.571] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.571] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.571] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.571] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.571] | signalConditions() ... done
[08:08:53.572] | relay stdout ...
[08:08:53.572] | relay stdout ... done
[08:08:53.572] | check for misuse ...
[08:08:53.572] | check for misuse ... done
[08:08:53.572] | relay conditions ...
[08:08:53.572] | : Future state: ‘finished’
[08:08:53.572] | : result() for MulticoreFuture ...
[08:08:53.572] | : result() for MulticoreFuture ... done
[08:08:53.573] | : signalConditions() ...
[08:08:53.573] | : . include = ‘condition’
[08:08:53.573] | : . exclude = ‘immediateCondition’
[08:08:53.573] | : . resignal = TRUE
[08:08:53.573] | : . Number of conditions: 6
[08:08:53.573] | : .  int 6
[08:08:53.574] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.574] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.500] | : . ' , attachPackages() ...
[08:08:53.574] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.574] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.501] | : . ' , ; packages: [n=1] ‘future’
[08:08:53.574] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.575] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.501] | : . ' , attachPackages() ... done
[08:08:53.575] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.575] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.502] | : . ' , attachPackages() ...
[08:08:53.575] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.575] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.502] | : . ' , ; packages: [n=0] 
[08:08:53.575] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.575] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.502] | : . ' , attachPackages() ... done
[08:08:53.576] | : signalConditions() ... done
[08:08:53.576] | relay conditions ... done
[08:08:53.576] value() for Future (<unnamed-3>) ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x56440a2ea3f0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[08:08:53.576] future(..., label = NULL) ...
[08:08:53.576] | lazy: TRUE
[08:08:53.577] | stdout: TRUE
[08:08:53.577] | conditions: [n=1] ‘condition’
[08:08:53.577] | gc: FALSE
[08:08:53.577] | earlySignal: FALSE
[08:08:53.577] | getGlobalsAndPackages() ...
[08:08:53.577] | : Searching for globals ...
[08:08:53.593] | : . globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:53.593] | : Searching for globals ... done
[08:08:53.594] | : Resolving globals: FALSE
[08:08:53.594] | : Search for packages associated with the globals ...
[08:08:53.594] | : . Packages associated with globals: [1] ‘base’
[08:08:53.594] | : . Packages: [1] ‘base’
[08:08:53.594] | : Search for packages associated with the globals ... done
[08:08:53.595] | : Packages after dropping 'base': [0] 
[08:08:53.595] | : globals: [1] ‘my_fcn’
[08:08:53.595] | : packages: [0] 
[08:08:53.595] | getGlobalsAndPackages() ... done
[08:08:53.595] future(..., label = NULL) ... done
[08:08:53.595] value() for Future (<unnamed-4>) ...
[08:08:53.595] | run() for ‘Future’ (<unnamed-4>) ...
[08:08:53.595] | : state: ‘created’
[08:08:53.596] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.596] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.596] | : Using MulticoreFutureBackend ...
[08:08:53.596] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:53.596] | : . Launching futures ...
[08:08:53.596] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:53.596] | : . ' , getFutureData() ...
[08:08:53.596] | : . ' , ; getFutureCore() ...
[08:08:53.596] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:53.597] | : . ' , ; getFutureCore() ... done
[08:08:53.597] | : . ' , ; getFutureCapture() ...
[08:08:53.597] | : . ' , ; getFutureCapture() ... done
[08:08:53.597] | : . ' , ; getFutureContext() ...
[08:08:53.597] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.597] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:53.597] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.628] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:53.628] | : . ' , ; getFutureContext() ... done
[08:08:53.628] | : . ' , getFutureData() ... done
[08:08:53.628] | : . ' , requestCore(..., workers = 2) ...
[08:08:53.629] | : . ' , requestCore(..., workers = 2) ... done
[08:08:53.631] | : . ' , MulticoreFuture started
[08:08:53.632] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:53.632] | : . Launching futures ... done
[08:08:53.633] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:53.633] | : Using MulticoreFutureBackend ... done
[08:08:53.633] | run() for ‘Future’ (<unnamed-4>) ... done
[08:08:53.634] | result() for MulticoreFuture ...
[08:08:53.635] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.636] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:53.636] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.636] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.637] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:53.637] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:53.637] | : . ' , ; ` | New stack:
[08:08:53.637] | : . ' , ; ` | List of 1
[08:08:53.637] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.637] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.637] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:53.637] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.637] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.637] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.637] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.637] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.643] | : . ' , ; ` | Old stack:
[08:08:53.643] | : . ' , ; ` | List of 1
[08:08:53.643] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.643] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.643] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.643] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:53.643] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.643] | : . ' , ; ` |     ...)  
[08:08:53.643] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.643] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.643] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:53.643] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.643] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.643] | : . ' , ; ` |     ...)  
[08:08:53.643] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.643] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.648] | : . ' , ; ` | Not identical
[08:08:53.649] | : . ' , ; ` | all.equal() for future ...
[08:08:53.649] | : . ' , ; ` | : List of 2
[08:08:53.649] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.649] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.649] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.649] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.649] | : . ' , ; ` | :     ...)  
[08:08:53.649] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:53.649] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.649] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.649] | : . ' , ; ` | :     ...)  
[08:08:53.649] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.656] | : . ' , ; ` | : Formals differ
[08:08:53.656] | : . ' , ; ` | all.equal() for future ... done
[08:08:53.657] | : . ' , ; ` | Future strategies differ at level 1
[08:08:53.657] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:53.657] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:53.657] | : . ' , ; ` List of future strategies:
[08:08:53.657] | : . ' , ; ` 1. sequential:
[08:08:53.657] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:53.657] | : . ' , ; `    - tweaked: FALSE
[08:08:53.657] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.658] | : . ' , ; ` List of 1
[08:08:53.658] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.658] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.658] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:53.658] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.658] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.658] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.658] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.658] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.663] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:53.663] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:53.663] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.663] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:53.664] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.664] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.664] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:53.664] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.664] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.664] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.664] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.666] | : . ' , ; ` | : init: TRUE
[08:08:53.666] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:53.666] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:53.666] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:53.666] | : . ' , ; ` | : .  list()
[08:08:53.666] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:53.667] | : . ' , ; ` | : .  list()
[08:08:53.667] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:53.667] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:53.667] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:53.667] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:53.668] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:53.668] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:53.668] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:53.668] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.668] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:53.669] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:53.669] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.669] | : . ' , assign_globals() ...
[08:08:53.669] | : . ' , List of 1
[08:08:53.669] | : . ' ,  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:08:53.669] | : . ' ,   .. ..@ .Data     :function (x)  
[08:08:53.669] | : . ' ,   .. ..@ generic   : chr "my_fcn"
[08:08:53.669] | : . ' ,   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:08:53.669] | : . ' ,   .. ..@ package   : chr ".GlobalEnv"
[08:08:53.669] | : . ' ,   .. ..@ group     : list()
[08:08:53.669] | : . ' ,   .. ..@ valueClass: chr(0) 
[08:08:53.669] | : . ' ,   .. ..@ signature : chr "x"
[08:08:53.669] | : . ' ,   .. ..@ default   : NULL
[08:08:53.669] | : . ' ,   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:08:53.669] | : . ' ,  - attr(*, "where")=List of 1
[08:08:53.669] | : . ' ,   ..$ my_fcn:<environment: R_GlobalEnv> 
[08:08:53.669] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:53.669] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:53.669] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:53.669] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:53.674] | : . ' , - copied ‘my_fcn’ to environment
[08:08:53.674] | : . ' , assign_globals() ... done
[08:08:53.676] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.676] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:53.677] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:53.677] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:53.677] | : . ' , ; ` | : New stack:
[08:08:53.677] | : . ' , ; ` | : List of 1
[08:08:53.677] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.677] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.677] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.677] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.677] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.677] | : . ' , ; ` | :     ...)  
[08:08:53.677] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.677] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.677] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:53.677] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.677] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.677] | : . ' , ; ` | :     ...)  
[08:08:53.677] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.677] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.680] | : . ' , ; ` | : Old stack:
[08:08:53.680] | : . ' , ; ` | : List of 1
[08:08:53.680] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.680] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.680] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:53.680] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.680] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.680] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.680] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.680] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440a28b9c8> 
[08:08:53.680] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.680] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.680] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.684] | : . ' , ; ` | : Not identical
[08:08:53.684] | : . ' , ; ` | : all.equal() for future ...
[08:08:53.684] | : . ' , ; ` | : . List of 2
[08:08:53.684] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.684] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.684] | : . ' , ; ` | : .     ...)  
[08:08:53.684] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.684] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.684] | : . ' , ; ` | : .     ...)  
[08:08:53.684] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.684] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.684] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:53.684] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440a28b9c8> 
[08:08:53.684] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.684] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.690] | : . ' , ; ` | : . Formals differ
[08:08:53.690] | : . ' , ; ` | : all.equal() for future ... done
[08:08:53.690] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:53.690] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:53.690] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:53.691] | : . ' , ; ` | List of future strategies:
[08:08:53.691] | : . ' , ; ` | 1. multicore:
[08:08:53.691] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:53.691] | : . ' , ; ` |    - tweaked: FALSE
[08:08:53.691] | : . ' , ; ` |    - call: plan(strategy)
[08:08:53.691] | : . ' , ; ` | List of 1
[08:08:53.691] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.691] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.691] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.691] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:53.691] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.691] | : . ' , ; ` |     ...)  
[08:08:53.691] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.691] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.691] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:53.691] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.691] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.691] | : . ' , ; ` |     ...)  
[08:08:53.691] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.691] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.694] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:53.694] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:53.694] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.694] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.694] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:53.695] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:53.695] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.695] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:53.695] | : readImmediateCondition() ...
[08:08:53.696] | : . Path: ‘/tmp/Rtmp0q8tf4/.future/immediateConditions’
[08:08:53.696] | : . Number of RDS files: 0
[08:08:53.696] | : . Returned conditions set:
[08:08:53.696] | : .  list()
[08:08:53.697] | : readImmediateCondition() ... done
[08:08:53.697] | : result() for MulticoreFuture ...
[08:08:53.697] | : result() for MulticoreFuture ... done
[08:08:53.698] | : signalConditions() ...
[08:08:53.698] | : . include = ‘immediateCondition’
[08:08:53.698] | : . exclude = 
[08:08:53.698] | : . resignal = FALSE
[08:08:53.698] | : . Number of conditions: 6
[08:08:53.698] | : .  int 6
[08:08:53.699] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.699] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.699] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.699] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.700] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.700] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.700] | : signalConditions() ... done
[08:08:53.700] | result() for MulticoreFuture ... done
[08:08:53.700] | result() for MulticoreFuture ...
[08:08:53.700] | result() for MulticoreFuture ... done
[08:08:53.701] | signalConditions() ...
[08:08:53.701] | : include = ‘immediateCondition’
[08:08:53.701] | : exclude = 
[08:08:53.701] | : resignal = FALSE
[08:08:53.701] | : Number of conditions: 6
[08:08:53.701] | :  int 6
[08:08:53.702] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.702] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.702] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.702] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.702] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.702] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.703] | signalConditions() ... done
[08:08:53.703] | relay stdout ...
[08:08:53.703] | relay stdout ... done
[08:08:53.703] | check for misuse ...
[08:08:53.703] | check for misuse ... done
[08:08:53.703] | relay conditions ...
[08:08:53.703] | : Future state: ‘finished’
[08:08:53.704] | : result() for MulticoreFuture ...
[08:08:53.704] | : result() for MulticoreFuture ... done
[08:08:53.704] | : signalConditions() ...
[08:08:53.704] | : . include = ‘condition’
[08:08:53.704] | : . exclude = ‘immediateCondition’
[08:08:53.704] | : . resignal = TRUE
[08:08:53.704] | : . Number of conditions: 6
[08:08:53.704] | : .  int 6
[08:08:53.705] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.705] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.632] | : . ' , attachPackages() ...
[08:08:53.705] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.705] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.633] | : . ' , ; packages: [n=1] ‘future’
[08:08:53.706] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.706] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.633] | : . ' , attachPackages() ... done
[08:08:53.706] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.706] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.634] | : . ' , attachPackages() ...
[08:08:53.706] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.706] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.634] | : . ' , ; packages: [n=0] 
[08:08:53.707] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:53.707] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:53.634] | : . ' , attachPackages() ... done
[08:08:53.707] | : signalConditions() ... done
[08:08:53.707] | relay conditions ... done
[08:08:53.707] value() for Future (<unnamed-4>) ... done
[1] -3
future.globals.keepWhere=TRUE
[08:08:53.707] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.708] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:53.708] | : all.equal() for FutureStrategyList ...
[08:08:53.708] | : . New stack:
[08:08:53.708] | : . List of 1
[08:08:53.708] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.708] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.708] | : .   ..- attr(*, "init")= logi TRUE
[08:08:53.708] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.708] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.708] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.708] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:53.708] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.711] | : . Old stack:
[08:08:53.711] | : . List of 1
[08:08:53.711] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.711] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.711] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.711] | : .   ..- attr(*, "init")= chr "done"
[08:08:53.711] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.711] | : .     ...)  
[08:08:53.711] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.711] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.711] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:53.711] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.711] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.711] | : .     ...)  
[08:08:53.711] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.711] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.715] | : . Not identical
[08:08:53.715] | : . all.equal() for future ...
[08:08:53.716] | : . ' List of 2
[08:08:53.716] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.716] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.716] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:53.716] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.716] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.716] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.716] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:53.716] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:53.716] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:53.716] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:53.716] | : . '   ..- attr(*, "init")= chr "done"
[08:08:53.716] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.716] | : . '     ...)  
[08:08:53.716] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.716] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.716] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:53.716] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440ce7d1e8> 
[08:08:53.716] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:53.716] | : . '     ...)  
[08:08:53.716] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:53.723] | : . ' Formals differ
[08:08:53.723] | : . all.equal() for future ... done
[08:08:53.723] | : . Future strategies differ at level 1
[08:08:53.723] | : all.equal() for FutureStrategyList ... done
[08:08:53.723] | : plan(): Setting new future backend stack:
[08:08:53.723] | : List of future strategies:
[08:08:53.723] | : 1. sequential:
[08:08:53.723] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:53.723] | :    - tweaked: FALSE
[08:08:53.723] | :    - call: plan(sequential)
[08:08:53.724] | : List of 1
[08:08:53.724] | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.724] | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.724] | :   ..- attr(*, "init")= logi TRUE
[08:08:53.724] | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.724] | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.724] | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.724] | :   ..- attr(*, "call")= language plan(sequential)
[08:08:53.724] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.726] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:53.726] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.726] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:53.726] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.727] | : . Legacy shutdown of cluster workers ...
[08:08:53.727] | : . ' Stopping existing cluster ...
[08:08:53.728] | : . ' , No pre-existing cluster. Skipping
[08:08:53.728] | : . ' Stopping existing cluster ... done
[08:08:53.728] | : . Legacy shutdown of cluster workers ... done
[08:08:53.728] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:53.728] | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:53.728] | : . function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.728] | : .  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.728] | : .  - attr(*, "init")= logi TRUE
[08:08:53.728] | : .  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.728] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.728] | : .  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.728] | : .  - attr(*, "call")= language plan(sequential)
[08:08:53.730] | : . init: TRUE
[08:08:53.730] | : . makeFutureBackend(<sequential>) ...
[08:08:53.730] | : . ' Backend function: <‘NULL’>
[08:08:53.730] | : . ' Evaluator tweak arguments: [n=0]
[08:08:53.731] | : . '  list()
[08:08:53.731] | : . ' Evaluator formal arguments: [n=2]
[08:08:53.731] | : . '  list()
[08:08:53.731] | : . ' Backend factory arguments: [n=2]
[08:08:53.731] | : . ' Dotted pair list of 2
[08:08:53.731] | : . '  $ gc         : logi FALSE
[08:08:53.731] | : . '  $ earlySignal: logi FALSE
[08:08:53.732] | : . ' Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:53.732] | : . makeFutureBackend(<sequential>) ... done
[08:08:53.733] | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:53.733] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.733] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.733] | : plan(): nbrOfWorkers() = 1
[08:08:53.733] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:53.733] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Type of future: multisession
[08:08:53.733] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.734] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:53.734] | : all.equal() for FutureStrategyList ...
[08:08:53.734] | : . New stack:
[08:08:53.734] | : . List of 1
[08:08:53.734] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:53.734] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.734] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:53.734] | : .   ..- attr(*, "init")= logi TRUE
[08:08:53.734] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:53.734] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:53.734] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:53.734] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:53.734] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:53.734] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:53.734] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.738] | : . Old stack:
[08:08:53.738] | : . List of 1
[08:08:53.738] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.738] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.738] | : .   ..- attr(*, "init")= chr "done"
[08:08:53.738] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.738] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.738] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.738] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:53.738] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440c880ec0> 
[08:08:53.738] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.738] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.738] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.741] | : . Not identical
[08:08:53.741] | : . all.equal() for future ...
[08:08:53.741] | : . ' List of 2
[08:08:53.741] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:53.741] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.741] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:53.741] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:53.741] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:53.741] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:53.741] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:53.741] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:53.741] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:53.741] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:53.741] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.741] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:53.741] | : . '   ..- attr(*, "init")= chr "done"
[08:08:53.741] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.741] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.741] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.741] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:53.741] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440c880ec0> 
[08:08:53.741] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:53.741] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:53.746] | : . ' Formals differ
[08:08:53.746] | : . all.equal() for future ... done
[08:08:53.746] | : . Future strategies differ at level 1
[08:08:53.746] | : all.equal() for FutureStrategyList ... done
[08:08:53.746] | : plan(): Setting new future backend stack:
[08:08:53.746] | : List of future strategies:
[08:08:53.746] | : 1. multisession:
[08:08:53.746] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:53.746] | :    - tweaked: FALSE
[08:08:53.746] | :    - call: plan(strategy)
[08:08:53.747] | : List of 1
[08:08:53.747] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:53.747] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.747] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:53.747] | :   ..- attr(*, "init")= logi TRUE
[08:08:53.747] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:53.747] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:53.747] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:53.747] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:53.747] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:53.747] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:53.747] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:53.749] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:53.749] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:53.750] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:53.750] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:53.750] | : . Legacy shutdown of cluster workers ...
[08:08:53.750] | : . ' Stopping existing cluster ...
[08:08:53.750] | : . ' , No pre-existing cluster. Skipping
[08:08:53.750] | : . ' Stopping existing cluster ... done
[08:08:53.750] | : . Legacy shutdown of cluster workers ... done
[08:08:53.750] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:53.750] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:53.751] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:53.751] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:53.751] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:53.751] | : .  - attr(*, "init")= logi TRUE
[08:08:53.751] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:53.751] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:53.751] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:53.751] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:53.751] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:53.751] | : .  - attr(*, "call")= language plan(strategy)
[08:08:53.753] | : . init: TRUE
[08:08:53.753] | : . makeFutureBackend(<multisession>) ...
[08:08:53.754] | : . ' Backend function: <‘NULL’>
[08:08:53.754] | : . ' Evaluator tweak arguments: [n=0]
[08:08:53.754] | : . '  list()
[08:08:53.754] | : . ' Evaluator formal arguments: [n=4]
[08:08:53.754] | : . '  list()
[08:08:53.754] | : . ' Backend factory arguments: [n=4]
[08:08:53.754] | : . ' Dotted pair list of 4
[08:08:53.754] | : . '  $ workers     : language availableCores()
[08:08:53.754] | : . '  $ rscript_libs: language .libPaths()
[08:08:53.754] | : . '  $ gc          : logi FALSE
[08:08:53.754] | : . '  $ earlySignal : logi FALSE
[08:08:53.756] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:53.756] | : . ' , Arguments:
[08:08:53.756] | : . ' , List of 5
[08:08:53.756] | : . ' ,  $ workers     : Named int 2
[08:08:53.756] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:53.756] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:53.756] | : . ' ,  $ interrupts  : logi TRUE
[08:08:53.756] | : . ' ,  $ gc          : logi FALSE
[08:08:53.756] | : . ' ,  $ earlySignal : logi FALSE
[08:08:53.760] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:53.760] | : . ' , ; workers: 2
[08:08:53.760] | : . ' , ; getCluster() ...
[08:08:53.760] | : . ' , ; getCluster() ... done
[08:08:53.760] | : . ' , ; Stopping existing cluster ...
[08:08:53.760] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:53.761] | : . ' , ; Stopping existing cluster ... done
[08:08:53.761] | : . ' , ; Starting new cluster ...
[08:08:53.761] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:53.761] | : . ' , ; ` | Arguments:
[08:08:53.761] | : . ' , ; ` | List of 2
[08:08:53.761] | : . ' , ; ` |  $             : int 2
[08:08:53.761] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:53.762] | : . ' , ; ` | .makeCluster() ...
[08:08:53.762] | : . ' , ; ` | : workers: ‘2’
[08:08:53.762] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:53.762] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:53.762] | : . ' , ; ` | : List of 2
[08:08:53.762] | : . ' , ; ` | :  $             : int 2
[08:08:53.762] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:54.258] | : . ' , ; ` | : Generated cluster UUID
[08:08:54.258] | : . ' , ; ` | : Cluster UUID: ‘b5ceb45776bec83117259cc853e3874a’
[08:08:54.258] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:54.261] | : . ' , ; ` | .makeCluster() ... done
[08:08:54.261] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:54.262] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:54.262] | : . ' , ; ` Number of workers: 2
[08:08:54.263] | : . ' , ; ` Workers UUID: ‘b5ceb45776bec83117259cc853e3874a’
[08:08:54.263] | : . ' , ; Starting new cluster ... done
[08:08:54.263] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:54.263] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:54.263] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:54.263] | : . makeFutureBackend(<multisession>) ... done
[08:08:54.263] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:54.263] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:54.264] | : . plan(): nbrOfWorkers() = 2
[08:08:54.264] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:54.264] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:54.264] | future(..., label = NULL) ...
[08:08:54.264] | : lazy: TRUE
[08:08:54.264] | : stdout: TRUE
[08:08:54.264] | : conditions: [n=1] ‘condition’
[08:08:54.264] | : gc: FALSE
[08:08:54.264] | : earlySignal: FALSE
[08:08:54.265] | : getGlobalsAndPackages() ...
[08:08:54.265] | : . Searching for globals ...
[08:08:54.277] | : . ' globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:54.277] | : . Searching for globals ... done
[08:08:54.277] | : . Resolving globals: FALSE
[08:08:54.277] | : . Search for packages associated with the globals ...
[08:08:54.277] | : . ' Packages associated with globals: [1] ‘base’
[08:08:54.278] | : . ' Packages: [1] ‘base’
[08:08:54.278] | : . Search for packages associated with the globals ... done
[08:08:54.278] | : . Packages after dropping 'base': [0] 
[08:08:54.278] | : . globals: [1] ‘my_fcn’
[08:08:54.278] | : . packages: [0] 
[08:08:54.279] | : getGlobalsAndPackages() ... done
[08:08:54.279] | future(..., label = NULL) ... done
[08:08:54.279] | value() for Future (<unnamed-5>) ...
[08:08:54.279] | : run() for ‘Future’ (<unnamed-5>) ...
[08:08:54.279] | : . state: ‘created’
[08:08:54.279] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:54.280] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:54.280] | : . Using MultisessionFutureBackend ...
[08:08:54.280] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:54.280] | : . ' Launching futures ...
[08:08:54.280] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:54.281] | : . ' , ; Workers: [n=2]
[08:08:54.281] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:54.283] | : . ' , ; FutureRegistry: ‘workers-b5ceb45776bec83117259cc853e3874a’
[08:08:54.283] | : . ' , ; requestWorker() ...
[08:08:54.283] | : . ' , ; ` requestNode() ...
[08:08:54.283] | : . ' , ; ` | Number of workers: 2
[08:08:54.283] | : . ' , ; ` | Polling for a free worker ...
[08:08:54.283] | : . ' , ; ` | : FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ...
[08:08:54.284] | : . ' , ; ` | : . Created empty registry ‘workers-b5ceb45776bec83117259cc853e3874a’
[08:08:54.284] | : . ' , ; ` | : . Listing all futures
[08:08:54.284] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:54.284] | : . ' , ; ` | : FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ... done
[08:08:54.284] | : . ' , ; ` | : Total time: 0
[08:08:54.284] | : . ' , ; ` | Polling for a free worker ... done
[08:08:54.284] | : . ' , ; ` | FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ...
[08:08:54.284] | : . ' , ; ` | : Listing all futures
[08:08:54.285] | : . ' , ; ` | : Number of registered futures: 0
[08:08:54.285] | : . ' , ; ` | FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ... done
[08:08:54.285] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:54.285] | : . ' , ; ` | Index of first available worker: 1
[08:08:54.285] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:54.351] | : . ' , ; ` | : Worker is functional
[08:08:54.351] | : . ' , ; ` | : FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ...
[08:08:54.351] | : . ' , ; ` | : . Listing all futures
[08:08:54.352] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:54.352] | : . ' , ; ` | : FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ... done
[08:08:54.352] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:54.352] | : . ' , ; ` requestNode() ... done
[08:08:54.352] | : . ' , ; ` cluster node index: 1
[08:08:54.352] | : . ' , ; requestWorker() ... done
[08:08:54.352] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:54.353] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:54.353] | : . ' , ; launchFuture() ...
[08:08:54.353] | : . ' , ; ` cluster node index: 1
[08:08:54.354] | : . ' , ; ` getFutureData() ...
[08:08:54.354] | : . ' , ; ` | getFutureCore() ...
[08:08:54.354] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:54.354] | : . ' , ; ` | getFutureCore() ... done
[08:08:54.354] | : . ' , ; ` | getFutureCapture() ...
[08:08:54.354] | : . ' , ; ` | getFutureCapture() ... done
[08:08:54.354] | : . ' , ; ` | getFutureContext() ...
[08:08:54.354] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:54.355] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:54.355] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:54.355] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:54.355] | : . ' , ; ` | getFutureContext() ... done
[08:08:54.355] | : . ' , ; ` getFutureData() ... done
[08:08:54.356] | : . ' , ; ` FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'add', earlySignal = 0) ...
[08:08:54.356] | : . ' , ; ` | Appended future to position #1
[08:08:54.356] | : . ' , ; ` | Number of registered futures: 1
[08:08:54.356] | : . ' , ; ` FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'add', earlySignal = 0) ... done
[08:08:54.356] | : . ' , ; launchFuture() ... done
[08:08:54.357] | : . ' , ; MultisessionFuture started
[08:08:54.357] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:54.357] | : . ' Launching futures ... done
[08:08:54.357] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:54.357] | : . Using MultisessionFutureBackend ... done
[08:08:54.357] | : run() for ‘Future’ (<unnamed-5>) ... done
[08:08:54.358] | : result() for ClusterFuture ...
[08:08:54.358] | : . assertValidConnection() ...
[08:08:54.358] | : . ' cluster node index: 1
[08:08:54.359] | : . assertValidConnection() ... done
[08:08:54.359] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:54.359] | : . ' cluster node index: 1
[08:08:54.447] | : . ' [1] TRUE
[08:08:54.448] | : . ' received data:
[08:08:54.448] | : . ' List of 5
[08:08:54.448] | : . '  $ type   : chr "VALUE"
[08:08:54.448] | : . '  $ value  :List of 16
[08:08:54.448] | : . '   ..$ value              :Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:08:54.448] | : . '   .. .. ..@ .Data     :function (x)  
[08:08:54.448] | : . '   .. .. ..@ generic   : chr "my_fcn"
[08:08:54.448] | : . '   .. .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:08:54.448] | : . '   .. .. ..@ package   : chr ".GlobalEnv"
[08:08:54.448] | : . '   .. .. ..@ group     : list()
[08:08:54.448] | : . '   .. .. ..@ valueClass: chr(0) 
[08:08:54.448] | : . '   .. .. ..@ signature : chr "x"
[08:08:54.448] | : . '   .. .. ..@ default   : NULL
[08:08:54.448] | : . '   .. .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:08:54.448] | : . '   ..$ visible            : logi TRUE
[08:08:54.448] | : . '   ..$ stdout             : chr ""
[08:08:54.448] | : . '   ..$ conditions         : list()
[08:08:54.448] | : . '   ..$ rng                : logi FALSE
[08:08:54.448] | : . '   ..$ seed               : NULL
[08:08:54.448] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:54.448] | : . '   ..$ misuseConnections  :List of 3
[08:08:54.448] | : . '   .. ..$ added   : NULL
[08:08:54.448] | : . '   .. ..$ removed : NULL
[08:08:54.448] | : . '   .. ..$ replaced: NULL
[08:08:54.448] | : . '   ..$ misuseDevices      : NULL
[08:08:54.448] | : . '   ..$ misuseDefaultDevice: list()
[08:08:54.448] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:54"
[08:08:54.448] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:54"
[08:08:54.448] | : . '   ..$ uuid               : chr [1:2] "a2305ea9be98730196f68c5055d0aa18" "5"
[08:08:54.448] | : . '   ..$ session_uuid       : chr "5eb465ee72a3d5f11f99bbbe725d9a71"
[08:08:54.448] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:54.448] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:54.448] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:54.448] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:54.448] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:54.448] | : . '   .. .. ..$ pid   : int 70281
[08:08:54.448] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:54"
[08:08:54.448] | : . '   .. .. ..$ random: int 2147483647
[08:08:54.448] | : . '   ..$ r_info             :List of 4
[08:08:54.448] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:54.448] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:54.448] | : . '   .. ..$ os           : chr "unix"
[08:08:54.448] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:54.448] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:54.448] | : . '   ..$ version            : chr "1.8"
[08:08:54.448] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:54.448] | : . '  $ success: logi TRUE
[08:08:54.448] | : . '  $ time   : 'proc_time' Named num [1:5] 0.048 0.001 0.05 0 0
[08:08:54.448] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:54.448] | : . '  $ tag    : NULL
[08:08:54.465] | : . ' Received FutureResult
[08:08:54.465] | : . ' FutureResult:
[08:08:54.465] | : . ' value: ‘standardGeneric’
[08:08:54.465] | : . ' visible: TRUE
[08:08:54.465] | : . ' stdout: character
[08:08:54.465] | : . ' conditions: [n = 0] 
[08:08:54.465] | : . ' RNG used: FALSE
[08:08:54.465] | : . ' duration: 0.04840612 secs (started 2025-06-17 08:08:54.398406)
[08:08:54.465] | : . ' version: 1.8
[08:08:54.466] | : . ' FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'remove', earlySignal = 0) ...
[08:08:54.466] | : . ' , Removed future from position #1
[08:08:54.466] | : . ' , Number of registered futures: 0
[08:08:54.467] | : . ' FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'remove', earlySignal = 0) ... done
[08:08:54.467] | : . ' Erased future from future backend
[08:08:54.467] | : . ' result() for ClusterFuture ...
[08:08:54.467] | : . ' , result already collected: FutureResult
[08:08:54.467] | : . ' result() for ClusterFuture ... done
[08:08:54.467] | : . ' signalConditions() ...
[08:08:54.467] | : . ' , include = ‘immediateCondition’
[08:08:54.467] | : . ' , exclude = 
[08:08:54.468] | : . ' , resignal = FALSE
[08:08:54.468] | : . ' , Number of conditions: 0
[08:08:54.468] | : . ' ,  int 0
[08:08:54.468] | : . ' signalConditions() ... done
[08:08:54.468] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:54.469] | : result() for ClusterFuture ... done
[08:08:54.469] | : result() for ClusterFuture ...
[08:08:54.469] | : . result already collected: FutureResult
[08:08:54.469] | : result() for ClusterFuture ... done
[08:08:54.469] | : signalConditions() ...
[08:08:54.469] | : . include = ‘immediateCondition’
[08:08:54.469] | : . exclude = 
[08:08:54.470] | : . resignal = FALSE
[08:08:54.470] | : . Number of conditions: 0
[08:08:54.470] | : .  int 0
[08:08:54.470] | : signalConditions() ... done
[08:08:54.470] | : relay stdout ...
[08:08:54.471] | : relay stdout ... done
[08:08:54.471] | : check for misuse ...
[08:08:54.471] | : check for misuse ... done
[08:08:54.471] | value() for Future (<unnamed-5>) ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x56440e522ce8>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[08:08:54.471] | future(..., label = NULL) ...
[08:08:54.471] | : lazy: TRUE
[08:08:54.472] | : stdout: TRUE
[08:08:54.472] | : conditions: [n=1] ‘condition’
[08:08:54.472] | : gc: FALSE
[08:08:54.472] | : earlySignal: FALSE
[08:08:54.472] | : getGlobalsAndPackages() ...
[08:08:54.472] | : . Searching for globals ...
[08:08:54.490] | : . ' globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:54.490] | : . Searching for globals ... done
[08:08:54.490] | : . Resolving globals: FALSE
[08:08:54.490] | : . Search for packages associated with the globals ...
[08:08:54.490] | : . ' Packages associated with globals: [1] ‘base’
[08:08:54.491] | : . ' Packages: [1] ‘base’
[08:08:54.491] | : . Search for packages associated with the globals ... done
[08:08:54.491] | : . Packages after dropping 'base': [0] 
[08:08:54.491] | : . globals: [1] ‘my_fcn’
[08:08:54.491] | : . packages: [0] 
[08:08:54.491] | : getGlobalsAndPackages() ... done
[08:08:54.491] | future(..., label = NULL) ... done
[08:08:54.492] | value() for Future (<unnamed-6>) ...
[08:08:54.492] | : run() for ‘Future’ (<unnamed-6>) ...
[08:08:54.492] | : . state: ‘created’
[08:08:54.492] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:54.492] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:54.492] | : . Using MultisessionFutureBackend ...
[08:08:54.492] | : . ' Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:54.492] | : . ' Launching futures ...
[08:08:54.493] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:54.493] | : . ' , ; Workers: [n=2]
[08:08:54.493] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:54.494] | : . ' , ; FutureRegistry: ‘workers-b5ceb45776bec83117259cc853e3874a’
[08:08:54.494] | : . ' , ; requestWorker() ...
[08:08:54.494] | : . ' , ; ` requestNode() ...
[08:08:54.495] | : . ' , ; ` | Number of workers: 2
[08:08:54.495] | : . ' , ; ` | Polling for a free worker ...
[08:08:54.495] | : . ' , ; ` | : FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ...
[08:08:54.495] | : . ' , ; ` | : . Listing all futures
[08:08:54.495] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:54.495] | : . ' , ; ` | : FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ... done
[08:08:54.495] | : . ' , ; ` | : Total time: 0
[08:08:54.495] | : . ' , ; ` | Polling for a free worker ... done
[08:08:54.495] | : . ' , ; ` | FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ...
[08:08:54.495] | : . ' , ; ` | : Listing all futures
[08:08:54.495] | : . ' , ; ` | : Number of registered futures: 0
[08:08:54.496] | : . ' , ; ` | FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ... done
[08:08:54.496] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:54.496] | : . ' , ; ` | Index of first available worker: 1
[08:08:54.496] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:54.553] | : . ' , ; ` | : Worker is functional
[08:08:54.553] | : . ' , ; ` | : FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ...
[08:08:54.553] | : . ' , ; ` | : . Listing all futures
[08:08:54.553] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:54.553] | : . ' , ; ` | : FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'list', earlySignal = 0) ... done
[08:08:54.553] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:54.553] | : . ' , ; ` requestNode() ... done
[08:08:54.554] | : . ' , ; ` cluster node index: 1
[08:08:54.554] | : . ' , ; requestWorker() ... done
[08:08:54.554] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:54.554] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:54.554] | : . ' , ; launchFuture() ...
[08:08:54.554] | : . ' , ; ` cluster node index: 1
[08:08:54.554] | : . ' , ; ` getFutureData() ...
[08:08:54.555] | : . ' , ; ` | getFutureCore() ...
[08:08:54.555] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:54.555] | : . ' , ; ` | getFutureCore() ... done
[08:08:54.555] | : . ' , ; ` | getFutureCapture() ...
[08:08:54.555] | : . ' , ; ` | getFutureCapture() ... done
[08:08:54.555] | : . ' , ; ` | getFutureContext() ...
[08:08:54.555] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:54.555] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:54.555] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:54.556] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:54.556] | : . ' , ; ` | getFutureContext() ... done
[08:08:54.556] | : . ' , ; ` getFutureData() ... done
[08:08:54.556] | : . ' , ; ` FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'add', earlySignal = 0) ...
[08:08:54.556] | : . ' , ; ` | Appended future to position #1
[08:08:54.556] | : . ' , ; ` | Number of registered futures: 1
[08:08:54.557] | : . ' , ; ` FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'add', earlySignal = 0) ... done
[08:08:54.557] | : . ' , ; launchFuture() ... done
[08:08:54.557] | : . ' , ; MultisessionFuture started
[08:08:54.557] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:54.557] | : . ' Launching futures ... done
[08:08:54.557] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:54.557] | : . Using MultisessionFutureBackend ... done
[08:08:54.557] | : run() for ‘Future’ (<unnamed-6>) ... done
[08:08:54.557] | : result() for ClusterFuture ...
[08:08:54.558] | : . assertValidConnection() ...
[08:08:54.558] | : . ' cluster node index: 1
[08:08:54.558] | : . assertValidConnection() ... done
[08:08:54.558] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:54.558] | : . ' cluster node index: 1
[08:08:54.600] | : . ' [1] TRUE
[08:08:54.600] | : . ' received data:
[08:08:54.601] | : . ' List of 5
[08:08:54.601] | : . '  $ type   : chr "VALUE"
[08:08:54.601] | : . '  $ value  :List of 16
[08:08:54.601] | : . '   ..$ value              : num -3
[08:08:54.601] | : . '   ..$ visible            : logi TRUE
[08:08:54.601] | : . '   ..$ stdout             : chr ""
[08:08:54.601] | : . '   ..$ conditions         : list()
[08:08:54.601] | : . '   ..$ rng                : logi FALSE
[08:08:54.601] | : . '   ..$ seed               : NULL
[08:08:54.601] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:54.601] | : . '   ..$ misuseConnections  :List of 3
[08:08:54.601] | : . '   .. ..$ added   : NULL
[08:08:54.601] | : . '   .. ..$ removed : NULL
[08:08:54.601] | : . '   .. ..$ replaced: NULL
[08:08:54.601] | : . '   ..$ misuseDevices      : NULL
[08:08:54.601] | : . '   ..$ misuseDefaultDevice: list()
[08:08:54.601] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:54"
[08:08:54.601] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:54"
[08:08:54.601] | : . '   ..$ uuid               : chr [1:2] "a2305ea9be98730196f68c5055d0aa18" "6"
[08:08:54.601] | : . '   ..$ session_uuid       : chr "5eb465ee72a3d5f11f99bbbe725d9a71"
[08:08:54.601] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:54.601] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:54.601] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:54.601] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:54.601] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:54.601] | : . '   .. .. ..$ pid   : int 70281
[08:08:54.601] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:54"
[08:08:54.601] | : . '   .. .. ..$ random: int 2147483647
[08:08:54.601] | : . '   ..$ r_info             :List of 4
[08:08:54.601] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:54.601] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:54.601] | : . '   .. ..$ os           : chr "unix"
[08:08:54.601] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:54.601] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:54.601] | : . '   ..$ version            : chr "1.8"
[08:08:54.601] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:54.601] | : . '  $ success: logi TRUE
[08:08:54.601] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0.001 0.003 0 0
[08:08:54.601] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:54.601] | : . '  $ tag    : NULL
[08:08:54.612] | : . ' Received FutureResult
[08:08:54.612] | : . ' FutureResult:
[08:08:54.612] | : . ' value: ‘numeric’
[08:08:54.612] | : . ' visible: TRUE
[08:08:54.612] | : . ' stdout: character
[08:08:54.612] | : . ' conditions: [n = 0] 
[08:08:54.612] | : . ' RNG used: FALSE
[08:08:54.612] | : . ' duration: 0.002807617 secs (started 2025-06-17 08:08:54.597197)
[08:08:54.612] | : . ' version: 1.8
[08:08:54.612] | : . ' FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'remove', earlySignal = 0) ...
[08:08:54.612] | : . ' , Removed future from position #1
[08:08:54.612] | : . ' , Number of registered futures: 0
[08:08:54.612] | : . ' FutureRegistry('workers-b5ceb45776bec83117259cc853e3874a', action = 'remove', earlySignal = 0) ... done
[08:08:54.613] | : . ' Erased future from future backend
[08:08:54.613] | : . ' result() for ClusterFuture ...
[08:08:54.613] | : . ' , result already collected: FutureResult
[08:08:54.613] | : . ' result() for ClusterFuture ... done
[08:08:54.613] | : . ' signalConditions() ...
[08:08:54.613] | : . ' , include = ‘immediateCondition’
[08:08:54.613] | : . ' , exclude = 
[08:08:54.613] | : . ' , resignal = FALSE
[08:08:54.613] | : . ' , Number of conditions: 0
[08:08:54.613] | : . ' ,  int 0
[08:08:54.614] | : . ' signalConditions() ... done
[08:08:54.614] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:54.614] | : result() for ClusterFuture ... done
[08:08:54.614] | : result() for ClusterFuture ...
[08:08:54.614] | : . result already collected: FutureResult
[08:08:54.614] | : result() for ClusterFuture ... done
[08:08:54.615] | : signalConditions() ...
[08:08:54.615] | : . include = ‘immediateCondition’
[08:08:54.615] | : . exclude = 
[08:08:54.615] | : . resignal = FALSE
[08:08:54.615] | : . Number of conditions: 0
[08:08:54.615] | : .  int 0
[08:08:54.615] | : signalConditions() ... done
[08:08:54.615] | : relay stdout ...
[08:08:54.616] | : relay stdout ... done
[08:08:54.616] | : check for misuse ...
[08:08:54.616] | : check for misuse ... done
[08:08:54.616] | value() for Future (<unnamed-6>) ... done
[1] -3
future.globals.keepWhere=TRUE
[08:08:54.616] | plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:54.616] | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:54.616] | : . all.equal() for FutureStrategyList ...
[08:08:54.617] | : . ' New stack:
[08:08:54.617] | : . ' List of 1
[08:08:54.617] | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:54.617] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:54.617] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:54.617] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:54.617] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:54.617] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:54.617] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:54.617] | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:54.619] | : . ' Old stack:
[08:08:54.619] | : . ' List of 1
[08:08:54.619] | : . '  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:54.619] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:54.619] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:54.619] | : . '   ..- attr(*, "init")= chr "done"
[08:08:54.619] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:54.619] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:54.619] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:54.619] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:54.619] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:54.619] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:54.619] | : . '   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440c453610> 
[08:08:54.619] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:54.619] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:54.619] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:54.619] | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:54.623] | : . ' Not identical
[08:08:54.623] | : . ' all.equal() for future ...
[08:08:54.623] | : . ' , List of 2
[08:08:54.623] | : . ' ,  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:54.623] | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:54.623] | : . ' ,   ..- attr(*, "init")= logi TRUE
[08:08:54.623] | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:54.623] | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:54.623] | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:54.623] | : . ' ,   ..- attr(*, "call")= language plan(sequential)
[08:08:54.623] | : . ' ,  $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:54.623] | : . ' ,     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:54.623] | : . ' ,   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:54.623] | : . ' ,   ..- attr(*, "init")= chr "done"
[08:08:54.623] | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:54.623] | : . ' ,     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:54.623] | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:54.623] | : . ' ,   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:54.623] | : . ' ,   ..- attr(*, "untweakable")= chr "persistent"
[08:08:54.623] | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:08:54.623] | : . ' ,   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56440c453610> 
[08:08:54.623] | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:54.623] | : . ' ,     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:54.623] | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:54.628] | : . ' , Formals differ
[08:08:54.628] | : . ' all.equal() for future ... done
[08:08:54.628] | : . ' Future strategies differ at level 1
[08:08:54.629] | : . all.equal() for FutureStrategyList ... done
[08:08:54.629] | : . plan(): Setting new future backend stack:
[08:08:54.629] | : . List of future strategies:
[08:08:54.629] | : . 1. sequential:
[08:08:54.629] | : .    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:54.629] | : .    - tweaked: FALSE
[08:08:54.629] | : .    - call: plan(sequential)
[08:08:54.629] | : . List of 1
[08:08:54.629] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:54.629] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:54.629] | : .   ..- attr(*, "init")= logi TRUE
[08:08:54.629] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:54.629] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:54.629] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:54.629] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:54.629] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:54.632] | : . plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:54.632] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:54.632] | : . ' , Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:08:54.632] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:54.632] | : . ' stopWorkers() for MultisessionFutureBackend ...
[08:08:54.632] | : . ' , Interrupt active futures ...
[08:08:54.633] | : . ' , ; Number of futures: 0
[08:08:54.633] | : . ' , Interrupt active futures ... done
[08:08:54.633] | : . ' , Clear future registry ...
[08:08:54.634] | : . ' , Clear future registry ... done
[08:08:54.634] | : . ' , Stop cluster workers ...
[08:08:54.634] | : . ' , ; Stopping existing cluster ...
[08:08:54.634] | : . ' , ; ` Cluster to shut down:
[08:08:54.634] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:54.653] | : . ' , ; ` Stopped cluster: ‘c(TRUE, TRUE)’
[08:08:54.689] | : . ' , ; Stopping existing cluster ... done
[08:08:54.689] | : . ' , Stop cluster workers ... done
[08:08:54.689] | : . ' stopWorkers() for MultisessionFutureBackend ... done
[08:08:54.689] | : . ' Legacy shutdown of cluster workers ...
[08:08:54.690] | : . ' , Stopping existing cluster ...
[08:08:54.690] | : . ' , ; No pre-existing cluster. Skipping
[08:08:54.690] | : . ' , Stopping existing cluster ... done
[08:08:54.690] | : . ' Legacy shutdown of cluster workers ... done
[08:08:54.690] | : . plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:54.690] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:54.690] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:54.690] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:54.690] | : . '  - attr(*, "init")= logi TRUE
[08:08:54.690] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:54.690] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:54.690] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:54.690] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:54.692] | : . ' init: TRUE
[08:08:54.692] | : . ' makeFutureBackend(<sequential>) ...
[08:08:54.693] | : . ' , Backend function: <‘NULL’>
[08:08:54.693] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:54.693] | : . ' ,  list()
[08:08:54.693] | : . ' , Evaluator formal arguments: [n=2]
[08:08:54.693] | : . ' ,  list()
[08:08:54.693] | : . ' , Backend factory arguments: [n=2]
[08:08:54.693] | : . ' , Dotted pair list of 2
[08:08:54.693] | : . ' ,  $ gc         : logi FALSE
[08:08:54.693] | : . ' ,  $ earlySignal: logi FALSE
[08:08:54.695] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:54.695] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:54.695] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:54.695] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:54.695] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:54.695] | : . plan(): nbrOfWorkers() = 1
[08:08:54.695] | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:54.695] | plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done

> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.7s, sys.self=0.05s, elapsed=1s, user.child=0.3s, sys.child=0.4s
Test ‘globals,S4methods’ ... success
> 
