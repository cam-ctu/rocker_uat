
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-futureAssign.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futureAssign")
Test ‘futureAssign’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futureAssign.R’

> library(future)
[08:08:10.942] Option 'future.startup.script': TRUE
[08:08:10.942] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:10.942] Future startup scripts found: <none>

> message("*** futureAssign() ...")
*** futureAssign() ...

> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...

> delayedAssign("a", {
+     cat("Delayed assignment evaluated\n")
+     1
+ })

> futureAssign("b", {
+     cat("Future assignment evaluated\n")
+     2
+ }, lazy = TRUE)
[08:08:10.943] future(..., label = NULL) ...
[08:08:10.944] | lazy: TRUE
[08:08:10.944] | stdout: TRUE
[08:08:10.944] | conditions: [n=1] ‘condition’
[08:08:10.944] | gc: FALSE
[08:08:10.944] | earlySignal: FALSE
[08:08:10.945] | getGlobalsAndPackages() ...
[08:08:10.945] | : Searching for globals ...
[08:08:10.958] | : . globals found: [2] ‘{’, ‘cat’
[08:08:10.958] | : Searching for globals ... done
[08:08:10.958] | : Resolving globals: FALSE
[08:08:10.958] | : Search for packages associated with the globals ...
[08:08:10.959] | : . Packages associated with globals: [1] ‘base’
[08:08:10.959] | : . Packages: [1] ‘base’
[08:08:10.959] | : Search for packages associated with the globals ... done
[08:08:10.959] | : Packages after dropping 'base': [0] 
[08:08:10.959] | : globals: [0] 
[08:08:10.959] | : packages: [0] 
[08:08:10.960] | getGlobalsAndPackages() ... done
[08:08:10.960] future(..., label = NULL) ... done

> cat(sprintf("b = %s\n", b))
[08:08:10.961] value() for Future (<unnamed-1>) ...
[08:08:10.961] | run() for ‘Future’ (<unnamed-1>) ...
[08:08:10.961] | : state: ‘created’
[08:08:10.961] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.961] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:10.961] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:10.961] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:10.961] | : . '  - attr(*, "init")= logi TRUE
[08:08:10.961] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.961] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.961] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.961] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:10.965] | : . ' init: TRUE
[08:08:10.966] | : . ' makeFutureBackend(<sequential>) ...
[08:08:10.966] | : . ' , Backend function: <‘NULL’>
[08:08:10.966] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:10.966] | : . ' ,  list()
[08:08:10.966] | : . ' , Evaluator formal arguments: [n=2]
[08:08:10.966] | : . ' ,  list()
[08:08:10.966] | : . ' , Backend factory arguments: [n=2]
[08:08:10.967] | : . ' , Dotted pair list of 2
[08:08:10.967] | : . ' ,  $ gc         : logi FALSE
[08:08:10.967] | : . ' ,  $ earlySignal: logi FALSE
[08:08:10.968] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:10.968] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:10.968] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:10.968] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.968] | : Using SequentialFutureBackend ...
[08:08:10.968] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:10.968] | : . Launching futures ...
[08:08:10.969] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:10.969] | : . ' , getFutureData() ...
[08:08:10.969] | : . ' , ; getFutureCore() ...
[08:08:10.969] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:10.969] | : . ' , ; getFutureCore() ... done
[08:08:10.969] | : . ' , ; getFutureCapture() ...
[08:08:10.969] | : . ' , ; getFutureCapture() ... done
[08:08:10.970] | : . ' , ; getFutureContext() ...
[08:08:10.970] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.970] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:10.970] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.970] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:10.970] | : . ' , ; getFutureContext() ... done
[08:08:10.970] | : . ' , getFutureData() ... done
[08:08:10.973] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.973] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:10.973] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.973] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:10.973] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:10.974] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:10.974] | : . ' , ; ` | New stack:
[08:08:10.974] | : . ' , ; ` | List of 1
[08:08:10.974] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:10.974] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:10.974] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:10.974] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.974] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.974] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.974] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:10.974] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:10.976] | : . ' , ; ` | Old stack:
[08:08:10.976] | : . ' , ; ` | List of 1
[08:08:10.976] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:10.976] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:10.976] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:10.976] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.976] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.976] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.976] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:10.976] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:10.976] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.976] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.976] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:10.980] | : . ' , ; ` | Not identical
[08:08:10.980] | : . ' , ; ` | all.equal() for future ...
[08:08:10.980] | : . ' , ; ` | : List of 2
[08:08:10.980] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.980] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:10.980] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.980] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:10.980] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:10.980] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.980] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.986] | : . ' , ; ` | all.equal() for future ... done
[08:08:10.987] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:10.987] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:10.987] | : . ' , ; ` List of future strategies:
[08:08:10.987] | : . ' , ; ` 1. sequential:
[08:08:10.987] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:10.987] | : . ' , ; `    - tweaked: FALSE
[08:08:10.987] | : . ' , ; `    - call: plan(sequential)
[08:08:10.987] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:10.988] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:10.990] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:10.990] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:10.990] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:10.990] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:10.990] | : . ' , ; ` | : New stack:
[08:08:10.990] | : . ' , ; ` | : List of 1
[08:08:10.990] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:10.990] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:10.990] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:10.990] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.990] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.990] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.990] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:10.990] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:10.990] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.990] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.990] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:10.993] | : . ' , ; ` | : Old stack:
[08:08:10.994] | : . ' , ; ` | : List of 1
[08:08:10.994] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:10.994] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:10.994] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:10.994] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.994] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.994] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.994] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:10.994] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:10.994] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:10.994] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:10.994] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:10.997] | : . ' , ; ` | : Identical
[08:08:10.997] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:10.997] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:10.997] | : . ' , ; ` | List of future strategies:
[08:08:10.997] | : . ' , ; ` | 1. sequential:
[08:08:10.997] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:10.997] | : . ' , ; ` |    - tweaked: FALSE
[08:08:10.997] | : . ' , ; ` |    - call: plan(sequential)
[08:08:10.997] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:10.997] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:10.997] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.000] | : . ' , SequentialFuture started (and completed)
[08:08:11.001] | : . ' , signalConditions() ...
[08:08:11.001] | : . ' , ; include = ‘immediateCondition’
[08:08:11.001] | : . ' , ; exclude = 
[08:08:11.001] | : . ' , ; resignal = FALSE
[08:08:11.001] | : . ' , ; Number of conditions: 6
[08:08:11.001] | : . ' , ;  int 6
[08:08:11.002] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.002] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.002] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.002] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.002] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.002] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.002] | : . ' , signalConditions() ... done
[08:08:11.003] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:11.003] | : . Launching futures ... done
[08:08:11.004] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:11.004] | : Using SequentialFutureBackend ... done
[08:08:11.004] | run() for ‘Future’ (<unnamed-1>) ... done
[08:08:11.004] | signalConditions() ...
[08:08:11.004] | : include = ‘immediateCondition’
[08:08:11.004] | : exclude = 
[08:08:11.004] | : resignal = FALSE
[08:08:11.004] | : Number of conditions: 6
[08:08:11.004] | :  int 6
[08:08:11.005] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.005] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.005] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.005] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.005] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.005] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.006] | signalConditions() ... done
[08:08:11.006] | relay stdout ...
Future assignment evaluated
[08:08:11.006] | relay stdout ... done
[08:08:11.006] | check for misuse ...
[08:08:11.006] | check for misuse ... done
[08:08:11.006] | relay conditions ...
[08:08:11.006] | : Future state: ‘finished’
[08:08:11.006] | : signalConditions() ...
[08:08:11.006] | : . include = ‘condition’
[08:08:11.006] | : . exclude = ‘immediateCondition’
[08:08:11.007] | : . resignal = TRUE
[08:08:11.007] | : . Number of conditions: 6
[08:08:11.007] | : .  int 6
[08:08:11.007] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.007] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:10.972] | : . ' , attachPackages() ...
[08:08:11.007] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.007] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:10.972] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.008] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.008] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:10.972] | : . ' , attachPackages() ... done
[08:08:11.008] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.008] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:10.972] | : . ' , attachPackages() ...
[08:08:11.008] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.008] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:10.972] | : . ' , ; packages: [n=0] 
[08:08:11.008] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.008] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:10.972] | : . ' , attachPackages() ... done
[08:08:11.008] | : signalConditions() ... done
[08:08:11.009] | relay conditions ... done
[08:08:11.009] value() for Future (<unnamed-1>) ... done
b = 2

> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1

> stopifnot(identical(a, 1))

> stopifnot(identical(b, 2))

> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE

> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     for (strategy in supp .... [TRUNCATED] 
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[08:08:11.030] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.030] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:11.030] | : all.equal() for FutureStrategyList ...
[08:08:11.031] | : . New stack:
[08:08:11.031] | : . List of 1
[08:08:11.031] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.031] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.031] | : .   ..- attr(*, "init")= logi TRUE
[08:08:11.031] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.031] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.031] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.031] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:11.031] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.033] | : . Old stack:
[08:08:11.033] | : . List of 1
[08:08:11.033] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.033] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.033] | : .   ..- attr(*, "init")= chr "done"
[08:08:11.033] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.033] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.033] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.033] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:11.033] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.033] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.033] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.033] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.036] | : . Not identical
[08:08:11.036] | : . all.equal() for future ...
[08:08:11.036] | : . ' List of 2
[08:08:11.036] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.036] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.036] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:11.036] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.036] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.036] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.036] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:11.036] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.036] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.036] | : . '   ..- attr(*, "init")= chr "done"
[08:08:11.036] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.036] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.036] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.036] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:11.036] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.036] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.036] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.042] | : . all.equal() for future ... done
[08:08:11.042] | : all.equal() for FutureStrategyList ... done
[08:08:11.043] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.043] | : List of future strategies:
[08:08:11.043] | : 1. sequential:
[08:08:11.043] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.043] | :    - tweaked: FALSE
[08:08:11.043] | :    - call: plan(sequential)
[08:08:11.043] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:11.043] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.043] future(..., label = NULL) ...
[08:08:11.043] | lazy: FALSE
[08:08:11.043] | stdout: TRUE
[08:08:11.044] | conditions: [n=1] ‘condition’
[08:08:11.044] | gc: FALSE
[08:08:11.044] | earlySignal: FALSE
[08:08:11.044] | getGlobalsAndPackages() ...
[08:08:11.044] | : Searching for globals ...
[08:08:11.047] | : . globals found: [1] ‘{’
[08:08:11.047] | : Searching for globals ... done
[08:08:11.047] | : Resolving globals: FALSE
[08:08:11.047] | : Search for packages associated with the globals ...
[08:08:11.047] | : . Packages associated with globals: [1] ‘base’
[08:08:11.047] | : . Packages: [1] ‘base’
[08:08:11.047] | : Search for packages associated with the globals ... done
[08:08:11.048] | : Packages after dropping 'base': [0] 
[08:08:11.048] | : globals: [0] 
[08:08:11.048] | : packages: [0] 
[08:08:11.048] | getGlobalsAndPackages() ... done
[08:08:11.048] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:11.048] | : state: ‘created’
[08:08:11.048] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.048] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.049] | : Using SequentialFutureBackend ...
[08:08:11.049] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:11.049] | : . Launching futures ...
[08:08:11.049] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:11.049] | : . ' , getFutureData() ...
[08:08:11.049] | : . ' , ; getFutureCore() ...
[08:08:11.049] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.049] | : . ' , ; getFutureCore() ... done
[08:08:11.049] | : . ' , ; getFutureCapture() ...
[08:08:11.049] | : . ' , ; getFutureCapture() ... done
[08:08:11.050] | : . ' , ; getFutureContext() ...
[08:08:11.050] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.050] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.050] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.050] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.050] | : . ' , ; getFutureContext() ... done
[08:08:11.050] | : . ' , getFutureData() ... done
[08:08:11.051] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.052] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.052] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.052] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.052] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.052] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.052] | : . ' , ; ` | New stack:
[08:08:11.052] | : . ' , ; ` | List of 1
[08:08:11.052] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.052] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.052] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.052] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.052] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.052] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.052] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.052] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.055] | : . ' , ; ` | Old stack:
[08:08:11.055] | : . ' , ; ` | List of 1
[08:08:11.055] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.055] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.055] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.055] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.055] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.055] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.055] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:11.055] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.055] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.055] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.055] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.059] | : . ' , ; ` | Not identical
[08:08:11.059] | : . ' , ; ` | all.equal() for future ...
[08:08:11.059] | : . ' , ; ` | : List of 2
[08:08:11.059] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.059] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.059] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.059] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.059] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.059] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.059] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.064] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.064] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.064] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.064] | : . ' , ; ` List of future strategies:
[08:08:11.064] | : . ' , ; ` 1. sequential:
[08:08:11.064] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.064] | : . ' , ; `    - tweaked: FALSE
[08:08:11.064] | : . ' , ; `    - call: plan(sequential)
[08:08:11.065] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.065] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.066] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.066] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.066] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.066] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.067] | : . ' , ; ` | : New stack:
[08:08:11.067] | : . ' , ; ` | : List of 1
[08:08:11.067] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.067] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.067] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.067] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.067] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.067] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.067] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.067] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.067] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.067] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.067] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.070] | : . ' , ; ` | : Old stack:
[08:08:11.070] | : . ' , ; ` | : List of 1
[08:08:11.070] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.070] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.070] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.070] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.070] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.070] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.070] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.070] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.070] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.070] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.070] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.073] | : . ' , ; ` | : Identical
[08:08:11.073] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.073] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.073] | : . ' , ; ` | List of future strategies:
[08:08:11.073] | : . ' , ; ` | 1. sequential:
[08:08:11.073] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.073] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.073] | : . ' , ; ` |    - call: plan(sequential)
[08:08:11.073] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.074] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.074] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.074] | : . ' , SequentialFuture started (and completed)
[08:08:11.074] | : . ' , signalConditions() ...
[08:08:11.074] | : . ' , ; include = ‘immediateCondition’
[08:08:11.074] | : . ' , ; exclude = 
[08:08:11.074] | : . ' , ; resignal = FALSE
[08:08:11.074] | : . ' , ; Number of conditions: 6
[08:08:11.075] | : . ' , ;  int 6
[08:08:11.075] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.075] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.075] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.075] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.075] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.076] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.076] | : . ' , signalConditions() ... done
[08:08:11.076] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:11.077] | : . Launching futures ... done
[08:08:11.077] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:11.077] | : Using SequentialFutureBackend ... done
[08:08:11.077] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:11.077] future(..., label = NULL) ... done
[08:08:11.078] future(..., label = NULL) ...
[08:08:11.078] | lazy: FALSE
[08:08:11.078] | stdout: TRUE
[08:08:11.078] | conditions: [n=1] ‘condition’
[08:08:11.078] | gc: FALSE
[08:08:11.078] | earlySignal: FALSE
[08:08:11.078] | getGlobalsAndPackages() ...
[08:08:11.078] | : Searching for globals ...
[08:08:11.081] | : . globals found: [1] ‘{’
[08:08:11.081] | : Searching for globals ... done
[08:08:11.081] | : Resolving globals: FALSE
[08:08:11.082] | : Search for packages associated with the globals ...
[08:08:11.082] | : . Packages associated with globals: [1] ‘base’
[08:08:11.082] | : . Packages: [1] ‘base’
[08:08:11.082] | : Search for packages associated with the globals ... done
[08:08:11.082] | : Packages after dropping 'base': [0] 
[08:08:11.082] | : globals: [0] 
[08:08:11.082] | : packages: [0] 
[08:08:11.082] | getGlobalsAndPackages() ... done
[08:08:11.083] | run() for ‘Future’ (<unnamed-3>) ...
[08:08:11.083] | : state: ‘created’
[08:08:11.083] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.083] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.083] | : Using SequentialFutureBackend ...
[08:08:11.083] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:11.083] | : . Launching futures ...
[08:08:11.083] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:11.084] | : . ' , getFutureData() ...
[08:08:11.084] | : . ' , ; getFutureCore() ...
[08:08:11.084] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.084] | : . ' , ; getFutureCore() ... done
[08:08:11.084] | : . ' , ; getFutureCapture() ...
[08:08:11.084] | : . ' , ; getFutureCapture() ... done
[08:08:11.084] | : . ' , ; getFutureContext() ...
[08:08:11.084] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.084] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.085] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.085] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.085] | : . ' , ; getFutureContext() ... done
[08:08:11.085] | : . ' , getFutureData() ... done
[08:08:11.086] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.086] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.086] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.087] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.087] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.087] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.087] | : . ' , ; ` | New stack:
[08:08:11.087] | : . ' , ; ` | List of 1
[08:08:11.087] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.087] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.087] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.087] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.087] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.087] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.087] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.087] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.090] | : . ' , ; ` | Old stack:
[08:08:11.090] | : . ' , ; ` | List of 1
[08:08:11.090] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.090] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.090] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.090] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.090] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.090] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.090] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:11.090] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.090] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.090] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.090] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.093] | : . ' , ; ` | Not identical
[08:08:11.093] | : . ' , ; ` | all.equal() for future ...
[08:08:11.093] | : . ' , ; ` | : List of 2
[08:08:11.093] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.093] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.093] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.093] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.093] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.093] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.093] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.099] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.099] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.100] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.100] | : . ' , ; ` List of future strategies:
[08:08:11.100] | : . ' , ; ` 1. sequential:
[08:08:11.100] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.100] | : . ' , ; `    - tweaked: FALSE
[08:08:11.100] | : . ' , ; `    - call: plan(sequential)
[08:08:11.100] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.100] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.102] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.102] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.102] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.102] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.102] | : . ' , ; ` | : New stack:
[08:08:11.102] | : . ' , ; ` | : List of 1
[08:08:11.102] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.102] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.102] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.102] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.102] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.102] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.102] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.102] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.102] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.102] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.102] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.105] | : . ' , ; ` | : Old stack:
[08:08:11.106] | : . ' , ; ` | : List of 1
[08:08:11.106] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.106] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.106] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.106] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.106] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.106] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.106] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.106] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.106] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.106] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.106] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.109] | : . ' , ; ` | : Identical
[08:08:11.109] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.109] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.109] | : . ' , ; ` | List of future strategies:
[08:08:11.109] | : . ' , ; ` | 1. sequential:
[08:08:11.109] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.109] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.109] | : . ' , ; ` |    - call: plan(sequential)
[08:08:11.109] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.109] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.110] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.110] | : . ' , SequentialFuture started (and completed)
[08:08:11.110] | : . ' , signalConditions() ...
[08:08:11.110] | : . ' , ; include = ‘immediateCondition’
[08:08:11.110] | : . ' , ; exclude = 
[08:08:11.110] | : . ' , ; resignal = FALSE
[08:08:11.110] | : . ' , ; Number of conditions: 6
[08:08:11.110] | : . ' , ;  int 6
[08:08:11.111] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.111] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.111] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.111] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.111] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.111] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.112] | : . ' , signalConditions() ... done
[08:08:11.112] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:11.112] | : . Launching futures ... done
[08:08:11.112] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:11.112] | : Using SequentialFutureBackend ... done
[08:08:11.112] | run() for ‘Future’ (<unnamed-3>) ... done
[08:08:11.112] future(..., label = NULL) ... done
[08:08:11.112] value() for SequentialFuture (<unnamed-2>) ...
[08:08:11.112] | signalConditions() ...
[08:08:11.113] | : include = ‘immediateCondition’
[08:08:11.113] | : exclude = 
[08:08:11.113] | : resignal = FALSE
[08:08:11.113] | : Number of conditions: 6
[08:08:11.113] | :  int 6
[08:08:11.113] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.113] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.114] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.114] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.114] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.114] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.114] | signalConditions() ... done
[08:08:11.114] | relay stdout ...
[08:08:11.114] | relay stdout ... done
[08:08:11.114] | check for misuse ...
[08:08:11.114] | check for misuse ... done
[08:08:11.114] | relay conditions ...
[08:08:11.115] | : Future state: ‘finished’
[08:08:11.115] | : signalConditions() ...
[08:08:11.115] | : . include = ‘condition’
[08:08:11.115] | : . exclude = ‘immediateCondition’
[08:08:11.115] | : . resignal = TRUE
[08:08:11.115] | : . Number of conditions: 6
[08:08:11.115] | : .  int 6
[08:08:11.116] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.116] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.050] | : . ' , attachPackages() ...
[08:08:11.116] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.116] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.051] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.116] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.116] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.051] | : . ' , attachPackages() ... done
[08:08:11.116] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.118] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.051] | : . ' , attachPackages() ...
[08:08:11.118] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.118] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.051] | : . ' , ; packages: [n=0] 
[08:08:11.118] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.118] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.051] | : . ' , attachPackages() ... done
[08:08:11.118] | : signalConditions() ... done
[08:08:11.118] | relay conditions ... done
[08:08:11.118] value() for SequentialFuture (<unnamed-2>) ... done
u$a = 2
[08:08:11.119] value() for SequentialFuture (<unnamed-3>) ...
[08:08:11.119] | signalConditions() ...
[08:08:11.119] | : include = ‘immediateCondition’
[08:08:11.119] | : exclude = 
[08:08:11.119] | : resignal = FALSE
[08:08:11.119] | : Number of conditions: 6
[08:08:11.119] | :  int 6
[08:08:11.120] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.120] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.120] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.120] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.120] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.120] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.120] | signalConditions() ... done
[08:08:11.120] | relay stdout ...
[08:08:11.120] | relay stdout ... done
[08:08:11.120] | check for misuse ...
[08:08:11.121] | check for misuse ... done
[08:08:11.121] | relay conditions ...
[08:08:11.121] | : Future state: ‘finished’
[08:08:11.121] | : signalConditions() ...
[08:08:11.121] | : . include = ‘condition’
[08:08:11.121] | : . exclude = ‘immediateCondition’
[08:08:11.121] | : . resignal = TRUE
[08:08:11.121] | : . Number of conditions: 6
[08:08:11.121] | : .  int 6
[08:08:11.122] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.122] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.085] | : . ' , attachPackages() ...
[08:08:11.122] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.122] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.085] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.122] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.122] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.085] | : . ' , attachPackages() ... done
[08:08:11.122] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.123] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.086] | : . ' , attachPackages() ...
[08:08:11.123] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.123] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.086] | : . ' , ; packages: [n=0] 
[08:08:11.123] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.123] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.086] | : . ' , attachPackages() ... done
[08:08:11.123] | : signalConditions() ... done
[08:08:11.123] | relay conditions ... done
[08:08:11.123] value() for SequentialFuture (<unnamed-3>) ... done
v$a = 4
[08:08:11.123] future(..., label = NULL) ...
[08:08:11.124] | lazy: FALSE
[08:08:11.124] | stdout: TRUE
[08:08:11.124] | conditions: [n=1] ‘condition’
[08:08:11.124] | gc: FALSE
[08:08:11.124] | earlySignal: FALSE
[08:08:11.124] | getGlobalsAndPackages() ...
[08:08:11.124] | : Searching for globals ...
[08:08:11.129] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:11.129] | : Searching for globals ... done
[08:08:11.129] | : Resolving globals: FALSE
[08:08:11.129] | : Search for packages associated with the globals ...
[08:08:11.130] | : . Packages associated with globals: [1] ‘base’
[08:08:11.130] | : . Packages: [1] ‘base’
[08:08:11.130] | : Search for packages associated with the globals ... done
[08:08:11.130] | : Packages after dropping 'base': [0] 
[08:08:11.130] | : globals: [1] ‘a’
[08:08:11.130] | : packages: [0] 
[08:08:11.131] | getGlobalsAndPackages() ... done
[08:08:11.131] | run() for ‘Future’ (<unnamed-4>) ...
[08:08:11.131] | : state: ‘created’
[08:08:11.131] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.131] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.131] | : Using SequentialFutureBackend ...
[08:08:11.131] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:11.131] | : . Launching futures ...
[08:08:11.131] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:11.132] | : . ' , getFutureData() ...
[08:08:11.132] | : . ' , ; getFutureCore() ...
[08:08:11.132] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.132] | : . ' , ; getFutureCore() ... done
[08:08:11.132] | : . ' , ; getFutureCapture() ...
[08:08:11.132] | : . ' , ; getFutureCapture() ... done
[08:08:11.132] | : . ' , ; getFutureContext() ...
[08:08:11.132] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.132] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.133] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.133] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.133] | : . ' , ; getFutureContext() ... done
[08:08:11.133] | : . ' , getFutureData() ... done
[08:08:11.134] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.134] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.134] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.134] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.135] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.135] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.135] | : . ' , ; ` | New stack:
[08:08:11.135] | : . ' , ; ` | List of 1
[08:08:11.135] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.135] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.135] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.135] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.135] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.135] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.135] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.135] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.138] | : . ' , ; ` | Old stack:
[08:08:11.138] | : . ' , ; ` | List of 1
[08:08:11.138] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.138] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.138] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.138] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.138] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.138] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.138] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:11.138] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.138] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.138] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.138] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.141] | : . ' , ; ` | Not identical
[08:08:11.142] | : . ' , ; ` | all.equal() for future ...
[08:08:11.142] | : . ' , ; ` | : List of 2
[08:08:11.142] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.142] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.142] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.142] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.142] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.142] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.142] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.147] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.147] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.147] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.147] | : . ' , ; ` List of future strategies:
[08:08:11.147] | : . ' , ; ` 1. sequential:
[08:08:11.147] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.147] | : . ' , ; `    - tweaked: FALSE
[08:08:11.147] | : . ' , ; `    - call: plan(sequential)
[08:08:11.147] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.147] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.148] | : . ' , assign_globals() ...
[08:08:11.148] | : . ' , List of 1
[08:08:11.148] | : . ' ,  $ a: num 1
[08:08:11.148] | : . ' ,  - attr(*, "where")=List of 1
[08:08:11.148] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:08:11.148] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.148] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.148] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.148] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.150] | : . ' , - copied ‘a’ to environment
[08:08:11.150] | : . ' , assign_globals() ... done
[08:08:11.152] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.152] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.152] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.152] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.152] | : . ' , ; ` | : New stack:
[08:08:11.153] | : . ' , ; ` | : List of 1
[08:08:11.153] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.153] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.153] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.153] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.153] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.153] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.153] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.153] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.153] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.153] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.153] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.157] | : . ' , ; ` | : Old stack:
[08:08:11.157] | : . ' , ; ` | : List of 1
[08:08:11.157] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.157] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.157] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.157] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.157] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.157] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.157] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.157] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.157] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.157] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.157] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.160] | : . ' , ; ` | : Identical
[08:08:11.160] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.160] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.161] | : . ' , ; ` | List of future strategies:
[08:08:11.161] | : . ' , ; ` | 1. sequential:
[08:08:11.161] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.161] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.161] | : . ' , ; ` |    - call: plan(sequential)
[08:08:11.161] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.161] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.161] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.162] | : . ' , SequentialFuture started (and completed)
[08:08:11.162] | : . ' , signalConditions() ...
[08:08:11.162] | : . ' , ; include = ‘immediateCondition’
[08:08:11.162] | : . ' , ; exclude = 
[08:08:11.162] | : . ' , ; resignal = FALSE
[08:08:11.162] | : . ' , ; Number of conditions: 6
[08:08:11.162] | : . ' , ;  int 6
[08:08:11.163] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.163] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.163] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.163] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.163] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.163] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.163] | : . ' , signalConditions() ... done
[08:08:11.163] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:11.163] | : . Launching futures ... done
[08:08:11.163] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:11.164] | : Using SequentialFutureBackend ... done
[08:08:11.164] | run() for ‘Future’ (<unnamed-4>) ... done
[08:08:11.164] future(..., label = NULL) ... done
[08:08:11.164] value() for SequentialFuture (<unnamed-4>) ...
[08:08:11.164] | signalConditions() ...
[08:08:11.164] | : include = ‘immediateCondition’
[08:08:11.164] | : exclude = 
[08:08:11.164] | : resignal = FALSE
[08:08:11.164] | : Number of conditions: 6
[08:08:11.165] | :  int 6
[08:08:11.165] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.165] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.165] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.165] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.165] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.165] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.166] | signalConditions() ... done
[08:08:11.166] | relay stdout ...
[08:08:11.166] | relay stdout ... done
[08:08:11.166] | check for misuse ...
[08:08:11.166] | check for misuse ... done
[08:08:11.166] | relay conditions ...
[08:08:11.166] | : Future state: ‘finished’
[08:08:11.166] | : signalConditions() ...
[08:08:11.166] | : . include = ‘condition’
[08:08:11.166] | : . exclude = ‘immediateCondition’
[08:08:11.167] | : . resignal = TRUE
[08:08:11.167] | : . Number of conditions: 6
[08:08:11.167] | : .  int 6
[08:08:11.167] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.167] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.133] | : . ' , attachPackages() ...
[08:08:11.167] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.167] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.133] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.168] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.168] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.133] | : . ' , attachPackages() ... done
[08:08:11.168] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.168] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.133] | : . ' , attachPackages() ...
[08:08:11.168] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.168] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.134] | : . ' , ; packages: [n=0] 
[08:08:11.168] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.168] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.134] | : . ' , attachPackages() ... done
[08:08:11.169] | : signalConditions() ... done
[08:08:11.169] | relay conditions ... done
[08:08:11.169] value() for SequentialFuture (<unnamed-4>) ... done
[08:08:11.169] future(..., label = NULL) ...
[08:08:11.169] | lazy: FALSE
[08:08:11.169] | stdout: TRUE
[08:08:11.169] | conditions: [n=1] ‘condition’
[08:08:11.169] | gc: FALSE
[08:08:11.169] | earlySignal: FALSE
[08:08:11.169] | getGlobalsAndPackages() ...
[08:08:11.169] | : Searching for globals ...
[08:08:11.175] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:11.176] | : Searching for globals ... done
[08:08:11.176] | : Resolving globals: FALSE
[08:08:11.176] | : Search for packages associated with the globals ...
[08:08:11.176] | : . Packages associated with globals: [1] ‘base’
[08:08:11.176] | : . Packages: [1] ‘base’
[08:08:11.176] | : Search for packages associated with the globals ... done
[08:08:11.176] | : Packages after dropping 'base': [0] 
[08:08:11.177] | : globals: [1] ‘a’
[08:08:11.177] | : packages: [0] 
[08:08:11.177] | getGlobalsAndPackages() ... done
[08:08:11.177] | run() for ‘Future’ (<unnamed-5>) ...
[08:08:11.177] | : state: ‘created’
[08:08:11.177] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.177] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.177] | : Using SequentialFutureBackend ...
[08:08:11.178] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:11.178] | : . Launching futures ...
[08:08:11.178] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:11.178] | : . ' , getFutureData() ...
[08:08:11.178] | : . ' , ; getFutureCore() ...
[08:08:11.178] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.178] | : . ' , ; getFutureCore() ... done
[08:08:11.178] | : . ' , ; getFutureCapture() ...
[08:08:11.178] | : . ' , ; getFutureCapture() ... done
[08:08:11.179] | : . ' , ; getFutureContext() ...
[08:08:11.179] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.179] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.179] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.179] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.179] | : . ' , ; getFutureContext() ... done
[08:08:11.179] | : . ' , getFutureData() ... done
[08:08:11.180] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.180] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.181] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.181] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.181] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.181] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.181] | : . ' , ; ` | New stack:
[08:08:11.181] | : . ' , ; ` | List of 1
[08:08:11.181] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.181] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.181] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.181] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.181] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.181] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.181] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.181] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.184] | : . ' , ; ` | Old stack:
[08:08:11.184] | : . ' , ; ` | List of 1
[08:08:11.184] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.184] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.184] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.184] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.184] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.184] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.184] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:11.184] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.184] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.184] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.184] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.187] | : . ' , ; ` | Not identical
[08:08:11.187] | : . ' , ; ` | all.equal() for future ...
[08:08:11.187] | : . ' , ; ` | : List of 2
[08:08:11.187] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.187] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.187] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.187] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.187] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.187] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.187] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.192] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.192] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.192] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.192] | : . ' , ; ` List of future strategies:
[08:08:11.192] | : . ' , ; ` 1. sequential:
[08:08:11.192] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.192] | : . ' , ; `    - tweaked: FALSE
[08:08:11.192] | : . ' , ; `    - call: plan(sequential)
[08:08:11.194] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.194] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.194] | : . ' , assign_globals() ...
[08:08:11.194] | : . ' , List of 1
[08:08:11.194] | : . ' ,  $ a: num 1
[08:08:11.194] | : . ' ,  - attr(*, "where")=List of 1
[08:08:11.194] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:08:11.194] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.194] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.194] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.194] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.196] | : . ' , - copied ‘a’ to environment
[08:08:11.197] | : . ' , assign_globals() ... done
[08:08:11.198] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.198] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.198] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.198] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.198] | : . ' , ; ` | : New stack:
[08:08:11.198] | : . ' , ; ` | : List of 1
[08:08:11.198] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.198] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.198] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.198] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.198] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.198] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.198] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.198] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.198] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.198] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.198] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.202] | : . ' , ; ` | : Old stack:
[08:08:11.202] | : . ' , ; ` | : List of 1
[08:08:11.202] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.202] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.202] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.202] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.202] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.202] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.202] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.202] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.202] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.202] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.202] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.205] | : . ' , ; ` | : Identical
[08:08:11.205] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.205] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.205] | : . ' , ; ` | List of future strategies:
[08:08:11.205] | : . ' , ; ` | 1. sequential:
[08:08:11.205] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.205] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.205] | : . ' , ; ` |    - call: plan(sequential)
[08:08:11.205] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.205] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.206] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.206] | : . ' , SequentialFuture started (and completed)
[08:08:11.206] | : . ' , signalConditions() ...
[08:08:11.206] | : . ' , ; include = ‘immediateCondition’
[08:08:11.206] | : . ' , ; exclude = 
[08:08:11.206] | : . ' , ; resignal = FALSE
[08:08:11.206] | : . ' , ; Number of conditions: 6
[08:08:11.206] | : . ' , ;  int 6
[08:08:11.207] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.207] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.207] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.207] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.207] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.207] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.207] | : . ' , signalConditions() ... done
[08:08:11.207] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:11.208] | : . Launching futures ... done
[08:08:11.208] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:11.208] | : Using SequentialFutureBackend ... done
[08:08:11.208] | run() for ‘Future’ (<unnamed-5>) ... done
[08:08:11.208] future(..., label = NULL) ... done
[08:08:11.208] value() for SequentialFuture (<unnamed-5>) ...
[08:08:11.208] | signalConditions() ...
[08:08:11.208] | : include = ‘immediateCondition’
[08:08:11.208] | : exclude = 
[08:08:11.209] | : resignal = FALSE
[08:08:11.209] | : Number of conditions: 6
[08:08:11.209] | :  int 6
[08:08:11.209] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.209] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.209] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.209] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.209] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.210] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.210] | signalConditions() ... done
[08:08:11.210] | relay stdout ...
[08:08:11.210] | relay stdout ... done
[08:08:11.210] | check for misuse ...
[08:08:11.210] | check for misuse ... done
[08:08:11.210] | relay conditions ...
[08:08:11.210] | : Future state: ‘finished’
[08:08:11.210] | : signalConditions() ...
[08:08:11.210] | : . include = ‘condition’
[08:08:11.211] | : . exclude = ‘immediateCondition’
[08:08:11.211] | : . resignal = TRUE
[08:08:11.211] | : . Number of conditions: 6
[08:08:11.211] | : .  int 6
[08:08:11.212] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.212] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.179] | : . ' , attachPackages() ...
[08:08:11.212] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.212] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.179] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.213] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.213] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.180] | : . ' , attachPackages() ... done
[08:08:11.213] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.213] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.180] | : . ' , attachPackages() ...
[08:08:11.213] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.213] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.180] | : . ' , ; packages: [n=0] 
[08:08:11.213] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.213] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.180] | : . ' , attachPackages() ... done
[08:08:11.214] | : signalConditions() ... done
[08:08:11.214] | relay conditions ... done
[08:08:11.214] value() for SequentialFuture (<unnamed-5>) ... done
[08:08:11.214] future(..., label = NULL) ...
[08:08:11.214] | lazy: FALSE
[08:08:11.214] | stdout: TRUE
[08:08:11.214] | conditions: [n=1] ‘condition’
[08:08:11.214] | gc: FALSE
[08:08:11.214] | earlySignal: FALSE
[08:08:11.214] | getGlobalsAndPackages() ...
[08:08:11.215] | : Searching for globals ...
[08:08:11.219] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:11.220] | : Searching for globals ... done
[08:08:11.220] | : Resolving globals: FALSE
[08:08:11.220] | : Search for packages associated with the globals ...
[08:08:11.220] | : . Packages associated with globals: [1] ‘base’
[08:08:11.220] | : . Packages: [1] ‘base’
[08:08:11.220] | : Search for packages associated with the globals ... done
[08:08:11.220] | : Packages after dropping 'base': [0] 
[08:08:11.221] | : globals: [1] ‘a’
[08:08:11.221] | : packages: [0] 
[08:08:11.221] | getGlobalsAndPackages() ... done
[08:08:11.221] | run() for ‘Future’ (<unnamed-6>) ...
[08:08:11.221] | : state: ‘created’
[08:08:11.221] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.221] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.221] | : Using SequentialFutureBackend ...
[08:08:11.221] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:11.222] | : . Launching futures ...
[08:08:11.222] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:11.222] | : . ' , getFutureData() ...
[08:08:11.222] | : . ' , ; getFutureCore() ...
[08:08:11.222] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.222] | : . ' , ; getFutureCore() ... done
[08:08:11.222] | : . ' , ; getFutureCapture() ...
[08:08:11.222] | : . ' , ; getFutureCapture() ... done
[08:08:11.222] | : . ' , ; getFutureContext() ...
[08:08:11.222] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.223] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.223] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.223] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.223] | : . ' , ; getFutureContext() ... done
[08:08:11.223] | : . ' , getFutureData() ... done
[08:08:11.224] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.224] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.224] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.225] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.225] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.225] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.225] | : . ' , ; ` | New stack:
[08:08:11.225] | : . ' , ; ` | List of 1
[08:08:11.225] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.225] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.225] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.225] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.225] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.225] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.225] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.225] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.228] | : . ' , ; ` | Old stack:
[08:08:11.228] | : . ' , ; ` | List of 1
[08:08:11.228] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.228] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.228] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.228] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.228] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.228] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.228] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:11.228] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.228] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.228] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.228] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.232] | : . ' , ; ` | Not identical
[08:08:11.232] | : . ' , ; ` | all.equal() for future ...
[08:08:11.232] | : . ' , ; ` | : List of 2
[08:08:11.232] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.232] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.232] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.232] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.232] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.232] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.232] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.237] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.237] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.237] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.237] | : . ' , ; ` List of future strategies:
[08:08:11.237] | : . ' , ; ` 1. sequential:
[08:08:11.237] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.237] | : . ' , ; `    - tweaked: FALSE
[08:08:11.237] | : . ' , ; `    - call: plan(sequential)
[08:08:11.238] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.238] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.238] | : . ' , assign_globals() ...
[08:08:11.238] | : . ' , List of 1
[08:08:11.238] | : . ' ,  $ a: num 1
[08:08:11.238] | : . ' ,  - attr(*, "where")=List of 1
[08:08:11.238] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:08:11.238] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.238] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.238] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.238] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.241] | : . ' , - copied ‘a’ to environment
[08:08:11.241] | : . ' , assign_globals() ... done
[08:08:11.242] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.243] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.243] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.243] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.243] | : . ' , ; ` | : New stack:
[08:08:11.243] | : . ' , ; ` | : List of 1
[08:08:11.243] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.243] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.243] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.243] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.243] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.243] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.243] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.243] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.243] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.243] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.243] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.246] | : . ' , ; ` | : Old stack:
[08:08:11.246] | : . ' , ; ` | : List of 1
[08:08:11.246] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.246] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.246] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.246] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.246] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.246] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.246] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.246] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.246] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.246] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.246] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.251] | : . ' , ; ` | : Identical
[08:08:11.251] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.252] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.252] | : . ' , ; ` | List of future strategies:
[08:08:11.252] | : . ' , ; ` | 1. sequential:
[08:08:11.252] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.252] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.252] | : . ' , ; ` |    - call: plan(sequential)
[08:08:11.252] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.252] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.252] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.253] | : . ' , SequentialFuture started (and completed)
[08:08:11.253] | : . ' , signalConditions() ...
[08:08:11.253] | : . ' , ; include = ‘immediateCondition’
[08:08:11.253] | : . ' , ; exclude = 
[08:08:11.253] | : . ' , ; resignal = FALSE
[08:08:11.253] | : . ' , ; Number of conditions: 6
[08:08:11.253] | : . ' , ;  int 6
[08:08:11.254] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.254] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.254] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.254] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.254] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.254] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.254] | : . ' , signalConditions() ... done
[08:08:11.254] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:11.255] | : . Launching futures ... done
[08:08:11.255] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:11.255] | : Using SequentialFutureBackend ... done
[08:08:11.255] | run() for ‘Future’ (<unnamed-6>) ... done
[08:08:11.255] future(..., label = NULL) ... done
[08:08:11.255] value() for SequentialFuture (<unnamed-6>) ...
[08:08:11.255] | signalConditions() ...
[08:08:11.255] | : include = ‘immediateCondition’
[08:08:11.255] | : exclude = 
[08:08:11.256] | : resignal = FALSE
[08:08:11.256] | : Number of conditions: 6
[08:08:11.256] | :  int 6
[08:08:11.256] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.256] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.256] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.256] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.257] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.257] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.257] | signalConditions() ... done
[08:08:11.257] | relay stdout ...
[08:08:11.257] | relay stdout ... done
[08:08:11.257] | check for misuse ...
[08:08:11.257] | check for misuse ... done
[08:08:11.257] | relay conditions ...
[08:08:11.257] | : Future state: ‘finished’
[08:08:11.258] | : signalConditions() ...
[08:08:11.258] | : . include = ‘condition’
[08:08:11.258] | : . exclude = ‘immediateCondition’
[08:08:11.258] | : . resignal = TRUE
[08:08:11.258] | : . Number of conditions: 6
[08:08:11.258] | : .  int 6
[08:08:11.258] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.259] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.223] | : . ' , attachPackages() ...
[08:08:11.259] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.259] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.223] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.259] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.259] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.224] | : . ' , attachPackages() ... done
[08:08:11.259] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.259] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.224] | : . ' , attachPackages() ...
[08:08:11.259] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.259] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.224] | : . ' , ; packages: [n=0] 
[08:08:11.260] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.260] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.224] | : . ' , attachPackages() ... done
[08:08:11.260] | : signalConditions() ... done
[08:08:11.260] | relay conditions ... done
[08:08:11.260] value() for SequentialFuture (<unnamed-6>) ... done
[08:08:11.260] future(..., label = NULL) ...
[08:08:11.260] | lazy: TRUE
[08:08:11.260] | stdout: TRUE
[08:08:11.260] | conditions: [n=1] ‘condition’
[08:08:11.261] | gc: FALSE
[08:08:11.261] | earlySignal: FALSE
[08:08:11.261] | getGlobalsAndPackages() ...
[08:08:11.261] | : Searching for globals ...
[08:08:11.266] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:11.266] | : Searching for globals ... done
[08:08:11.266] | : Resolving globals: FALSE
[08:08:11.266] | : Search for packages associated with the globals ...
[08:08:11.267] | : . Packages associated with globals: [1] ‘base’
[08:08:11.267] | : . Packages: [1] ‘base’
[08:08:11.267] | : Search for packages associated with the globals ... done
[08:08:11.269] | : Packages after dropping 'base': [0] 
[08:08:11.269] | : globals: [1] ‘a’
[08:08:11.269] | : packages: [0] 
[08:08:11.269] | getGlobalsAndPackages() ... done
[08:08:11.269] future(..., label = NULL) ... done
[08:08:11.269] value() for Future (<unnamed-7>) ...
[08:08:11.269] | run() for ‘Future’ (<unnamed-7>) ...
[08:08:11.270] | : state: ‘created’
[08:08:11.270] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.270] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.270] | : Using SequentialFutureBackend ...
[08:08:11.270] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:11.270] | : . Launching futures ...
[08:08:11.270] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:11.270] | : . ' , getFutureData() ...
[08:08:11.270] | : . ' , ; getFutureCore() ...
[08:08:11.271] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.271] | : . ' , ; getFutureCore() ... done
[08:08:11.271] | : . ' , ; getFutureCapture() ...
[08:08:11.271] | : . ' , ; getFutureCapture() ... done
[08:08:11.271] | : . ' , ; getFutureContext() ...
[08:08:11.271] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.271] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.271] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.272] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.272] | : . ' , ; getFutureContext() ... done
[08:08:11.272] | : . ' , getFutureData() ... done
[08:08:11.273] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.273] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.273] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.274] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.274] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.274] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.274] | : . ' , ; ` | New stack:
[08:08:11.274] | : . ' , ; ` | List of 1
[08:08:11.274] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.274] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.274] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.274] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.274] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.274] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.274] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.274] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.277] | : . ' , ; ` | Old stack:
[08:08:11.277] | : . ' , ; ` | List of 1
[08:08:11.277] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.277] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.277] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.277] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.277] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.277] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.277] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:11.277] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.277] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.277] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.277] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.280] | : . ' , ; ` | Not identical
[08:08:11.280] | : . ' , ; ` | all.equal() for future ...
[08:08:11.280] | : . ' , ; ` | : List of 2
[08:08:11.280] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.280] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.280] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.280] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.280] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.280] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.280] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.285] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.285] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.286] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.286] | : . ' , ; ` List of future strategies:
[08:08:11.286] | : . ' , ; ` 1. sequential:
[08:08:11.286] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.286] | : . ' , ; `    - tweaked: FALSE
[08:08:11.286] | : . ' , ; `    - call: plan(sequential)
[08:08:11.286] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.286] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.286] | : . ' , assign_globals() ...
[08:08:11.287] | : . ' , List of 1
[08:08:11.287] | : . ' ,  $ a: num 1
[08:08:11.287] | : . ' ,  - attr(*, "where")=List of 1
[08:08:11.287] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:08:11.287] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.287] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.287] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.287] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.291] | : . ' , - copied ‘a’ to environment
[08:08:11.291] | : . ' , assign_globals() ... done
[08:08:11.292] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.292] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.293] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.293] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.293] | : . ' , ; ` | : New stack:
[08:08:11.293] | : . ' , ; ` | : List of 1
[08:08:11.293] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.293] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.293] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.293] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.293] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.293] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.293] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.293] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.293] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.293] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.293] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.296] | : . ' , ; ` | : Old stack:
[08:08:11.296] | : . ' , ; ` | : List of 1
[08:08:11.296] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.296] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.296] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.296] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.296] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.296] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.296] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.296] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.296] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.296] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.296] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.299] | : . ' , ; ` | : Identical
[08:08:11.299] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.299] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.300] | : . ' , ; ` | List of future strategies:
[08:08:11.300] | : . ' , ; ` | 1. sequential:
[08:08:11.300] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.300] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.300] | : . ' , ; ` |    - call: plan(sequential)
[08:08:11.300] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.300] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.300] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.301] | : . ' , SequentialFuture started (and completed)
[08:08:11.301] | : . ' , signalConditions() ...
[08:08:11.301] | : . ' , ; include = ‘immediateCondition’
[08:08:11.301] | : . ' , ; exclude = 
[08:08:11.301] | : . ' , ; resignal = FALSE
[08:08:11.301] | : . ' , ; Number of conditions: 6
[08:08:11.301] | : . ' , ;  int 6
[08:08:11.302] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.302] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.302] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.302] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.302] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.302] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.302] | : . ' , signalConditions() ... done
[08:08:11.302] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:11.302] | : . Launching futures ... done
[08:08:11.303] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:11.303] | : Using SequentialFutureBackend ... done
[08:08:11.303] | run() for ‘Future’ (<unnamed-7>) ... done
[08:08:11.303] | signalConditions() ...
[08:08:11.303] | : include = ‘immediateCondition’
[08:08:11.303] | : exclude = 
[08:08:11.303] | : resignal = FALSE
[08:08:11.303] | : Number of conditions: 6
[08:08:11.303] | :  int 6
[08:08:11.304] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.304] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.304] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.304] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.304] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.304] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.304] | signalConditions() ... done
[08:08:11.304] | relay stdout ...
[08:08:11.305] | relay stdout ... done
[08:08:11.305] | check for misuse ...
[08:08:11.305] | check for misuse ... done
[08:08:11.305] | relay conditions ...
[08:08:11.305] | : Future state: ‘finished’
[08:08:11.305] | : signalConditions() ...
[08:08:11.305] | : . include = ‘condition’
[08:08:11.305] | : . exclude = ‘immediateCondition’
[08:08:11.305] | : . resignal = TRUE
[08:08:11.305] | : . Number of conditions: 6
[08:08:11.306] | : .  int 6
[08:08:11.306] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.306] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.272] | : . ' , attachPackages() ...
[08:08:11.306] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.306] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.272] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.336] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.336] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.272] | : . ' , attachPackages() ... done
[08:08:11.336] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.336] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.273] | : . ' , attachPackages() ...
[08:08:11.336] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.337] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.273] | : . ' , ; packages: [n=0] 
[08:08:11.337] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.337] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.273] | : . ' , attachPackages() ... done
[08:08:11.337] | : signalConditions() ... done
[08:08:11.337] | relay conditions ... done
[08:08:11.337] value() for Future (<unnamed-7>) ... done
[08:08:11.338] future(..., label = NULL) ...
[08:08:11.338] | lazy: TRUE
[08:08:11.338] | stdout: TRUE
[08:08:11.338] | conditions: [n=1] ‘condition’
[08:08:11.338] | gc: FALSE
[08:08:11.338] | earlySignal: FALSE
[08:08:11.338] | getGlobalsAndPackages() ...
[08:08:11.338] | : Searching for globals ...
[08:08:11.344] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:11.344] | : Searching for globals ... done
[08:08:11.344] | : Resolving globals: FALSE
[08:08:11.344] | : Search for packages associated with the globals ...
[08:08:11.344] | : . Packages associated with globals: [1] ‘base’
[08:08:11.345] | : . Packages: [1] ‘base’
[08:08:11.345] | : Search for packages associated with the globals ... done
[08:08:11.345] | : Packages after dropping 'base': [0] 
[08:08:11.345] | : globals: [1] ‘a’
[08:08:11.345] | : packages: [0] 
[08:08:11.345] | getGlobalsAndPackages() ... done
[08:08:11.345] future(..., label = NULL) ... done
[08:08:11.346] value() for Future (<unnamed-8>) ...
[08:08:11.346] | run() for ‘Future’ (<unnamed-8>) ...
[08:08:11.346] | : state: ‘created’
[08:08:11.346] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.346] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.346] | : Using SequentialFutureBackend ...
[08:08:11.346] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:08:11.346] | : . Launching futures ...
[08:08:11.347] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:11.347] | : . ' , getFutureData() ...
[08:08:11.347] | : . ' , ; getFutureCore() ...
[08:08:11.347] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.347] | : . ' , ; getFutureCore() ... done
[08:08:11.347] | : . ' , ; getFutureCapture() ...
[08:08:11.347] | : . ' , ; getFutureCapture() ... done
[08:08:11.347] | : . ' , ; getFutureContext() ...
[08:08:11.347] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.348] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.348] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.348] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.348] | : . ' , ; getFutureContext() ... done
[08:08:11.348] | : . ' , getFutureData() ... done
[08:08:11.349] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.349] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.350] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.350] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.350] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.350] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.350] | : . ' , ; ` | New stack:
[08:08:11.350] | : . ' , ; ` | List of 1
[08:08:11.350] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.350] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.350] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.350] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.350] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.350] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.350] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.350] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.353] | : . ' , ; ` | Old stack:
[08:08:11.353] | : . ' , ; ` | List of 1
[08:08:11.353] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.353] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.353] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.353] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.353] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.353] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.353] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:11.353] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.353] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.353] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.353] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.356] | : . ' , ; ` | Not identical
[08:08:11.357] | : . ' , ; ` | all.equal() for future ...
[08:08:11.357] | : . ' , ; ` | : List of 2
[08:08:11.357] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.357] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.357] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.357] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.357] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.357] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.357] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.364] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.364] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.364] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.364] | : . ' , ; ` List of future strategies:
[08:08:11.364] | : . ' , ; ` 1. sequential:
[08:08:11.364] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.364] | : . ' , ; `    - tweaked: FALSE
[08:08:11.364] | : . ' , ; `    - call: plan(sequential)
[08:08:11.364] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.365] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.365] | : . ' , assign_globals() ...
[08:08:11.365] | : . ' , List of 1
[08:08:11.365] | : . ' ,  $ a: num 1
[08:08:11.365] | : . ' ,  - attr(*, "where")=List of 1
[08:08:11.365] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:08:11.365] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.365] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.365] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.365] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.367] | : . ' , - copied ‘a’ to environment
[08:08:11.368] | : . ' , assign_globals() ... done
[08:08:11.369] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.369] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.369] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.370] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.370] | : . ' , ; ` | : New stack:
[08:08:11.370] | : . ' , ; ` | : List of 1
[08:08:11.370] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.370] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.370] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.370] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.370] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.370] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.370] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.370] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.370] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.370] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.370] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.373] | : . ' , ; ` | : Old stack:
[08:08:11.373] | : . ' , ; ` | : List of 1
[08:08:11.373] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.373] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.373] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.373] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.373] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.373] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.373] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.373] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.373] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.373] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.373] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.376] | : . ' , ; ` | : Identical
[08:08:11.376] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.377] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.377] | : . ' , ; ` | List of future strategies:
[08:08:11.377] | : . ' , ; ` | 1. sequential:
[08:08:11.377] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.377] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.377] | : . ' , ; ` |    - call: plan(sequential)
[08:08:11.377] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.377] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.377] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.378] | : . ' , SequentialFuture started (and completed)
[08:08:11.378] | : . ' , signalConditions() ...
[08:08:11.378] | : . ' , ; include = ‘immediateCondition’
[08:08:11.378] | : . ' , ; exclude = 
[08:08:11.378] | : . ' , ; resignal = FALSE
[08:08:11.378] | : . ' , ; Number of conditions: 6
[08:08:11.378] | : . ' , ;  int 6
[08:08:11.379] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.379] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.379] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.379] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.379] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.379] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.379] | : . ' , signalConditions() ... done
[08:08:11.380] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:11.380] | : . Launching futures ... done
[08:08:11.381] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:11.381] | : Using SequentialFutureBackend ... done
[08:08:11.381] | run() for ‘Future’ (<unnamed-8>) ... done
[08:08:11.381] | signalConditions() ...
[08:08:11.381] | : include = ‘immediateCondition’
[08:08:11.382] | : exclude = 
[08:08:11.382] | : resignal = FALSE
[08:08:11.382] | : Number of conditions: 6
[08:08:11.382] | :  int 6
[08:08:11.382] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.382] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.383] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.383] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.383] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.383] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.383] | signalConditions() ... done
[08:08:11.383] | relay stdout ...
[08:08:11.383] | relay stdout ... done
[08:08:11.383] | check for misuse ...
[08:08:11.384] | check for misuse ... done
[08:08:11.384] | relay conditions ...
[08:08:11.384] | : Future state: ‘finished’
[08:08:11.384] | : signalConditions() ...
[08:08:11.384] | : . include = ‘condition’
[08:08:11.384] | : . exclude = ‘immediateCondition’
[08:08:11.384] | : . resignal = TRUE
[08:08:11.384] | : . Number of conditions: 6
[08:08:11.384] | : .  int 6
[08:08:11.385] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.385] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.348] | : . ' , attachPackages() ...
[08:08:11.385] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.385] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.348] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.385] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.385] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.349] | : . ' , attachPackages() ... done
[08:08:11.386] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.386] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.349] | : . ' , attachPackages() ...
[08:08:11.386] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.386] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.349] | : . ' , ; packages: [n=0] 
[08:08:11.386] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.386] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.349] | : . ' , attachPackages() ... done
[08:08:11.386] | : signalConditions() ... done
[08:08:11.386] | relay conditions ... done
[08:08:11.386] value() for Future (<unnamed-8>) ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[08:08:11.387] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.387] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:11.387] | : all.equal() for FutureStrategyList ...
[08:08:11.387] | : . New stack:
[08:08:11.388] | : . List of 1
[08:08:11.388] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.388] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.388] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.388] | : .   ..- attr(*, "init")= logi TRUE
[08:08:11.388] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.388] | : .     ...)  
[08:08:11.388] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.388] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.388] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:11.388] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.390] | : . Old stack:
[08:08:11.390] | : . List of 1
[08:08:11.390] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.390] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.390] | : .   ..- attr(*, "init")= chr "done"
[08:08:11.390] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.390] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.390] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.390] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:11.390] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.390] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.390] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.390] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.393] | : . Not identical
[08:08:11.394] | : . all.equal() for future ...
[08:08:11.394] | : . ' List of 2
[08:08:11.394] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.394] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.394] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.394] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:11.394] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.394] | : . '     ...)  
[08:08:11.394] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.394] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.394] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:11.394] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.394] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.394] | : . '   ..- attr(*, "init")= chr "done"
[08:08:11.394] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.394] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.394] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.394] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:11.394] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560361a03048> 
[08:08:11.394] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.394] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.399] | : . ' Formals differ
[08:08:11.399] | : . all.equal() for future ... done
[08:08:11.399] | : . Future strategies differ at level 1
[08:08:11.399] | : all.equal() for FutureStrategyList ... done
[08:08:11.399] | : plan(): Setting new future backend stack:
[08:08:11.399] | : List of future strategies:
[08:08:11.399] | : 1. multicore:
[08:08:11.399] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:11.399] | :    - tweaked: FALSE
[08:08:11.399] | :    - call: plan(strategy)
[08:08:11.400] | : List of 1
[08:08:11.400] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.400] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.400] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.400] | :   ..- attr(*, "init")= logi TRUE
[08:08:11.400] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.400] | :     ...)  
[08:08:11.400] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.400] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.400] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.400] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.404] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:11.404] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.404] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.404] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.404] | : . Legacy shutdown of cluster workers ...
[08:08:11.405] | : . ' Stopping existing cluster ...
[08:08:11.405] | : . ' , No pre-existing cluster. Skipping
[08:08:11.405] | : . ' Stopping existing cluster ... done
[08:08:11.405] | : . Legacy shutdown of cluster workers ... done
[08:08:11.405] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:11.405] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:11.405] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.405] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.405] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.405] | : .  - attr(*, "init")= logi TRUE
[08:08:11.405] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.405] | : .     ...)  
[08:08:11.405] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.405] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.405] | : .  - attr(*, "call")= language plan(strategy)
[08:08:11.407] | : . init: TRUE
[08:08:11.408] | : . makeFutureBackend(<multicore>) ...
[08:08:11.408] | : . ' Backend function: <‘NULL’>
[08:08:11.408] | : . ' Evaluator tweak arguments: [n=0]
[08:08:11.408] | : . '  list()
[08:08:11.408] | : . ' Evaluator formal arguments: [n=3]
[08:08:11.408] | : . '  list()
[08:08:11.408] | : . ' Backend factory arguments: [n=3]
[08:08:11.409] | : . ' Dotted pair list of 3
[08:08:11.409] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:11.409] | : . '  $ gc         : logi FALSE
[08:08:11.409] | : . '  $ earlySignal: logi FALSE
[08:08:11.412] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:11.412] | : . makeFutureBackend(<multicore>) ... done
[08:08:11.412] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:11.412] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.412] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.412] | : plan(): nbrOfWorkers() = 2
[08:08:11.412] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:11.413] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.413] future(..., label = NULL) ...
[08:08:11.413] | lazy: FALSE
[08:08:11.413] | stdout: TRUE
[08:08:11.413] | conditions: [n=1] ‘condition’
[08:08:11.413] | gc: FALSE
[08:08:11.413] | earlySignal: FALSE
[08:08:11.413] | getGlobalsAndPackages() ...
[08:08:11.413] | : Searching for globals ...
[08:08:11.416] | : . globals found: [1] ‘{’
[08:08:11.416] | : Searching for globals ... done
[08:08:11.417] | : Resolving globals: FALSE
[08:08:11.417] | : Search for packages associated with the globals ...
[08:08:11.417] | : . Packages associated with globals: [1] ‘base’
[08:08:11.417] | : . Packages: [1] ‘base’
[08:08:11.417] | : Search for packages associated with the globals ... done
[08:08:11.417] | : Packages after dropping 'base': [0] 
[08:08:11.417] | : globals: [0] 
[08:08:11.418] | : packages: [0] 
[08:08:11.418] | getGlobalsAndPackages() ... done
[08:08:11.418] | run() for ‘Future’ (<unnamed-9>) ...
[08:08:11.418] | : state: ‘created’
[08:08:11.418] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.418] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.418] | : Using MulticoreFutureBackend ...
[08:08:11.418] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:11.419] | : . Launching futures ...
[08:08:11.419] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:11.419] | : . ' , getFutureData() ...
[08:08:11.419] | : . ' , ; getFutureCore() ...
[08:08:11.419] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.419] | : . ' , ; getFutureCore() ... done
[08:08:11.419] | : . ' , ; getFutureCapture() ...
[08:08:11.419] | : . ' , ; getFutureCapture() ... done
[08:08:11.420] | : . ' , ; getFutureContext() ...
[08:08:11.420] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.420] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.420] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.420] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.420] | : . ' , ; getFutureContext() ... done
[08:08:11.421] | : . ' , getFutureData() ... done
[08:08:11.421] | : . ' , requestCore(..., workers = 2) ...
[08:08:11.421] | : . ' , requestCore(..., workers = 2) ... done
[08:08:11.424] | : . ' , MulticoreFuture started
[08:08:11.424] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:11.425] | : . Launching futures ... done
[08:08:11.425] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:11.425] | : Using MulticoreFutureBackend ... done
[08:08:11.426] | run() for ‘Future’ (<unnamed-9>) ... done
[08:08:11.426] future(..., label = NULL) ... done
[08:08:11.426] future(..., label = NULL) ...
[08:08:11.427] | lazy: FALSE
[08:08:11.427] | stdout: TRUE
[08:08:11.427] | conditions: [n=1] ‘condition’
[08:08:11.427] | gc: FALSE
[08:08:11.427] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.427] | earlySignal: FALSE
[08:08:11.427] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:11.428] | getGlobalsAndPackages() ...
[08:08:11.428] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.428] | : Searching for globals ...
[08:08:11.428] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.428] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.428] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.429] | : . ' , ; ` | New stack:
[08:08:11.429] | : . ' , ; ` | List of 1
[08:08:11.429] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.429] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.429] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.429] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.429] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.429] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.429] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.429] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.438] | : . ' , ; ` | Old stack:
[08:08:11.439] | : . globals found: [1] ‘{’
[08:08:11.439] | : Searching for globals ... done
[08:08:11.440] | : Resolving globals: FALSE
[08:08:11.440] | : Search for packages associated with the globals ...
[08:08:11.440] | : . Packages associated with globals: [1] ‘base’
[08:08:11.441] | : . Packages: [1] ‘base’
[08:08:11.441] | : Search for packages associated with the globals ... done
[08:08:11.441] | : Packages after dropping 'base': [0] 
[08:08:11.441] | : globals: [0] 
[08:08:11.441] | : packages: [0] 
[08:08:11.442] | getGlobalsAndPackages() ... done
[08:08:11.442] | run() for ‘Future’ (<unnamed-10>) ...
[08:08:11.442] | : state: ‘created’
[08:08:11.442] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.443] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.443] | : Using MulticoreFutureBackend ...
[08:08:11.443] | : . Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:11.443] | : . Launching futures ...
[08:08:11.443] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:11.443] | : . ' , getFutureData() ...
[08:08:11.443] | : . ' , ; getFutureCore() ...
[08:08:11.444] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.444] | : . ' , ; getFutureCore() ... done
[08:08:11.444] | : . ' , ; getFutureCapture() ...
[08:08:11.444] | : . ' , ; getFutureCapture() ... done
[08:08:11.444] | : . ' , ; getFutureContext() ...
[08:08:11.444] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.438] | : . ' , ; ` | List of 1
[08:08:11.438] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.438] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.438] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.438] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.438] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.438] | : . ' , ; ` |     ...)  
[08:08:11.438] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.438] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.438] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.438] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.438] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.438] | : . ' , ; ` |     ...)  
[08:08:11.438] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.438] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.445] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.445] | : . ' , ; ` | Not identical
[08:08:11.445] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.445] | : . ' , ; ` | all.equal() for future ...
[08:08:11.445] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.445] | : . ' , ; getFutureContext() ... done
[08:08:11.445] | : . ' , getFutureData() ... done
[08:08:11.445] | : . ' , requestCore(..., workers = 2) ...
[08:08:11.446] | : . ' , requestCore(..., workers = 2) ... done
[08:08:11.448] | : . ' , MulticoreFuture started
[08:08:11.449] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:11.449] | : . Launching futures ... done
[08:08:11.450] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:11.450] | : Using MulticoreFutureBackend ... done
[08:08:11.450] | run() for ‘Future’ (<unnamed-10>) ... done
[08:08:11.451] future(..., label = NULL) ... done
[08:08:11.451] value() for MulticoreFuture (<unnamed-9>) ...
[08:08:11.445] | : . ' , ; ` | : List of 2
[08:08:11.445] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.445] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.445] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.445] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.445] | : . ' , ; ` | :     ...)  
[08:08:11.445] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.445] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.445] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.445] | : . ' , ; ` | :     ...)  
[08:08:11.445] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.453] | : . ' , ; ` | : Formals differ
[08:08:11.453] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.453] | : . ' , ; ` | Future strategies differ at level 1
[08:08:11.453] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.453] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:11.453] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.453] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:11.453] | : . ' , ; ` List of future strategies:
[08:08:11.453] | : . ' , ; ` 1. sequential:
[08:08:11.453] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.453] | : . ' , ; `    - tweaked: FALSE
[08:08:11.453] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.454] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.454] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.454] | result() for MulticoreFuture ...
[08:08:11.455] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.455] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.456] | : . ' , ; ` | New stack:
[08:08:11.454] | : . ' , ; ` List of 1
[08:08:11.454] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.454] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.454] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:11.454] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.454] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.454] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.454] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.454] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.458] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.458] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.458] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.458] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:11.456] | : . ' , ; ` | List of 1
[08:08:11.456] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.456] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.456] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.456] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.456] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.456] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.456] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.456] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.461] | : . ' , ; ` | Old stack:
[08:08:11.459] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.459] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.459] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:11.459] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.459] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.459] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.459] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.461] | : . ' , ; ` | : init: TRUE
[08:08:11.461] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:11.461] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:11.461] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:11.461] | : . ' , ; ` | : .  list()
[08:08:11.462] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:11.462] | : . ' , ; ` | : .  list()
[08:08:11.462] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:11.462] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:11.462] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:11.462] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:11.464] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:11.464] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:11.464] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:11.464] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.464] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:11.464] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.464] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.461] | : . ' , ; ` | List of 1
[08:08:11.461] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.461] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.461] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.461] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.461] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.461] | : . ' , ; ` |     ...)  
[08:08:11.461] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.461] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.461] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.461] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.461] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.461] | : . ' , ; ` |     ...)  
[08:08:11.461] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.461] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.467] | : . ' , ; ` | Not identical
[08:08:11.467] | : . ' , ; ` | all.equal() for future ...
[08:08:11.468] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.468] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.469] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.469] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.469] | : . ' , ; ` | : New stack:
[08:08:11.469] | : . ' , ; ` | : List of 1
[08:08:11.469] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.469] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.469] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.469] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.469] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.469] | : . ' , ; ` | :     ...)  
[08:08:11.469] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.469] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.469] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.469] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.469] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.469] | : . ' , ; ` | :     ...)  
[08:08:11.469] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.469] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.473] | : . ' , ; ` | : Old stack:
[08:08:11.467] | : . ' , ; ` | : List of 2
[08:08:11.467] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.467] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.467] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.467] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.467] | : . ' , ; ` | :     ...)  
[08:08:11.467] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.467] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.467] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.467] | : . ' , ; ` | :     ...)  
[08:08:11.467] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.475] | : . ' , ; ` | : Formals differ
[08:08:11.476] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.476] | : . ' , ; ` | Future strategies differ at level 1
[08:08:11.476] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.476] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:11.473] | : . ' , ; ` | : List of 1
[08:08:11.473] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.473] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.473] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.473] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.473] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.473] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.473] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.473] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560362434478> 
[08:08:11.473] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.473] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.473] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.476] | : . ' , ; ` | : Not identical
[08:08:11.476] | : . ' , ; ` | : all.equal() for future ...
[08:08:11.476] | : . ' , ; ` List of future strategies:
[08:08:11.476] | : . ' , ; ` 1. sequential:
[08:08:11.476] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.476] | : . ' , ; `    - tweaked: FALSE
[08:08:11.476] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.477] | : . ' , ; ` | : . List of 2
[08:08:11.477] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.477] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.477] | : . ' , ; ` | : .     ...)  
[08:08:11.477] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.477] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.477] | : . ' , ; ` | : .     ...)  
[08:08:11.477] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.477] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.477] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.477] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560362434478> 
[08:08:11.477] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.477] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.483] | : . ' , ; ` | : . Formals differ
[08:08:11.483] | : . ' , ; ` | : all.equal() for future ... done
[08:08:11.483] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:11.483] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.483] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:11.483] | : . ' , ; ` | List of future strategies:
[08:08:11.483] | : . ' , ; ` | 1. multicore:
[08:08:11.483] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:11.483] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.483] | : . ' , ; ` |    - call: plan(strategy)
[08:08:11.477] | : . ' , ; ` List of 1
[08:08:11.477] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.477] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.477] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:11.477] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.477] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.477] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.477] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.477] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.484] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.484] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.484] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.485] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:11.484] | : . ' , ; ` | List of 1
[08:08:11.484] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.484] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.484] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.484] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.484] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.484] | : . ' , ; ` |     ...)  
[08:08:11.484] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.484] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.484] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.484] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.484] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.484] | : . ' , ; ` |     ...)  
[08:08:11.484] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.484] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.487] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.487] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.487] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.487] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.488] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:11.485] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.485] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.485] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:11.485] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.485] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.485] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.485] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.488] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.488] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.488] | : . ' , ; ` | : init: TRUE
[08:08:11.488] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.488] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:11.488] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:11.488] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:11.488] | : . ' , ; ` | : .  list()
[08:08:11.489] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:11.489] | : . ' , ; ` | : .  list()
[08:08:11.489] | : readImmediateCondition() ...
[08:08:11.490] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:11.490] | : . Path: ‘/tmp/Rtmpq1wVao/.future/immediateConditions’
[08:08:11.490] | : . Number of RDS files: 0
[08:08:11.490] | : . Returned conditions set:
[08:08:11.491] | : .  list()
[08:08:11.490] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:11.490] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:11.490] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:11.491] | : readImmediateCondition() ... done
[08:08:11.492] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:11.492] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:11.492] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:11.492] | : result() for MulticoreFuture ...
[08:08:11.492] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.492] | : result() for MulticoreFuture ... done
[08:08:11.492] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:11.492] | : signalConditions() ...
[08:08:11.493] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.493] | : . include = ‘immediateCondition’
[08:08:11.493] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.493] | : . exclude = 
[08:08:11.493] | : . resignal = FALSE
[08:08:11.493] | : . Number of conditions: 6
[08:08:11.493] | : .  int 6
[08:08:11.494] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.495] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.495] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.495] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.495] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.496] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.496] | : signalConditions() ... done
[08:08:11.496] | result() for MulticoreFuture ... done
[08:08:11.496] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.496] | result() for MulticoreFuture ...
[08:08:11.496] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.496] | result() for MulticoreFuture ... done
[08:08:11.497] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.497] | signalConditions() ...
[08:08:11.497] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.497] | : include = ‘immediateCondition’
[08:08:11.497] | : . ' , ; ` | : New stack:
[08:08:11.497] | : exclude = 
[08:08:11.497] | : resignal = FALSE
[08:08:11.497] | : Number of conditions: 6
[08:08:11.498] | :  int 6
[08:08:11.498] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.499] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.499] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.499] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.499] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.500] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.500] | signalConditions() ... done
[08:08:11.500] | relay stdout ...
[08:08:11.500] | relay stdout ... done
[08:08:11.500] | check for misuse ...
[08:08:11.501] | check for misuse ... done
[08:08:11.501] | relay conditions ...
[08:08:11.501] | : Future state: ‘finished’
[08:08:11.501] | : result() for MulticoreFuture ...
[08:08:11.502] | : result() for MulticoreFuture ... done
[08:08:11.502] | : signalConditions() ...
[08:08:11.502] | : . include = ‘condition’
[08:08:11.502] | : . exclude = ‘immediateCondition’
[08:08:11.502] | : . resignal = TRUE
[08:08:11.503] | : . Number of conditions: 6
[08:08:11.497] | : . ' , ; ` | : List of 1
[08:08:11.497] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.497] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.497] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.497] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.497] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.497] | : . ' , ; ` | :     ...)  
[08:08:11.497] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.497] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.497] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.497] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.497] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.497] | : . ' , ; ` | :     ...)  
[08:08:11.497] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.497] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.503] | : . ' , ; ` | : Old stack:
[08:08:11.503] | : .  int 6
[08:08:11.503] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.504] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.425] | : . ' , attachPackages() ...
[08:08:11.504] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.504] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.425] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.505] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.505] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.425] | : . ' , attachPackages() ... done
[08:08:11.505] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.505] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.426] | : . ' , attachPackages() ...
[08:08:11.506] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.506] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.426] | : . ' , ; packages: [n=0] 
[08:08:11.506] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.506] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.426] | : . ' , attachPackages() ... done
[08:08:11.507] | : signalConditions() ... done
[08:08:11.507] | relay conditions ... done
[08:08:11.507] value() for MulticoreFuture (<unnamed-9>) ... done
u$a = 2
[08:08:11.507] value() for MulticoreFuture (<unnamed-10>) ...
[08:08:11.508] | result() for MulticoreFuture ...
[08:08:11.503] | : . ' , ; ` | : List of 1
[08:08:11.503] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.503] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.503] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.503] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.503] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.503] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.503] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.503] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fc3dbe8> 
[08:08:11.503] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.503] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.503] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.509] | : . ' , ; ` | : Not identical
[08:08:11.509] | : . ' , ; ` | : all.equal() for future ...
[08:08:11.509] | : . ' , ; ` | : . List of 2
[08:08:11.509] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.509] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.509] | : . ' , ; ` | : .     ...)  
[08:08:11.509] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.509] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.509] | : . ' , ; ` | : .     ...)  
[08:08:11.509] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.509] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.509] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.509] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fc3dbe8> 
[08:08:11.509] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.509] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.517] | : . ' , ; ` | : . Formals differ
[08:08:11.517] | : . ' , ; ` | : all.equal() for future ... done
[08:08:11.517] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:11.518] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.518] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:11.518] | : . ' , ; ` | List of future strategies:
[08:08:11.518] | : . ' , ; ` | 1. multicore:
[08:08:11.518] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:11.518] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.518] | : . ' , ; ` |    - call: plan(strategy)
[08:08:11.518] | : . ' , ; ` | List of 1
[08:08:11.518] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.518] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.518] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.518] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.518] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.518] | : . ' , ; ` |     ...)  
[08:08:11.518] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.518] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.518] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.518] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.518] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.518] | : . ' , ; ` |     ...)  
[08:08:11.518] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.518] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.522] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.522] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.522] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.522] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.522] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:11.522] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.522] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.523] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.523] | : readImmediateCondition() ...
[08:08:11.523] | : . Path: ‘/tmp/Rtmpq1wVao/.future/immediateConditions’
[08:08:11.523] | : . Number of RDS files: 0
[08:08:11.524] | : . Returned conditions set:
[08:08:11.524] | : .  list()
[08:08:11.524] | : readImmediateCondition() ... done
[08:08:11.525] | : result() for MulticoreFuture ...
[08:08:11.525] | : result() for MulticoreFuture ... done
[08:08:11.525] | : signalConditions() ...
[08:08:11.525] | : . include = ‘immediateCondition’
[08:08:11.526] | : . exclude = 
[08:08:11.526] | : . resignal = FALSE
[08:08:11.526] | : . Number of conditions: 6
[08:08:11.526] | : .  int 6
[08:08:11.527] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.527] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.527] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.527] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.527] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.528] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.528] | : signalConditions() ... done
[08:08:11.528] | result() for MulticoreFuture ... done
[08:08:11.528] | result() for MulticoreFuture ...
[08:08:11.528] | result() for MulticoreFuture ... done
[08:08:11.529] | signalConditions() ...
[08:08:11.529] | : include = ‘immediateCondition’
[08:08:11.529] | : exclude = 
[08:08:11.529] | : resignal = FALSE
[08:08:11.529] | : Number of conditions: 6
[08:08:11.529] | :  int 6
[08:08:11.530] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.530] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.530] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.530] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.530] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.530] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.531] | signalConditions() ... done
[08:08:11.531] | relay stdout ...
[08:08:11.531] | relay stdout ... done
[08:08:11.531] | check for misuse ...
[08:08:11.533] | check for misuse ... done
[08:08:11.533] | relay conditions ...
[08:08:11.533] | : Future state: ‘finished’
[08:08:11.533] | : result() for MulticoreFuture ...
[08:08:11.534] | : result() for MulticoreFuture ... done
[08:08:11.534] | : signalConditions() ...
[08:08:11.534] | : . include = ‘condition’
[08:08:11.534] | : . exclude = ‘immediateCondition’
[08:08:11.534] | : . resignal = TRUE
[08:08:11.534] | : . Number of conditions: 6
[08:08:11.535] | : .  int 6
[08:08:11.535] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.535] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.450] | : . ' , attachPackages() ...
[08:08:11.536] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.536] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.450] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.536] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.536] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.451] | : . ' , attachPackages() ... done
[08:08:11.536] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.536] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.451] | : . ' , attachPackages() ...
[08:08:11.537] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.537] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.451] | : . ' , ; packages: [n=0] 
[08:08:11.537] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.537] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.452] | : . ' , attachPackages() ... done
[08:08:11.537] | : signalConditions() ... done
[08:08:11.537] | relay conditions ... done
[08:08:11.537] value() for MulticoreFuture (<unnamed-10>) ... done
v$a = 4
[08:08:11.538] future(..., label = NULL) ...
[08:08:11.538] | lazy: FALSE
[08:08:11.538] | stdout: TRUE
[08:08:11.538] | conditions: [n=1] ‘condition’
[08:08:11.538] | gc: FALSE
[08:08:11.538] | earlySignal: FALSE
[08:08:11.538] | getGlobalsAndPackages() ...
[08:08:11.539] | : Searching for globals ...
[08:08:11.544] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:11.544] | : Searching for globals ... done
[08:08:11.545] | : Resolving globals: FALSE
[08:08:11.545] | : Search for packages associated with the globals ...
[08:08:11.545] | : . Packages associated with globals: [1] ‘base’
[08:08:11.545] | : . Packages: [1] ‘base’
[08:08:11.545] | : Search for packages associated with the globals ... done
[08:08:11.546] | : Packages after dropping 'base': [0] 
[08:08:11.546] | : globals: [1] ‘a’
[08:08:11.546] | : packages: [0] 
[08:08:11.546] | getGlobalsAndPackages() ... done
[08:08:11.546] | run() for ‘Future’ (<unnamed-11>) ...
[08:08:11.546] | : state: ‘created’
[08:08:11.546] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.546] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.547] | : Using MulticoreFutureBackend ...
[08:08:11.547] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:11.547] | : . Launching futures ...
[08:08:11.547] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:11.547] | : . ' , getFutureData() ...
[08:08:11.547] | : . ' , ; getFutureCore() ...
[08:08:11.547] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.547] | : . ' , ; getFutureCore() ... done
[08:08:11.548] | : . ' , ; getFutureCapture() ...
[08:08:11.548] | : . ' , ; getFutureCapture() ... done
[08:08:11.548] | : . ' , ; getFutureContext() ...
[08:08:11.548] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.548] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.548] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.548] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.548] | : . ' , ; getFutureContext() ... done
[08:08:11.548] | : . ' , getFutureData() ... done
[08:08:11.549] | : . ' , requestCore(..., workers = 2) ...
[08:08:11.549] | : . ' , requestCore(..., workers = 2) ... done
[08:08:11.551] | : . ' , MulticoreFuture started
[08:08:11.552] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:11.552] | : . Launching futures ... done
[08:08:11.552] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:11.553] | : Using MulticoreFutureBackend ... done
[08:08:11.553] | run() for ‘Future’ (<unnamed-11>) ... done
[08:08:11.553] future(..., label = NULL) ... done
[08:08:11.554] value() for MulticoreFuture (<unnamed-11>) ...
[08:08:11.554] | result() for MulticoreFuture ...
[08:08:11.555] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.555] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:11.556] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.556] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.556] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.557] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.557] | : . ' , ; ` | New stack:
[08:08:11.557] | : . ' , ; ` | List of 1
[08:08:11.557] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.557] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.557] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.557] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.557] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.557] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.557] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.557] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.562] | : . ' , ; ` | Old stack:
[08:08:11.562] | : . ' , ; ` | List of 1
[08:08:11.562] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.562] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.562] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.562] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.562] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.562] | : . ' , ; ` |     ...)  
[08:08:11.562] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.562] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.562] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.562] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.562] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.562] | : . ' , ; ` |     ...)  
[08:08:11.562] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.562] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.572] | : . ' , ; ` | Not identical
[08:08:11.572] | : . ' , ; ` | all.equal() for future ...
[08:08:11.573] | : . ' , ; ` | : List of 2
[08:08:11.573] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.573] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.573] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.573] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.573] | : . ' , ; ` | :     ...)  
[08:08:11.573] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.573] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.573] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.573] | : . ' , ; ` | :     ...)  
[08:08:11.573] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.581] | : . ' , ; ` | : Formals differ
[08:08:11.581] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.581] | : . ' , ; ` | Future strategies differ at level 1
[08:08:11.581] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.581] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:11.581] | : . ' , ; ` List of future strategies:
[08:08:11.581] | : . ' , ; ` 1. sequential:
[08:08:11.581] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.581] | : . ' , ; `    - tweaked: FALSE
[08:08:11.581] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.582] | : . ' , ; ` List of 1
[08:08:11.582] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.582] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.582] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:11.582] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.582] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.582] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.582] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.582] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.586] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.586] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.586] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.586] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:11.586] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.586] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.586] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:11.586] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.586] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.586] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.586] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.589] | : . ' , ; ` | : init: TRUE
[08:08:11.589] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:11.589] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:11.589] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:11.589] | : . ' , ; ` | : .  list()
[08:08:11.589] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:11.590] | : . ' , ; ` | : .  list()
[08:08:11.590] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:11.590] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:11.590] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:11.590] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:11.591] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:11.591] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:11.591] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:11.592] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.592] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:11.592] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.592] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.592] | : . ' , assign_globals() ...
[08:08:11.592] | : . ' , List of 1
[08:08:11.592] | : . ' ,  $ a: num 1
[08:08:11.592] | : . ' ,  - attr(*, "where")=List of 1
[08:08:11.592] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:08:11.592] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.592] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.592] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.592] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.597] | : . ' , - copied ‘a’ to environment
[08:08:11.597] | : . ' , assign_globals() ... done
[08:08:11.599] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.599] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.600] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.600] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.600] | : . ' , ; ` | : New stack:
[08:08:11.600] | : . ' , ; ` | : List of 1
[08:08:11.600] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.600] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.600] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.600] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.600] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.600] | : . ' , ; ` | :     ...)  
[08:08:11.600] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.600] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.600] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.600] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.600] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.600] | : . ' , ; ` | :     ...)  
[08:08:11.600] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.600] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.603] | : . ' , ; ` | : Old stack:
[08:08:11.603] | : . ' , ; ` | : List of 1
[08:08:11.603] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.603] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.603] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.603] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.603] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.603] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.603] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.603] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5603623daba0> 
[08:08:11.603] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.603] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.603] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.606] | : . ' , ; ` | : Not identical
[08:08:11.607] | : . ' , ; ` | : all.equal() for future ...
[08:08:11.607] | : . ' , ; ` | : . List of 2
[08:08:11.607] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.607] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.607] | : . ' , ; ` | : .     ...)  
[08:08:11.607] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.607] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.607] | : . ' , ; ` | : .     ...)  
[08:08:11.607] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.607] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.607] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.607] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5603623daba0> 
[08:08:11.607] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.607] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.613] | : . ' , ; ` | : . Formals differ
[08:08:11.613] | : . ' , ; ` | : all.equal() for future ... done
[08:08:11.613] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:11.613] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.613] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:11.613] | : . ' , ; ` | List of future strategies:
[08:08:11.613] | : . ' , ; ` | 1. multicore:
[08:08:11.613] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:11.613] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.613] | : . ' , ; ` |    - call: plan(strategy)
[08:08:11.613] | : . ' , ; ` | List of 1
[08:08:11.613] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.613] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.613] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.613] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.613] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.613] | : . ' , ; ` |     ...)  
[08:08:11.613] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.613] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.613] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.613] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.613] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.613] | : . ' , ; ` |     ...)  
[08:08:11.613] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.613] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.618] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.618] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.619] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.619] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.619] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:11.619] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.619] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.619] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.620] | : readImmediateCondition() ...
[08:08:11.620] | : . Path: ‘/tmp/Rtmpq1wVao/.future/immediateConditions’
[08:08:11.620] | : . Number of RDS files: 0
[08:08:11.621] | : . Returned conditions set:
[08:08:11.621] | : .  list()
[08:08:11.621] | : readImmediateCondition() ... done
[08:08:11.622] | : result() for MulticoreFuture ...
[08:08:11.622] | : result() for MulticoreFuture ... done
[08:08:11.622] | : signalConditions() ...
[08:08:11.623] | : . include = ‘immediateCondition’
[08:08:11.623] | : . exclude = 
[08:08:11.623] | : . resignal = FALSE
[08:08:11.623] | : . Number of conditions: 6
[08:08:11.623] | : .  int 6
[08:08:11.624] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.624] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.625] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.625] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.625] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.625] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.625] | : signalConditions() ... done
[08:08:11.625] | result() for MulticoreFuture ... done
[08:08:11.626] | result() for MulticoreFuture ...
[08:08:11.626] | result() for MulticoreFuture ... done
[08:08:11.626] | signalConditions() ...
[08:08:11.626] | : include = ‘immediateCondition’
[08:08:11.626] | : exclude = 
[08:08:11.626] | : resignal = FALSE
[08:08:11.626] | : Number of conditions: 6
[08:08:11.627] | :  int 6
[08:08:11.627] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.627] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.629] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.629] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.630] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.630] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.630] | signalConditions() ... done
[08:08:11.630] | relay stdout ...
[08:08:11.631] | relay stdout ... done
[08:08:11.631] | check for misuse ...
[08:08:11.631] | check for misuse ... done
[08:08:11.631] | relay conditions ...
[08:08:11.631] | : Future state: ‘finished’
[08:08:11.632] | : result() for MulticoreFuture ...
[08:08:11.632] | : result() for MulticoreFuture ... done
[08:08:11.632] | : signalConditions() ...
[08:08:11.632] | : . include = ‘condition’
[08:08:11.632] | : . exclude = ‘immediateCondition’
[08:08:11.633] | : . resignal = TRUE
[08:08:11.633] | : . Number of conditions: 6
[08:08:11.633] | : .  int 6
[08:08:11.633] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.634] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.552] | : . ' , attachPackages() ...
[08:08:11.634] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.634] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.553] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.634] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.634] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.553] | : . ' , attachPackages() ... done
[08:08:11.634] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.635] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.554] | : . ' , attachPackages() ...
[08:08:11.635] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.635] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.554] | : . ' , ; packages: [n=0] 
[08:08:11.635] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.635] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.554] | : . ' , attachPackages() ... done
[08:08:11.635] | : signalConditions() ... done
[08:08:11.636] | relay conditions ... done
[08:08:11.636] value() for MulticoreFuture (<unnamed-11>) ... done
[08:08:11.636] future(..., label = NULL) ...
[08:08:11.636] | lazy: FALSE
[08:08:11.636] | stdout: TRUE
[08:08:11.636] | conditions: [n=1] ‘condition’
[08:08:11.636] | gc: FALSE
[08:08:11.636] | earlySignal: FALSE
[08:08:11.637] | getGlobalsAndPackages() ...
[08:08:11.637] | : Searching for globals ...
[08:08:11.644] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:11.644] | : Searching for globals ... done
[08:08:11.644] | : Resolving globals: FALSE
[08:08:11.644] | : Search for packages associated with the globals ...
[08:08:11.644] | : . Packages associated with globals: [1] ‘base’
[08:08:11.645] | : . Packages: [1] ‘base’
[08:08:11.645] | : Search for packages associated with the globals ... done
[08:08:11.645] | : Packages after dropping 'base': [0] 
[08:08:11.645] | : globals: [1] ‘a’
[08:08:11.645] | : packages: [0] 
[08:08:11.645] | getGlobalsAndPackages() ... done
[08:08:11.646] | run() for ‘Future’ (<unnamed-12>) ...
[08:08:11.646] | : state: ‘created’
[08:08:11.646] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.646] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.646] | : Using MulticoreFutureBackend ...
[08:08:11.646] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:11.646] | : . Launching futures ...
[08:08:11.647] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:11.647] | : . ' , getFutureData() ...
[08:08:11.647] | : . ' , ; getFutureCore() ...
[08:08:11.647] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.647] | : . ' , ; getFutureCore() ... done
[08:08:11.647] | : . ' , ; getFutureCapture() ...
[08:08:11.647] | : . ' , ; getFutureCapture() ... done
[08:08:11.647] | : . ' , ; getFutureContext() ...
[08:08:11.647] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.648] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.648] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.648] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.648] | : . ' , ; getFutureContext() ... done
[08:08:11.648] | : . ' , getFutureData() ... done
[08:08:11.648] | : . ' , requestCore(..., workers = 2) ...
[08:08:11.649] | : . ' , requestCore(..., workers = 2) ... done
[08:08:11.650] | : . ' , MulticoreFuture started
[08:08:11.651] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:11.651] | : . Launching futures ... done
[08:08:11.651] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:11.652] | : Using MulticoreFutureBackend ... done
[08:08:11.652] | run() for ‘Future’ (<unnamed-12>) ... done
[08:08:11.652] future(..., label = NULL) ... done
[08:08:11.652] value() for MulticoreFuture (<unnamed-12>) ...
[08:08:11.653] | result() for MulticoreFuture ...
[08:08:11.654] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.654] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:11.654] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.655] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.655] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.655] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.655] | : . ' , ; ` | New stack:
[08:08:11.655] | : . ' , ; ` | List of 1
[08:08:11.655] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.655] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.655] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.655] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.655] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.655] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.655] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.655] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.663] | : . ' , ; ` | Old stack:
[08:08:11.664] | : . ' , ; ` | List of 1
[08:08:11.664] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.664] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.664] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.664] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.664] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.664] | : . ' , ; ` |     ...)  
[08:08:11.664] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.664] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.664] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.664] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.664] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.664] | : . ' , ; ` |     ...)  
[08:08:11.664] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.664] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.671] | : . ' , ; ` | Not identical
[08:08:11.671] | : . ' , ; ` | all.equal() for future ...
[08:08:11.671] | : . ' , ; ` | : List of 2
[08:08:11.671] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.671] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.671] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.671] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.671] | : . ' , ; ` | :     ...)  
[08:08:11.671] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.671] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.671] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.671] | : . ' , ; ` | :     ...)  
[08:08:11.671] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.679] | : . ' , ; ` | : Formals differ
[08:08:11.679] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.679] | : . ' , ; ` | Future strategies differ at level 1
[08:08:11.679] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.679] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:11.680] | : . ' , ; ` List of future strategies:
[08:08:11.680] | : . ' , ; ` 1. sequential:
[08:08:11.680] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.680] | : . ' , ; `    - tweaked: FALSE
[08:08:11.680] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.680] | : . ' , ; ` List of 1
[08:08:11.680] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.680] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.680] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:11.680] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.680] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.680] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.680] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.680] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.684] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.684] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.684] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.684] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:11.684] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.684] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.684] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:11.684] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.684] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.684] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.684] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.687] | : . ' , ; ` | : init: TRUE
[08:08:11.687] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:11.687] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:11.687] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:11.687] | : . ' , ; ` | : .  list()
[08:08:11.687] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:11.688] | : . ' , ; ` | : .  list()
[08:08:11.688] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:11.688] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:11.688] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:11.688] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:11.689] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:11.689] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:11.690] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:11.690] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.690] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:11.690] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.690] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.690] | : . ' , assign_globals() ...
[08:08:11.690] | : . ' , List of 1
[08:08:11.690] | : . ' ,  $ a: num 1
[08:08:11.690] | : . ' ,  - attr(*, "where")=List of 1
[08:08:11.690] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:08:11.690] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.690] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.690] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.690] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.695] | : . ' , - copied ‘a’ to environment
[08:08:11.695] | : . ' , assign_globals() ... done
[08:08:11.697] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.697] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.698] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.698] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.698] | : . ' , ; ` | : New stack:
[08:08:11.698] | : . ' , ; ` | : List of 1
[08:08:11.698] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.698] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.698] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.698] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.698] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.698] | : . ' , ; ` | :     ...)  
[08:08:11.698] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.698] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.698] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.698] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.698] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.698] | : . ' , ; ` | :     ...)  
[08:08:11.698] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.698] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.701] | : . ' , ; ` | : Old stack:
[08:08:11.701] | : . ' , ; ` | : List of 1
[08:08:11.701] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.701] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.701] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.701] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.701] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.701] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.701] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.701] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5603624930f0> 
[08:08:11.701] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.701] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.701] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.705] | : . ' , ; ` | : Not identical
[08:08:11.705] | : . ' , ; ` | : all.equal() for future ...
[08:08:11.705] | : . ' , ; ` | : . List of 2
[08:08:11.705] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.705] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.705] | : . ' , ; ` | : .     ...)  
[08:08:11.705] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.705] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.705] | : . ' , ; ` | : .     ...)  
[08:08:11.705] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.705] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.705] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.705] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5603624930f0> 
[08:08:11.705] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.705] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.711] | : . ' , ; ` | : . Formals differ
[08:08:11.711] | : . ' , ; ` | : all.equal() for future ... done
[08:08:11.711] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:11.711] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.711] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:11.711] | : . ' , ; ` | List of future strategies:
[08:08:11.711] | : . ' , ; ` | 1. multicore:
[08:08:11.711] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:11.711] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.711] | : . ' , ; ` |    - call: plan(strategy)
[08:08:11.712] | : . ' , ; ` | List of 1
[08:08:11.712] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.712] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.712] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.712] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.712] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.712] | : . ' , ; ` |     ...)  
[08:08:11.712] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.712] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.712] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.712] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.712] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.712] | : . ' , ; ` |     ...)  
[08:08:11.712] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.712] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.716] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.717] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.717] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.717] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.717] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:11.717] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.717] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.717] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.718] | : readImmediateCondition() ...
[08:08:11.718] | : . Path: ‘/tmp/Rtmpq1wVao/.future/immediateConditions’
[08:08:11.719] | : . Number of RDS files: 0
[08:08:11.719] | : . Returned conditions set:
[08:08:11.719] | : .  list()
[08:08:11.719] | : readImmediateCondition() ... done
[08:08:11.720] | : result() for MulticoreFuture ...
[08:08:11.720] | : result() for MulticoreFuture ... done
[08:08:11.720] | : signalConditions() ...
[08:08:11.720] | : . include = ‘immediateCondition’
[08:08:11.720] | : . exclude = 
[08:08:11.721] | : . resignal = FALSE
[08:08:11.721] | : . Number of conditions: 6
[08:08:11.721] | : .  int 6
[08:08:11.721] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.722] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.722] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.722] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.722] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.722] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.722] | : signalConditions() ... done
[08:08:11.723] | result() for MulticoreFuture ... done
[08:08:11.723] | result() for MulticoreFuture ...
[08:08:11.723] | result() for MulticoreFuture ... done
[08:08:11.725] | signalConditions() ...
[08:08:11.725] | : include = ‘immediateCondition’
[08:08:11.725] | : exclude = 
[08:08:11.725] | : resignal = FALSE
[08:08:11.726] | : Number of conditions: 6
[08:08:11.726] | :  int 6
[08:08:11.727] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.727] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.727] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.728] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.728] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.728] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.728] | signalConditions() ... done
[08:08:11.728] | relay stdout ...
[08:08:11.728] | relay stdout ... done
[08:08:11.729] | check for misuse ...
[08:08:11.729] | check for misuse ... done
[08:08:11.729] | relay conditions ...
[08:08:11.729] | : Future state: ‘finished’
[08:08:11.729] | : result() for MulticoreFuture ...
[08:08:11.729] | : result() for MulticoreFuture ... done
[08:08:11.730] | : signalConditions() ...
[08:08:11.730] | : . include = ‘condition’
[08:08:11.730] | : . exclude = ‘immediateCondition’
[08:08:11.730] | : . resignal = TRUE
[08:08:11.730] | : . Number of conditions: 6
[08:08:11.730] | : .  int 6
[08:08:11.731] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.731] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.651] | : . ' , attachPackages() ...
[08:08:11.731] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.731] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.652] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.731] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.731] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.652] | : . ' , attachPackages() ... done
[08:08:11.732] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.732] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.652] | : . ' , attachPackages() ...
[08:08:11.732] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.732] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.653] | : . ' , ; packages: [n=0] 
[08:08:11.732] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.732] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.653] | : . ' , attachPackages() ... done
[08:08:11.733] | : signalConditions() ... done
[08:08:11.733] | relay conditions ... done
[08:08:11.733] value() for MulticoreFuture (<unnamed-12>) ... done
[08:08:11.733] future(..., label = NULL) ...
[08:08:11.733] | lazy: FALSE
[08:08:11.733] | stdout: TRUE
[08:08:11.733] | conditions: [n=1] ‘condition’
[08:08:11.734] | gc: FALSE
[08:08:11.734] | earlySignal: FALSE
[08:08:11.734] | getGlobalsAndPackages() ...
[08:08:11.734] | : Searching for globals ...
[08:08:11.741] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:11.741] | : Searching for globals ... done
[08:08:11.741] | : Resolving globals: FALSE
[08:08:11.741] | : Search for packages associated with the globals ...
[08:08:11.741] | : . Packages associated with globals: [1] ‘base’
[08:08:11.742] | : . Packages: [1] ‘base’
[08:08:11.742] | : Search for packages associated with the globals ... done
[08:08:11.742] | : Packages after dropping 'base': [0] 
[08:08:11.742] | : globals: [1] ‘a’
[08:08:11.742] | : packages: [0] 
[08:08:11.742] | getGlobalsAndPackages() ... done
[08:08:11.743] | run() for ‘Future’ (<unnamed-13>) ...
[08:08:11.743] | : state: ‘created’
[08:08:11.743] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.743] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.743] | : Using MulticoreFutureBackend ...
[08:08:11.743] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:11.743] | : . Launching futures ...
[08:08:11.744] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:11.744] | : . ' , getFutureData() ...
[08:08:11.744] | : . ' , ; getFutureCore() ...
[08:08:11.744] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.744] | : . ' , ; getFutureCore() ... done
[08:08:11.744] | : . ' , ; getFutureCapture() ...
[08:08:11.744] | : . ' , ; getFutureCapture() ... done
[08:08:11.744] | : . ' , ; getFutureContext() ...
[08:08:11.745] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.745] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.745] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.745] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.745] | : . ' , ; getFutureContext() ... done
[08:08:11.745] | : . ' , getFutureData() ... done
[08:08:11.745] | : . ' , requestCore(..., workers = 2) ...
[08:08:11.746] | : . ' , requestCore(..., workers = 2) ... done
[08:08:11.748] | : . ' , MulticoreFuture started
[08:08:11.748] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:11.748] | : . Launching futures ... done
[08:08:11.748] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:11.749] | : Using MulticoreFutureBackend ... done
[08:08:11.749] | run() for ‘Future’ (<unnamed-13>) ... done
[08:08:11.749] future(..., label = NULL) ... done
[08:08:11.749] value() for MulticoreFuture (<unnamed-13>) ...
[08:08:11.750] | result() for MulticoreFuture ...
[08:08:11.751] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.751] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:11.751] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.752] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.752] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.752] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.752] | : . ' , ; ` | New stack:
[08:08:11.753] | : . ' , ; ` | List of 1
[08:08:11.753] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.753] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.753] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.753] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.753] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.753] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.753] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.753] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.763] | : . ' , ; ` | Old stack:
[08:08:11.763] | : . ' , ; ` | List of 1
[08:08:11.763] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.763] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.763] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.763] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.763] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.763] | : . ' , ; ` |     ...)  
[08:08:11.763] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.763] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.763] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.763] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.763] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.763] | : . ' , ; ` |     ...)  
[08:08:11.763] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.763] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.769] | : . ' , ; ` | Not identical
[08:08:11.769] | : . ' , ; ` | all.equal() for future ...
[08:08:11.769] | : . ' , ; ` | : List of 2
[08:08:11.769] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.769] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.769] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.769] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.769] | : . ' , ; ` | :     ...)  
[08:08:11.769] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.769] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.769] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.769] | : . ' , ; ` | :     ...)  
[08:08:11.769] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.777] | : . ' , ; ` | : Formals differ
[08:08:11.777] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.777] | : . ' , ; ` | Future strategies differ at level 1
[08:08:11.777] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.778] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:11.778] | : . ' , ; ` List of future strategies:
[08:08:11.778] | : . ' , ; ` 1. sequential:
[08:08:11.778] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.778] | : . ' , ; `    - tweaked: FALSE
[08:08:11.778] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.778] | : . ' , ; ` List of 1
[08:08:11.778] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.778] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.778] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:11.778] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.778] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.778] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.778] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.778] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.782] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.782] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.782] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.782] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:11.782] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.782] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.782] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:11.782] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.782] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.782] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.782] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.785] | : . ' , ; ` | : init: TRUE
[08:08:11.785] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:11.785] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:11.785] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:11.785] | : . ' , ; ` | : .  list()
[08:08:11.785] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:11.786] | : . ' , ; ` | : .  list()
[08:08:11.786] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:11.786] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:11.786] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:11.786] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:11.787] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:11.789] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:11.789] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:11.789] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.789] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:11.790] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.790] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.790] | : . ' , assign_globals() ...
[08:08:11.790] | : . ' , List of 1
[08:08:11.790] | : . ' ,  $ a: num 1
[08:08:11.790] | : . ' ,  - attr(*, "where")=List of 1
[08:08:11.790] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:08:11.790] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.790] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.790] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.790] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.793] | : . ' , - copied ‘a’ to environment
[08:08:11.793] | : . ' , assign_globals() ... done
[08:08:11.795] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.795] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.796] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.796] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.796] | : . ' , ; ` | : New stack:
[08:08:11.796] | : . ' , ; ` | : List of 1
[08:08:11.796] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.796] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.796] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.796] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.796] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.796] | : . ' , ; ` | :     ...)  
[08:08:11.796] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.796] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.796] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.796] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.796] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.796] | : . ' , ; ` | :     ...)  
[08:08:11.796] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.796] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.799] | : . ' , ; ` | : Old stack:
[08:08:11.799] | : . ' , ; ` | : List of 1
[08:08:11.799] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.799] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.799] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.799] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.799] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.799] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.799] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.799] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5603628d9b30> 
[08:08:11.799] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.799] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.799] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.802] | : . ' , ; ` | : Not identical
[08:08:11.803] | : . ' , ; ` | : all.equal() for future ...
[08:08:11.803] | : . ' , ; ` | : . List of 2
[08:08:11.803] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.803] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.803] | : . ' , ; ` | : .     ...)  
[08:08:11.803] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.803] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.803] | : . ' , ; ` | : .     ...)  
[08:08:11.803] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.803] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.803] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.803] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5603628d9b30> 
[08:08:11.803] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.803] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.810] | : . ' , ; ` | : . Formals differ
[08:08:11.810] | : . ' , ; ` | : all.equal() for future ... done
[08:08:11.810] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:11.810] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.811] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:11.811] | : . ' , ; ` | List of future strategies:
[08:08:11.811] | : . ' , ; ` | 1. multicore:
[08:08:11.811] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:11.811] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.811] | : . ' , ; ` |    - call: plan(strategy)
[08:08:11.811] | : . ' , ; ` | List of 1
[08:08:11.811] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.811] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.811] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.811] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.811] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.811] | : . ' , ; ` |     ...)  
[08:08:11.811] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.811] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.811] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.811] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.811] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.811] | : . ' , ; ` |     ...)  
[08:08:11.811] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.811] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.815] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.815] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.815] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.815] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.815] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:11.815] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.815] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.816] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.816] | : readImmediateCondition() ...
[08:08:11.816] | : . Path: ‘/tmp/Rtmpq1wVao/.future/immediateConditions’
[08:08:11.817] | : . Number of RDS files: 0
[08:08:11.817] | : . Returned conditions set:
[08:08:11.817] | : .  list()
[08:08:11.818] | : readImmediateCondition() ... done
[08:08:11.818] | : result() for MulticoreFuture ...
[08:08:11.818] | : result() for MulticoreFuture ... done
[08:08:11.818] | : signalConditions() ...
[08:08:11.818] | : . include = ‘immediateCondition’
[08:08:11.819] | : . exclude = 
[08:08:11.819] | : . resignal = FALSE
[08:08:11.819] | : . Number of conditions: 6
[08:08:11.819] | : .  int 6
[08:08:11.822] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.822] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.822] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.823] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.823] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.823] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.823] | : signalConditions() ... done
[08:08:11.824] | result() for MulticoreFuture ... done
[08:08:11.824] | result() for MulticoreFuture ...
[08:08:11.824] | result() for MulticoreFuture ... done
[08:08:11.824] | signalConditions() ...
[08:08:11.824] | : include = ‘immediateCondition’
[08:08:11.825] | : exclude = 
[08:08:11.825] | : resignal = FALSE
[08:08:11.825] | : Number of conditions: 6
[08:08:11.825] | :  int 6
[08:08:11.826] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.826] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.826] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.826] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.826] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.827] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.827] | signalConditions() ... done
[08:08:11.827] | relay stdout ...
[08:08:11.827] | relay stdout ... done
[08:08:11.827] | check for misuse ...
[08:08:11.827] | check for misuse ... done
[08:08:11.827] | relay conditions ...
[08:08:11.827] | : Future state: ‘finished’
[08:08:11.828] | : result() for MulticoreFuture ...
[08:08:11.828] | : result() for MulticoreFuture ... done
[08:08:11.828] | : signalConditions() ...
[08:08:11.828] | : . include = ‘condition’
[08:08:11.828] | : . exclude = ‘immediateCondition’
[08:08:11.828] | : . resignal = TRUE
[08:08:11.828] | : . Number of conditions: 6
[08:08:11.829] | : .  int 6
[08:08:11.829] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.829] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.749] | : . ' , attachPackages() ...
[08:08:11.829] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.830] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.749] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.830] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.830] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.749] | : . ' , attachPackages() ... done
[08:08:11.830] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.830] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.750] | : . ' , attachPackages() ...
[08:08:11.830] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.831] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.750] | : . ' , ; packages: [n=0] 
[08:08:11.831] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.831] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.750] | : . ' , attachPackages() ... done
[08:08:11.831] | : signalConditions() ... done
[08:08:11.831] | relay conditions ... done
[08:08:11.831] value() for MulticoreFuture (<unnamed-13>) ... done
[08:08:11.831] future(..., label = NULL) ...
[08:08:11.832] | lazy: TRUE
[08:08:11.832] | stdout: TRUE
[08:08:11.832] | conditions: [n=1] ‘condition’
[08:08:11.832] | gc: FALSE
[08:08:11.832] | earlySignal: FALSE
[08:08:11.832] | getGlobalsAndPackages() ...
[08:08:11.832] | : Searching for globals ...
[08:08:11.839] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:11.839] | : Searching for globals ... done
[08:08:11.839] | : Resolving globals: FALSE
[08:08:11.839] | : Search for packages associated with the globals ...
[08:08:11.840] | : . Packages associated with globals: [1] ‘base’
[08:08:11.840] | : . Packages: [1] ‘base’
[08:08:11.840] | : Search for packages associated with the globals ... done
[08:08:11.840] | : Packages after dropping 'base': [0] 
[08:08:11.840] | : globals: [1] ‘a’
[08:08:11.841] | : packages: [0] 
[08:08:11.841] | getGlobalsAndPackages() ... done
[08:08:11.841] future(..., label = NULL) ... done
[08:08:11.841] value() for Future (<unnamed-14>) ...
[08:08:11.841] | run() for ‘Future’ (<unnamed-14>) ...
[08:08:11.841] | : state: ‘created’
[08:08:11.842] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.842] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.842] | : Using MulticoreFutureBackend ...
[08:08:11.842] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:11.842] | : . Launching futures ...
[08:08:11.842] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:11.842] | : . ' , getFutureData() ...
[08:08:11.842] | : . ' , ; getFutureCore() ...
[08:08:11.843] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.843] | : . ' , ; getFutureCore() ... done
[08:08:11.843] | : . ' , ; getFutureCapture() ...
[08:08:11.843] | : . ' , ; getFutureCapture() ... done
[08:08:11.843] | : . ' , ; getFutureContext() ...
[08:08:11.843] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.843] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.843] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.843] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.844] | : . ' , ; getFutureContext() ... done
[08:08:11.844] | : . ' , getFutureData() ... done
[08:08:11.844] | : . ' , requestCore(..., workers = 2) ...
[08:08:11.844] | : . ' , requestCore(..., workers = 2) ... done
[08:08:11.846] | : . ' , MulticoreFuture started
[08:08:11.847] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:11.847] | : . Launching futures ... done
[08:08:11.847] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:11.847] | : Using MulticoreFutureBackend ... done
[08:08:11.847] | run() for ‘Future’ (<unnamed-14>) ... done
[08:08:11.848] | result() for MulticoreFuture ...
[08:08:11.850] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.850] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:11.850] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.853] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.854] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.854] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.855] | : . ' , ; ` | New stack:
[08:08:11.855] | : . ' , ; ` | List of 1
[08:08:11.855] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.855] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.855] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.855] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.855] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.855] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.855] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.855] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.863] | : . ' , ; ` | Old stack:
[08:08:11.863] | : . ' , ; ` | List of 1
[08:08:11.863] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.863] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.863] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.863] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.863] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.863] | : . ' , ; ` |     ...)  
[08:08:11.863] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.863] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.863] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.863] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.863] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.863] | : . ' , ; ` |     ...)  
[08:08:11.863] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.863] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.868] | : . ' , ; ` | Not identical
[08:08:11.868] | : . ' , ; ` | all.equal() for future ...
[08:08:11.869] | : . ' , ; ` | : List of 2
[08:08:11.869] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.869] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.869] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.869] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.869] | : . ' , ; ` | :     ...)  
[08:08:11.869] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.869] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.869] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.869] | : . ' , ; ` | :     ...)  
[08:08:11.869] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.876] | : . ' , ; ` | : Formals differ
[08:08:11.876] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.876] | : . ' , ; ` | Future strategies differ at level 1
[08:08:11.876] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.877] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:11.877] | : . ' , ; ` List of future strategies:
[08:08:11.877] | : . ' , ; ` 1. sequential:
[08:08:11.877] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.877] | : . ' , ; `    - tweaked: FALSE
[08:08:11.877] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.877] | : . ' , ; ` List of 1
[08:08:11.877] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.877] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.877] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:11.877] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.877] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.877] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.877] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.877] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.881] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.881] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.881] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.881] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:11.881] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.881] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.881] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:11.881] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.881] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.881] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.881] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.884] | : . ' , ; ` | : init: TRUE
[08:08:11.884] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:11.884] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:11.884] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:11.884] | : . ' , ; ` | : .  list()
[08:08:11.886] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:11.886] | : . ' , ; ` | : .  list()
[08:08:11.886] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:11.887] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:11.887] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:11.887] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:11.888] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:11.888] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:11.888] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:11.888] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.889] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:11.889] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.889] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.889] | : . ' , assign_globals() ...
[08:08:11.889] | : . ' , List of 1
[08:08:11.889] | : . ' ,  $ a: num 1
[08:08:11.889] | : . ' ,  - attr(*, "where")=List of 1
[08:08:11.889] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:08:11.889] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.889] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.889] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.889] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.892] | : . ' , - copied ‘a’ to environment
[08:08:11.892] | : . ' , assign_globals() ... done
[08:08:11.895] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.895] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.895] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.895] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.895] | : . ' , ; ` | : New stack:
[08:08:11.895] | : . ' , ; ` | : List of 1
[08:08:11.895] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.895] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.895] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.895] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.895] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.895] | : . ' , ; ` | :     ...)  
[08:08:11.895] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.895] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.895] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.895] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.895] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.895] | : . ' , ; ` | :     ...)  
[08:08:11.895] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.895] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.899] | : . ' , ; ` | : Old stack:
[08:08:11.899] | : . ' , ; ` | : List of 1
[08:08:11.899] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.899] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.899] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.899] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.899] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.899] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.899] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.899] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560362371188> 
[08:08:11.899] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.899] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.899] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.902] | : . ' , ; ` | : Not identical
[08:08:11.902] | : . ' , ; ` | : all.equal() for future ...
[08:08:11.902] | : . ' , ; ` | : . List of 2
[08:08:11.902] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.902] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.902] | : . ' , ; ` | : .     ...)  
[08:08:11.902] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.902] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.902] | : . ' , ; ` | : .     ...)  
[08:08:11.902] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.902] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.902] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.902] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560362371188> 
[08:08:11.902] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.902] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.910] | : . ' , ; ` | : . Formals differ
[08:08:11.910] | : . ' , ; ` | : all.equal() for future ... done
[08:08:11.910] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:11.910] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:11.910] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:11.910] | : . ' , ; ` | List of future strategies:
[08:08:11.910] | : . ' , ; ` | 1. multicore:
[08:08:11.910] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:11.910] | : . ' , ; ` |    - tweaked: FALSE
[08:08:11.910] | : . ' , ; ` |    - call: plan(strategy)
[08:08:11.911] | : . ' , ; ` | List of 1
[08:08:11.911] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.911] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.911] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.911] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.911] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.911] | : . ' , ; ` |     ...)  
[08:08:11.911] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.911] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.911] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.911] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.911] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.911] | : . ' , ; ` |     ...)  
[08:08:11.911] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.911] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.914] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.914] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.914] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.914] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.915] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:11.915] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.915] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.915] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.916] | : readImmediateCondition() ...
[08:08:11.916] | : . Path: ‘/tmp/Rtmpq1wVao/.future/immediateConditions’
[08:08:11.916] | : . Number of RDS files: 0
[08:08:11.916] | : . Returned conditions set:
[08:08:11.917] | : .  list()
[08:08:11.919] | : readImmediateCondition() ... done
[08:08:11.920] | : result() for MulticoreFuture ...
[08:08:11.920] | : result() for MulticoreFuture ... done
[08:08:11.920] | : signalConditions() ...
[08:08:11.921] | : . include = ‘immediateCondition’
[08:08:11.921] | : . exclude = 
[08:08:11.921] | : . resignal = FALSE
[08:08:11.921] | : . Number of conditions: 6
[08:08:11.922] | : .  int 6
[08:08:11.922] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.923] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.923] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.923] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.923] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.923] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.924] | : signalConditions() ... done
[08:08:11.924] | result() for MulticoreFuture ... done
[08:08:11.924] | result() for MulticoreFuture ...
[08:08:11.924] | result() for MulticoreFuture ... done
[08:08:11.924] | signalConditions() ...
[08:08:11.924] | : include = ‘immediateCondition’
[08:08:11.924] | : exclude = 
[08:08:11.925] | : resignal = FALSE
[08:08:11.925] | : Number of conditions: 6
[08:08:11.925] | :  int 6
[08:08:11.925] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.926] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.926] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.926] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.926] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.926] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.926] | signalConditions() ... done
[08:08:11.926] | relay stdout ...
[08:08:11.927] | relay stdout ... done
[08:08:11.927] | check for misuse ...
[08:08:11.927] | check for misuse ... done
[08:08:11.927] | relay conditions ...
[08:08:11.927] | : Future state: ‘finished’
[08:08:11.927] | : result() for MulticoreFuture ...
[08:08:11.927] | : result() for MulticoreFuture ... done
[08:08:11.927] | : signalConditions() ...
[08:08:11.928] | : . include = ‘condition’
[08:08:11.928] | : . exclude = ‘immediateCondition’
[08:08:11.928] | : . resignal = TRUE
[08:08:11.928] | : . Number of conditions: 6
[08:08:11.928] | : .  int 6
[08:08:11.929] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.929] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.847] | : . ' , attachPackages() ...
[08:08:11.929] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.929] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.848] | : . ' , ; packages: [n=1] ‘future’
[08:08:11.929] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.929] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.848] | : . ' , attachPackages() ... done
[08:08:11.930] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.930] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.848] | : . ' , attachPackages() ...
[08:08:11.930] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.930] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.849] | : . ' , ; packages: [n=0] 
[08:08:11.930] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:11.930] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.849] | : . ' , attachPackages() ... done
[08:08:11.930] | : signalConditions() ... done
[08:08:11.931] | relay conditions ... done
[08:08:11.931] value() for Future (<unnamed-14>) ... done
[08:08:11.931] future(..., label = NULL) ...
[08:08:11.931] | lazy: TRUE
[08:08:11.931] | stdout: TRUE
[08:08:11.931] | conditions: [n=1] ‘condition’
[08:08:11.931] | gc: FALSE
[08:08:11.932] | earlySignal: FALSE
[08:08:11.932] | getGlobalsAndPackages() ...
[08:08:11.932] | : Searching for globals ...
[08:08:11.938] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:11.938] | : Searching for globals ... done
[08:08:11.939] | : Resolving globals: FALSE
[08:08:11.939] | : Search for packages associated with the globals ...
[08:08:11.939] | : . Packages associated with globals: [1] ‘base’
[08:08:11.939] | : . Packages: [1] ‘base’
[08:08:11.939] | : Search for packages associated with the globals ... done
[08:08:11.940] | : Packages after dropping 'base': [0] 
[08:08:11.940] | : globals: [1] ‘a’
[08:08:11.940] | : packages: [0] 
[08:08:11.940] | getGlobalsAndPackages() ... done
[08:08:11.940] future(..., label = NULL) ... done
[08:08:11.940] value() for Future (<unnamed-15>) ...
[08:08:11.941] | run() for ‘Future’ (<unnamed-15>) ...
[08:08:11.941] | : state: ‘created’
[08:08:11.941] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.941] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.941] | : Using MulticoreFutureBackend ...
[08:08:11.941] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:11.941] | : . Launching futures ...
[08:08:11.942] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:11.942] | : . ' , getFutureData() ...
[08:08:11.942] | : . ' , ; getFutureCore() ...
[08:08:11.942] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.942] | : . ' , ; getFutureCore() ... done
[08:08:11.942] | : . ' , ; getFutureCapture() ...
[08:08:11.942] | : . ' , ; getFutureCapture() ... done
[08:08:11.942] | : . ' , ; getFutureContext() ...
[08:08:11.942] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.943] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.943] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.943] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.943] | : . ' , ; getFutureContext() ... done
[08:08:11.943] | : . ' , getFutureData() ... done
[08:08:11.943] | : . ' , requestCore(..., workers = 2) ...
[08:08:11.944] | : . ' , requestCore(..., workers = 2) ... done
[08:08:11.948] | : . ' , MulticoreFuture started
[08:08:11.948] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:11.949] | : . Launching futures ... done
[08:08:11.949] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:11.950] | : Using MulticoreFutureBackend ... done
[08:08:11.950] | run() for ‘Future’ (<unnamed-15>) ... done
[08:08:11.951] | result() for MulticoreFuture ...
[08:08:11.952] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.953] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:11.953] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.954] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.955] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.956] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.956] | : . ' , ; ` | New stack:
[08:08:11.956] | : . ' , ; ` | List of 1
[08:08:11.956] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.956] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.956] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.956] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.956] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.956] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.956] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.956] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.963] | : . ' , ; ` | Old stack:
[08:08:11.963] | : . ' , ; ` | List of 1
[08:08:11.963] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.963] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.963] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.963] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.963] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.963] | : . ' , ; ` |     ...)  
[08:08:11.963] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.963] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.963] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:11.963] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.963] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.963] | : . ' , ; ` |     ...)  
[08:08:11.963] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.963] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.969] | : . ' , ; ` | Not identical
[08:08:11.969] | : . ' , ; ` | all.equal() for future ...
[08:08:11.970] | : . ' , ; ` | : List of 2
[08:08:11.970] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.970] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.970] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.970] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.970] | : . ' , ; ` | :     ...)  
[08:08:11.970] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.970] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.970] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.970] | : . ' , ; ` | :     ...)  
[08:08:11.970] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.978] | : . ' , ; ` | : Formals differ
[08:08:11.978] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.978] | : . ' , ; ` | Future strategies differ at level 1
[08:08:11.979] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.979] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:11.979] | : . ' , ; ` List of future strategies:
[08:08:11.979] | : . ' , ; ` 1. sequential:
[08:08:11.979] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.979] | : . ' , ; `    - tweaked: FALSE
[08:08:11.979] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.980] | : . ' , ; ` List of 1
[08:08:11.980] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.980] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.980] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:11.980] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.980] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.980] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.980] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.980] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.983] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:11.984] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:11.984] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.984] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:11.984] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.984] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.984] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:11.984] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.984] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.984] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.984] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.988] | : . ' , ; ` | : init: TRUE
[08:08:11.988] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:11.988] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:11.988] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:11.989] | : . ' , ; ` | : .  list()
[08:08:11.989] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:11.989] | : . ' , ; ` | : .  list()
[08:08:11.989] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:11.989] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:11.989] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:11.989] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:11.991] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:11.991] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:11.991] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:11.991] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.991] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:11.991] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.991] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.992] | : . ' , assign_globals() ...
[08:08:11.992] | : . ' , List of 1
[08:08:11.992] | : . ' ,  $ a: num 1
[08:08:11.992] | : . ' ,  - attr(*, "where")=List of 1
[08:08:11.992] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:08:11.992] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.992] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.992] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.992] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.994] | : . ' , - copied ‘a’ to environment
[08:08:11.994] | : . ' , assign_globals() ... done
[08:08:11.996] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.997] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.997] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.997] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:11.997] | : . ' , ; ` | : New stack:
[08:08:11.997] | : . ' , ; ` | : List of 1
[08:08:11.997] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:11.997] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:11.997] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:11.997] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.997] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.997] | : . ' , ; ` | :     ...)  
[08:08:11.997] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.997] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.997] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:11.997] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:11.997] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:11.997] | : . ' , ; ` | :     ...)  
[08:08:11.997] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:11.997] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:12.000] | : . ' , ; ` | : Old stack:
[08:08:12.000] | : . ' , ; ` | : List of 1
[08:08:12.000] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:12.000] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:12.000] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:12.000] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:12.000] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.000] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.000] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:12.000] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560360aad098> 
[08:08:12.000] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:12.000] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.000] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:12.003] | : . ' , ; ` | : Not identical
[08:08:12.004] | : . ' , ; ` | : all.equal() for future ...
[08:08:12.004] | : . ' , ; ` | : . List of 2
[08:08:12.004] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:12.004] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:12.004] | : . ' , ; ` | : .     ...)  
[08:08:12.004] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:12.004] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:12.004] | : . ' , ; ` | : .     ...)  
[08:08:12.004] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.004] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:12.004] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:12.004] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560360aad098> 
[08:08:12.004] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:12.004] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.011] | : . ' , ; ` | : . Formals differ
[08:08:12.011] | : . ' , ; ` | : all.equal() for future ... done
[08:08:12.011] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:12.011] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:12.011] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:12.011] | : . ' , ; ` | List of future strategies:
[08:08:12.011] | : . ' , ; ` | 1. multicore:
[08:08:12.011] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:12.011] | : . ' , ; ` |    - tweaked: FALSE
[08:08:12.011] | : . ' , ; ` |    - call: plan(strategy)
[08:08:12.012] | : . ' , ; ` | List of 1
[08:08:12.012] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:12.012] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:12.012] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:12.012] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:12.012] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:12.012] | : . ' , ; ` |     ...)  
[08:08:12.012] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.012] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.012] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:12.012] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:12.012] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:12.012] | : . ' , ; ` |     ...)  
[08:08:12.012] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.012] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:12.015] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:12.015] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:12.015] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.015] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:12.015] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:12.015] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:12.016] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:12.016] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:12.016] | : readImmediateCondition() ...
[08:08:12.017] | : . Path: ‘/tmp/Rtmpq1wVao/.future/immediateConditions’
[08:08:12.017] | : . Number of RDS files: 0
[08:08:12.017] | : . Returned conditions set:
[08:08:12.017] | : .  list()
[08:08:12.018] | : readImmediateCondition() ... done
[08:08:12.019] | : result() for MulticoreFuture ...
[08:08:12.019] | : result() for MulticoreFuture ... done
[08:08:12.019] | : signalConditions() ...
[08:08:12.019] | : . include = ‘immediateCondition’
[08:08:12.020] | : . exclude = 
[08:08:12.020] | : . resignal = FALSE
[08:08:12.020] | : . Number of conditions: 6
[08:08:12.020] | : .  int 6
[08:08:12.021] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.021] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.021] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.021] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.021] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.021] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.022] | : signalConditions() ... done
[08:08:12.022] | result() for MulticoreFuture ... done
[08:08:12.022] | result() for MulticoreFuture ...
[08:08:12.022] | result() for MulticoreFuture ... done
[08:08:12.022] | signalConditions() ...
[08:08:12.022] | : include = ‘immediateCondition’
[08:08:12.022] | : exclude = 
[08:08:12.023] | : resignal = FALSE
[08:08:12.023] | : Number of conditions: 6
[08:08:12.023] | :  int 6
[08:08:12.023] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.024] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.024] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.024] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.024] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.024] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.024] | signalConditions() ... done
[08:08:12.024] | relay stdout ...
[08:08:12.025] | relay stdout ... done
[08:08:12.025] | check for misuse ...
[08:08:12.025] | check for misuse ... done
[08:08:12.025] | relay conditions ...
[08:08:12.025] | : Future state: ‘finished’
[08:08:12.025] | : result() for MulticoreFuture ...
[08:08:12.025] | : result() for MulticoreFuture ... done
[08:08:12.025] | : signalConditions() ...
[08:08:12.026] | : . include = ‘condition’
[08:08:12.026] | : . exclude = ‘immediateCondition’
[08:08:12.026] | : . resignal = TRUE
[08:08:12.026] | : . Number of conditions: 6
[08:08:12.026] | : .  int 6
[08:08:12.026] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.027] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.949] | : . ' , attachPackages() ...
[08:08:12.027] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.027] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.949] | : . ' , ; packages: [n=1] ‘future’
[08:08:12.027] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.027] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.950] | : . ' , attachPackages() ... done
[08:08:12.027] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.028] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.951] | : . ' , attachPackages() ...
[08:08:12.028] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.028] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.951] | : . ' , ; packages: [n=0] 
[08:08:12.028] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.028] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.951] | : . ' , attachPackages() ... done
[08:08:12.028] | : signalConditions() ... done
[08:08:12.028] | relay conditions ... done
[08:08:12.029] value() for Future (<unnamed-15>) ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[08:08:12.029] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.029] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:12.029] | : all.equal() for FutureStrategyList ...
[08:08:12.030] | : . New stack:
[08:08:12.030] | : . List of 1
[08:08:12.030] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:12.030] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:12.030] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:12.030] | : .   ..- attr(*, "init")= logi TRUE
[08:08:12.030] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:12.030] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:12.030] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:12.030] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:12.030] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:12.030] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:12.030] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:12.033] | : . Old stack:
[08:08:12.033] | : . List of 1
[08:08:12.033] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:12.033] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:12.033] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:12.033] | : .   ..- attr(*, "init")= chr "done"
[08:08:12.033] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:12.033] | : .     ...)  
[08:08:12.033] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.033] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.033] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:12.033] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:12.033] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:12.033] | : .     ...)  
[08:08:12.033] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.033] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:12.037] | : . Not identical
[08:08:12.037] | : . all.equal() for future ...
[08:08:12.037] | : . ' List of 2
[08:08:12.037] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:12.037] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:12.037] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:12.037] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:12.037] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:12.037] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:12.037] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:12.037] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:12.037] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:12.037] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:12.037] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:12.037] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:12.037] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:12.037] | : . '   ..- attr(*, "init")= chr "done"
[08:08:12.037] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:12.037] | : . '     ...)  
[08:08:12.037] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.037] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.037] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:12.037] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x56035fbcb238> 
[08:08:12.037] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:12.037] | : . '     ...)  
[08:08:12.037] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:12.046] | : . ' Formals differ
[08:08:12.046] | : . all.equal() for future ... done
[08:08:12.046] | : . Future strategies differ at level 1
[08:08:12.046] | : all.equal() for FutureStrategyList ... done
[08:08:12.046] | : plan(): Setting new future backend stack:
[08:08:12.046] | : List of future strategies:
[08:08:12.046] | : 1. multisession:
[08:08:12.046] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:12.046] | :    - tweaked: FALSE
[08:08:12.046] | :    - call: plan(strategy)
[08:08:12.046] | : List of 1
[08:08:12.046] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:12.046] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:12.046] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:12.046] | :   ..- attr(*, "init")= logi TRUE
[08:08:12.046] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:12.046] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:12.046] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:12.046] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:12.046] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:12.046] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:12.046] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:12.049] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:12.050] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.050] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:12.050] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:12.051] | : . Legacy shutdown of cluster workers ...
[08:08:12.051] | : . ' Stopping existing cluster ...
[08:08:12.051] | : . ' , No pre-existing cluster. Skipping
[08:08:12.051] | : . ' Stopping existing cluster ... done
[08:08:12.051] | : . Legacy shutdown of cluster workers ... done
[08:08:12.051] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:12.051] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:12.051] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:12.051] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:12.051] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:12.051] | : .  - attr(*, "init")= logi TRUE
[08:08:12.051] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:12.051] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:12.051] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:12.051] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:12.051] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:12.051] | : .  - attr(*, "call")= language plan(strategy)
[08:08:12.054] | : . init: TRUE
[08:08:12.054] | : . makeFutureBackend(<multisession>) ...
[08:08:12.054] | : . ' Backend function: <‘NULL’>
[08:08:12.054] | : . ' Evaluator tweak arguments: [n=0]
[08:08:12.054] | : . '  list()
[08:08:12.055] | : . ' Evaluator formal arguments: [n=4]
[08:08:12.055] | : . '  list()
[08:08:12.055] | : . ' Backend factory arguments: [n=4]
[08:08:12.055] | : . ' Dotted pair list of 4
[08:08:12.055] | : . '  $ workers     : language availableCores()
[08:08:12.055] | : . '  $ rscript_libs: language .libPaths()
[08:08:12.055] | : . '  $ gc          : logi FALSE
[08:08:12.055] | : . '  $ earlySignal : logi FALSE
[08:08:12.057] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:12.057] | : . ' , Arguments:
[08:08:12.057] | : . ' , List of 5
[08:08:12.057] | : . ' ,  $ workers     : Named int 2
[08:08:12.057] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:12.057] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:12.057] | : . ' ,  $ interrupts  : logi TRUE
[08:08:12.057] | : . ' ,  $ gc          : logi FALSE
[08:08:12.057] | : . ' ,  $ earlySignal : logi FALSE
[08:08:12.061] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:12.061] | : . ' , ; workers: 2
[08:08:12.061] | : . ' , ; getCluster() ...
[08:08:12.061] | : . ' , ; getCluster() ... done
[08:08:12.061] | : . ' , ; Stopping existing cluster ...
[08:08:12.062] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:12.062] | : . ' , ; Stopping existing cluster ... done
[08:08:12.062] | : . ' , ; Starting new cluster ...
[08:08:12.062] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:12.062] | : . ' , ; ` | Arguments:
[08:08:12.062] | : . ' , ; ` | List of 2
[08:08:12.062] | : . ' , ; ` |  $             : int 2
[08:08:12.062] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:12.065] | : . ' , ; ` | .makeCluster() ...
[08:08:12.065] | : . ' , ; ` | : workers: ‘2’
[08:08:12.065] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:12.065] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:12.065] | : . ' , ; ` | : List of 2
[08:08:12.065] | : . ' , ; ` | :  $             : int 2
[08:08:12.065] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:12.573] | : . ' , ; ` | : Generated cluster UUID
[08:08:12.574] | : . ' , ; ` | : Cluster UUID: ‘a07ac8344f2738daaab5049f3c11db11’
[08:08:12.574] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:12.576] | : . ' , ; ` | .makeCluster() ... done
[08:08:12.576] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:12.578] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:12.578] | : . ' , ; ` Number of workers: 2
[08:08:12.578] | : . ' , ; ` Workers UUID: ‘a07ac8344f2738daaab5049f3c11db11’
[08:08:12.578] | : . ' , ; Starting new cluster ... done
[08:08:12.578] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:12.578] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:12.579] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:12.579] | : . makeFutureBackend(<multisession>) ... done
[08:08:12.579] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.579] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:12.579] | : . plan(): nbrOfWorkers() = 2
[08:08:12.579] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:12.579] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:12.579] | future(..., label = NULL) ...
[08:08:12.580] | : lazy: FALSE
[08:08:12.580] | : stdout: TRUE
[08:08:12.580] | : conditions: [n=1] ‘condition’
[08:08:12.580] | : gc: FALSE
[08:08:12.580] | : earlySignal: FALSE
[08:08:12.580] | : getGlobalsAndPackages() ...
[08:08:12.580] | : . Searching for globals ...
[08:08:12.583] | : . ' globals found: [1] ‘{’
[08:08:12.583] | : . Searching for globals ... done
[08:08:12.583] | : . Resolving globals: FALSE
[08:08:12.583] | : . Search for packages associated with the globals ...
[08:08:12.584] | : . ' Packages associated with globals: [1] ‘base’
[08:08:12.584] | : . ' Packages: [1] ‘base’
[08:08:12.584] | : . Search for packages associated with the globals ... done
[08:08:12.584] | : . Packages after dropping 'base': [0] 
[08:08:12.584] | : . globals: [0] 
[08:08:12.584] | : . packages: [0] 
[08:08:12.584] | : getGlobalsAndPackages() ... done
[08:08:12.585] | : run() for ‘Future’ (<unnamed-16>) ...
[08:08:12.585] | : . state: ‘created’
[08:08:12.585] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.585] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:12.585] | : . Using MultisessionFutureBackend ...
[08:08:12.585] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:12.585] | : . ' Launching futures ...
[08:08:12.586] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:12.586] | : . ' , ; Workers: [n=2]
[08:08:12.586] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:12.587] | : . ' , ; FutureRegistry: ‘workers-a07ac8344f2738daaab5049f3c11db11’
[08:08:12.587] | : . ' , ; requestWorker() ...
[08:08:12.588] | : . ' , ; ` requestNode() ...
[08:08:12.588] | : . ' , ; ` | Number of workers: 2
[08:08:12.588] | : . ' , ; ` | Polling for a free worker ...
[08:08:12.588] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:12.588] | : . ' , ; ` | : . Created empty registry ‘workers-a07ac8344f2738daaab5049f3c11db11’
[08:08:12.588] | : . ' , ; ` | : . Listing all futures
[08:08:12.588] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:12.588] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:12.588] | : . ' , ; ` | : Total time: 0
[08:08:12.589] | : . ' , ; ` | Polling for a free worker ... done
[08:08:12.589] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:12.589] | : . ' , ; ` | : Listing all futures
[08:08:12.589] | : . ' , ; ` | : Number of registered futures: 0
[08:08:12.589] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:12.589] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:12.589] | : . ' , ; ` | Index of first available worker: 1
[08:08:12.589] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:12.651] | : . ' , ; ` | : Worker is functional
[08:08:12.652] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:12.652] | : . ' , ; ` | : . Listing all futures
[08:08:12.652] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:12.652] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:12.652] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:12.652] | : . ' , ; ` requestNode() ... done
[08:08:12.652] | : . ' , ; ` cluster node index: 1
[08:08:12.653] | : . ' , ; requestWorker() ... done
[08:08:12.653] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:12.654] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:12.654] | : . ' , ; launchFuture() ...
[08:08:12.655] | : . ' , ; ` cluster node index: 1
[08:08:12.655] | : . ' , ; ` getFutureData() ...
[08:08:12.655] | : . ' , ; ` | getFutureCore() ...
[08:08:12.655] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:12.655] | : . ' , ; ` | getFutureCore() ... done
[08:08:12.655] | : . ' , ; ` | getFutureCapture() ...
[08:08:12.655] | : . ' , ; ` | getFutureCapture() ... done
[08:08:12.656] | : . ' , ; ` | getFutureContext() ...
[08:08:12.656] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.656] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:12.656] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:12.656] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:12.656] | : . ' , ; ` | getFutureContext() ... done
[08:08:12.657] | : . ' , ; ` getFutureData() ... done
[08:08:12.657] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ...
[08:08:12.657] | : . ' , ; ` | Appended future to position #1
[08:08:12.657] | : . ' , ; ` | Number of registered futures: 1
[08:08:12.658] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ... done
[08:08:12.658] | : . ' , ; launchFuture() ... done
[08:08:12.658] | : . ' , ; MultisessionFuture started
[08:08:12.658] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:12.658] | : . ' Launching futures ... done
[08:08:12.658] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:12.658] | : . Using MultisessionFutureBackend ... done
[08:08:12.658] | : run() for ‘Future’ (<unnamed-16>) ... done
[08:08:12.659] | future(..., label = NULL) ... done
[08:08:12.659] | future(..., label = NULL) ...
[08:08:12.659] | : lazy: FALSE
[08:08:12.659] | : stdout: TRUE
[08:08:12.659] | : conditions: [n=1] ‘condition’
[08:08:12.659] | : gc: FALSE
[08:08:12.659] | : earlySignal: FALSE
[08:08:12.660] | : getGlobalsAndPackages() ...
[08:08:12.660] | : . Searching for globals ...
[08:08:12.664] | : . ' globals found: [1] ‘{’
[08:08:12.664] | : . Searching for globals ... done
[08:08:12.664] | : . Resolving globals: FALSE
[08:08:12.664] | : . Search for packages associated with the globals ...
[08:08:12.664] | : . ' Packages associated with globals: [1] ‘base’
[08:08:12.665] | : . ' Packages: [1] ‘base’
[08:08:12.665] | : . Search for packages associated with the globals ... done
[08:08:12.665] | : . Packages after dropping 'base': [0] 
[08:08:12.665] | : . globals: [0] 
[08:08:12.665] | : . packages: [0] 
[08:08:12.665] | : getGlobalsAndPackages() ... done
[08:08:12.666] | : run() for ‘Future’ (<unnamed-17>) ...
[08:08:12.666] | : . state: ‘created’
[08:08:12.666] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.666] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:12.666] | : . Using MultisessionFutureBackend ...
[08:08:12.666] | : . ' Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:12.667] | : . ' Launching futures ...
[08:08:12.667] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:12.667] | : . ' , ; Workers: [n=2]
[08:08:12.667] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:12.669] | : . ' , ; FutureRegistry: ‘workers-a07ac8344f2738daaab5049f3c11db11’
[08:08:12.669] | : . ' , ; requestWorker() ...
[08:08:12.669] | : . ' , ; ` requestNode() ...
[08:08:12.669] | : . ' , ; ` | Number of workers: 2
[08:08:12.669] | : . ' , ; ` | Polling for a free worker ...
[08:08:12.670] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:12.670] | : . ' , ; ` | : . Listing all futures
[08:08:12.670] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:12.670] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:12.670] | : . ' , ; ` | : Total time: 0
[08:08:12.670] | : . ' , ; ` | Polling for a free worker ... done
[08:08:12.670] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:12.670] | : . ' , ; ` | : Listing all futures
[08:08:12.671] | : . ' , ; ` | : Number of registered futures: 1
[08:08:12.671] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:12.671] | : . ' , ; ` | avail: [n=2] ‘2’
[08:08:12.671] | : . ' , ; ` | Index of first available worker: 2
[08:08:12.671] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:12.756] | : . ' , ; ` | : Worker is functional
[08:08:12.756] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:12.756] | : . ' , ; ` | : . Listing all futures
[08:08:12.756] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:12.757] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:12.757] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:12.757] | : . ' , ; ` requestNode() ... done
[08:08:12.757] | : . ' , ; ` cluster node index: 2
[08:08:12.758] | : . ' , ; requestWorker() ... done
[08:08:12.758] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:12.758] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:12.759] | : . ' , ; launchFuture() ...
[08:08:12.759] | : . ' , ; ` cluster node index: 2
[08:08:12.759] | : . ' , ; ` getFutureData() ...
[08:08:12.759] | : . ' , ; ` | getFutureCore() ...
[08:08:12.760] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:12.760] | : . ' , ; ` | getFutureCore() ... done
[08:08:12.760] | : . ' , ; ` | getFutureCapture() ...
[08:08:12.760] | : . ' , ; ` | getFutureCapture() ... done
[08:08:12.761] | : . ' , ; ` | getFutureContext() ...
[08:08:12.761] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.761] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:12.761] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:12.761] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:12.762] | : . ' , ; ` | getFutureContext() ... done
[08:08:12.762] | : . ' , ; ` getFutureData() ... done
[08:08:12.763] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ...
[08:08:12.763] | : . ' , ; ` | Appended future to position #2
[08:08:12.763] | : . ' , ; ` | Number of registered futures: 2
[08:08:12.763] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ... done
[08:08:12.764] | : . ' , ; launchFuture() ... done
[08:08:12.764] | : . ' , ; MultisessionFuture started
[08:08:12.764] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:12.764] | : . ' Launching futures ... done
[08:08:12.764] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:12.765] | : . Using MultisessionFutureBackend ... done
[08:08:12.765] | : run() for ‘Future’ (<unnamed-17>) ... done
[08:08:12.765] | future(..., label = NULL) ... done
[08:08:12.765] | value() for MultisessionFuture (<unnamed-16>) ...
[08:08:12.766] | : result() for ClusterFuture ...
[08:08:12.767] | : . assertValidConnection() ...
[08:08:12.767] | : . ' cluster node index: 1
[08:08:12.767] | : . assertValidConnection() ... done
[08:08:12.768] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:12.769] | : . ' cluster node index: 1
[08:08:12.771] | : . ' [1] TRUE
[08:08:12.772] | : . ' received data:
[08:08:12.772] | : . ' List of 5
[08:08:12.772] | : . '  $ type   : chr "VALUE"
[08:08:12.772] | : . '  $ value  :List of 16
[08:08:12.772] | : . '   ..$ value              : num 2
[08:08:12.772] | : . '   ..$ visible            : logi TRUE
[08:08:12.772] | : . '   ..$ stdout             : chr ""
[08:08:12.772] | : . '   ..$ conditions         : list()
[08:08:12.772] | : . '   ..$ rng                : logi FALSE
[08:08:12.772] | : . '   ..$ seed               : NULL
[08:08:12.772] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:12.772] | : . '   ..$ misuseConnections  :List of 3
[08:08:12.772] | : . '   .. ..$ added   : NULL
[08:08:12.772] | : . '   .. ..$ removed : NULL
[08:08:12.772] | : . '   .. ..$ replaced: NULL
[08:08:12.772] | : . '   ..$ misuseDevices      : NULL
[08:08:12.772] | : . '   ..$ misuseDefaultDevice: list()
[08:08:12.772] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:12.772] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:12.772] | : . '   ..$ uuid               : chr [1:2] "520028c8fdaaeb77d8ea6b472fe57bea" "16"
[08:08:12.772] | : . '   ..$ session_uuid       : chr "e5beba1688586407d7d2b2846ec169c9"
[08:08:12.772] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:12.772] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:12.772] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:12.772] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:12.772] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:12.772] | : . '   .. .. ..$ pid   : int 68475
[08:08:12.772] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:12.772] | : . '   .. .. ..$ random: int 2147483647
[08:08:12.772] | : . '   ..$ r_info             :List of 4
[08:08:12.772] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:12.772] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:12.772] | : . '   .. ..$ os           : chr "unix"
[08:08:12.772] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:12.772] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:12.772] | : . '   ..$ version            : chr "1.8"
[08:08:12.772] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:12.772] | : . '  $ success: logi TRUE
[08:08:12.772] | : . '  $ time   : 'proc_time' Named num [1:5] 0.07 0.003 0.073 0 0
[08:08:12.772] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:12.772] | : . '  $ tag    : NULL
[08:08:12.786] | : . ' Received FutureResult
[08:08:12.786] | : . ' FutureResult:
[08:08:12.786] | : . ' value: ‘numeric’
[08:08:12.786] | : . ' visible: TRUE
[08:08:12.786] | : . ' stdout: character
[08:08:12.786] | : . ' conditions: [n = 0] 
[08:08:12.786] | : . ' RNG used: FALSE
[08:08:12.786] | : . ' duration: 0.07129693 secs (started 2025-06-17 08:08:12.699981)
[08:08:12.786] | : . ' version: 1.8
[08:08:12.787] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ...
[08:08:12.787] | : . ' , Removed future from position #1
[08:08:12.788] | : . ' , Number of registered futures: 1
[08:08:12.788] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ... done
[08:08:12.788] | : . ' Erased future from future backend
[08:08:12.788] | : . ' result() for ClusterFuture ...
[08:08:12.788] | : . ' , result already collected: FutureResult
[08:08:12.788] | : . ' result() for ClusterFuture ... done
[08:08:12.788] | : . ' signalConditions() ...
[08:08:12.789] | : . ' , include = ‘immediateCondition’
[08:08:12.789] | : . ' , exclude = 
[08:08:12.789] | : . ' , resignal = FALSE
[08:08:12.789] | : . ' , Number of conditions: 0
[08:08:12.789] | : . ' ,  int 0
[08:08:12.789] | : . ' signalConditions() ... done
[08:08:12.790] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:12.790] | : result() for ClusterFuture ... done
[08:08:12.790] | : result() for ClusterFuture ...
[08:08:12.790] | : . result already collected: FutureResult
[08:08:12.790] | : result() for ClusterFuture ... done
[08:08:12.790] | : signalConditions() ...
[08:08:12.790] | : . include = ‘immediateCondition’
[08:08:12.791] | : . exclude = 
[08:08:12.791] | : . resignal = FALSE
[08:08:12.791] | : . Number of conditions: 0
[08:08:12.791] | : .  int 0
[08:08:12.791] | : signalConditions() ... done
[08:08:12.791] | : relay stdout ...
[08:08:12.792] | : relay stdout ... done
[08:08:12.792] | : check for misuse ...
[08:08:12.792] | : check for misuse ... done
[08:08:12.792] | value() for MultisessionFuture (<unnamed-16>) ... done
u$a = 2
[08:08:12.792] | value() for MultisessionFuture (<unnamed-17>) ...
[08:08:12.792] | : result() for ClusterFuture ...
[08:08:12.793] | : . assertValidConnection() ...
[08:08:12.793] | : . ' cluster node index: 2
[08:08:12.793] | : . assertValidConnection() ... done
[08:08:12.793] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:12.793] | : . ' cluster node index: 2
[08:08:12.854] | : . ' [1] TRUE
[08:08:12.855] | : . ' received data:
[08:08:12.857] | : . ' List of 5
[08:08:12.857] | : . '  $ type   : chr "VALUE"
[08:08:12.857] | : . '  $ value  :List of 16
[08:08:12.857] | : . '   ..$ value              : num 4
[08:08:12.857] | : . '   ..$ visible            : logi TRUE
[08:08:12.857] | : . '   ..$ stdout             : chr ""
[08:08:12.857] | : . '   ..$ conditions         : list()
[08:08:12.857] | : . '   ..$ rng                : logi FALSE
[08:08:12.857] | : . '   ..$ seed               : NULL
[08:08:12.857] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:12.857] | : . '   ..$ misuseConnections  :List of 3
[08:08:12.857] | : . '   .. ..$ added   : NULL
[08:08:12.857] | : . '   .. ..$ removed : NULL
[08:08:12.857] | : . '   .. ..$ replaced: NULL
[08:08:12.857] | : . '   ..$ misuseDevices      : NULL
[08:08:12.857] | : . '   ..$ misuseDefaultDevice: list()
[08:08:12.857] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:12.857] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:12.857] | : . '   ..$ uuid               : chr [1:2] "520028c8fdaaeb77d8ea6b472fe57bea" "17"
[08:08:12.857] | : . '   ..$ session_uuid       : chr "634cdd77edaeaf0bc43198488c4b096d"
[08:08:12.857] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:12.857] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:12.857] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:12.857] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:12.857] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:12.857] | : . '   .. .. ..$ pid   : int 68476
[08:08:12.857] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:12.857] | : . '   .. .. ..$ random: int 2147483647
[08:08:12.857] | : . '   ..$ r_info             :List of 4
[08:08:12.857] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:12.857] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:12.857] | : . '   .. ..$ os           : chr "unix"
[08:08:12.857] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:12.857] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:12.857] | : . '   ..$ version            : chr "1.8"
[08:08:12.857] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:12.857] | : . '  $ success: logi TRUE
[08:08:12.857] | : . '  $ time   : 'proc_time' Named num [1:5] 0.046 0.005 0.05 0 0
[08:08:12.857] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:12.857] | : . '  $ tag    : NULL
[08:08:12.868] | : . ' Received FutureResult
[08:08:12.868] | : . ' FutureResult:
[08:08:12.868] | : . ' value: ‘numeric’
[08:08:12.868] | : . ' visible: TRUE
[08:08:12.868] | : . ' stdout: character
[08:08:12.868] | : . ' conditions: [n = 0] 
[08:08:12.868] | : . ' RNG used: FALSE
[08:08:12.868] | : . ' duration: 0.0485394 secs (started 2025-06-17 08:08:12.805396)
[08:08:12.868] | : . ' version: 1.8
[08:08:12.869] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ...
[08:08:12.869] | : . ' , Removed future from position #1
[08:08:12.869] | : . ' , Number of registered futures: 0
[08:08:12.869] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ... done
[08:08:12.869] | : . ' Erased future from future backend
[08:08:12.869] | : . ' result() for ClusterFuture ...
[08:08:12.870] | : . ' , result already collected: FutureResult
[08:08:12.870] | : . ' result() for ClusterFuture ... done
[08:08:12.870] | : . ' signalConditions() ...
[08:08:12.870] | : . ' , include = ‘immediateCondition’
[08:08:12.870] | : . ' , exclude = 
[08:08:12.870] | : . ' , resignal = FALSE
[08:08:12.870] | : . ' , Number of conditions: 0
[08:08:12.870] | : . ' ,  int 0
[08:08:12.871] | : . ' signalConditions() ... done
[08:08:12.871] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:12.871] | : result() for ClusterFuture ... done
[08:08:12.871] | : result() for ClusterFuture ...
[08:08:12.871] | : . result already collected: FutureResult
[08:08:12.871] | : result() for ClusterFuture ... done
[08:08:12.871] | : signalConditions() ...
[08:08:12.871] | : . include = ‘immediateCondition’
[08:08:12.871] | : . exclude = 
[08:08:12.872] | : . resignal = FALSE
[08:08:12.872] | : . Number of conditions: 0
[08:08:12.872] | : .  int 0
[08:08:12.872] | : signalConditions() ... done
[08:08:12.872] | : relay stdout ...
[08:08:12.872] | : relay stdout ... done
[08:08:12.872] | : check for misuse ...
[08:08:12.872] | : check for misuse ... done
[08:08:12.873] | value() for MultisessionFuture (<unnamed-17>) ... done
v$a = 4
[08:08:12.873] | future(..., label = NULL) ...
[08:08:12.873] | : lazy: FALSE
[08:08:12.873] | : stdout: TRUE
[08:08:12.873] | : conditions: [n=1] ‘condition’
[08:08:12.873] | : gc: FALSE
[08:08:12.873] | : earlySignal: FALSE
[08:08:12.873] | : getGlobalsAndPackages() ...
[08:08:12.873] | : . Searching for globals ...
[08:08:12.879] | : . ' globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:12.879] | : . Searching for globals ... done
[08:08:12.879] | : . Resolving globals: FALSE
[08:08:12.879] | : . Search for packages associated with the globals ...
[08:08:12.879] | : . ' Packages associated with globals: [1] ‘base’
[08:08:12.880] | : . ' Packages: [1] ‘base’
[08:08:12.880] | : . Search for packages associated with the globals ... done
[08:08:12.880] | : . Packages after dropping 'base': [0] 
[08:08:12.880] | : . globals: [1] ‘a’
[08:08:12.880] | : . packages: [0] 
[08:08:12.880] | : getGlobalsAndPackages() ... done
[08:08:12.881] | : run() for ‘Future’ (<unnamed-18>) ...
[08:08:12.881] | : . state: ‘created’
[08:08:12.881] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.881] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:12.881] | : . Using MultisessionFutureBackend ...
[08:08:12.881] | : . ' Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:12.881] | : . ' Launching futures ...
[08:08:12.881] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:12.881] | : . ' , ; Workers: [n=2]
[08:08:12.882] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:12.883] | : . ' , ; FutureRegistry: ‘workers-a07ac8344f2738daaab5049f3c11db11’
[08:08:12.883] | : . ' , ; requestWorker() ...
[08:08:12.883] | : . ' , ; ` requestNode() ...
[08:08:12.883] | : . ' , ; ` | Number of workers: 2
[08:08:12.884] | : . ' , ; ` | Polling for a free worker ...
[08:08:12.884] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:12.884] | : . ' , ; ` | : . Listing all futures
[08:08:12.884] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:12.884] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:12.884] | : . ' , ; ` | : Total time: 0
[08:08:12.884] | : . ' , ; ` | Polling for a free worker ... done
[08:08:12.884] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:12.884] | : . ' , ; ` | : Listing all futures
[08:08:12.884] | : . ' , ; ` | : Number of registered futures: 0
[08:08:12.885] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:12.885] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:12.885] | : . ' , ; ` | Index of first available worker: 1
[08:08:12.885] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:12.978] | : . ' , ; ` | : Worker is functional
[08:08:12.978] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:12.978] | : . ' , ; ` | : . Listing all futures
[08:08:12.978] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:12.979] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:12.979] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:12.979] | : . ' , ; ` requestNode() ... done
[08:08:12.979] | : . ' , ; ` cluster node index: 1
[08:08:12.979] | : . ' , ; requestWorker() ... done
[08:08:12.979] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:12.979] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:12.980] | : . ' , ; launchFuture() ...
[08:08:12.980] | : . ' , ; ` cluster node index: 1
[08:08:12.980] | : . ' , ; ` getFutureData() ...
[08:08:12.980] | : . ' , ; ` | getFutureCore() ...
[08:08:12.980] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:12.980] | : . ' , ; ` | getFutureCore() ... done
[08:08:12.980] | : . ' , ; ` | getFutureCapture() ...
[08:08:12.980] | : . ' , ; ` | getFutureCapture() ... done
[08:08:12.980] | : . ' , ; ` | getFutureContext() ...
[08:08:12.981] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.981] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:12.981] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:12.981] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:12.981] | : . ' , ; ` | getFutureContext() ... done
[08:08:12.981] | : . ' , ; ` getFutureData() ... done
[08:08:12.981] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ...
[08:08:12.982] | : . ' , ; ` | Appended future to position #1
[08:08:12.982] | : . ' , ; ` | Number of registered futures: 1
[08:08:12.982] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ... done
[08:08:12.982] | : . ' , ; launchFuture() ... done
[08:08:12.982] | : . ' , ; MultisessionFuture started
[08:08:12.982] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:12.982] | : . ' Launching futures ... done
[08:08:12.982] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:12.982] | : . Using MultisessionFutureBackend ... done
[08:08:12.982] | : run() for ‘Future’ (<unnamed-18>) ... done
[08:08:12.983] | future(..., label = NULL) ... done
[08:08:12.983] | value() for MultisessionFuture (<unnamed-18>) ...
[08:08:12.983] | : result() for ClusterFuture ...
[08:08:12.983] | : . assertValidConnection() ...
[08:08:12.983] | : . ' cluster node index: 1
[08:08:12.983] | : . assertValidConnection() ... done
[08:08:12.984] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:12.984] | : . ' cluster node index: 1
[08:08:13.025] | : . ' [1] TRUE
[08:08:13.025] | : . ' received data:
[08:08:13.025] | : . ' List of 5
[08:08:13.025] | : . '  $ type   : chr "VALUE"
[08:08:13.025] | : . '  $ value  :List of 16
[08:08:13.025] | : . '   ..$ value              : num 2
[08:08:13.025] | : . '   ..$ visible            : logi TRUE
[08:08:13.025] | : . '   ..$ stdout             : chr ""
[08:08:13.025] | : . '   ..$ conditions         : list()
[08:08:13.025] | : . '   ..$ rng                : logi FALSE
[08:08:13.025] | : . '   ..$ seed               : NULL
[08:08:13.025] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:13.025] | : . '   ..$ misuseConnections  :List of 3
[08:08:13.025] | : . '   .. ..$ added   : NULL
[08:08:13.025] | : . '   .. ..$ removed : NULL
[08:08:13.025] | : . '   .. ..$ replaced: NULL
[08:08:13.025] | : . '   ..$ misuseDevices      : NULL
[08:08:13.025] | : . '   ..$ misuseDefaultDevice: list()
[08:08:13.025] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:13"
[08:08:13.025] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:13"
[08:08:13.025] | : . '   ..$ uuid               : chr [1:2] "520028c8fdaaeb77d8ea6b472fe57bea" "18"
[08:08:13.025] | : . '   ..$ session_uuid       : chr "e5beba1688586407d7d2b2846ec169c9"
[08:08:13.025] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:13.025] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:13.025] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:13.025] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:13.025] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:13.025] | : . '   .. .. ..$ pid   : int 68475
[08:08:13.025] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:13.025] | : . '   .. .. ..$ random: int 2147483647
[08:08:13.025] | : . '   ..$ r_info             :List of 4
[08:08:13.025] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:13.025] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:13.025] | : . '   .. ..$ os           : chr "unix"
[08:08:13.025] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:13.025] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:13.025] | : . '   ..$ version            : chr "1.8"
[08:08:13.025] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:13.025] | : . '  $ success: logi TRUE
[08:08:13.025] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:13.025] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:13.025] | : . '  $ tag    : NULL
[08:08:13.036] | : . ' Received FutureResult
[08:08:13.036] | : . ' FutureResult:
[08:08:13.036] | : . ' value: ‘numeric’
[08:08:13.036] | : . ' visible: TRUE
[08:08:13.036] | : . ' stdout: character
[08:08:13.036] | : . ' conditions: [n = 0] 
[08:08:13.036] | : . ' RNG used: FALSE
[08:08:13.036] | : . ' duration: 0.002682447 secs (started 2025-06-17 08:08:13.022152)
[08:08:13.036] | : . ' version: 1.8
[08:08:13.037] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ...
[08:08:13.037] | : . ' , Removed future from position #1
[08:08:13.037] | : . ' , Number of registered futures: 0
[08:08:13.037] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ... done
[08:08:13.037] | : . ' Erased future from future backend
[08:08:13.038] | : . ' result() for ClusterFuture ...
[08:08:13.038] | : . ' , result already collected: FutureResult
[08:08:13.038] | : . ' result() for ClusterFuture ... done
[08:08:13.038] | : . ' signalConditions() ...
[08:08:13.038] | : . ' , include = ‘immediateCondition’
[08:08:13.038] | : . ' , exclude = 
[08:08:13.038] | : . ' , resignal = FALSE
[08:08:13.038] | : . ' , Number of conditions: 0
[08:08:13.038] | : . ' ,  int 0
[08:08:13.039] | : . ' signalConditions() ... done
[08:08:13.039] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:13.039] | : result() for ClusterFuture ... done
[08:08:13.039] | : result() for ClusterFuture ...
[08:08:13.039] | : . result already collected: FutureResult
[08:08:13.039] | : result() for ClusterFuture ... done
[08:08:13.039] | : signalConditions() ...
[08:08:13.039] | : . include = ‘immediateCondition’
[08:08:13.040] | : . exclude = 
[08:08:13.040] | : . resignal = FALSE
[08:08:13.040] | : . Number of conditions: 0
[08:08:13.040] | : .  int 0
[08:08:13.040] | : signalConditions() ... done
[08:08:13.040] | : relay stdout ...
[08:08:13.040] | : relay stdout ... done
[08:08:13.041] | : check for misuse ...
[08:08:13.041] | : check for misuse ... done
[08:08:13.041] | value() for MultisessionFuture (<unnamed-18>) ... done
[08:08:13.041] | future(..., label = NULL) ...
[08:08:13.041] | : lazy: FALSE
[08:08:13.041] | : stdout: TRUE
[08:08:13.041] | : conditions: [n=1] ‘condition’
[08:08:13.041] | : gc: FALSE
[08:08:13.041] | : earlySignal: FALSE
[08:08:13.042] | : getGlobalsAndPackages() ...
[08:08:13.042] | : . Searching for globals ...
[08:08:13.047] | : . ' globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:13.047] | : . Searching for globals ... done
[08:08:13.047] | : . Resolving globals: FALSE
[08:08:13.047] | : . Search for packages associated with the globals ...
[08:08:13.048] | : . ' Packages associated with globals: [1] ‘base’
[08:08:13.048] | : . ' Packages: [1] ‘base’
[08:08:13.048] | : . Search for packages associated with the globals ... done
[08:08:13.048] | : . Packages after dropping 'base': [0] 
[08:08:13.048] | : . globals: [1] ‘a’
[08:08:13.048] | : . packages: [0] 
[08:08:13.048] | : getGlobalsAndPackages() ... done
[08:08:13.049] | : run() for ‘Future’ (<unnamed-19>) ...
[08:08:13.049] | : . state: ‘created’
[08:08:13.049] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:13.049] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:13.049] | : . Using MultisessionFutureBackend ...
[08:08:13.049] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:13.049] | : . ' Launching futures ...
[08:08:13.049] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:13.050] | : . ' , ; Workers: [n=2]
[08:08:13.050] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:13.051] | : . ' , ; FutureRegistry: ‘workers-a07ac8344f2738daaab5049f3c11db11’
[08:08:13.051] | : . ' , ; requestWorker() ...
[08:08:13.051] | : . ' , ; ` requestNode() ...
[08:08:13.052] | : . ' , ; ` | Number of workers: 2
[08:08:13.052] | : . ' , ; ` | Polling for a free worker ...
[08:08:13.052] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.052] | : . ' , ; ` | : . Listing all futures
[08:08:13.052] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:13.052] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.052] | : . ' , ; ` | : Total time: 0
[08:08:13.052] | : . ' , ; ` | Polling for a free worker ... done
[08:08:13.052] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.052] | : . ' , ; ` | : Listing all futures
[08:08:13.053] | : . ' , ; ` | : Number of registered futures: 0
[08:08:13.053] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.053] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:13.053] | : . ' , ; ` | Index of first available worker: 1
[08:08:13.053] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:13.149] | : . ' , ; ` | : Worker is functional
[08:08:13.149] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.149] | : . ' , ; ` | : . Listing all futures
[08:08:13.149] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:13.149] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.150] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:13.150] | : . ' , ; ` requestNode() ... done
[08:08:13.150] | : . ' , ; ` cluster node index: 1
[08:08:13.150] | : . ' , ; requestWorker() ... done
[08:08:13.150] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:13.150] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:13.151] | : . ' , ; launchFuture() ...
[08:08:13.151] | : . ' , ; ` cluster node index: 1
[08:08:13.151] | : . ' , ; ` getFutureData() ...
[08:08:13.151] | : . ' , ; ` | getFutureCore() ...
[08:08:13.151] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:13.151] | : . ' , ; ` | getFutureCore() ... done
[08:08:13.151] | : . ' , ; ` | getFutureCapture() ...
[08:08:13.151] | : . ' , ; ` | getFutureCapture() ... done
[08:08:13.151] | : . ' , ; ` | getFutureContext() ...
[08:08:13.151] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:13.152] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:13.152] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:13.152] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:13.152] | : . ' , ; ` | getFutureContext() ... done
[08:08:13.152] | : . ' , ; ` getFutureData() ... done
[08:08:13.152] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ...
[08:08:13.152] | : . ' , ; ` | Appended future to position #1
[08:08:13.153] | : . ' , ; ` | Number of registered futures: 1
[08:08:13.153] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ... done
[08:08:13.153] | : . ' , ; launchFuture() ... done
[08:08:13.153] | : . ' , ; MultisessionFuture started
[08:08:13.153] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:13.153] | : . ' Launching futures ... done
[08:08:13.153] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:13.153] | : . Using MultisessionFutureBackend ... done
[08:08:13.153] | : run() for ‘Future’ (<unnamed-19>) ... done
[08:08:13.153] | future(..., label = NULL) ... done
[08:08:13.154] | value() for MultisessionFuture (<unnamed-19>) ...
[08:08:13.154] | : result() for ClusterFuture ...
[08:08:13.154] | : . assertValidConnection() ...
[08:08:13.154] | : . ' cluster node index: 1
[08:08:13.154] | : . assertValidConnection() ... done
[08:08:13.154] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:13.155] | : . ' cluster node index: 1
[08:08:13.196] | : . ' [1] TRUE
[08:08:13.196] | : . ' received data:
[08:08:13.196] | : . ' List of 5
[08:08:13.196] | : . '  $ type   : chr "VALUE"
[08:08:13.196] | : . '  $ value  :List of 16
[08:08:13.196] | : . '   ..$ value              : num 2
[08:08:13.196] | : . '   ..$ visible            : logi TRUE
[08:08:13.196] | : . '   ..$ stdout             : chr ""
[08:08:13.196] | : . '   ..$ conditions         : list()
[08:08:13.196] | : . '   ..$ rng                : logi FALSE
[08:08:13.196] | : . '   ..$ seed               : NULL
[08:08:13.196] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:13.196] | : . '   ..$ misuseConnections  :List of 3
[08:08:13.196] | : . '   .. ..$ added   : NULL
[08:08:13.196] | : . '   .. ..$ removed : NULL
[08:08:13.196] | : . '   .. ..$ replaced: NULL
[08:08:13.196] | : . '   ..$ misuseDevices      : NULL
[08:08:13.196] | : . '   ..$ misuseDefaultDevice: list()
[08:08:13.196] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:13"
[08:08:13.196] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:13"
[08:08:13.196] | : . '   ..$ uuid               : chr [1:2] "520028c8fdaaeb77d8ea6b472fe57bea" "19"
[08:08:13.196] | : . '   ..$ session_uuid       : chr "e5beba1688586407d7d2b2846ec169c9"
[08:08:13.196] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:13.196] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:13.196] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:13.196] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:13.196] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:13.196] | : . '   .. .. ..$ pid   : int 68475
[08:08:13.196] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:13.196] | : . '   .. .. ..$ random: int 2147483647
[08:08:13.196] | : . '   ..$ r_info             :List of 4
[08:08:13.196] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:13.196] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:13.196] | : . '   .. ..$ os           : chr "unix"
[08:08:13.196] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:13.196] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:13.196] | : . '   ..$ version            : chr "1.8"
[08:08:13.196] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:13.196] | : . '  $ success: logi TRUE
[08:08:13.196] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.004 0 0
[08:08:13.196] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:13.196] | : . '  $ tag    : NULL
[08:08:13.208] | : . ' Received FutureResult
[08:08:13.208] | : . ' FutureResult:
[08:08:13.208] | : . ' value: ‘numeric’
[08:08:13.208] | : . ' visible: TRUE
[08:08:13.208] | : . ' stdout: character
[08:08:13.208] | : . ' conditions: [n = 0] 
[08:08:13.208] | : . ' RNG used: FALSE
[08:08:13.208] | : . ' duration: 0.002684116 secs (started 2025-06-17 08:08:13.193169)
[08:08:13.208] | : . ' version: 1.8
[08:08:13.208] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ...
[08:08:13.208] | : . ' , Removed future from position #1
[08:08:13.208] | : . ' , Number of registered futures: 0
[08:08:13.209] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ... done
[08:08:13.209] | : . ' Erased future from future backend
[08:08:13.209] | : . ' result() for ClusterFuture ...
[08:08:13.209] | : . ' , result already collected: FutureResult
[08:08:13.209] | : . ' result() for ClusterFuture ... done
[08:08:13.209] | : . ' signalConditions() ...
[08:08:13.209] | : . ' , include = ‘immediateCondition’
[08:08:13.209] | : . ' , exclude = 
[08:08:13.209] | : . ' , resignal = FALSE
[08:08:13.209] | : . ' , Number of conditions: 0
[08:08:13.210] | : . ' ,  int 0
[08:08:13.210] | : . ' signalConditions() ... done
[08:08:13.210] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:13.210] | : result() for ClusterFuture ... done
[08:08:13.210] | : result() for ClusterFuture ...
[08:08:13.210] | : . result already collected: FutureResult
[08:08:13.211] | : result() for ClusterFuture ... done
[08:08:13.211] | : signalConditions() ...
[08:08:13.211] | : . include = ‘immediateCondition’
[08:08:13.211] | : . exclude = 
[08:08:13.211] | : . resignal = FALSE
[08:08:13.211] | : . Number of conditions: 0
[08:08:13.211] | : .  int 0
[08:08:13.212] | : signalConditions() ... done
[08:08:13.212] | : relay stdout ...
[08:08:13.212] | : relay stdout ... done
[08:08:13.212] | : check for misuse ...
[08:08:13.212] | : check for misuse ... done
[08:08:13.212] | value() for MultisessionFuture (<unnamed-19>) ... done
[08:08:13.212] | future(..., label = NULL) ...
[08:08:13.212] | : lazy: FALSE
[08:08:13.212] | : stdout: TRUE
[08:08:13.213] | : conditions: [n=1] ‘condition’
[08:08:13.213] | : gc: FALSE
[08:08:13.213] | : earlySignal: FALSE
[08:08:13.213] | : getGlobalsAndPackages() ...
[08:08:13.213] | : . Searching for globals ...
[08:08:13.218] | : . ' globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:13.218] | : . Searching for globals ... done
[08:08:13.218] | : . Resolving globals: FALSE
[08:08:13.219] | : . Search for packages associated with the globals ...
[08:08:13.219] | : . ' Packages associated with globals: [1] ‘base’
[08:08:13.219] | : . ' Packages: [1] ‘base’
[08:08:13.219] | : . Search for packages associated with the globals ... done
[08:08:13.219] | : . Packages after dropping 'base': [0] 
[08:08:13.219] | : . globals: [1] ‘a’
[08:08:13.220] | : . packages: [0] 
[08:08:13.220] | : getGlobalsAndPackages() ... done
[08:08:13.220] | : run() for ‘Future’ (<unnamed-20>) ...
[08:08:13.220] | : . state: ‘created’
[08:08:13.220] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:13.220] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:13.220] | : . Using MultisessionFutureBackend ...
[08:08:13.220] | : . ' Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:13.221] | : . ' Launching futures ...
[08:08:13.221] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:13.221] | : . ' , ; Workers: [n=2]
[08:08:13.221] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:13.222] | : . ' , ; FutureRegistry: ‘workers-a07ac8344f2738daaab5049f3c11db11’
[08:08:13.223] | : . ' , ; requestWorker() ...
[08:08:13.223] | : . ' , ; ` requestNode() ...
[08:08:13.223] | : . ' , ; ` | Number of workers: 2
[08:08:13.223] | : . ' , ; ` | Polling for a free worker ...
[08:08:13.223] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.223] | : . ' , ; ` | : . Listing all futures
[08:08:13.223] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:13.223] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.223] | : . ' , ; ` | : Total time: 0
[08:08:13.223] | : . ' , ; ` | Polling for a free worker ... done
[08:08:13.224] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.224] | : . ' , ; ` | : Listing all futures
[08:08:13.224] | : . ' , ; ` | : Number of registered futures: 0
[08:08:13.224] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.224] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:13.224] | : . ' , ; ` | Index of first available worker: 1
[08:08:13.224] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:13.317] | : . ' , ; ` | : Worker is functional
[08:08:13.317] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.318] | : . ' , ; ` | : . Listing all futures
[08:08:13.318] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:13.318] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.318] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:13.318] | : . ' , ; ` requestNode() ... done
[08:08:13.318] | : . ' , ; ` cluster node index: 1
[08:08:13.318] | : . ' , ; requestWorker() ... done
[08:08:13.318] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:13.319] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:13.319] | : . ' , ; launchFuture() ...
[08:08:13.319] | : . ' , ; ` cluster node index: 1
[08:08:13.319] | : . ' , ; ` getFutureData() ...
[08:08:13.319] | : . ' , ; ` | getFutureCore() ...
[08:08:13.319] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:13.319] | : . ' , ; ` | getFutureCore() ... done
[08:08:13.320] | : . ' , ; ` | getFutureCapture() ...
[08:08:13.320] | : . ' , ; ` | getFutureCapture() ... done
[08:08:13.320] | : . ' , ; ` | getFutureContext() ...
[08:08:13.320] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:13.320] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:13.320] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:13.320] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:13.320] | : . ' , ; ` | getFutureContext() ... done
[08:08:13.320] | : . ' , ; ` getFutureData() ... done
[08:08:13.321] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ...
[08:08:13.321] | : . ' , ; ` | Appended future to position #1
[08:08:13.321] | : . ' , ; ` | Number of registered futures: 1
[08:08:13.321] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ... done
[08:08:13.321] | : . ' , ; launchFuture() ... done
[08:08:13.321] | : . ' , ; MultisessionFuture started
[08:08:13.321] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:13.322] | : . ' Launching futures ... done
[08:08:13.322] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:13.322] | : . Using MultisessionFutureBackend ... done
[08:08:13.322] | : run() for ‘Future’ (<unnamed-20>) ... done
[08:08:13.322] | future(..., label = NULL) ... done
[08:08:13.322] | value() for MultisessionFuture (<unnamed-20>) ...
[08:08:13.322] | : result() for ClusterFuture ...
[08:08:13.322] | : . assertValidConnection() ...
[08:08:13.323] | : . ' cluster node index: 1
[08:08:13.323] | : . assertValidConnection() ... done
[08:08:13.323] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:13.323] | : . ' cluster node index: 1
[08:08:13.365] | : . ' [1] TRUE
[08:08:13.365] | : . ' received data:
[08:08:13.365] | : . ' List of 5
[08:08:13.365] | : . '  $ type   : chr "VALUE"
[08:08:13.365] | : . '  $ value  :List of 16
[08:08:13.365] | : . '   ..$ value              : num 2
[08:08:13.365] | : . '   ..$ visible            : logi TRUE
[08:08:13.365] | : . '   ..$ stdout             : chr ""
[08:08:13.365] | : . '   ..$ conditions         : list()
[08:08:13.365] | : . '   ..$ rng                : logi FALSE
[08:08:13.365] | : . '   ..$ seed               : NULL
[08:08:13.365] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:13.365] | : . '   ..$ misuseConnections  :List of 3
[08:08:13.365] | : . '   .. ..$ added   : NULL
[08:08:13.365] | : . '   .. ..$ removed : NULL
[08:08:13.365] | : . '   .. ..$ replaced: NULL
[08:08:13.365] | : . '   ..$ misuseDevices      : NULL
[08:08:13.365] | : . '   ..$ misuseDefaultDevice: list()
[08:08:13.365] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:13"
[08:08:13.365] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:13"
[08:08:13.365] | : . '   ..$ uuid               : chr [1:2] "520028c8fdaaeb77d8ea6b472fe57bea" "20"
[08:08:13.365] | : . '   ..$ session_uuid       : chr "e5beba1688586407d7d2b2846ec169c9"
[08:08:13.365] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:13.365] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:13.365] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:13.365] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:13.365] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:13.365] | : . '   .. .. ..$ pid   : int 68475
[08:08:13.365] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:13.365] | : . '   .. .. ..$ random: int 2147483647
[08:08:13.365] | : . '   ..$ r_info             :List of 4
[08:08:13.365] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:13.365] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:13.365] | : . '   .. ..$ os           : chr "unix"
[08:08:13.365] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:13.365] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:13.365] | : . '   ..$ version            : chr "1.8"
[08:08:13.365] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:13.365] | : . '  $ success: logi TRUE
[08:08:13.365] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:13.365] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:13.365] | : . '  $ tag    : NULL
[08:08:13.376] | : . ' Received FutureResult
[08:08:13.377] | : . ' FutureResult:
[08:08:13.377] | : . ' value: ‘numeric’
[08:08:13.377] | : . ' visible: TRUE
[08:08:13.377] | : . ' stdout: character
[08:08:13.377] | : . ' conditions: [n = 0] 
[08:08:13.377] | : . ' RNG used: FALSE
[08:08:13.377] | : . ' duration: 0.00262475 secs (started 2025-06-17 08:08:13.362319)
[08:08:13.377] | : . ' version: 1.8
[08:08:13.377] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ...
[08:08:13.377] | : . ' , Removed future from position #1
[08:08:13.377] | : . ' , Number of registered futures: 0
[08:08:13.377] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ... done
[08:08:13.378] | : . ' Erased future from future backend
[08:08:13.378] | : . ' result() for ClusterFuture ...
[08:08:13.378] | : . ' , result already collected: FutureResult
[08:08:13.378] | : . ' result() for ClusterFuture ... done
[08:08:13.378] | : . ' signalConditions() ...
[08:08:13.378] | : . ' , include = ‘immediateCondition’
[08:08:13.378] | : . ' , exclude = 
[08:08:13.378] | : . ' , resignal = FALSE
[08:08:13.378] | : . ' , Number of conditions: 0
[08:08:13.378] | : . ' ,  int 0
[08:08:13.379] | : . ' signalConditions() ... done
[08:08:13.379] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:13.379] | : result() for ClusterFuture ... done
[08:08:13.379] | : result() for ClusterFuture ...
[08:08:13.379] | : . result already collected: FutureResult
[08:08:13.379] | : result() for ClusterFuture ... done
[08:08:13.380] | : signalConditions() ...
[08:08:13.380] | : . include = ‘immediateCondition’
[08:08:13.380] | : . exclude = 
[08:08:13.380] | : . resignal = FALSE
[08:08:13.380] | : . Number of conditions: 0
[08:08:13.380] | : .  int 0
[08:08:13.380] | : signalConditions() ... done
[08:08:13.380] | : relay stdout ...
[08:08:13.381] | : relay stdout ... done
[08:08:13.381] | : check for misuse ...
[08:08:13.381] | : check for misuse ... done
[08:08:13.381] | value() for MultisessionFuture (<unnamed-20>) ... done
[08:08:13.381] | future(..., label = NULL) ...
[08:08:13.381] | : lazy: TRUE
[08:08:13.381] | : stdout: TRUE
[08:08:13.381] | : conditions: [n=1] ‘condition’
[08:08:13.382] | : gc: FALSE
[08:08:13.382] | : earlySignal: FALSE
[08:08:13.382] | : getGlobalsAndPackages() ...
[08:08:13.382] | : . Searching for globals ...
[08:08:13.389] | : . ' globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:13.389] | : . Searching for globals ... done
[08:08:13.389] | : . Resolving globals: FALSE
[08:08:13.389] | : . Search for packages associated with the globals ...
[08:08:13.390] | : . ' Packages associated with globals: [1] ‘base’
[08:08:13.390] | : . ' Packages: [1] ‘base’
[08:08:13.390] | : . Search for packages associated with the globals ... done
[08:08:13.390] | : . Packages after dropping 'base': [0] 
[08:08:13.390] | : . globals: [1] ‘a’
[08:08:13.390] | : . packages: [0] 
[08:08:13.390] | : getGlobalsAndPackages() ... done
[08:08:13.391] | future(..., label = NULL) ... done
[08:08:13.391] | value() for Future (<unnamed-21>) ...
[08:08:13.391] | : run() for ‘Future’ (<unnamed-21>) ...
[08:08:13.391] | : . state: ‘created’
[08:08:13.391] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:13.391] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:13.391] | : . Using MultisessionFutureBackend ...
[08:08:13.391] | : . ' Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:13.391] | : . ' Launching futures ...
[08:08:13.392] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:13.392] | : . ' , ; Workers: [n=2]
[08:08:13.392] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:13.393] | : . ' , ; FutureRegistry: ‘workers-a07ac8344f2738daaab5049f3c11db11’
[08:08:13.393] | : . ' , ; requestWorker() ...
[08:08:13.394] | : . ' , ; ` requestNode() ...
[08:08:13.394] | : . ' , ; ` | Number of workers: 2
[08:08:13.394] | : . ' , ; ` | Polling for a free worker ...
[08:08:13.394] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.394] | : . ' , ; ` | : . Listing all futures
[08:08:13.394] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:13.394] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.394] | : . ' , ; ` | : Total time: 0
[08:08:13.394] | : . ' , ; ` | Polling for a free worker ... done
[08:08:13.394] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.395] | : . ' , ; ` | : Listing all futures
[08:08:13.395] | : . ' , ; ` | : Number of registered futures: 0
[08:08:13.395] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.395] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:13.395] | : . ' , ; ` | Index of first available worker: 1
[08:08:13.395] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:13.458] | : . ' , ; ` | : Worker is functional
[08:08:13.458] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.459] | : . ' , ; ` | : . Listing all futures
[08:08:13.459] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:13.459] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.459] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:13.459] | : . ' , ; ` requestNode() ... done
[08:08:13.459] | : . ' , ; ` cluster node index: 1
[08:08:13.459] | : . ' , ; requestWorker() ... done
[08:08:13.459] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:13.460] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:13.460] | : . ' , ; launchFuture() ...
[08:08:13.460] | : . ' , ; ` cluster node index: 1
[08:08:13.460] | : . ' , ; ` getFutureData() ...
[08:08:13.460] | : . ' , ; ` | getFutureCore() ...
[08:08:13.460] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:13.461] | : . ' , ; ` | getFutureCore() ... done
[08:08:13.461] | : . ' , ; ` | getFutureCapture() ...
[08:08:13.461] | : . ' , ; ` | getFutureCapture() ... done
[08:08:13.461] | : . ' , ; ` | getFutureContext() ...
[08:08:13.461] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:13.461] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:13.461] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:13.461] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:13.461] | : . ' , ; ` | getFutureContext() ... done
[08:08:13.462] | : . ' , ; ` getFutureData() ... done
[08:08:13.462] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ...
[08:08:13.462] | : . ' , ; ` | Appended future to position #1
[08:08:13.462] | : . ' , ; ` | Number of registered futures: 1
[08:08:13.462] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ... done
[08:08:13.462] | : . ' , ; launchFuture() ... done
[08:08:13.462] | : . ' , ; MultisessionFuture started
[08:08:13.463] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:13.463] | : . ' Launching futures ... done
[08:08:13.463] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:13.463] | : . Using MultisessionFutureBackend ... done
[08:08:13.463] | : run() for ‘Future’ (<unnamed-21>) ... done
[08:08:13.463] | : result() for ClusterFuture ...
[08:08:13.463] | : . assertValidConnection() ...
[08:08:13.463] | : . ' cluster node index: 1
[08:08:13.464] | : . assertValidConnection() ... done
[08:08:13.464] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:13.464] | : . ' cluster node index: 1
[08:08:13.506] | : . ' [1] TRUE
[08:08:13.506] | : . ' received data:
[08:08:13.506] | : . ' List of 5
[08:08:13.506] | : . '  $ type   : chr "VALUE"
[08:08:13.506] | : . '  $ value  :List of 16
[08:08:13.506] | : . '   ..$ value              : num 2
[08:08:13.506] | : . '   ..$ visible            : logi TRUE
[08:08:13.506] | : . '   ..$ stdout             : chr ""
[08:08:13.506] | : . '   ..$ conditions         : list()
[08:08:13.506] | : . '   ..$ rng                : logi FALSE
[08:08:13.506] | : . '   ..$ seed               : NULL
[08:08:13.506] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:13.506] | : . '   ..$ misuseConnections  :List of 3
[08:08:13.506] | : . '   .. ..$ added   : NULL
[08:08:13.506] | : . '   .. ..$ removed : NULL
[08:08:13.506] | : . '   .. ..$ replaced: NULL
[08:08:13.506] | : . '   ..$ misuseDevices      : NULL
[08:08:13.506] | : . '   ..$ misuseDefaultDevice: list()
[08:08:13.506] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:13"
[08:08:13.506] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:13"
[08:08:13.506] | : . '   ..$ uuid               : chr [1:2] "520028c8fdaaeb77d8ea6b472fe57bea" "21"
[08:08:13.506] | : . '   ..$ session_uuid       : chr "e5beba1688586407d7d2b2846ec169c9"
[08:08:13.506] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:13.506] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:13.506] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:13.506] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:13.506] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:13.506] | : . '   .. .. ..$ pid   : int 68475
[08:08:13.506] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:13.506] | : . '   .. .. ..$ random: int 2147483647
[08:08:13.506] | : . '   ..$ r_info             :List of 4
[08:08:13.506] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:13.506] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:13.506] | : . '   .. ..$ os           : chr "unix"
[08:08:13.506] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:13.506] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:13.506] | : . '   ..$ version            : chr "1.8"
[08:08:13.506] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:13.506] | : . '  $ success: logi TRUE
[08:08:13.506] | : . '  $ time   : 'proc_time' Named num [1:5] 0.002 0 0.004 0 0
[08:08:13.506] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:13.506] | : . '  $ tag    : NULL
[08:08:13.517] | : . ' Received FutureResult
[08:08:13.517] | : . ' FutureResult:
[08:08:13.517] | : . ' value: ‘numeric’
[08:08:13.517] | : . ' visible: TRUE
[08:08:13.517] | : . ' stdout: character
[08:08:13.517] | : . ' conditions: [n = 0] 
[08:08:13.517] | : . ' RNG used: FALSE
[08:08:13.517] | : . ' duration: 0.002604961 secs (started 2025-06-17 08:08:13.50317)
[08:08:13.517] | : . ' version: 1.8
[08:08:13.518] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ...
[08:08:13.518] | : . ' , Removed future from position #1
[08:08:13.518] | : . ' , Number of registered futures: 0
[08:08:13.518] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ... done
[08:08:13.518] | : . ' Erased future from future backend
[08:08:13.519] | : . ' result() for ClusterFuture ...
[08:08:13.519] | : . ' , result already collected: FutureResult
[08:08:13.519] | : . ' result() for ClusterFuture ... done
[08:08:13.519] | : . ' signalConditions() ...
[08:08:13.519] | : . ' , include = ‘immediateCondition’
[08:08:13.519] | : . ' , exclude = 
[08:08:13.519] | : . ' , resignal = FALSE
[08:08:13.519] | : . ' , Number of conditions: 0
[08:08:13.519] | : . ' ,  int 0
[08:08:13.520] | : . ' signalConditions() ... done
[08:08:13.520] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:13.520] | : result() for ClusterFuture ... done
[08:08:13.520] | : result() for ClusterFuture ...
[08:08:13.520] | : . result already collected: FutureResult
[08:08:13.520] | : result() for ClusterFuture ... done
[08:08:13.520] | : signalConditions() ...
[08:08:13.520] | : . include = ‘immediateCondition’
[08:08:13.521] | : . exclude = 
[08:08:13.521] | : . resignal = FALSE
[08:08:13.521] | : . Number of conditions: 0
[08:08:13.521] | : .  int 0
[08:08:13.521] | : signalConditions() ... done
[08:08:13.521] | : relay stdout ...
[08:08:13.521] | : relay stdout ... done
[08:08:13.522] | : check for misuse ...
[08:08:13.522] | : check for misuse ... done
[08:08:13.522] | value() for Future (<unnamed-21>) ... done
[08:08:13.522] | future(..., label = NULL) ...
[08:08:13.522] | : lazy: TRUE
[08:08:13.522] | : stdout: TRUE
[08:08:13.522] | : conditions: [n=1] ‘condition’
[08:08:13.522] | : gc: FALSE
[08:08:13.522] | : earlySignal: FALSE
[08:08:13.523] | : getGlobalsAndPackages() ...
[08:08:13.523] | : . Searching for globals ...
[08:08:13.528] | : . ' globals found: [3] ‘{’, ‘*’, ‘a’
[08:08:13.528] | : . Searching for globals ... done
[08:08:13.528] | : . Resolving globals: FALSE
[08:08:13.528] | : . Search for packages associated with the globals ...
[08:08:13.528] | : . ' Packages associated with globals: [1] ‘base’
[08:08:13.529] | : . ' Packages: [1] ‘base’
[08:08:13.529] | : . Search for packages associated with the globals ... done
[08:08:13.529] | : . Packages after dropping 'base': [0] 
[08:08:13.529] | : . globals: [1] ‘a’
[08:08:13.529] | : . packages: [0] 
[08:08:13.529] | : getGlobalsAndPackages() ... done
[08:08:13.530] | future(..., label = NULL) ... done
[08:08:13.530] | value() for Future (<unnamed-22>) ...
[08:08:13.530] | : run() for ‘Future’ (<unnamed-22>) ...
[08:08:13.530] | : . state: ‘created’
[08:08:13.530] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:13.530] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:13.530] | : . Using MultisessionFutureBackend ...
[08:08:13.530] | : . ' Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:13.530] | : . ' Launching futures ...
[08:08:13.531] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:13.531] | : . ' , ; Workers: [n=2]
[08:08:13.531] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:13.532] | : . ' , ; FutureRegistry: ‘workers-a07ac8344f2738daaab5049f3c11db11’
[08:08:13.533] | : . ' , ; requestWorker() ...
[08:08:13.533] | : . ' , ; ` requestNode() ...
[08:08:13.533] | : . ' , ; ` | Number of workers: 2
[08:08:13.533] | : . ' , ; ` | Polling for a free worker ...
[08:08:13.533] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.533] | : . ' , ; ` | : . Listing all futures
[08:08:13.533] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:13.533] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.533] | : . ' , ; ` | : Total time: 0
[08:08:13.533] | : . ' , ; ` | Polling for a free worker ... done
[08:08:13.534] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.534] | : . ' , ; ` | : Listing all futures
[08:08:13.534] | : . ' , ; ` | : Number of registered futures: 0
[08:08:13.534] | : . ' , ; ` | FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.534] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:13.534] | : . ' , ; ` | Index of first available worker: 1
[08:08:13.534] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:13.627] | : . ' , ; ` | : Worker is functional
[08:08:13.627] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ...
[08:08:13.627] | : . ' , ; ` | : . Listing all futures
[08:08:13.627] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:13.627] | : . ' , ; ` | : FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'list', earlySignal = 0) ... done
[08:08:13.628] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:13.628] | : . ' , ; ` requestNode() ... done
[08:08:13.628] | : . ' , ; ` cluster node index: 1
[08:08:13.628] | : . ' , ; requestWorker() ... done
[08:08:13.628] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:13.628] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:13.628] | : . ' , ; launchFuture() ...
[08:08:13.629] | : . ' , ; ` cluster node index: 1
[08:08:13.629] | : . ' , ; ` getFutureData() ...
[08:08:13.629] | : . ' , ; ` | getFutureCore() ...
[08:08:13.629] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:13.629] | : . ' , ; ` | getFutureCore() ... done
[08:08:13.629] | : . ' , ; ` | getFutureCapture() ...
[08:08:13.629] | : . ' , ; ` | getFutureCapture() ... done
[08:08:13.629] | : . ' , ; ` | getFutureContext() ...
[08:08:13.629] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:13.630] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:13.630] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:13.630] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:13.630] | : . ' , ; ` | getFutureContext() ... done
[08:08:13.630] | : . ' , ; ` getFutureData() ... done
[08:08:13.630] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ...
[08:08:13.630] | : . ' , ; ` | Appended future to position #1
[08:08:13.631] | : . ' , ; ` | Number of registered futures: 1
[08:08:13.631] | : . ' , ; ` FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'add', earlySignal = 0) ... done
[08:08:13.631] | : . ' , ; launchFuture() ... done
[08:08:13.631] | : . ' , ; MultisessionFuture started
[08:08:13.631] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:13.631] | : . ' Launching futures ... done
[08:08:13.631] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:13.631] | : . Using MultisessionFutureBackend ... done
[08:08:13.631] | : run() for ‘Future’ (<unnamed-22>) ... done
[08:08:13.632] | : result() for ClusterFuture ...
[08:08:13.632] | : . assertValidConnection() ...
[08:08:13.632] | : . ' cluster node index: 1
[08:08:13.632] | : . assertValidConnection() ... done
[08:08:13.632] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:13.632] | : . ' cluster node index: 1
[08:08:13.674] | : . ' [1] TRUE
[08:08:13.674] | : . ' received data:
[08:08:13.675] | : . ' List of 5
[08:08:13.675] | : . '  $ type   : chr "VALUE"
[08:08:13.675] | : . '  $ value  :List of 16
[08:08:13.675] | : . '   ..$ value              : num 2
[08:08:13.675] | : . '   ..$ visible            : logi TRUE
[08:08:13.675] | : . '   ..$ stdout             : chr ""
[08:08:13.675] | : . '   ..$ conditions         : list()
[08:08:13.675] | : . '   ..$ rng                : logi FALSE
[08:08:13.675] | : . '   ..$ seed               : NULL
[08:08:13.675] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:13.675] | : . '   ..$ misuseConnections  :List of 3
[08:08:13.675] | : . '   .. ..$ added   : NULL
[08:08:13.675] | : . '   .. ..$ removed : NULL
[08:08:13.675] | : . '   .. ..$ replaced: NULL
[08:08:13.675] | : . '   ..$ misuseDevices      : NULL
[08:08:13.675] | : . '   ..$ misuseDefaultDevice: list()
[08:08:13.675] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:13"
[08:08:13.675] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:13"
[08:08:13.675] | : . '   ..$ uuid               : chr [1:2] "520028c8fdaaeb77d8ea6b472fe57bea" "22"
[08:08:13.675] | : . '   ..$ session_uuid       : chr "e5beba1688586407d7d2b2846ec169c9"
[08:08:13.675] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:13.675] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:13.675] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:13.675] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:13.675] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:13.675] | : . '   .. .. ..$ pid   : int 68475
[08:08:13.675] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:12"
[08:08:13.675] | : . '   .. .. ..$ random: int 2147483647
[08:08:13.675] | : . '   ..$ r_info             :List of 4
[08:08:13.675] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:13.675] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:13.675] | : . '   .. ..$ os           : chr "unix"
[08:08:13.675] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:13.675] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:13.675] | : . '   ..$ version            : chr "1.8"
[08:08:13.675] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:13.675] | : . '  $ success: logi TRUE
[08:08:13.675] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:13.675] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:13.675] | : . '  $ tag    : NULL
[08:08:13.687] | : . ' Received FutureResult
[08:08:13.687] | : . ' FutureResult:
[08:08:13.687] | : . ' value: ‘numeric’
[08:08:13.687] | : . ' visible: TRUE
[08:08:13.687] | : . ' stdout: character
[08:08:13.687] | : . ' conditions: [n = 0] 
[08:08:13.687] | : . ' RNG used: FALSE
[08:08:13.687] | : . ' duration: 0.002863169 secs (started 2025-06-17 08:08:13.671244)
[08:08:13.687] | : . ' version: 1.8
[08:08:13.688] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ...
[08:08:13.688] | : . ' , Removed future from position #1
[08:08:13.688] | : . ' , Number of registered futures: 0
[08:08:13.688] | : . ' FutureRegistry('workers-a07ac8344f2738daaab5049f3c11db11', action = 'remove', earlySignal = 0) ... done
[08:08:13.688] | : . ' Erased future from future backend
[08:08:13.688] | : . ' result() for ClusterFuture ...
[08:08:13.689] | : . ' , result already collected: FutureResult
[08:08:13.689] | : . ' result() for ClusterFuture ... done
[08:08:13.689] | : . ' signalConditions() ...
[08:08:13.689] | : . ' , include = ‘immediateCondition’
[08:08:13.689] | : . ' , exclude = 
[08:08:13.689] | : . ' , resignal = FALSE
[08:08:13.689] | : . ' , Number of conditions: 0
[08:08:13.689] | : . ' ,  int 0
[08:08:13.690] | : . ' signalConditions() ... done
[08:08:13.690] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:13.690] | : result() for ClusterFuture ... done
[08:08:13.690] | : result() for ClusterFuture ...
[08:08:13.690] | : . result already collected: FutureResult
[08:08:13.690] | : result() for ClusterFuture ... done
[08:08:13.690] | : signalConditions() ...
[08:08:13.690] | : . include = ‘immediateCondition’
[08:08:13.690] | : . exclude = 
[08:08:13.691] | : . resignal = FALSE
[08:08:13.691] | : . Number of conditions: 0
[08:08:13.691] | : .  int 0
[08:08:13.691] | : signalConditions() ... done
[08:08:13.691] | : relay stdout ...
[08:08:13.691] | : relay stdout ... done
[08:08:13.691] | : check for misuse ...
[08:08:13.692] | : check for misuse ... done
[08:08:13.692] | value() for Future (<unnamed-22>) ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE

> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE

> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=1s, sys.self=0.1s, elapsed=3s, user.child=0.6s, sys.child=0.5s
Test ‘futureAssign’ ... success
> 
