
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-rng_utils.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("rng_utils")
Test ‘rng_utils’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-rng_utils.R’

> message("*** RNG ...")
*** RNG ...

> set_random_seed(seed = NULL)
Warning in rm(list = ".Random.seed", envir = env, inherits = FALSE) :
  object '.Random.seed' not found

> seed <- get_random_seed()

> stopifnot(is.null(seed))

> set_random_seed(seed = 42)

> seed <- get_random_seed()

> stopifnot(identical(seed, 42))

> res <- tryCatch({
+     seed <- as_lecyer_cmrg_seed(seed = FALSE)
+ }, error = identity)

> print(res)
<simpleError: Argument 'seed' must be TRUE if logical: FALSE>

> stopifnot(inherits(res, "error"))

> seed <- as_lecyer_cmrg_seed(seed = 42)
Warning in RNGkind("L'Ecuyer-CMRG") :
  '.Random.seed[1]' is not a valid RNG kind so ignored

> str(seed)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670

> stopifnot(is_lecyer_cmrg_seed(seed))

> set_random_seed(seed = seed)

> stopifnot(identical(get_random_seed(), seed))

> seed2 <- as_lecyer_cmrg_seed(seed = TRUE)

> str(seed2)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670

> stopifnot(identical(seed2, seed))

> seed3 <- as_lecyer_cmrg_seed(seed = seed)

> str(seed3)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670

> stopifnot(identical(seed3, seed))

> seed4 <- as_lecyer_cmrg_seed(seed = NA)

> str(seed4)
 int [1:7] 10407 1279540750 -941988041 -2007404020 745992093 -1794778694 2071448563

> stopifnot(is_lecyer_cmrg_seed(seed4))

> message(" - exceptions ...")
 - exceptions ...

> seed_invalid <- seed + 1

> res <- tryCatch({
+     seed <- as_lecyer_cmrg_seed(seed = seed_invalid)
+ }, error = identity)

> print(res)
<simpleError: Argument 'seed' must be L'Ecuyer-CMRG RNG seed as returned by parallel::nextRNGStream() or an single integer:  int [1:7] 10408 -2133391686 507561767 1260545904 1362917093 -1772566378 -1344458669>

> stopifnot(inherits(res, "error"))

> res <- tryCatch({
+     seed <- as_lecyer_cmrg_seed(seed = 1:2)
+ }, error = identity)

> print(res)
<simpleError: Argument 'seed' must be L'Ecuyer-CMRG RNG seed as returned by parallel::nextRNGStream() or an single integer:  int [1:2] 1 2>

> stopifnot(inherits(res, "error"))

> message(" - replicated RNG draws")
 - replicated RNG draws

> sample.int(n = 1, size = 1, replace = FALSE)
[1] 1

> seed_org <- get_random_seed()

> set.seed(42)

> seed_before <- get_random_seed()

> kind_before <- RNGkind()

> x <- sample.int(100, size = 5)

> y <- sample.int(100, size = 5)

> seed_after <- get_random_seed()

> kind_after <- RNGkind()

> print(c(x, y))
 [1]  2  4 63 76 97  9 85 10 66 23

> set_random_seed(seed_before)

> kind_before2 <- RNGkind()

> z <- sample.int(100, size = 10)

> seed_after2 <- get_random_seed()

> kind_after2 <- RNGkind()

> print(z)
 [1]  2  4 63 76 97  9 85 10 66 23

> stopifnot(identical(seed_after2, seed_after))

> stopifnot(identical(kind_before2, kind_before))

> stopifnot(identical(kind_after2, kind_after))

> if (getRversion() >= "4.0.0") {
+     stopifnot(identical(z, c(x, y)))
+ } else {
+     stopifnot(identical(z[seq_along(x)], x))
+ }

> set_random_seed(seed_org)

> stopifnot(identical(get_random_seed(), seed_org))

> message("*** RNG ... DONE")
*** RNG ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.07s, sys.self=0.004s, elapsed=0.08s, user.child=0.001s, sys.child=0.004s
Test ‘rng_utils’ ... success
> 
